
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ac0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  08010d60  08010d60  00011d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011bf8  08011bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011c00  08011c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011c04  08011c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08011c08  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fb0  24000158  08011d60  00013158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002108  08011d60  00014108  2**0
                  ALLOC
  9 ._D3_Area     00000004  38000000  38000000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  00015004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fdd8  00000000  00000000  00015032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000644b  00000000  00000000  00044e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f8  00000000  00000000  0004b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f9  00000000  00000000  0004d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f875  00000000  00000000  0004ec49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000315f4  00000000  00000000  0008e4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d601  00000000  00000000  000bfab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0023d0b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fb8  00000000  00000000  0023d16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00246124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  002461a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00246399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010d48 	.word	0x08010d48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08010d48 	.word	0x08010d48

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000386:	f107 031c 	add.w	r3, r7, #28
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000392:	463b      	mov	r3, r7
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003a6:	4a30      	ldr	r2, [pc, #192]	@ (8000468 <MX_ADC1_Init+0xe8>)
 80003a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003be:	2204      	movs	r2, #4
 80003c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80003ce:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_ADC1_Init+0xe4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000400:	4818      	ldr	r0, [pc, #96]	@ (8000464 <MX_ADC1_Init+0xe4>)
 8000402:	f001 fc81 	bl	8001d08 <HAL_ADC_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800040c:	f000 fd9e 	bl	8000f4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	4619      	mov	r1, r3
 800041a:	4812      	ldr	r0, [pc, #72]	@ (8000464 <MX_ADC1_Init+0xe4>)
 800041c:	f002 fd90 	bl	8002f40 <HAL_ADCEx_MultiModeConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000426:	f000 fd91 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_ADC1_Init+0xec>)
 800042c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042e:	2306      	movs	r3, #6
 8000430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000436:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800043a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800043c:	2304      	movs	r3, #4
 800043e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000444:	2300      	movs	r3, #0
 8000446:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000448:	463b      	mov	r3, r7
 800044a:	4619      	mov	r1, r3
 800044c:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_ADC1_Init+0xe4>)
 800044e:	f001 fedf 	bl	8002210 <HAL_ADC_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000458:	f000 fd78 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	@ 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	24000174 	.word	0x24000174
 8000468:	40022000 	.word	0x40022000
 800046c:	08600004 	.word	0x08600004

08000470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0bc      	sub	sp, #240	@ 0xf0
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	22c0      	movs	r2, #192	@ 0xc0
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f00f ff55 	bl	8010340 <memset>
  if(adcHandle->Instance==ADC1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a3b      	ldr	r2, [pc, #236]	@ (8000588 <HAL_ADC_MspInit+0x118>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d16f      	bne.n	8000580 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004a4:	f04f 0300 	mov.w	r3, #0
 80004a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004ac:	2319      	movs	r3, #25
 80004ae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004b0:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 80004b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 80004b6:	2307      	movs	r3, #7
 80004b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004ce:	2300      	movs	r3, #0
 80004d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f006 fbe7 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80004e4:	f000 fd32 	bl	8000f4c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004e8:	4b28      	ldr	r3, [pc, #160]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004ee:	4a27      	ldr	r2, [pc, #156]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004f0:	f043 0320 	orr.w	r3, r3, #32
 80004f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80004f8:	4b24      	ldr	r3, [pc, #144]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 80004fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050c:	4a1f      	ldr	r2, [pc, #124]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000516:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000524:	4b19      	ldr	r3, [pc, #100]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800052a:	4a18      	ldr	r2, [pc, #96]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <HAL_ADC_MspInit+0x11c>)
 8000536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800053a:	f003 0320 	and.w	r3, r3, #32
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000542:	2340      	movs	r3, #64	@ 0x40
 8000544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000548:	2303      	movs	r3, #3
 800054a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	@ (8000590 <HAL_ADC_MspInit+0x120>)
 800055c:	f003 fd86 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000560:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000564:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000568:	2303      	movs	r3, #3
 800056a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000574:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	@ (8000594 <HAL_ADC_MspInit+0x124>)
 800057c:	f003 fd76 	bl	800406c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000580:	bf00      	nop
 8000582:	37f0      	adds	r7, #240	@ 0xf0
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40022000 	.word	0x40022000
 800058c:	58024400 	.word	0x58024400
 8000590:	58020000 	.word	0x58020000
 8000594:	58021400 	.word	0x58021400

08000598 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2224      	movs	r2, #36	@ 0x24
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f00f fecb 	bl	8010340 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005ac:	4a12      	ldr	r2, [pc, #72]	@ (80005f8 <MX_DAC1_Init+0x60>)
 80005ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005b0:	4810      	ldr	r0, [pc, #64]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005b2:	f002 feff 	bl	80033b4 <HAL_DAC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005bc:	f000 fcc6 	bl	8000f4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <MX_DAC1_Init+0x5c>)
 80005dc:	f002 ffe8 	bl	80035b0 <HAL_DAC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005e6:	f000 fcb1 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	@ 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	240001d8 	.word	0x240001d8
 80005f8:	40007400 	.word	0x40007400

080005fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <HAL_DAC_MspInit+0x90>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d131      	bne.n	8000682 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000624:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000626:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800062a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <HAL_DAC_MspInit+0x94>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065a:	2310      	movs	r3, #16
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <HAL_DAC_MspInit+0x98>)
 800066e:	f003 fcfd 	bl	800406c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	210f      	movs	r1, #15
 8000676:	2036      	movs	r0, #54	@ 0x36
 8000678:	f002 fdf8 	bl	800326c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800067c:	2036      	movs	r0, #54	@ 0x36
 800067e:	f002 fe0f 	bl	80032a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	@ 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40007400 	.word	0x40007400
 8000690:	58024400 	.word	0x58024400
 8000694:	58020000 	.word	0x58020000

08000698 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	@ 0x30
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b5c      	ldr	r3, [pc, #368]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b4:	4a5a      	ldr	r2, [pc, #360]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006be:	4b58      	ldr	r3, [pc, #352]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
 80006ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006cc:	4b54      	ldr	r3, [pc, #336]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	4a53      	ldr	r2, [pc, #332]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006dc:	4b50      	ldr	r3, [pc, #320]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	4a4b      	ldr	r2, [pc, #300]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006fa:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <MX_GPIO_Init+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b45      	ldr	r3, [pc, #276]	@ (8000820 <MX_GPIO_Init+0x188>)
 800070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070e:	4a44      	ldr	r2, [pc, #272]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000718:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <MX_GPIO_Init+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	4a3c      	ldr	r2, [pc, #240]	@ (8000820 <MX_GPIO_Init+0x188>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000736:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	f003 0320 	and.w	r3, r3, #32
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000744:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074a:	4a35      	ldr	r2, [pc, #212]	@ (8000820 <MX_GPIO_Init+0x188>)
 800074c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000754:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	4b2f      	ldr	r3, [pc, #188]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	4a2d      	ldr	r2, [pc, #180]	@ (8000820 <MX_GPIO_Init+0x188>)
 800076a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000772:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <MX_GPIO_Init+0x188>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2120      	movs	r1, #32
 8000784:	4827      	ldr	r0, [pc, #156]	@ (8000824 <MX_GPIO_Init+0x18c>)
 8000786:	f003 fe21 	bl	80043cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	4826      	ldr	r0, [pc, #152]	@ (8000828 <MX_GPIO_Init+0x190>)
 8000790:	f003 fe1c 	bl	80043cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	4824      	ldr	r0, [pc, #144]	@ (800082c <MX_GPIO_Init+0x194>)
 800079a:	f003 fe17 	bl	80043cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2140      	movs	r1, #64	@ 0x40
 80007a2:	4822      	ldr	r0, [pc, #136]	@ (800082c <MX_GPIO_Init+0x194>)
 80007a4:	f003 fe12 	bl	80043cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80007a8:	2320      	movs	r3, #32
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4819      	ldr	r0, [pc, #100]	@ (8000824 <MX_GPIO_Init+0x18c>)
 80007c0:	f003 fc54 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4813      	ldr	r0, [pc, #76]	@ (8000828 <MX_GPIO_Init+0x190>)
 80007dc:	f003 fc46 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_GPIO_Init+0x194>)
 80007f8:	f003 fc38 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80007fc:	2340      	movs	r3, #64	@ 0x40
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000808:	2301      	movs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <MX_GPIO_Init+0x194>)
 8000814:	f003 fc2a 	bl	800406c <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3730      	adds	r7, #48	@ 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	58024400 	.word	0x58024400
 8000824:	58020800 	.word	0x58020800
 8000828:	58020400 	.word	0x58020400
 800082c:	58022000 	.word	0x58022000

08000830 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <MX_I2C1_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800083c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <MX_I2C1_Init+0x7c>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000840:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000848:	2201      	movs	r2, #1
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800086c:	f003 fde2 	bl	8004434 <HAL_I2C_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000876:	f000 fb69 	bl	8000f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <MX_I2C1_Init+0x74>)
 800087e:	f003 fe69 	bl	8004554 <HAL_I2CEx_ConfigAnalogFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 fb60 	bl	8000f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_I2C1_Init+0x74>)
 8000890:	f003 feab 	bl	80045ea <HAL_I2CEx_ConfigDigitalFilter>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 fb57 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	240001ec 	.word	0x240001ec
 80008a8:	40005400 	.word	0x40005400
 80008ac:	307075b1 	.word	0x307075b1

080008b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ba      	sub	sp, #232	@ 0xe8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	22c0      	movs	r2, #192	@ 0xc0
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00f fd35 	bl	8010340 <memset>
  if(i2cHandle->Instance==I2C1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <HAL_I2C_MspInit+0xc4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d145      	bne.n	800096c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008e0:	f04f 0208 	mov.w	r2, #8
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 f9d8 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000902:	f000 fb23 	bl	8000f4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a1a      	ldr	r2, [pc, #104]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000924:	23c0      	movs	r3, #192	@ 0xc0
 8000926:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092a:	2312      	movs	r3, #18
 800092c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093c:	2304      	movs	r3, #4
 800093e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <HAL_I2C_MspInit+0xcc>)
 800094a:	f003 fb8f 	bl	800406c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000954:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000956:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800095a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_I2C_MspInit+0xc8>)
 8000960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	37e8      	adds	r7, #232	@ 0xe8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40005400 	.word	0x40005400
 8000978:	58024400 	.word	0x58024400
 800097c:	58020400 	.word	0x58020400

08000980 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0a4      	sub	sp, #144	@ 0x90
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000986:	f000 f9cf 	bl	8000d28 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800098a:	4b83      	ldr	r3, [pc, #524]	@ (8000b98 <main+0x218>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11b      	bne.n	80009ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000996:	f3bf 8f4f 	dsb	sy
}
 800099a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800099c:	f3bf 8f6f 	isb	sy
}
 80009a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009a2:	4b7d      	ldr	r3, [pc, #500]	@ (8000b98 <main+0x218>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
}
 80009ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b0:	f3bf 8f6f 	isb	sy
}
 80009b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009b6:	4b78      	ldr	r3, [pc, #480]	@ (8000b98 <main+0x218>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a77      	ldr	r2, [pc, #476]	@ (8000b98 <main+0x218>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009c2:	f3bf 8f4f 	dsb	sy
}
 80009c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009c8:	f3bf 8f6f 	isb	sy
}
 80009cc:	e000      	b.n	80009d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009d0:	4b71      	ldr	r3, [pc, #452]	@ (8000b98 <main+0x218>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d143      	bne.n	8000a64 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009dc:	4b6e      	ldr	r3, [pc, #440]	@ (8000b98 <main+0x218>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009e4:	f3bf 8f4f 	dsb	sy
}
 80009e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009ea:	4b6b      	ldr	r3, [pc, #428]	@ (8000b98 <main+0x218>)
 80009ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009f8:	0b5b      	lsrs	r3, r3, #13
 80009fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a14:	015a      	lsls	r2, r3, #5
 8000a16:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000a1a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a20:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a22:	495d      	ldr	r1, [pc, #372]	@ (8000b98 <main+0x218>)
 8000a24:	4313      	orrs	r3, r2
 8000a26:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1eb      	bne.n	8000a10 <main+0x90>
    } while(sets-- != 0U);
 8000a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1dd      	bne.n	8000a02 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a46:	f3bf 8f4f 	dsb	sy
}
 8000a4a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a4c:	4b52      	ldr	r3, [pc, #328]	@ (8000b98 <main+0x218>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a51      	ldr	r2, [pc, #324]	@ (8000b98 <main+0x218>)
 8000a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a56:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a58:	f3bf 8f4f 	dsb	sy
}
 8000a5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a5e:	f3bf 8f6f 	isb	sy
}
 8000a62:	e000      	b.n	8000a66 <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a64:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f000 feb5 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f8af 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f7ff fe13 	bl	8000698 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a72:	f7ff fedd 	bl	8000830 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a76:	f000 fcef 	bl	8001458 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000a7a:	f000 fd3b 	bl	80014f4 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000a7e:	f7ff fc7f 	bl	8000380 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000a82:	f00e fdc7 	bl	800f614 <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000a86:	f7ff fd87 	bl	8000598 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000a8a:	f000 fa65 	bl	8000f58 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000a8e:	205c      	movs	r0, #92	@ 0x5c
 8000a90:	f00f fb80 	bl	8010194 <malloc>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b40      	ldr	r3, [pc, #256]	@ (8000b9c <main+0x21c>)
 8000a9a:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000a9c:	2020      	movs	r0, #32
 8000a9e:	f00f fb79 	bl	8010194 <malloc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba0 <main+0x220>)
 8000aa8:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000aaa:	205c      	movs	r0, #92	@ 0x5c
 8000aac:	f00f fb72 	bl	8010194 <malloc>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba4 <main+0x224>)
 8000ab6:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000ab8:	2020      	movs	r0, #32
 8000aba:	f00f fb6b 	bl	8010194 <malloc>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b39      	ldr	r3, [pc, #228]	@ (8000ba8 <main+0x228>)
 8000ac4:	601a      	str	r2, [r3, #0]

  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 串口输出数组
  uint8_t textBuf[128] = {0};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	227c      	movs	r2, #124	@ 0x7c
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00f fc34 	bl	8010340 <memset>
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <main+0x21c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a30      	ldr	r2, [pc, #192]	@ (8000ba0 <main+0x220>)
 8000ade:	6811      	ldr	r1, [r2, #0]
 8000ae0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ae4:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8000bac <main+0x22c>
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00e faa3 	bl	800f034 <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8000aee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba4 <main+0x224>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a2d      	ldr	r2, [pc, #180]	@ (8000ba8 <main+0x228>)
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000afa:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8000bac <main+0x22c>
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00e fa98 	bl	800f034 <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000b04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4828      	ldr	r0, [pc, #160]	@ (8000bb0 <main+0x230>)
 8000b0e:	f002 fd1f 	bl	8003550 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b12:	2100      	movs	r1, #0
 8000b14:	4826      	ldr	r0, [pc, #152]	@ (8000bb0 <main+0x230>)
 8000b16:	f002 fc6f 	bl	80033f8 <HAL_DAC_Start>
  // ADC校准并开启
  HAL_Delay(200);
 8000b1a:	20c8      	movs	r0, #200	@ 0xc8
 8000b1c:	f000 feb6 	bl	800188c <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b20:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b24:	2100      	movs	r1, #0
 8000b26:	4823      	ldr	r0, [pc, #140]	@ (8000bb4 <main+0x234>)
 8000b28:	f002 f9a6 	bl	8002e78 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 8000b2c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000b34:	481f      	ldr	r0, [pc, #124]	@ (8000bb4 <main+0x234>)
 8000b36:	f002 f99f 	bl	8002e78 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuf, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	491e      	ldr	r1, [pc, #120]	@ (8000bb8 <main+0x238>)
 8000b3e:	481d      	ldr	r0, [pc, #116]	@ (8000bb4 <main+0x234>)
 8000b40:	f001 fa84 	bl	800204c <HAL_ADC_Start_DMA>
  HAL_Delay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b48:	f000 fea0 	bl	800188c <HAL_Delay>
  // 打开互补SPWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	481b      	ldr	r0, [pc, #108]	@ (8000bbc <main+0x23c>)
 8000b50:	f009 fae4 	bl	800a11c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8000b54:	2100      	movs	r1, #0
 8000b56:	4819      	ldr	r0, [pc, #100]	@ (8000bbc <main+0x23c>)
 8000b58:	f00a fb76 	bl	800b248 <HAL_TIMEx_PWMN_Start>
  // OLED初始化
  OLED_Init();
 8000b5c:	f00e f9e0 	bl	800ef20 <OLED_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000b60:	4817      	ldr	r0, [pc, #92]	@ (8000bc0 <main+0x240>)
 8000b62:	f009 fa01 	bl	8009f68 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 虚拟串口输出日志
    sprintf((char *)textBuf, "test");
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4916      	ldr	r1, [pc, #88]	@ (8000bc4 <main+0x244>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00f fbc8 	bl	8010300 <siprintf>
    CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00e fe0d 	bl	800f794 <CDC_Transmit_FS>
    OLED_ShowString(0, 0, textBuf);
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	f00e f99f 	bl	800eec4 <OLED_ShowString>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000b86:	2101      	movs	r1, #1
 8000b88:	480f      	ldr	r0, [pc, #60]	@ (8000bc8 <main+0x248>)
 8000b8a:	f003 fc38 	bl	80043fe <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000b8e:	20c8      	movs	r0, #200	@ 0xc8
 8000b90:	f000 fe7c 	bl	800188c <HAL_Delay>
    sprintf((char *)textBuf, "test");
 8000b94:	bf00      	nop
 8000b96:	e7e6      	b.n	8000b66 <main+0x1e6>
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	42480000 	.word	0x42480000
 8000bb0:	240001d8 	.word	0x240001d8
 8000bb4:	24000174 	.word	0x24000174
 8000bb8:	38000000 	.word	0x38000000
 8000bbc:	24000364 	.word	0x24000364
 8000bc0:	24000318 	.word	0x24000318
 8000bc4:	08010d60 	.word	0x08010d60
 8000bc8:	58022000 	.word	0x58022000

08000bcc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09e      	sub	sp, #120	@ 0x78
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	224c      	movs	r2, #76	@ 0x4c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00f fbb0 	bl	8010340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2220      	movs	r2, #32
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00f fba9 	bl	8010340 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f005 f800 	bl	8005bf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b48      	ldr	r3, [pc, #288]	@ (8000d1c <SystemClock_Config+0x150>)
 8000bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfc:	4a47      	ldr	r2, [pc, #284]	@ (8000d1c <SystemClock_Config+0x150>)
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c04:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b44      	ldr	r3, [pc, #272]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a43      	ldr	r2, [pc, #268]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b41      	ldr	r3, [pc, #260]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c26:	bf00      	nop
 8000c28:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c34:	d1f8      	bne.n	8000c28 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b3b      	ldr	r3, [pc, #236]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c3c:	4a39      	ldr	r2, [pc, #228]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c46:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SystemClock_Config+0x158>)
 8000c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a30      	ldr	r2, [pc, #192]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c72:	4a2a      	ldr	r2, [pc, #168]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <SystemClock_Config+0x150>)
 8000c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c86:	bf00      	nop
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <SystemClock_Config+0x154>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cac:	23c0      	movs	r3, #192	@ 0xc0
 8000cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000cb4:	2314      	movs	r3, #20
 8000cb6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 ffdb 	bl	8005c88 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000cd8:	f000 f938 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000cdc:	233f      	movs	r3, #63	@ 0x3f
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cec:	2340      	movs	r3, #64	@ 0x40
 8000cee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf0:	2340      	movs	r3, #64	@ 0x40
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cfa:	2340      	movs	r3, #64	@ 0x40
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2104      	movs	r1, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 fc19 	bl	800653c <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000d10:	f000 f91c 	bl	8000f4c <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3778      	adds	r7, #120	@ 0x78
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800
 8000d24:	58024400 	.word	0x58024400

08000d28 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d3a:	f002 fabf 	bl	80032bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000d46:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000d4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fadc 	bl	800332c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000d78:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000d7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 facd 	bl	800332c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8000d96:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d9a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fac2 	bl	800332c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000da8:	2004      	movs	r0, #4
 8000daa:	f002 fa9f 	bl	80032ec <HAL_MPU_Enable>
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	ed2d 8b02 	vpush	{d8}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a53      	ldr	r2, [pc, #332]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 8000dce:	f000 fd3d 	bl	800184c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dda:	f040 8097 	bne.w	8000f0c <HAL_TIM_PeriodElapsedCallback+0x154>
 8000dde:	4b4f      	ldr	r3, [pc, #316]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	2304      	movs	r3, #4
 8000de4:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dd1d      	ble.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x70>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f003 021f 	and.w	r2, r3, #31
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4413      	add	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfc:	f3bf 8f4f 	dsb	sy
}
 8000e00:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e02:	4a47      	ldr	r2, [pc, #284]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3320      	adds	r3, #32
 8000e0e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3b20      	subs	r3, #32
 8000e14:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dcf2      	bgt.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1c:	f3bf 8f4f 	dsb	sy
}
 8000e20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e22:	f3bf 8f6f 	isb	sy
}
 8000e26:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000e28:	bf00      	nop
  {
    // 缓存adcBuf
    SCB_InvalidateDCache_by_Addr((uint32_t *)adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.4f;
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e36:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000f24 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000e3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e3e:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8000f28 <HAL_TIM_PeriodElapsedCallback+0x170>
 8000e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e46:	4b39      	ldr	r3, [pc, #228]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000f30 <HAL_TIM_PeriodElapsedCallback+0x178>
 8000e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e52:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f - 1.4f;
 8000e56:	4b31      	ldr	r3, [pc, #196]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e58:	885b      	ldrh	r3, [r3, #2]
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e62:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000f24 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000e66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e6a:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000f28 <HAL_TIM_PeriodElapsedCallback+0x170>
 8000e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e72:	4b30      	ldr	r3, [pc, #192]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000f30 <HAL_TIM_PeriodElapsedCallback+0x178>
 8000e7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e7e:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control_V(signal_V, signal_config_V);
 8000e82:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a2c      	ldr	r2, [pc, #176]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00e f9b7 	bl	800f200 <pll_Control_V>
    pll_Control_I(signal_I, signal_config_I, signal_V);
 8000e92:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a29      	ldr	r2, [pc, #164]	@ (8000f3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e98:	6811      	ldr	r1, [r2, #0]
 8000e9a:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f00e fa46 	bl	800f330 <pll_Control_I>
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 8000ea4:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000eb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000eba:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ebc:	edd3 7a00 	vldr	s15, [r3]
 8000ec0:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000ecc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000f48 <HAL_TIM_PeriodElapsedCallback+0x190>
 8000ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed8:	f00f f8cc 	bl	8010074 <arm_sin_f32>
 8000edc:	eef0 7a40 	vmov.f32	s15, s0
 8000ee0:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ef2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000ef6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f06:	ee17 2a90 	vmov	r2, s15
 8000f0a:	635a      	str	r2, [r3, #52]	@ 0x34
    // DAC模拟输出，便于调试，不需要时可关闭
    // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_1->theta + PI / 2.f) + 2048.f);
  }
  /* USER CODE END Callback 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	ecbd 8b02 	vpop	{d8}
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	38000000 	.word	0x38000000
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	40533333 	.word	0x40533333
 8000f28:	47800000 	.word	0x47800000
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	3fb33333 	.word	0x3fb33333
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	24000364 	.word	0x24000364
 8000f44:	24000000 	.word	0x24000000
 8000f48:	3fc90fdb 	.word	0x3fc90fdb

08000f4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f5e:	4a28      	ldr	r2, [pc, #160]	@ (8001000 <MX_SPI1_Init+0xa8>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f72:	2207      	movs	r2, #7
 8000f74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f82:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f84:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000faa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_SPI1_Init+0xa4>)
 8000fe8:	f008 fb5e 	bl	80096a8 <HAL_SPI_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ff2:	f7ff ffab 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24000240 	.word	0x24000240
 8001000:	40013000 	.word	0x40013000

08001004 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0bc      	sub	sp, #240	@ 0xf0
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	22c0      	movs	r2, #192	@ 0xc0
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f00f f98b 	bl	8010340 <memset>
  if(spiHandle->Instance==SPI1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a38      	ldr	r2, [pc, #224]	@ (8001110 <HAL_SPI_MspInit+0x10c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d169      	bne.n	8001108 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001034:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001040:	2300      	movs	r3, #0
 8001042:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f005 fe2f 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001054:	f7ff ff7a 	bl	8000f4c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 800105a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800105e:	4a2d      	ldr	r2, [pc, #180]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 8001060:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001064:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001068:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 800106a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800106e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107c:	4a25      	ldr	r2, [pc, #148]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	4a1e      	ldr	r2, [pc, #120]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 800109c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <HAL_SPI_MspInit+0x110>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 80010b2:	23a0      	movs	r3, #160	@ 0xa0
 80010b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ca:	2305      	movs	r3, #5
 80010cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010d4:	4619      	mov	r1, r3
 80010d6:	4810      	ldr	r0, [pc, #64]	@ (8001118 <HAL_SPI_MspInit+0x114>)
 80010d8:	f002 ffc8 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f6:	2305      	movs	r3, #5
 80010f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <HAL_SPI_MspInit+0x118>)
 8001104:	f002 ffb2 	bl	800406c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	37f0      	adds	r7, #240	@ 0xf0
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40013000 	.word	0x40013000
 8001114:	58024400 	.word	0x58024400
 8001118:	58020000 	.word	0x58020000
 800111c:	58021800 	.word	0x58021800

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_MspInit+0x30>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800112c:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <HAL_MspInit+0x30>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_MspInit+0x30>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	58024400 	.word	0x58024400

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b090      	sub	sp, #64	@ 0x40
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d827      	bhi.n	80011b2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001162:	2200      	movs	r2, #0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	2036      	movs	r0, #54	@ 0x36
 8001168:	f002 f880 	bl	800326c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800116c:	2036      	movs	r0, #54	@ 0x36
 800116e:	f002 f897 	bl	80032a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001172:	4a29      	ldr	r2, [pc, #164]	@ (8001218 <HAL_InitTick+0xc4>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001178:	4b28      	ldr	r3, [pc, #160]	@ (800121c <HAL_InitTick+0xc8>)
 800117a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117e:	4a27      	ldr	r2, [pc, #156]	@ (800121c <HAL_InitTick+0xc8>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_InitTick+0xc8>)
 800118a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001196:	f107 0210 	add.w	r2, r7, #16
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 fd41 	bl	8006c28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <HAL_InitTick+0x6a>
 80011b0:	e001      	b.n	80011b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e02b      	b.n	800120e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b6:	f005 fd21 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 80011ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011be:	f005 fd1d 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 80011c2:	4603      	mov	r3, r0
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <HAL_InitTick+0xcc>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	3b01      	subs	r3, #1
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_InitTick+0xd0>)
 80011d8:	4a13      	ldr	r2, [pc, #76]	@ (8001228 <HAL_InitTick+0xd4>)
 80011da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_InitTick+0xd0>)
 80011de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001224 <HAL_InitTick+0xd0>)
 80011e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_InitTick+0xd0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_InitTick+0xd0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011f6:	480b      	ldr	r0, [pc, #44]	@ (8001224 <HAL_InitTick+0xd0>)
 80011f8:	f008 fe5f 	bl	8009eba <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d104      	bne.n	800120c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001202:	4808      	ldr	r0, [pc, #32]	@ (8001224 <HAL_InitTick+0xd0>)
 8001204:	f008 feb0 	bl	8009f68 <HAL_TIM_Base_Start_IT>
 8001208:	4603      	mov	r3, r0
 800120a:	e000      	b.n	800120e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
}
 800120e:	4618      	mov	r0, r3
 8001210:	3740      	adds	r7, #64	@ 0x40
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2400000c 	.word	0x2400000c
 800121c:	58024400 	.word	0x58024400
 8001220:	431bde83 	.word	0x431bde83
 8001224:	240002c8 	.word	0x240002c8
 8001228:	40001000 	.word	0x40001000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <TIM2_IRQHandler+0x10>)
 8001292:	f009 f851 	bl	800a338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000318 	.word	0x24000318

080012a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <TIM6_DAC_IRQHandler+0x20>)
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <TIM6_DAC_IRQHandler+0x20>)
 80012b0:	f002 f8f4 	bl	800349c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <TIM6_DAC_IRQHandler+0x24>)
 80012b6:	f009 f83f 	bl	800a338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	240001d8 	.word	0x240001d8
 80012c4:	240002c8 	.word	0x240002c8

080012c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <OTG_FS_IRQHandler+0x10>)
 80012ce:	f003 fb31 	bl	8004934 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24001894 	.word	0x24001894

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f00f f830 	bl	8010370 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24080000 	.word	0x24080000
 800133c:	00000400 	.word	0x00000400
 8001340:	24000314 	.word	0x24000314
 8001344:	24002108 	.word	0x24002108

08001348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800134c:	4b37      	ldr	r3, [pc, #220]	@ (800142c <SystemInit+0xe4>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001352:	4a36      	ldr	r2, [pc, #216]	@ (800142c <SystemInit+0xe4>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800135c:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <SystemInit+0xe8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	2b06      	cmp	r3, #6
 8001366:	d807      	bhi.n	8001378 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001368:	4b31      	ldr	r3, [pc, #196]	@ (8001430 <SystemInit+0xe8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 030f 	bic.w	r3, r3, #15
 8001370:	4a2f      	ldr	r2, [pc, #188]	@ (8001430 <SystemInit+0xe8>)
 8001372:	f043 0307 	orr.w	r3, r3, #7
 8001376:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001378:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <SystemInit+0xec>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a2d      	ldr	r2, [pc, #180]	@ (8001434 <SystemInit+0xec>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001384:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <SystemInit+0xec>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <SystemInit+0xec>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4929      	ldr	r1, [pc, #164]	@ (8001434 <SystemInit+0xec>)
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <SystemInit+0xf0>)
 8001392:	4013      	ands	r3, r2
 8001394:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <SystemInit+0xe8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013a2:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <SystemInit+0xe8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 030f 	bic.w	r3, r3, #15
 80013aa:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <SystemInit+0xe8>)
 80013ac:	f043 0307 	orr.w	r3, r3, #7
 80013b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <SystemInit+0xec>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <SystemInit+0xec>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <SystemInit+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <SystemInit+0xec>)
 80013c6:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <SystemInit+0xf4>)
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <SystemInit+0xec>)
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <SystemInit+0xf8>)
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <SystemInit+0xec>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <SystemInit+0xfc>)
 80013d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <SystemInit+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <SystemInit+0xec>)
 80013de:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <SystemInit+0xfc>)
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <SystemInit+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <SystemInit+0xec>)
 80013ea:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <SystemInit+0xfc>)
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <SystemInit+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <SystemInit+0xec>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <SystemInit+0xec>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <SystemInit+0xec>)
 8001402:	2200      	movs	r2, #0
 8001404:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <SystemInit+0x100>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <SystemInit+0x104>)
 800140c:	4013      	ands	r3, r2
 800140e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001412:	d202      	bcs.n	800141a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <SystemInit+0x108>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <SystemInit+0x10c>)
 800141c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001420:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	52002000 	.word	0x52002000
 8001434:	58024400 	.word	0x58024400
 8001438:	eaf6ed7f 	.word	0xeaf6ed7f
 800143c:	02020200 	.word	0x02020200
 8001440:	01ff0000 	.word	0x01ff0000
 8001444:	01010280 	.word	0x01010280
 8001448:	5c001000 	.word	0x5c001000
 800144c:	ffff0000 	.word	0xffff0000
 8001450:	51008108 	.word	0x51008108
 8001454:	52004000 	.word	0x52004000

08001458 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001476:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <MX_TIM2_Init+0x98>)
 8001478:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <MX_TIM2_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_TIM2_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <MX_TIM2_Init+0x98>)
 800148c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_TIM2_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_TIM2_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_TIM2_Init+0x98>)
 80014a0:	f008 fd0b 	bl	8009eba <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014aa:	f7ff fd4f 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_TIM2_Init+0x98>)
 80014bc:	f009 f970 	bl	800a7a0 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014c6:	f7ff fd41 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_TIM2_Init+0x98>)
 80014d8:	f009 ff78 	bl	800b3cc <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014e2:	f7ff fd33 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	24000318 	.word	0x24000318

080014f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b09a      	sub	sp, #104	@ 0x68
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001514:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	222c      	movs	r2, #44	@ 0x2c
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f00e ff06 	bl	8010340 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001534:	4b43      	ldr	r3, [pc, #268]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001536:	4a44      	ldr	r2, [pc, #272]	@ (8001648 <MX_TIM8_Init+0x154>)
 8001538:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800153a:	4b42      	ldr	r3, [pc, #264]	@ (8001644 <MX_TIM8_Init+0x150>)
 800153c:	2200      	movs	r2, #0
 800153e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b40      	ldr	r3, [pc, #256]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001548:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800154c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001554:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <MX_TIM8_Init+0x150>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001560:	4838      	ldr	r0, [pc, #224]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001562:	f008 fcaa 	bl	8009eba <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800156c:	f7ff fcee 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001574:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800157a:	4619      	mov	r1, r3
 800157c:	4831      	ldr	r0, [pc, #196]	@ (8001644 <MX_TIM8_Init+0x150>)
 800157e:	f009 f90f 	bl	800a7a0 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001588:	f7ff fce0 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800158c:	482d      	ldr	r0, [pc, #180]	@ (8001644 <MX_TIM8_Init+0x150>)
 800158e:	f008 fd63 	bl	800a058 <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001598:	f7ff fcd8 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ac:	4619      	mov	r1, r3
 80015ae:	4825      	ldr	r0, [pc, #148]	@ (8001644 <MX_TIM8_Init+0x150>)
 80015b0:	f009 ff0c 	bl	800b3cc <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015ba:	f7ff fcc7 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015be:	2360      	movs	r3, #96	@ 0x60
 80015c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4818      	ldr	r0, [pc, #96]	@ (8001644 <MX_TIM8_Init+0x150>)
 80015e4:	f008 ffc8 	bl	800a578 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80015ee:	f7ff fcad 	bl	8000f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001614:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001628:	f009 ff5e 	bl	800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001632:	f7ff fc8b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001636:	4803      	ldr	r0, [pc, #12]	@ (8001644 <MX_TIM8_Init+0x150>)
 8001638:	f000 f846 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3768      	adds	r7, #104	@ 0x68
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24000364 	.word	0x24000364
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165c:	d117      	bne.n	800168e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_TIM_Base_MspInit+0x74>)
 8001660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001664:	4a16      	ldr	r2, [pc, #88]	@ (80016c0 <HAL_TIM_Base_MspInit+0x74>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <HAL_TIM_Base_MspInit+0x74>)
 8001670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	201c      	movs	r0, #28
 8001682:	f001 fdf3 	bl	800326c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001686:	201c      	movs	r0, #28
 8001688:	f001 fe0a 	bl	80032a0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800168c:	e013      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0c      	ldr	r2, [pc, #48]	@ (80016c4 <HAL_TIM_Base_MspInit+0x78>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d10e      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_TIM_Base_MspInit+0x74>)
 800169a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <HAL_TIM_Base_MspInit+0x74>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_TIM_Base_MspInit+0x74>)
 80016aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	58024400 	.word	0x58024400
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <HAL_TIM_MspPostInit+0xa8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d13e      	bne.n	8001768 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <HAL_TIM_MspPostInit+0xac>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f0:	4a20      	ldr	r2, [pc, #128]	@ (8001774 <HAL_TIM_MspPostInit+0xac>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <HAL_TIM_MspPostInit+0xac>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <HAL_TIM_MspPostInit+0xac>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170e:	4a19      	ldr	r2, [pc, #100]	@ (8001774 <HAL_TIM_MspPostInit+0xac>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_TIM_MspPostInit+0xac>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PH13     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001726:	2340      	movs	r3, #64	@ 0x40
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001736:	2303      	movs	r3, #3
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	@ (8001778 <HAL_TIM_MspPostInit+0xb0>)
 8001742:	f002 fc93 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001758:	2303      	movs	r3, #3
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <HAL_TIM_MspPostInit+0xb4>)
 8001764:	f002 fc82 	bl	800406c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40010400 	.word	0x40010400
 8001774:	58024400 	.word	0x58024400
 8001778:	58020800 	.word	0x58020800
 800177c:	58021c00 	.word	0x58021c00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001784:	f7ff fde0 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f00e fde5 	bl	801037c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff f8e5 	bl	8000980 <main>
  bx  lr
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017c0:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80017c4:	08011c08 	.word	0x08011c08
  ldr r2, =_sbss
 80017c8:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80017cc:	24002108 	.word	0x24002108

080017d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC3_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017da:	2003      	movs	r0, #3
 80017dc:	f001 fd3b 	bl	8003256 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017e0:	f005 f862 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_Init+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	4913      	ldr	r1, [pc, #76]	@ (8001840 <HAL_Init+0x6c>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_Init+0x68>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <HAL_Init+0x6c>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <HAL_Init+0x70>)
 8001816:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <HAL_Init+0x74>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181e:	200f      	movs	r0, #15
 8001820:	f7ff fc98 	bl	8001154 <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e002      	b.n	8001834 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800182e:	f7ff fc77 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400
 8001840:	08010db0 	.word	0x08010db0
 8001844:	24000008 	.word	0x24000008
 8001848:	24000004 	.word	0x24000004

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	24000010 	.word	0x24000010
 8001870:	240003b0 	.word	0x240003b0

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	240003b0 	.word	0x240003b0

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	24000010 	.word	0x24000010

080018d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_GetREVID+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0c1b      	lsrs	r3, r3, #16
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	5c001000 	.word	0x5c001000

080018ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	609a      	str	r2, [r3, #8]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	609a      	str	r2, [r3, #8]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001954:	b480      	push	{r7}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3360      	adds	r3, #96	@ 0x60
 8001966:	461a      	mov	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	430b      	orrs	r3, r1
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	431a      	orrs	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	611a      	str	r2, [r3, #16]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b087      	sub	sp, #28
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3360      	adds	r3, #96	@ 0x60
 80019d6:	461a      	mov	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
  }
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3330      	adds	r3, #48	@ 0x30
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	211f      	movs	r1, #31
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	401a      	ands	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	f003 011f 	and.w	r1, r3, #31
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f023 0203 	bic.w	r2, r3, #3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	60da      	str	r2, [r3, #12]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3314      	adds	r3, #20
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0e5b      	lsrs	r3, r3, #25
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	0d1b      	lsrs	r3, r3, #20
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2107      	movs	r1, #7
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0d1b      	lsrs	r3, r3, #20
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aea:	bf00      	nop
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b10:	43db      	mvns	r3, r3
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0318 	and.w	r3, r3, #24
 8001b1a:	4908      	ldr	r1, [pc, #32]	@ (8001b3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b1c:	40d9      	lsrs	r1, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	400b      	ands	r3, r1
 8001b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	000fffff 	.word	0x000fffff

08001b40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6093      	str	r3, [r2, #8]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	5fffffc0 	.word	0x5fffffc0

08001b80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b94:	d101      	bne.n	8001b9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <LL_ADC_EnableInternalRegulator+0x24>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	6fffffc0 	.word	0x6fffffc0

08001bd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001be4:	d101      	bne.n	8001bea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <LL_ADC_Enable+0x24>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	7fffffc0 	.word	0x7fffffc0

08001c20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <LL_ADC_Disable+0x24>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	f043 0202 	orr.w	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	7fffffc0 	.word	0x7fffffc0

08001c48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <LL_ADC_IsEnabled+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_ADC_IsEnabled+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_IsDisableOngoing+0x18>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_IsDisableOngoing+0x1a>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <LL_ADC_REG_StartConversion+0x24>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	7fffffc0 	.word	0x7fffffc0

08001cbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d101      	bne.n	8001cfa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e18f      	b.n	8002042 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7fe fb9d 	bl	8000470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff19 	bl	8001b80 <LL_ADC_IsDeepPowerDownEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff feff 	bl	8001b5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff34 	bl	8001bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d114      	bne.n	8001d98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff18 	bl	8001ba8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d78:	4b87      	ldr	r3, [pc, #540]	@ (8001f98 <HAL_ADC_Init+0x290>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	4a87      	ldr	r2, [pc, #540]	@ (8001f9c <HAL_ADC_Init+0x294>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	3301      	adds	r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff17 	bl	8001bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff77 	bl	8001cbc <LL_ADC_REG_IsConversionOngoing>
 8001dce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 8129 	bne.w	8002030 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 8125 	bne.w	8002030 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff24 	bl	8001c48 <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d136      	bne.n	8001e74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a65      	ldr	r2, [pc, #404]	@ (8001fa0 <HAL_ADC_Init+0x298>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_ADC_Init+0x112>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a63      	ldr	r2, [pc, #396]	@ (8001fa4 <HAL_ADC_Init+0x29c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_Init+0x130>
 8001e1a:	4861      	ldr	r0, [pc, #388]	@ (8001fa0 <HAL_ADC_Init+0x298>)
 8001e1c:	f7ff ff14 	bl	8001c48 <LL_ADC_IsEnabled>
 8001e20:	4604      	mov	r4, r0
 8001e22:	4860      	ldr	r0, [pc, #384]	@ (8001fa4 <HAL_ADC_Init+0x29c>)
 8001e24:	f7ff ff10 	bl	8001c48 <LL_ADC_IsEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4323      	orrs	r3, r4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e008      	b.n	8001e4a <HAL_ADC_Init+0x142>
 8001e38:	485b      	ldr	r0, [pc, #364]	@ (8001fa8 <HAL_ADC_Init+0x2a0>)
 8001e3a:	f7ff ff05 	bl	8001c48 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d012      	beq.n	8001e74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a53      	ldr	r2, [pc, #332]	@ (8001fa0 <HAL_ADC_Init+0x298>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d004      	beq.n	8001e62 <HAL_ADC_Init+0x15a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	@ (8001fa4 <HAL_ADC_Init+0x29c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x15e>
 8001e62:	4a52      	ldr	r2, [pc, #328]	@ (8001fac <HAL_ADC_Init+0x2a4>)
 8001e64:	e000      	b.n	8001e68 <HAL_ADC_Init+0x160>
 8001e66:	4a52      	ldr	r2, [pc, #328]	@ (8001fb0 <HAL_ADC_Init+0x2a8>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f7ff fd3c 	bl	80018ec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e74:	f7ff fd2e 	bl	80018d4 <HAL_GetREVID>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d914      	bls.n	8001eac <HAL_ADC_Init+0x1a4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d110      	bne.n	8001eac <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7d5b      	ldrb	r3, [r3, #21]
 8001e8e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e94:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e9a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7f1b      	ldrb	r3, [r3, #28]
 8001ea0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ea2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ea4:	f043 030c 	orr.w	r3, r3, #12
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	e00d      	b.n	8001ec8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7d5b      	ldrb	r3, [r3, #21]
 8001eb0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ebc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7f1b      	ldrb	r3, [r3, #28]
 8001ec2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7f1b      	ldrb	r3, [r3, #28]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	045b      	lsls	r3, r3, #17
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb4 <HAL_ADC_Init+0x2ac>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	69b9      	ldr	r1, [r7, #24]
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fed2 	bl	8001cbc <LL_ADC_REG_IsConversionOngoing>
 8001f18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fedf 	bl	8001ce2 <LL_ADC_INJ_IsConversionOngoing>
 8001f24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d15f      	bne.n	8001fec <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d15c      	bne.n	8001fec <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7d1b      	ldrb	r3, [r3, #20]
 8001f36:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <HAL_ADC_Init+0x2b0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d130      	bne.n	8001fc0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_ADC_Init+0x2b4>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f72:	3a01      	subs	r2, #1
 8001f74:	0411      	lsls	r1, r2, #16
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f80:	4311      	orrs	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f86:	430a      	orrs	r2, r1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	e01c      	b.n	8001fd0 <HAL_ADC_Init+0x2c8>
 8001f96:	bf00      	nop
 8001f98:	24000004 	.word	0x24000004
 8001f9c:	053e2d63 	.word	0x053e2d63
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40022100 	.word	0x40022100
 8001fa8:	58026000 	.word	0x58026000
 8001fac:	40022300 	.word	0x40022300
 8001fb0:	58026300 	.word	0x58026300
 8001fb4:	fff0c003 	.word	0xfff0c003
 8001fb8:	ffffbffc 	.word	0xffffbffc
 8001fbc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fde0 	bl	8002bac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10c      	bne.n	800200e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f023 010f 	bic.w	r1, r3, #15
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	1e5a      	subs	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
 800200c:	e007      	b.n	800201e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 020f 	bic.w	r2, r2, #15
 800201c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
 800202e:	e007      	b.n	8002040 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002040:	7ffb      	ldrb	r3, [r7, #31]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	@ 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop

0800204c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a55      	ldr	r2, [pc, #340]	@ (80021b4 <HAL_ADC_Start_DMA+0x168>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_ADC_Start_DMA+0x20>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a54      	ldr	r2, [pc, #336]	@ (80021b8 <HAL_ADC_Start_DMA+0x16c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_ADC_Start_DMA+0x24>
 800206c:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_ADC_Start_DMA+0x170>)
 800206e:	e000      	b.n	8002072 <HAL_ADC_Start_DMA+0x26>
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_ADC_Start_DMA+0x174>)
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fd64 	bl	8001b40 <LL_ADC_GetMultimode>
 8002078:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fe1c 	bl	8001cbc <LL_ADC_REG_IsConversionOngoing>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 808c 	bne.w	80021a4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_Start_DMA+0x4e>
 8002096:	2302      	movs	r3, #2
 8002098:	e087      	b.n	80021aa <HAL_ADC_Start_DMA+0x15e>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d002      	beq.n	80020b4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b09      	cmp	r3, #9
 80020b2:	d170      	bne.n	8002196 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fbfb 	bl	80028b0 <ADC_Enable>
 80020ba:	4603      	mov	r3, r0
 80020bc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d163      	bne.n	800218c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020c8:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <HAL_ADC_Start_DMA+0x178>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a37      	ldr	r2, [pc, #220]	@ (80021b8 <HAL_ADC_Start_DMA+0x16c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d002      	beq.n	80020e4 <HAL_ADC_Start_DMA+0x98>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_Start_DMA+0x9a>
 80020e4:	4b33      	ldr	r3, [pc, #204]	@ (80021b4 <HAL_ADC_Start_DMA+0x168>)
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d002      	beq.n	80020f4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	f023 0206 	bic.w	r2, r3, #6
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	659a      	str	r2, [r3, #88]	@ 0x58
 8002118:	e002      	b.n	8002120 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002124:	4a28      	ldr	r2, [pc, #160]	@ (80021c8 <HAL_ADC_Start_DMA+0x17c>)
 8002126:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212c:	4a27      	ldr	r2, [pc, #156]	@ (80021cc <HAL_ADC_Start_DMA+0x180>)
 800212e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002134:	4a26      	ldr	r2, [pc, #152]	@ (80021d0 <HAL_ADC_Start_DMA+0x184>)
 8002136:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	221c      	movs	r2, #28
 800213e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0210 	orr.w	r2, r2, #16
 8002156:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f7ff fc89 	bl	8001a7a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3340      	adds	r3, #64	@ 0x40
 8002172:	4619      	mov	r1, r3
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f001 fb62 	bl	8003840 <HAL_DMA_Start_IT>
 800217c:	4603      	mov	r3, r0
 800217e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fd85 	bl	8001c94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800218a:	e00d      	b.n	80021a8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002194:	e008      	b.n	80021a8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021a2:	e001      	b.n	80021a8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
 80021a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022100 	.word	0x40022100
 80021bc:	40022300 	.word	0x40022300
 80021c0:	58026300 	.word	0x58026300
 80021c4:	fffff0fe 	.word	0xfffff0fe
 80021c8:	08002a83 	.word	0x08002a83
 80021cc:	08002b5b 	.word	0x08002b5b
 80021d0:	08002b77 	.word	0x08002b77

080021d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b0a1      	sub	sp, #132	@ 0x84
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a9d      	ldr	r2, [pc, #628]	@ (80024a0 <HAL_ADC_ConfigChannel+0x290>)
 800222a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x2a>
 8002236:	2302      	movs	r3, #2
 8002238:	e321      	b.n	800287e <HAL_ADC_ConfigChannel+0x66e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fd38 	bl	8001cbc <LL_ADC_REG_IsConversionOngoing>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 8306 	bne.w	8002860 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225c:	2b00      	cmp	r3, #0
 800225e:	d108      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x62>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	e016      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002280:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002282:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800228e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2201      	movs	r2, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	69d1      	ldr	r1, [r2, #28]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f7ff fbb1 	bl	8001a22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fcf9 	bl	8001cbc <LL_ADC_REG_IsConversionOngoing>
 80022ca:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fd06 	bl	8001ce2 <LL_ADC_INJ_IsConversionOngoing>
 80022d6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 80b3 	bne.w	8002446 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 80af 	bne.w	8002446 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff fbd3 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022fa:	4b6a      	ldr	r3, [pc, #424]	@ (80024a4 <HAL_ADC_ConfigChannel+0x294>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002306:	d10b      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x110>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	e01d      	b.n	800235c <HAL_ADC_ConfigChannel+0x14c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x136>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	e00a      	b.n	800235c <HAL_ADC_ConfigChannel+0x14c>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b04      	cmp	r3, #4
 8002364:	d027      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6919      	ldr	r1, [r3, #16]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002374:	f7ff faee 	bl	8001954 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	7e5b      	ldrb	r3, [r3, #25]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_ADC_ConfigChannel+0x17e>
 8002388:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800238c:	e000      	b.n	8002390 <HAL_ADC_ConfigChannel+0x180>
 800238e:	2300      	movs	r3, #0
 8002390:	461a      	mov	r2, r3
 8002392:	f7ff fb18 	bl	80019c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	7e1b      	ldrb	r3, [r3, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x19c>
 80023a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023aa:	e000      	b.n	80023ae <HAL_ADC_ConfigChannel+0x19e>
 80023ac:	2300      	movs	r3, #0
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7ff faf0 	bl	8001994 <LL_ADC_SetDataRightShift>
 80023b4:	e047      	b.n	8002446 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	069b      	lsls	r3, r3, #26
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d107      	bne.n	80023da <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	069b      	lsls	r3, r3, #26
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d107      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023fc:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002404:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	069b      	lsls	r3, r3, #26
 800240e:	429a      	cmp	r2, r3
 8002410:	d107      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002420:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002428:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	069b      	lsls	r3, r3, #26
 8002432:	429a      	cmp	r2, r3
 8002434:	d107      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002444:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fbfc 	bl	8001c48 <LL_ADC_IsEnabled>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 820d 	bne.w	8002872 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	461a      	mov	r2, r3
 8002466:	f7ff fb47 	bl	8001af8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <HAL_ADC_ConfigChannel+0x290>)
 8002470:	4293      	cmp	r3, r2
 8002472:	f040 8133 	bne.w	80026dc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002482:	2b00      	cmp	r3, #0
 8002484:	d110      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x298>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2b09      	cmp	r3, #9
 8002494:	bf94      	ite	ls
 8002496:	2301      	movls	r3, #1
 8002498:	2300      	movhi	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e01e      	b.n	80024dc <HAL_ADC_ConfigChannel+0x2cc>
 800249e:	bf00      	nop
 80024a0:	47ff0000 	.word	0x47ff0000
 80024a4:	5c001000 	.word	0x5c001000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e003      	b.n	80024cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80024c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	bf94      	ite	ls
 80024d6:	2301      	movls	r3, #1
 80024d8:	2300      	movhi	r3, #0
 80024da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d079      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x2ec>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fa:	e015      	b.n	8002528 <HAL_ADC_ConfigChannel+0x318>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800250a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800250c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800250e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x338>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	e017      	b.n	8002578 <HAL_ADC_ConfigChannel+0x368>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002558:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800255a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x38e>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	e018      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x3c0>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80025ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d0:	430b      	orrs	r3, r1
 80025d2:	e07e      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x3e0>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	069b      	lsls	r3, r3, #26
 80025ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ee:	e015      	b.n	800261c <HAL_ADC_ConfigChannel+0x40c>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_ADC_ConfigChannel+0x42c>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	e017      	b.n	800266c <HAL_ADC_ConfigChannel+0x45c>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	61bb      	str	r3, [r7, #24]
  return result;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	ea42 0103 	orr.w	r1, r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x488>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	3b1e      	subs	r3, #30
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002696:	e01b      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x4c0>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	60fb      	str	r3, [r7, #12]
  return result;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	051b      	lsls	r3, r3, #20
 80026cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d0:	430b      	orrs	r3, r1
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7ff f9e2 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f280 80c6 	bge.w	8002872 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a67      	ldr	r2, [pc, #412]	@ (8002888 <HAL_ADC_ConfigChannel+0x678>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x4ea>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_ADC_ConfigChannel+0x67c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x4ee>
 80026fa:	4b65      	ldr	r3, [pc, #404]	@ (8002890 <HAL_ADC_ConfigChannel+0x680>)
 80026fc:	e000      	b.n	8002700 <HAL_ADC_ConfigChannel+0x4f0>
 80026fe:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <HAL_ADC_ConfigChannel+0x684>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f919 	bl	8001938 <LL_ADC_GetCommonPathInternalCh>
 8002706:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5e      	ldr	r2, [pc, #376]	@ (8002888 <HAL_ADC_ConfigChannel+0x678>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_ConfigChannel+0x50c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5d      	ldr	r2, [pc, #372]	@ (800288c <HAL_ADC_ConfigChannel+0x67c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d10e      	bne.n	800273a <HAL_ADC_ConfigChannel+0x52a>
 800271c:	485a      	ldr	r0, [pc, #360]	@ (8002888 <HAL_ADC_ConfigChannel+0x678>)
 800271e:	f7ff fa93 	bl	8001c48 <LL_ADC_IsEnabled>
 8002722:	4604      	mov	r4, r0
 8002724:	4859      	ldr	r0, [pc, #356]	@ (800288c <HAL_ADC_ConfigChannel+0x67c>)
 8002726:	f7ff fa8f 	bl	8001c48 <LL_ADC_IsEnabled>
 800272a:	4603      	mov	r3, r0
 800272c:	4323      	orrs	r3, r4
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf0c      	ite	eq
 8002732:	2301      	moveq	r3, #1
 8002734:	2300      	movne	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	e008      	b.n	800274c <HAL_ADC_ConfigChannel+0x53c>
 800273a:	4857      	ldr	r0, [pc, #348]	@ (8002898 <HAL_ADC_ConfigChannel+0x688>)
 800273c:	f7ff fa84 	bl	8001c48 <LL_ADC_IsEnabled>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d07d      	beq.n	800284c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a51      	ldr	r2, [pc, #324]	@ (800289c <HAL_ADC_ConfigChannel+0x68c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d130      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x5ac>
 800275a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800275c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d12b      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4b      	ldr	r2, [pc, #300]	@ (8002898 <HAL_ADC_ConfigChannel+0x688>)
 800276a:	4293      	cmp	r3, r2
 800276c:	f040 8081 	bne.w	8002872 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a44      	ldr	r2, [pc, #272]	@ (8002888 <HAL_ADC_ConfigChannel+0x678>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_ADC_ConfigChannel+0x574>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a43      	ldr	r2, [pc, #268]	@ (800288c <HAL_ADC_ConfigChannel+0x67c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x578>
 8002784:	4a42      	ldr	r2, [pc, #264]	@ (8002890 <HAL_ADC_ConfigChannel+0x680>)
 8002786:	e000      	b.n	800278a <HAL_ADC_ConfigChannel+0x57a>
 8002788:	4a42      	ldr	r2, [pc, #264]	@ (8002894 <HAL_ADC_ConfigChannel+0x684>)
 800278a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800278c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7ff f8bd 	bl	8001912 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_ADC_ConfigChannel+0x690>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	4a41      	ldr	r2, [pc, #260]	@ (80028a4 <HAL_ADC_ConfigChannel+0x694>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	3301      	adds	r3, #1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027ac:	e002      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f9      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ba:	e05a      	b.n	8002872 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a39      	ldr	r2, [pc, #228]	@ (80028a8 <HAL_ADC_ConfigChannel+0x698>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d11e      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x5f4>
 80027c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d119      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a30      	ldr	r2, [pc, #192]	@ (8002898 <HAL_ADC_ConfigChannel+0x688>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d14b      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2a      	ldr	r2, [pc, #168]	@ (8002888 <HAL_ADC_ConfigChannel+0x678>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x5de>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a28      	ldr	r2, [pc, #160]	@ (800288c <HAL_ADC_ConfigChannel+0x67c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x5e2>
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <HAL_ADC_ConfigChannel+0x680>)
 80027f0:	e000      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x5e4>
 80027f2:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <HAL_ADC_ConfigChannel+0x684>)
 80027f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7ff f888 	bl	8001912 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002802:	e036      	b.n	8002872 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a28      	ldr	r2, [pc, #160]	@ (80028ac <HAL_ADC_ConfigChannel+0x69c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d131      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x662>
 800280e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d12c      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <HAL_ADC_ConfigChannel+0x688>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d127      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <HAL_ADC_ConfigChannel+0x678>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x626>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a16      	ldr	r2, [pc, #88]	@ (800288c <HAL_ADC_ConfigChannel+0x67c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x62a>
 8002836:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_ADC_ConfigChannel+0x680>)
 8002838:	e000      	b.n	800283c <HAL_ADC_ConfigChannel+0x62c>
 800283a:	4a16      	ldr	r2, [pc, #88]	@ (8002894 <HAL_ADC_ConfigChannel+0x684>)
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff f864 	bl	8001912 <LL_ADC_SetCommonPathInternalCh>
 800284a:	e012      	b.n	8002872 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800285e:	e008      	b.n	8002872 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800287a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800287e:	4618      	mov	r0, r3
 8002880:	3784      	adds	r7, #132	@ 0x84
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40022100 	.word	0x40022100
 8002890:	40022300 	.word	0x40022300
 8002894:	58026300 	.word	0x58026300
 8002898:	58026000 	.word	0x58026000
 800289c:	cb840000 	.word	0xcb840000
 80028a0:	24000004 	.word	0x24000004
 80028a4:	053e2d63 	.word	0x053e2d63
 80028a8:	c7520000 	.word	0xc7520000
 80028ac:	cfb80000 	.word	0xcfb80000

080028b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f9c3 	bl	8001c48 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d16e      	bne.n	80029a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b38      	ldr	r3, [pc, #224]	@ (80029b0 <ADC_Enable+0x100>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e05a      	b.n	80029a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f97e 	bl	8001bf8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028fc:	f7fe ffba 	bl	8001874 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2b      	ldr	r2, [pc, #172]	@ (80029b4 <ADC_Enable+0x104>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <ADC_Enable+0x66>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a29      	ldr	r2, [pc, #164]	@ (80029b8 <ADC_Enable+0x108>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <ADC_Enable+0x6a>
 8002916:	4b29      	ldr	r3, [pc, #164]	@ (80029bc <ADC_Enable+0x10c>)
 8002918:	e000      	b.n	800291c <ADC_Enable+0x6c>
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <ADC_Enable+0x110>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff f90f 	bl	8001b40 <LL_ADC_GetMultimode>
 8002922:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <ADC_Enable+0x108>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d002      	beq.n	8002934 <ADC_Enable+0x84>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e000      	b.n	8002936 <ADC_Enable+0x86>
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <ADC_Enable+0x104>)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4293      	cmp	r3, r2
 800293c:	d02c      	beq.n	8002998 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d130      	bne.n	80029a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002944:	e028      	b.n	8002998 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f97c 	bl	8001c48 <LL_ADC_IsEnabled>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f94c 	bl	8001bf8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002960:	f7fe ff88 	bl	8001874 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d914      	bls.n	8002998 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d00d      	beq.n	8002998 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e007      	b.n	80029a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d1cf      	bne.n	8002946 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	8000003f 	.word	0x8000003f
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40022100 	.word	0x40022100
 80029bc:	40022300 	.word	0x40022300
 80029c0:	58026300 	.word	0x58026300

080029c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f94c 	bl	8001c6e <LL_ADC_IsDisableOngoing>
 80029d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f933 	bl	8001c48 <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d047      	beq.n	8002a78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d144      	bne.n	8002a78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030d 	and.w	r3, r3, #13
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10c      	bne.n	8002a16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f90d 	bl	8001c20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe ff31 	bl	8001874 <HAL_GetTick>
 8002a12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a14:	e029      	b.n	8002a6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e023      	b.n	8002a7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a32:	f7fe ff1f 	bl	8001874 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d914      	bls.n	8002a6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	f043 0210 	orr.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e007      	b.n	8002a7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1dc      	bne.n	8002a32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d14b      	bne.n	8002b34 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d021      	beq.n	8002afa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe ff9e 	bl	80019fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d032      	beq.n	8002b2c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d12b      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11f      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002af8:	e018      	b.n	8002b2c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fb51 	bl	80021d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b32:	e00e      	b.n	8002b52 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff fb5b 	bl	80021fc <HAL_ADC_ErrorCallback>
}
 8002b46:	e004      	b.n	8002b52 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff fb3d 	bl	80021e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff fb2d 	bl	80021fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8002da4 <ADC_ConfigureBoostMode+0x1f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d004      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0x1c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a79      	ldr	r2, [pc, #484]	@ (8002da8 <ADC_ConfigureBoostMode+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d109      	bne.n	8002bdc <ADC_ConfigureBoostMode+0x30>
 8002bc8:	4b78      	ldr	r3, [pc, #480]	@ (8002dac <ADC_ConfigureBoostMode+0x200>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e008      	b.n	8002bee <ADC_ConfigureBoostMode+0x42>
 8002bdc:	4b74      	ldr	r3, [pc, #464]	@ (8002db0 <ADC_ConfigureBoostMode+0x204>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01c      	beq.n	8002c2c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002bf2:	f003 ffd3 	bl	8006b9c <HAL_RCC_GetHCLKFreq>
 8002bf6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c00:	d010      	beq.n	8002c24 <ADC_ConfigureBoostMode+0x78>
 8002c02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c06:	d873      	bhi.n	8002cf0 <ADC_ConfigureBoostMode+0x144>
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0c:	d002      	beq.n	8002c14 <ADC_ConfigureBoostMode+0x68>
 8002c0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c12:	d16d      	bne.n	8002cf0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	60fb      	str	r3, [r7, #12]
        break;
 8002c22:	e068      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	60fb      	str	r3, [r7, #12]
        break;
 8002c2a:	e064      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c2c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f005 fa44 	bl	80080c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c42:	d051      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x13c>
 8002c44:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002c48:	d854      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c4a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c4e:	d047      	beq.n	8002ce0 <ADC_ConfigureBoostMode+0x134>
 8002c50:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002c54:	d84e      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c56:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c5a:	d03d      	beq.n	8002cd8 <ADC_ConfigureBoostMode+0x12c>
 8002c5c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002c60:	d848      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c66:	d033      	beq.n	8002cd0 <ADC_ConfigureBoostMode+0x124>
 8002c68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c6c:	d842      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c6e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c72:	d029      	beq.n	8002cc8 <ADC_ConfigureBoostMode+0x11c>
 8002c74:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002c78:	d83c      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c7a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c7e:	d01a      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002c80:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002c84:	d836      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c86:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c8a:	d014      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002c8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c90:	d830      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c96:	d00e      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002c98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c9c:	d82a      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002c9e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ca2:	d008      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002ca4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ca8:	d824      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
 8002caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cae:	d002      	beq.n	8002cb6 <ADC_ConfigureBoostMode+0x10a>
 8002cb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cb4:	d11e      	bne.n	8002cf4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	60fb      	str	r3, [r7, #12]
        break;
 8002cc6:	e016      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
        break;
 8002cce:	e012      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	60fb      	str	r3, [r7, #12]
        break;
 8002cd6:	e00e      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	60fb      	str	r3, [r7, #12]
        break;
 8002cde:	e00a      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	09db      	lsrs	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]
        break;
 8002ce6:	e006      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	60fb      	str	r3, [r7, #12]
        break;
 8002cee:	e002      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002cf4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002cf6:	f7fe fded 	bl	80018d4 <HAL_GetREVID>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d815      	bhi.n	8002d30 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ADC_ConfigureBoostMode+0x208>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d908      	bls.n	8002d1e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d1c:	e03e      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d2c:	609a      	str	r2, [r3, #8]
}
 8002d2e:	e035      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	@ (8002db8 <ADC_ConfigureBoostMode+0x20c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d808      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	e025      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a1a      	ldr	r2, [pc, #104]	@ (8002dbc <ADC_ConfigureBoostMode+0x210>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d80a      	bhi.n	8002d6e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	e016      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <ADC_ConfigureBoostMode+0x214>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d80a      	bhi.n	8002d8c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d88:	609a      	str	r2, [r3, #8]
}
 8002d8a:	e007      	b.n	8002d9c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40022100 	.word	0x40022100
 8002dac:	40022300 	.word	0x40022300
 8002db0:	58026300 	.word	0x58026300
 8002db4:	01312d00 	.word	0x01312d00
 8002db8:	005f5e10 	.word	0x005f5e10
 8002dbc:	00bebc20 	.word	0x00bebc20
 8002dc0:	017d7840 	.word	0x017d7840

08002dc4 <LL_ADC_IsEnabled>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <LL_ADC_IsEnabled+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_ADC_IsEnabled+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <LL_ADC_StartCalibration>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <LL_ADC_StartCalibration+0x38>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	3ffeffc0 	.word	0x3ffeffc0

08002e28 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d101      	bne.n	8002e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_ADCEx_Calibration_Start+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e04c      	b.n	8002f30 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff fd90 	bl	80029c4 <ADC_Disable>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d135      	bne.n	8002f1a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eb2:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	f043 0202 	orr.w	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff90 	bl	8002dec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ecc:	e014      	b.n	8002ef8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4a19      	ldr	r2, [pc, #100]	@ (8002f3c <HAL_ADCEx_Calibration_Start+0xc4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d30d      	bcc.n	8002ef8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	f023 0312 	bic.w	r3, r3, #18
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01b      	b.n	8002f30 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff93 	bl	8002e28 <LL_ADC_IsCalibrationOnGoing>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e2      	bne.n	8002ece <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	f023 0303 	bic.w	r3, r3, #3
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f18:	e005      	b.n	8002f26 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	ffffeefd 	.word	0xffffeefd
 8002f3c:	25c3f800 	.word	0x25c3f800

08002f40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b09f      	sub	sp, #124	@ 0x7c
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0be      	b.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5c      	ldr	r2, [pc, #368]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d102      	bne.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f78:	4b5b      	ldr	r3, [pc, #364]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	e001      	b.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e09d      	b.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff54 	bl	8002e50 <LL_ADC_REG_IsConversionOngoing>
 8002fa8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff4e 	bl	8002e50 <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d17f      	bne.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d17c      	bne.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a47      	ldr	r2, [pc, #284]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a46      	ldr	r2, [pc, #280]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002fd4:	4b45      	ldr	r3, [pc, #276]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002fd6:	e000      	b.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002fd8:	4b45      	ldr	r3, [pc, #276]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002fda:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d039      	beq.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a38      	ldr	r2, [pc, #224]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10e      	bne.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800300a:	4836      	ldr	r0, [pc, #216]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800300c:	f7ff feda 	bl	8002dc4 <LL_ADC_IsEnabled>
 8003010:	4604      	mov	r4, r0
 8003012:	4835      	ldr	r0, [pc, #212]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003014:	f7ff fed6 	bl	8002dc4 <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	4323      	orrs	r3, r4
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e008      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003028:	4832      	ldr	r0, [pc, #200]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800302a:	f7ff fecb 	bl	8002dc4 <LL_ADC_IsEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d047      	beq.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800303e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003044:	4013      	ands	r3, r2
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	6811      	ldr	r1, [r2, #0]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	431a      	orrs	r2, r3
 8003052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003054:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003056:	e03a      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003062:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1e      	ldr	r2, [pc, #120]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1d      	ldr	r2, [pc, #116]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10e      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003078:	481a      	ldr	r0, [pc, #104]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800307a:	f7ff fea3 	bl	8002dc4 <LL_ADC_IsEnabled>
 800307e:	4604      	mov	r4, r0
 8003080:	4819      	ldr	r0, [pc, #100]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003082:	f7ff fe9f 	bl	8002dc4 <LL_ADC_IsEnabled>
 8003086:	4603      	mov	r3, r0
 8003088:	4323      	orrs	r3, r4
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e008      	b.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003096:	4817      	ldr	r0, [pc, #92]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003098:	f7ff fe94 	bl	8002dc4 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030b6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b8:	e009      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80030cc:	e000      	b.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80030dc:	4618      	mov	r0, r3
 80030de:	377c      	adds	r7, #124	@ 0x7c
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40022100 	.word	0x40022100
 80030ec:	40022300 	.word	0x40022300
 80030f0:	58026300 	.word	0x58026300
 80030f4:	58026000 	.word	0x58026000
 80030f8:	fffff0e0 	.word	0xfffff0e0

080030fc <__NVIC_SetPriorityGrouping>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <__NVIC_SetPriorityGrouping+0x40>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	4313      	orrs	r3, r2
 8003128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312a:	4a04      	ldr	r2, [pc, #16]	@ (800313c <__NVIC_SetPriorityGrouping+0x40>)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	60d3      	str	r3, [r2, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00
 8003140:	05fa0000 	.word	0x05fa0000

08003144 <__NVIC_GetPriorityGrouping>:
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	@ (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	@ (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	@ (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	@ 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	@ 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ff4c 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800327a:	f7ff ff63 	bl	8003144 <__NVIC_GetPriorityGrouping>
 800327e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	f7ff ffb3 	bl	80031f0 <NVIC_EncodePriority>
 800328a:	4602      	mov	r2, r0
 800328c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff82 	bl	800319c <__NVIC_SetPriority>
}
 8003298:	bf00      	nop
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff56 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80032c0:	f3bf 8f5f 	dmb	sy
}
 80032c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80032c6:	4b07      	ldr	r3, [pc, #28]	@ (80032e4 <HAL_MPU_Disable+0x28>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	4a06      	ldr	r2, [pc, #24]	@ (80032e4 <HAL_MPU_Disable+0x28>)
 80032cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032d2:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_MPU_Disable+0x2c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	605a      	str	r2, [r3, #4]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000ed00 	.word	0xe000ed00
 80032e8:	e000ed90 	.word	0xe000ed90

080032ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003324 <HAL_MPU_Enable+0x38>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80032fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003328 <HAL_MPU_Enable+0x3c>)
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	4a09      	ldr	r2, [pc, #36]	@ (8003328 <HAL_MPU_Enable+0x3c>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003308:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800330a:	f3bf 8f4f 	dsb	sy
}
 800330e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003310:	f3bf 8f6f 	isb	sy
}
 8003314:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000ed90 	.word	0xe000ed90
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	785a      	ldrb	r2, [r3, #1]
 8003338:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_MPU_ConfigRegion+0x84>)
 800333a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d029      	beq.n	8003398 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003344:	4a1a      	ldr	r2, [pc, #104]	@ (80033b0 <HAL_MPU_ConfigRegion+0x84>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7b1b      	ldrb	r3, [r3, #12]
 8003350:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7adb      	ldrb	r3, [r3, #11]
 8003356:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003358:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7a9b      	ldrb	r3, [r3, #10]
 800335e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003360:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7b5b      	ldrb	r3, [r3, #13]
 8003366:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003368:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7b9b      	ldrb	r3, [r3, #14]
 800336e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003370:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7bdb      	ldrb	r3, [r3, #15]
 8003376:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003378:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7a5b      	ldrb	r3, [r3, #9]
 800337e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003380:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7a1b      	ldrb	r3, [r3, #8]
 8003386:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003388:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003390:	4a07      	ldr	r2, [pc, #28]	@ (80033b0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003392:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003394:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003396:	e005      	b.n	80033a4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_MPU_ConfigRegion+0x84>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800339e:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <HAL_MPU_ConfigRegion+0x84>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed90 	.word	0xe000ed90

080033b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e014      	b.n	80033f0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	791b      	ldrb	r3, [r3, #4]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd f910 	bl	80005fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	795b      	ldrb	r3, [r3, #5]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_DAC_Start+0x16>
 800340a:	2302      	movs	r3, #2
 800340c:	e040      	b.n	8003490 <HAL_DAC_Start+0x98>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2201      	movs	r2, #1
 8003428:	409a      	lsls	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10f      	bne.n	8003458 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003442:	2b02      	cmp	r3, #2
 8003444:	d11d      	bne.n	8003482 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	e014      	b.n	8003482 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2102      	movs	r1, #2
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	429a      	cmp	r2, r3
 8003470:	d107      	bne.n	8003482 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0202 	orr.w	r2, r2, #2
 8003480:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b2:	d120      	bne.n	80034f6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c2:	d118      	bne.n	80034f6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2204      	movs	r2, #4
 80034c8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f043 0201 	orr.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034ee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f852 	bl	800359a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003504:	d120      	bne.n	8003548 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003514:	d118      	bne.n	8003548 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003540:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f972 	bl	800382c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	3308      	adds	r3, #8
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e004      	b.n	8003584 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	3314      	adds	r3, #20
 8003582:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	461a      	mov	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	795b      	ldrb	r3, [r3, #5]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_DAC_ConfigChannel+0x18>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e12a      	b.n	800381e <HAL_DAC_ConfigChannel+0x26e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2202      	movs	r2, #2
 80035d2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	f040 8081 	bne.w	80036e0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80035de:	f7fe f949 	bl	8001874 <HAL_GetTick>
 80035e2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d140      	bne.n	800366c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035ea:	e018      	b.n	800361e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035ec:	f7fe f942 	bl	8001874 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d911      	bls.n	800361e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003600:	4b89      	ldr	r3, [pc, #548]	@ (8003828 <HAL_DAC_ConfigChannel+0x278>)
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f043 0208 	orr.w	r2, r3, #8
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2203      	movs	r2, #3
 8003618:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0ff      	b.n	800381e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003624:	4b80      	ldr	r3, [pc, #512]	@ (8003828 <HAL_DAC_ConfigChannel+0x278>)
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1df      	bne.n	80035ec <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800362c:	2001      	movs	r0, #1
 800362e:	f7fe f92d 	bl	800188c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	6992      	ldr	r2, [r2, #24]
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40
 800363c:	e023      	b.n	8003686 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800363e:	f7fe f919 	bl	8001874 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d90f      	bls.n	800366c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	2b00      	cmp	r3, #0
 8003654:	da0a      	bge.n	800366c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f043 0208 	orr.w	r2, r3, #8
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2203      	movs	r2, #3
 8003666:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0d8      	b.n	800381e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003672:	2b00      	cmp	r3, #0
 8003674:	dbe3      	blt.n	800363e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8003676:	2001      	movs	r0, #1
 8003678:	f7fe f908 	bl	800188c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	6992      	ldr	r2, [r2, #24]
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	ea02 0103 	and.w	r1, r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	409a      	lsls	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	21ff      	movs	r1, #255	@ 0xff
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	ea02 0103 	and.w	r1, r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a1a      	ldr	r2, [r3, #32]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11d      	bne.n	8003724 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ee:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	221f      	movs	r2, #31
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4013      	ands	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2207      	movs	r2, #7
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e00f      	b.n	800376e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d102      	bne.n	800375c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003756:	2301      	movs	r3, #1
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e008      	b.n	800376e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003764:	2301      	movs	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e001      	b.n	800376e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4013      	ands	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	22c0      	movs	r2, #192	@ 0xc0
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	400a      	ands	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20008000 	.word	0x20008000

0800382c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e226      	b.n	8003caa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_DMA_Start_IT+0x2a>
 8003866:	2302      	movs	r3, #2
 8003868:	e21f      	b.n	8003caa <HAL_DMA_Start_IT+0x46a>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 820a 	bne.w	8003c94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a68      	ldr	r2, [pc, #416]	@ (8003a34 <HAL_DMA_Start_IT+0x1f4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d04a      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a66      	ldr	r2, [pc, #408]	@ (8003a38 <HAL_DMA_Start_IT+0x1f8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d045      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a65      	ldr	r2, [pc, #404]	@ (8003a3c <HAL_DMA_Start_IT+0x1fc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d040      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a63      	ldr	r2, [pc, #396]	@ (8003a40 <HAL_DMA_Start_IT+0x200>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d03b      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a62      	ldr	r2, [pc, #392]	@ (8003a44 <HAL_DMA_Start_IT+0x204>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d036      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a60      	ldr	r2, [pc, #384]	@ (8003a48 <HAL_DMA_Start_IT+0x208>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d031      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003a4c <HAL_DMA_Start_IT+0x20c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d02c      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a50 <HAL_DMA_Start_IT+0x210>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d027      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a54 <HAL_DMA_Start_IT+0x214>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003a58 <HAL_DMA_Start_IT+0x218>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01d      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a59      	ldr	r2, [pc, #356]	@ (8003a5c <HAL_DMA_Start_IT+0x21c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a57      	ldr	r2, [pc, #348]	@ (8003a60 <HAL_DMA_Start_IT+0x220>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a56      	ldr	r2, [pc, #344]	@ (8003a64 <HAL_DMA_Start_IT+0x224>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a54      	ldr	r2, [pc, #336]	@ (8003a68 <HAL_DMA_Start_IT+0x228>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a53      	ldr	r2, [pc, #332]	@ (8003a6c <HAL_DMA_Start_IT+0x22c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_DMA_Start_IT+0xee>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a51      	ldr	r2, [pc, #324]	@ (8003a70 <HAL_DMA_Start_IT+0x230>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <HAL_DMA_Start_IT+0x100>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e007      	b.n	8003950 <HAL_DMA_Start_IT+0x110>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f9dc 	bl	8003d14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a34      	ldr	r2, [pc, #208]	@ (8003a34 <HAL_DMA_Start_IT+0x1f4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d04a      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a33      	ldr	r2, [pc, #204]	@ (8003a38 <HAL_DMA_Start_IT+0x1f8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d045      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a31      	ldr	r2, [pc, #196]	@ (8003a3c <HAL_DMA_Start_IT+0x1fc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d040      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a30      	ldr	r2, [pc, #192]	@ (8003a40 <HAL_DMA_Start_IT+0x200>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d03b      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2e      	ldr	r2, [pc, #184]	@ (8003a44 <HAL_DMA_Start_IT+0x204>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d036      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2d      	ldr	r2, [pc, #180]	@ (8003a48 <HAL_DMA_Start_IT+0x208>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d031      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a4c <HAL_DMA_Start_IT+0x20c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02c      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a50 <HAL_DMA_Start_IT+0x210>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d027      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a28      	ldr	r2, [pc, #160]	@ (8003a54 <HAL_DMA_Start_IT+0x214>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d022      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a27      	ldr	r2, [pc, #156]	@ (8003a58 <HAL_DMA_Start_IT+0x218>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d01d      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a25      	ldr	r2, [pc, #148]	@ (8003a5c <HAL_DMA_Start_IT+0x21c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d018      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a24      	ldr	r2, [pc, #144]	@ (8003a60 <HAL_DMA_Start_IT+0x220>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d013      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a22      	ldr	r2, [pc, #136]	@ (8003a64 <HAL_DMA_Start_IT+0x224>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00e      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a21      	ldr	r2, [pc, #132]	@ (8003a68 <HAL_DMA_Start_IT+0x228>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1f      	ldr	r2, [pc, #124]	@ (8003a6c <HAL_DMA_Start_IT+0x22c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_DMA_Start_IT+0x1bc>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a70 <HAL_DMA_Start_IT+0x230>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Start_IT+0x1c0>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_DMA_Start_IT+0x1c2>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d036      	beq.n	8003a74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f023 021e 	bic.w	r2, r3, #30
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0216 	orr.w	r2, r2, #22
 8003a18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03e      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0208 	orr.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e035      	b.n	8003aa0 <HAL_DMA_Start_IT+0x260>
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 020e 	bic.w	r2, r3, #14
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 020a 	orr.w	r2, r2, #10
 8003a86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0204 	orr.w	r2, r2, #4
 8003a9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a83      	ldr	r2, [pc, #524]	@ (8003cb4 <HAL_DMA_Start_IT+0x474>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d072      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a82      	ldr	r2, [pc, #520]	@ (8003cb8 <HAL_DMA_Start_IT+0x478>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d06d      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a80      	ldr	r2, [pc, #512]	@ (8003cbc <HAL_DMA_Start_IT+0x47c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d068      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7f      	ldr	r2, [pc, #508]	@ (8003cc0 <HAL_DMA_Start_IT+0x480>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d063      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc4 <HAL_DMA_Start_IT+0x484>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d05e      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc8 <HAL_DMA_Start_IT+0x488>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d059      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7a      	ldr	r2, [pc, #488]	@ (8003ccc <HAL_DMA_Start_IT+0x48c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d054      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a79      	ldr	r2, [pc, #484]	@ (8003cd0 <HAL_DMA_Start_IT+0x490>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04f      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a77      	ldr	r2, [pc, #476]	@ (8003cd4 <HAL_DMA_Start_IT+0x494>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d04a      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a76      	ldr	r2, [pc, #472]	@ (8003cd8 <HAL_DMA_Start_IT+0x498>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d045      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a74      	ldr	r2, [pc, #464]	@ (8003cdc <HAL_DMA_Start_IT+0x49c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d040      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a73      	ldr	r2, [pc, #460]	@ (8003ce0 <HAL_DMA_Start_IT+0x4a0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d03b      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a71      	ldr	r2, [pc, #452]	@ (8003ce4 <HAL_DMA_Start_IT+0x4a4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d036      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a70      	ldr	r2, [pc, #448]	@ (8003ce8 <HAL_DMA_Start_IT+0x4a8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d031      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6e      	ldr	r2, [pc, #440]	@ (8003cec <HAL_DMA_Start_IT+0x4ac>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02c      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8003cf0 <HAL_DMA_Start_IT+0x4b0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d027      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf4 <HAL_DMA_Start_IT+0x4b4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d022      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf8 <HAL_DMA_Start_IT+0x4b8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d01d      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a68      	ldr	r2, [pc, #416]	@ (8003cfc <HAL_DMA_Start_IT+0x4bc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d018      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a67      	ldr	r2, [pc, #412]	@ (8003d00 <HAL_DMA_Start_IT+0x4c0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a65      	ldr	r2, [pc, #404]	@ (8003d04 <HAL_DMA_Start_IT+0x4c4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00e      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a64      	ldr	r2, [pc, #400]	@ (8003d08 <HAL_DMA_Start_IT+0x4c8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d009      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a62      	ldr	r2, [pc, #392]	@ (8003d0c <HAL_DMA_Start_IT+0x4cc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <HAL_DMA_Start_IT+0x350>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a61      	ldr	r2, [pc, #388]	@ (8003d10 <HAL_DMA_Start_IT+0x4d0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_DMA_Start_IT+0x354>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <HAL_DMA_Start_IT+0x356>
 8003b94:	2300      	movs	r3, #0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01a      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a37      	ldr	r2, [pc, #220]	@ (8003cb4 <HAL_DMA_Start_IT+0x474>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d04a      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a36      	ldr	r2, [pc, #216]	@ (8003cb8 <HAL_DMA_Start_IT+0x478>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d045      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a34      	ldr	r2, [pc, #208]	@ (8003cbc <HAL_DMA_Start_IT+0x47c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d040      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a33      	ldr	r2, [pc, #204]	@ (8003cc0 <HAL_DMA_Start_IT+0x480>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d03b      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a31      	ldr	r2, [pc, #196]	@ (8003cc4 <HAL_DMA_Start_IT+0x484>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d036      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a30      	ldr	r2, [pc, #192]	@ (8003cc8 <HAL_DMA_Start_IT+0x488>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d031      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2e      	ldr	r2, [pc, #184]	@ (8003ccc <HAL_DMA_Start_IT+0x48c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02c      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd0 <HAL_DMA_Start_IT+0x490>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d027      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd4 <HAL_DMA_Start_IT+0x494>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d022      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd8 <HAL_DMA_Start_IT+0x498>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d01d      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a28      	ldr	r2, [pc, #160]	@ (8003cdc <HAL_DMA_Start_IT+0x49c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d018      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a27      	ldr	r2, [pc, #156]	@ (8003ce0 <HAL_DMA_Start_IT+0x4a0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ce4 <HAL_DMA_Start_IT+0x4a4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00e      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a24      	ldr	r2, [pc, #144]	@ (8003ce8 <HAL_DMA_Start_IT+0x4a8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d009      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a22      	ldr	r2, [pc, #136]	@ (8003cec <HAL_DMA_Start_IT+0x4ac>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_DMA_Start_IT+0x430>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	@ (8003cf0 <HAL_DMA_Start_IT+0x4b0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d108      	bne.n	8003c82 <HAL_DMA_Start_IT+0x442>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e012      	b.n	8003ca8 <HAL_DMA_Start_IT+0x468>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e009      	b.n	8003ca8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40020010 	.word	0x40020010
 8003cb8:	40020028 	.word	0x40020028
 8003cbc:	40020040 	.word	0x40020040
 8003cc0:	40020058 	.word	0x40020058
 8003cc4:	40020070 	.word	0x40020070
 8003cc8:	40020088 	.word	0x40020088
 8003ccc:	400200a0 	.word	0x400200a0
 8003cd0:	400200b8 	.word	0x400200b8
 8003cd4:	40020410 	.word	0x40020410
 8003cd8:	40020428 	.word	0x40020428
 8003cdc:	40020440 	.word	0x40020440
 8003ce0:	40020458 	.word	0x40020458
 8003ce4:	40020470 	.word	0x40020470
 8003ce8:	40020488 	.word	0x40020488
 8003cec:	400204a0 	.word	0x400204a0
 8003cf0:	400204b8 	.word	0x400204b8
 8003cf4:	58025408 	.word	0x58025408
 8003cf8:	5802541c 	.word	0x5802541c
 8003cfc:	58025430 	.word	0x58025430
 8003d00:	58025444 	.word	0x58025444
 8003d04:	58025458 	.word	0x58025458
 8003d08:	5802546c 	.word	0x5802546c
 8003d0c:	58025480 	.word	0x58025480
 8003d10:	58025494 	.word	0x58025494

08003d14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7f      	ldr	r2, [pc, #508]	@ (8003f30 <DMA_SetConfig+0x21c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d072      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7d      	ldr	r2, [pc, #500]	@ (8003f34 <DMA_SetConfig+0x220>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d06d      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7c      	ldr	r2, [pc, #496]	@ (8003f38 <DMA_SetConfig+0x224>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d068      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a7a      	ldr	r2, [pc, #488]	@ (8003f3c <DMA_SetConfig+0x228>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d063      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a79      	ldr	r2, [pc, #484]	@ (8003f40 <DMA_SetConfig+0x22c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d05e      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a77      	ldr	r2, [pc, #476]	@ (8003f44 <DMA_SetConfig+0x230>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d059      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a76      	ldr	r2, [pc, #472]	@ (8003f48 <DMA_SetConfig+0x234>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d054      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a74      	ldr	r2, [pc, #464]	@ (8003f4c <DMA_SetConfig+0x238>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d04f      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a73      	ldr	r2, [pc, #460]	@ (8003f50 <DMA_SetConfig+0x23c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04a      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a71      	ldr	r2, [pc, #452]	@ (8003f54 <DMA_SetConfig+0x240>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d045      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a70      	ldr	r2, [pc, #448]	@ (8003f58 <DMA_SetConfig+0x244>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d040      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f5c <DMA_SetConfig+0x248>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d03b      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6d      	ldr	r2, [pc, #436]	@ (8003f60 <DMA_SetConfig+0x24c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d036      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6b      	ldr	r2, [pc, #428]	@ (8003f64 <DMA_SetConfig+0x250>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d031      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8003f68 <DMA_SetConfig+0x254>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d02c      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a68      	ldr	r2, [pc, #416]	@ (8003f6c <DMA_SetConfig+0x258>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d027      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a67      	ldr	r2, [pc, #412]	@ (8003f70 <DMA_SetConfig+0x25c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d022      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a65      	ldr	r2, [pc, #404]	@ (8003f74 <DMA_SetConfig+0x260>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a64      	ldr	r2, [pc, #400]	@ (8003f78 <DMA_SetConfig+0x264>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d018      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a62      	ldr	r2, [pc, #392]	@ (8003f7c <DMA_SetConfig+0x268>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a61      	ldr	r2, [pc, #388]	@ (8003f80 <DMA_SetConfig+0x26c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5f      	ldr	r2, [pc, #380]	@ (8003f84 <DMA_SetConfig+0x270>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f88 <DMA_SetConfig+0x274>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <DMA_SetConfig+0x10a>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5c      	ldr	r2, [pc, #368]	@ (8003f8c <DMA_SetConfig+0x278>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <DMA_SetConfig+0x10e>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <DMA_SetConfig+0x110>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a39      	ldr	r2, [pc, #228]	@ (8003f30 <DMA_SetConfig+0x21c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d04a      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a38      	ldr	r2, [pc, #224]	@ (8003f34 <DMA_SetConfig+0x220>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d045      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a36      	ldr	r2, [pc, #216]	@ (8003f38 <DMA_SetConfig+0x224>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d040      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <DMA_SetConfig+0x228>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d03b      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a33      	ldr	r2, [pc, #204]	@ (8003f40 <DMA_SetConfig+0x22c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d036      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a32      	ldr	r2, [pc, #200]	@ (8003f44 <DMA_SetConfig+0x230>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d031      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <DMA_SetConfig+0x234>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02c      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f4c <DMA_SetConfig+0x238>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d027      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <DMA_SetConfig+0x23c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d022      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f54 <DMA_SetConfig+0x240>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d01d      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	@ (8003f58 <DMA_SetConfig+0x244>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d018      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a29      	ldr	r2, [pc, #164]	@ (8003f5c <DMA_SetConfig+0x248>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a27      	ldr	r2, [pc, #156]	@ (8003f60 <DMA_SetConfig+0x24c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00e      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a26      	ldr	r2, [pc, #152]	@ (8003f64 <DMA_SetConfig+0x250>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a24      	ldr	r2, [pc, #144]	@ (8003f68 <DMA_SetConfig+0x254>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <DMA_SetConfig+0x1d0>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a23      	ldr	r2, [pc, #140]	@ (8003f6c <DMA_SetConfig+0x258>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <DMA_SetConfig+0x1d4>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <DMA_SetConfig+0x1d6>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d059      	beq.n	8003fa2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	223f      	movs	r2, #63	@ 0x3f
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b40      	cmp	r3, #64	@ 0x40
 8003f1c:	d138      	bne.n	8003f90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f2e:	e086      	b.n	800403e <DMA_SetConfig+0x32a>
 8003f30:	40020010 	.word	0x40020010
 8003f34:	40020028 	.word	0x40020028
 8003f38:	40020040 	.word	0x40020040
 8003f3c:	40020058 	.word	0x40020058
 8003f40:	40020070 	.word	0x40020070
 8003f44:	40020088 	.word	0x40020088
 8003f48:	400200a0 	.word	0x400200a0
 8003f4c:	400200b8 	.word	0x400200b8
 8003f50:	40020410 	.word	0x40020410
 8003f54:	40020428 	.word	0x40020428
 8003f58:	40020440 	.word	0x40020440
 8003f5c:	40020458 	.word	0x40020458
 8003f60:	40020470 	.word	0x40020470
 8003f64:	40020488 	.word	0x40020488
 8003f68:	400204a0 	.word	0x400204a0
 8003f6c:	400204b8 	.word	0x400204b8
 8003f70:	58025408 	.word	0x58025408
 8003f74:	5802541c 	.word	0x5802541c
 8003f78:	58025430 	.word	0x58025430
 8003f7c:	58025444 	.word	0x58025444
 8003f80:	58025458 	.word	0x58025458
 8003f84:	5802546c 	.word	0x5802546c
 8003f88:	58025480 	.word	0x58025480
 8003f8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
}
 8003fa0:	e04d      	b.n	800403e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a29      	ldr	r2, [pc, #164]	@ (800404c <DMA_SetConfig+0x338>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <DMA_SetConfig+0x2de>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a27      	ldr	r2, [pc, #156]	@ (8004050 <DMA_SetConfig+0x33c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01d      	beq.n	8003ff2 <DMA_SetConfig+0x2de>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a26      	ldr	r2, [pc, #152]	@ (8004054 <DMA_SetConfig+0x340>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <DMA_SetConfig+0x2de>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a24      	ldr	r2, [pc, #144]	@ (8004058 <DMA_SetConfig+0x344>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <DMA_SetConfig+0x2de>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a23      	ldr	r2, [pc, #140]	@ (800405c <DMA_SetConfig+0x348>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <DMA_SetConfig+0x2de>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a21      	ldr	r2, [pc, #132]	@ (8004060 <DMA_SetConfig+0x34c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <DMA_SetConfig+0x2de>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a20      	ldr	r2, [pc, #128]	@ (8004064 <DMA_SetConfig+0x350>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <DMA_SetConfig+0x2de>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	@ (8004068 <DMA_SetConfig+0x354>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <DMA_SetConfig+0x2e2>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <DMA_SetConfig+0x2e4>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2201      	movs	r2, #1
 8004006:	409a      	lsls	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d108      	bne.n	800402e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	60da      	str	r2, [r3, #12]
}
 800402c:	e007      	b.n	800403e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	60da      	str	r2, [r3, #12]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	58025408 	.word	0x58025408
 8004050:	5802541c 	.word	0x5802541c
 8004054:	58025430 	.word	0x58025430
 8004058:	58025444 	.word	0x58025444
 800405c:	58025458 	.word	0x58025458
 8004060:	5802546c 	.word	0x5802546c
 8004064:	58025480 	.word	0x58025480
 8004068:	58025494 	.word	0x58025494

0800406c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	@ 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800407a:	4b89      	ldr	r3, [pc, #548]	@ (80042a0 <HAL_GPIO_Init+0x234>)
 800407c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800407e:	e194      	b.n	80043aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8186 	beq.w	80043a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d005      	beq.n	80040b0 <HAL_GPIO_Init+0x44>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d130      	bne.n	8004112 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	2203      	movs	r2, #3
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040e6:	2201      	movs	r2, #1
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 0201 	and.w	r2, r3, #1
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b03      	cmp	r3, #3
 800411c:	d017      	beq.n	800414e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d123      	bne.n	80041a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	08da      	lsrs	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	220f      	movs	r2, #15
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	08da      	lsrs	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3208      	adds	r2, #8
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	2203      	movs	r2, #3
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0203 	and.w	r2, r3, #3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80e0 	beq.w	80043a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e4:	4b2f      	ldr	r3, [pc, #188]	@ (80042a4 <HAL_GPIO_Init+0x238>)
 80041e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041ea:	4a2e      	ldr	r2, [pc, #184]	@ (80042a4 <HAL_GPIO_Init+0x238>)
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80041f4:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <HAL_GPIO_Init+0x238>)
 80041f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004202:	4a29      	ldr	r2, [pc, #164]	@ (80042a8 <HAL_GPIO_Init+0x23c>)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	089b      	lsrs	r3, r3, #2
 8004208:	3302      	adds	r3, #2
 800420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a20      	ldr	r2, [pc, #128]	@ (80042ac <HAL_GPIO_Init+0x240>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d052      	beq.n	80042d4 <HAL_GPIO_Init+0x268>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <HAL_GPIO_Init+0x244>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_GPIO_Init+0x22e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1e      	ldr	r2, [pc, #120]	@ (80042b4 <HAL_GPIO_Init+0x248>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02b      	beq.n	8004296 <HAL_GPIO_Init+0x22a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a1d      	ldr	r2, [pc, #116]	@ (80042b8 <HAL_GPIO_Init+0x24c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d025      	beq.n	8004292 <HAL_GPIO_Init+0x226>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1c      	ldr	r2, [pc, #112]	@ (80042bc <HAL_GPIO_Init+0x250>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01f      	beq.n	800428e <HAL_GPIO_Init+0x222>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1b      	ldr	r2, [pc, #108]	@ (80042c0 <HAL_GPIO_Init+0x254>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d019      	beq.n	800428a <HAL_GPIO_Init+0x21e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1a      	ldr	r2, [pc, #104]	@ (80042c4 <HAL_GPIO_Init+0x258>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_GPIO_Init+0x21a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a19      	ldr	r2, [pc, #100]	@ (80042c8 <HAL_GPIO_Init+0x25c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00d      	beq.n	8004282 <HAL_GPIO_Init+0x216>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a18      	ldr	r2, [pc, #96]	@ (80042cc <HAL_GPIO_Init+0x260>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <HAL_GPIO_Init+0x212>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a17      	ldr	r2, [pc, #92]	@ (80042d0 <HAL_GPIO_Init+0x264>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_GPIO_Init+0x20e>
 8004276:	2309      	movs	r3, #9
 8004278:	e02d      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 800427a:	230a      	movs	r3, #10
 800427c:	e02b      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 800427e:	2308      	movs	r3, #8
 8004280:	e029      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 8004282:	2307      	movs	r3, #7
 8004284:	e027      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 8004286:	2306      	movs	r3, #6
 8004288:	e025      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 800428a:	2305      	movs	r3, #5
 800428c:	e023      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 800428e:	2304      	movs	r3, #4
 8004290:	e021      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 8004292:	2303      	movs	r3, #3
 8004294:	e01f      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 8004296:	2302      	movs	r3, #2
 8004298:	e01d      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 800429a:	2301      	movs	r3, #1
 800429c:	e01b      	b.n	80042d6 <HAL_GPIO_Init+0x26a>
 800429e:	bf00      	nop
 80042a0:	58000080 	.word	0x58000080
 80042a4:	58024400 	.word	0x58024400
 80042a8:	58000400 	.word	0x58000400
 80042ac:	58020000 	.word	0x58020000
 80042b0:	58020400 	.word	0x58020400
 80042b4:	58020800 	.word	0x58020800
 80042b8:	58020c00 	.word	0x58020c00
 80042bc:	58021000 	.word	0x58021000
 80042c0:	58021400 	.word	0x58021400
 80042c4:	58021800 	.word	0x58021800
 80042c8:	58021c00 	.word	0x58021c00
 80042cc:	58022000 	.word	0x58022000
 80042d0:	58022400 	.word	0x58022400
 80042d4:	2300      	movs	r3, #0
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	f002 0203 	and.w	r2, r2, #3
 80042dc:	0092      	lsls	r2, r2, #2
 80042de:	4093      	lsls	r3, r2
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042e6:	4938      	ldr	r1, [pc, #224]	@ (80043c8 <HAL_GPIO_Init+0x35c>)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	3302      	adds	r3, #2
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	43db      	mvns	r3, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800431a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f ae63 	bne.w	8004080 <HAL_GPIO_Init+0x14>
  }
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	3724      	adds	r7, #36	@ 0x24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	58000400 	.word	0x58000400

080043cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
 80043d8:	4613      	mov	r3, r2
 80043da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043dc:	787b      	ldrb	r3, [r7, #1]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043e8:	e003      	b.n	80043f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043ea:	887b      	ldrh	r3, [r7, #2]
 80043ec:	041a      	lsls	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	619a      	str	r2, [r3, #24]
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004410:	887a      	ldrh	r2, [r7, #2]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4013      	ands	r3, r2
 8004416:	041a      	lsls	r2, r3, #16
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	43d9      	mvns	r1, r3
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	400b      	ands	r3, r1
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	619a      	str	r2, [r3, #24]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e07f      	b.n	8004546 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fa28 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004484:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004494:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	e006      	b.n	80044bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d104      	bne.n	80044ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <HAL_I2C_Init+0x11c>)
 80044da:	430b      	orrs	r3, r1
 80044dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69d9      	ldr	r1, [r3, #28]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	02008000 	.word	0x02008000

08004554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	d138      	bne.n	80045dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004574:	2302      	movs	r3, #2
 8004576:	e032      	b.n	80045de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	@ 0x24
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d139      	bne.n	8004674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800460a:	2302      	movs	r3, #2
 800460c:	e033      	b.n	8004676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2224      	movs	r2, #36	@ 0x24
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800463c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004684:	b08f      	sub	sp, #60	@ 0x3c
 8004686:	af0a      	add	r7, sp, #40	@ 0x28
 8004688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e116      	b.n	80048c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f00b f9a8 	bl	800fa04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2203      	movs	r2, #3
 80046b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f007 f8eb 	bl	800b8ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	687e      	ldr	r6, [r7, #4]
 80046e0:	466d      	mov	r5, sp
 80046e2:	f106 0410 	add.w	r4, r6, #16
 80046e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80046f6:	1d33      	adds	r3, r6, #4
 80046f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046fa:	6838      	ldr	r0, [r7, #0]
 80046fc:	f006 ffb6 	bl	800b66c <USB_CoreInit>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e0d7      	b.n	80048c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2100      	movs	r1, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f007 f8d9 	bl	800b8d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	e04a      	b.n	80047ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004724:	7bfa      	ldrb	r2, [r7, #15]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	333d      	adds	r3, #61	@ 0x3d
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	333c      	adds	r3, #60	@ 0x3c
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	b298      	uxth	r0, r3
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	3356      	adds	r3, #86	@ 0x56
 8004760:	4602      	mov	r2, r0
 8004762:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3340      	adds	r3, #64	@ 0x40
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3344      	adds	r3, #68	@ 0x44
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3348      	adds	r3, #72	@ 0x48
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	334c      	adds	r3, #76	@ 0x4c
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	3301      	adds	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d3af      	bcc.n	8004724 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e044      	b.n	8004854 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047ca:	7bfa      	ldrb	r2, [r7, #15]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047f6:	7bfa      	ldrb	r2, [r7, #15]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800480c:	7bfa      	ldrb	r2, [r7, #15]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	3301      	adds	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d3b5      	bcc.n	80047ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	687e      	ldr	r6, [r7, #4]
 8004866:	466d      	mov	r5, sp
 8004868:	f106 0410 	add.w	r4, r6, #16
 800486c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800486e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004878:	e885 0003 	stmia.w	r5, {r0, r1}
 800487c:	1d33      	adds	r3, r6, #4
 800487e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	f007 f871 	bl	800b968 <USB_DevInit>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e014      	b.n	80048c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d102      	bne.n	80048b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f001 f96f 	bl	8005b94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f008 f8b3 	bl	800ca26 <USB_DevDisconnect>

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_PCD_Start+0x1c>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e022      	b.n	800492c <HAL_PCD_Start+0x62>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d105      	bne.n	800490e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f006 ffba 	bl	800b88c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f008 f861 	bl	800c9e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b08d      	sub	sp, #52	@ 0x34
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f008 f91f 	bl	800cb8e <USB_GetMode>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 84b7 	bne.w	80052c6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f008 f883 	bl	800ca68 <USB_ReadInterrupts>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 84ad 	beq.w	80052c4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f008 f870 	bl	800ca68 <USB_ReadInterrupts>
 8004988:	4603      	mov	r3, r0
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d107      	bne.n	80049a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f002 0202 	and.w	r2, r2, #2
 80049a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f008 f85e 	bl	800ca68 <USB_ReadInterrupts>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d161      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0210 	bic.w	r2, r2, #16
 80049c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f003 020f 	and.w	r2, r3, #15
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	0c5b      	lsrs	r3, r3, #17
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d124      	bne.n	8004a3c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d035      	beq.n	8004a6a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6a38      	ldr	r0, [r7, #32]
 8004a12:	f007 fe95 	bl	800c740 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a22:	441a      	add	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a34:	441a      	add	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	615a      	str	r2, [r3, #20]
 8004a3a:	e016      	b.n	8004a6a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	0c5b      	lsrs	r3, r3, #17
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d110      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a4e:	2208      	movs	r2, #8
 8004a50:	4619      	mov	r1, r3
 8004a52:	6a38      	ldr	r0, [r7, #32]
 8004a54:	f007 fe74 	bl	800c740 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a64:	441a      	add	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0210 	orr.w	r2, r2, #16
 8004a78:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f007 fff2 	bl	800ca68 <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a8e:	f040 80a7 	bne.w	8004be0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f007 fff7 	bl	800ca8e <USB_ReadDevAllOutEpInterrupt>
 8004aa0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004aa2:	e099      	b.n	8004bd8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 808e 	beq.w	8004bcc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f008 f81b 	bl	800caf6 <USB_ReadDevOutEPInterrupt>
 8004ac0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2301      	movs	r3, #1
 8004adc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ade:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fed1 	bl	8005888 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	2308      	movs	r3, #8
 8004b00:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 ffa7 	bl	8005a58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b20:	461a      	mov	r2, r3
 8004b22:	2310      	movs	r3, #16
 8004b24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d030      	beq.n	8004b92 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b38:	2b80      	cmp	r3, #128	@ 0x80
 8004b3a:	d109      	bne.n	8004b50 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b4e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	78db      	ldrb	r3, [r3, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d108      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f00b f868 	bl	800fc50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2302      	movs	r3, #2
 8004b90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2320      	movs	r3, #32
 8004bac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	3301      	adds	r3, #1
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f47f af62 	bne.w	8004aa4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f007 ff3f 	bl	800ca68 <USB_ReadInterrupts>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bf4:	f040 80db 	bne.w	8004dae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f007 ff60 	bl	800cac2 <USB_ReadDevAllInEpInterrupt>
 8004c02:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004c08:	e0cd      	b.n	8004da6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80c2 	beq.w	8004d9a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f007 ff86 	bl	800cb32 <USB_ReadDevInEPInterrupt>
 8004c26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d057      	beq.n	8004ce2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2201      	movs	r2, #1
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c52:	4013      	ands	r3, r2
 8004c54:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c62:	461a      	mov	r2, r3
 8004c64:	2301      	movs	r3, #1
 8004c66:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d132      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3348      	adds	r3, #72	@ 0x48
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4403      	add	r3, r0
 8004c90:	3344      	adds	r3, #68	@ 0x44
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4419      	add	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4403      	add	r3, r0
 8004ca4:	3348      	adds	r3, #72	@ 0x48
 8004ca6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d113      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x3a2>
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	334c      	adds	r3, #76	@ 0x4c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d108      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004cce:	461a      	mov	r2, r3
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	f007 ff8f 	bl	800cbf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f00a ff32 	bl	800fb46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d14:	461a      	mov	r2, r3
 8004d16:	2310      	movs	r3, #16
 8004d18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d30:	461a      	mov	r2, r3
 8004d32:	2340      	movs	r3, #64	@ 0x40
 8004d34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d023      	beq.n	8004d88 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004d40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d42:	6a38      	ldr	r0, [r7, #32]
 8004d44:	f006 ff6e 	bl	800bc24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	3338      	adds	r3, #56	@ 0x38
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	3304      	adds	r3, #4
 8004d5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	78db      	ldrb	r3, [r3, #3]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d108      	bne.n	8004d76 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2200      	movs	r2, #0
 8004d68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f00a ff7f 	bl	800fc74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d82:	461a      	mov	r2, r3
 8004d84:	2302      	movs	r3, #2
 8004d86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fcea 	bl	800576e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f af2e 	bne.w	8004c0a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f007 fe58 	bl	800ca68 <USB_ReadInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc2:	d122      	bne.n	8004e0a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d108      	bne.n	8004df4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004dea:	2100      	movs	r1, #0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fef5 	bl	8005bdc <HAL_PCDEx_LPM_Callback>
 8004df2:	e002      	b.n	8004dfa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f00a ff1d 	bl	800fc34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f007 fe2a 	bl	800ca68 <USB_ReadInterrupts>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e1e:	d112      	bne.n	8004e46 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d102      	bne.n	8004e36 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f00a fed9 	bl	800fbe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f007 fe0c 	bl	800ca68 <USB_ReadInterrupts>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e5a:	d121      	bne.n	8004ea0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004e6a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d111      	bne.n	8004e9a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	f003 020f 	and.w	r2, r3, #15
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004e90:	2101      	movs	r1, #1
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fea2 	bl	8005bdc <HAL_PCDEx_LPM_Callback>
 8004e98:	e002      	b.n	8004ea0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f00a fea4 	bl	800fbe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f007 fddf 	bl	800ca68 <USB_ReadInterrupts>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb4:	f040 80b7 	bne.w	8005026 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2110      	movs	r1, #16
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f006 fea6 	bl	800bc24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004edc:	e046      	b.n	8004f6c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eea:	461a      	mov	r2, r3
 8004eec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ef0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f68:	3301      	adds	r3, #1
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d3b3      	bcc.n	8004ede <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f84:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004f88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa2:	f043 030b 	orr.w	r3, r3, #11
 8004fa6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb8:	f043 030b 	orr.w	r3, r3, #11
 8004fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fbe:	e015      	b.n	8004fec <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fe6:	f043 030b 	orr.w	r3, r3, #11
 8004fea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ffa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ffe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005010:	461a      	mov	r2, r3
 8005012:	f007 fdef 	bl	800cbf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f007 fd1c 	bl	800ca68 <USB_ReadInterrupts>
 8005030:	4603      	mov	r3, r0
 8005032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503a:	d124      	bne.n	8005086 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f007 fdb3 	bl	800cbac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f006 fe67 	bl	800bd1e <USB_GetDevSpeed>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681c      	ldr	r4, [r3, #0]
 800505c:	f001 fd9e 	bl	8006b9c <HAL_RCC_GetHCLKFreq>
 8005060:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	4620      	mov	r0, r4
 800506c:	f006 fb6c 	bl	800b748 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f00a fd90 	bl	800fb96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005084:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f007 fcec 	bl	800ca68 <USB_ReadInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b08      	cmp	r3, #8
 8005098:	d10a      	bne.n	80050b0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f00a fd6d 	bl	800fb7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f002 0208 	and.w	r2, r2, #8
 80050ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f007 fcd7 	bl	800ca68 <USB_ReadInterrupts>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d122      	bne.n	800510a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050d0:	2301      	movs	r3, #1
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d4:	e014      	b.n	8005100 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb09 	bl	800570c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	3301      	adds	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005106:	429a      	cmp	r2, r3
 8005108:	d3e5      	bcc.n	80050d6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f007 fcaa 	bl	800ca68 <USB_ReadInterrupts>
 8005114:	4603      	mov	r3, r0
 8005116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800511a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511e:	d13b      	bne.n	8005198 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005120:	2301      	movs	r3, #1
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
 8005124:	e02b      	b.n	800517e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3340      	adds	r3, #64	@ 0x40
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d115      	bne.n	8005178 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800514c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800514e:	2b00      	cmp	r3, #0
 8005150:	da12      	bge.n	8005178 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	333f      	adds	r3, #63	@ 0x3f
 8005162:	2201      	movs	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800516e:	b2db      	uxtb	r3, r3
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 faca 	bl	800570c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	3301      	adds	r3, #1
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005184:	429a      	cmp	r2, r3
 8005186:	d3ce      	bcc.n	8005126 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005196:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f007 fc63 	bl	800ca68 <USB_ReadInterrupts>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051ac:	d155      	bne.n	800525a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051ae:	2301      	movs	r3, #1
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b2:	e045      	b.n	8005240 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c8:	4613      	mov	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d12e      	bne.n	800523a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da2b      	bge.n	800523a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80051ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d121      	bne.n	800523a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005236:	6053      	str	r3, [r2, #4]
            break;
 8005238:	e007      	b.n	800524a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	3301      	adds	r3, #1
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005246:	429a      	cmp	r2, r3
 8005248:	d3b4      	bcc.n	80051b4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f007 fc02 	bl	800ca68 <USB_ReadInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526e:	d10a      	bne.n	8005286 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f00a fd11 	bl	800fc98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f007 fbec 	bl	800ca68 <USB_ReadInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b04      	cmp	r3, #4
 8005298:	d115      	bne.n	80052c6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f00a fd01 	bl	800fcb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	e000      	b.n	80052c6 <HAL_PCD_IRQHandler+0x992>
      return;
 80052c4:	bf00      	nop
    }
  }
}
 80052c6:	3734      	adds	r7, #52	@ 0x34
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd90      	pop	{r4, r7, pc}

080052cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_PCD_SetAddress+0x1a>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e013      	b.n	800530e <HAL_PCD_SetAddress+0x42>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f007 fb4a 	bl	800c998 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	4608      	mov	r0, r1
 8005320:	4611      	mov	r1, r2
 8005322:	461a      	mov	r2, r3
 8005324:	4603      	mov	r3, r0
 8005326:	70fb      	strb	r3, [r7, #3]
 8005328:	460b      	mov	r3, r1
 800532a:	803b      	strh	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005338:	2b00      	cmp	r3, #0
 800533a:	da0f      	bge.n	800535c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 020f 	and.w	r2, r3, #15
 8005342:	4613      	mov	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	3338      	adds	r3, #56	@ 0x38
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	3304      	adds	r3, #4
 8005352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	705a      	strb	r2, [r3, #1]
 800535a:	e00f      	b.n	800537c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	f003 020f 	and.w	r2, r3, #15
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	3304      	adds	r3, #4
 8005374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	b2da      	uxtb	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005388:	883a      	ldrh	r2, [r7, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	78ba      	ldrb	r2, [r7, #2]
 8005392:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053a6:	78bb      	ldrb	r3, [r7, #2]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d102      	bne.n	80053b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_PCD_EP_Open+0xaa>
 80053bc:	2302      	movs	r3, #2
 80053be:	e00e      	b.n	80053de <HAL_PCD_EP_Open+0xc8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f006 fcca 	bl	800bd68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80053dc:	7afb      	ldrb	r3, [r7, #11]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da0f      	bge.n	800541a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	3338      	adds	r3, #56	@ 0x38
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	3304      	adds	r3, #4
 8005410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	705a      	strb	r2, [r3, #1]
 8005418:	e00f      	b.n	800543a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_PCD_EP_Close+0x6e>
 8005450:	2302      	movs	r3, #2
 8005452:	e00e      	b.n	8005472 <HAL_PCD_EP_Close+0x8c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	4618      	mov	r0, r3
 8005464:	f006 fd08 	bl	800be78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	460b      	mov	r3, r1
 8005488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	3304      	adds	r3, #4
 80054a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054bc:	7afb      	ldrb	r3, [r7, #11]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d102      	bne.n	80054d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	f006 fda4 	bl	800c030 <USB_EPStartXfer>

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8005514:	681b      	ldr	r3, [r3, #0]
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b086      	sub	sp, #24
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	460b      	mov	r3, r1
 8005530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	3338      	adds	r3, #56	@ 0x38
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	3304      	adds	r3, #4
 8005548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2200      	movs	r2, #0
 800555a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2201      	movs	r2, #1
 8005560:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	b2da      	uxtb	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d102      	bne.n	800557c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	f006 fd51 	bl	800c030 <USB_EPStartXfer>

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	f003 020f 	and.w	r2, r3, #15
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d901      	bls.n	80055b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e050      	b.n	8005658 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da0f      	bge.n	80055de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	f003 020f 	and.w	r2, r3, #15
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	3338      	adds	r3, #56	@ 0x38
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	3304      	adds	r3, #4
 80055d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	705a      	strb	r2, [r3, #1]
 80055dc:	e00d      	b.n	80055fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4413      	add	r3, r2
 80055f0:	3304      	adds	r3, #4
 80055f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_PCD_EP_SetStall+0x82>
 8005616:	2302      	movs	r3, #2
 8005618:	e01e      	b.n	8005658 <HAL_PCD_EP_SetStall+0xc0>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	4618      	mov	r0, r3
 800562a:	f007 f8e1 	bl	800c7f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	b2d9      	uxtb	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005648:	461a      	mov	r2, r3
 800564a:	f007 fad3 	bl	800cbf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	429a      	cmp	r2, r3
 8005678:	d901      	bls.n	800567e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e042      	b.n	8005704 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800567e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005682:	2b00      	cmp	r3, #0
 8005684:	da0f      	bge.n	80056a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	f003 020f 	and.w	r2, r3, #15
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	3338      	adds	r3, #56	@ 0x38
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	3304      	adds	r3, #4
 800569c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	705a      	strb	r2, [r3, #1]
 80056a4:	e00f      	b.n	80056c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	f003 020f 	and.w	r2, r3, #15
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	3304      	adds	r3, #4
 80056be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_PCD_EP_ClrStall+0x86>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e00e      	b.n	8005704 <HAL_PCD_EP_ClrStall+0xa4>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f007 f8e9 	bl	800c8cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800571c:	2b00      	cmp	r3, #0
 800571e:	da0c      	bge.n	800573a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	3338      	adds	r3, #56	@ 0x38
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	3304      	adds	r3, #4
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e00c      	b.n	8005754 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	f003 020f 	and.w	r2, r3, #15
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	3304      	adds	r3, #4
 8005752:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	4618      	mov	r0, r3
 800575c:	f006 ff08 	bl	800c570 <USB_EPStopXfer>
 8005760:	4603      	mov	r3, r0
 8005762:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005764:	7afb      	ldrb	r3, [r7, #11]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b08a      	sub	sp, #40	@ 0x28
 8005772:	af02      	add	r7, sp, #8
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	3338      	adds	r3, #56	@ 0x38
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d901      	bls.n	80057a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e06c      	b.n	8005880 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d902      	bls.n	80057c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3303      	adds	r3, #3
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057ca:	e02b      	b.n	8005824 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d902      	bls.n	80057e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3303      	adds	r3, #3
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68d9      	ldr	r1, [r3, #12]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005800:	b2db      	uxtb	r3, r3
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4603      	mov	r3, r0
 8005806:	6978      	ldr	r0, [r7, #20]
 8005808:	f006 ff5c 	bl	800c6c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	441a      	add	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	429a      	cmp	r2, r3
 8005838:	d809      	bhi.n	800584e <PCD_WriteEmptyTxFifo+0xe0>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005842:	429a      	cmp	r2, r3
 8005844:	d203      	bcs.n	800584e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1be      	bne.n	80057cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	429a      	cmp	r2, r3
 8005858:	d811      	bhi.n	800587e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	2201      	movs	r2, #1
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800586e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	43db      	mvns	r3, r3
 8005874:	6939      	ldr	r1, [r7, #16]
 8005876:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800587a:	4013      	ands	r3, r2
 800587c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	333c      	adds	r3, #60	@ 0x3c
 80058a0:	3304      	adds	r3, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d17b      	bne.n	80059b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d015      	beq.n	80058f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4a61      	ldr	r2, [pc, #388]	@ (8005a50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	f240 80b9 	bls.w	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80b3 	beq.w	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ea:	461a      	mov	r2, r3
 80058ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058f0:	6093      	str	r3, [r2, #8]
 80058f2:	e0a7      	b.n	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	2320      	movs	r3, #32
 800590e:	6093      	str	r3, [r2, #8]
 8005910:	e098      	b.n	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 8093 	bne.w	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4a4b      	ldr	r2, [pc, #300]	@ (8005a50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d90f      	bls.n	8005946 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593c:	461a      	mov	r2, r3
 800593e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005942:	6093      	str	r3, [r2, #8]
 8005944:	e07e      	b.n	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	4413      	add	r3, r2
 8005958:	3304      	adds	r3, #4
 800595a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	0159      	lsls	r1, r3, #5
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	440b      	add	r3, r1
 8005968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d114      	bne.n	80059a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005990:	461a      	mov	r2, r3
 8005992:	2101      	movs	r1, #1
 8005994:	f007 f92e 	bl	800cbf4 <USB_EP0_OutStart>
 8005998:	e006      	b.n	80059a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	441a      	add	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f00a f8ae 	bl	800fb10 <HAL_PCD_DataOutStageCallback>
 80059b4:	e046      	b.n	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4a26      	ldr	r2, [pc, #152]	@ (8005a54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d124      	bne.n	8005a08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d4:	461a      	mov	r2, r3
 80059d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059da:	6093      	str	r3, [r2, #8]
 80059dc:	e032      	b.n	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f4:	461a      	mov	r2, r3
 80059f6:	2320      	movs	r3, #32
 80059f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f00a f885 	bl	800fb10 <HAL_PCD_DataOutStageCallback>
 8005a06:	e01d      	b.n	8005a44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d114      	bne.n	8005a38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d108      	bne.n	8005a38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005a30:	461a      	mov	r2, r3
 8005a32:	2100      	movs	r1, #0
 8005a34:	f007 f8de 	bl	800cbf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f00a f866 	bl	800fb10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	4f54300a 	.word	0x4f54300a
 8005a54:	4f54310a 	.word	0x4f54310a

08005a58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	333c      	adds	r3, #60	@ 0x3c
 8005a70:	3304      	adds	r3, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a15      	ldr	r2, [pc, #84]	@ (8005ae0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d90e      	bls.n	8005aac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aaa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f00a f81d 	bl	800faec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d90c      	bls.n	8005ad4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d108      	bne.n	8005ad4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005acc:	461a      	mov	r2, r3
 8005ace:	2101      	movs	r1, #1
 8005ad0:	f007 f890 	bl	800cbf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	4f54300a 	.word	0x4f54300a

08005ae4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
 8005af0:	4613      	mov	r3, r2
 8005af2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d107      	bne.n	8005b12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b02:	883b      	ldrh	r3, [r7, #0]
 8005b04:	0419      	lsls	r1, r3, #16
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b10:	e028      	b.n	8005b64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
 8005b24:	e00d      	b.n	8005b42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	3340      	adds	r3, #64	@ 0x40
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
 8005b42:	7bfa      	ldrb	r2, [r7, #15]
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3ec      	bcc.n	8005b26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005b4c:	883b      	ldrh	r3, [r7, #0]
 8005b4e:	0418      	lsls	r0, r3, #16
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	4302      	orrs	r2, r0
 8005b5c:	3340      	adds	r3, #64	@ 0x40
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	887a      	ldrh	r2, [r7, #2]
 8005b84:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bc2:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	10000003 	.word	0x10000003

08005bdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005bfc:	4b19      	ldr	r3, [pc, #100]	@ (8005c64 <HAL_PWREx_ConfigSupply+0x70>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d00a      	beq.n	8005c1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c08:	4b16      	ldr	r3, [pc, #88]	@ (8005c64 <HAL_PWREx_ConfigSupply+0x70>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d001      	beq.n	8005c1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e01f      	b.n	8005c5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e01d      	b.n	8005c5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c1e:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <HAL_PWREx_ConfigSupply+0x70>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f023 0207 	bic.w	r2, r3, #7
 8005c26:	490f      	ldr	r1, [pc, #60]	@ (8005c64 <HAL_PWREx_ConfigSupply+0x70>)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c2e:	f7fb fe21 	bl	8001874 <HAL_GetTick>
 8005c32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c34:	e009      	b.n	8005c4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c36:	f7fb fe1d 	bl	8001874 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c44:	d901      	bls.n	8005c4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e007      	b.n	8005c5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c4a:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <HAL_PWREx_ConfigSupply+0x70>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c56:	d1ee      	bne.n	8005c36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	58024800 	.word	0x58024800

08005c68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a04      	ldr	r2, [pc, #16]	@ (8005c84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c76:	60d3      	str	r3, [r2, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	58024800 	.word	0x58024800

08005c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08c      	sub	sp, #48	@ 0x30
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f000 bc48 	b.w	800652c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8088 	beq.w	8005dba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005caa:	4b99      	ldr	r3, [pc, #612]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cb4:	4b96      	ldr	r3, [pc, #600]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d007      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x48>
 8005cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc2:	2b18      	cmp	r3, #24
 8005cc4:	d111      	bne.n	8005cea <HAL_RCC_OscConfig+0x62>
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d10c      	bne.n	8005cea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d06d      	beq.n	8005db8 <HAL_RCC_OscConfig+0x130>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d169      	bne.n	8005db8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f000 bc21 	b.w	800652c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf2:	d106      	bne.n	8005d02 <HAL_RCC_OscConfig+0x7a>
 8005cf4:	4b86      	ldr	r3, [pc, #536]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a85      	ldr	r2, [pc, #532]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e02e      	b.n	8005d60 <HAL_RCC_OscConfig+0xd8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCC_OscConfig+0x9c>
 8005d0a:	4b81      	ldr	r3, [pc, #516]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a80      	ldr	r2, [pc, #512]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	4b7e      	ldr	r3, [pc, #504]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	e01d      	b.n	8005d60 <HAL_RCC_OscConfig+0xd8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0xc0>
 8005d2e:	4b78      	ldr	r3, [pc, #480]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a77      	ldr	r2, [pc, #476]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	4b75      	ldr	r3, [pc, #468]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a74      	ldr	r2, [pc, #464]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00b      	b.n	8005d60 <HAL_RCC_OscConfig+0xd8>
 8005d48:	4b71      	ldr	r3, [pc, #452]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a70      	ldr	r2, [pc, #448]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	4b6e      	ldr	r3, [pc, #440]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a6d      	ldr	r2, [pc, #436]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d013      	beq.n	8005d90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fb fd84 	bl	8001874 <HAL_GetTick>
 8005d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fb fd80 	bl	8001874 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	@ 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e3d4      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d82:	4b63      	ldr	r3, [pc, #396]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCC_OscConfig+0xe8>
 8005d8e:	e014      	b.n	8005dba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fb fd70 	bl	8001874 <HAL_GetTick>
 8005d94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d98:	f7fb fd6c 	bl	8001874 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b64      	cmp	r3, #100	@ 0x64
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e3c0      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005daa:	4b59      	ldr	r3, [pc, #356]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x110>
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80ca 	beq.w	8005f5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc8:	4b51      	ldr	r3, [pc, #324]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_RCC_OscConfig+0x166>
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	2b18      	cmp	r3, #24
 8005de2:	d156      	bne.n	8005e92 <HAL_RCC_OscConfig+0x20a>
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d151      	bne.n	8005e92 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dee:	4b48      	ldr	r3, [pc, #288]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e392      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e06:	4b42      	ldr	r3, [pc, #264]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 0219 	bic.w	r2, r3, #25
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	493f      	ldr	r1, [pc, #252]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fb fd2c 	bl	8001874 <HAL_GetTick>
 8005e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e20:	f7fb fd28 	bl	8001874 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e37c      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e32:	4b37      	ldr	r3, [pc, #220]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3e:	f7fb fd49 	bl	80018d4 <HAL_GetREVID>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d817      	bhi.n	8005e7c <HAL_RCC_OscConfig+0x1f4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	d108      	bne.n	8005e66 <HAL_RCC_OscConfig+0x1de>
 8005e54:	4b2e      	ldr	r3, [pc, #184]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e62:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e64:	e07a      	b.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e66:	4b2a      	ldr	r3, [pc, #168]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	031b      	lsls	r3, r3, #12
 8005e74:	4926      	ldr	r1, [pc, #152]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e7a:	e06f      	b.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7c:	4b24      	ldr	r3, [pc, #144]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	061b      	lsls	r3, r3, #24
 8005e8a:	4921      	ldr	r1, [pc, #132]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e90:	e064      	b.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d047      	beq.n	8005f2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f023 0219 	bic.w	r2, r3, #25
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	491a      	ldr	r1, [pc, #104]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fb fce2 	bl	8001874 <HAL_GetTick>
 8005eb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb4:	f7fb fcde 	bl	8001874 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e332      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ec6:	4b12      	ldr	r3, [pc, #72]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed2:	f7fb fcff 	bl	80018d4 <HAL_GetREVID>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d819      	bhi.n	8005f14 <HAL_RCC_OscConfig+0x28c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	d108      	bne.n	8005efa <HAL_RCC_OscConfig+0x272>
 8005ee8:	4b09      	ldr	r3, [pc, #36]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ef0:	4a07      	ldr	r2, [pc, #28]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef6:	6053      	str	r3, [r2, #4]
 8005ef8:	e030      	b.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
 8005efa:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	031b      	lsls	r3, r3, #12
 8005f08:	4901      	ldr	r1, [pc, #4]	@ (8005f10 <HAL_RCC_OscConfig+0x288>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	604b      	str	r3, [r1, #4]
 8005f0e:	e025      	b.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
 8005f10:	58024400 	.word	0x58024400
 8005f14:	4b9a      	ldr	r3, [pc, #616]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	061b      	lsls	r3, r3, #24
 8005f22:	4997      	ldr	r1, [pc, #604]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	604b      	str	r3, [r1, #4]
 8005f28:	e018      	b.n	8005f5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2a:	4b95      	ldr	r3, [pc, #596]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a94      	ldr	r2, [pc, #592]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f36:	f7fb fc9d 	bl	8001874 <HAL_GetTick>
 8005f3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f3e:	f7fb fc99 	bl	8001874 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e2ed      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f50:	4b8b      	ldr	r3, [pc, #556]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f0      	bne.n	8005f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80a9 	beq.w	80060bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6a:	4b85      	ldr	r3, [pc, #532]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f74:	4b82      	ldr	r3, [pc, #520]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d007      	beq.n	8005f90 <HAL_RCC_OscConfig+0x308>
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b18      	cmp	r3, #24
 8005f84:	d13a      	bne.n	8005ffc <HAL_RCC_OscConfig+0x374>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d135      	bne.n	8005ffc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f90:	4b7b      	ldr	r3, [pc, #492]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x320>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	2b80      	cmp	r3, #128	@ 0x80
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e2c1      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fa8:	f7fb fc94 	bl	80018d4 <HAL_GetREVID>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d817      	bhi.n	8005fe6 <HAL_RCC_OscConfig+0x35e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d108      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x348>
 8005fbe:	4b70      	ldr	r3, [pc, #448]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fcc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fce:	e075      	b.n	80060bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	069b      	lsls	r3, r3, #26
 8005fde:	4968      	ldr	r1, [pc, #416]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe4:	e06a      	b.n	80060bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fe6:	4b66      	ldr	r3, [pc, #408]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	061b      	lsls	r3, r3, #24
 8005ff4:	4962      	ldr	r1, [pc, #392]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ffa:	e05f      	b.n	80060bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d042      	beq.n	800608a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006004:	4b5e      	ldr	r3, [pc, #376]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a5d      	ldr	r2, [pc, #372]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800600a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fb fc30 	bl	8001874 <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006018:	f7fb fc2c 	bl	8001874 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e280      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800602a:	4b55      	ldr	r3, [pc, #340]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f0      	beq.n	8006018 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006036:	f7fb fc4d 	bl	80018d4 <HAL_GetREVID>
 800603a:	4603      	mov	r3, r0
 800603c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006040:	4293      	cmp	r3, r2
 8006042:	d817      	bhi.n	8006074 <HAL_RCC_OscConfig+0x3ec>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	2b20      	cmp	r3, #32
 800604a:	d108      	bne.n	800605e <HAL_RCC_OscConfig+0x3d6>
 800604c:	4b4c      	ldr	r3, [pc, #304]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006054:	4a4a      	ldr	r2, [pc, #296]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800605a:	6053      	str	r3, [r2, #4]
 800605c:	e02e      	b.n	80060bc <HAL_RCC_OscConfig+0x434>
 800605e:	4b48      	ldr	r3, [pc, #288]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	069b      	lsls	r3, r3, #26
 800606c:	4944      	ldr	r1, [pc, #272]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800606e:	4313      	orrs	r3, r2
 8006070:	604b      	str	r3, [r1, #4]
 8006072:	e023      	b.n	80060bc <HAL_RCC_OscConfig+0x434>
 8006074:	4b42      	ldr	r3, [pc, #264]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	493f      	ldr	r1, [pc, #252]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006084:	4313      	orrs	r3, r2
 8006086:	60cb      	str	r3, [r1, #12]
 8006088:	e018      	b.n	80060bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800608a:	4b3d      	ldr	r3, [pc, #244]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a3c      	ldr	r2, [pc, #240]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006096:	f7fb fbed 	bl	8001874 <HAL_GetTick>
 800609a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800609e:	f7fb fbe9 	bl	8001874 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e23d      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060b0:	4b33      	ldr	r3, [pc, #204]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f0      	bne.n	800609e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d036      	beq.n	8006136 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d019      	beq.n	8006104 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 80060d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7fb fbca 	bl	8001874 <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e4:	f7fb fbc6 	bl	8001874 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e21a      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060f6:	4b22      	ldr	r3, [pc, #136]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 80060f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x45c>
 8006102:	e018      	b.n	8006136 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006104:	4b1e      	ldr	r3, [pc, #120]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006108:	4a1d      	ldr	r2, [pc, #116]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800610a:	f023 0301 	bic.w	r3, r3, #1
 800610e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006110:	f7fb fbb0 	bl	8001874 <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006118:	f7fb fbac 	bl	8001874 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e200      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800612a:	4b15      	ldr	r3, [pc, #84]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800612c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d039      	beq.n	80061b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01c      	beq.n	8006184 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a0c      	ldr	r2, [pc, #48]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006150:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006154:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006156:	f7fb fb8d 	bl	8001874 <HAL_GetTick>
 800615a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615e:	f7fb fb89 	bl	8001874 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e1dd      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006170:	4b03      	ldr	r3, [pc, #12]	@ (8006180 <HAL_RCC_OscConfig+0x4f8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0f0      	beq.n	800615e <HAL_RCC_OscConfig+0x4d6>
 800617c:	e01b      	b.n	80061b6 <HAL_RCC_OscConfig+0x52e>
 800617e:	bf00      	nop
 8006180:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006184:	4b9b      	ldr	r3, [pc, #620]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a9a      	ldr	r2, [pc, #616]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800618a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800618e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006190:	f7fb fb70 	bl	8001874 <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006198:	f7fb fb6c 	bl	8001874 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e1c0      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061aa:	4b92      	ldr	r3, [pc, #584]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8081 	beq.w	80062c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061c4:	4b8c      	ldr	r3, [pc, #560]	@ (80063f8 <HAL_RCC_OscConfig+0x770>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a8b      	ldr	r2, [pc, #556]	@ (80063f8 <HAL_RCC_OscConfig+0x770>)
 80061ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061d0:	f7fb fb50 	bl	8001874 <HAL_GetTick>
 80061d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d8:	f7fb fb4c 	bl	8001874 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b64      	cmp	r3, #100	@ 0x64
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e1a0      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ea:	4b83      	ldr	r3, [pc, #524]	@ (80063f8 <HAL_RCC_OscConfig+0x770>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d106      	bne.n	800620c <HAL_RCC_OscConfig+0x584>
 80061fe:	4b7d      	ldr	r3, [pc, #500]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006202:	4a7c      	ldr	r2, [pc, #496]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	6713      	str	r3, [r2, #112]	@ 0x70
 800620a:	e02d      	b.n	8006268 <HAL_RCC_OscConfig+0x5e0>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10c      	bne.n	800622e <HAL_RCC_OscConfig+0x5a6>
 8006214:	4b77      	ldr	r3, [pc, #476]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006218:	4a76      	ldr	r2, [pc, #472]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006220:	4b74      	ldr	r3, [pc, #464]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006224:	4a73      	ldr	r2, [pc, #460]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006226:	f023 0304 	bic.w	r3, r3, #4
 800622a:	6713      	str	r3, [r2, #112]	@ 0x70
 800622c:	e01c      	b.n	8006268 <HAL_RCC_OscConfig+0x5e0>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b05      	cmp	r3, #5
 8006234:	d10c      	bne.n	8006250 <HAL_RCC_OscConfig+0x5c8>
 8006236:	4b6f      	ldr	r3, [pc, #444]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623a:	4a6e      	ldr	r2, [pc, #440]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800623c:	f043 0304 	orr.w	r3, r3, #4
 8006240:	6713      	str	r3, [r2, #112]	@ 0x70
 8006242:	4b6c      	ldr	r3, [pc, #432]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006246:	4a6b      	ldr	r2, [pc, #428]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	6713      	str	r3, [r2, #112]	@ 0x70
 800624e:	e00b      	b.n	8006268 <HAL_RCC_OscConfig+0x5e0>
 8006250:	4b68      	ldr	r3, [pc, #416]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006254:	4a67      	ldr	r2, [pc, #412]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	6713      	str	r3, [r2, #112]	@ 0x70
 800625c:	4b65      	ldr	r3, [pc, #404]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006260:	4a64      	ldr	r2, [pc, #400]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006262:	f023 0304 	bic.w	r3, r3, #4
 8006266:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d015      	beq.n	800629c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fb fb00 	bl	8001874 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006276:	e00a      	b.n	800628e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006278:	f7fb fafc 	bl	8001874 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e14e      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628e:	4b59      	ldr	r3, [pc, #356]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0ee      	beq.n	8006278 <HAL_RCC_OscConfig+0x5f0>
 800629a:	e014      	b.n	80062c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fb faea 	bl	8001874 <HAL_GetTick>
 80062a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fb fae6 	bl	8001874 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e138      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062ba:	4b4e      	ldr	r3, [pc, #312]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ee      	bne.n	80062a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 812d 	beq.w	800652a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062d0:	4b48      	ldr	r3, [pc, #288]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d8:	2b18      	cmp	r3, #24
 80062da:	f000 80bd 	beq.w	8006458 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	f040 809e 	bne.w	8006424 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e8:	4b42      	ldr	r3, [pc, #264]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a41      	ldr	r2, [pc, #260]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80062ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fb fabe 	bl	8001874 <HAL_GetTick>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fc:	f7fb faba 	bl	8001874 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e10e      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800630e:	4b39      	ldr	r3, [pc, #228]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f0      	bne.n	80062fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800631a:	4b36      	ldr	r3, [pc, #216]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800631c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800631e:	4b37      	ldr	r3, [pc, #220]	@ (80063fc <HAL_RCC_OscConfig+0x774>)
 8006320:	4013      	ands	r3, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800632a:	0112      	lsls	r2, r2, #4
 800632c:	430a      	orrs	r2, r1
 800632e:	4931      	ldr	r1, [pc, #196]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	628b      	str	r3, [r1, #40]	@ 0x28
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	3b01      	subs	r3, #1
 800633a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006342:	3b01      	subs	r3, #1
 8006344:	025b      	lsls	r3, r3, #9
 8006346:	b29b      	uxth	r3, r3
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	3b01      	subs	r3, #1
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635c:	3b01      	subs	r3, #1
 800635e:	061b      	lsls	r3, r3, #24
 8006360:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006364:	4923      	ldr	r1, [pc, #140]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800636a:	4b22      	ldr	r3, [pc, #136]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	4a21      	ldr	r2, [pc, #132]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006376:	4b1f      	ldr	r3, [pc, #124]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800637a:	4b21      	ldr	r3, [pc, #132]	@ (8006400 <HAL_RCC_OscConfig+0x778>)
 800637c:	4013      	ands	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006382:	00d2      	lsls	r2, r2, #3
 8006384:	491b      	ldr	r1, [pc, #108]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800638a:	4b1a      	ldr	r3, [pc, #104]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	f023 020c 	bic.w	r2, r3, #12
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	4917      	ldr	r1, [pc, #92]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800639c:	4b15      	ldr	r3, [pc, #84]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	f023 0202 	bic.w	r2, r3, #2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a8:	4912      	ldr	r1, [pc, #72]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063ae:	4b11      	ldr	r3, [pc, #68]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	4a10      	ldr	r2, [pc, #64]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ba:	4b0e      	ldr	r3, [pc, #56]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	4a0d      	ldr	r2, [pc, #52]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063c6:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	4a0a      	ldr	r2, [pc, #40]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80063d2:	4b08      	ldr	r3, [pc, #32]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d6:	4a07      	ldr	r2, [pc, #28]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063de:	4b05      	ldr	r3, [pc, #20]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a04      	ldr	r2, [pc, #16]	@ (80063f4 <HAL_RCC_OscConfig+0x76c>)
 80063e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ea:	f7fb fa43 	bl	8001874 <HAL_GetTick>
 80063ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063f0:	e011      	b.n	8006416 <HAL_RCC_OscConfig+0x78e>
 80063f2:	bf00      	nop
 80063f4:	58024400 	.word	0x58024400
 80063f8:	58024800 	.word	0x58024800
 80063fc:	fffffc0c 	.word	0xfffffc0c
 8006400:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006404:	f7fb fa36 	bl	8001874 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e08a      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0x77c>
 8006422:	e082      	b.n	800652a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006424:	4b43      	ldr	r3, [pc, #268]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a42      	ldr	r2, [pc, #264]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 800642a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800642e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fb fa20 	bl	8001874 <HAL_GetTick>
 8006434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006438:	f7fb fa1c 	bl	8001874 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e070      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800644a:	4b3a      	ldr	r3, [pc, #232]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x7b0>
 8006456:	e068      	b.n	800652a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006458:	4b36      	ldr	r3, [pc, #216]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800645e:	4b35      	ldr	r3, [pc, #212]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006462:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	2b01      	cmp	r3, #1
 800646a:	d031      	beq.n	80064d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f003 0203 	and.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006476:	429a      	cmp	r2, r3
 8006478:	d12a      	bne.n	80064d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006486:	429a      	cmp	r2, r3
 8006488:	d122      	bne.n	80064d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006494:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d11a      	bne.n	80064d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	0a5b      	lsrs	r3, r3, #9
 800649e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d111      	bne.n	80064d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d108      	bne.n	80064d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	0e1b      	lsrs	r3, r3, #24
 80064c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e02b      	b.n	800652c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80064d4:	4b17      	ldr	r3, [pc, #92]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 80064d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d8:	08db      	lsrs	r3, r3, #3
 80064da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d01f      	beq.n	800652a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064ea:	4b12      	ldr	r3, [pc, #72]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ee:	4a11      	ldr	r2, [pc, #68]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064f6:	f7fb f9bd 	bl	8001874 <HAL_GetTick>
 80064fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80064fc:	bf00      	nop
 80064fe:	f7fb f9b9 	bl	8001874 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	4293      	cmp	r3, r2
 8006508:	d0f9      	beq.n	80064fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800650a:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 800650c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800650e:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <HAL_RCC_OscConfig+0x8b0>)
 8006510:	4013      	ands	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006516:	00d2      	lsls	r2, r2, #3
 8006518:	4906      	ldr	r1, [pc, #24]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 800651a:	4313      	orrs	r3, r2
 800651c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800651e:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	4a04      	ldr	r2, [pc, #16]	@ (8006534 <HAL_RCC_OscConfig+0x8ac>)
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3730      	adds	r7, #48	@ 0x30
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	58024400 	.word	0x58024400
 8006538:	ffff0007 	.word	0xffff0007

0800653c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e19c      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006550:	4b8a      	ldr	r3, [pc, #552]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d910      	bls.n	8006580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b87      	ldr	r3, [pc, #540]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f023 020f 	bic.w	r2, r3, #15
 8006566:	4985      	ldr	r1, [pc, #532]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b83      	ldr	r3, [pc, #524]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e184      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	4b7b      	ldr	r3, [pc, #492]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006598:	429a      	cmp	r2, r3
 800659a:	d908      	bls.n	80065ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800659c:	4b78      	ldr	r3, [pc, #480]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	4975      	ldr	r1, [pc, #468]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	4b70      	ldr	r3, [pc, #448]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d908      	bls.n	80065dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	496a      	ldr	r1, [pc, #424]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	4b64      	ldr	r3, [pc, #400]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d908      	bls.n	800660a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065f8:	4b61      	ldr	r3, [pc, #388]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	495e      	ldr	r1, [pc, #376]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006606:	4313      	orrs	r3, r2
 8006608:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d010      	beq.n	8006638 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	4b59      	ldr	r3, [pc, #356]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006622:	429a      	cmp	r2, r3
 8006624:	d908      	bls.n	8006638 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006626:	4b56      	ldr	r3, [pc, #344]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	4953      	ldr	r1, [pc, #332]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006634:	4313      	orrs	r3, r2
 8006636:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	4b4d      	ldr	r3, [pc, #308]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	429a      	cmp	r2, r3
 8006652:	d908      	bls.n	8006666 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006654:	4b4a      	ldr	r3, [pc, #296]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f023 020f 	bic.w	r2, r3, #15
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4947      	ldr	r1, [pc, #284]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006662:	4313      	orrs	r3, r2
 8006664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d055      	beq.n	800671e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006672:	4b43      	ldr	r3, [pc, #268]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	4940      	ldr	r1, [pc, #256]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006680:	4313      	orrs	r3, r2
 8006682:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d107      	bne.n	800669c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800668c:	4b3c      	ldr	r3, [pc, #240]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d121      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0f6      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066a4:	4b36      	ldr	r3, [pc, #216]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d115      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0ea      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066bc:	4b30      	ldr	r3, [pc, #192]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0de      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0d6      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066dc:	4b28      	ldr	r3, [pc, #160]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f023 0207 	bic.w	r2, r3, #7
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4925      	ldr	r1, [pc, #148]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ee:	f7fb f8c1 	bl	8001874 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f4:	e00a      	b.n	800670c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066f6:	f7fb f8bd 	bl	8001874 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006704:	4293      	cmp	r3, r2
 8006706:	d901      	bls.n	800670c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e0be      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670c:	4b1c      	ldr	r3, [pc, #112]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	429a      	cmp	r2, r3
 800671c:	d1eb      	bne.n	80066f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d010      	beq.n	800674c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	4b14      	ldr	r3, [pc, #80]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	429a      	cmp	r2, r3
 8006738:	d208      	bcs.n	800674c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673a:	4b11      	ldr	r3, [pc, #68]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f023 020f 	bic.w	r2, r3, #15
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	490e      	ldr	r1, [pc, #56]	@ (8006780 <HAL_RCC_ClockConfig+0x244>)
 8006748:	4313      	orrs	r3, r2
 800674a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800674c:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d214      	bcs.n	8006784 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675a:	4b08      	ldr	r3, [pc, #32]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 020f 	bic.w	r2, r3, #15
 8006762:	4906      	ldr	r1, [pc, #24]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	4313      	orrs	r3, r2
 8006768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800676a:	4b04      	ldr	r3, [pc, #16]	@ (800677c <HAL_RCC_ClockConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d005      	beq.n	8006784 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e086      	b.n	800688a <HAL_RCC_ClockConfig+0x34e>
 800677c:	52002000 	.word	0x52002000
 8006780:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d010      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	4b3f      	ldr	r3, [pc, #252]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800679c:	429a      	cmp	r2, r3
 800679e:	d208      	bcs.n	80067b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	4939      	ldr	r1, [pc, #228]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d010      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	4b34      	ldr	r3, [pc, #208]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d208      	bcs.n	80067e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067ce:	4b31      	ldr	r3, [pc, #196]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	492e      	ldr	r1, [pc, #184]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699a      	ldr	r2, [r3, #24]
 80067f0:	4b28      	ldr	r3, [pc, #160]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d208      	bcs.n	800680e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067fc:	4b25      	ldr	r3, [pc, #148]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	4922      	ldr	r1, [pc, #136]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 800680a:	4313      	orrs	r3, r2
 800680c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d010      	beq.n	800683c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006826:	429a      	cmp	r2, r3
 8006828:	d208      	bcs.n	800683c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800682a:	4b1a      	ldr	r3, [pc, #104]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	4917      	ldr	r1, [pc, #92]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006838:	4313      	orrs	r3, r2
 800683a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800683c:	f000 f834 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006840:	4602      	mov	r2, r0
 8006842:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	4912      	ldr	r1, [pc, #72]	@ (8006898 <HAL_RCC_ClockConfig+0x35c>)
 800684e:	5ccb      	ldrb	r3, [r1, r3]
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800685a:	4b0e      	ldr	r3, [pc, #56]	@ (8006894 <HAL_RCC_ClockConfig+0x358>)
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	4a0d      	ldr	r2, [pc, #52]	@ (8006898 <HAL_RCC_ClockConfig+0x35c>)
 8006864:	5cd3      	ldrb	r3, [r2, r3]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	4a0a      	ldr	r2, [pc, #40]	@ (800689c <HAL_RCC_ClockConfig+0x360>)
 8006872:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006874:	4a0a      	ldr	r2, [pc, #40]	@ (80068a0 <HAL_RCC_ClockConfig+0x364>)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800687a:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <HAL_RCC_ClockConfig+0x368>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fa fc68 	bl	8001154 <HAL_InitTick>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	58024400 	.word	0x58024400
 8006898:	08010db0 	.word	0x08010db0
 800689c:	24000008 	.word	0x24000008
 80068a0:	24000004 	.word	0x24000004
 80068a4:	2400000c 	.word	0x2400000c

080068a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	@ 0x24
 80068ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ae:	4bb3      	ldr	r3, [pc, #716]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068b6:	2b18      	cmp	r3, #24
 80068b8:	f200 8155 	bhi.w	8006b66 <HAL_RCC_GetSysClockFreq+0x2be>
 80068bc:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	08006929 	.word	0x08006929
 80068c8:	08006b67 	.word	0x08006b67
 80068cc:	08006b67 	.word	0x08006b67
 80068d0:	08006b67 	.word	0x08006b67
 80068d4:	08006b67 	.word	0x08006b67
 80068d8:	08006b67 	.word	0x08006b67
 80068dc:	08006b67 	.word	0x08006b67
 80068e0:	08006b67 	.word	0x08006b67
 80068e4:	0800694f 	.word	0x0800694f
 80068e8:	08006b67 	.word	0x08006b67
 80068ec:	08006b67 	.word	0x08006b67
 80068f0:	08006b67 	.word	0x08006b67
 80068f4:	08006b67 	.word	0x08006b67
 80068f8:	08006b67 	.word	0x08006b67
 80068fc:	08006b67 	.word	0x08006b67
 8006900:	08006b67 	.word	0x08006b67
 8006904:	08006955 	.word	0x08006955
 8006908:	08006b67 	.word	0x08006b67
 800690c:	08006b67 	.word	0x08006b67
 8006910:	08006b67 	.word	0x08006b67
 8006914:	08006b67 	.word	0x08006b67
 8006918:	08006b67 	.word	0x08006b67
 800691c:	08006b67 	.word	0x08006b67
 8006920:	08006b67 	.word	0x08006b67
 8006924:	0800695b 	.word	0x0800695b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006928:	4b94      	ldr	r3, [pc, #592]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006934:	4b91      	ldr	r3, [pc, #580]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	08db      	lsrs	r3, r3, #3
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	4a90      	ldr	r2, [pc, #576]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006946:	e111      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006948:	4b8d      	ldr	r3, [pc, #564]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800694a:	61bb      	str	r3, [r7, #24]
      break;
 800694c:	e10e      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800694e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006950:	61bb      	str	r3, [r7, #24]
      break;
 8006952:	e10b      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006954:	4b8c      	ldr	r3, [pc, #560]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006956:	61bb      	str	r3, [r7, #24]
      break;
 8006958:	e108      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800695a:	4b88      	ldr	r3, [pc, #544]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006964:	4b85      	ldr	r3, [pc, #532]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800696e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006970:	4b82      	ldr	r3, [pc, #520]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800697a:	4b80      	ldr	r3, [pc, #512]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800697c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80e1 	beq.w	8006b60 <HAL_RCC_GetSysClockFreq+0x2b8>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	f000 8083 	beq.w	8006aac <HAL_RCC_GetSysClockFreq+0x204>
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	f200 80a1 	bhi.w	8006af0 <HAL_RCC_GetSysClockFreq+0x248>
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_RCC_GetSysClockFreq+0x114>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d056      	beq.n	8006a68 <HAL_RCC_GetSysClockFreq+0x1c0>
 80069ba:	e099      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069bc:	4b6f      	ldr	r3, [pc, #444]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d02d      	beq.n	8006a24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069c8:	4b6c      	ldr	r3, [pc, #432]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	08db      	lsrs	r3, r3, #3
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	4a6b      	ldr	r2, [pc, #428]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
 80069d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f2:	4b62      	ldr	r3, [pc, #392]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006a22:	e087      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006b90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a36:	4b51      	ldr	r3, [pc, #324]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a66:	e065      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006b94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7a:	4b40      	ldr	r3, [pc, #256]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aaa:	e043      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006b98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b2f      	ldr	r3, [pc, #188]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aee:	e021      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b1e      	ldr	r3, [pc, #120]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b16:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b34:	4b11      	ldr	r3, [pc, #68]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b38:	0a5b      	lsrs	r3, r3, #9
 8006b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b3e:	3301      	adds	r3, #1
 8006b40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b58:	ee17 3a90 	vmov	r3, s15
 8006b5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b5e:	e005      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61bb      	str	r3, [r7, #24]
      break;
 8006b64:	e002      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b66:	4b07      	ldr	r3, [pc, #28]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b68:	61bb      	str	r3, [r7, #24]
      break;
 8006b6a:	bf00      	nop
  }

  return sysclockfreq;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3724      	adds	r7, #36	@ 0x24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	03d09000 	.word	0x03d09000
 8006b84:	003d0900 	.word	0x003d0900
 8006b88:	017d7840 	.word	0x017d7840
 8006b8c:	46000000 	.word	0x46000000
 8006b90:	4c742400 	.word	0x4c742400
 8006b94:	4a742400 	.word	0x4a742400
 8006b98:	4bbebc20 	.word	0x4bbebc20

08006b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ba2:	f7ff fe81 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	4b10      	ldr	r3, [pc, #64]	@ (8006bec <HAL_RCC_GetHCLKFreq+0x50>)
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	0a1b      	lsrs	r3, r3, #8
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	490f      	ldr	r1, [pc, #60]	@ (8006bf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bb4:	5ccb      	ldrb	r3, [r1, r3]
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bec <HAL_RCC_GetHCLKFreq+0x50>)
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	4a09      	ldr	r2, [pc, #36]	@ (8006bf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bca:	5cd3      	ldrb	r3, [r2, r3]
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	4a07      	ldr	r2, [pc, #28]	@ (8006bf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bda:	4a07      	ldr	r2, [pc, #28]	@ (8006bf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006be0:	4b04      	ldr	r3, [pc, #16]	@ (8006bf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006be2:	681b      	ldr	r3, [r3, #0]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	08010db0 	.word	0x08010db0
 8006bf4:	24000008 	.word	0x24000008
 8006bf8:	24000004 	.word	0x24000004

08006bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c00:	f7ff ffcc 	bl	8006b9c <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b06      	ldr	r3, [pc, #24]	@ (8006c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4904      	ldr	r1, [pc, #16]	@ (8006c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	58024400 	.word	0x58024400
 8006c24:	08010db0 	.word	0x08010db0

08006c28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	223f      	movs	r2, #63	@ 0x3f
 8006c36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x7c>)
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0207 	and.w	r2, r3, #7
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006c44:	4b17      	ldr	r3, [pc, #92]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x7c>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006c50:	4b14      	ldr	r3, [pc, #80]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x7c>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f003 020f 	and.w	r2, r3, #15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006c5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x7c>)
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006c68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x7c>)
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x7c>)
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006c80:	4b08      	ldr	r3, [pc, #32]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x7c>)
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x80>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 020f 	and.w	r2, r3, #15
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	601a      	str	r2, [r3, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	52002000 	.word	0x52002000

08006cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb0:	b0ca      	sub	sp, #296	@ 0x128
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8006cd6:	d049      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ce2:	d02f      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ce8:	d828      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cee:	d01a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cf4:	d822      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cfe:	d007      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d00:	e01c      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d02:	4bb8      	ldr	r3, [pc, #736]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d06:	4ab7      	ldr	r2, [pc, #732]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d0e:	e01a      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	3308      	adds	r3, #8
 8006d16:	2102      	movs	r1, #2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 fb61 	bl	80093e0 <RCCEx_PLL2_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d24:	e00f      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	3328      	adds	r3, #40	@ 0x28
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f002 fc08 	bl	8009544 <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d3a:	e004      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d4e:	4ba5      	ldr	r3, [pc, #660]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d5c:	4aa1      	ldr	r2, [pc, #644]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d62:	e003      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006d78:	f04f 0900 	mov.w	r9, #0
 8006d7c:	ea58 0309 	orrs.w	r3, r8, r9
 8006d80:	d047      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d82a      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006da9 	.word	0x08006da9
 8006d98:	08006db7 	.word	0x08006db7
 8006d9c:	08006dcd 	.word	0x08006dcd
 8006da0:	08006deb 	.word	0x08006deb
 8006da4:	08006deb 	.word	0x08006deb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da8:	4b8e      	ldr	r3, [pc, #568]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	4a8d      	ldr	r2, [pc, #564]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006db4:	e01a      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dba:	3308      	adds	r3, #8
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 fb0e 	bl	80093e0 <RCCEx_PLL2_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dca:	e00f      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	3328      	adds	r3, #40	@ 0x28
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f002 fbb5 	bl	8009544 <RCCEx_PLL3_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006de0:	e004      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006df4:	4b7b      	ldr	r3, [pc, #492]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df8:	f023 0107 	bic.w	r1, r3, #7
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e02:	4a78      	ldr	r2, [pc, #480]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e08:	e003      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e1e:	f04f 0b00 	mov.w	fp, #0
 8006e22:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e26:	d04c      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e32:	d030      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e38:	d829      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e3c:	d02d      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e40:	d825      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e42:	2b80      	cmp	r3, #128	@ 0x80
 8006e44:	d018      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e46:	2b80      	cmp	r3, #128	@ 0x80
 8006e48:	d821      	bhi.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e4e:	2b40      	cmp	r3, #64	@ 0x40
 8006e50:	d007      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e52:	e01c      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e54:	4b63      	ldr	r3, [pc, #396]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	4a62      	ldr	r2, [pc, #392]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e60:	e01c      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	3308      	adds	r3, #8
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f002 fab8 	bl	80093e0 <RCCEx_PLL2_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e76:	e011      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	3328      	adds	r3, #40	@ 0x28
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f002 fb5f 	bl	8009544 <RCCEx_PLL3_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e8c:	e006      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e94:	e002      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e96:	bf00      	nop
 8006e98:	e000      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb2:	4a4c      	ldr	r2, [pc, #304]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eb8:	e003      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006ece:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006ed8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006edc:	460b      	mov	r3, r1
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	d053      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006eea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006eee:	d035      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ef4:	d82e      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006efa:	d031      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006efc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f00:	d828      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f06:	d01a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f0c:	d822      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f16:	d007      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f18:	e01c      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1a:	4b32      	ldr	r3, [pc, #200]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a31      	ldr	r2, [pc, #196]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f26:	e01c      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 fa55 	bl	80093e0 <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f3c:	e011      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f42:	3328      	adds	r3, #40	@ 0x28
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 fafc 	bl	8009544 <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f52:	e006      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f5a:	e002      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f5c:	bf00      	nop
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10b      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f80:	e003      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006fa0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	d056      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fb6:	d038      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fbc:	d831      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc2:	d034      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006fc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc8:	d82b      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fce:	d01d      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd4:	d825      	bhi.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d006      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006fda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fde:	d00a      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006fe0:	e01f      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fe2:	bf00      	nop
 8006fe4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe8:	4ba2      	ldr	r3, [pc, #648]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	4aa1      	ldr	r2, [pc, #644]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ff4:	e01c      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f002 f9ee 	bl	80093e0 <RCCEx_PLL2_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800700a:	e011      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800700c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007010:	3328      	adds	r3, #40	@ 0x28
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f002 fa95 	bl	8009544 <RCCEx_PLL3_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007020:	e006      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007028:	e002      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800702a:	bf00      	nop
 800702c:	e000      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800702e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10b      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007038:	4b8e      	ldr	r3, [pc, #568]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800703a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007044:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007048:	4a8a      	ldr	r2, [pc, #552]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800704a:	430b      	orrs	r3, r1
 800704c:	6593      	str	r3, [r2, #88]	@ 0x58
 800704e:	e003      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800706e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d03a      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707e:	2b30      	cmp	r3, #48	@ 0x30
 8007080:	d01f      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007082:	2b30      	cmp	r3, #48	@ 0x30
 8007084:	d819      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007086:	2b20      	cmp	r3, #32
 8007088:	d00c      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800708a:	2b20      	cmp	r3, #32
 800708c:	d815      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d019      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007092:	2b10      	cmp	r3, #16
 8007094:	d111      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007096:	4b77      	ldr	r3, [pc, #476]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a76      	ldr	r2, [pc, #472]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800709c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070a2:	e011      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a8:	3308      	adds	r3, #8
 80070aa:	2102      	movs	r1, #2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f002 f997 	bl	80093e0 <RCCEx_PLL2_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c0:	e002      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070d0:	4b68      	ldr	r3, [pc, #416]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070de:	4a65      	ldr	r2, [pc, #404]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e0:	430b      	orrs	r3, r1
 80070e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070e4:	e003      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80070fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007104:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007108:	460b      	mov	r3, r1
 800710a:	4313      	orrs	r3, r2
 800710c:	d051      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007118:	d035      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800711a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711e:	d82e      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007124:	d031      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800712a:	d828      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800712c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007130:	d01a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007136:	d822      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007140:	d007      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007142:	e01c      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007144:	4b4b      	ldr	r3, [pc, #300]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007148:	4a4a      	ldr	r2, [pc, #296]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800714a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800714e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007150:	e01c      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007156:	3308      	adds	r3, #8
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f002 f940 	bl	80093e0 <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007166:	e011      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	3328      	adds	r3, #40	@ 0x28
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f002 f9e7 	bl	8009544 <RCCEx_PLL3_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800717c:	e006      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007184:	e002      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800718a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800718c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007194:	4b37      	ldr	r3, [pc, #220]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007198:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800719c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a2:	4a34      	ldr	r2, [pc, #208]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80071a8:	e003      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80071be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071c2:	2300      	movs	r3, #0
 80071c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80071cc:	460b      	mov	r3, r1
 80071ce:	4313      	orrs	r3, r2
 80071d0:	d056      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071dc:	d033      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80071de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e2:	d82c      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071e8:	d02f      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80071ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071ee:	d826      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071f4:	d02b      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80071f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071fa:	d820      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007200:	d012      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007206:	d81a      	bhi.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d022      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007210:	d115      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007216:	3308      	adds	r3, #8
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f002 f8e0 	bl	80093e0 <RCCEx_PLL2_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007226:	e015      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722c:	3328      	adds	r3, #40	@ 0x28
 800722e:	2101      	movs	r1, #1
 8007230:	4618      	mov	r0, r3
 8007232:	f002 f987 	bl	8009544 <RCCEx_PLL3_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800723c:	e00a      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007244:	e006      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007246:	bf00      	nop
 8007248:	e004      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10d      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800725c:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800725e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007260:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800726a:	4a02      	ldr	r2, [pc, #8]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800728c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007296:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d055      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072ac:	d033      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072b2:	d82c      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b8:	d02f      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072be:	d826      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072c4:	d02b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80072c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072ca:	d820      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d0:	d012      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80072d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d6:	d81a      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d022      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80072dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e0:	d115      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e6:	3308      	adds	r3, #8
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 f878 	bl	80093e0 <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072f6:	e015      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	3328      	adds	r3, #40	@ 0x28
 80072fe:	2101      	movs	r1, #1
 8007300:	4618      	mov	r0, r3
 8007302:	f002 f91f 	bl	8009544 <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800730c:	e00a      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007316:	bf00      	nop
 8007318:	e004      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800731a:	bf00      	nop
 800731c:	e002      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800731e:	bf00      	nop
 8007320:	e000      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800732c:	4ba3      	ldr	r3, [pc, #652]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007330:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800733c:	4a9f      	ldr	r2, [pc, #636]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800733e:	430b      	orrs	r3, r1
 8007340:	6593      	str	r3, [r2, #88]	@ 0x58
 8007342:	e003      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	d037      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007376:	d00e      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800737c:	d816      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d018      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007386:	d111      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007388:	4b8c      	ldr	r3, [pc, #560]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	4a8b      	ldr	r2, [pc, #556]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007394:	e00f      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	3308      	adds	r3, #8
 800739c:	2101      	movs	r1, #1
 800739e:	4618      	mov	r0, r3
 80073a0:	f002 f81e 	bl	80093e0 <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073be:	4b7f      	ldr	r3, [pc, #508]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	4a7b      	ldr	r2, [pc, #492]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073ce:	430b      	orrs	r3, r1
 80073d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80073d2:	e003      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80073e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073ec:	2300      	movs	r3, #0
 80073ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80073f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d039      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007402:	2b03      	cmp	r3, #3
 8007404:	d81c      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007406:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007449 	.word	0x08007449
 8007410:	0800741d 	.word	0x0800741d
 8007414:	0800742b 	.word	0x0800742b
 8007418:	08007449 	.word	0x08007449
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741c:	4b67      	ldr	r3, [pc, #412]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	4a66      	ldr	r2, [pc, #408]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007428:	e00f      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742e:	3308      	adds	r3, #8
 8007430:	2102      	movs	r1, #2
 8007432:	4618      	mov	r0, r3
 8007434:	f001 ffd4 	bl	80093e0 <RCCEx_PLL2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800743e:	e004      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007446:	e000      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007452:	4b5a      	ldr	r3, [pc, #360]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007456:	f023 0103 	bic.w	r1, r3, #3
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007460:	4a56      	ldr	r2, [pc, #344]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007462:	430b      	orrs	r3, r1
 8007464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007466:	e003      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800746c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800747c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007480:	2300      	movs	r3, #0
 8007482:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007486:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800748a:	460b      	mov	r3, r1
 800748c:	4313      	orrs	r3, r2
 800748e:	f000 809f 	beq.w	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007492:	4b4b      	ldr	r3, [pc, #300]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a4a      	ldr	r2, [pc, #296]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800749c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800749e:	f7fa f9e9 	bl	8001874 <HAL_GetTick>
 80074a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074a6:	e00b      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a8:	f7fa f9e4 	bl	8001874 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b64      	cmp	r3, #100	@ 0x64
 80074b6:	d903      	bls.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074be:	e005      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c0:	4b3f      	ldr	r3, [pc, #252]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0ed      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80074cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d179      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074d4:	4b39      	ldr	r3, [pc, #228]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074e0:	4053      	eors	r3, r2
 80074e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d015      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074ea:	4b34      	ldr	r3, [pc, #208]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074f6:	4b31      	ldr	r3, [pc, #196]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fa:	4a30      	ldr	r2, [pc, #192]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007500:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007502:	4b2e      	ldr	r3, [pc, #184]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007506:	4a2d      	ldr	r2, [pc, #180]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800750e:	4a2b      	ldr	r2, [pc, #172]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007514:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800751e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007522:	d118      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007524:	f7fa f9a6 	bl	8001874 <HAL_GetTick>
 8007528:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800752c:	e00d      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752e:	f7fa f9a1 	bl	8001874 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007538:	1ad2      	subs	r2, r2, r3
 800753a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800753e:	429a      	cmp	r2, r3
 8007540:	d903      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007548:	e005      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800754a:	4b1c      	ldr	r3, [pc, #112]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0eb      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755a:	2b00      	cmp	r3, #0
 800755c:	d129      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800756e:	d10e      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007570:	4b12      	ldr	r3, [pc, #72]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007580:	091a      	lsrs	r2, r3, #4
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007584:	4013      	ands	r3, r2
 8007586:	4a0d      	ldr	r2, [pc, #52]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007588:	430b      	orrs	r3, r1
 800758a:	6113      	str	r3, [r2, #16]
 800758c:	e005      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800758e:	4b0b      	ldr	r3, [pc, #44]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	4a0a      	ldr	r2, [pc, #40]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007598:	6113      	str	r3, [r2, #16]
 800759a:	4b08      	ldr	r3, [pc, #32]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075aa:	4a04      	ldr	r2, [pc, #16]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b0:	e00e      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80075ba:	e009      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80075bc:	58024400 	.word	0x58024400
 80075c0:	58024800 	.word	0x58024800
 80075c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f002 0301 	and.w	r3, r2, #1
 80075dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075e0:	2300      	movs	r3, #0
 80075e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f000 8089 	beq.w	8007704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075f8:	2b28      	cmp	r3, #40	@ 0x28
 80075fa:	d86b      	bhi.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80075fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	080076dd 	.word	0x080076dd
 8007608:	080076d5 	.word	0x080076d5
 800760c:	080076d5 	.word	0x080076d5
 8007610:	080076d5 	.word	0x080076d5
 8007614:	080076d5 	.word	0x080076d5
 8007618:	080076d5 	.word	0x080076d5
 800761c:	080076d5 	.word	0x080076d5
 8007620:	080076d5 	.word	0x080076d5
 8007624:	080076a9 	.word	0x080076a9
 8007628:	080076d5 	.word	0x080076d5
 800762c:	080076d5 	.word	0x080076d5
 8007630:	080076d5 	.word	0x080076d5
 8007634:	080076d5 	.word	0x080076d5
 8007638:	080076d5 	.word	0x080076d5
 800763c:	080076d5 	.word	0x080076d5
 8007640:	080076d5 	.word	0x080076d5
 8007644:	080076bf 	.word	0x080076bf
 8007648:	080076d5 	.word	0x080076d5
 800764c:	080076d5 	.word	0x080076d5
 8007650:	080076d5 	.word	0x080076d5
 8007654:	080076d5 	.word	0x080076d5
 8007658:	080076d5 	.word	0x080076d5
 800765c:	080076d5 	.word	0x080076d5
 8007660:	080076d5 	.word	0x080076d5
 8007664:	080076dd 	.word	0x080076dd
 8007668:	080076d5 	.word	0x080076d5
 800766c:	080076d5 	.word	0x080076d5
 8007670:	080076d5 	.word	0x080076d5
 8007674:	080076d5 	.word	0x080076d5
 8007678:	080076d5 	.word	0x080076d5
 800767c:	080076d5 	.word	0x080076d5
 8007680:	080076d5 	.word	0x080076d5
 8007684:	080076dd 	.word	0x080076dd
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076d5 	.word	0x080076d5
 8007690:	080076d5 	.word	0x080076d5
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076d5 	.word	0x080076d5
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	080076dd 	.word	0x080076dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ac:	3308      	adds	r3, #8
 80076ae:	2101      	movs	r1, #1
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 fe95 	bl	80093e0 <RCCEx_PLL2_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076bc:	e00f      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c2:	3328      	adds	r3, #40	@ 0x28
 80076c4:	2101      	movs	r1, #1
 80076c6:	4618      	mov	r0, r3
 80076c8:	f001 ff3c 	bl	8009544 <RCCEx_PLL3_Config>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076d2:	e004      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076da:	e000      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80076dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076e6:	4bbf      	ldr	r3, [pc, #764]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076f4:	4abb      	ldr	r2, [pc, #748]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80076fa:	e003      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	f002 0302 	and.w	r3, r2, #2
 8007710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007714:	2300      	movs	r3, #0
 8007716:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800771a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800771e:	460b      	mov	r3, r1
 8007720:	4313      	orrs	r3, r2
 8007722:	d041      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800772a:	2b05      	cmp	r3, #5
 800772c:	d824      	bhi.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007781 	.word	0x08007781
 8007738:	0800774d 	.word	0x0800774d
 800773c:	08007763 	.word	0x08007763
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	3308      	adds	r3, #8
 8007752:	2101      	movs	r1, #1
 8007754:	4618      	mov	r0, r3
 8007756:	f001 fe43 	bl	80093e0 <RCCEx_PLL2_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007760:	e00f      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	3328      	adds	r3, #40	@ 0x28
 8007768:	2101      	movs	r1, #1
 800776a:	4618      	mov	r0, r3
 800776c:	f001 feea 	bl	8009544 <RCCEx_PLL3_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007776:	e004      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800778a:	4b96      	ldr	r3, [pc, #600]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778e:	f023 0107 	bic.w	r1, r3, #7
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007798:	4a92      	ldr	r2, [pc, #584]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800779a:	430b      	orrs	r3, r1
 800779c:	6553      	str	r3, [r2, #84]	@ 0x54
 800779e:	e003      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f002 0304 	and.w	r3, r2, #4
 80077b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077b8:	2300      	movs	r3, #0
 80077ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4313      	orrs	r3, r2
 80077c6:	d044      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	d825      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80077d4:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	08007829 	.word	0x08007829
 80077e0:	080077f5 	.word	0x080077f5
 80077e4:	0800780b 	.word	0x0800780b
 80077e8:	08007829 	.word	0x08007829
 80077ec:	08007829 	.word	0x08007829
 80077f0:	08007829 	.word	0x08007829
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f8:	3308      	adds	r3, #8
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fdef 	bl	80093e0 <RCCEx_PLL2_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007808:	e00f      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780e:	3328      	adds	r3, #40	@ 0x28
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f001 fe96 	bl	8009544 <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800781e:	e004      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007826:	e000      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007832:	4b6c      	ldr	r3, [pc, #432]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007836:	f023 0107 	bic.w	r1, r3, #7
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007842:	4a68      	ldr	r2, [pc, #416]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007844:	430b      	orrs	r3, r1
 8007846:	6593      	str	r3, [r2, #88]	@ 0x58
 8007848:	e003      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f002 0320 	and.w	r3, r2, #32
 800785e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007862:	2300      	movs	r3, #0
 8007864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800786c:	460b      	mov	r3, r1
 800786e:	4313      	orrs	r3, r2
 8007870:	d055      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800787e:	d033      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007884:	d82c      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788a:	d02f      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007890:	d826      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007896:	d02b      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800789c:	d820      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800789e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a2:	d012      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a8:	d81a      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d022      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078b2:	d115      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b8:	3308      	adds	r3, #8
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 fd8f 	bl	80093e0 <RCCEx_PLL2_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078c8:	e015      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	3328      	adds	r3, #40	@ 0x28
 80078d0:	2102      	movs	r1, #2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 fe36 	bl	8009544 <RCCEx_PLL3_Config>
 80078d8:	4603      	mov	r3, r0
 80078da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078de:	e00a      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078e6:	e006      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078e8:	bf00      	nop
 80078ea:	e004      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078ec:	bf00      	nop
 80078ee:	e002      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fe:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790e:	4a35      	ldr	r2, [pc, #212]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007910:	430b      	orrs	r3, r1
 8007912:	6553      	str	r3, [r2, #84]	@ 0x54
 8007914:	e003      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800792a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800792e:	2300      	movs	r3, #0
 8007930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007934:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007938:	460b      	mov	r3, r1
 800793a:	4313      	orrs	r3, r2
 800793c:	d058      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007946:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800794a:	d033      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800794c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007950:	d82c      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007956:	d02f      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800795c:	d826      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800795e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007962:	d02b      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007968:	d820      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800796a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796e:	d012      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007974:	d81a      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d022      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800797a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800797e:	d115      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007984:	3308      	adds	r3, #8
 8007986:	2100      	movs	r1, #0
 8007988:	4618      	mov	r0, r3
 800798a:	f001 fd29 	bl	80093e0 <RCCEx_PLL2_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007994:	e015      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	3328      	adds	r3, #40	@ 0x28
 800799c:	2102      	movs	r1, #2
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fdd0 	bl	8009544 <RCCEx_PLL3_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079aa:	e00a      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079b2:	e006      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079b4:	bf00      	nop
 80079b6:	e004      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079b8:	bf00      	nop
 80079ba:	e002      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079bc:	bf00      	nop
 80079be:	e000      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10e      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079ca:	4b06      	ldr	r3, [pc, #24]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079da:	4a02      	ldr	r2, [pc, #8]	@ (80079e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079dc:	430b      	orrs	r3, r1
 80079de:	6593      	str	r3, [r2, #88]	@ 0x58
 80079e0:	e006      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80079e2:	bf00      	nop
 80079e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80079fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a00:	2300      	movs	r3, #0
 8007a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	d055      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a1c:	d033      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a22:	d82c      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a28:	d02f      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a2e:	d826      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a34:	d02b      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a3a:	d820      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a40:	d012      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a46:	d81a      	bhi.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d022      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a50:	d115      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	3308      	adds	r3, #8
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 fcc0 	bl	80093e0 <RCCEx_PLL2_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a66:	e015      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	3328      	adds	r3, #40	@ 0x28
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fd67 	bl	8009544 <RCCEx_PLL3_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a7c:	e00a      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a84:	e006      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a86:	bf00      	nop
 8007a88:	e004      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e002      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007aac:	4a9d      	ldr	r2, [pc, #628]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f002 0308 	and.w	r3, r2, #8
 8007ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ad2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d01e      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae8:	d10c      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	3328      	adds	r3, #40	@ 0x28
 8007af0:	2102      	movs	r1, #2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 fd26 	bl	8009544 <RCCEx_PLL3_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b04:	4b87      	ldr	r3, [pc, #540]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b14:	4a83      	ldr	r2, [pc, #524]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b16:	430b      	orrs	r3, r1
 8007b18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f002 0310 	and.w	r3, r2, #16
 8007b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b34:	460b      	mov	r3, r1
 8007b36:	4313      	orrs	r3, r2
 8007b38:	d01e      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b46:	d10c      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4c:	3328      	adds	r3, #40	@ 0x28
 8007b4e:	2102      	movs	r1, #2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 fcf7 	bl	8009544 <RCCEx_PLL3_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b62:	4b70      	ldr	r3, [pc, #448]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b72:	4a6c      	ldr	r2, [pc, #432]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b92:	460b      	mov	r3, r1
 8007b94:	4313      	orrs	r3, r2
 8007b96:	d03e      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba4:	d022      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007baa:	d81b      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d00b      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007bb6:	e015      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fc0d 	bl	80093e0 <RCCEx_PLL2_Config>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bcc:	e00f      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	3328      	adds	r3, #40	@ 0x28
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 fcb4 	bl	8009544 <RCCEx_PLL3_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007be2:	e004      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10b      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c06:	4a47      	ldr	r2, [pc, #284]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c0c:	e003      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c24:	2300      	movs	r3, #0
 8007c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	d03b      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c3e:	d01f      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c44:	d818      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4a:	d003      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c50:	d007      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c52:	e011      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c54:	4b33      	ldr	r3, [pc, #204]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4a32      	ldr	r2, [pc, #200]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c60:	e00f      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c66:	3328      	adds	r3, #40	@ 0x28
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 fc6a 	bl	8009544 <RCCEx_PLL3_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c76:	e004      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c8a:	4b26      	ldr	r3, [pc, #152]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9a:	4a22      	ldr	r2, [pc, #136]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ca0:	e003      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cb8:	2300      	movs	r3, #0
 8007cba:	677b      	str	r3, [r7, #116]	@ 0x74
 8007cbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	d034      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd4:	d007      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007cd6:	e011      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd8:	4b12      	ldr	r3, [pc, #72]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	4a11      	ldr	r2, [pc, #68]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ce4:	e00e      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	3308      	adds	r3, #8
 8007cec:	2102      	movs	r1, #2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fb76 	bl	80093e0 <RCCEx_PLL2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cfa:	e003      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10d      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d1a:	4a02      	ldr	r2, [pc, #8]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d20:	e006      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d22:	bf00      	nop
 8007d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d3e:	2300      	movs	r3, #0
 8007d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d00c      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	3328      	adds	r3, #40	@ 0x28
 8007d52:	2102      	movs	r1, #2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fbf5 	bl	8009544 <RCCEx_PLL3_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d72:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d74:	2300      	movs	r3, #0
 8007d76:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	d038      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d8e:	d018      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d94:	d811      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9a:	d014      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da0:	d80b      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007daa:	d106      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dac:	4bc3      	ldr	r3, [pc, #780]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db0:	4ac2      	ldr	r2, [pc, #776]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007db8:	e008      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dc0:	e004      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dc2:	bf00      	nop
 8007dc4:	e002      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dc6:	bf00      	nop
 8007dc8:	e000      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dd4:	4bb9      	ldr	r3, [pc, #740]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de4:	4ab5      	ldr	r2, [pc, #724]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007de6:	430b      	orrs	r3, r1
 8007de8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dea:	e003      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e02:	2300      	movs	r3, #0
 8007e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	d009      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e10:	4baa      	ldr	r3, [pc, #680]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e1e:	4aa7      	ldr	r2, [pc, #668]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e20:	430b      	orrs	r3, r1
 8007e22:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e30:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e32:	2300      	movs	r3, #0
 8007e34:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e40:	4b9e      	ldr	r3, [pc, #632]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e50:	4a9a      	ldr	r2, [pc, #616]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e64:	2300      	movs	r3, #0
 8007e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	d009      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e72:	4b92      	ldr	r3, [pc, #584]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e76:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e80:	4a8e      	ldr	r2, [pc, #568]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e82:	430b      	orrs	r3, r1
 8007e84:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e94:	2300      	movs	r3, #0
 8007e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ea2:	4b86      	ldr	r3, [pc, #536]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	4a85      	ldr	r2, [pc, #532]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ea8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eac:	6113      	str	r3, [r2, #16]
 8007eae:	4b83      	ldr	r3, [pc, #524]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb0:	6919      	ldr	r1, [r3, #16]
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007eba:	4a80      	ldr	r2, [pc, #512]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d009      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007edc:	4b77      	ldr	r3, [pc, #476]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eea:	4a74      	ldr	r2, [pc, #464]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007efe:	2300      	movs	r3, #0
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d00a      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f1c:	4a67      	ldr	r2, [pc, #412]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	d011      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f42:	3308      	adds	r3, #8
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 fa4a 	bl	80093e0 <RCCEx_PLL2_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6239      	str	r1, [r7, #32]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	d011      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f82:	3308      	adds	r3, #8
 8007f84:	2101      	movs	r1, #1
 8007f86:	4618      	mov	r0, r3
 8007f88:	f001 fa2a 	bl	80093e0 <RCCEx_PLL2_Config>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	2100      	movs	r1, #0
 8007fac:	61b9      	str	r1, [r7, #24]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	d011      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fa0a 	bl	80093e0 <RCCEx_PLL2_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	2100      	movs	r1, #0
 8007fec:	6139      	str	r1, [r7, #16]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	d011      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008002:	3328      	adds	r3, #40	@ 0x28
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f001 fa9c 	bl	8009544 <RCCEx_PLL3_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800801e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	2100      	movs	r1, #0
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008038:	460b      	mov	r3, r1
 800803a:	4313      	orrs	r3, r2
 800803c:	d011      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	3328      	adds	r3, #40	@ 0x28
 8008044:	2101      	movs	r1, #1
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fa7c 	bl	8009544 <RCCEx_PLL3_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	2100      	movs	r1, #0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	607b      	str	r3, [r7, #4]
 8008074:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008078:	460b      	mov	r3, r1
 800807a:	4313      	orrs	r3, r2
 800807c:	d011      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	3328      	adds	r3, #40	@ 0x28
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fa5c 	bl	8009544 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80080a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e000      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80080b6:	46bd      	mov	sp, r7
 80080b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080bc:	58024400 	.word	0x58024400

080080c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b090      	sub	sp, #64	@ 0x40
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80080d2:	430b      	orrs	r3, r1
 80080d4:	f040 8094 	bne.w	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80080d8:	4b9e      	ldr	r3, [pc, #632]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	f200 8087 	bhi.w	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80080ea:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008105 	.word	0x08008105
 80080f4:	0800812d 	.word	0x0800812d
 80080f8:	08008155 	.word	0x08008155
 80080fc:	080081f1 	.word	0x080081f1
 8008100:	0800817d 	.word	0x0800817d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008104:	4b93      	ldr	r3, [pc, #588]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800810c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008110:	d108      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008116:	4618      	mov	r0, r3
 8008118:	f001 f810 	bl	800913c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800811c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008120:	f000 bd45 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008128:	f000 bd41 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800812c:	4b89      	ldr	r3, [pc, #548]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008138:	d108      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813a:	f107 0318 	add.w	r3, r7, #24
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fd54 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008148:	f000 bd31 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008150:	f000 bd2d 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008154:	4b7f      	ldr	r3, [pc, #508]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800815c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008160:	d108      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008162:	f107 030c 	add.w	r3, r7, #12
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fe94 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008170:	f000 bd1d 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008178:	f000 bd19 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800817c:	4b75      	ldr	r3, [pc, #468]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800817e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008184:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008186:	4b73      	ldr	r3, [pc, #460]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	2b04      	cmp	r3, #4
 8008190:	d10c      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008194:	2b00      	cmp	r3, #0
 8008196:	d109      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008198:	4b6e      	ldr	r3, [pc, #440]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	08db      	lsrs	r3, r3, #3
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	4a6d      	ldr	r2, [pc, #436]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081a4:	fa22 f303 	lsr.w	r3, r2, r3
 80081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081aa:	e01f      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081ac:	4b69      	ldr	r3, [pc, #420]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b8:	d106      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80081ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081c0:	d102      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081c2:	4b66      	ldr	r3, [pc, #408]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c6:	e011      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081c8:	4b62      	ldr	r3, [pc, #392]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d4:	d106      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80081d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081dc:	d102      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081de:	4b60      	ldr	r3, [pc, #384]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e2:	e003      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081e8:	f000 bce1 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081ec:	f000 bcdf 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081f0:	4b5c      	ldr	r3, [pc, #368]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f4:	f000 bcdb 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081fc:	f000 bcd7 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008204:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008208:	430b      	orrs	r3, r1
 800820a:	f040 80ad 	bne.w	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800820e:	4b51      	ldr	r3, [pc, #324]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008212:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008216:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800821e:	d056      	beq.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008226:	f200 8090 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	2bc0      	cmp	r3, #192	@ 0xc0
 800822e:	f000 8088 	beq.w	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	2bc0      	cmp	r3, #192	@ 0xc0
 8008236:	f200 8088 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	2b80      	cmp	r3, #128	@ 0x80
 800823e:	d032      	beq.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	2b80      	cmp	r3, #128	@ 0x80
 8008244:	f200 8081 	bhi.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	2b40      	cmp	r3, #64	@ 0x40
 8008252:	d014      	beq.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008254:	e079      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008256:	4b3f      	ldr	r3, [pc, #252]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800825e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008262:	d108      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f000 ff67 	bl	800913c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008272:	f000 bc9c 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800827a:	f000 bc98 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800827e:	4b35      	ldr	r3, [pc, #212]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800828a:	d108      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828c:	f107 0318 	add.w	r3, r7, #24
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fcab 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800829a:	f000 bc88 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a2:	f000 bc84 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b2:	d108      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b4:	f107 030c 	add.w	r3, r7, #12
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fdeb 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082c2:	f000 bc74 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ca:	f000 bc70 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082ce:	4b21      	ldr	r3, [pc, #132]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d10c      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80082e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	08db      	lsrs	r3, r3, #3
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	4a18      	ldr	r2, [pc, #96]	@ (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082f6:	fa22 f303 	lsr.w	r3, r2, r3
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082fc:	e01f      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082fe:	4b15      	ldr	r3, [pc, #84]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800830a:	d106      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800830c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008312:	d102      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008314:	4b11      	ldr	r3, [pc, #68]	@ (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008318:	e011      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800831a:	4b0e      	ldr	r3, [pc, #56]	@ (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008326:	d106      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800832e:	d102      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008330:	4b0b      	ldr	r3, [pc, #44]	@ (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008334:	e003      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800833a:	f000 bc38 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800833e:	f000 bc36 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008342:	4b08      	ldr	r3, [pc, #32]	@ (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008346:	f000 bc32 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800834e:	f000 bc2e 	b.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008352:	bf00      	nop
 8008354:	58024400 	.word	0x58024400
 8008358:	03d09000 	.word	0x03d09000
 800835c:	003d0900 	.word	0x003d0900
 8008360:	017d7840 	.word	0x017d7840
 8008364:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800836c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008370:	430b      	orrs	r3, r1
 8008372:	f040 809c 	bne.w	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008376:	4b9e      	ldr	r3, [pc, #632]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800837a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800837e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008386:	d054      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800838e:	f200 808b 	bhi.w	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008398:	f000 8083 	beq.w	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80083a2:	f200 8081 	bhi.w	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083ac:	d02f      	beq.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80083ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083b4:	d878      	bhi.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083c2:	d012      	beq.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80083c4:	e070      	b.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083c6:	4b8a      	ldr	r3, [pc, #552]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083d2:	d107      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 feaf 	bl	800913c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e2:	e3e4      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e8:	e3e1      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ea:	4b81      	ldr	r3, [pc, #516]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083f6:	d107      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083f8:	f107 0318 	add.w	r3, r7, #24
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fbf5 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008406:	e3d2      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840c:	e3cf      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800840e:	4b78      	ldr	r3, [pc, #480]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800841a:	d107      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fd37 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800842a:	e3c0      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008430:	e3bd      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008432:	4b6f      	ldr	r3, [pc, #444]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800843a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800843c:	4b6c      	ldr	r3, [pc, #432]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b04      	cmp	r3, #4
 8008446:	d10c      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800844e:	4b68      	ldr	r3, [pc, #416]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	08db      	lsrs	r3, r3, #3
 8008454:	f003 0303 	and.w	r3, r3, #3
 8008458:	4a66      	ldr	r2, [pc, #408]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800845a:	fa22 f303 	lsr.w	r3, r2, r3
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008460:	e01e      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008462:	4b63      	ldr	r3, [pc, #396]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800846e:	d106      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008476:	d102      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008478:	4b5f      	ldr	r3, [pc, #380]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800847a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800847c:	e010      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800847e:	4b5c      	ldr	r3, [pc, #368]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800848a:	d106      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800848c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008492:	d102      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008494:	4b59      	ldr	r3, [pc, #356]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008498:	e002      	b.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800849e:	e386      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084a0:	e385      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084a2:	4b57      	ldr	r3, [pc, #348]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084a6:	e382      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084ac:	e37f      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80084b6:	430b      	orrs	r3, r1
 80084b8:	f040 80a7 	bne.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80084bc:	4b4c      	ldr	r3, [pc, #304]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80084c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084cc:	d055      	beq.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084d4:	f200 8096 	bhi.w	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80084de:	f000 8084 	beq.w	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80084e8:	f200 808c 	bhi.w	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084f2:	d030      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80084f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084fa:	f200 8083 	bhi.w	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800850a:	d012      	beq.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800850c:	e07a      	b.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800850e:	4b38      	ldr	r3, [pc, #224]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800851a:	d107      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800851c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fe0b 	bl	800913c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852a:	e340      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008530:	e33d      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008532:	4b2f      	ldr	r3, [pc, #188]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800853a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800853e:	d107      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008540:	f107 0318 	add.w	r3, r7, #24
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fb51 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854e:	e32e      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008554:	e32b      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008556:	4b26      	ldr	r3, [pc, #152]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008562:	d107      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fc93 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008572:	e31c      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008578:	e319      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800857a:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800857c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008584:	4b1a      	ldr	r3, [pc, #104]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b04      	cmp	r3, #4
 800858e:	d10c      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008596:	4b16      	ldr	r3, [pc, #88]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a14      	ldr	r2, [pc, #80]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a8:	e01e      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085aa:	4b11      	ldr	r3, [pc, #68]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80085b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085be:	d102      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085c0:	4b0d      	ldr	r3, [pc, #52]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c4:	e010      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085c6:	4b0a      	ldr	r3, [pc, #40]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d2:	d106      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085da:	d102      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085dc:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e0:	e002      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085e6:	e2e2      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085e8:	e2e1      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085ea:	4b05      	ldr	r3, [pc, #20]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ee:	e2de      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085f0:	58024400 	.word	0x58024400
 80085f4:	03d09000 	.word	0x03d09000
 80085f8:	003d0900 	.word	0x003d0900
 80085fc:	017d7840 	.word	0x017d7840
 8008600:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008608:	e2d1      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800860a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008612:	430b      	orrs	r3, r1
 8008614:	f040 809c 	bne.w	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008618:	4b93      	ldr	r3, [pc, #588]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800861a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800861c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008620:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008628:	d054      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008630:	f200 808b 	bhi.w	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800863a:	f000 8083 	beq.w	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800863e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008640:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008644:	f200 8081 	bhi.w	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864e:	d02f      	beq.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008656:	d878      	bhi.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	2b00      	cmp	r3, #0
 800865c:	d004      	beq.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008664:	d012      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008666:	e070      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008668:	4b7f      	ldr	r3, [pc, #508]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008674:	d107      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fd5e 	bl	800913c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008684:	e293      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868a:	e290      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800868c:	4b76      	ldr	r3, [pc, #472]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008698:	d107      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869a:	f107 0318 	add.w	r3, r7, #24
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 faa4 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a8:	e281      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ae:	e27e      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086b0:	4b6d      	ldr	r3, [pc, #436]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086bc:	d107      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086be:	f107 030c 	add.w	r3, r7, #12
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fbe6 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086cc:	e26f      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d2:	e26c      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086d4:	4b64      	ldr	r3, [pc, #400]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086de:	4b62      	ldr	r3, [pc, #392]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0304 	and.w	r3, r3, #4
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d10c      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80086ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d109      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086f0:	4b5d      	ldr	r3, [pc, #372]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	08db      	lsrs	r3, r3, #3
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	4a5c      	ldr	r2, [pc, #368]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80086fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008702:	e01e      	b.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008704:	4b58      	ldr	r3, [pc, #352]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008710:	d106      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008718:	d102      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800871a:	4b55      	ldr	r3, [pc, #340]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800871c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800871e:	e010      	b.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008720:	4b51      	ldr	r3, [pc, #324]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800872c:	d106      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800872e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008734:	d102      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008736:	4b4f      	ldr	r3, [pc, #316]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873a:	e002      	b.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008740:	e235      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008742:	e234      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008744:	4b4c      	ldr	r3, [pc, #304]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008748:	e231      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874e:	e22e      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008754:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008758:	430b      	orrs	r3, r1
 800875a:	f040 808f 	bne.w	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800875e:	4b42      	ldr	r3, [pc, #264]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008762:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008766:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800876e:	d06b      	beq.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008776:	d874      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800877e:	d056      	beq.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008782:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008786:	d86c      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800878e:	d03b      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008792:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008796:	d864      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800879e:	d021      	beq.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80087a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087a6:	d85c      	bhi.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80087a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d004      	beq.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80087ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b4:	d004      	beq.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80087b6:	e054      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80087b8:	f7fe fa20 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 80087bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087be:	e1f6      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c0:	4b29      	ldr	r3, [pc, #164]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087cc:	d107      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ce:	f107 0318 	add.w	r3, r7, #24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fa0a 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087dc:	e1e7      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e2:	e1e4      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e4:	4b20      	ldr	r3, [pc, #128]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f0:	d107      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f2:	f107 030c 	add.w	r3, r7, #12
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fb4c 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008800:	e1d5      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	e1d2      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008808:	4b17      	ldr	r3, [pc, #92]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b04      	cmp	r3, #4
 8008812:	d109      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008814:	4b14      	ldr	r3, [pc, #80]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	08db      	lsrs	r3, r3, #3
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	4a13      	ldr	r2, [pc, #76]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008826:	e1c2      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882c:	e1bf      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800882e:	4b0e      	ldr	r3, [pc, #56]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800883a:	d102      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800883c:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800883e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008840:	e1b5      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008846:	e1b2      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008848:	4b07      	ldr	r3, [pc, #28]	@ (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008854:	d102      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008856:	4b07      	ldr	r3, [pc, #28]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800885a:	e1a8      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008860:	e1a5      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008866:	e1a2      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008868:	58024400 	.word	0x58024400
 800886c:	03d09000 	.word	0x03d09000
 8008870:	003d0900 	.word	0x003d0900
 8008874:	017d7840 	.word	0x017d7840
 8008878:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800887c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008880:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008884:	430b      	orrs	r3, r1
 8008886:	d173      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008888:	4b9c      	ldr	r3, [pc, #624]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800888a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008890:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008898:	d02f      	beq.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800889a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088a0:	d863      	bhi.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ae:	d012      	beq.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80088b0:	e05b      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088b2:	4b92      	ldr	r3, [pc, #584]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088be:	d107      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c0:	f107 0318 	add.w	r3, r7, #24
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f991 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ce:	e16e      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d4:	e16b      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088d6:	4b89      	ldr	r3, [pc, #548]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e2:	d107      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e4:	f107 030c 	add.w	r3, r7, #12
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fad3 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f2:	e15c      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f8:	e159      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088fa:	4b80      	ldr	r3, [pc, #512]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008902:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008904:	4b7d      	ldr	r3, [pc, #500]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b04      	cmp	r3, #4
 800890e:	d10c      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008916:	4b79      	ldr	r3, [pc, #484]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	4a77      	ldr	r2, [pc, #476]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008928:	e01e      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800892a:	4b74      	ldr	r3, [pc, #464]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008936:	d106      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800893e:	d102      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008940:	4b70      	ldr	r3, [pc, #448]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008944:	e010      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008946:	4b6d      	ldr	r3, [pc, #436]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008952:	d106      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800895a:	d102      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800895c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008960:	e002      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008966:	e122      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008968:	e121      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896e:	e11e      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008974:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008978:	430b      	orrs	r3, r1
 800897a:	d133      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800897c:	4b5f      	ldr	r3, [pc, #380]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800897e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008984:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800898c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008992:	d012      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008994:	e023      	b.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008996:	4b59      	ldr	r3, [pc, #356]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800899e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089a2:	d107      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fbc7 	bl	800913c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089b2:	e0fc      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b8:	e0f9      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ba:	4b50      	ldr	r3, [pc, #320]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089c6:	d107      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089c8:	f107 0318 	add.w	r3, r7, #24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f90d 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089d6:	e0ea      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089dc:	e0e7      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e2:	e0e4      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80089e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80089ec:	430b      	orrs	r3, r1
 80089ee:	f040 808d 	bne.w	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80089f2:	4b42      	ldr	r3, [pc, #264]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089f6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80089fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a02:	d06b      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a0a:	d874      	bhi.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a12:	d056      	beq.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1a:	d86c      	bhi.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a22:	d03b      	beq.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a2a:	d864      	bhi.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a32:	d021      	beq.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a3a:	d85c      	bhi.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a48:	d004      	beq.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008a4a:	e054      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a4c:	f000 f8b8 	bl	8008bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a52:	e0ac      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a54:	4b29      	ldr	r3, [pc, #164]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a60:	d107      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a62:	f107 0318 	add.w	r3, r7, #24
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f8c0 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a70:	e09d      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a76:	e09a      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a78:	4b20      	ldr	r3, [pc, #128]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a84:	d107      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a86:	f107 030c 	add.w	r3, r7, #12
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fa02 	bl	8008e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a94:	e08b      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9a:	e088      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a9c:	4b17      	ldr	r3, [pc, #92]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d109      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa8:	4b14      	ldr	r3, [pc, #80]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	08db      	lsrs	r3, r3, #3
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	4a13      	ldr	r2, [pc, #76]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aba:	e078      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac0:	e075      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ace:	d102      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad4:	e06b      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ada:	e068      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008adc:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ae8:	d102      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008aea:	4b07      	ldr	r3, [pc, #28]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aee:	e05e      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e05b      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afa:	e058      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008afc:	58024400 	.word	0x58024400
 8008b00:	03d09000 	.word	0x03d09000
 8008b04:	003d0900 	.word	0x003d0900
 8008b08:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b10:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008b14:	430b      	orrs	r3, r1
 8008b16:	d148      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b18:	4b27      	ldr	r3, [pc, #156]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b28:	d02a      	beq.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b30:	d838      	bhi.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b3e:	d00d      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008b40:	e030      	b.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b42:	4b1d      	ldr	r3, [pc, #116]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008b50:	4b1a      	ldr	r3, [pc, #104]	@ (8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b54:	e02b      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5a:	e028      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b5c:	4b16      	ldr	r3, [pc, #88]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b68:	d107      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fae4 	bl	800913c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b78:	e019      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7e:	e016      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b80:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b8c:	d107      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8e:	f107 0318 	add.w	r3, r7, #24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f82a 	bl	8008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9c:	e007      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba2:	e004      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba8:	e001      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3740      	adds	r7, #64	@ 0x40
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	017d7840 	.word	0x017d7840

08008bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008bc4:	f7fd ffea 	bl	8006b9c <HAL_RCC_GetHCLKFreq>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	4904      	ldr	r1, [pc, #16]	@ (8008be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008bd6:	5ccb      	ldrb	r3, [r1, r3]
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	58024400 	.word	0x58024400
 8008be8:	08010db0 	.word	0x08010db0

08008bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b089      	sub	sp, #36	@ 0x24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	0b1b      	lsrs	r3, r3, #12
 8008c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0e:	091b      	lsrs	r3, r3, #4
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c16:	4b99      	ldr	r3, [pc, #612]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1a:	08db      	lsrs	r3, r3, #3
 8008c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	fb02 f303 	mul.w	r3, r2, r3
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8111 	beq.w	8008e5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	f000 8083 	beq.w	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	f200 80a1 	bhi.w	8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d056      	beq.n	8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c56:	e099      	b.n	8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c58:	4b88      	ldr	r3, [pc, #544]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d02d      	beq.n	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c64:	4b85      	ldr	r3, [pc, #532]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	08db      	lsrs	r3, r3, #3
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	4a84      	ldr	r2, [pc, #528]	@ (8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
 8008c74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	ee07 3a90 	vmov	s15, r3
 8008c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cbe:	e087      	b.n	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d02:	e065      	b.n	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d16:	4b59      	ldr	r3, [pc, #356]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d46:	e043      	b.n	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5a:	4b48      	ldr	r3, [pc, #288]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d8a:	e021      	b.n	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9e:	4b37      	ldr	r3, [pc, #220]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd4:	0a5b      	lsrs	r3, r3, #9
 8008dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df6:	ee17 2a90 	vmov	r2, s15
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e02:	0c1b      	lsrs	r3, r3, #16
 8008e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e24:	ee17 2a90 	vmov	r2, s15
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e2c:	4b13      	ldr	r3, [pc, #76]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e30:	0e1b      	lsrs	r3, r3, #24
 8008e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e52:	ee17 2a90 	vmov	r2, s15
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e5a:	e008      	b.n	8008e6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	609a      	str	r2, [r3, #8]
}
 8008e6e:	bf00      	nop
 8008e70:	3724      	adds	r7, #36	@ 0x24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	46000000 	.word	0x46000000
 8008e88:	4c742400 	.word	0x4c742400
 8008e8c:	4a742400 	.word	0x4a742400
 8008e90:	4bbebc20 	.word	0x4bbebc20

08008e94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b089      	sub	sp, #36	@ 0x24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	0d1b      	lsrs	r3, r3, #20
 8008eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ebe:	4b99      	ldr	r3, [pc, #612]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec2:	08db      	lsrs	r3, r3, #3
 8008ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8111 	beq.w	8009104 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	f000 8083 	beq.w	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	f200 80a1 	bhi.w	8009034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d056      	beq.n	8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008efe:	e099      	b.n	8009034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f00:	4b88      	ldr	r3, [pc, #544]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d02d      	beq.n	8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f0c:	4b85      	ldr	r3, [pc, #532]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	08db      	lsrs	r3, r3, #3
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	4a84      	ldr	r2, [pc, #528]	@ (8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f36:	4b7b      	ldr	r3, [pc, #492]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f66:	e087      	b.n	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008faa:	e065      	b.n	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fbe:	4b59      	ldr	r3, [pc, #356]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fee:	e043      	b.n	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009002:	4b48      	ldr	r3, [pc, #288]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009012:	ed97 6a03 	vldr	s12, [r7, #12]
 8009016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800901a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800901e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009032:	e021      	b.n	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009046:	4b37      	ldr	r3, [pc, #220]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009056:	ed97 6a03 	vldr	s12, [r7, #12]
 800905a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800905e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800906a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009076:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009078:	4b2a      	ldr	r3, [pc, #168]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800907a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907c:	0a5b      	lsrs	r3, r3, #9
 800907e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800908e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009092:	edd7 6a07 	vldr	s13, [r7, #28]
 8009096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800909a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800909e:	ee17 2a90 	vmov	r2, s15
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090aa:	0c1b      	lsrs	r3, r3, #16
 80090ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090cc:	ee17 2a90 	vmov	r2, s15
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80090d4:	4b13      	ldr	r3, [pc, #76]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d8:	0e1b      	lsrs	r3, r3, #24
 80090da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fa:	ee17 2a90 	vmov	r2, s15
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009102:	e008      	b.n	8009116 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]
}
 8009116:	bf00      	nop
 8009118:	3724      	adds	r7, #36	@ 0x24
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	58024400 	.word	0x58024400
 8009128:	03d09000 	.word	0x03d09000
 800912c:	46000000 	.word	0x46000000
 8009130:	4c742400 	.word	0x4c742400
 8009134:	4a742400 	.word	0x4a742400
 8009138:	4bbebc20 	.word	0x4bbebc20

0800913c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800913c:	b480      	push	{r7}
 800913e:	b089      	sub	sp, #36	@ 0x24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009144:	4ba0      	ldr	r3, [pc, #640]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800914e:	4b9e      	ldr	r3, [pc, #632]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009152:	091b      	lsrs	r3, r3, #4
 8009154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009158:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800915a:	4b9b      	ldr	r3, [pc, #620]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800915c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009164:	4b98      	ldr	r3, [pc, #608]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009168:	08db      	lsrs	r3, r3, #3
 800916a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	fb02 f303 	mul.w	r3, r2, r3
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 8111 	beq.w	80093aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	2b02      	cmp	r3, #2
 800918c:	f000 8083 	beq.w	8009296 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b02      	cmp	r3, #2
 8009194:	f200 80a1 	bhi.w	80092da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d056      	beq.n	8009252 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80091a4:	e099      	b.n	80092da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091a6:	4b88      	ldr	r3, [pc, #544]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d02d      	beq.n	800920e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091b2:	4b85      	ldr	r3, [pc, #532]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	08db      	lsrs	r3, r3, #3
 80091b8:	f003 0303 	and.w	r3, r3, #3
 80091bc:	4a83      	ldr	r2, [pc, #524]	@ (80093cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80091be:	fa22 f303 	lsr.w	r3, r2, r3
 80091c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	ee07 3a90 	vmov	s15, r3
 80091d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091dc:	4b7a      	ldr	r3, [pc, #488]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e4:	ee07 3a90 	vmov	s15, r3
 80091e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80091f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80093d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009208:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800920c:	e087      	b.n	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009218:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800921c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009220:	4b69      	ldr	r3, [pc, #420]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009230:	ed97 6a03 	vldr	s12, [r7, #12]
 8009234:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80093d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009250:	e065      	b.n	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	ee07 3a90 	vmov	s15, r3
 8009258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80093d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009264:	4b58      	ldr	r3, [pc, #352]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009274:	ed97 6a03 	vldr	s12, [r7, #12]
 8009278:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80093d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800927c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009294:	e043      	b.n	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	ee07 3a90 	vmov	s15, r3
 800929c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80093dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80092a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a8:	4b47      	ldr	r3, [pc, #284]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80092bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80093d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092d8:	e021      	b.n	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	ee07 3a90 	vmov	s15, r3
 80092e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ec:	4b36      	ldr	r3, [pc, #216]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009300:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80093d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800931c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800931e:	4b2a      	ldr	r3, [pc, #168]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009322:	0a5b      	lsrs	r3, r3, #9
 8009324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009330:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009334:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009338:	edd7 6a07 	vldr	s13, [r7, #28]
 800933c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009344:	ee17 2a90 	vmov	r2, s15
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800934c:	4b1e      	ldr	r3, [pc, #120]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800934e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009350:	0c1b      	lsrs	r3, r3, #16
 8009352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009366:	edd7 6a07 	vldr	s13, [r7, #28]
 800936a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800936e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009372:	ee17 2a90 	vmov	r2, s15
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800937a:	4b13      	ldr	r3, [pc, #76]	@ (80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800937c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800937e:	0e1b      	lsrs	r3, r3, #24
 8009380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009394:	edd7 6a07 	vldr	s13, [r7, #28]
 8009398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a0:	ee17 2a90 	vmov	r2, s15
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80093a8:	e008      	b.n	80093bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	609a      	str	r2, [r3, #8]
}
 80093bc:	bf00      	nop
 80093be:	3724      	adds	r7, #36	@ 0x24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	58024400 	.word	0x58024400
 80093cc:	03d09000 	.word	0x03d09000
 80093d0:	46000000 	.word	0x46000000
 80093d4:	4c742400 	.word	0x4c742400
 80093d8:	4a742400 	.word	0x4a742400
 80093dc:	4bbebc20 	.word	0x4bbebc20

080093e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093ee:	4b53      	ldr	r3, [pc, #332]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80093f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d101      	bne.n	80093fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e099      	b.n	8009532 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093fe:	4b4f      	ldr	r3, [pc, #316]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a4e      	ldr	r2, [pc, #312]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009404:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940a:	f7f8 fa33 	bl	8001874 <HAL_GetTick>
 800940e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009410:	e008      	b.n	8009424 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009412:	f7f8 fa2f 	bl	8001874 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	d901      	bls.n	8009424 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e086      	b.n	8009532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009424:	4b45      	ldr	r3, [pc, #276]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1f0      	bne.n	8009412 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009430:	4b42      	ldr	r3, [pc, #264]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009434:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	031b      	lsls	r3, r3, #12
 800943e:	493f      	ldr	r1, [pc, #252]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009440:	4313      	orrs	r3, r2
 8009442:	628b      	str	r3, [r1, #40]	@ 0x28
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	3b01      	subs	r3, #1
 800944a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	3b01      	subs	r3, #1
 8009454:	025b      	lsls	r3, r3, #9
 8009456:	b29b      	uxth	r3, r3
 8009458:	431a      	orrs	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	3b01      	subs	r3, #1
 8009460:	041b      	lsls	r3, r3, #16
 8009462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	3b01      	subs	r3, #1
 800946e:	061b      	lsls	r3, r3, #24
 8009470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009474:	4931      	ldr	r1, [pc, #196]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009476:	4313      	orrs	r3, r2
 8009478:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800947a:	4b30      	ldr	r3, [pc, #192]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 800947c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	492d      	ldr	r1, [pc, #180]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009488:	4313      	orrs	r3, r2
 800948a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800948c:	4b2b      	ldr	r3, [pc, #172]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	f023 0220 	bic.w	r2, r3, #32
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	4928      	ldr	r1, [pc, #160]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 800949a:	4313      	orrs	r3, r2
 800949c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800949e:	4b27      	ldr	r3, [pc, #156]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a2:	4a26      	ldr	r2, [pc, #152]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094a4:	f023 0310 	bic.w	r3, r3, #16
 80094a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094aa:	4b24      	ldr	r3, [pc, #144]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094ae:	4b24      	ldr	r3, [pc, #144]	@ (8009540 <RCCEx_PLL2_Config+0x160>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	69d2      	ldr	r2, [r2, #28]
 80094b6:	00d2      	lsls	r2, r2, #3
 80094b8:	4920      	ldr	r1, [pc, #128]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094be:	4b1f      	ldr	r3, [pc, #124]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c2:	4a1e      	ldr	r2, [pc, #120]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094c4:	f043 0310 	orr.w	r3, r3, #16
 80094c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d106      	bne.n	80094de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094d0:	4b1a      	ldr	r3, [pc, #104]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d4:	4a19      	ldr	r2, [pc, #100]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094dc:	e00f      	b.n	80094fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d106      	bne.n	80094f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80094e4:	4b15      	ldr	r3, [pc, #84]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e8:	4a14      	ldr	r2, [pc, #80]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094f0:	e005      	b.n	80094fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094f2:	4b12      	ldr	r3, [pc, #72]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f6:	4a11      	ldr	r2, [pc, #68]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 80094f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094fe:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a0e      	ldr	r2, [pc, #56]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800950a:	f7f8 f9b3 	bl	8001874 <HAL_GetTick>
 800950e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009510:	e008      	b.n	8009524 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009512:	f7f8 f9af 	bl	8001874 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d901      	bls.n	8009524 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e006      	b.n	8009532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009524:	4b05      	ldr	r3, [pc, #20]	@ (800953c <RCCEx_PLL2_Config+0x15c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0f0      	beq.n	8009512 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	58024400 	.word	0x58024400
 8009540:	ffff0007 	.word	0xffff0007

08009544 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009552:	4b53      	ldr	r3, [pc, #332]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	2b03      	cmp	r3, #3
 800955c:	d101      	bne.n	8009562 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e099      	b.n	8009696 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009562:	4b4f      	ldr	r3, [pc, #316]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a4e      	ldr	r2, [pc, #312]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800956c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800956e:	f7f8 f981 	bl	8001874 <HAL_GetTick>
 8009572:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009574:	e008      	b.n	8009588 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009576:	f7f8 f97d 	bl	8001874 <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	2b02      	cmp	r3, #2
 8009582:	d901      	bls.n	8009588 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e086      	b.n	8009696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009588:	4b45      	ldr	r3, [pc, #276]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f0      	bne.n	8009576 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009594:	4b42      	ldr	r3, [pc, #264]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009598:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	051b      	lsls	r3, r3, #20
 80095a2:	493f      	ldr	r1, [pc, #252]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	025b      	lsls	r3, r3, #9
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	431a      	orrs	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	041b      	lsls	r3, r3, #16
 80095c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	061b      	lsls	r3, r3, #24
 80095d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095d8:	4931      	ldr	r1, [pc, #196]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095de:	4b30      	ldr	r3, [pc, #192]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	492d      	ldr	r1, [pc, #180]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095f0:	4b2b      	ldr	r3, [pc, #172]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 80095f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	4928      	ldr	r1, [pc, #160]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009602:	4b27      	ldr	r3, [pc, #156]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009606:	4a26      	ldr	r2, [pc, #152]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800960c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800960e:	4b24      	ldr	r3, [pc, #144]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009612:	4b24      	ldr	r3, [pc, #144]	@ (80096a4 <RCCEx_PLL3_Config+0x160>)
 8009614:	4013      	ands	r3, r2
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	69d2      	ldr	r2, [r2, #28]
 800961a:	00d2      	lsls	r2, r2, #3
 800961c:	4920      	ldr	r1, [pc, #128]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 800961e:	4313      	orrs	r3, r2
 8009620:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009622:	4b1f      	ldr	r3, [pc, #124]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	4a1e      	ldr	r2, [pc, #120]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800962c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d106      	bne.n	8009642 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009634:	4b1a      	ldr	r3, [pc, #104]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009638:	4a19      	ldr	r2, [pc, #100]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 800963a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800963e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009640:	e00f      	b.n	8009662 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d106      	bne.n	8009656 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009648:	4b15      	ldr	r3, [pc, #84]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	4a14      	ldr	r2, [pc, #80]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 800964e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009654:	e005      	b.n	8009662 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009656:	4b12      	ldr	r3, [pc, #72]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965a:	4a11      	ldr	r2, [pc, #68]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 800965c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009662:	4b0f      	ldr	r3, [pc, #60]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a0e      	ldr	r2, [pc, #56]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 8009668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800966c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800966e:	f7f8 f901 	bl	8001874 <HAL_GetTick>
 8009672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009674:	e008      	b.n	8009688 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009676:	f7f8 f8fd 	bl	8001874 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	2b02      	cmp	r3, #2
 8009682:	d901      	bls.n	8009688 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e006      	b.n	8009696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009688:	4b05      	ldr	r3, [pc, #20]	@ (80096a0 <RCCEx_PLL3_Config+0x15c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0f0      	beq.n	8009676 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	58024400 	.word	0x58024400
 80096a4:	ffff0007 	.word	0xffff0007

080096a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e10f      	b.n	80098da <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a87      	ldr	r2, [pc, #540]	@ (80098e4 <HAL_SPI_Init+0x23c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d00f      	beq.n	80096ea <HAL_SPI_Init+0x42>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a86      	ldr	r2, [pc, #536]	@ (80098e8 <HAL_SPI_Init+0x240>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00a      	beq.n	80096ea <HAL_SPI_Init+0x42>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a84      	ldr	r2, [pc, #528]	@ (80098ec <HAL_SPI_Init+0x244>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d005      	beq.n	80096ea <HAL_SPI_Init+0x42>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b0f      	cmp	r3, #15
 80096e4:	d901      	bls.n	80096ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e0f7      	b.n	80098da <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fbca 	bl	8009e84 <SPI_GetPacketSize>
 80096f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a7b      	ldr	r2, [pc, #492]	@ (80098e4 <HAL_SPI_Init+0x23c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d00c      	beq.n	8009716 <HAL_SPI_Init+0x6e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a79      	ldr	r2, [pc, #484]	@ (80098e8 <HAL_SPI_Init+0x240>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d007      	beq.n	8009716 <HAL_SPI_Init+0x6e>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a78      	ldr	r2, [pc, #480]	@ (80098ec <HAL_SPI_Init+0x244>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d002      	beq.n	8009716 <HAL_SPI_Init+0x6e>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2b08      	cmp	r3, #8
 8009714:	d811      	bhi.n	800973a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800971a:	4a72      	ldr	r2, [pc, #456]	@ (80098e4 <HAL_SPI_Init+0x23c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d009      	beq.n	8009734 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a70      	ldr	r2, [pc, #448]	@ (80098e8 <HAL_SPI_Init+0x240>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d004      	beq.n	8009734 <HAL_SPI_Init+0x8c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a6f      	ldr	r2, [pc, #444]	@ (80098ec <HAL_SPI_Init+0x244>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d104      	bne.n	800973e <HAL_SPI_Init+0x96>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b10      	cmp	r3, #16
 8009738:	d901      	bls.n	800973e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e0cd      	b.n	80098da <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d106      	bne.n	8009758 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7f7 fc56 	bl	8001004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0201 	bic.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800977a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009784:	d119      	bne.n	80097ba <HAL_SPI_Init+0x112>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800978e:	d103      	bne.n	8009798 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009794:	2b00      	cmp	r3, #0
 8009796:	d008      	beq.n	80097aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10c      	bne.n	80097ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097a8:	d107      	bne.n	80097ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00f      	beq.n	80097e6 <HAL_SPI_Init+0x13e>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b06      	cmp	r3, #6
 80097cc:	d90b      	bls.n	80097e6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	e007      	b.n	80097f6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69da      	ldr	r2, [r3, #28]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fe:	431a      	orrs	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009808:	ea42 0103 	orr.w	r1, r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	430a      	orrs	r2, r1
 8009816:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	431a      	orrs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984a:	431a      	orrs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	431a      	orrs	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009856:	ea42 0103 	orr.w	r1, r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d113      	bne.n	8009896 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009880:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009894:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0201 	bic.w	r2, r2, #1
 80098a4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40013000 	.word	0x40013000
 80098e8:	40003800 	.word	0x40003800
 80098ec:	40003c00 	.word	0x40003c00

080098f0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	@ 0x28
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	4613      	mov	r3, r2
 80098fe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3320      	adds	r3, #32
 8009906:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_SPI_Transmit+0x2a>
 8009916:	2302      	movs	r3, #2
 8009918:	e1e1      	b.n	8009cde <HAL_SPI_Transmit+0x3ee>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009922:	f7f7 ffa7 	bl	8001874 <HAL_GetTick>
 8009926:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b01      	cmp	r3, #1
 8009932:	d007      	beq.n	8009944 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009934:	2302      	movs	r3, #2
 8009936:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009940:	7efb      	ldrb	r3, [r7, #27]
 8009942:	e1cc      	b.n	8009cde <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <HAL_SPI_Transmit+0x60>
 800994a:	88fb      	ldrh	r3, [r7, #6]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800995c:	7efb      	ldrb	r3, [r7, #27]
 800995e:	e1be      	b.n	8009cde <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2203      	movs	r2, #3
 8009964:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	88fa      	ldrh	r2, [r7, #6]
 800997a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	88fa      	ldrh	r2, [r7, #6]
 8009982:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80099b0:	d108      	bne.n	80099c4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	e009      	b.n	80099d8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80099d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	4b96      	ldr	r3, [pc, #600]	@ (8009c38 <HAL_SPI_Transmit+0x348>)
 80099e0:	4013      	ands	r3, r2
 80099e2:	88f9      	ldrh	r1, [r7, #6]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	6812      	ldr	r2, [r2, #0]
 80099e8:	430b      	orrs	r3, r1
 80099ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0201 	orr.w	r2, r2, #1
 80099fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a04:	d107      	bne.n	8009a16 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	2b0f      	cmp	r3, #15
 8009a1c:	d947      	bls.n	8009aae <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a1e:	e03f      	b.n	8009aa0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d114      	bne.n	8009a58 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6812      	ldr	r2, [r2, #0]
 8009a38:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a3e:	1d1a      	adds	r2, r3, #4
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009a56:	e023      	b.n	8009aa0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a58:	f7f7 ff0c 	bl	8001874 <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d803      	bhi.n	8009a70 <HAL_SPI_Transmit+0x180>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d102      	bne.n	8009a76 <HAL_SPI_Transmit+0x186>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d114      	bne.n	8009aa0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f936 	bl	8009ce8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e11e      	b.n	8009cde <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1b9      	bne.n	8009a20 <HAL_SPI_Transmit+0x130>
 8009aac:	e0f1      	b.n	8009c92 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	2b07      	cmp	r3, #7
 8009ab4:	f240 80e6 	bls.w	8009c84 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009ab8:	e05d      	b.n	8009b76 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d132      	bne.n	8009b2e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d918      	bls.n	8009b06 <HAL_SPI_Transmit+0x216>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d014      	beq.n	8009b06 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	3b02      	subs	r3, #2
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b04:	e037      	b.n	8009b76 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b0a:	881a      	ldrh	r2, [r3, #0]
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b14:	1c9a      	adds	r2, r3, #2
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b2c:	e023      	b.n	8009b76 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b2e:	f7f7 fea1 	bl	8001874 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d803      	bhi.n	8009b46 <HAL_SPI_Transmit+0x256>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b44:	d102      	bne.n	8009b4c <HAL_SPI_Transmit+0x25c>
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d114      	bne.n	8009b76 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f8cb 	bl	8009ce8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e0b3      	b.n	8009cde <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d19b      	bne.n	8009aba <HAL_SPI_Transmit+0x1ca>
 8009b82:	e086      	b.n	8009c92 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d154      	bne.n	8009c3c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d918      	bls.n	8009bd0 <HAL_SPI_Transmit+0x2e0>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ba2:	2b40      	cmp	r3, #64	@ 0x40
 8009ba4:	d914      	bls.n	8009bd0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6812      	ldr	r2, [r2, #0]
 8009bb0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bb6:	1d1a      	adds	r2, r3, #4
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	3b04      	subs	r3, #4
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009bce:	e059      	b.n	8009c84 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d917      	bls.n	8009c0c <HAL_SPI_Transmit+0x31c>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d013      	beq.n	8009c0c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009be8:	881a      	ldrh	r2, [r3, #0]
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bf2:	1c9a      	adds	r2, r3, #2
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b02      	subs	r3, #2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c0a:	e03b      	b.n	8009c84 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3320      	adds	r3, #32
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c36:	e025      	b.n	8009c84 <HAL_SPI_Transmit+0x394>
 8009c38:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c3c:	f7f7 fe1a 	bl	8001874 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d803      	bhi.n	8009c54 <HAL_SPI_Transmit+0x364>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d102      	bne.n	8009c5a <HAL_SPI_Transmit+0x36a>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d114      	bne.n	8009c84 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f844 	bl	8009ce8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e02c      	b.n	8009cde <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f47f af79 	bne.w	8009b84 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2108      	movs	r1, #8
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 f8c3 	bl	8009e28 <SPI_WaitOnFlagUntilTimeout>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d007      	beq.n	8009cb8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cae:	f043 0220 	orr.w	r2, r3, #32
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f815 	bl	8009ce8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e000      	b.n	8009cde <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8009cdc:	7efb      	ldrb	r3, [r7, #27]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3720      	adds	r7, #32
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop

08009ce8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	699a      	ldr	r2, [r3, #24]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0208 	orr.w	r2, r2, #8
 8009d06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699a      	ldr	r2, [r3, #24]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0210 	orr.w	r2, r2, #16
 8009d16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 0201 	bic.w	r2, r2, #1
 8009d26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6919      	ldr	r1, [r3, #16]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	4b3c      	ldr	r3, [pc, #240]	@ (8009e24 <SPI_CloseTransfer+0x13c>)
 8009d34:	400b      	ands	r3, r1
 8009d36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689a      	ldr	r2, [r3, #8]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d014      	beq.n	8009d7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f003 0320 	and.w	r3, r3, #32
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00f      	beq.n	8009d7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	699a      	ldr	r2, [r3, #24]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f042 0220 	orr.w	r2, r2, #32
 8009d7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d014      	beq.n	8009db4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00f      	beq.n	8009db4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d9a:	f043 0204 	orr.w	r2, r3, #4
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009db2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00f      	beq.n	8009dde <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dc4:	f043 0201 	orr.w	r2, r3, #1
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	699a      	ldr	r2, [r3, #24]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ddc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00f      	beq.n	8009e08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dee:	f043 0208 	orr.w	r2, r3, #8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699a      	ldr	r2, [r3, #24]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009e18:	bf00      	nop
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	fffffc90 	.word	0xfffffc90

08009e28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	4613      	mov	r3, r2
 8009e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e38:	e010      	b.n	8009e5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e3a:	f7f7 fd1b 	bl	8001874 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d803      	bhi.n	8009e52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d102      	bne.n	8009e58 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e00f      	b.n	8009e7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	695a      	ldr	r2, [r3, #20]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	4013      	ands	r3, r2
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	bf0c      	ite	eq
 8009e6c:	2301      	moveq	r3, #1
 8009e6e:	2300      	movne	r3, #0
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d0df      	beq.n	8009e3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e90:	095b      	lsrs	r3, r3, #5
 8009e92:	3301      	adds	r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	3307      	adds	r3, #7
 8009ea2:	08db      	lsrs	r3, r3, #3
 8009ea4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	fb02 f303 	mul.w	r3, r2, r3
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e049      	b.n	8009f60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d106      	bne.n	8009ee6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7f7 fbb3 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f000 fd71 	bl	800a9e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d001      	beq.n	8009f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e054      	b.n	800a02a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f042 0201 	orr.w	r2, r2, #1
 8009f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a26      	ldr	r2, [pc, #152]	@ (800a038 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d022      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009faa:	d01d      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a22      	ldr	r2, [pc, #136]	@ (800a03c <HAL_TIM_Base_Start_IT+0xd4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d018      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a21      	ldr	r2, [pc, #132]	@ (800a040 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d013      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a1f      	ldr	r2, [pc, #124]	@ (800a044 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d00e      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a1e      	ldr	r2, [pc, #120]	@ (800a048 <HAL_TIM_Base_Start_IT+0xe0>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d009      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <HAL_TIM_Base_Start_IT+0xe4>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d004      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0x80>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a1b      	ldr	r2, [pc, #108]	@ (800a050 <HAL_TIM_Base_Start_IT+0xe8>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d115      	bne.n	800a014 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	4b19      	ldr	r3, [pc, #100]	@ (800a054 <HAL_TIM_Base_Start_IT+0xec>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b06      	cmp	r3, #6
 8009ff8:	d015      	beq.n	800a026 <HAL_TIM_Base_Start_IT+0xbe>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a000:	d011      	beq.n	800a026 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f042 0201 	orr.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a012:	e008      	b.n	800a026 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0201 	orr.w	r2, r2, #1
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	e000      	b.n	800a028 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40010000 	.word	0x40010000
 800a03c:	40000400 	.word	0x40000400
 800a040:	40000800 	.word	0x40000800
 800a044:	40000c00 	.word	0x40000c00
 800a048:	40010400 	.word	0x40010400
 800a04c:	40001800 	.word	0x40001800
 800a050:	40014000 	.word	0x40014000
 800a054:	00010007 	.word	0x00010007

0800a058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e049      	b.n	800a0fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f841 	bl	800a106 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f000 fca2 	bl	800a9e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a106:	b480      	push	{r7}
 800a108:	b083      	sub	sp, #12
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
	...

0800a11c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d109      	bne.n	800a140 <HAL_TIM_PWM_Start+0x24>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b01      	cmp	r3, #1
 800a136:	bf14      	ite	ne
 800a138:	2301      	movne	r3, #1
 800a13a:	2300      	moveq	r3, #0
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	e03c      	b.n	800a1ba <HAL_TIM_PWM_Start+0x9e>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b04      	cmp	r3, #4
 800a144:	d109      	bne.n	800a15a <HAL_TIM_PWM_Start+0x3e>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b01      	cmp	r3, #1
 800a150:	bf14      	ite	ne
 800a152:	2301      	movne	r3, #1
 800a154:	2300      	moveq	r3, #0
 800a156:	b2db      	uxtb	r3, r3
 800a158:	e02f      	b.n	800a1ba <HAL_TIM_PWM_Start+0x9e>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b08      	cmp	r3, #8
 800a15e:	d109      	bne.n	800a174 <HAL_TIM_PWM_Start+0x58>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b01      	cmp	r3, #1
 800a16a:	bf14      	ite	ne
 800a16c:	2301      	movne	r3, #1
 800a16e:	2300      	moveq	r3, #0
 800a170:	b2db      	uxtb	r3, r3
 800a172:	e022      	b.n	800a1ba <HAL_TIM_PWM_Start+0x9e>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b0c      	cmp	r3, #12
 800a178:	d109      	bne.n	800a18e <HAL_TIM_PWM_Start+0x72>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b01      	cmp	r3, #1
 800a184:	bf14      	ite	ne
 800a186:	2301      	movne	r3, #1
 800a188:	2300      	moveq	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	e015      	b.n	800a1ba <HAL_TIM_PWM_Start+0x9e>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b10      	cmp	r3, #16
 800a192:	d109      	bne.n	800a1a8 <HAL_TIM_PWM_Start+0x8c>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	bf14      	ite	ne
 800a1a0:	2301      	movne	r3, #1
 800a1a2:	2300      	moveq	r3, #0
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	e008      	b.n	800a1ba <HAL_TIM_PWM_Start+0x9e>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	bf14      	ite	ne
 800a1b4:	2301      	movne	r3, #1
 800a1b6:	2300      	moveq	r3, #0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e0a1      	b.n	800a306 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d104      	bne.n	800a1d2 <HAL_TIM_PWM_Start+0xb6>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1d0:	e023      	b.n	800a21a <HAL_TIM_PWM_Start+0xfe>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	d104      	bne.n	800a1e2 <HAL_TIM_PWM_Start+0xc6>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1e0:	e01b      	b.n	800a21a <HAL_TIM_PWM_Start+0xfe>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d104      	bne.n	800a1f2 <HAL_TIM_PWM_Start+0xd6>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1f0:	e013      	b.n	800a21a <HAL_TIM_PWM_Start+0xfe>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b0c      	cmp	r3, #12
 800a1f6:	d104      	bne.n	800a202 <HAL_TIM_PWM_Start+0xe6>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a200:	e00b      	b.n	800a21a <HAL_TIM_PWM_Start+0xfe>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b10      	cmp	r3, #16
 800a206:	d104      	bne.n	800a212 <HAL_TIM_PWM_Start+0xf6>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a210:	e003      	b.n	800a21a <HAL_TIM_PWM_Start+0xfe>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2202      	movs	r2, #2
 800a216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2201      	movs	r2, #1
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 ffea 	bl	800b1fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a38      	ldr	r2, [pc, #224]	@ (800a310 <HAL_TIM_PWM_Start+0x1f4>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d013      	beq.n	800a25a <HAL_TIM_PWM_Start+0x13e>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a37      	ldr	r2, [pc, #220]	@ (800a314 <HAL_TIM_PWM_Start+0x1f8>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d00e      	beq.n	800a25a <HAL_TIM_PWM_Start+0x13e>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a35      	ldr	r2, [pc, #212]	@ (800a318 <HAL_TIM_PWM_Start+0x1fc>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d009      	beq.n	800a25a <HAL_TIM_PWM_Start+0x13e>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a34      	ldr	r2, [pc, #208]	@ (800a31c <HAL_TIM_PWM_Start+0x200>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d004      	beq.n	800a25a <HAL_TIM_PWM_Start+0x13e>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a32      	ldr	r2, [pc, #200]	@ (800a320 <HAL_TIM_PWM_Start+0x204>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d101      	bne.n	800a25e <HAL_TIM_PWM_Start+0x142>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <HAL_TIM_PWM_Start+0x144>
 800a25e:	2300      	movs	r3, #0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a272:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a25      	ldr	r2, [pc, #148]	@ (800a310 <HAL_TIM_PWM_Start+0x1f4>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d022      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x1a8>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a286:	d01d      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x1a8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a25      	ldr	r2, [pc, #148]	@ (800a324 <HAL_TIM_PWM_Start+0x208>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d018      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x1a8>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a24      	ldr	r2, [pc, #144]	@ (800a328 <HAL_TIM_PWM_Start+0x20c>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d013      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x1a8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a22      	ldr	r2, [pc, #136]	@ (800a32c <HAL_TIM_PWM_Start+0x210>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d00e      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x1a8>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a1a      	ldr	r2, [pc, #104]	@ (800a314 <HAL_TIM_PWM_Start+0x1f8>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d009      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x1a8>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a330 <HAL_TIM_PWM_Start+0x214>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d004      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x1a8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a16      	ldr	r2, [pc, #88]	@ (800a318 <HAL_TIM_PWM_Start+0x1fc>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d115      	bne.n	800a2f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a334 <HAL_TIM_PWM_Start+0x218>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2b06      	cmp	r3, #6
 800a2d4:	d015      	beq.n	800a302 <HAL_TIM_PWM_Start+0x1e6>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2dc:	d011      	beq.n	800a302 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f042 0201 	orr.w	r2, r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ee:	e008      	b.n	800a302 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f042 0201 	orr.w	r2, r2, #1
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	e000      	b.n	800a304 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400
 800a318:	40014000 	.word	0x40014000
 800a31c:	40014400 	.word	0x40014400
 800a320:	40014800 	.word	0x40014800
 800a324:	40000400 	.word	0x40000400
 800a328:	40000800 	.word	0x40000800
 800a32c:	40000c00 	.word	0x40000c00
 800a330:	40001800 	.word	0x40001800
 800a334:	00010007 	.word	0x00010007

0800a338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d122      	bne.n	800a394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d11b      	bne.n	800a394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f06f 0202 	mvn.w	r2, #2
 800a364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fb12 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a380:	e005      	b.n	800a38e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fb04 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fb15 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d122      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d11b      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f06f 0204 	mvn.w	r2, #4
 800a3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2202      	movs	r2, #2
 800a3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fae8 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a3d4:	e005      	b.n	800a3e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fada 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 faeb 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f003 0308 	and.w	r3, r3, #8
 800a3f2:	2b08      	cmp	r3, #8
 800a3f4:	d122      	bne.n	800a43c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f003 0308 	and.w	r3, r3, #8
 800a400:	2b08      	cmp	r3, #8
 800a402:	d11b      	bne.n	800a43c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f06f 0208 	mvn.w	r2, #8
 800a40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2204      	movs	r2, #4
 800a412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fabe 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a428:	e005      	b.n	800a436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fab0 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fac1 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	f003 0310 	and.w	r3, r3, #16
 800a446:	2b10      	cmp	r3, #16
 800a448:	d122      	bne.n	800a490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b10      	cmp	r3, #16
 800a456:	d11b      	bne.n	800a490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f06f 0210 	mvn.w	r2, #16
 800a460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2208      	movs	r2, #8
 800a466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fa94 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a47c:	e005      	b.n	800a48a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fa86 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fa97 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d10e      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d107      	bne.n	800a4bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f06f 0201 	mvn.w	r2, #1
 800a4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7f6 fc7e 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4c6:	2b80      	cmp	r3, #128	@ 0x80
 800a4c8:	d10e      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d4:	2b80      	cmp	r3, #128	@ 0x80
 800a4d6:	d107      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a4e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f001 f888 	bl	800b5f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4f6:	d10e      	bne.n	800a516 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a502:	2b80      	cmp	r3, #128	@ 0x80
 800a504:	d107      	bne.n	800a516 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a50e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 f87b 	bl	800b60c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a520:	2b40      	cmp	r3, #64	@ 0x40
 800a522:	d10e      	bne.n	800a542 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52e:	2b40      	cmp	r3, #64	@ 0x40
 800a530:	d107      	bne.n	800a542 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a53a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fa45 	bl	800a9cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	d10e      	bne.n	800a56e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	d107      	bne.n	800a56e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f06f 0220 	mvn.w	r2, #32
 800a566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 f83b 	bl	800b5e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d101      	bne.n	800a596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a592:	2302      	movs	r3, #2
 800a594:	e0ff      	b.n	800a796 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b14      	cmp	r3, #20
 800a5a2:	f200 80f0 	bhi.w	800a786 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a5a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a601 	.word	0x0800a601
 800a5b0:	0800a787 	.word	0x0800a787
 800a5b4:	0800a787 	.word	0x0800a787
 800a5b8:	0800a787 	.word	0x0800a787
 800a5bc:	0800a641 	.word	0x0800a641
 800a5c0:	0800a787 	.word	0x0800a787
 800a5c4:	0800a787 	.word	0x0800a787
 800a5c8:	0800a787 	.word	0x0800a787
 800a5cc:	0800a683 	.word	0x0800a683
 800a5d0:	0800a787 	.word	0x0800a787
 800a5d4:	0800a787 	.word	0x0800a787
 800a5d8:	0800a787 	.word	0x0800a787
 800a5dc:	0800a6c3 	.word	0x0800a6c3
 800a5e0:	0800a787 	.word	0x0800a787
 800a5e4:	0800a787 	.word	0x0800a787
 800a5e8:	0800a787 	.word	0x0800a787
 800a5ec:	0800a705 	.word	0x0800a705
 800a5f0:	0800a787 	.word	0x0800a787
 800a5f4:	0800a787 	.word	0x0800a787
 800a5f8:	0800a787 	.word	0x0800a787
 800a5fc:	0800a745 	.word	0x0800a745
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68b9      	ldr	r1, [r7, #8]
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fa84 	bl	800ab14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f042 0208 	orr.w	r2, r2, #8
 800a61a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699a      	ldr	r2, [r3, #24]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0204 	bic.w	r2, r2, #4
 800a62a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6999      	ldr	r1, [r3, #24]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	691a      	ldr	r2, [r3, #16]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	430a      	orrs	r2, r1
 800a63c:	619a      	str	r2, [r3, #24]
      break;
 800a63e:	e0a5      	b.n	800a78c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	4618      	mov	r0, r3
 800a648:	f000 faf4 	bl	800ac34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699a      	ldr	r2, [r3, #24]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a65a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a66a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6999      	ldr	r1, [r3, #24]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	021a      	lsls	r2, r3, #8
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	619a      	str	r2, [r3, #24]
      break;
 800a680:	e084      	b.n	800a78c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68b9      	ldr	r1, [r7, #8]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fb5d 	bl	800ad48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0208 	orr.w	r2, r2, #8
 800a69c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69da      	ldr	r2, [r3, #28]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f022 0204 	bic.w	r2, r2, #4
 800a6ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69d9      	ldr	r1, [r3, #28]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	61da      	str	r2, [r3, #28]
      break;
 800a6c0:	e064      	b.n	800a78c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fbc5 	bl	800ae58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69da      	ldr	r2, [r3, #28]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69da      	ldr	r2, [r3, #28]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	69d9      	ldr	r1, [r3, #28]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	021a      	lsls	r2, r3, #8
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	61da      	str	r2, [r3, #28]
      break;
 800a702:	e043      	b.n	800a78c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68b9      	ldr	r1, [r7, #8]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fc0e 	bl	800af2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0208 	orr.w	r2, r2, #8
 800a71e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 0204 	bic.w	r2, r2, #4
 800a72e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	691a      	ldr	r2, [r3, #16]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a742:	e023      	b.n	800a78c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68b9      	ldr	r1, [r7, #8]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fc52 	bl	800aff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a75e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a76e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	021a      	lsls	r2, r3, #8
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a784:	e002      	b.n	800a78c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	75fb      	strb	r3, [r7, #23]
      break;
 800a78a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a794:	7dfb      	ldrb	r3, [r7, #23]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop

0800a7a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d101      	bne.n	800a7bc <HAL_TIM_ConfigClockSource+0x1c>
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e0dc      	b.n	800a976 <HAL_TIM_ConfigClockSource+0x1d6>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	4b6a      	ldr	r3, [pc, #424]	@ (800a980 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a64      	ldr	r2, [pc, #400]	@ (800a984 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	f000 80a9 	beq.w	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a7f8:	4a62      	ldr	r2, [pc, #392]	@ (800a984 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	f200 80ae 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a800:	4a61      	ldr	r2, [pc, #388]	@ (800a988 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a802:	4293      	cmp	r3, r2
 800a804:	f000 80a1 	beq.w	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a808:	4a5f      	ldr	r2, [pc, #380]	@ (800a988 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	f200 80a6 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a810:	4a5e      	ldr	r2, [pc, #376]	@ (800a98c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a812:	4293      	cmp	r3, r2
 800a814:	f000 8099 	beq.w	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a818:	4a5c      	ldr	r2, [pc, #368]	@ (800a98c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	f200 809e 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a820:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a824:	f000 8091 	beq.w	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a828:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a82c:	f200 8096 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a830:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a834:	f000 8089 	beq.w	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a83c:	f200 808e 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a844:	d03e      	beq.n	800a8c4 <HAL_TIM_ConfigClockSource+0x124>
 800a846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a84a:	f200 8087 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a852:	f000 8086 	beq.w	800a962 <HAL_TIM_ConfigClockSource+0x1c2>
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a85a:	d87f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a85c:	2b70      	cmp	r3, #112	@ 0x70
 800a85e:	d01a      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0xf6>
 800a860:	2b70      	cmp	r3, #112	@ 0x70
 800a862:	d87b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a864:	2b60      	cmp	r3, #96	@ 0x60
 800a866:	d050      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x16a>
 800a868:	2b60      	cmp	r3, #96	@ 0x60
 800a86a:	d877      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a86c:	2b50      	cmp	r3, #80	@ 0x50
 800a86e:	d03c      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0x14a>
 800a870:	2b50      	cmp	r3, #80	@ 0x50
 800a872:	d873      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a874:	2b40      	cmp	r3, #64	@ 0x40
 800a876:	d058      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x18a>
 800a878:	2b40      	cmp	r3, #64	@ 0x40
 800a87a:	d86f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a87c:	2b30      	cmp	r3, #48	@ 0x30
 800a87e:	d064      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a880:	2b30      	cmp	r3, #48	@ 0x30
 800a882:	d86b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a884:	2b20      	cmp	r3, #32
 800a886:	d060      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	d867      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d05c      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a890:	2b10      	cmp	r3, #16
 800a892:	d05a      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x1aa>
 800a894:	e062      	b.n	800a95c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8a6:	f000 fc89 	bl	800b1bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	609a      	str	r2, [r3, #8]
      break;
 800a8c2:	e04f      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8d4:	f000 fc72 	bl	800b1bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689a      	ldr	r2, [r3, #8]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8e6:	609a      	str	r2, [r3, #8]
      break;
 800a8e8:	e03c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f000 fbe2 	bl	800b0c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2150      	movs	r1, #80	@ 0x50
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fc3c 	bl	800b180 <TIM_ITRx_SetConfig>
      break;
 800a908:	e02c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a916:	461a      	mov	r2, r3
 800a918:	f000 fc01 	bl	800b11e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2160      	movs	r1, #96	@ 0x60
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fc2c 	bl	800b180 <TIM_ITRx_SetConfig>
      break;
 800a928:	e01c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a936:	461a      	mov	r2, r3
 800a938:	f000 fbc2 	bl	800b0c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2140      	movs	r1, #64	@ 0x40
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fc1c 	bl	800b180 <TIM_ITRx_SetConfig>
      break;
 800a948:	e00c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f000 fc13 	bl	800b180 <TIM_ITRx_SetConfig>
      break;
 800a95a:	e003      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	73fb      	strb	r3, [r7, #15]
      break;
 800a960:	e000      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	ffceff88 	.word	0xffceff88
 800a984:	00100040 	.word	0x00100040
 800a988:	00100030 	.word	0x00100030
 800a98c:	00100020 	.word	0x00100020

0800a990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a40      	ldr	r2, [pc, #256]	@ (800aaf4 <TIM_Base_SetConfig+0x114>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d013      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9fe:	d00f      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a3d      	ldr	r2, [pc, #244]	@ (800aaf8 <TIM_Base_SetConfig+0x118>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d00b      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a3c      	ldr	r2, [pc, #240]	@ (800aafc <TIM_Base_SetConfig+0x11c>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d007      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a3b      	ldr	r2, [pc, #236]	@ (800ab00 <TIM_Base_SetConfig+0x120>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d003      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a3a      	ldr	r2, [pc, #232]	@ (800ab04 <TIM_Base_SetConfig+0x124>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d108      	bne.n	800aa32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a2f      	ldr	r2, [pc, #188]	@ (800aaf4 <TIM_Base_SetConfig+0x114>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d01f      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa40:	d01b      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a2c      	ldr	r2, [pc, #176]	@ (800aaf8 <TIM_Base_SetConfig+0x118>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d017      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a2b      	ldr	r2, [pc, #172]	@ (800aafc <TIM_Base_SetConfig+0x11c>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d013      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a2a      	ldr	r2, [pc, #168]	@ (800ab00 <TIM_Base_SetConfig+0x120>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d00f      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a29      	ldr	r2, [pc, #164]	@ (800ab04 <TIM_Base_SetConfig+0x124>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00b      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a28      	ldr	r2, [pc, #160]	@ (800ab08 <TIM_Base_SetConfig+0x128>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d007      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a27      	ldr	r2, [pc, #156]	@ (800ab0c <TIM_Base_SetConfig+0x12c>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d003      	beq.n	800aa7a <TIM_Base_SetConfig+0x9a>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a26      	ldr	r2, [pc, #152]	@ (800ab10 <TIM_Base_SetConfig+0x130>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d108      	bne.n	800aa8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	689a      	ldr	r2, [r3, #8]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a10      	ldr	r2, [pc, #64]	@ (800aaf4 <TIM_Base_SetConfig+0x114>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00f      	beq.n	800aad8 <TIM_Base_SetConfig+0xf8>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a12      	ldr	r2, [pc, #72]	@ (800ab04 <TIM_Base_SetConfig+0x124>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d00b      	beq.n	800aad8 <TIM_Base_SetConfig+0xf8>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a11      	ldr	r2, [pc, #68]	@ (800ab08 <TIM_Base_SetConfig+0x128>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d007      	beq.n	800aad8 <TIM_Base_SetConfig+0xf8>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a10      	ldr	r2, [pc, #64]	@ (800ab0c <TIM_Base_SetConfig+0x12c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d003      	beq.n	800aad8 <TIM_Base_SetConfig+0xf8>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a0f      	ldr	r2, [pc, #60]	@ (800ab10 <TIM_Base_SetConfig+0x130>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d103      	bne.n	800aae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	691a      	ldr	r2, [r3, #16]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	615a      	str	r2, [r3, #20]
}
 800aae6:	bf00      	nop
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	40010000 	.word	0x40010000
 800aaf8:	40000400 	.word	0x40000400
 800aafc:	40000800 	.word	0x40000800
 800ab00:	40000c00 	.word	0x40000c00
 800ab04:	40010400 	.word	0x40010400
 800ab08:	40014000 	.word	0x40014000
 800ab0c:	40014400 	.word	0x40014400
 800ab10:	40014800 	.word	0x40014800

0800ab14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	f023 0201 	bic.w	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	4b37      	ldr	r3, [pc, #220]	@ (800ac1c <TIM_OC1_SetConfig+0x108>)
 800ab40:	4013      	ands	r3, r2
 800ab42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f023 0303 	bic.w	r3, r3, #3
 800ab4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f023 0302 	bic.w	r3, r3, #2
 800ab5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a2d      	ldr	r2, [pc, #180]	@ (800ac20 <TIM_OC1_SetConfig+0x10c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00f      	beq.n	800ab90 <TIM_OC1_SetConfig+0x7c>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a2c      	ldr	r2, [pc, #176]	@ (800ac24 <TIM_OC1_SetConfig+0x110>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00b      	beq.n	800ab90 <TIM_OC1_SetConfig+0x7c>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a2b      	ldr	r2, [pc, #172]	@ (800ac28 <TIM_OC1_SetConfig+0x114>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d007      	beq.n	800ab90 <TIM_OC1_SetConfig+0x7c>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a2a      	ldr	r2, [pc, #168]	@ (800ac2c <TIM_OC1_SetConfig+0x118>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d003      	beq.n	800ab90 <TIM_OC1_SetConfig+0x7c>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a29      	ldr	r2, [pc, #164]	@ (800ac30 <TIM_OC1_SetConfig+0x11c>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d10c      	bne.n	800abaa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f023 0308 	bic.w	r3, r3, #8
 800ab96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f023 0304 	bic.w	r3, r3, #4
 800aba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a1c      	ldr	r2, [pc, #112]	@ (800ac20 <TIM_OC1_SetConfig+0x10c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d00f      	beq.n	800abd2 <TIM_OC1_SetConfig+0xbe>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a1b      	ldr	r2, [pc, #108]	@ (800ac24 <TIM_OC1_SetConfig+0x110>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d00b      	beq.n	800abd2 <TIM_OC1_SetConfig+0xbe>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a1a      	ldr	r2, [pc, #104]	@ (800ac28 <TIM_OC1_SetConfig+0x114>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d007      	beq.n	800abd2 <TIM_OC1_SetConfig+0xbe>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a19      	ldr	r2, [pc, #100]	@ (800ac2c <TIM_OC1_SetConfig+0x118>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d003      	beq.n	800abd2 <TIM_OC1_SetConfig+0xbe>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a18      	ldr	r2, [pc, #96]	@ (800ac30 <TIM_OC1_SetConfig+0x11c>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d111      	bne.n	800abf6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	4313      	orrs	r3, r2
 800abea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	621a      	str	r2, [r3, #32]
}
 800ac10:	bf00      	nop
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	fffeff8f 	.word	0xfffeff8f
 800ac20:	40010000 	.word	0x40010000
 800ac24:	40010400 	.word	0x40010400
 800ac28:	40014000 	.word	0x40014000
 800ac2c:	40014400 	.word	0x40014400
 800ac30:	40014800 	.word	0x40014800

0800ac34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b087      	sub	sp, #28
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	f023 0210 	bic.w	r2, r3, #16
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	4b34      	ldr	r3, [pc, #208]	@ (800ad30 <TIM_OC2_SetConfig+0xfc>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f023 0320 	bic.w	r3, r3, #32
 800ac7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	011b      	lsls	r3, r3, #4
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a29      	ldr	r2, [pc, #164]	@ (800ad34 <TIM_OC2_SetConfig+0x100>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d003      	beq.n	800ac9c <TIM_OC2_SetConfig+0x68>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a28      	ldr	r2, [pc, #160]	@ (800ad38 <TIM_OC2_SetConfig+0x104>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d10d      	bne.n	800acb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	011b      	lsls	r3, r3, #4
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	4313      	orrs	r3, r2
 800acae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a1e      	ldr	r2, [pc, #120]	@ (800ad34 <TIM_OC2_SetConfig+0x100>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d00f      	beq.n	800ace0 <TIM_OC2_SetConfig+0xac>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a1d      	ldr	r2, [pc, #116]	@ (800ad38 <TIM_OC2_SetConfig+0x104>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00b      	beq.n	800ace0 <TIM_OC2_SetConfig+0xac>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a1c      	ldr	r2, [pc, #112]	@ (800ad3c <TIM_OC2_SetConfig+0x108>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d007      	beq.n	800ace0 <TIM_OC2_SetConfig+0xac>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a1b      	ldr	r2, [pc, #108]	@ (800ad40 <TIM_OC2_SetConfig+0x10c>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d003      	beq.n	800ace0 <TIM_OC2_SetConfig+0xac>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a1a      	ldr	r2, [pc, #104]	@ (800ad44 <TIM_OC2_SetConfig+0x110>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d113      	bne.n	800ad08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ace6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	621a      	str	r2, [r3, #32]
}
 800ad22:	bf00      	nop
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	feff8fff 	.word	0xfeff8fff
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400
 800ad3c:	40014000 	.word	0x40014000
 800ad40:	40014400 	.word	0x40014400
 800ad44:	40014800 	.word	0x40014800

0800ad48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	4b33      	ldr	r3, [pc, #204]	@ (800ae40 <TIM_OC3_SetConfig+0xf8>)
 800ad74:	4013      	ands	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f023 0303 	bic.w	r3, r3, #3
 800ad7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a28      	ldr	r2, [pc, #160]	@ (800ae44 <TIM_OC3_SetConfig+0xfc>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d003      	beq.n	800adae <TIM_OC3_SetConfig+0x66>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a27      	ldr	r2, [pc, #156]	@ (800ae48 <TIM_OC3_SetConfig+0x100>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d10d      	bne.n	800adca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800adb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800adc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a1d      	ldr	r2, [pc, #116]	@ (800ae44 <TIM_OC3_SetConfig+0xfc>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d00f      	beq.n	800adf2 <TIM_OC3_SetConfig+0xaa>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a1c      	ldr	r2, [pc, #112]	@ (800ae48 <TIM_OC3_SetConfig+0x100>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d00b      	beq.n	800adf2 <TIM_OC3_SetConfig+0xaa>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a1b      	ldr	r2, [pc, #108]	@ (800ae4c <TIM_OC3_SetConfig+0x104>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d007      	beq.n	800adf2 <TIM_OC3_SetConfig+0xaa>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a1a      	ldr	r2, [pc, #104]	@ (800ae50 <TIM_OC3_SetConfig+0x108>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d003      	beq.n	800adf2 <TIM_OC3_SetConfig+0xaa>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a19      	ldr	r2, [pc, #100]	@ (800ae54 <TIM_OC3_SetConfig+0x10c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d113      	bne.n	800ae1a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	621a      	str	r2, [r3, #32]
}
 800ae34:	bf00      	nop
 800ae36:	371c      	adds	r7, #28
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	fffeff8f 	.word	0xfffeff8f
 800ae44:	40010000 	.word	0x40010000
 800ae48:	40010400 	.word	0x40010400
 800ae4c:	40014000 	.word	0x40014000
 800ae50:	40014400 	.word	0x40014400
 800ae54:	40014800 	.word	0x40014800

0800ae58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	69db      	ldr	r3, [r3, #28]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	4b24      	ldr	r3, [pc, #144]	@ (800af14 <TIM_OC4_SetConfig+0xbc>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	021b      	lsls	r3, r3, #8
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	031b      	lsls	r3, r3, #12
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a19      	ldr	r2, [pc, #100]	@ (800af18 <TIM_OC4_SetConfig+0xc0>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00f      	beq.n	800aed8 <TIM_OC4_SetConfig+0x80>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a18      	ldr	r2, [pc, #96]	@ (800af1c <TIM_OC4_SetConfig+0xc4>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00b      	beq.n	800aed8 <TIM_OC4_SetConfig+0x80>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a17      	ldr	r2, [pc, #92]	@ (800af20 <TIM_OC4_SetConfig+0xc8>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d007      	beq.n	800aed8 <TIM_OC4_SetConfig+0x80>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a16      	ldr	r2, [pc, #88]	@ (800af24 <TIM_OC4_SetConfig+0xcc>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_OC4_SetConfig+0x80>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a15      	ldr	r2, [pc, #84]	@ (800af28 <TIM_OC4_SetConfig+0xd0>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d109      	bne.n	800aeec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	019b      	lsls	r3, r3, #6
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	621a      	str	r2, [r3, #32]
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	feff8fff 	.word	0xfeff8fff
 800af18:	40010000 	.word	0x40010000
 800af1c:	40010400 	.word	0x40010400
 800af20:	40014000 	.word	0x40014000
 800af24:	40014400 	.word	0x40014400
 800af28:	40014800 	.word	0x40014800

0800af2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4b21      	ldr	r3, [pc, #132]	@ (800afdc <TIM_OC5_SetConfig+0xb0>)
 800af58:	4013      	ands	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	041b      	lsls	r3, r3, #16
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	4313      	orrs	r3, r2
 800af78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a18      	ldr	r2, [pc, #96]	@ (800afe0 <TIM_OC5_SetConfig+0xb4>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00f      	beq.n	800afa2 <TIM_OC5_SetConfig+0x76>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a17      	ldr	r2, [pc, #92]	@ (800afe4 <TIM_OC5_SetConfig+0xb8>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d00b      	beq.n	800afa2 <TIM_OC5_SetConfig+0x76>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a16      	ldr	r2, [pc, #88]	@ (800afe8 <TIM_OC5_SetConfig+0xbc>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d007      	beq.n	800afa2 <TIM_OC5_SetConfig+0x76>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a15      	ldr	r2, [pc, #84]	@ (800afec <TIM_OC5_SetConfig+0xc0>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d003      	beq.n	800afa2 <TIM_OC5_SetConfig+0x76>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a14      	ldr	r2, [pc, #80]	@ (800aff0 <TIM_OC5_SetConfig+0xc4>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d109      	bne.n	800afb6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	021b      	lsls	r3, r3, #8
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	621a      	str	r2, [r3, #32]
}
 800afd0:	bf00      	nop
 800afd2:	371c      	adds	r7, #28
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	fffeff8f 	.word	0xfffeff8f
 800afe0:	40010000 	.word	0x40010000
 800afe4:	40010400 	.word	0x40010400
 800afe8:	40014000 	.word	0x40014000
 800afec:	40014400 	.word	0x40014400
 800aff0:	40014800 	.word	0x40014800

0800aff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	4b22      	ldr	r3, [pc, #136]	@ (800b0a8 <TIM_OC6_SetConfig+0xb4>)
 800b020:	4013      	ands	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	021b      	lsls	r3, r3, #8
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	051b      	lsls	r3, r3, #20
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a19      	ldr	r2, [pc, #100]	@ (800b0ac <TIM_OC6_SetConfig+0xb8>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d00f      	beq.n	800b06c <TIM_OC6_SetConfig+0x78>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a18      	ldr	r2, [pc, #96]	@ (800b0b0 <TIM_OC6_SetConfig+0xbc>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00b      	beq.n	800b06c <TIM_OC6_SetConfig+0x78>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a17      	ldr	r2, [pc, #92]	@ (800b0b4 <TIM_OC6_SetConfig+0xc0>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d007      	beq.n	800b06c <TIM_OC6_SetConfig+0x78>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a16      	ldr	r2, [pc, #88]	@ (800b0b8 <TIM_OC6_SetConfig+0xc4>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d003      	beq.n	800b06c <TIM_OC6_SetConfig+0x78>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a15      	ldr	r2, [pc, #84]	@ (800b0bc <TIM_OC6_SetConfig+0xc8>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d109      	bne.n	800b080 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	695b      	ldr	r3, [r3, #20]
 800b078:	029b      	lsls	r3, r3, #10
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	621a      	str	r2, [r3, #32]
}
 800b09a:	bf00      	nop
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	feff8fff 	.word	0xfeff8fff
 800b0ac:	40010000 	.word	0x40010000
 800b0b0:	40010400 	.word	0x40010400
 800b0b4:	40014000 	.word	0x40014000
 800b0b8:	40014400 	.word	0x40014400
 800b0bc:	40014800 	.word	0x40014800

0800b0c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	f023 0201 	bic.w	r2, r3, #1
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f023 030a 	bic.w	r3, r3, #10
 800b0fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	4313      	orrs	r3, r2
 800b104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	621a      	str	r2, [r3, #32]
}
 800b112:	bf00      	nop
 800b114:	371c      	adds	r7, #28
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b11e:	b480      	push	{r7}
 800b120:	b087      	sub	sp, #28
 800b122:	af00      	add	r7, sp, #0
 800b124:	60f8      	str	r0, [r7, #12]
 800b126:	60b9      	str	r1, [r7, #8]
 800b128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	f023 0210 	bic.w	r2, r3, #16
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6a1b      	ldr	r3, [r3, #32]
 800b140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	031b      	lsls	r3, r3, #12
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	4313      	orrs	r3, r2
 800b152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b15a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	4313      	orrs	r3, r2
 800b164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	621a      	str	r2, [r3, #32]
}
 800b172:	bf00      	nop
 800b174:	371c      	adds	r7, #28
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
	...

0800b180 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	4b09      	ldr	r3, [pc, #36]	@ (800b1b8 <TIM_ITRx_SetConfig+0x38>)
 800b194:	4013      	ands	r3, r2
 800b196:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	f043 0307 	orr.w	r3, r3, #7
 800b1a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	609a      	str	r2, [r3, #8]
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	ffcfff8f 	.word	0xffcfff8f

0800b1bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b087      	sub	sp, #28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	021a      	lsls	r2, r3, #8
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	609a      	str	r2, [r3, #8]
}
 800b1f0:	bf00      	nop
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f003 031f 	and.w	r3, r3, #31
 800b20e:	2201      	movs	r2, #1
 800b210:	fa02 f303 	lsl.w	r3, r2, r3
 800b214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6a1a      	ldr	r2, [r3, #32]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	43db      	mvns	r3, r3
 800b21e:	401a      	ands	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6a1a      	ldr	r2, [r3, #32]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	f003 031f 	and.w	r3, r3, #31
 800b22e:	6879      	ldr	r1, [r7, #4]
 800b230:	fa01 f303 	lsl.w	r3, r1, r3
 800b234:	431a      	orrs	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	621a      	str	r2, [r3, #32]
}
 800b23a:	bf00      	nop
 800b23c:	371c      	adds	r7, #28
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
	...

0800b248 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d109      	bne.n	800b26c <HAL_TIMEx_PWMN_Start+0x24>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b01      	cmp	r3, #1
 800b262:	bf14      	ite	ne
 800b264:	2301      	movne	r3, #1
 800b266:	2300      	moveq	r3, #0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	e022      	b.n	800b2b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d109      	bne.n	800b286 <HAL_TIMEx_PWMN_Start+0x3e>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	bf14      	ite	ne
 800b27e:	2301      	movne	r3, #1
 800b280:	2300      	moveq	r3, #0
 800b282:	b2db      	uxtb	r3, r3
 800b284:	e015      	b.n	800b2b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d109      	bne.n	800b2a0 <HAL_TIMEx_PWMN_Start+0x58>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b01      	cmp	r3, #1
 800b296:	bf14      	ite	ne
 800b298:	2301      	movne	r3, #1
 800b29a:	2300      	moveq	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	e008      	b.n	800b2b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	bf14      	ite	ne
 800b2ac:	2301      	movne	r3, #1
 800b2ae:	2300      	moveq	r3, #0
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e073      	b.n	800b3a2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <HAL_TIMEx_PWMN_Start+0x82>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2c8:	e013      	b.n	800b2f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	d104      	bne.n	800b2da <HAL_TIMEx_PWMN_Start+0x92>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2d8:	e00b      	b.n	800b2f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b08      	cmp	r3, #8
 800b2de:	d104      	bne.n	800b2ea <HAL_TIMEx_PWMN_Start+0xa2>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2e8:	e003      	b.n	800b2f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 f990 	bl	800b620 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b30e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a25      	ldr	r2, [pc, #148]	@ (800b3ac <HAL_TIMEx_PWMN_Start+0x164>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d022      	beq.n	800b360 <HAL_TIMEx_PWMN_Start+0x118>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b322:	d01d      	beq.n	800b360 <HAL_TIMEx_PWMN_Start+0x118>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a21      	ldr	r2, [pc, #132]	@ (800b3b0 <HAL_TIMEx_PWMN_Start+0x168>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d018      	beq.n	800b360 <HAL_TIMEx_PWMN_Start+0x118>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a20      	ldr	r2, [pc, #128]	@ (800b3b4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d013      	beq.n	800b360 <HAL_TIMEx_PWMN_Start+0x118>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a1e      	ldr	r2, [pc, #120]	@ (800b3b8 <HAL_TIMEx_PWMN_Start+0x170>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d00e      	beq.n	800b360 <HAL_TIMEx_PWMN_Start+0x118>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a1d      	ldr	r2, [pc, #116]	@ (800b3bc <HAL_TIMEx_PWMN_Start+0x174>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d009      	beq.n	800b360 <HAL_TIMEx_PWMN_Start+0x118>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a1b      	ldr	r2, [pc, #108]	@ (800b3c0 <HAL_TIMEx_PWMN_Start+0x178>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d004      	beq.n	800b360 <HAL_TIMEx_PWMN_Start+0x118>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a1a      	ldr	r2, [pc, #104]	@ (800b3c4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d115      	bne.n	800b38c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	4b18      	ldr	r3, [pc, #96]	@ (800b3c8 <HAL_TIMEx_PWMN_Start+0x180>)
 800b368:	4013      	ands	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b06      	cmp	r3, #6
 800b370:	d015      	beq.n	800b39e <HAL_TIMEx_PWMN_Start+0x156>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b378:	d011      	beq.n	800b39e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f042 0201 	orr.w	r2, r2, #1
 800b388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b38a:	e008      	b.n	800b39e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f042 0201 	orr.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	e000      	b.n	800b3a0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	40010000 	.word	0x40010000
 800b3b0:	40000400 	.word	0x40000400
 800b3b4:	40000800 	.word	0x40000800
 800b3b8:	40000c00 	.word	0x40000c00
 800b3bc:	40010400 	.word	0x40010400
 800b3c0:	40001800 	.word	0x40001800
 800b3c4:	40014000 	.word	0x40014000
 800b3c8:	00010007 	.word	0x00010007

0800b3cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d101      	bne.n	800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	e06d      	b.n	800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a30      	ldr	r2, [pc, #192]	@ (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d004      	beq.n	800b418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a2f      	ldr	r2, [pc, #188]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d108      	bne.n	800b42a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b41e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b430:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4313      	orrs	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a20      	ldr	r2, [pc, #128]	@ (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d022      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b456:	d01d      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a1d      	ldr	r2, [pc, #116]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d018      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a1c      	ldr	r2, [pc, #112]	@ (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d013      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a1a      	ldr	r2, [pc, #104]	@ (800b4dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00e      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a15      	ldr	r2, [pc, #84]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d009      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a16      	ldr	r2, [pc, #88]	@ (800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d004      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a15      	ldr	r2, [pc, #84]	@ (800b4e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d10c      	bne.n	800b4ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b49a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	40010000 	.word	0x40010000
 800b4d0:	40010400 	.word	0x40010400
 800b4d4:	40000400 	.word	0x40000400
 800b4d8:	40000800 	.word	0x40000800
 800b4dc:	40000c00 	.word	0x40000c00
 800b4e0:	40001800 	.word	0x40001800
 800b4e4:	40014000 	.word	0x40014000

0800b4e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b500:	2302      	movs	r3, #2
 800b502:	e065      	b.n	800b5d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	4313      	orrs	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	041b      	lsls	r3, r3, #16
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a16      	ldr	r2, [pc, #88]	@ (800b5dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d004      	beq.n	800b592 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a14      	ldr	r2, [pc, #80]	@ (800b5e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d115      	bne.n	800b5be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59c:	051b      	lsls	r3, r3, #20
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	40010000 	.word	0x40010000
 800b5e0:	40010400 	.word	0x40010400

0800b5e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f003 031f 	and.w	r3, r3, #31
 800b632:	2204      	movs	r2, #4
 800b634:	fa02 f303 	lsl.w	r3, r2, r3
 800b638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a1a      	ldr	r2, [r3, #32]
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	43db      	mvns	r3, r3
 800b642:	401a      	ands	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a1a      	ldr	r2, [r3, #32]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f003 031f 	and.w	r3, r3, #31
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	fa01 f303 	lsl.w	r3, r1, r3
 800b658:	431a      	orrs	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	621a      	str	r2, [r3, #32]
}
 800b65e:	bf00      	nop
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
	...

0800b66c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b66c:	b084      	sub	sp, #16
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	f107 001c 	add.w	r0, r7, #28
 800b67a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	2b01      	cmp	r3, #1
 800b682:	d120      	bne.n	800b6c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b688:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	4b2a      	ldr	r3, [pc, #168]	@ (800b740 <USB_CoreInit+0xd4>)
 800b696:	4013      	ands	r3, r2
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d105      	bne.n	800b6ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f001 faf8 	bl	800ccb0 <USB_CoreReset>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
 800b6c4:	e01a      	b.n	800b6fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f001 faec 	bl	800ccb0 <USB_CoreReset>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b6dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	639a      	str	r2, [r3, #56]	@ 0x38
 800b6ee:	e005      	b.n	800b6fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d116      	bne.n	800b730 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b706:	b29a      	uxth	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b710:	4b0c      	ldr	r3, [pc, #48]	@ (800b744 <USB_CoreInit+0xd8>)
 800b712:	4313      	orrs	r3, r2
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f043 0206 	orr.w	r2, r3, #6
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	f043 0220 	orr.w	r2, r3, #32
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b73c:	b004      	add	sp, #16
 800b73e:	4770      	bx	lr
 800b740:	ffbdffbf 	.word	0xffbdffbf
 800b744:	03ee0000 	.word	0x03ee0000

0800b748 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4613      	mov	r3, r2
 800b754:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d165      	bne.n	800b828 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	4a41      	ldr	r2, [pc, #260]	@ (800b864 <USB_SetTurnaroundTime+0x11c>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d906      	bls.n	800b772 <USB_SetTurnaroundTime+0x2a>
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4a40      	ldr	r2, [pc, #256]	@ (800b868 <USB_SetTurnaroundTime+0x120>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d202      	bcs.n	800b772 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b76c:	230f      	movs	r3, #15
 800b76e:	617b      	str	r3, [r7, #20]
 800b770:	e062      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	4a3c      	ldr	r2, [pc, #240]	@ (800b868 <USB_SetTurnaroundTime+0x120>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d306      	bcc.n	800b788 <USB_SetTurnaroundTime+0x40>
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	4a3b      	ldr	r2, [pc, #236]	@ (800b86c <USB_SetTurnaroundTime+0x124>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d202      	bcs.n	800b788 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b782:	230e      	movs	r3, #14
 800b784:	617b      	str	r3, [r7, #20]
 800b786:	e057      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	4a38      	ldr	r2, [pc, #224]	@ (800b86c <USB_SetTurnaroundTime+0x124>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d306      	bcc.n	800b79e <USB_SetTurnaroundTime+0x56>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4a37      	ldr	r2, [pc, #220]	@ (800b870 <USB_SetTurnaroundTime+0x128>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d202      	bcs.n	800b79e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b798:	230d      	movs	r3, #13
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	e04c      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	4a33      	ldr	r2, [pc, #204]	@ (800b870 <USB_SetTurnaroundTime+0x128>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d306      	bcc.n	800b7b4 <USB_SetTurnaroundTime+0x6c>
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	4a32      	ldr	r2, [pc, #200]	@ (800b874 <USB_SetTurnaroundTime+0x12c>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d802      	bhi.n	800b7b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	617b      	str	r3, [r7, #20]
 800b7b2:	e041      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	4a2f      	ldr	r2, [pc, #188]	@ (800b874 <USB_SetTurnaroundTime+0x12c>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d906      	bls.n	800b7ca <USB_SetTurnaroundTime+0x82>
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	4a2e      	ldr	r2, [pc, #184]	@ (800b878 <USB_SetTurnaroundTime+0x130>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d802      	bhi.n	800b7ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b7c4:	230b      	movs	r3, #11
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	e036      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	4a2a      	ldr	r2, [pc, #168]	@ (800b878 <USB_SetTurnaroundTime+0x130>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d906      	bls.n	800b7e0 <USB_SetTurnaroundTime+0x98>
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	4a29      	ldr	r2, [pc, #164]	@ (800b87c <USB_SetTurnaroundTime+0x134>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d802      	bhi.n	800b7e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b7da:	230a      	movs	r3, #10
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e02b      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	4a26      	ldr	r2, [pc, #152]	@ (800b87c <USB_SetTurnaroundTime+0x134>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d906      	bls.n	800b7f6 <USB_SetTurnaroundTime+0xae>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4a25      	ldr	r2, [pc, #148]	@ (800b880 <USB_SetTurnaroundTime+0x138>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d202      	bcs.n	800b7f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b7f0:	2309      	movs	r3, #9
 800b7f2:	617b      	str	r3, [r7, #20]
 800b7f4:	e020      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	4a21      	ldr	r2, [pc, #132]	@ (800b880 <USB_SetTurnaroundTime+0x138>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d306      	bcc.n	800b80c <USB_SetTurnaroundTime+0xc4>
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	4a20      	ldr	r2, [pc, #128]	@ (800b884 <USB_SetTurnaroundTime+0x13c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d802      	bhi.n	800b80c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b806:	2308      	movs	r3, #8
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	e015      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	4a1d      	ldr	r2, [pc, #116]	@ (800b884 <USB_SetTurnaroundTime+0x13c>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d906      	bls.n	800b822 <USB_SetTurnaroundTime+0xda>
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	4a1c      	ldr	r2, [pc, #112]	@ (800b888 <USB_SetTurnaroundTime+0x140>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d202      	bcs.n	800b822 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b81c:	2307      	movs	r3, #7
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	e00a      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b822:	2306      	movs	r3, #6
 800b824:	617b      	str	r3, [r7, #20]
 800b826:	e007      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d102      	bne.n	800b834 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b82e:	2309      	movs	r3, #9
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	e001      	b.n	800b838 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b834:	2309      	movs	r3, #9
 800b836:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	029b      	lsls	r3, r3, #10
 800b84c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b850:	431a      	orrs	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	371c      	adds	r7, #28
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	00d8acbf 	.word	0x00d8acbf
 800b868:	00e4e1c0 	.word	0x00e4e1c0
 800b86c:	00f42400 	.word	0x00f42400
 800b870:	01067380 	.word	0x01067380
 800b874:	011a499f 	.word	0x011a499f
 800b878:	01312cff 	.word	0x01312cff
 800b87c:	014ca43f 	.word	0x014ca43f
 800b880:	016e3600 	.word	0x016e3600
 800b884:	01a6ab1f 	.word	0x01a6ab1f
 800b888:	01e84800 	.word	0x01e84800

0800b88c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	f043 0201 	orr.w	r2, r3, #1
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr

0800b8ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f023 0201 	bic.w	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8ec:	78fb      	ldrb	r3, [r7, #3]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d115      	bne.n	800b91e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b8fe:	2001      	movs	r0, #1
 800b900:	f7f5 ffc4 	bl	800188c <HAL_Delay>
      ms++;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	3301      	adds	r3, #1
 800b908:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 f93f 	bl	800cb8e <USB_GetMode>
 800b910:	4603      	mov	r3, r0
 800b912:	2b01      	cmp	r3, #1
 800b914:	d01e      	beq.n	800b954 <USB_SetCurrentMode+0x84>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b31      	cmp	r3, #49	@ 0x31
 800b91a:	d9f0      	bls.n	800b8fe <USB_SetCurrentMode+0x2e>
 800b91c:	e01a      	b.n	800b954 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b91e:	78fb      	ldrb	r3, [r7, #3]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d115      	bne.n	800b950 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b930:	2001      	movs	r0, #1
 800b932:	f7f5 ffab 	bl	800188c <HAL_Delay>
      ms++;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3301      	adds	r3, #1
 800b93a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 f926 	bl	800cb8e <USB_GetMode>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <USB_SetCurrentMode+0x84>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b31      	cmp	r3, #49	@ 0x31
 800b94c:	d9f0      	bls.n	800b930 <USB_SetCurrentMode+0x60>
 800b94e:	e001      	b.n	800b954 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e005      	b.n	800b960 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b32      	cmp	r3, #50	@ 0x32
 800b958:	d101      	bne.n	800b95e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b968:	b084      	sub	sp, #16
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b086      	sub	sp, #24
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b982:	2300      	movs	r3, #0
 800b984:	613b      	str	r3, [r7, #16]
 800b986:	e009      	b.n	800b99c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	3340      	adds	r3, #64	@ 0x40
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	2200      	movs	r2, #0
 800b994:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	3301      	adds	r3, #1
 800b99a:	613b      	str	r3, [r7, #16]
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	2b0e      	cmp	r3, #14
 800b9a0:	d9f2      	bls.n	800b988 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b9a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d11c      	bne.n	800b9e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9b6:	f043 0302 	orr.w	r3, r3, #2
 800b9ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	e005      	b.n	800b9ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba00:	4619      	mov	r1, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba08:	461a      	mov	r2, r3
 800ba0a:	680b      	ldr	r3, [r1, #0]
 800ba0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d10c      	bne.n	800ba2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ba14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d104      	bne.n	800ba24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f965 	bl	800bcec <USB_SetDevSpeed>
 800ba22:	e008      	b.n	800ba36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba24:	2101      	movs	r1, #1
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f960 	bl	800bcec <USB_SetDevSpeed>
 800ba2c:	e003      	b.n	800ba36 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba2e:	2103      	movs	r1, #3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f95b 	bl	800bcec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba36:	2110      	movs	r1, #16
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f8f3 	bl	800bc24 <USB_FlushTxFifo>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f91f 	bl	800bc8c <USB_FlushRxFifo>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba5e:	461a      	mov	r2, r3
 800ba60:	2300      	movs	r3, #0
 800ba62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba76:	461a      	mov	r2, r3
 800ba78:	2300      	movs	r3, #0
 800ba7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	613b      	str	r3, [r7, #16]
 800ba80:	e043      	b.n	800bb0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	015a      	lsls	r2, r3, #5
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	4413      	add	r3, r2
 800ba8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba98:	d118      	bne.n	800bacc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baac:	461a      	mov	r2, r3
 800baae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bab2:	6013      	str	r3, [r2, #0]
 800bab4:	e013      	b.n	800bade <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac2:	461a      	mov	r2, r3
 800bac4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	e008      	b.n	800bade <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4413      	add	r3, r2
 800bad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bad8:	461a      	mov	r2, r3
 800bada:	2300      	movs	r3, #0
 800badc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baea:	461a      	mov	r2, r3
 800baec:	2300      	movs	r3, #0
 800baee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bafc:	461a      	mov	r2, r3
 800bafe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	3301      	adds	r3, #1
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d3b7      	bcc.n	800ba82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb12:	2300      	movs	r3, #0
 800bb14:	613b      	str	r3, [r7, #16]
 800bb16:	e043      	b.n	800bba0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	015a      	lsls	r2, r3, #5
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4413      	add	r3, r2
 800bb20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb2e:	d118      	bne.n	800bb62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10a      	bne.n	800bb4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb42:	461a      	mov	r2, r3
 800bb44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb48:	6013      	str	r3, [r2, #0]
 800bb4a:	e013      	b.n	800bb74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb58:	461a      	mov	r2, r3
 800bb5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	e008      	b.n	800bb74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb6e:	461a      	mov	r2, r3
 800bb70:	2300      	movs	r3, #0
 800bb72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	015a      	lsls	r2, r3, #5
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb80:	461a      	mov	r2, r3
 800bb82:	2300      	movs	r3, #0
 800bb84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	015a      	lsls	r2, r3, #5
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb92:	461a      	mov	r2, r3
 800bb94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d3b7      	bcc.n	800bb18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bbc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d105      	bne.n	800bbdc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	f043 0210 	orr.w	r2, r3, #16
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	699a      	ldr	r2, [r3, #24]
 800bbe0:	4b0e      	ldr	r3, [pc, #56]	@ (800bc1c <USB_DevInit+0x2b4>)
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d005      	beq.n	800bbfa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	f043 0208 	orr.w	r2, r3, #8
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d105      	bne.n	800bc0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	699a      	ldr	r2, [r3, #24]
 800bc04:	4b06      	ldr	r3, [pc, #24]	@ (800bc20 <USB_DevInit+0x2b8>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc18:	b004      	add	sp, #16
 800bc1a:	4770      	bx	lr
 800bc1c:	803c3800 	.word	0x803c3800
 800bc20:	40000004 	.word	0x40000004

0800bc24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3301      	adds	r3, #1
 800bc36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	4a13      	ldr	r2, [pc, #76]	@ (800bc88 <USB_FlushTxFifo+0x64>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d901      	bls.n	800bc44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bc40:	2303      	movs	r3, #3
 800bc42:	e01b      	b.n	800bc7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	daf2      	bge.n	800bc32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	019b      	lsls	r3, r3, #6
 800bc54:	f043 0220 	orr.w	r2, r3, #32
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4a08      	ldr	r2, [pc, #32]	@ (800bc88 <USB_FlushTxFifo+0x64>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d901      	bls.n	800bc6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e006      	b.n	800bc7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	d0f0      	beq.n	800bc5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	00030d40 	.word	0x00030d40

0800bc8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4a11      	ldr	r2, [pc, #68]	@ (800bce8 <USB_FlushRxFifo+0x5c>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d901      	bls.n	800bcaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e018      	b.n	800bcdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	daf2      	bge.n	800bc98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2210      	movs	r2, #16
 800bcba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4a08      	ldr	r2, [pc, #32]	@ (800bce8 <USB_FlushRxFifo+0x5c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d901      	bls.n	800bcce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e006      	b.n	800bcdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	f003 0310 	and.w	r3, r3, #16
 800bcd6:	2b10      	cmp	r3, #16
 800bcd8:	d0f0      	beq.n	800bcbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	00030d40 	.word	0x00030d40

0800bcec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	78fb      	ldrb	r3, [r7, #3]
 800bd06:	68f9      	ldr	r1, [r7, #12]
 800bd08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b087      	sub	sp, #28
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	f003 0306 	and.w	r3, r3, #6
 800bd36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d102      	bne.n	800bd44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	75fb      	strb	r3, [r7, #23]
 800bd42:	e00a      	b.n	800bd5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d002      	beq.n	800bd50 <USB_GetDevSpeed+0x32>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b06      	cmp	r3, #6
 800bd4e:	d102      	bne.n	800bd56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd50:	2302      	movs	r3, #2
 800bd52:	75fb      	strb	r3, [r7, #23]
 800bd54:	e001      	b.n	800bd5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd56:	230f      	movs	r3, #15
 800bd58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	785b      	ldrb	r3, [r3, #1]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d139      	bne.n	800bdf8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd8a:	69da      	ldr	r2, [r3, #28]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	f003 030f 	and.w	r3, r3, #15
 800bd94:	2101      	movs	r1, #1
 800bd96:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	68f9      	ldr	r1, [r7, #12]
 800bd9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bda2:	4313      	orrs	r3, r2
 800bda4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	015a      	lsls	r2, r3, #5
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	4413      	add	r3, r2
 800bdae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d153      	bne.n	800be64 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	791b      	ldrb	r3, [r3, #4]
 800bdd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bdd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	059b      	lsls	r3, r3, #22
 800bdde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bde0:	431a      	orrs	r2, r3
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	0159      	lsls	r1, r3, #5
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	440b      	add	r3, r1
 800bdea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdee:	4619      	mov	r1, r3
 800bdf0:	4b20      	ldr	r3, [pc, #128]	@ (800be74 <USB_ActivateEndpoint+0x10c>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	600b      	str	r3, [r1, #0]
 800bdf6:	e035      	b.n	800be64 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdfe:	69da      	ldr	r2, [r3, #28]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	2101      	movs	r1, #1
 800be0a:	fa01 f303 	lsl.w	r3, r1, r3
 800be0e:	041b      	lsls	r3, r3, #16
 800be10:	68f9      	ldr	r1, [r7, #12]
 800be12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be16:	4313      	orrs	r3, r2
 800be18:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	015a      	lsls	r2, r3, #5
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	4413      	add	r3, r2
 800be22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d119      	bne.n	800be64 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	791b      	ldrb	r3, [r3, #4]
 800be4a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be4c:	430b      	orrs	r3, r1
 800be4e:	431a      	orrs	r2, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	0159      	lsls	r1, r3, #5
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	440b      	add	r3, r1
 800be58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be5c:	4619      	mov	r1, r3
 800be5e:	4b05      	ldr	r3, [pc, #20]	@ (800be74 <USB_ActivateEndpoint+0x10c>)
 800be60:	4313      	orrs	r3, r2
 800be62:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	10008000 	.word	0x10008000

0800be78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	785b      	ldrb	r3, [r3, #1]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d161      	bne.n	800bf58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bea6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800beaa:	d11f      	bne.n	800beec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	015a      	lsls	r2, r3, #5
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	4413      	add	r3, r2
 800beb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	0151      	lsls	r1, r2, #5
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	440a      	add	r2, r1
 800bec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bec6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800beca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	0151      	lsls	r1, r2, #5
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	440a      	add	r2, r1
 800bee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bee6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800beea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	f003 030f 	and.w	r3, r3, #15
 800befc:	2101      	movs	r1, #1
 800befe:	fa01 f303 	lsl.w	r3, r1, r3
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	43db      	mvns	r3, r3
 800bf06:	68f9      	ldr	r1, [r7, #12]
 800bf08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf16:	69da      	ldr	r2, [r3, #28]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	2101      	movs	r1, #1
 800bf22:	fa01 f303 	lsl.w	r3, r1, r3
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	43db      	mvns	r3, r3
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf30:	4013      	ands	r3, r2
 800bf32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	0159      	lsls	r1, r3, #5
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	440b      	add	r3, r1
 800bf4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf4e:	4619      	mov	r1, r3
 800bf50:	4b35      	ldr	r3, [pc, #212]	@ (800c028 <USB_DeactivateEndpoint+0x1b0>)
 800bf52:	4013      	ands	r3, r2
 800bf54:	600b      	str	r3, [r1, #0]
 800bf56:	e060      	b.n	800c01a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf6e:	d11f      	bne.n	800bfb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	0151      	lsls	r1, r2, #5
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	440a      	add	r2, r1
 800bf86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bfae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 030f 	and.w	r3, r3, #15
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	fa01 f303 	lsl.w	r3, r1, r3
 800bfc6:	041b      	lsls	r3, r3, #16
 800bfc8:	43db      	mvns	r3, r3
 800bfca:	68f9      	ldr	r1, [r7, #12]
 800bfcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfda:	69da      	ldr	r2, [r3, #28]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfea:	041b      	lsls	r3, r3, #16
 800bfec:	43db      	mvns	r3, r3
 800bfee:	68f9      	ldr	r1, [r7, #12]
 800bff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bff4:	4013      	ands	r3, r2
 800bff6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	015a      	lsls	r2, r3, #5
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4413      	add	r3, r2
 800c000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	0159      	lsls	r1, r3, #5
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	440b      	add	r3, r1
 800c00e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c012:	4619      	mov	r1, r3
 800c014:	4b05      	ldr	r3, [pc, #20]	@ (800c02c <USB_DeactivateEndpoint+0x1b4>)
 800c016:	4013      	ands	r3, r2
 800c018:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	ec337800 	.word	0xec337800
 800c02c:	eff37800 	.word	0xeff37800

0800c030 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b08a      	sub	sp, #40	@ 0x28
 800c034:	af02      	add	r7, sp, #8
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	4613      	mov	r3, r2
 800c03c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	785b      	ldrb	r3, [r3, #1]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	f040 8181 	bne.w	800c354 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d132      	bne.n	800c0c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	015a      	lsls	r2, r3, #5
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	4413      	add	r3, r2
 800c062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c066:	691a      	ldr	r2, [r3, #16]
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	0159      	lsls	r1, r3, #5
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	440b      	add	r3, r1
 800c070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c074:	4619      	mov	r1, r3
 800c076:	4ba5      	ldr	r3, [pc, #660]	@ (800c30c <USB_EPStartXfer+0x2dc>)
 800c078:	4013      	ands	r3, r2
 800c07a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	69ba      	ldr	r2, [r7, #24]
 800c08c:	0151      	lsls	r1, r2, #5
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	440a      	add	r2, r1
 800c092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c096:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c09a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0a8:	691a      	ldr	r2, [r3, #16]
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	0159      	lsls	r1, r3, #5
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	440b      	add	r3, r1
 800c0b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4b95      	ldr	r3, [pc, #596]	@ (800c310 <USB_EPStartXfer+0x2e0>)
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	610b      	str	r3, [r1, #16]
 800c0be:	e092      	b.n	800c1e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0cc:	691a      	ldr	r2, [r3, #16]
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	0159      	lsls	r1, r3, #5
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	440b      	add	r3, r1
 800c0d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0da:	4619      	mov	r1, r3
 800c0dc:	4b8c      	ldr	r3, [pc, #560]	@ (800c310 <USB_EPStartXfer+0x2e0>)
 800c0de:	4013      	ands	r3, r2
 800c0e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0ee:	691a      	ldr	r2, [r3, #16]
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	0159      	lsls	r1, r3, #5
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	440b      	add	r3, r1
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4b83      	ldr	r3, [pc, #524]	@ (800c30c <USB_EPStartXfer+0x2dc>)
 800c100:	4013      	ands	r3, r2
 800c102:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d11a      	bne.n	800c140 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	691a      	ldr	r2, [r3, #16]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	429a      	cmp	r2, r3
 800c114:	d903      	bls.n	800c11e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	689a      	ldr	r2, [r3, #8]
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	015a      	lsls	r2, r3, #5
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	4413      	add	r3, r2
 800c126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	69ba      	ldr	r2, [r7, #24]
 800c12e:	0151      	lsls	r1, r2, #5
 800c130:	69fa      	ldr	r2, [r7, #28]
 800c132:	440a      	add	r2, r1
 800c134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c13c:	6113      	str	r3, [r2, #16]
 800c13e:	e01b      	b.n	800c178 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c14c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	6919      	ldr	r1, [r3, #16]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	440b      	add	r3, r1
 800c158:	1e59      	subs	r1, r3, #1
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c162:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c164:	4b6b      	ldr	r3, [pc, #428]	@ (800c314 <USB_EPStartXfer+0x2e4>)
 800c166:	400b      	ands	r3, r1
 800c168:	69b9      	ldr	r1, [r7, #24]
 800c16a:	0148      	lsls	r0, r1, #5
 800c16c:	69f9      	ldr	r1, [r7, #28]
 800c16e:	4401      	add	r1, r0
 800c170:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c174:	4313      	orrs	r3, r2
 800c176:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	015a      	lsls	r2, r3, #5
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	4413      	add	r3, r2
 800c180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c184:	691a      	ldr	r2, [r3, #16]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c18e:	69b9      	ldr	r1, [r7, #24]
 800c190:	0148      	lsls	r0, r1, #5
 800c192:	69f9      	ldr	r1, [r7, #28]
 800c194:	4401      	add	r1, r0
 800c196:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c19a:	4313      	orrs	r3, r2
 800c19c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	791b      	ldrb	r3, [r3, #4]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d11f      	bne.n	800c1e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	0151      	lsls	r1, r2, #5
 800c1b8:	69fa      	ldr	r2, [r7, #28]
 800c1ba:	440a      	add	r2, r1
 800c1bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1c0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c1c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	69ba      	ldr	r2, [r7, #24]
 800c1d6:	0151      	lsls	r1, r2, #5
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	440a      	add	r2, r1
 800c1dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c1e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d14b      	bne.n	800c284 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d009      	beq.n	800c208 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	015a      	lsls	r2, r3, #5
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c200:	461a      	mov	r2, r3
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	791b      	ldrb	r3, [r3, #4]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d128      	bne.n	800c262 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d110      	bne.n	800c242 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	0151      	lsls	r1, r2, #5
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	440a      	add	r2, r1
 800c236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c23a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	e00f      	b.n	800c262 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	015a      	lsls	r2, r3, #5
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	4413      	add	r3, r2
 800c24a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	0151      	lsls	r1, r2, #5
 800c254:	69fa      	ldr	r2, [r7, #28]
 800c256:	440a      	add	r2, r1
 800c258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c25c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c260:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	0151      	lsls	r1, r2, #5
 800c274:	69fa      	ldr	r2, [r7, #28]
 800c276:	440a      	add	r2, r1
 800c278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c27c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c280:	6013      	str	r3, [r2, #0]
 800c282:	e16a      	b.n	800c55a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	0151      	lsls	r1, r2, #5
 800c296:	69fa      	ldr	r2, [r7, #28]
 800c298:	440a      	add	r2, r1
 800c29a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c29e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c2a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	791b      	ldrb	r3, [r3, #4]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d015      	beq.n	800c2d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 8152 	beq.w	800c55a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	f003 030f 	and.w	r3, r3, #15
 800c2c6:	2101      	movs	r1, #1
 800c2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c2cc:	69f9      	ldr	r1, [r7, #28]
 800c2ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	634b      	str	r3, [r1, #52]	@ 0x34
 800c2d6:	e140      	b.n	800c55a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d117      	bne.n	800c318 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	0151      	lsls	r1, r2, #5
 800c2fa:	69fa      	ldr	r2, [r7, #28]
 800c2fc:	440a      	add	r2, r1
 800c2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c302:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c306:	6013      	str	r3, [r2, #0]
 800c308:	e016      	b.n	800c338 <USB_EPStartXfer+0x308>
 800c30a:	bf00      	nop
 800c30c:	e007ffff 	.word	0xe007ffff
 800c310:	fff80000 	.word	0xfff80000
 800c314:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	69ba      	ldr	r2, [r7, #24]
 800c328:	0151      	lsls	r1, r2, #5
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	440a      	add	r2, r1
 800c32e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c336:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	68d9      	ldr	r1, [r3, #12]
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	b298      	uxth	r0, r3
 800c346:	79fb      	ldrb	r3, [r7, #7]
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	4603      	mov	r3, r0
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 f9b9 	bl	800c6c4 <USB_WritePacket>
 800c352:	e102      	b.n	800c55a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c360:	691a      	ldr	r2, [r3, #16]
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	0159      	lsls	r1, r3, #5
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	440b      	add	r3, r1
 800c36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c36e:	4619      	mov	r1, r3
 800c370:	4b7c      	ldr	r3, [pc, #496]	@ (800c564 <USB_EPStartXfer+0x534>)
 800c372:	4013      	ands	r3, r2
 800c374:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	015a      	lsls	r2, r3, #5
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	4413      	add	r3, r2
 800c37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c382:	691a      	ldr	r2, [r3, #16]
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	0159      	lsls	r1, r3, #5
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	440b      	add	r3, r1
 800c38c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c390:	4619      	mov	r1, r3
 800c392:	4b75      	ldr	r3, [pc, #468]	@ (800c568 <USB_EPStartXfer+0x538>)
 800c394:	4013      	ands	r3, r2
 800c396:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d12f      	bne.n	800c3fe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	689a      	ldr	r2, [r3, #8]
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	689a      	ldr	r2, [r3, #8]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3c2:	691a      	ldr	r2, [r3, #16]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	6a1b      	ldr	r3, [r3, #32]
 800c3c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3cc:	69b9      	ldr	r1, [r7, #24]
 800c3ce:	0148      	lsls	r0, r1, #5
 800c3d0:	69f9      	ldr	r1, [r7, #28]
 800c3d2:	4401      	add	r1, r0
 800c3d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	015a      	lsls	r2, r3, #5
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	69ba      	ldr	r2, [r7, #24]
 800c3ec:	0151      	lsls	r1, r2, #5
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	440a      	add	r2, r1
 800c3f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c3fa:	6113      	str	r3, [r2, #16]
 800c3fc:	e05f      	b.n	800c4be <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d123      	bne.n	800c44e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c412:	691a      	ldr	r2, [r3, #16]
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c41c:	69b9      	ldr	r1, [r7, #24]
 800c41e:	0148      	lsls	r0, r1, #5
 800c420:	69f9      	ldr	r1, [r7, #28]
 800c422:	4401      	add	r1, r0
 800c424:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c428:	4313      	orrs	r3, r2
 800c42a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	69ba      	ldr	r2, [r7, #24]
 800c43c:	0151      	lsls	r1, r2, #5
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	440a      	add	r2, r1
 800c442:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c446:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c44a:	6113      	str	r3, [r2, #16]
 800c44c:	e037      	b.n	800c4be <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	691a      	ldr	r2, [r3, #16]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	4413      	add	r3, r2
 800c458:	1e5a      	subs	r2, r3, #1
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c462:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	8afa      	ldrh	r2, [r7, #22]
 800c46a:	fb03 f202 	mul.w	r2, r3, r2
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c47e:	691a      	ldr	r2, [r3, #16]
 800c480:	8afb      	ldrh	r3, [r7, #22]
 800c482:	04d9      	lsls	r1, r3, #19
 800c484:	4b39      	ldr	r3, [pc, #228]	@ (800c56c <USB_EPStartXfer+0x53c>)
 800c486:	400b      	ands	r3, r1
 800c488:	69b9      	ldr	r1, [r7, #24]
 800c48a:	0148      	lsls	r0, r1, #5
 800c48c:	69f9      	ldr	r1, [r7, #28]
 800c48e:	4401      	add	r1, r0
 800c490:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c494:	4313      	orrs	r3, r2
 800c496:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a4:	691a      	ldr	r2, [r3, #16]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4ae:	69b9      	ldr	r1, [r7, #24]
 800c4b0:	0148      	lsls	r0, r1, #5
 800c4b2:	69f9      	ldr	r1, [r7, #28]
 800c4b4:	4401      	add	r1, r0
 800c4b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c4be:	79fb      	ldrb	r3, [r7, #7]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d10d      	bne.n	800c4e0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d009      	beq.n	800c4e0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	68d9      	ldr	r1, [r3, #12]
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4dc:	460a      	mov	r2, r1
 800c4de:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	791b      	ldrb	r3, [r3, #4]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d128      	bne.n	800c53a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d110      	bne.n	800c51a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69ba      	ldr	r2, [r7, #24]
 800c508:	0151      	lsls	r1, r2, #5
 800c50a:	69fa      	ldr	r2, [r7, #28]
 800c50c:	440a      	add	r2, r1
 800c50e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c512:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	e00f      	b.n	800c53a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	69ba      	ldr	r2, [r7, #24]
 800c52a:	0151      	lsls	r1, r2, #5
 800c52c:	69fa      	ldr	r2, [r7, #28]
 800c52e:	440a      	add	r2, r1
 800c530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c538:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	015a      	lsls	r2, r3, #5
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	4413      	add	r3, r2
 800c542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	0151      	lsls	r1, r2, #5
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	440a      	add	r2, r1
 800c550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c554:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c558:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3720      	adds	r7, #32
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	fff80000 	.word	0xfff80000
 800c568:	e007ffff 	.word	0xe007ffff
 800c56c:	1ff80000 	.word	0x1ff80000

0800c570 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c57a:	2300      	movs	r3, #0
 800c57c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c57e:	2300      	movs	r3, #0
 800c580:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	785b      	ldrb	r3, [r3, #1]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d14a      	bne.n	800c624 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5a6:	f040 8086 	bne.w	800c6b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	015a      	lsls	r2, r3, #5
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	7812      	ldrb	r2, [r2, #0]
 800c5be:	0151      	lsls	r1, r2, #5
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	440a      	add	r2, r1
 800c5c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c5cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	7812      	ldrb	r2, [r2, #0]
 800c5e2:	0151      	lsls	r1, r2, #5
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	440a      	add	r2, r1
 800c5e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c5f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d902      	bls.n	800c608 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	75fb      	strb	r3, [r7, #23]
          break;
 800c606:	e056      	b.n	800c6b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	015a      	lsls	r2, r3, #5
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	4413      	add	r3, r2
 800c612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c61c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c620:	d0e7      	beq.n	800c5f2 <USB_EPStopXfer+0x82>
 800c622:	e048      	b.n	800c6b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	015a      	lsls	r2, r3, #5
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	4413      	add	r3, r2
 800c62e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c63c:	d13b      	bne.n	800c6b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	015a      	lsls	r2, r3, #5
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	4413      	add	r3, r2
 800c648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	683a      	ldr	r2, [r7, #0]
 800c650:	7812      	ldrb	r2, [r2, #0]
 800c652:	0151      	lsls	r1, r2, #5
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	440a      	add	r2, r1
 800c658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c65c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c660:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	7812      	ldrb	r2, [r2, #0]
 800c676:	0151      	lsls	r1, r2, #5
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	440a      	add	r2, r1
 800c67c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c684:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3301      	adds	r3, #1
 800c68a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c692:	4293      	cmp	r3, r2
 800c694:	d902      	bls.n	800c69c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c696:	2301      	movs	r3, #1
 800c698:	75fb      	strb	r3, [r7, #23]
          break;
 800c69a:	e00c      	b.n	800c6b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	015a      	lsls	r2, r3, #5
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6b4:	d0e7      	beq.n	800c686 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	371c      	adds	r7, #28
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b089      	sub	sp, #36	@ 0x24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	71fb      	strb	r3, [r7, #7]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c6e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d123      	bne.n	800c732 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c6ea:	88bb      	ldrh	r3, [r7, #4]
 800c6ec:	3303      	adds	r3, #3
 800c6ee:	089b      	lsrs	r3, r3, #2
 800c6f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	61bb      	str	r3, [r7, #24]
 800c6f6:	e018      	b.n	800c72a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c6f8:	79fb      	ldrb	r3, [r7, #7]
 800c6fa:	031a      	lsls	r2, r3, #12
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c704:	461a      	mov	r2, r3
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	3301      	adds	r3, #1
 800c710:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	3301      	adds	r3, #1
 800c716:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	3301      	adds	r3, #1
 800c71c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	3301      	adds	r3, #1
 800c722:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	3301      	adds	r3, #1
 800c728:	61bb      	str	r3, [r7, #24]
 800c72a:	69ba      	ldr	r2, [r7, #24]
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d3e2      	bcc.n	800c6f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3724      	adds	r7, #36	@ 0x24
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c740:	b480      	push	{r7}
 800c742:	b08b      	sub	sp, #44	@ 0x2c
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4613      	mov	r3, r2
 800c74c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c756:	88fb      	ldrh	r3, [r7, #6]
 800c758:	089b      	lsrs	r3, r3, #2
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c75e:	88fb      	ldrh	r3, [r7, #6]
 800c760:	f003 0303 	and.w	r3, r3, #3
 800c764:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c766:	2300      	movs	r3, #0
 800c768:	623b      	str	r3, [r7, #32]
 800c76a:	e014      	b.n	800c796 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	601a      	str	r2, [r3, #0]
    pDest++;
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	3301      	adds	r3, #1
 800c77c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	3301      	adds	r3, #1
 800c782:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	3301      	adds	r3, #1
 800c788:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78c:	3301      	adds	r3, #1
 800c78e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c790:	6a3b      	ldr	r3, [r7, #32]
 800c792:	3301      	adds	r3, #1
 800c794:	623b      	str	r3, [r7, #32]
 800c796:	6a3a      	ldr	r2, [r7, #32]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d3e6      	bcc.n	800c76c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c79e:	8bfb      	ldrh	r3, [r7, #30]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01e      	beq.n	800c7e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	f107 0310 	add.w	r3, r7, #16
 800c7b4:	6812      	ldr	r2, [r2, #0]
 800c7b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	00db      	lsls	r3, r3, #3
 800c7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c8:	701a      	strb	r2, [r3, #0]
      i++;
 800c7ca:	6a3b      	ldr	r3, [r7, #32]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c7d6:	8bfb      	ldrh	r3, [r7, #30]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c7dc:	8bfb      	ldrh	r3, [r7, #30]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1ea      	bne.n	800c7b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	372c      	adds	r7, #44	@ 0x2c
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	785b      	ldrb	r3, [r3, #1]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d12c      	bne.n	800c866 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	db12      	blt.n	800c844 <USB_EPSetStall+0x54>
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00f      	beq.n	800c844 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	015a      	lsls	r2, r3, #5
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4413      	add	r3, r2
 800c82c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	0151      	lsls	r1, r2, #5
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	440a      	add	r2, r1
 800c83a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c83e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c842:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	0151      	lsls	r1, r2, #5
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	440a      	add	r2, r1
 800c85a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c85e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	e02b      	b.n	800c8be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	db12      	blt.n	800c89e <USB_EPSetStall+0xae>
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00f      	beq.n	800c89e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	0151      	lsls	r1, r2, #5
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	440a      	add	r2, r1
 800c894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c898:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c89c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	0151      	lsls	r1, r2, #5
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	440a      	add	r2, r1
 800c8b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c8bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	785b      	ldrb	r3, [r3, #1]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d128      	bne.n	800c93a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	0151      	lsls	r1, r2, #5
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	440a      	add	r2, r1
 800c8fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c902:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c906:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	791b      	ldrb	r3, [r3, #4]
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	d003      	beq.n	800c918 <USB_EPClearStall+0x4c>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	791b      	ldrb	r3, [r3, #4]
 800c914:	2b02      	cmp	r3, #2
 800c916:	d138      	bne.n	800c98a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	0151      	lsls	r1, r2, #5
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	440a      	add	r2, r1
 800c92e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	e027      	b.n	800c98a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	0151      	lsls	r1, r2, #5
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	440a      	add	r2, r1
 800c950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c954:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c958:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	791b      	ldrb	r3, [r3, #4]
 800c95e:	2b03      	cmp	r3, #3
 800c960:	d003      	beq.n	800c96a <USB_EPClearStall+0x9e>
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	791b      	ldrb	r3, [r3, #4]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d10f      	bne.n	800c98a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	015a      	lsls	r2, r3, #5
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	4413      	add	r3, r2
 800c972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	0151      	lsls	r1, r2, #5
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	440a      	add	r2, r1
 800c980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c988:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3714      	adds	r7, #20
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c9ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	78fb      	ldrb	r3, [r7, #3]
 800c9c6:	011b      	lsls	r3, r3, #4
 800c9c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c9cc:	68f9      	ldr	r1, [r7, #12]
 800c9ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c9fe:	f023 0303 	bic.w	r3, r3, #3
 800ca02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca12:	f023 0302 	bic.w	r3, r3, #2
 800ca16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca26:	b480      	push	{r7}
 800ca28:	b085      	sub	sp, #20
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca40:	f023 0303 	bic.w	r3, r3, #3
 800ca44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca54:	f043 0302 	orr.w	r3, r3, #2
 800ca58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	695b      	ldr	r3, [r3, #20]
 800ca74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca80:	68fb      	ldr	r3, [r7, #12]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3714      	adds	r7, #20
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca8e:	b480      	push	{r7}
 800ca90:	b085      	sub	sp, #20
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	4013      	ands	r3, r2
 800cab0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	0c1b      	lsrs	r3, r3, #16
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b085      	sub	sp, #20
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cade:	69db      	ldr	r3, [r3, #28]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	4013      	ands	r3, r2
 800cae4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	b29b      	uxth	r3, r3
}
 800caea:	4618      	mov	r0, r3
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b085      	sub	sp, #20
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	460b      	mov	r3, r1
 800cb00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cb06:	78fb      	ldrb	r3, [r7, #3]
 800cb08:	015a      	lsls	r2, r3, #5
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	4013      	ands	r3, r2
 800cb22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb24:	68bb      	ldr	r3, [r7, #8]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b087      	sub	sp, #28
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb56:	78fb      	ldrb	r3, [r7, #3]
 800cb58:	f003 030f 	and.w	r3, r3, #15
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb62:	01db      	lsls	r3, r3, #7
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb6c:	78fb      	ldrb	r3, [r7, #3]
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb80:	68bb      	ldr	r3, [r7, #8]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	f003 0301 	and.w	r3, r3, #1
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
	...

0800cbac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	4b09      	ldr	r3, [pc, #36]	@ (800cbf0 <USB_ActivateSetup+0x44>)
 800cbca:	4013      	ands	r3, r2
 800cbcc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cbdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3714      	adds	r7, #20
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	fffff800 	.word	0xfffff800

0800cbf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	333c      	adds	r3, #60	@ 0x3c
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	4a26      	ldr	r2, [pc, #152]	@ (800ccac <USB_EP0_OutStart+0xb8>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d90a      	bls.n	800cc2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc28:	d101      	bne.n	800cc2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e037      	b.n	800cc9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc34:	461a      	mov	r2, r3
 800cc36:	2300      	movs	r3, #0
 800cc38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc5c:	f043 0318 	orr.w	r3, r3, #24
 800cc60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800cc74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc76:	7afb      	ldrb	r3, [r7, #11]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d10f      	bne.n	800cc9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc82:	461a      	mov	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800cc9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	4f54300a 	.word	0x4f54300a

0800ccb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	4a13      	ldr	r2, [pc, #76]	@ (800cd14 <USB_CoreReset+0x64>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d901      	bls.n	800ccce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccca:	2303      	movs	r3, #3
 800cccc:	e01b      	b.n	800cd06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	daf2      	bge.n	800ccbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	f043 0201 	orr.w	r2, r3, #1
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3301      	adds	r3, #1
 800ccea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4a09      	ldr	r2, [pc, #36]	@ (800cd14 <USB_CoreReset+0x64>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d901      	bls.n	800ccf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	e006      	b.n	800cd06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d0f0      	beq.n	800cce6 <USB_CoreReset+0x36>

  return HAL_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	00030d40 	.word	0x00030d40

0800cd18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cd24:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cd28:	f003 f960 	bl	800ffec <USBD_static_malloc>
 800cd2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d109      	bne.n	800cd48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	32b0      	adds	r2, #176	@ 0xb0
 800cd3e:	2100      	movs	r1, #0
 800cd40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd44:	2302      	movs	r3, #2
 800cd46:	e0d4      	b.n	800cef2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd48:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f003 faf6 	bl	8010340 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	32b0      	adds	r2, #176	@ 0xb0
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	32b0      	adds	r2, #176	@ 0xb0
 800cd6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7c1b      	ldrb	r3, [r3, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d138      	bne.n	800cdf2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd80:	4b5e      	ldr	r3, [pc, #376]	@ (800cefc <USBD_CDC_Init+0x1e4>)
 800cd82:	7819      	ldrb	r1, [r3, #0]
 800cd84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd88:	2202      	movs	r2, #2
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f003 f80b 	bl	800fda6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd90:	4b5a      	ldr	r3, [pc, #360]	@ (800cefc <USBD_CDC_Init+0x1e4>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	f003 020f 	and.w	r2, r3, #15
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	440b      	add	r3, r1
 800cda4:	3324      	adds	r3, #36	@ 0x24
 800cda6:	2201      	movs	r2, #1
 800cda8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdaa:	4b55      	ldr	r3, [pc, #340]	@ (800cf00 <USBD_CDC_Init+0x1e8>)
 800cdac:	7819      	ldrb	r1, [r3, #0]
 800cdae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cdb2:	2202      	movs	r2, #2
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f002 fff6 	bl	800fda6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cdba:	4b51      	ldr	r3, [pc, #324]	@ (800cf00 <USBD_CDC_Init+0x1e8>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	f003 020f 	and.w	r2, r3, #15
 800cdc2:	6879      	ldr	r1, [r7, #4]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	440b      	add	r3, r1
 800cdce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cdd6:	4b4b      	ldr	r3, [pc, #300]	@ (800cf04 <USBD_CDC_Init+0x1ec>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	f003 020f 	and.w	r2, r3, #15
 800cdde:	6879      	ldr	r1, [r7, #4]
 800cde0:	4613      	mov	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	440b      	add	r3, r1
 800cdea:	3326      	adds	r3, #38	@ 0x26
 800cdec:	2210      	movs	r2, #16
 800cdee:	801a      	strh	r2, [r3, #0]
 800cdf0:	e035      	b.n	800ce5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cdf2:	4b42      	ldr	r3, [pc, #264]	@ (800cefc <USBD_CDC_Init+0x1e4>)
 800cdf4:	7819      	ldrb	r1, [r3, #0]
 800cdf6:	2340      	movs	r3, #64	@ 0x40
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f002 ffd3 	bl	800fda6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce00:	4b3e      	ldr	r3, [pc, #248]	@ (800cefc <USBD_CDC_Init+0x1e4>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	f003 020f 	and.w	r2, r3, #15
 800ce08:	6879      	ldr	r1, [r7, #4]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	440b      	add	r3, r1
 800ce14:	3324      	adds	r3, #36	@ 0x24
 800ce16:	2201      	movs	r2, #1
 800ce18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce1a:	4b39      	ldr	r3, [pc, #228]	@ (800cf00 <USBD_CDC_Init+0x1e8>)
 800ce1c:	7819      	ldrb	r1, [r3, #0]
 800ce1e:	2340      	movs	r3, #64	@ 0x40
 800ce20:	2202      	movs	r2, #2
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f002 ffbf 	bl	800fda6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce28:	4b35      	ldr	r3, [pc, #212]	@ (800cf00 <USBD_CDC_Init+0x1e8>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	f003 020f 	and.w	r2, r3, #15
 800ce30:	6879      	ldr	r1, [r7, #4]
 800ce32:	4613      	mov	r3, r2
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4413      	add	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	440b      	add	r3, r1
 800ce3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce40:	2201      	movs	r2, #1
 800ce42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce44:	4b2f      	ldr	r3, [pc, #188]	@ (800cf04 <USBD_CDC_Init+0x1ec>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f003 020f 	and.w	r2, r3, #15
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4413      	add	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	440b      	add	r3, r1
 800ce58:	3326      	adds	r3, #38	@ 0x26
 800ce5a:	2210      	movs	r2, #16
 800ce5c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce5e:	4b29      	ldr	r3, [pc, #164]	@ (800cf04 <USBD_CDC_Init+0x1ec>)
 800ce60:	7819      	ldrb	r1, [r3, #0]
 800ce62:	2308      	movs	r3, #8
 800ce64:	2203      	movs	r2, #3
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f002 ff9d 	bl	800fda6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce6c:	4b25      	ldr	r3, [pc, #148]	@ (800cf04 <USBD_CDC_Init+0x1ec>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 020f 	and.w	r2, r3, #15
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	3324      	adds	r3, #36	@ 0x24
 800ce82:	2201      	movs	r2, #1
 800ce84:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	33b0      	adds	r3, #176	@ 0xb0
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cebc:	2302      	movs	r3, #2
 800cebe:	e018      	b.n	800cef2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7c1b      	ldrb	r3, [r3, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cec8:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <USBD_CDC_Init+0x1e8>)
 800ceca:	7819      	ldrb	r1, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ced2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f003 f854 	bl	800ff84 <USBD_LL_PrepareReceive>
 800cedc:	e008      	b.n	800cef0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cede:	4b08      	ldr	r3, [pc, #32]	@ (800cf00 <USBD_CDC_Init+0x1e8>)
 800cee0:	7819      	ldrb	r1, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cee8:	2340      	movs	r3, #64	@ 0x40
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f003 f84a 	bl	800ff84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	2400009b 	.word	0x2400009b
 800cf00:	2400009c 	.word	0x2400009c
 800cf04:	2400009d 	.word	0x2400009d

0800cf08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf14:	4b3a      	ldr	r3, [pc, #232]	@ (800d000 <USBD_CDC_DeInit+0xf8>)
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f002 ff69 	bl	800fdf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cf20:	4b37      	ldr	r3, [pc, #220]	@ (800d000 <USBD_CDC_DeInit+0xf8>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	f003 020f 	and.w	r2, r3, #15
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	440b      	add	r3, r1
 800cf34:	3324      	adds	r3, #36	@ 0x24
 800cf36:	2200      	movs	r2, #0
 800cf38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf3a:	4b32      	ldr	r3, [pc, #200]	@ (800d004 <USBD_CDC_DeInit+0xfc>)
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f002 ff56 	bl	800fdf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf46:	4b2f      	ldr	r3, [pc, #188]	@ (800d004 <USBD_CDC_DeInit+0xfc>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	f003 020f 	and.w	r2, r3, #15
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf5e:	2200      	movs	r2, #0
 800cf60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf62:	4b29      	ldr	r3, [pc, #164]	@ (800d008 <USBD_CDC_DeInit+0x100>)
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f002 ff42 	bl	800fdf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf6e:	4b26      	ldr	r3, [pc, #152]	@ (800d008 <USBD_CDC_DeInit+0x100>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	f003 020f 	and.w	r2, r3, #15
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	440b      	add	r3, r1
 800cf82:	3324      	adds	r3, #36	@ 0x24
 800cf84:	2200      	movs	r2, #0
 800cf86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cf88:	4b1f      	ldr	r3, [pc, #124]	@ (800d008 <USBD_CDC_DeInit+0x100>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	f003 020f 	and.w	r2, r3, #15
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	440b      	add	r3, r1
 800cf9c:	3326      	adds	r3, #38	@ 0x26
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	32b0      	adds	r2, #176	@ 0xb0
 800cfac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d01f      	beq.n	800cff4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	33b0      	adds	r3, #176	@ 0xb0
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	32b0      	adds	r2, #176	@ 0xb0
 800cfd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f003 f816 	bl	8010008 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	32b0      	adds	r2, #176	@ 0xb0
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	2400009b 	.word	0x2400009b
 800d004:	2400009c 	.word	0x2400009c
 800d008:	2400009d 	.word	0x2400009d

0800d00c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	32b0      	adds	r2, #176	@ 0xb0
 800d020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d024:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d026:	2300      	movs	r3, #0
 800d028:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d02a:	2300      	movs	r3, #0
 800d02c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d101      	bne.n	800d03c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d038:	2303      	movs	r3, #3
 800d03a:	e0bf      	b.n	800d1bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d044:	2b00      	cmp	r3, #0
 800d046:	d050      	beq.n	800d0ea <USBD_CDC_Setup+0xde>
 800d048:	2b20      	cmp	r3, #32
 800d04a:	f040 80af 	bne.w	800d1ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	88db      	ldrh	r3, [r3, #6]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d03a      	beq.n	800d0cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	b25b      	sxtb	r3, r3
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	da1b      	bge.n	800d098 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	33b0      	adds	r3, #176	@ 0xb0
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d076:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	88d2      	ldrh	r2, [r2, #6]
 800d07c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	88db      	ldrh	r3, [r3, #6]
 800d082:	2b07      	cmp	r3, #7
 800d084:	bf28      	it	cs
 800d086:	2307      	movcs	r3, #7
 800d088:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	89fa      	ldrh	r2, [r7, #14]
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f001 fdb1 	bl	800ebf8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d096:	e090      	b.n	800d1ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	785a      	ldrb	r2, [r3, #1]
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	88db      	ldrh	r3, [r3, #6]
 800d0a6:	2b3f      	cmp	r3, #63	@ 0x3f
 800d0a8:	d803      	bhi.n	800d0b2 <USBD_CDC_Setup+0xa6>
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	88db      	ldrh	r3, [r3, #6]
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	e000      	b.n	800d0b4 <USBD_CDC_Setup+0xa8>
 800d0b2:	2240      	movs	r2, #64	@ 0x40
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d0ba:	6939      	ldr	r1, [r7, #16]
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f001 fdc3 	bl	800ec50 <USBD_CtlPrepareRx>
      break;
 800d0ca:	e076      	b.n	800d1ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	33b0      	adds	r3, #176	@ 0xb0
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	7850      	ldrb	r0, [r2, #1]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	4798      	blx	r3
      break;
 800d0e8:	e067      	b.n	800d1ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	785b      	ldrb	r3, [r3, #1]
 800d0ee:	2b0b      	cmp	r3, #11
 800d0f0:	d851      	bhi.n	800d196 <USBD_CDC_Setup+0x18a>
 800d0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f8 <USBD_CDC_Setup+0xec>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d129 	.word	0x0800d129
 800d0fc:	0800d1a5 	.word	0x0800d1a5
 800d100:	0800d197 	.word	0x0800d197
 800d104:	0800d197 	.word	0x0800d197
 800d108:	0800d197 	.word	0x0800d197
 800d10c:	0800d197 	.word	0x0800d197
 800d110:	0800d197 	.word	0x0800d197
 800d114:	0800d197 	.word	0x0800d197
 800d118:	0800d197 	.word	0x0800d197
 800d11c:	0800d197 	.word	0x0800d197
 800d120:	0800d153 	.word	0x0800d153
 800d124:	0800d17d 	.word	0x0800d17d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b03      	cmp	r3, #3
 800d132:	d107      	bne.n	800d144 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d134:	f107 030a 	add.w	r3, r7, #10
 800d138:	2202      	movs	r2, #2
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f001 fd5b 	bl	800ebf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d142:	e032      	b.n	800d1aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f001 fce5 	bl	800eb16 <USBD_CtlError>
            ret = USBD_FAIL;
 800d14c:	2303      	movs	r3, #3
 800d14e:	75fb      	strb	r3, [r7, #23]
          break;
 800d150:	e02b      	b.n	800d1aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b03      	cmp	r3, #3
 800d15c:	d107      	bne.n	800d16e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d15e:	f107 030d 	add.w	r3, r7, #13
 800d162:	2201      	movs	r2, #1
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f001 fd46 	bl	800ebf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d16c:	e01d      	b.n	800d1aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 fcd0 	bl	800eb16 <USBD_CtlError>
            ret = USBD_FAIL;
 800d176:	2303      	movs	r3, #3
 800d178:	75fb      	strb	r3, [r7, #23]
          break;
 800d17a:	e016      	b.n	800d1aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b03      	cmp	r3, #3
 800d186:	d00f      	beq.n	800d1a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d188:	6839      	ldr	r1, [r7, #0]
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f001 fcc3 	bl	800eb16 <USBD_CtlError>
            ret = USBD_FAIL;
 800d190:	2303      	movs	r3, #3
 800d192:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d194:	e008      	b.n	800d1a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f001 fcbc 	bl	800eb16 <USBD_CtlError>
          ret = USBD_FAIL;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d1a2:	e002      	b.n	800d1aa <USBD_CDC_Setup+0x19e>
          break;
 800d1a4:	bf00      	nop
 800d1a6:	e008      	b.n	800d1ba <USBD_CDC_Setup+0x1ae>
          break;
 800d1a8:	bf00      	nop
      }
      break;
 800d1aa:	e006      	b.n	800d1ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d1ac:	6839      	ldr	r1, [r7, #0]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f001 fcb1 	bl	800eb16 <USBD_CtlError>
      ret = USBD_FAIL;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	75fb      	strb	r3, [r7, #23]
      break;
 800d1b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	32b0      	adds	r2, #176	@ 0xb0
 800d1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d1ea:	2303      	movs	r3, #3
 800d1ec:	e065      	b.n	800d2ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	32b0      	adds	r2, #176	@ 0xb0
 800d1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d1fe:	78fb      	ldrb	r3, [r7, #3]
 800d200:	f003 020f 	and.w	r2, r3, #15
 800d204:	6879      	ldr	r1, [r7, #4]
 800d206:	4613      	mov	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4413      	add	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	440b      	add	r3, r1
 800d210:	3318      	adds	r3, #24
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d02f      	beq.n	800d278 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d218:	78fb      	ldrb	r3, [r7, #3]
 800d21a:	f003 020f 	and.w	r2, r3, #15
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	4613      	mov	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	440b      	add	r3, r1
 800d22a:	3318      	adds	r3, #24
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	78fb      	ldrb	r3, [r7, #3]
 800d230:	f003 010f 	and.w	r1, r3, #15
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	460b      	mov	r3, r1
 800d238:	00db      	lsls	r3, r3, #3
 800d23a:	440b      	add	r3, r1
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4403      	add	r3, r0
 800d240:	3344      	adds	r3, #68	@ 0x44
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	fbb2 f1f3 	udiv	r1, r2, r3
 800d248:	fb01 f303 	mul.w	r3, r1, r3
 800d24c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d112      	bne.n	800d278 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d252:	78fb      	ldrb	r3, [r7, #3]
 800d254:	f003 020f 	and.w	r2, r3, #15
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	4613      	mov	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	440b      	add	r3, r1
 800d264:	3318      	adds	r3, #24
 800d266:	2200      	movs	r2, #0
 800d268:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d26a:	78f9      	ldrb	r1, [r7, #3]
 800d26c:	2300      	movs	r3, #0
 800d26e:	2200      	movs	r2, #0
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f002 fe66 	bl	800ff42 <USBD_LL_Transmit>
 800d276:	e01f      	b.n	800d2b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	33b0      	adds	r3, #176	@ 0xb0
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d010      	beq.n	800d2b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	33b0      	adds	r3, #176	@ 0xb0
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d2b4:	78fa      	ldrb	r2, [r7, #3]
 800d2b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b084      	sub	sp, #16
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	32b0      	adds	r2, #176	@ 0xb0
 800d2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	32b0      	adds	r2, #176	@ 0xb0
 800d2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	e01a      	b.n	800d32a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d2f4:	78fb      	ldrb	r3, [r7, #3]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f002 fe64 	bl	800ffc6 <USBD_LL_GetRxDataSize>
 800d2fe:	4602      	mov	r2, r0
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	33b0      	adds	r3, #176	@ 0xb0
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	4413      	add	r3, r2
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d324:	4611      	mov	r1, r2
 800d326:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	32b0      	adds	r2, #176	@ 0xb0
 800d344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d348:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d101      	bne.n	800d354 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d350:	2303      	movs	r3, #3
 800d352:	e024      	b.n	800d39e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	33b0      	adds	r3, #176	@ 0xb0
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d019      	beq.n	800d39c <USBD_CDC_EP0_RxReady+0x6a>
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d36e:	2bff      	cmp	r3, #255	@ 0xff
 800d370:	d014      	beq.n	800d39c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	33b0      	adds	r3, #176	@ 0xb0
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d38a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d392:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	22ff      	movs	r2, #255	@ 0xff
 800d398:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3b0:	2182      	movs	r1, #130	@ 0x82
 800d3b2:	4818      	ldr	r0, [pc, #96]	@ (800d414 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3b4:	f000 fd4f 	bl	800de56 <USBD_GetEpDesc>
 800d3b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	4815      	ldr	r0, [pc, #84]	@ (800d414 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3be:	f000 fd4a 	bl	800de56 <USBD_GetEpDesc>
 800d3c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3c4:	2181      	movs	r1, #129	@ 0x81
 800d3c6:	4813      	ldr	r0, [pc, #76]	@ (800d414 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3c8:	f000 fd45 	bl	800de56 <USBD_GetEpDesc>
 800d3cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	2210      	movs	r2, #16
 800d3d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d006      	beq.n	800d3ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3e8:	711a      	strb	r2, [r3, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d006      	beq.n	800d402 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d3fc:	711a      	strb	r2, [r3, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2243      	movs	r2, #67	@ 0x43
 800d406:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d408:	4b02      	ldr	r3, [pc, #8]	@ (800d414 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	24000058 	.word	0x24000058

0800d418 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d420:	2182      	movs	r1, #130	@ 0x82
 800d422:	4818      	ldr	r0, [pc, #96]	@ (800d484 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d424:	f000 fd17 	bl	800de56 <USBD_GetEpDesc>
 800d428:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d42a:	2101      	movs	r1, #1
 800d42c:	4815      	ldr	r0, [pc, #84]	@ (800d484 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d42e:	f000 fd12 	bl	800de56 <USBD_GetEpDesc>
 800d432:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d434:	2181      	movs	r1, #129	@ 0x81
 800d436:	4813      	ldr	r0, [pc, #76]	@ (800d484 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d438:	f000 fd0d 	bl	800de56 <USBD_GetEpDesc>
 800d43c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2210      	movs	r2, #16
 800d448:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d006      	beq.n	800d45e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2200      	movs	r2, #0
 800d454:	711a      	strb	r2, [r3, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f042 0202 	orr.w	r2, r2, #2
 800d45c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d006      	beq.n	800d472 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	711a      	strb	r2, [r3, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f042 0202 	orr.w	r2, r2, #2
 800d470:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2243      	movs	r2, #67	@ 0x43
 800d476:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d478:	4b02      	ldr	r3, [pc, #8]	@ (800d484 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	24000058 	.word	0x24000058

0800d488 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d490:	2182      	movs	r1, #130	@ 0x82
 800d492:	4818      	ldr	r0, [pc, #96]	@ (800d4f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d494:	f000 fcdf 	bl	800de56 <USBD_GetEpDesc>
 800d498:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d49a:	2101      	movs	r1, #1
 800d49c:	4815      	ldr	r0, [pc, #84]	@ (800d4f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d49e:	f000 fcda 	bl	800de56 <USBD_GetEpDesc>
 800d4a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4a4:	2181      	movs	r1, #129	@ 0x81
 800d4a6:	4813      	ldr	r0, [pc, #76]	@ (800d4f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4a8:	f000 fcd5 	bl	800de56 <USBD_GetEpDesc>
 800d4ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	2210      	movs	r2, #16
 800d4b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d006      	beq.n	800d4ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4c8:	711a      	strb	r2, [r3, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d006      	beq.n	800d4e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4dc:	711a      	strb	r2, [r3, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2243      	movs	r2, #67	@ 0x43
 800d4e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4e8:	4b02      	ldr	r3, [pc, #8]	@ (800d4f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	24000058 	.word	0x24000058

0800d4f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	220a      	movs	r2, #10
 800d504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d506:	4b03      	ldr	r3, [pc, #12]	@ (800d514 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d508:	4618      	mov	r0, r3
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	24000014 	.word	0x24000014

0800d518 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d528:	2303      	movs	r3, #3
 800d52a:	e009      	b.n	800d540 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	33b0      	adds	r3, #176	@ 0xb0
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	4413      	add	r3, r2
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	32b0      	adds	r2, #176	@ 0xb0
 800d562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d566:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d56e:	2303      	movs	r3, #3
 800d570:	e008      	b.n	800d584 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	371c      	adds	r7, #28
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	32b0      	adds	r2, #176	@ 0xb0
 800d5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	e004      	b.n	800d5be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	683a      	ldr	r2, [r7, #0]
 800d5b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
	...

0800d5cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	32b0      	adds	r2, #176	@ 0xb0
 800d5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e025      	b.n	800d63e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d11f      	bne.n	800d63c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d604:	4b10      	ldr	r3, [pc, #64]	@ (800d648 <USBD_CDC_TransmitPacket+0x7c>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	f003 020f 	and.w	r2, r3, #15
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	4613      	mov	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4403      	add	r3, r0
 800d61e:	3318      	adds	r3, #24
 800d620:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d622:	4b09      	ldr	r3, [pc, #36]	@ (800d648 <USBD_CDC_TransmitPacket+0x7c>)
 800d624:	7819      	ldrb	r1, [r3, #0]
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f002 fc85 	bl	800ff42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	2400009b 	.word	0x2400009b

0800d64c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	32b0      	adds	r2, #176	@ 0xb0
 800d65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d662:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	32b0      	adds	r2, #176	@ 0xb0
 800d66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d676:	2303      	movs	r3, #3
 800d678:	e018      	b.n	800d6ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7c1b      	ldrb	r3, [r3, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10a      	bne.n	800d698 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d682:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b4 <USBD_CDC_ReceivePacket+0x68>)
 800d684:	7819      	ldrb	r1, [r3, #0]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d68c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f002 fc77 	bl	800ff84 <USBD_LL_PrepareReceive>
 800d696:	e008      	b.n	800d6aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d698:	4b06      	ldr	r3, [pc, #24]	@ (800d6b4 <USBD_CDC_ReceivePacket+0x68>)
 800d69a:	7819      	ldrb	r1, [r3, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d6a2:	2340      	movs	r3, #64	@ 0x40
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f002 fc6d 	bl	800ff84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	2400009c 	.word	0x2400009c

0800d6b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d101      	bne.n	800d6d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	e01f      	b.n	800d710 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	79fa      	ldrb	r2, [r7, #7]
 800d702:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f002 fae3 	bl	800fcd0 <USBD_LL_Init>
 800d70a:	4603      	mov	r3, r0
 800d70c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3718      	adds	r7, #24
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d722:	2300      	movs	r3, #0
 800d724:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d72c:	2303      	movs	r3, #3
 800d72e:	e025      	b.n	800d77c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	32ae      	adds	r2, #174	@ 0xae
 800d742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00f      	beq.n	800d76c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	32ae      	adds	r2, #174	@ 0xae
 800d756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d75c:	f107 020e 	add.w	r2, r7, #14
 800d760:	4610      	mov	r0, r2
 800d762:	4798      	blx	r3
 800d764:	4602      	mov	r2, r0
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d772:	1c5a      	adds	r2, r3, #1
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f002 faef 	bl	800fd70 <USBD_LL_Start>
 800d792:	4603      	mov	r3, r0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d009      	beq.n	800d7e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	78fa      	ldrb	r2, [r7, #3]
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	4798      	blx	r3
 800d7dc:	4603      	mov	r3, r0
 800d7de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	78fa      	ldrb	r2, [r7, #3]
 800d804:	4611      	mov	r1, r2
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	4798      	blx	r3
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d810:	2303      	movs	r3, #3
 800d812:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d814:	7bfb      	ldrb	r3, [r7, #15]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	4618      	mov	r0, r3
 800d832:	f001 f936 	bl	800eaa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d844:	461a      	mov	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d852:	f003 031f 	and.w	r3, r3, #31
 800d856:	2b02      	cmp	r3, #2
 800d858:	d01a      	beq.n	800d890 <USBD_LL_SetupStage+0x72>
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d822      	bhi.n	800d8a4 <USBD_LL_SetupStage+0x86>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <USBD_LL_SetupStage+0x4a>
 800d862:	2b01      	cmp	r3, #1
 800d864:	d00a      	beq.n	800d87c <USBD_LL_SetupStage+0x5e>
 800d866:	e01d      	b.n	800d8a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 fb63 	bl	800df3c <USBD_StdDevReq>
 800d876:	4603      	mov	r3, r0
 800d878:	73fb      	strb	r3, [r7, #15]
      break;
 800d87a:	e020      	b.n	800d8be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d882:	4619      	mov	r1, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fbcb 	bl	800e020 <USBD_StdItfReq>
 800d88a:	4603      	mov	r3, r0
 800d88c:	73fb      	strb	r3, [r7, #15]
      break;
 800d88e:	e016      	b.n	800d8be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d896:	4619      	mov	r1, r3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fc2d 	bl	800e0f8 <USBD_StdEPReq>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a2:	e00c      	b.n	800d8be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d8aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f002 fabc 	bl	800fe30 <USBD_LL_StallEP>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73fb      	strb	r3, [r7, #15]
      break;
 800d8bc:	bf00      	nop
  }

  return ret;
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d8da:	7afb      	ldrb	r3, [r7, #11]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d16e      	bne.n	800d9be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d8e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	f040 8098 	bne.w	800da24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	689a      	ldr	r2, [r3, #8]
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d913      	bls.n	800d928 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	689a      	ldr	r2, [r3, #8]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	1ad2      	subs	r2, r2, r3
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	68da      	ldr	r2, [r3, #12]
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	4293      	cmp	r3, r2
 800d918:	bf28      	it	cs
 800d91a:	4613      	movcs	r3, r2
 800d91c:	461a      	mov	r2, r3
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f001 f9b2 	bl	800ec8a <USBD_CtlContinueRx>
 800d926:	e07d      	b.n	800da24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d92e:	f003 031f 	and.w	r3, r3, #31
 800d932:	2b02      	cmp	r3, #2
 800d934:	d014      	beq.n	800d960 <USBD_LL_DataOutStage+0x98>
 800d936:	2b02      	cmp	r3, #2
 800d938:	d81d      	bhi.n	800d976 <USBD_LL_DataOutStage+0xae>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d002      	beq.n	800d944 <USBD_LL_DataOutStage+0x7c>
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d003      	beq.n	800d94a <USBD_LL_DataOutStage+0x82>
 800d942:	e018      	b.n	800d976 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d944:	2300      	movs	r3, #0
 800d946:	75bb      	strb	r3, [r7, #22]
            break;
 800d948:	e018      	b.n	800d97c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d950:	b2db      	uxtb	r3, r3
 800d952:	4619      	mov	r1, r3
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f000 fa64 	bl	800de22 <USBD_CoreFindIF>
 800d95a:	4603      	mov	r3, r0
 800d95c:	75bb      	strb	r3, [r7, #22]
            break;
 800d95e:	e00d      	b.n	800d97c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d966:	b2db      	uxtb	r3, r3
 800d968:	4619      	mov	r1, r3
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f000 fa66 	bl	800de3c <USBD_CoreFindEP>
 800d970:	4603      	mov	r3, r0
 800d972:	75bb      	strb	r3, [r7, #22]
            break;
 800d974:	e002      	b.n	800d97c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d976:	2300      	movs	r3, #0
 800d978:	75bb      	strb	r3, [r7, #22]
            break;
 800d97a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d97c:	7dbb      	ldrb	r3, [r7, #22]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d119      	bne.n	800d9b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d113      	bne.n	800d9b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d98e:	7dba      	ldrb	r2, [r7, #22]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	32ae      	adds	r2, #174	@ 0xae
 800d994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00b      	beq.n	800d9b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d99e:	7dba      	ldrb	r2, [r7, #22]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d9a6:	7dba      	ldrb	r2, [r7, #22]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	32ae      	adds	r2, #174	@ 0xae
 800d9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f001 f978 	bl	800ecac <USBD_CtlSendStatus>
 800d9bc:	e032      	b.n	800da24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d9be:	7afb      	ldrb	r3, [r7, #11]
 800d9c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 fa37 	bl	800de3c <USBD_CoreFindEP>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9d2:	7dbb      	ldrb	r3, [r7, #22]
 800d9d4:	2bff      	cmp	r3, #255	@ 0xff
 800d9d6:	d025      	beq.n	800da24 <USBD_LL_DataOutStage+0x15c>
 800d9d8:	7dbb      	ldrb	r3, [r7, #22]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d122      	bne.n	800da24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d117      	bne.n	800da1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d9ea:	7dba      	ldrb	r2, [r7, #22]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	32ae      	adds	r2, #174	@ 0xae
 800d9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00f      	beq.n	800da1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d9fa:	7dba      	ldrb	r2, [r7, #22]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da02:	7dba      	ldrb	r2, [r7, #22]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	32ae      	adds	r2, #174	@ 0xae
 800da08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	7afa      	ldrb	r2, [r7, #11]
 800da10:	4611      	mov	r1, r2
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	4798      	blx	r3
 800da16:	4603      	mov	r3, r0
 800da18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d001      	beq.n	800da24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800da20:	7dfb      	ldrb	r3, [r7, #23]
 800da22:	e000      	b.n	800da26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b086      	sub	sp, #24
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	460b      	mov	r3, r1
 800da38:	607a      	str	r2, [r7, #4]
 800da3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da3c:	7afb      	ldrb	r3, [r7, #11]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d16f      	bne.n	800db22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	3314      	adds	r3, #20
 800da46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d15a      	bne.n	800db08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	689a      	ldr	r2, [r3, #8]
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d914      	bls.n	800da88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	689a      	ldr	r2, [r3, #8]
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	1ad2      	subs	r2, r2, r3
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	461a      	mov	r2, r3
 800da72:	6879      	ldr	r1, [r7, #4]
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f001 f8da 	bl	800ec2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da7a:	2300      	movs	r3, #0
 800da7c:	2200      	movs	r2, #0
 800da7e:	2100      	movs	r1, #0
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f002 fa7f 	bl	800ff84 <USBD_LL_PrepareReceive>
 800da86:	e03f      	b.n	800db08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	68da      	ldr	r2, [r3, #12]
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	429a      	cmp	r2, r3
 800da92:	d11c      	bne.n	800dace <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	685a      	ldr	r2, [r3, #4]
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d316      	bcc.n	800dace <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800daaa:	429a      	cmp	r2, r3
 800daac:	d20f      	bcs.n	800dace <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800daae:	2200      	movs	r2, #0
 800dab0:	2100      	movs	r1, #0
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f001 f8bb 	bl	800ec2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dac0:	2300      	movs	r3, #0
 800dac2:	2200      	movs	r2, #0
 800dac4:	2100      	movs	r1, #0
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f002 fa5c 	bl	800ff84 <USBD_LL_PrepareReceive>
 800dacc:	e01c      	b.n	800db08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d10f      	bne.n	800dafa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d009      	beq.n	800dafa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2200      	movs	r2, #0
 800daea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dafa:	2180      	movs	r1, #128	@ 0x80
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f002 f997 	bl	800fe30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f001 f8e5 	bl	800ecd2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d03a      	beq.n	800db88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f7ff fe42 	bl	800d79c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800db20:	e032      	b.n	800db88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800db22:	7afb      	ldrb	r3, [r7, #11]
 800db24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	4619      	mov	r1, r3
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f000 f985 	bl	800de3c <USBD_CoreFindEP>
 800db32:	4603      	mov	r3, r0
 800db34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db36:	7dfb      	ldrb	r3, [r7, #23]
 800db38:	2bff      	cmp	r3, #255	@ 0xff
 800db3a:	d025      	beq.n	800db88 <USBD_LL_DataInStage+0x15a>
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d122      	bne.n	800db88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d11c      	bne.n	800db88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db4e:	7dfa      	ldrb	r2, [r7, #23]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	32ae      	adds	r2, #174	@ 0xae
 800db54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db58:	695b      	ldr	r3, [r3, #20]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d014      	beq.n	800db88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db5e:	7dfa      	ldrb	r2, [r7, #23]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db66:	7dfa      	ldrb	r2, [r7, #23]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	32ae      	adds	r2, #174	@ 0xae
 800db6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db70:	695b      	ldr	r3, [r3, #20]
 800db72:	7afa      	ldrb	r2, [r7, #11]
 800db74:	4611      	mov	r1, r2
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	4798      	blx	r3
 800db7a:	4603      	mov	r3, r0
 800db7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db7e:	7dbb      	ldrb	r3, [r7, #22]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800db84:	7dbb      	ldrb	r3, [r7, #22]
 800db86:	e000      	b.n	800db8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d014      	beq.n	800dbf8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00e      	beq.n	800dbf8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	6852      	ldr	r2, [r2, #4]
 800dbe6:	b2d2      	uxtb	r2, r2
 800dbe8:	4611      	mov	r1, r2
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	4798      	blx	r3
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbf8:	2340      	movs	r3, #64	@ 0x40
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f002 f8d1 	bl	800fda6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2240      	movs	r2, #64	@ 0x40
 800dc10:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc14:	2340      	movs	r3, #64	@ 0x40
 800dc16:	2200      	movs	r2, #0
 800dc18:	2180      	movs	r1, #128	@ 0x80
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f002 f8c3 	bl	800fda6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2240      	movs	r2, #64	@ 0x40
 800dc2a:	621a      	str	r2, [r3, #32]

  return ret;
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc36:	b480      	push	{r7}
 800dc38:	b083      	sub	sp, #12
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
 800dc3e:	460b      	mov	r3, r1
 800dc40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	78fa      	ldrb	r2, [r7, #3]
 800dc46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d006      	beq.n	800dc78 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2204      	movs	r2, #4
 800dc7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	2b04      	cmp	r3, #4
 800dca0:	d106      	bne.n	800dcb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dca8:	b2da      	uxtb	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	370c      	adds	r7, #12
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr

0800dcbe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	2b03      	cmp	r3, #3
 800dcd0:	d110      	bne.n	800dcf4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00b      	beq.n	800dcf4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d005      	beq.n	800dcf4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b082      	sub	sp, #8
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
 800dd06:	460b      	mov	r3, r1
 800dd08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	32ae      	adds	r2, #174	@ 0xae
 800dd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d101      	bne.n	800dd20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd1c:	2303      	movs	r3, #3
 800dd1e:	e01c      	b.n	800dd5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2b03      	cmp	r3, #3
 800dd2a:	d115      	bne.n	800dd58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	32ae      	adds	r2, #174	@ 0xae
 800dd36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3a:	6a1b      	ldr	r3, [r3, #32]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00b      	beq.n	800dd58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	32ae      	adds	r2, #174	@ 0xae
 800dd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4e:	6a1b      	ldr	r3, [r3, #32]
 800dd50:	78fa      	ldrb	r2, [r7, #3]
 800dd52:	4611      	mov	r1, r2
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b082      	sub	sp, #8
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	32ae      	adds	r2, #174	@ 0xae
 800dd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d101      	bne.n	800dd84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd80:	2303      	movs	r3, #3
 800dd82:	e01c      	b.n	800ddbe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b03      	cmp	r3, #3
 800dd8e:	d115      	bne.n	800ddbc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	32ae      	adds	r2, #174	@ 0xae
 800dd9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00b      	beq.n	800ddbc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	32ae      	adds	r2, #174	@ 0xae
 800ddae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb4:	78fa      	ldrb	r2, [r7, #3]
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ddc6:	b480      	push	{r7}
 800ddc8:	b083      	sub	sp, #12
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00e      	beq.n	800de18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	6852      	ldr	r2, [r2, #4]
 800de06:	b2d2      	uxtb	r2, r2
 800de08:	4611      	mov	r1, r2
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	4798      	blx	r3
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800de14:	2303      	movs	r3, #3
 800de16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800de18:	7bfb      	ldrb	r3, [r7, #15]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de22:	b480      	push	{r7}
 800de24:	b083      	sub	sp, #12
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
 800de2a:	460b      	mov	r3, r1
 800de2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	370c      	adds	r7, #12
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b086      	sub	sp, #24
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
 800de5e:	460b      	mov	r3, r1
 800de60:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	885b      	ldrh	r3, [r3, #2]
 800de72:	b29b      	uxth	r3, r3
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	7812      	ldrb	r2, [r2, #0]
 800de78:	4293      	cmp	r3, r2
 800de7a:	d91f      	bls.n	800debc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de82:	e013      	b.n	800deac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de84:	f107 030a 	add.w	r3, r7, #10
 800de88:	4619      	mov	r1, r3
 800de8a:	6978      	ldr	r0, [r7, #20]
 800de8c:	f000 f81b 	bl	800dec6 <USBD_GetNextDesc>
 800de90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	785b      	ldrb	r3, [r3, #1]
 800de96:	2b05      	cmp	r3, #5
 800de98:	d108      	bne.n	800deac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	789b      	ldrb	r3, [r3, #2]
 800dea2:	78fa      	ldrb	r2, [r7, #3]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d008      	beq.n	800deba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	885b      	ldrh	r3, [r3, #2]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	897b      	ldrh	r3, [r7, #10]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d8e5      	bhi.n	800de84 <USBD_GetEpDesc+0x2e>
 800deb8:	e000      	b.n	800debc <USBD_GetEpDesc+0x66>
          break;
 800deba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800debc:	693b      	ldr	r3, [r7, #16]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3718      	adds	r7, #24
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b085      	sub	sp, #20
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	7812      	ldrb	r2, [r2, #0]
 800dedc:	4413      	add	r3, r2
 800dede:	b29a      	uxth	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	461a      	mov	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4413      	add	r3, r2
 800deee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800def0:	68fb      	ldr	r3, [r7, #12]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3714      	adds	r7, #20
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr

0800defe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800defe:	b480      	push	{r7}
 800df00:	b087      	sub	sp, #28
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	3301      	adds	r3, #1
 800df14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800df1c:	8a3b      	ldrh	r3, [r7, #16]
 800df1e:	021b      	lsls	r3, r3, #8
 800df20:	b21a      	sxth	r2, r3
 800df22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df26:	4313      	orrs	r3, r2
 800df28:	b21b      	sxth	r3, r3
 800df2a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800df2c:	89fb      	ldrh	r3, [r7, #14]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	371c      	adds	r7, #28
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
	...

0800df3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df46:	2300      	movs	r3, #0
 800df48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df52:	2b40      	cmp	r3, #64	@ 0x40
 800df54:	d005      	beq.n	800df62 <USBD_StdDevReq+0x26>
 800df56:	2b40      	cmp	r3, #64	@ 0x40
 800df58:	d857      	bhi.n	800e00a <USBD_StdDevReq+0xce>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00f      	beq.n	800df7e <USBD_StdDevReq+0x42>
 800df5e:	2b20      	cmp	r3, #32
 800df60:	d153      	bne.n	800e00a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	32ae      	adds	r2, #174	@ 0xae
 800df6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	6839      	ldr	r1, [r7, #0]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	4798      	blx	r3
 800df78:	4603      	mov	r3, r0
 800df7a:	73fb      	strb	r3, [r7, #15]
      break;
 800df7c:	e04a      	b.n	800e014 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	785b      	ldrb	r3, [r3, #1]
 800df82:	2b09      	cmp	r3, #9
 800df84:	d83b      	bhi.n	800dffe <USBD_StdDevReq+0xc2>
 800df86:	a201      	add	r2, pc, #4	@ (adr r2, 800df8c <USBD_StdDevReq+0x50>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800dfe1 	.word	0x0800dfe1
 800df90:	0800dff5 	.word	0x0800dff5
 800df94:	0800dfff 	.word	0x0800dfff
 800df98:	0800dfeb 	.word	0x0800dfeb
 800df9c:	0800dfff 	.word	0x0800dfff
 800dfa0:	0800dfbf 	.word	0x0800dfbf
 800dfa4:	0800dfb5 	.word	0x0800dfb5
 800dfa8:	0800dfff 	.word	0x0800dfff
 800dfac:	0800dfd7 	.word	0x0800dfd7
 800dfb0:	0800dfc9 	.word	0x0800dfc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fa3c 	bl	800e434 <USBD_GetDescriptor>
          break;
 800dfbc:	e024      	b.n	800e008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dfbe:	6839      	ldr	r1, [r7, #0]
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fbcb 	bl	800e75c <USBD_SetAddress>
          break;
 800dfc6:	e01f      	b.n	800e008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fc0a 	bl	800e7e4 <USBD_SetConfig>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	73fb      	strb	r3, [r7, #15]
          break;
 800dfd4:	e018      	b.n	800e008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dfd6:	6839      	ldr	r1, [r7, #0]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fcad 	bl	800e938 <USBD_GetConfig>
          break;
 800dfde:	e013      	b.n	800e008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dfe0:	6839      	ldr	r1, [r7, #0]
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fcde 	bl	800e9a4 <USBD_GetStatus>
          break;
 800dfe8:	e00e      	b.n	800e008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fd0d 	bl	800ea0c <USBD_SetFeature>
          break;
 800dff2:	e009      	b.n	800e008 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dff4:	6839      	ldr	r1, [r7, #0]
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 fd31 	bl	800ea5e <USBD_ClrFeature>
          break;
 800dffc:	e004      	b.n	800e008 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 fd88 	bl	800eb16 <USBD_CtlError>
          break;
 800e006:	bf00      	nop
      }
      break;
 800e008:	e004      	b.n	800e014 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fd82 	bl	800eb16 <USBD_CtlError>
      break;
 800e012:	bf00      	nop
  }

  return ret;
 800e014:	7bfb      	ldrb	r3, [r7, #15]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop

0800e020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e02a:	2300      	movs	r3, #0
 800e02c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e036:	2b40      	cmp	r3, #64	@ 0x40
 800e038:	d005      	beq.n	800e046 <USBD_StdItfReq+0x26>
 800e03a:	2b40      	cmp	r3, #64	@ 0x40
 800e03c:	d852      	bhi.n	800e0e4 <USBD_StdItfReq+0xc4>
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d001      	beq.n	800e046 <USBD_StdItfReq+0x26>
 800e042:	2b20      	cmp	r3, #32
 800e044:	d14e      	bne.n	800e0e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	3b01      	subs	r3, #1
 800e050:	2b02      	cmp	r3, #2
 800e052:	d840      	bhi.n	800e0d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	889b      	ldrh	r3, [r3, #4]
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d836      	bhi.n	800e0cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	889b      	ldrh	r3, [r3, #4]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7ff fedb 	bl	800de22 <USBD_CoreFindIF>
 800e06c:	4603      	mov	r3, r0
 800e06e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e070:	7bbb      	ldrb	r3, [r7, #14]
 800e072:	2bff      	cmp	r3, #255	@ 0xff
 800e074:	d01d      	beq.n	800e0b2 <USBD_StdItfReq+0x92>
 800e076:	7bbb      	ldrb	r3, [r7, #14]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d11a      	bne.n	800e0b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e07c:	7bba      	ldrb	r2, [r7, #14]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	32ae      	adds	r2, #174	@ 0xae
 800e082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00f      	beq.n	800e0ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e08c:	7bba      	ldrb	r2, [r7, #14]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e094:	7bba      	ldrb	r2, [r7, #14]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	32ae      	adds	r2, #174	@ 0xae
 800e09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	4798      	blx	r3
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0aa:	e004      	b.n	800e0b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0b0:	e001      	b.n	800e0b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	88db      	ldrh	r3, [r3, #6]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d110      	bne.n	800e0e0 <USBD_StdItfReq+0xc0>
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10d      	bne.n	800e0e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 fdf1 	bl	800ecac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e0ca:	e009      	b.n	800e0e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fd21 	bl	800eb16 <USBD_CtlError>
          break;
 800e0d4:	e004      	b.n	800e0e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fd1c 	bl	800eb16 <USBD_CtlError>
          break;
 800e0de:	e000      	b.n	800e0e2 <USBD_StdItfReq+0xc2>
          break;
 800e0e0:	bf00      	nop
      }
      break;
 800e0e2:	e004      	b.n	800e0ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e0e4:	6839      	ldr	r1, [r7, #0]
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fd15 	bl	800eb16 <USBD_CtlError>
      break;
 800e0ec:	bf00      	nop
  }

  return ret;
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	889b      	ldrh	r3, [r3, #4]
 800e10a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e114:	2b40      	cmp	r3, #64	@ 0x40
 800e116:	d007      	beq.n	800e128 <USBD_StdEPReq+0x30>
 800e118:	2b40      	cmp	r3, #64	@ 0x40
 800e11a:	f200 817f 	bhi.w	800e41c <USBD_StdEPReq+0x324>
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d02a      	beq.n	800e178 <USBD_StdEPReq+0x80>
 800e122:	2b20      	cmp	r3, #32
 800e124:	f040 817a 	bne.w	800e41c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e128:	7bbb      	ldrb	r3, [r7, #14]
 800e12a:	4619      	mov	r1, r3
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff fe85 	bl	800de3c <USBD_CoreFindEP>
 800e132:	4603      	mov	r3, r0
 800e134:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e136:	7b7b      	ldrb	r3, [r7, #13]
 800e138:	2bff      	cmp	r3, #255	@ 0xff
 800e13a:	f000 8174 	beq.w	800e426 <USBD_StdEPReq+0x32e>
 800e13e:	7b7b      	ldrb	r3, [r7, #13]
 800e140:	2b00      	cmp	r3, #0
 800e142:	f040 8170 	bne.w	800e426 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e146:	7b7a      	ldrb	r2, [r7, #13]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e14e:	7b7a      	ldrb	r2, [r7, #13]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	32ae      	adds	r2, #174	@ 0xae
 800e154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 8163 	beq.w	800e426 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e160:	7b7a      	ldrb	r2, [r7, #13]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	32ae      	adds	r2, #174	@ 0xae
 800e166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	4798      	blx	r3
 800e172:	4603      	mov	r3, r0
 800e174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e176:	e156      	b.n	800e426 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	785b      	ldrb	r3, [r3, #1]
 800e17c:	2b03      	cmp	r3, #3
 800e17e:	d008      	beq.n	800e192 <USBD_StdEPReq+0x9a>
 800e180:	2b03      	cmp	r3, #3
 800e182:	f300 8145 	bgt.w	800e410 <USBD_StdEPReq+0x318>
 800e186:	2b00      	cmp	r3, #0
 800e188:	f000 809b 	beq.w	800e2c2 <USBD_StdEPReq+0x1ca>
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d03c      	beq.n	800e20a <USBD_StdEPReq+0x112>
 800e190:	e13e      	b.n	800e410 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b02      	cmp	r3, #2
 800e19c:	d002      	beq.n	800e1a4 <USBD_StdEPReq+0xac>
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d016      	beq.n	800e1d0 <USBD_StdEPReq+0xd8>
 800e1a2:	e02c      	b.n	800e1fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1a4:	7bbb      	ldrb	r3, [r7, #14]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00d      	beq.n	800e1c6 <USBD_StdEPReq+0xce>
 800e1aa:	7bbb      	ldrb	r3, [r7, #14]
 800e1ac:	2b80      	cmp	r3, #128	@ 0x80
 800e1ae:	d00a      	beq.n	800e1c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1b0:	7bbb      	ldrb	r3, [r7, #14]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 fe3b 	bl	800fe30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1ba:	2180      	movs	r1, #128	@ 0x80
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f001 fe37 	bl	800fe30 <USBD_LL_StallEP>
 800e1c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1c4:	e020      	b.n	800e208 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fca4 	bl	800eb16 <USBD_CtlError>
              break;
 800e1ce:	e01b      	b.n	800e208 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	885b      	ldrh	r3, [r3, #2]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10e      	bne.n	800e1f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1d8:	7bbb      	ldrb	r3, [r7, #14]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00b      	beq.n	800e1f6 <USBD_StdEPReq+0xfe>
 800e1de:	7bbb      	ldrb	r3, [r7, #14]
 800e1e0:	2b80      	cmp	r3, #128	@ 0x80
 800e1e2:	d008      	beq.n	800e1f6 <USBD_StdEPReq+0xfe>
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	88db      	ldrh	r3, [r3, #6]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d104      	bne.n	800e1f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1ec:	7bbb      	ldrb	r3, [r7, #14]
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f001 fe1d 	bl	800fe30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fd58 	bl	800ecac <USBD_CtlSendStatus>

              break;
 800e1fc:	e004      	b.n	800e208 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 fc88 	bl	800eb16 <USBD_CtlError>
              break;
 800e206:	bf00      	nop
          }
          break;
 800e208:	e107      	b.n	800e41a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b02      	cmp	r3, #2
 800e214:	d002      	beq.n	800e21c <USBD_StdEPReq+0x124>
 800e216:	2b03      	cmp	r3, #3
 800e218:	d016      	beq.n	800e248 <USBD_StdEPReq+0x150>
 800e21a:	e04b      	b.n	800e2b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e21c:	7bbb      	ldrb	r3, [r7, #14]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00d      	beq.n	800e23e <USBD_StdEPReq+0x146>
 800e222:	7bbb      	ldrb	r3, [r7, #14]
 800e224:	2b80      	cmp	r3, #128	@ 0x80
 800e226:	d00a      	beq.n	800e23e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e228:	7bbb      	ldrb	r3, [r7, #14]
 800e22a:	4619      	mov	r1, r3
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f001 fdff 	bl	800fe30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e232:	2180      	movs	r1, #128	@ 0x80
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f001 fdfb 	bl	800fe30 <USBD_LL_StallEP>
 800e23a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e23c:	e040      	b.n	800e2c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fc68 	bl	800eb16 <USBD_CtlError>
              break;
 800e246:	e03b      	b.n	800e2c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	885b      	ldrh	r3, [r3, #2]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d136      	bne.n	800e2be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e250:	7bbb      	ldrb	r3, [r7, #14]
 800e252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e256:	2b00      	cmp	r3, #0
 800e258:	d004      	beq.n	800e264 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	4619      	mov	r1, r3
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f001 fe05 	bl	800fe6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 fd21 	bl	800ecac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e26a:	7bbb      	ldrb	r3, [r7, #14]
 800e26c:	4619      	mov	r1, r3
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7ff fde4 	bl	800de3c <USBD_CoreFindEP>
 800e274:	4603      	mov	r3, r0
 800e276:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e278:	7b7b      	ldrb	r3, [r7, #13]
 800e27a:	2bff      	cmp	r3, #255	@ 0xff
 800e27c:	d01f      	beq.n	800e2be <USBD_StdEPReq+0x1c6>
 800e27e:	7b7b      	ldrb	r3, [r7, #13]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d11c      	bne.n	800e2be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e284:	7b7a      	ldrb	r2, [r7, #13]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e28c:	7b7a      	ldrb	r2, [r7, #13]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	32ae      	adds	r2, #174	@ 0xae
 800e292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d010      	beq.n	800e2be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e29c:	7b7a      	ldrb	r2, [r7, #13]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	32ae      	adds	r2, #174	@ 0xae
 800e2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	4798      	blx	r3
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e2b2:	e004      	b.n	800e2be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e2b4:	6839      	ldr	r1, [r7, #0]
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 fc2d 	bl	800eb16 <USBD_CtlError>
              break;
 800e2bc:	e000      	b.n	800e2c0 <USBD_StdEPReq+0x1c8>
              break;
 800e2be:	bf00      	nop
          }
          break;
 800e2c0:	e0ab      	b.n	800e41a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d002      	beq.n	800e2d4 <USBD_StdEPReq+0x1dc>
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d032      	beq.n	800e338 <USBD_StdEPReq+0x240>
 800e2d2:	e097      	b.n	800e404 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d007      	beq.n	800e2ea <USBD_StdEPReq+0x1f2>
 800e2da:	7bbb      	ldrb	r3, [r7, #14]
 800e2dc:	2b80      	cmp	r3, #128	@ 0x80
 800e2de:	d004      	beq.n	800e2ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fc17 	bl	800eb16 <USBD_CtlError>
                break;
 800e2e8:	e091      	b.n	800e40e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	da0b      	bge.n	800e30a <USBD_StdEPReq+0x212>
 800e2f2:	7bbb      	ldrb	r3, [r7, #14]
 800e2f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	3310      	adds	r3, #16
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	4413      	add	r3, r2
 800e306:	3304      	adds	r3, #4
 800e308:	e00b      	b.n	800e322 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e30a:	7bbb      	ldrb	r3, [r7, #14]
 800e30c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e310:	4613      	mov	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	4413      	add	r3, r2
 800e320:	3304      	adds	r3, #4
 800e322:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	2200      	movs	r2, #0
 800e328:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	2202      	movs	r2, #2
 800e32e:	4619      	mov	r1, r3
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fc61 	bl	800ebf8 <USBD_CtlSendData>
              break;
 800e336:	e06a      	b.n	800e40e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	da11      	bge.n	800e364 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e340:	7bbb      	ldrb	r3, [r7, #14]
 800e342:	f003 020f 	and.w	r2, r3, #15
 800e346:	6879      	ldr	r1, [r7, #4]
 800e348:	4613      	mov	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	4413      	add	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	440b      	add	r3, r1
 800e352:	3324      	adds	r3, #36	@ 0x24
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d117      	bne.n	800e38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e35a:	6839      	ldr	r1, [r7, #0]
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 fbda 	bl	800eb16 <USBD_CtlError>
                  break;
 800e362:	e054      	b.n	800e40e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e364:	7bbb      	ldrb	r3, [r7, #14]
 800e366:	f003 020f 	and.w	r2, r3, #15
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	4613      	mov	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4413      	add	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	440b      	add	r3, r1
 800e376:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d104      	bne.n	800e38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fbc7 	bl	800eb16 <USBD_CtlError>
                  break;
 800e388:	e041      	b.n	800e40e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e38a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	da0b      	bge.n	800e3aa <USBD_StdEPReq+0x2b2>
 800e392:	7bbb      	ldrb	r3, [r7, #14]
 800e394:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e398:	4613      	mov	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4413      	add	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	3310      	adds	r3, #16
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	e00b      	b.n	800e3c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3aa:	7bbb      	ldrb	r3, [r7, #14]
 800e3ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	4413      	add	r3, r2
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e3c4:	7bbb      	ldrb	r3, [r7, #14]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d002      	beq.n	800e3d0 <USBD_StdEPReq+0x2d8>
 800e3ca:	7bbb      	ldrb	r3, [r7, #14]
 800e3cc:	2b80      	cmp	r3, #128	@ 0x80
 800e3ce:	d103      	bne.n	800e3d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	e00e      	b.n	800e3f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3d8:	7bbb      	ldrb	r3, [r7, #14]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f001 fd65 	bl	800feac <USBD_LL_IsStallEP>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d003      	beq.n	800e3f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	601a      	str	r2, [r3, #0]
 800e3ee:	e002      	b.n	800e3f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	2202      	movs	r2, #2
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 fbfb 	bl	800ebf8 <USBD_CtlSendData>
              break;
 800e402:	e004      	b.n	800e40e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fb85 	bl	800eb16 <USBD_CtlError>
              break;
 800e40c:	bf00      	nop
          }
          break;
 800e40e:	e004      	b.n	800e41a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e410:	6839      	ldr	r1, [r7, #0]
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fb7f 	bl	800eb16 <USBD_CtlError>
          break;
 800e418:	bf00      	nop
      }
      break;
 800e41a:	e005      	b.n	800e428 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fb79 	bl	800eb16 <USBD_CtlError>
      break;
 800e424:	e000      	b.n	800e428 <USBD_StdEPReq+0x330>
      break;
 800e426:	bf00      	nop
  }

  return ret;
 800e428:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e43e:	2300      	movs	r3, #0
 800e440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e446:	2300      	movs	r3, #0
 800e448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	885b      	ldrh	r3, [r3, #2]
 800e44e:	0a1b      	lsrs	r3, r3, #8
 800e450:	b29b      	uxth	r3, r3
 800e452:	3b01      	subs	r3, #1
 800e454:	2b0e      	cmp	r3, #14
 800e456:	f200 8152 	bhi.w	800e6fe <USBD_GetDescriptor+0x2ca>
 800e45a:	a201      	add	r2, pc, #4	@ (adr r2, 800e460 <USBD_GetDescriptor+0x2c>)
 800e45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e460:	0800e4d1 	.word	0x0800e4d1
 800e464:	0800e4e9 	.word	0x0800e4e9
 800e468:	0800e529 	.word	0x0800e529
 800e46c:	0800e6ff 	.word	0x0800e6ff
 800e470:	0800e6ff 	.word	0x0800e6ff
 800e474:	0800e69f 	.word	0x0800e69f
 800e478:	0800e6cb 	.word	0x0800e6cb
 800e47c:	0800e6ff 	.word	0x0800e6ff
 800e480:	0800e6ff 	.word	0x0800e6ff
 800e484:	0800e6ff 	.word	0x0800e6ff
 800e488:	0800e6ff 	.word	0x0800e6ff
 800e48c:	0800e6ff 	.word	0x0800e6ff
 800e490:	0800e6ff 	.word	0x0800e6ff
 800e494:	0800e6ff 	.word	0x0800e6ff
 800e498:	0800e49d 	.word	0x0800e49d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4a2:	69db      	ldr	r3, [r3, #28]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00b      	beq.n	800e4c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4ae:	69db      	ldr	r3, [r3, #28]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	7c12      	ldrb	r2, [r2, #16]
 800e4b4:	f107 0108 	add.w	r1, r7, #8
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	4798      	blx	r3
 800e4bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4be:	e126      	b.n	800e70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fb27 	bl	800eb16 <USBD_CtlError>
        err++;
 800e4c8:	7afb      	ldrb	r3, [r7, #11]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	72fb      	strb	r3, [r7, #11]
      break;
 800e4ce:	e11e      	b.n	800e70e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	7c12      	ldrb	r2, [r2, #16]
 800e4dc:	f107 0108 	add.w	r1, r7, #8
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	4798      	blx	r3
 800e4e4:	60f8      	str	r0, [r7, #12]
      break;
 800e4e6:	e112      	b.n	800e70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	7c1b      	ldrb	r3, [r3, #16]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d10d      	bne.n	800e50c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f8:	f107 0208 	add.w	r2, r7, #8
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	4798      	blx	r3
 800e500:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3301      	adds	r3, #1
 800e506:	2202      	movs	r2, #2
 800e508:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e50a:	e100      	b.n	800e70e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e514:	f107 0208 	add.w	r2, r7, #8
 800e518:	4610      	mov	r0, r2
 800e51a:	4798      	blx	r3
 800e51c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3301      	adds	r3, #1
 800e522:	2202      	movs	r2, #2
 800e524:	701a      	strb	r2, [r3, #0]
      break;
 800e526:	e0f2      	b.n	800e70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	885b      	ldrh	r3, [r3, #2]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b05      	cmp	r3, #5
 800e530:	f200 80ac 	bhi.w	800e68c <USBD_GetDescriptor+0x258>
 800e534:	a201      	add	r2, pc, #4	@ (adr r2, 800e53c <USBD_GetDescriptor+0x108>)
 800e536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53a:	bf00      	nop
 800e53c:	0800e555 	.word	0x0800e555
 800e540:	0800e589 	.word	0x0800e589
 800e544:	0800e5bd 	.word	0x0800e5bd
 800e548:	0800e5f1 	.word	0x0800e5f1
 800e54c:	0800e625 	.word	0x0800e625
 800e550:	0800e659 	.word	0x0800e659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00b      	beq.n	800e578 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	7c12      	ldrb	r2, [r2, #16]
 800e56c:	f107 0108 	add.w	r1, r7, #8
 800e570:	4610      	mov	r0, r2
 800e572:	4798      	blx	r3
 800e574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e576:	e091      	b.n	800e69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e578:	6839      	ldr	r1, [r7, #0]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 facb 	bl	800eb16 <USBD_CtlError>
            err++;
 800e580:	7afb      	ldrb	r3, [r7, #11]
 800e582:	3301      	adds	r3, #1
 800e584:	72fb      	strb	r3, [r7, #11]
          break;
 800e586:	e089      	b.n	800e69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00b      	beq.n	800e5ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	7c12      	ldrb	r2, [r2, #16]
 800e5a0:	f107 0108 	add.w	r1, r7, #8
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
 800e5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5aa:	e077      	b.n	800e69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fab1 	bl	800eb16 <USBD_CtlError>
            err++;
 800e5b4:	7afb      	ldrb	r3, [r7, #11]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ba:	e06f      	b.n	800e69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	7c12      	ldrb	r2, [r2, #16]
 800e5d4:	f107 0108 	add.w	r1, r7, #8
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4798      	blx	r3
 800e5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5de:	e05d      	b.n	800e69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa97 	bl	800eb16 <USBD_CtlError>
            err++;
 800e5e8:	7afb      	ldrb	r3, [r7, #11]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ee:	e055      	b.n	800e69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00b      	beq.n	800e614 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	7c12      	ldrb	r2, [r2, #16]
 800e608:	f107 0108 	add.w	r1, r7, #8
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e612:	e043      	b.n	800e69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e614:	6839      	ldr	r1, [r7, #0]
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 fa7d 	bl	800eb16 <USBD_CtlError>
            err++;
 800e61c:	7afb      	ldrb	r3, [r7, #11]
 800e61e:	3301      	adds	r3, #1
 800e620:	72fb      	strb	r3, [r7, #11]
          break;
 800e622:	e03b      	b.n	800e69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e62a:	695b      	ldr	r3, [r3, #20]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00b      	beq.n	800e648 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e636:	695b      	ldr	r3, [r3, #20]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	7c12      	ldrb	r2, [r2, #16]
 800e63c:	f107 0108 	add.w	r1, r7, #8
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
 800e644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e646:	e029      	b.n	800e69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fa63 	bl	800eb16 <USBD_CtlError>
            err++;
 800e650:	7afb      	ldrb	r3, [r7, #11]
 800e652:	3301      	adds	r3, #1
 800e654:	72fb      	strb	r3, [r7, #11]
          break;
 800e656:	e021      	b.n	800e69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00b      	beq.n	800e67c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e66a:	699b      	ldr	r3, [r3, #24]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	7c12      	ldrb	r2, [r2, #16]
 800e670:	f107 0108 	add.w	r1, r7, #8
 800e674:	4610      	mov	r0, r2
 800e676:	4798      	blx	r3
 800e678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e67a:	e00f      	b.n	800e69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fa49 	bl	800eb16 <USBD_CtlError>
            err++;
 800e684:	7afb      	ldrb	r3, [r7, #11]
 800e686:	3301      	adds	r3, #1
 800e688:	72fb      	strb	r3, [r7, #11]
          break;
 800e68a:	e007      	b.n	800e69c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e68c:	6839      	ldr	r1, [r7, #0]
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 fa41 	bl	800eb16 <USBD_CtlError>
          err++;
 800e694:	7afb      	ldrb	r3, [r7, #11]
 800e696:	3301      	adds	r3, #1
 800e698:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e69a:	bf00      	nop
      }
      break;
 800e69c:	e037      	b.n	800e70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	7c1b      	ldrb	r3, [r3, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d109      	bne.n	800e6ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6ae:	f107 0208 	add.w	r2, r7, #8
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	4798      	blx	r3
 800e6b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6b8:	e029      	b.n	800e70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fa2a 	bl	800eb16 <USBD_CtlError>
        err++;
 800e6c2:	7afb      	ldrb	r3, [r7, #11]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e6c8:	e021      	b.n	800e70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	7c1b      	ldrb	r3, [r3, #16]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10d      	bne.n	800e6ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6da:	f107 0208 	add.w	r2, r7, #8
 800e6de:	4610      	mov	r0, r2
 800e6e0:	4798      	blx	r3
 800e6e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	2207      	movs	r2, #7
 800e6ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6ec:	e00f      	b.n	800e70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 fa10 	bl	800eb16 <USBD_CtlError>
        err++;
 800e6f6:	7afb      	ldrb	r3, [r7, #11]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	72fb      	strb	r3, [r7, #11]
      break;
 800e6fc:	e007      	b.n	800e70e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e6fe:	6839      	ldr	r1, [r7, #0]
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 fa08 	bl	800eb16 <USBD_CtlError>
      err++;
 800e706:	7afb      	ldrb	r3, [r7, #11]
 800e708:	3301      	adds	r3, #1
 800e70a:	72fb      	strb	r3, [r7, #11]
      break;
 800e70c:	bf00      	nop
  }

  if (err != 0U)
 800e70e:	7afb      	ldrb	r3, [r7, #11]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d11e      	bne.n	800e752 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	88db      	ldrh	r3, [r3, #6]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d016      	beq.n	800e74a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e71c:	893b      	ldrh	r3, [r7, #8]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00e      	beq.n	800e740 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	88da      	ldrh	r2, [r3, #6]
 800e726:	893b      	ldrh	r3, [r7, #8]
 800e728:	4293      	cmp	r3, r2
 800e72a:	bf28      	it	cs
 800e72c:	4613      	movcs	r3, r2
 800e72e:	b29b      	uxth	r3, r3
 800e730:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e732:	893b      	ldrh	r3, [r7, #8]
 800e734:	461a      	mov	r2, r3
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fa5d 	bl	800ebf8 <USBD_CtlSendData>
 800e73e:	e009      	b.n	800e754 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f9e7 	bl	800eb16 <USBD_CtlError>
 800e748:	e004      	b.n	800e754 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 faae 	bl	800ecac <USBD_CtlSendStatus>
 800e750:	e000      	b.n	800e754 <USBD_GetDescriptor+0x320>
    return;
 800e752:	bf00      	nop
  }
}
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop

0800e75c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	889b      	ldrh	r3, [r3, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d131      	bne.n	800e7d2 <USBD_SetAddress+0x76>
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	88db      	ldrh	r3, [r3, #6]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d12d      	bne.n	800e7d2 <USBD_SetAddress+0x76>
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	885b      	ldrh	r3, [r3, #2]
 800e77a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e77c:	d829      	bhi.n	800e7d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	885b      	ldrh	r3, [r3, #2]
 800e782:	b2db      	uxtb	r3, r3
 800e784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e790:	b2db      	uxtb	r3, r3
 800e792:	2b03      	cmp	r3, #3
 800e794:	d104      	bne.n	800e7a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f9bc 	bl	800eb16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e79e:	e01d      	b.n	800e7dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7bfa      	ldrb	r2, [r7, #15]
 800e7a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f001 fba9 	bl	800ff04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fa7a 	bl	800ecac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d004      	beq.n	800e7c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2202      	movs	r2, #2
 800e7c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7c6:	e009      	b.n	800e7dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7d0:	e004      	b.n	800e7dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e7d2:	6839      	ldr	r1, [r7, #0]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 f99e 	bl	800eb16 <USBD_CtlError>
  }
}
 800e7da:	bf00      	nop
 800e7dc:	bf00      	nop
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	885b      	ldrh	r3, [r3, #2]
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	4b4e      	ldr	r3, [pc, #312]	@ (800e934 <USBD_SetConfig+0x150>)
 800e7fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7fc:	4b4d      	ldr	r3, [pc, #308]	@ (800e934 <USBD_SetConfig+0x150>)
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	2b01      	cmp	r3, #1
 800e802:	d905      	bls.n	800e810 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f985 	bl	800eb16 <USBD_CtlError>
    return USBD_FAIL;
 800e80c:	2303      	movs	r3, #3
 800e80e:	e08c      	b.n	800e92a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e816:	b2db      	uxtb	r3, r3
 800e818:	2b02      	cmp	r3, #2
 800e81a:	d002      	beq.n	800e822 <USBD_SetConfig+0x3e>
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d029      	beq.n	800e874 <USBD_SetConfig+0x90>
 800e820:	e075      	b.n	800e90e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e822:	4b44      	ldr	r3, [pc, #272]	@ (800e934 <USBD_SetConfig+0x150>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d020      	beq.n	800e86c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e82a:	4b42      	ldr	r3, [pc, #264]	@ (800e934 <USBD_SetConfig+0x150>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e834:	4b3f      	ldr	r3, [pc, #252]	@ (800e934 <USBD_SetConfig+0x150>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	4619      	mov	r1, r3
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7fe ffb9 	bl	800d7b2 <USBD_SetClassConfig>
 800e840:	4603      	mov	r3, r0
 800e842:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d008      	beq.n	800e85c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e84a:	6839      	ldr	r1, [r7, #0]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 f962 	bl	800eb16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2202      	movs	r2, #2
 800e856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e85a:	e065      	b.n	800e928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 fa25 	bl	800ecac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2203      	movs	r2, #3
 800e866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e86a:	e05d      	b.n	800e928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fa1d 	bl	800ecac <USBD_CtlSendStatus>
      break;
 800e872:	e059      	b.n	800e928 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e874:	4b2f      	ldr	r3, [pc, #188]	@ (800e934 <USBD_SetConfig+0x150>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d112      	bne.n	800e8a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2202      	movs	r2, #2
 800e880:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e884:	4b2b      	ldr	r3, [pc, #172]	@ (800e934 <USBD_SetConfig+0x150>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	461a      	mov	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e88e:	4b29      	ldr	r3, [pc, #164]	@ (800e934 <USBD_SetConfig+0x150>)
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	4619      	mov	r1, r3
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7fe ffa8 	bl	800d7ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 fa06 	bl	800ecac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8a0:	e042      	b.n	800e928 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e8a2:	4b24      	ldr	r3, [pc, #144]	@ (800e934 <USBD_SetConfig+0x150>)
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d02a      	beq.n	800e906 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7fe ff96 	bl	800d7ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e8be:	4b1d      	ldr	r3, [pc, #116]	@ (800e934 <USBD_SetConfig+0x150>)
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e934 <USBD_SetConfig+0x150>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7fe ff6f 	bl	800d7b2 <USBD_SetClassConfig>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e8d8:	7bfb      	ldrb	r3, [r7, #15]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00f      	beq.n	800e8fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e8de:	6839      	ldr	r1, [r7, #0]
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f918 	bl	800eb16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f7fe ff7b 	bl	800d7ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2202      	movs	r2, #2
 800e8f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e8fc:	e014      	b.n	800e928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 f9d4 	bl	800ecac <USBD_CtlSendStatus>
      break;
 800e904:	e010      	b.n	800e928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 f9d0 	bl	800ecac <USBD_CtlSendStatus>
      break;
 800e90c:	e00c      	b.n	800e928 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e90e:	6839      	ldr	r1, [r7, #0]
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f900 	bl	800eb16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e916:	4b07      	ldr	r3, [pc, #28]	@ (800e934 <USBD_SetConfig+0x150>)
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	4619      	mov	r1, r3
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f7fe ff64 	bl	800d7ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e922:	2303      	movs	r3, #3
 800e924:	73fb      	strb	r3, [r7, #15]
      break;
 800e926:	bf00      	nop
  }

  return ret;
 800e928:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	240003b4 	.word	0x240003b4

0800e938 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	88db      	ldrh	r3, [r3, #6]
 800e946:	2b01      	cmp	r3, #1
 800e948:	d004      	beq.n	800e954 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f8e2 	bl	800eb16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e952:	e023      	b.n	800e99c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	dc02      	bgt.n	800e966 <USBD_GetConfig+0x2e>
 800e960:	2b00      	cmp	r3, #0
 800e962:	dc03      	bgt.n	800e96c <USBD_GetConfig+0x34>
 800e964:	e015      	b.n	800e992 <USBD_GetConfig+0x5a>
 800e966:	2b03      	cmp	r3, #3
 800e968:	d00b      	beq.n	800e982 <USBD_GetConfig+0x4a>
 800e96a:	e012      	b.n	800e992 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	3308      	adds	r3, #8
 800e976:	2201      	movs	r2, #1
 800e978:	4619      	mov	r1, r3
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f93c 	bl	800ebf8 <USBD_CtlSendData>
        break;
 800e980:	e00c      	b.n	800e99c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	3304      	adds	r3, #4
 800e986:	2201      	movs	r2, #1
 800e988:	4619      	mov	r1, r3
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 f934 	bl	800ebf8 <USBD_CtlSendData>
        break;
 800e990:	e004      	b.n	800e99c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e992:	6839      	ldr	r1, [r7, #0]
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 f8be 	bl	800eb16 <USBD_CtlError>
        break;
 800e99a:	bf00      	nop
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	d81e      	bhi.n	800e9fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	88db      	ldrh	r3, [r3, #6]
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d004      	beq.n	800e9ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e9c4:	6839      	ldr	r1, [r7, #0]
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 f8a5 	bl	800eb16 <USBD_CtlError>
        break;
 800e9cc:	e01a      	b.n	800ea04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d005      	beq.n	800e9ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	f043 0202 	orr.w	r2, r3, #2
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	330c      	adds	r3, #12
 800e9ee:	2202      	movs	r2, #2
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 f900 	bl	800ebf8 <USBD_CtlSendData>
      break;
 800e9f8:	e004      	b.n	800ea04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e9fa:	6839      	ldr	r1, [r7, #0]
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 f88a 	bl	800eb16 <USBD_CtlError>
      break;
 800ea02:	bf00      	nop
  }
}
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	885b      	ldrh	r3, [r3, #2]
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d107      	bne.n	800ea2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2201      	movs	r2, #1
 800ea22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f940 	bl	800ecac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ea2c:	e013      	b.n	800ea56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	885b      	ldrh	r3, [r3, #2]
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d10b      	bne.n	800ea4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	889b      	ldrh	r3, [r3, #4]
 800ea3a:	0a1b      	lsrs	r3, r3, #8
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 f930 	bl	800ecac <USBD_CtlSendStatus>
}
 800ea4c:	e003      	b.n	800ea56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f860 	bl	800eb16 <USBD_CtlError>
}
 800ea56:	bf00      	nop
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b082      	sub	sp, #8
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	3b01      	subs	r3, #1
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d80b      	bhi.n	800ea8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	885b      	ldrh	r3, [r3, #2]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d10c      	bne.n	800ea98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f910 	bl	800ecac <USBD_CtlSendStatus>
      }
      break;
 800ea8c:	e004      	b.n	800ea98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 f840 	bl	800eb16 <USBD_CtlError>
      break;
 800ea96:	e000      	b.n	800ea9a <USBD_ClrFeature+0x3c>
      break;
 800ea98:	bf00      	nop
  }
}
 800ea9a:	bf00      	nop
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b084      	sub	sp, #16
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	781a      	ldrb	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	3301      	adds	r3, #1
 800eabc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	781a      	ldrb	r2, [r3, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	3301      	adds	r3, #1
 800eaca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff fa16 	bl	800defe <SWAPBYTE>
 800ead2:	4603      	mov	r3, r0
 800ead4:	461a      	mov	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3301      	adds	r3, #1
 800eade:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	3301      	adds	r3, #1
 800eae4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fa09 	bl	800defe <SWAPBYTE>
 800eaec:	4603      	mov	r3, r0
 800eaee:	461a      	mov	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3301      	adds	r3, #1
 800eafe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7ff f9fc 	bl	800defe <SWAPBYTE>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	80da      	strh	r2, [r3, #6]
}
 800eb0e:	bf00      	nop
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b082      	sub	sp, #8
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb20:	2180      	movs	r1, #128	@ 0x80
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f001 f984 	bl	800fe30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb28:	2100      	movs	r1, #0
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f001 f980 	bl	800fe30 <USBD_LL_StallEP>
}
 800eb30:	bf00      	nop
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eb44:	2300      	movs	r3, #0
 800eb46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d036      	beq.n	800ebbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eb52:	6938      	ldr	r0, [r7, #16]
 800eb54:	f000 f836 	bl	800ebc4 <USBD_GetLen>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb66:	7dfb      	ldrb	r3, [r7, #23]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	7812      	ldrb	r2, [r2, #0]
 800eb70:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb72:	7dfb      	ldrb	r3, [r7, #23]
 800eb74:	3301      	adds	r3, #1
 800eb76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	2203      	movs	r2, #3
 800eb80:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	3301      	adds	r3, #1
 800eb86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb88:	e013      	b.n	800ebb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	4413      	add	r3, r2
 800eb90:	693a      	ldr	r2, [r7, #16]
 800eb92:	7812      	ldrb	r2, [r2, #0]
 800eb94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	613b      	str	r3, [r7, #16]
    idx++;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eba2:	7dfb      	ldrb	r3, [r7, #23]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	4413      	add	r3, r2
 800eba8:	2200      	movs	r2, #0
 800ebaa:	701a      	strb	r2, [r3, #0]
    idx++;
 800ebac:	7dfb      	ldrb	r3, [r7, #23]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1e7      	bne.n	800eb8a <USBD_GetString+0x52>
 800ebba:	e000      	b.n	800ebbe <USBD_GetString+0x86>
    return;
 800ebbc:	bf00      	nop
  }
}
 800ebbe:	3718      	adds	r7, #24
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ebd4:	e005      	b.n	800ebe2 <USBD_GetLen+0x1e>
  {
    len++;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1f5      	bne.n	800ebd6 <USBD_GetLen+0x12>
  }

  return len;
 800ebea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2202      	movs	r2, #2
 800ec08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f001 f98f 	bl	800ff42 <USBD_LL_Transmit>

  return USBD_OK;
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b084      	sub	sp, #16
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	60f8      	str	r0, [r7, #12]
 800ec36:	60b9      	str	r1, [r7, #8]
 800ec38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	2100      	movs	r1, #0
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f001 f97e 	bl	800ff42 <USBD_LL_Transmit>

  return USBD_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2203      	movs	r2, #3
 800ec60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	2100      	movs	r1, #0
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f001 f982 	bl	800ff84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b084      	sub	sp, #16
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	60f8      	str	r0, [r7, #12]
 800ec92:	60b9      	str	r1, [r7, #8]
 800ec94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f001 f971 	bl	800ff84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eca2:	2300      	movs	r3, #0
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2204      	movs	r2, #4
 800ecb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f001 f93d 	bl	800ff42 <USBD_LL_Transmit>

  return USBD_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2205      	movs	r2, #5
 800ecde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ece2:	2300      	movs	r3, #0
 800ece4:	2200      	movs	r2, #0
 800ece6:	2100      	movs	r1, #0
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f001 f94b 	bl	800ff84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127
// 向SSD1306写入一个字节
// dat:要写入的数据/命令
// cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	4603      	mov	r3, r0
 800ed00:	460a      	mov	r2, r1
 800ed02:	71fb      	strb	r3, [r7, #7]
 800ed04:	4613      	mov	r3, r2
 800ed06:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 800ed08:	79bb      	ldrb	r3, [r7, #6]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d005      	beq.n	800ed1a <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); // 命令/数据标志位置为1，则表示传送的是命令字节
 800ed0e:	2201      	movs	r2, #1
 800ed10:	2140      	movs	r1, #64	@ 0x40
 800ed12:	4811      	ldr	r0, [pc, #68]	@ (800ed58 <OLED_WR_Byte+0x60>)
 800ed14:	f7f5 fb5a 	bl	80043cc <HAL_GPIO_WritePin>
 800ed18:	e004      	b.n	800ed24 <OLED_WR_Byte+0x2c>
	}
	else
		OLED_DC_Clr();						 // 命令/数据标志位置为0，则表示传送的是数据字节
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	2140      	movs	r1, #64	@ 0x40
 800ed1e:	480e      	ldr	r0, [pc, #56]	@ (800ed58 <OLED_WR_Byte+0x60>)
 800ed20:	f7f5 fb54 	bl	80043cc <HAL_GPIO_WritePin>
	OLED_CS_Clr();							 // 片选信号为低，表示选中OLED
 800ed24:	2200      	movs	r2, #0
 800ed26:	2102      	movs	r1, #2
 800ed28:	480c      	ldr	r0, [pc, #48]	@ (800ed5c <OLED_WR_Byte+0x64>)
 800ed2a:	f7f5 fb4f 	bl	80043cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); // oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 800ed2e:	1df9      	adds	r1, r7, #7
 800ed30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ed34:	2201      	movs	r2, #1
 800ed36:	480a      	ldr	r0, [pc, #40]	@ (800ed60 <OLED_WR_Byte+0x68>)
 800ed38:	f7fa fdda 	bl	80098f0 <HAL_SPI_Transmit>
	OLED_CS_Set();
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	2102      	movs	r1, #2
 800ed40:	4806      	ldr	r0, [pc, #24]	@ (800ed5c <OLED_WR_Byte+0x64>)
 800ed42:	f7f5 fb43 	bl	80043cc <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800ed46:	2201      	movs	r2, #1
 800ed48:	2140      	movs	r1, #64	@ 0x40
 800ed4a:	4803      	ldr	r0, [pc, #12]	@ (800ed58 <OLED_WR_Byte+0x60>)
 800ed4c:	f7f5 fb3e 	bl	80043cc <HAL_GPIO_WritePin>
}
 800ed50:	bf00      	nop
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	58022000 	.word	0x58022000
 800ed5c:	58020400 	.word	0x58020400
 800ed60:	24000240 	.word	0x24000240

0800ed64 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	460a      	mov	r2, r1
 800ed6e:	71fb      	strb	r3, [r7, #7]
 800ed70:	4613      	mov	r3, r2
 800ed72:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 800ed74:	79bb      	ldrb	r3, [r7, #6]
 800ed76:	3b50      	subs	r3, #80	@ 0x50
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7ff ffbb 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	3302      	adds	r3, #2
 800ed86:	111b      	asrs	r3, r3, #4
 800ed88:	b25b      	sxtb	r3, r3
 800ed8a:	f003 030f 	and.w	r3, r3, #15
 800ed8e:	b25b      	sxtb	r3, r3
 800ed90:	f043 0310 	orr.w	r3, r3, #16
 800ed94:	b25b      	sxtb	r3, r3
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	2100      	movs	r1, #0
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7ff ffac 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 800eda0:	79fb      	ldrb	r3, [r7, #7]
 800eda2:	3302      	adds	r3, #2
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	f003 030f 	and.w	r3, r3, #15
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2100      	movs	r1, #0
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff ffa2 	bl	800ecf8 <OLED_WR_Byte>
}
 800edb4:	bf00      	nop
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD); // 关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD); // DISPLAY OFF
}
// 清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800edc2:	2300      	movs	r3, #0
 800edc4:	71fb      	strb	r3, [r7, #7]
 800edc6:	e01f      	b.n	800ee08 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址
 800edc8:	79fb      	ldrb	r3, [r7, #7]
 800edca:	3b50      	subs	r3, #80	@ 0x50
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2100      	movs	r1, #0
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7ff ff91 	bl	800ecf8 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  // 设置起始列低地址
 800edd6:	2100      	movs	r1, #0
 800edd8:	2002      	movs	r0, #2
 800edda:	f7ff ff8d 	bl	800ecf8 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置起始列高地址
 800edde:	2100      	movs	r1, #0
 800ede0:	2010      	movs	r0, #16
 800ede2:	f7ff ff89 	bl	800ecf8 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800ede6:	2300      	movs	r3, #0
 800ede8:	71bb      	strb	r3, [r7, #6]
 800edea:	e006      	b.n	800edfa <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 800edec:	2101      	movs	r1, #1
 800edee:	2000      	movs	r0, #0
 800edf0:	f7ff ff82 	bl	800ecf8 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800edf4:	79bb      	ldrb	r3, [r7, #6]
 800edf6:	3301      	adds	r3, #1
 800edf8:	71bb      	strb	r3, [r7, #6]
 800edfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	daf4      	bge.n	800edec <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	3301      	adds	r3, #1
 800ee06:	71fb      	strb	r3, [r7, #7]
 800ee08:	79fb      	ldrb	r3, [r7, #7]
 800ee0a:	2b07      	cmp	r3, #7
 800ee0c:	d9dc      	bls.n	800edc8 <OLED_Clear+0xc>
	} // 更新显示
}
 800ee0e:	bf00      	nop
 800ee10:	bf00      	nop
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <OLED_ShowChar>:
// x:0~127
// y:0~6
// mode:0,反白显示；1，正常显示
// size:选择字体大小 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	4603      	mov	r3, r0
 800ee20:	71fb      	strb	r3, [r7, #7]
 800ee22:	460b      	mov	r3, r1
 800ee24:	71bb      	strb	r3, [r7, #6]
 800ee26:	4613      	mov	r3, r2
 800ee28:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	73bb      	strb	r3, [r7, #14]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; // 得到偏移后的值
 800ee32:	797b      	ldrb	r3, [r7, #5]
 800ee34:	3b20      	subs	r3, #32
 800ee36:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 800ee38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	da04      	bge.n	800ee4a <OLED_ShowChar+0x32>
	{
		x = 0;
 800ee40:	2300      	movs	r3, #0
 800ee42:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 800ee44:	79bb      	ldrb	r3, [r7, #6]
 800ee46:	3302      	adds	r3, #2
 800ee48:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 800ee4a:	79ba      	ldrb	r2, [r7, #6]
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	4611      	mov	r1, r2
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff ff87 	bl	800ed64 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 800ee56:	2300      	movs	r3, #0
 800ee58:	73fb      	strb	r3, [r7, #15]
 800ee5a:	e00c      	b.n	800ee76 <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 800ee5c:	7bbb      	ldrb	r3, [r7, #14]
 800ee5e:	011a      	lsls	r2, r3, #4
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	4413      	add	r3, r2
 800ee64:	4a16      	ldr	r2, [pc, #88]	@ (800eec0 <OLED_ShowChar+0xa8>)
 800ee66:	5cd3      	ldrb	r3, [r2, r3]
 800ee68:	2101      	movs	r1, #1
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7ff ff44 	bl	800ecf8 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	3301      	adds	r3, #1
 800ee74:	73fb      	strb	r3, [r7, #15]
 800ee76:	7bfb      	ldrb	r3, [r7, #15]
 800ee78:	2b07      	cmp	r3, #7
 800ee7a:	d9ef      	bls.n	800ee5c <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 800ee7c:	79bb      	ldrb	r3, [r7, #6]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	b2da      	uxtb	r2, r3
 800ee82:	79fb      	ldrb	r3, [r7, #7]
 800ee84:	4611      	mov	r1, r2
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff ff6c 	bl	800ed64 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	73fb      	strb	r3, [r7, #15]
 800ee90:	e00d      	b.n	800eeae <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 800ee92:	7bbb      	ldrb	r3, [r7, #14]
 800ee94:	011a      	lsls	r2, r3, #4
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	4413      	add	r3, r2
 800ee9a:	3308      	adds	r3, #8
 800ee9c:	4a08      	ldr	r2, [pc, #32]	@ (800eec0 <OLED_ShowChar+0xa8>)
 800ee9e:	5cd3      	ldrb	r3, [r2, r3]
 800eea0:	2101      	movs	r1, #1
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7ff ff28 	bl	800ecf8 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	73fb      	strb	r3, [r7, #15]
 800eeae:	7bfb      	ldrb	r3, [r7, #15]
 800eeb0:	2b07      	cmp	r3, #7
 800eeb2:	d9ee      	bls.n	800ee92 <OLED_ShowChar+0x7a>
	{
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);
	}
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	08010dc0 	.word	0x08010dc0

0800eec4 <OLED_ShowString>:
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
	}
}
// 显示一个字符串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	603a      	str	r2, [r7, #0]
 800eece:	71fb      	strb	r3, [r7, #7]
 800eed0:	460b      	mov	r3, r1
 800eed2:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0;
 800eed4:	2300      	movs	r3, #0
 800eed6:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800eed8:	e016      	b.n	800ef08 <OLED_ShowString+0x44>
	{
		OLED_ShowChar(x, y, chr[j]);
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	4413      	add	r3, r2
 800eee0:	781a      	ldrb	r2, [r3, #0]
 800eee2:	79b9      	ldrb	r1, [r7, #6]
 800eee4:	79fb      	ldrb	r3, [r7, #7]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff ff96 	bl	800ee18 <OLED_ShowChar>
		x += 8;
 800eeec:	79fb      	ldrb	r3, [r7, #7]
 800eeee:	3308      	adds	r3, #8
 800eef0:	71fb      	strb	r3, [r7, #7]
		if (x > 120)
 800eef2:	79fb      	ldrb	r3, [r7, #7]
 800eef4:	2b78      	cmp	r3, #120	@ 0x78
 800eef6:	d904      	bls.n	800ef02 <OLED_ShowString+0x3e>
		{
			x = 0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	71fb      	strb	r3, [r7, #7]
			y += 2;
 800eefc:	79bb      	ldrb	r3, [r7, #6]
 800eefe:	3302      	adds	r3, #2
 800ef00:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
 800ef04:	3301      	adds	r3, #1
 800ef06:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d1e2      	bne.n	800eeda <OLED_ShowString+0x16>
	}
}
 800ef14:	bf00      	nop
 800ef16:	bf00      	nop
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <OLED_Init>:
	}
}

// 初始化SSD1306
void OLED_Init(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	af00      	add	r7, sp, #0
	// 复位OLED
	OLED_RST_Clr(); // 拉低复位引脚
 800ef24:	2200      	movs	r2, #0
 800ef26:	2120      	movs	r1, #32
 800ef28:	4841      	ldr	r0, [pc, #260]	@ (800f030 <OLED_Init+0x110>)
 800ef2a:	f7f5 fa4f 	bl	80043cc <HAL_GPIO_WritePin>
	HAL_Delay(200); // 延时200毫秒
 800ef2e:	20c8      	movs	r0, #200	@ 0xc8
 800ef30:	f7f2 fcac 	bl	800188c <HAL_Delay>
	OLED_RST_Set(); // 拉高复位引脚
 800ef34:	2201      	movs	r2, #1
 800ef36:	2120      	movs	r1, #32
 800ef38:	483d      	ldr	r0, [pc, #244]	@ (800f030 <OLED_Init+0x110>)
 800ef3a:	f7f5 fa47 	bl	80043cc <HAL_GPIO_WritePin>

	// 关闭OLED面板
	OLED_WR_Byte(0xAE, OLED_CMD); // 关闭面板指令
 800ef3e:	2100      	movs	r1, #0
 800ef40:	20ae      	movs	r0, #174	@ 0xae
 800ef42:	f7ff fed9 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // 设置低列地址
 800ef46:	2100      	movs	r1, #0
 800ef48:	2002      	movs	r0, #2
 800ef4a:	f7ff fed5 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
 800ef4e:	2100      	movs	r1, #0
 800ef50:	2010      	movs	r0, #16
 800ef52:	f7ff fed1 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行地址，映射RAM显示起始行（0x00~0x3F）
 800ef56:	2100      	movs	r1, #0
 800ef58:	2040      	movs	r0, #64	@ 0x40
 800ef5a:	f7ff fecd 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); // 设置对比度控制寄存器
 800ef5e:	2100      	movs	r1, #0
 800ef60:	2081      	movs	r0, #129	@ 0x81
 800ef62:	f7ff fec9 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // 设置SEG输出电流亮度
 800ef66:	2100      	movs	r1, #0
 800ef68:	20cf      	movs	r0, #207	@ 0xcf
 800ef6a:	f7ff fec5 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // 设置SEG/列映射，0Xa0左右反置，0Xa1正常
 800ef6e:	2100      	movs	r1, #0
 800ef70:	20a1      	movs	r0, #161	@ 0xa1
 800ef72:	f7ff fec1 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // 设置COM/行扫描方向，0Xc0上下反置，0Xc8正常
 800ef76:	2100      	movs	r1, #0
 800ef78:	20c8      	movs	r0, #200	@ 0xc8
 800ef7a:	f7ff febd 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 设置正常显示
 800ef7e:	2100      	movs	r1, #0
 800ef80:	20a6      	movs	r0, #166	@ 0xa6
 800ef82:	f7ff feb9 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比（1到64）
 800ef86:	2100      	movs	r1, #0
 800ef88:	20a8      	movs	r0, #168	@ 0xa8
 800ef8a:	f7ff feb5 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); // 1/64 duty
 800ef8e:	2100      	movs	r1, #0
 800ef90:	203f      	movs	r0, #63	@ 0x3f
 800ef92:	f7ff feb1 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // 设置显示偏移，移动映射RAM计数器（0x00~0x3F）
 800ef96:	2100      	movs	r1, #0
 800ef98:	20d3      	movs	r0, #211	@ 0xd3
 800ef9a:	f7ff fead 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); // 不偏移
 800ef9e:	2100      	movs	r1, #0
 800efa0:	2000      	movs	r0, #0
 800efa2:	f7ff fea9 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); // 设置显示时钟分频比/振荡器频率
 800efa6:	2100      	movs	r1, #0
 800efa8:	20d5      	movs	r0, #213	@ 0xd5
 800efaa:	f7ff fea5 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); // 设置分频比，设置时钟为100帧/秒
 800efae:	2100      	movs	r1, #0
 800efb0:	2080      	movs	r0, #128	@ 0x80
 800efb2:	f7ff fea1 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // 设置预充电周期
 800efb6:	2100      	movs	r1, #0
 800efb8:	20d9      	movs	r0, #217	@ 0xd9
 800efba:	f7ff fe9d 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // 设置预充电为15个时钟，放电为1个时钟
 800efbe:	2100      	movs	r1, #0
 800efc0:	20f1      	movs	r0, #241	@ 0xf1
 800efc2:	f7ff fe99 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // 设置COM引脚硬件配置
 800efc6:	2100      	movs	r1, #0
 800efc8:	20da      	movs	r0, #218	@ 0xda
 800efca:	f7ff fe95 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800efce:	2100      	movs	r1, #0
 800efd0:	2012      	movs	r0, #18
 800efd2:	f7ff fe91 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // 设置vcomh
 800efd6:	2100      	movs	r1, #0
 800efd8:	20db      	movs	r0, #219	@ 0xdb
 800efda:	f7ff fe8d 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置VCOM取消电平
 800efde:	2100      	movs	r1, #0
 800efe0:	2040      	movs	r0, #64	@ 0x40
 800efe2:	f7ff fe89 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // 设置页面寻址模式（0x00/0x01/0x02）
 800efe6:	2100      	movs	r1, #0
 800efe8:	2020      	movs	r0, #32
 800efea:	f7ff fe85 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);
 800efee:	2100      	movs	r1, #0
 800eff0:	2002      	movs	r0, #2
 800eff2:	f7ff fe81 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); // 设置充电泵使能/禁用
 800eff6:	2100      	movs	r1, #0
 800eff8:	208d      	movs	r0, #141	@ 0x8d
 800effa:	f7ff fe7d 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // 设置（0x10）禁用
 800effe:	2100      	movs	r1, #0
 800f000:	2014      	movs	r0, #20
 800f002:	f7ff fe79 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // 禁用整个显示（0xa4/0xa5）
 800f006:	2100      	movs	r1, #0
 800f008:	20a4      	movs	r0, #164	@ 0xa4
 800f00a:	f7ff fe75 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 禁用反相显示（0xa6/a7）
 800f00e:	2100      	movs	r1, #0
 800f010:	20a6      	movs	r0, #166	@ 0xa6
 800f012:	f7ff fe71 	bl	800ecf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // 打开OLED面板
 800f016:	2100      	movs	r1, #0
 800f018:	20af      	movs	r0, #175	@ 0xaf
 800f01a:	f7ff fe6d 	bl	800ecf8 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*显示开*/
 800f01e:	2100      	movs	r1, #0
 800f020:	20af      	movs	r0, #175	@ 0xaf
 800f022:	f7ff fe69 	bl	800ecf8 <OLED_WR_Byte>
	OLED_Clear();				  // 清除显示
 800f026:	f7ff fec9 	bl	800edbc <OLED_Clear>
}
 800f02a:	bf00      	nop
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	58020800 	.word	0x58020800

0800f034 <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	ed87 0a01 	vstr	s0, [r7, #4]
 800f042:	4613      	mov	r3, r2
 800f044:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f04f 0200 	mov.w	r2, #0
 800f04c:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f04f 0200 	mov.w	r2, #0
 800f054:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f04f 0200 	mov.w	r2, #0
 800f05c:	609a      	str	r2, [r3, #8]

    signal->sogi_d_1 = 0.f;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f04f 0200 	mov.w	r2, #0
 800f064:	611a      	str	r2, [r3, #16]
    signal->sogi_d_2 = 0.f;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f04f 0200 	mov.w	r2, #0
 800f06c:	615a      	str	r2, [r3, #20]

    signal->sogi_q_1 = 0.f;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f04f 0200 	mov.w	r2, #0
 800f074:	61da      	str	r2, [r3, #28]
    signal->sogi_q_2 = 0.f;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f04f 0200 	mov.w	r2, #0
 800f07c:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f04f 0200 	mov.w	r2, #0
 800f084:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 800f086:	edd7 7a01 	vldr	s15, [r7, #4]
 800f08a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f1f0 <pll_Init+0x1bc>
 800f08e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 800f098:	887b      	ldrh	r3, [r7, #2]
 800f09a:	ee07 3a90 	vmov	s15, r3
 800f09e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	4a50      	ldr	r2, [pc, #320]	@ (800f1f4 <pll_Init+0x1c0>)
 800f0b4:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	f04f 0200 	mov.w	r2, #0
 800f0bc:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	edd3 7a00 	vldr	s15, [r3]
 800f0c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f0c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	edd3 7a02 	vldr	s15, [r3, #8]
 800f0e2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	edd3 7a00 	vldr	s15, [r3]
 800f0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	ed93 7a00 	vldr	s14, [r3]
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	edd3 7a01 	vldr	s15, [r3, #4]
 800f10c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	edd3 7a00 	vldr	s15, [r3]
 800f116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f120:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f13c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f140:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f144:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f158:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f15c:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800f160:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f170:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f174:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f17c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f192:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f196:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f19a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800f1aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1ae:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800f1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f1b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	4a0d      	ldr	r2, [pc, #52]	@ (800f1f8 <pll_Init+0x1c4>)
 800f1c4:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	4a0c      	ldr	r2, [pc, #48]	@ (800f1fc <pll_Init+0x1c8>)
 800f1ca:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	f04f 0200 	mov.w	r2, #0
 800f1d2:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f04f 0200 	mov.w	r2, #0
 800f1da:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f04f 0200 	mov.w	r2, #0
 800f1e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800f1e4:	bf00      	nop
 800f1e6:	3714      	adds	r7, #20
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	40c90fdb 	.word	0x40c90fdb
 800f1f4:	3fb4fdf4 	.word	0x3fb4fdf4
 800f1f8:	428d78c3 	.word	0x428d78c3
 800f1fc:	46758fb9 	.word	0x46758fb9

0800f200 <pll_Control_V>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Control_V(pll_Signal *signal_V, pll_Config *config)
{
 800f200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f202:	ed2d 8b02 	vpush	{d8}
 800f206:	b089      	sub	sp, #36	@ 0x24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_V);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 f980 	bl	800f514 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->sogi_d_0, signal_V->sogi_q_0 / 382 * 3, &signal_V->park_d, &signal_V->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	68de      	ldr	r6, [r3, #12]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	ed93 7a06 	vldr	s14, [r3, #24]
 800f21e:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800f328 <pll_Control_V+0x128>
 800f222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f226:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800f22a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f240:	eeb0 0a67 	vmov.f32	s0, s15
 800f244:	f000 ff16 	bl	8010074 <arm_sin_f32>
 800f248:	eef0 8a40 	vmov.f32	s17, s0
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f252:	eeb0 0a67 	vmov.f32	s0, s15
 800f256:	f000 ff53 	bl	8010100 <arm_cos_f32>
 800f25a:	eef0 7a40 	vmov.f32	s15, s0
 800f25e:	61fe      	str	r6, [r7, #28]
 800f260:	ed87 8a06 	vstr	s16, [r7, #24]
 800f264:	617d      	str	r5, [r7, #20]
 800f266:	613c      	str	r4, [r7, #16]
 800f268:	edc7 8a03 	vstr	s17, [r7, #12]
 800f26c:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800f270:	ed97 7a07 	vldr	s14, [r7, #28]
 800f274:	edd7 7a02 	vldr	s15, [r7, #8]
 800f278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f27c:	edd7 6a06 	vldr	s13, [r7, #24]
 800f280:	edd7 7a03 	vldr	s15, [r7, #12]
 800f284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800f292:	edd7 7a07 	vldr	s15, [r7, #28]
 800f296:	eeb1 7a67 	vneg.f32	s14, s15
 800f29a:	edd7 7a03 	vldr	s15, [r7, #12]
 800f29e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2a2:	edd7 6a06 	vldr	s13, [r7, #24]
 800f2a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	edc3 7a00 	vstr	s15, [r3]
  }
 800f2b8:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_V, config);
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f8cd 	bl	800f45c <pll_Pid>

    signal_V->theta += (signal_V->pid_out + config->omiga) * config->Ts;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	edd3 7a00 	vldr	s15, [r3]
 800f2d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	edd3 7a01 	vldr	s15, [r3, #4]
 800f2de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f2f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f2f6:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 800f320 <pll_Control_V+0x120>
 800f2fa:	eeb0 0b47 	vmov.f64	d0, d7
 800f2fe:	f001 fbf3 	bl	8010ae8 <fmod>
 800f302:	eeb0 7b40 	vmov.f64	d7, d0
 800f306:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 800f310:	bf00      	nop
 800f312:	3724      	adds	r7, #36	@ 0x24
 800f314:	46bd      	mov	sp, r7
 800f316:	ecbd 8b02 	vpop	{d8}
 800f31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f31c:	f3af 8000 	nop.w
 800f320:	60000000 	.word	0x60000000
 800f324:	401921fb 	.word	0x401921fb
 800f328:	43bf0000 	.word	0x43bf0000
 800f32c:	00000000 	.word	0x00000000

0800f330 <pll_Control_I>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Control_I(pll_Signal *signal_I, pll_Config *config, pll_Signal *signal_V)
{
 800f330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f332:	ed2d 8b02 	vpush	{d8}
 800f336:	b08b      	sub	sp, #44	@ 0x2c
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_I);
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f000 f8e7 	bl	800f514 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_I->sogi_d_0, signal_I->sogi_q_0 / 382 * 3, &signal_I->park_d, &signal_I->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	68de      	ldr	r6, [r3, #12]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	ed93 7a06 	vldr	s14, [r3, #24]
 800f350:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800f458 <pll_Control_I+0x128>
 800f354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f358:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800f35c:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f372:	eeb0 0a67 	vmov.f32	s0, s15
 800f376:	f000 fe7d 	bl	8010074 <arm_sin_f32>
 800f37a:	eef0 8a40 	vmov.f32	s17, s0
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f384:	eeb0 0a67 	vmov.f32	s0, s15
 800f388:	f000 feba 	bl	8010100 <arm_cos_f32>
 800f38c:	eef0 7a40 	vmov.f32	s15, s0
 800f390:	627e      	str	r6, [r7, #36]	@ 0x24
 800f392:	ed87 8a08 	vstr	s16, [r7, #32]
 800f396:	61fd      	str	r5, [r7, #28]
 800f398:	61bc      	str	r4, [r7, #24]
 800f39a:	edc7 8a05 	vstr	s17, [r7, #20]
 800f39e:	edc7 7a04 	vstr	s15, [r7, #16]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800f3a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f3a6:	edd7 7a04 	vldr	s15, [r7, #16]
 800f3aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3ae:	edd7 6a08 	vldr	s13, [r7, #32]
 800f3b2:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800f3c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f3c8:	eeb1 7a67 	vneg.f32	s14, s15
 800f3cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3d4:	edd7 6a08 	vldr	s13, [r7, #32]
 800f3d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800f3dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	edc3 7a00 	vstr	s15, [r3]
  }
 800f3ea:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_I, config);
 800f3ec:	68b9      	ldr	r1, [r7, #8]
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	f000 f834 	bl	800f45c <pll_Pid>

    signal_I->theta += (signal_I->pid_out + config->omiga) * config->Ts;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	edd3 7a00 	vldr	s15, [r3]
 800f406:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f414:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_I->theta = (float)fmod(signal_I->theta, 2 * PI);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800f424:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f428:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 800f450 <pll_Control_I+0x120>
 800f42c:	eeb0 0b47 	vmov.f64	d0, d7
 800f430:	f001 fb5a 	bl	8010ae8 <fmod>
 800f434:	eeb0 7b40 	vmov.f64	d7, d0
 800f438:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 800f442:	bf00      	nop
 800f444:	372c      	adds	r7, #44	@ 0x2c
 800f446:	46bd      	mov	sp, r7
 800f448:	ecbd 8b02 	vpop	{d8}
 800f44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f44e:	bf00      	nop
 800f450:	60000000 	.word	0x60000000
 800f454:	401921fb 	.word	0x401921fb
 800f458:	43bf0000 	.word	0x43bf0000

0800f45c <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f472:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	edd3 6a04 	vldr	s13, [r3, #16]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800f494:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f49c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	edd3 6a05 	vldr	s13, [r3, #20]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800f4ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800f4c0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800f504 <pll_Pid+0xa8>
 800f4c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4cc:	dd03      	ble.n	800f4d6 <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4a0d      	ldr	r2, [pc, #52]	@ (800f508 <pll_Pid+0xac>)
 800f4d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800f4d4:	e00c      	b.n	800f4f0 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800f4dc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800f50c <pll_Pid+0xb0>
 800f4e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e8:	d502      	bpl.n	800f4f0 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a08      	ldr	r2, [pc, #32]	@ (800f510 <pll_Pid+0xb4>)
 800f4ee:	639a      	str	r2, [r3, #56]	@ 0x38

    signal->pid_err[1] = signal->pid_err[0];
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	431d1463 	.word	0x431d1463
 800f508:	431d1463 	.word	0x431d1463
 800f50c:	c27b53d2 	.word	0xc27b53d2
 800f510:	c27b53d2 	.word	0xc27b53d2

0800f514 <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
    signal->sogi_d_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_d_1 + signal->a2 * signal->sogi_d_2;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	edd3 7a00 	vldr	s15, [r3]
 800f528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	edd3 7a02 	vldr	s15, [r3, #8]
 800f538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f53c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	edd3 7a04 	vldr	s15, [r3, #16]
 800f54c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f550:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	edd3 7a05 	vldr	s15, [r3, #20]
 800f560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f564:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_q_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_q_1 + signal->a2 * signal->sogi_q_2;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	edd3 7a00 	vldr	s15, [r3]
 800f57a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800f584:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f58e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f592:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f5a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	edd3 7a07 	vldr	s15, [r3, #28]
 800f5b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	edd3 7a08 	vldr	s15, [r3, #32]
 800f5ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	605a      	str	r2, [r3, #4]
    signal->sogi_d_2 = signal->sogi_d_1;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	691a      	ldr	r2, [r3, #16]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	615a      	str	r2, [r3, #20]
    signal->sogi_d_1 = signal->sogi_d_0;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	68da      	ldr	r2, [r3, #12]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	611a      	str	r2, [r3, #16]
    signal->sogi_q_2 = signal->sogi_q_1;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	69da      	ldr	r2, [r3, #28]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	621a      	str	r2, [r3, #32]
    signal->sogi_q_1 = signal->sogi_q_0;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	699a      	ldr	r2, [r3, #24]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	61da      	str	r2, [r3, #28]
}
 800f608:	bf00      	nop
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f618:	2200      	movs	r2, #0
 800f61a:	4913      	ldr	r1, [pc, #76]	@ (800f668 <MX_USB_DEVICE_Init+0x54>)
 800f61c:	4813      	ldr	r0, [pc, #76]	@ (800f66c <MX_USB_DEVICE_Init+0x58>)
 800f61e:	f7fe f84b 	bl	800d6b8 <USBD_Init>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d001      	beq.n	800f62c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f628:	f7f1 fc90 	bl	8000f4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f62c:	4910      	ldr	r1, [pc, #64]	@ (800f670 <MX_USB_DEVICE_Init+0x5c>)
 800f62e:	480f      	ldr	r0, [pc, #60]	@ (800f66c <MX_USB_DEVICE_Init+0x58>)
 800f630:	f7fe f872 	bl	800d718 <USBD_RegisterClass>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f63a:	f7f1 fc87 	bl	8000f4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f63e:	490d      	ldr	r1, [pc, #52]	@ (800f674 <MX_USB_DEVICE_Init+0x60>)
 800f640:	480a      	ldr	r0, [pc, #40]	@ (800f66c <MX_USB_DEVICE_Init+0x58>)
 800f642:	f7fd ff69 	bl	800d518 <USBD_CDC_RegisterInterface>
 800f646:	4603      	mov	r3, r0
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d001      	beq.n	800f650 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f64c:	f7f1 fc7e 	bl	8000f4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f650:	4806      	ldr	r0, [pc, #24]	@ (800f66c <MX_USB_DEVICE_Init+0x58>)
 800f652:	f7fe f897 	bl	800d784 <USBD_Start>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f65c:	f7f1 fc76 	bl	8000f4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f660:	f7f6 fb02 	bl	8005c68 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f664:	bf00      	nop
 800f666:	bd80      	pop	{r7, pc}
 800f668:	240000b4 	.word	0x240000b4
 800f66c:	240003b8 	.word	0x240003b8
 800f670:	24000020 	.word	0x24000020
 800f674:	240000a0 	.word	0x240000a0

0800f678 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f67c:	2200      	movs	r2, #0
 800f67e:	4905      	ldr	r1, [pc, #20]	@ (800f694 <CDC_Init_FS+0x1c>)
 800f680:	4805      	ldr	r0, [pc, #20]	@ (800f698 <CDC_Init_FS+0x20>)
 800f682:	f7fd ff63 	bl	800d54c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f686:	4905      	ldr	r1, [pc, #20]	@ (800f69c <CDC_Init_FS+0x24>)
 800f688:	4803      	ldr	r0, [pc, #12]	@ (800f698 <CDC_Init_FS+0x20>)
 800f68a:	f7fd ff81 	bl	800d590 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f68e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f690:	4618      	mov	r0, r3
 800f692:	bd80      	pop	{r7, pc}
 800f694:	24000e94 	.word	0x24000e94
 800f698:	240003b8 	.word	0x240003b8
 800f69c:	24000694 	.word	0x24000694

0800f6a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f6a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	6039      	str	r1, [r7, #0]
 800f6ba:	71fb      	strb	r3, [r7, #7]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f6c0:	79fb      	ldrb	r3, [r7, #7]
 800f6c2:	2b23      	cmp	r3, #35	@ 0x23
 800f6c4:	d84a      	bhi.n	800f75c <CDC_Control_FS+0xac>
 800f6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6cc <CDC_Control_FS+0x1c>)
 800f6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6cc:	0800f75d 	.word	0x0800f75d
 800f6d0:	0800f75d 	.word	0x0800f75d
 800f6d4:	0800f75d 	.word	0x0800f75d
 800f6d8:	0800f75d 	.word	0x0800f75d
 800f6dc:	0800f75d 	.word	0x0800f75d
 800f6e0:	0800f75d 	.word	0x0800f75d
 800f6e4:	0800f75d 	.word	0x0800f75d
 800f6e8:	0800f75d 	.word	0x0800f75d
 800f6ec:	0800f75d 	.word	0x0800f75d
 800f6f0:	0800f75d 	.word	0x0800f75d
 800f6f4:	0800f75d 	.word	0x0800f75d
 800f6f8:	0800f75d 	.word	0x0800f75d
 800f6fc:	0800f75d 	.word	0x0800f75d
 800f700:	0800f75d 	.word	0x0800f75d
 800f704:	0800f75d 	.word	0x0800f75d
 800f708:	0800f75d 	.word	0x0800f75d
 800f70c:	0800f75d 	.word	0x0800f75d
 800f710:	0800f75d 	.word	0x0800f75d
 800f714:	0800f75d 	.word	0x0800f75d
 800f718:	0800f75d 	.word	0x0800f75d
 800f71c:	0800f75d 	.word	0x0800f75d
 800f720:	0800f75d 	.word	0x0800f75d
 800f724:	0800f75d 	.word	0x0800f75d
 800f728:	0800f75d 	.word	0x0800f75d
 800f72c:	0800f75d 	.word	0x0800f75d
 800f730:	0800f75d 	.word	0x0800f75d
 800f734:	0800f75d 	.word	0x0800f75d
 800f738:	0800f75d 	.word	0x0800f75d
 800f73c:	0800f75d 	.word	0x0800f75d
 800f740:	0800f75d 	.word	0x0800f75d
 800f744:	0800f75d 	.word	0x0800f75d
 800f748:	0800f75d 	.word	0x0800f75d
 800f74c:	0800f75d 	.word	0x0800f75d
 800f750:	0800f75d 	.word	0x0800f75d
 800f754:	0800f75d 	.word	0x0800f75d
 800f758:	0800f75d 	.word	0x0800f75d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f75c:	bf00      	nop
  }

  return (USBD_OK);
 800f75e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f760:	4618      	mov	r0, r3
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f776:	6879      	ldr	r1, [r7, #4]
 800f778:	4805      	ldr	r0, [pc, #20]	@ (800f790 <CDC_Receive_FS+0x24>)
 800f77a:	f7fd ff09 	bl	800d590 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f77e:	4804      	ldr	r0, [pc, #16]	@ (800f790 <CDC_Receive_FS+0x24>)
 800f780:	f7fd ff64 	bl	800d64c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f784:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f786:	4618      	mov	r0, r3
 800f788:	3708      	adds	r7, #8
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	240003b8 	.word	0x240003b8

0800f794 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	460b      	mov	r3, r1
 800f79e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f7a4:	4b0d      	ldr	r3, [pc, #52]	@ (800f7dc <CDC_Transmit_FS+0x48>)
 800f7a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f7aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e00b      	b.n	800f7d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f7ba:	887b      	ldrh	r3, [r7, #2]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	6879      	ldr	r1, [r7, #4]
 800f7c0:	4806      	ldr	r0, [pc, #24]	@ (800f7dc <CDC_Transmit_FS+0x48>)
 800f7c2:	f7fd fec3 	bl	800d54c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f7c6:	4805      	ldr	r0, [pc, #20]	@ (800f7dc <CDC_Transmit_FS+0x48>)
 800f7c8:	f7fd ff00 	bl	800d5cc <USBD_CDC_TransmitPacket>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	240003b8 	.word	0x240003b8

0800f7e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b087      	sub	sp, #28
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f7f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	371c      	adds	r7, #28
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
	...

0800f804 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4603      	mov	r3, r0
 800f80c:	6039      	str	r1, [r7, #0]
 800f80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	2212      	movs	r2, #18
 800f814:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f816:	4b03      	ldr	r3, [pc, #12]	@ (800f824 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f818:	4618      	mov	r0, r3
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	240000d4 	.word	0x240000d4

0800f828 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	4603      	mov	r3, r0
 800f830:	6039      	str	r1, [r7, #0]
 800f832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	2204      	movs	r2, #4
 800f838:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f83a:	4b03      	ldr	r3, [pc, #12]	@ (800f848 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr
 800f848:	240000e8 	.word	0x240000e8

0800f84c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	6039      	str	r1, [r7, #0]
 800f856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f858:	79fb      	ldrb	r3, [r7, #7]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d105      	bne.n	800f86a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	4907      	ldr	r1, [pc, #28]	@ (800f880 <USBD_FS_ProductStrDescriptor+0x34>)
 800f862:	4808      	ldr	r0, [pc, #32]	@ (800f884 <USBD_FS_ProductStrDescriptor+0x38>)
 800f864:	f7ff f968 	bl	800eb38 <USBD_GetString>
 800f868:	e004      	b.n	800f874 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f86a:	683a      	ldr	r2, [r7, #0]
 800f86c:	4904      	ldr	r1, [pc, #16]	@ (800f880 <USBD_FS_ProductStrDescriptor+0x34>)
 800f86e:	4805      	ldr	r0, [pc, #20]	@ (800f884 <USBD_FS_ProductStrDescriptor+0x38>)
 800f870:	f7ff f962 	bl	800eb38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f874:	4b02      	ldr	r3, [pc, #8]	@ (800f880 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	24001694 	.word	0x24001694
 800f884:	08010d68 	.word	0x08010d68

0800f888 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	4603      	mov	r3, r0
 800f890:	6039      	str	r1, [r7, #0]
 800f892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f894:	683a      	ldr	r2, [r7, #0]
 800f896:	4904      	ldr	r1, [pc, #16]	@ (800f8a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f898:	4804      	ldr	r0, [pc, #16]	@ (800f8ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f89a:	f7ff f94d 	bl	800eb38 <USBD_GetString>
  return USBD_StrDesc;
 800f89e:	4b02      	ldr	r3, [pc, #8]	@ (800f8a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	24001694 	.word	0x24001694
 800f8ac:	08010d80 	.word	0x08010d80

0800f8b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	6039      	str	r1, [r7, #0]
 800f8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	221a      	movs	r2, #26
 800f8c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8c2:	f000 f843 	bl	800f94c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f8c6:	4b02      	ldr	r3, [pc, #8]	@ (800f8d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	240000ec 	.word	0x240000ec

0800f8d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	4603      	mov	r3, r0
 800f8dc:	6039      	str	r1, [r7, #0]
 800f8de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f8e0:	79fb      	ldrb	r3, [r7, #7]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d105      	bne.n	800f8f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8e6:	683a      	ldr	r2, [r7, #0]
 800f8e8:	4907      	ldr	r1, [pc, #28]	@ (800f908 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f8ea:	4808      	ldr	r0, [pc, #32]	@ (800f90c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f8ec:	f7ff f924 	bl	800eb38 <USBD_GetString>
 800f8f0:	e004      	b.n	800f8fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8f2:	683a      	ldr	r2, [r7, #0]
 800f8f4:	4904      	ldr	r1, [pc, #16]	@ (800f908 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f8f6:	4805      	ldr	r0, [pc, #20]	@ (800f90c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f8f8:	f7ff f91e 	bl	800eb38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8fc:	4b02      	ldr	r3, [pc, #8]	@ (800f908 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3708      	adds	r7, #8
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	24001694 	.word	0x24001694
 800f90c:	08010d94 	.word	0x08010d94

0800f910 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	4603      	mov	r3, r0
 800f918:	6039      	str	r1, [r7, #0]
 800f91a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d105      	bne.n	800f92e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	4907      	ldr	r1, [pc, #28]	@ (800f944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f926:	4808      	ldr	r0, [pc, #32]	@ (800f948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f928:	f7ff f906 	bl	800eb38 <USBD_GetString>
 800f92c:	e004      	b.n	800f938 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	4904      	ldr	r1, [pc, #16]	@ (800f944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f932:	4805      	ldr	r0, [pc, #20]	@ (800f948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f934:	f7ff f900 	bl	800eb38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f938:	4b02      	ldr	r3, [pc, #8]	@ (800f944 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	24001694 	.word	0x24001694
 800f948:	08010da0 	.word	0x08010da0

0800f94c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	4413      	add	r3, r2
 800f958:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d009      	beq.n	800f974 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f960:	2208      	movs	r2, #8
 800f962:	4906      	ldr	r1, [pc, #24]	@ (800f97c <Get_SerialNum+0x30>)
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f000 f80d 	bl	800f984 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f96a:	2204      	movs	r2, #4
 800f96c:	4904      	ldr	r1, [pc, #16]	@ (800f980 <Get_SerialNum+0x34>)
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 f808 	bl	800f984 <IntToUnicode>
  }
}
 800f974:	bf00      	nop
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	240000ee 	.word	0x240000ee
 800f980:	240000fe 	.word	0x240000fe

0800f984 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f984:	b480      	push	{r7}
 800f986:	b087      	sub	sp, #28
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	4613      	mov	r3, r2
 800f990:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f992:	2300      	movs	r3, #0
 800f994:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f996:	2300      	movs	r3, #0
 800f998:	75fb      	strb	r3, [r7, #23]
 800f99a:	e027      	b.n	800f9ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	0f1b      	lsrs	r3, r3, #28
 800f9a0:	2b09      	cmp	r3, #9
 800f9a2:	d80b      	bhi.n	800f9bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	0f1b      	lsrs	r3, r3, #28
 800f9a8:	b2da      	uxtb	r2, r3
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	005b      	lsls	r3, r3, #1
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	440b      	add	r3, r1
 800f9b4:	3230      	adds	r2, #48	@ 0x30
 800f9b6:	b2d2      	uxtb	r2, r2
 800f9b8:	701a      	strb	r2, [r3, #0]
 800f9ba:	e00a      	b.n	800f9d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	0f1b      	lsrs	r3, r3, #28
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
 800f9c4:	005b      	lsls	r3, r3, #1
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	440b      	add	r3, r1
 800f9cc:	3237      	adds	r2, #55	@ 0x37
 800f9ce:	b2d2      	uxtb	r2, r2
 800f9d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	011b      	lsls	r3, r3, #4
 800f9d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	005b      	lsls	r3, r3, #1
 800f9dc:	3301      	adds	r3, #1
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	75fb      	strb	r3, [r7, #23]
 800f9ec:	7dfa      	ldrb	r2, [r7, #23]
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d3d3      	bcc.n	800f99c <IntToUnicode+0x18>
  }
}
 800f9f4:	bf00      	nop
 800f9f6:	bf00      	nop
 800f9f8:	371c      	adds	r7, #28
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
	...

0800fa04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b0ba      	sub	sp, #232	@ 0xe8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fa10:	2200      	movs	r2, #0
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	605a      	str	r2, [r3, #4]
 800fa16:	609a      	str	r2, [r3, #8]
 800fa18:	60da      	str	r2, [r3, #12]
 800fa1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fa1c:	f107 0310 	add.w	r3, r7, #16
 800fa20:	22c0      	movs	r2, #192	@ 0xc0
 800fa22:	2100      	movs	r1, #0
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 fc8b 	bl	8010340 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a2c      	ldr	r2, [pc, #176]	@ (800fae0 <HAL_PCD_MspInit+0xdc>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d151      	bne.n	800fad8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fa34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fa38:	f04f 0300 	mov.w	r3, #0
 800fa3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fa40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fa44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fa48:	f107 0310 	add.w	r3, r7, #16
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7f7 f92d 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800fa58:	f7f1 fa78 	bl	8000f4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fa5c:	f7f6 f904 	bl	8005c68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa60:	4b20      	ldr	r3, [pc, #128]	@ (800fae4 <HAL_PCD_MspInit+0xe0>)
 800fa62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa66:	4a1f      	ldr	r2, [pc, #124]	@ (800fae4 <HAL_PCD_MspInit+0xe0>)
 800fa68:	f043 0301 	orr.w	r3, r3, #1
 800fa6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fa70:	4b1c      	ldr	r3, [pc, #112]	@ (800fae4 <HAL_PCD_MspInit+0xe0>)
 800fa72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa76:	f003 0301 	and.w	r3, r3, #1
 800fa7a:	60fb      	str	r3, [r7, #12]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fa7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fa82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa86:	2302      	movs	r3, #2
 800fa88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa92:	2300      	movs	r3, #0
 800fa94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fa98:	230a      	movs	r3, #10
 800fa9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800faa2:	4619      	mov	r1, r3
 800faa4:	4810      	ldr	r0, [pc, #64]	@ (800fae8 <HAL_PCD_MspInit+0xe4>)
 800faa6:	f7f4 fae1 	bl	800406c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800faaa:	4b0e      	ldr	r3, [pc, #56]	@ (800fae4 <HAL_PCD_MspInit+0xe0>)
 800faac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fab0:	4a0c      	ldr	r2, [pc, #48]	@ (800fae4 <HAL_PCD_MspInit+0xe0>)
 800fab2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800faba:	4b0a      	ldr	r3, [pc, #40]	@ (800fae4 <HAL_PCD_MspInit+0xe0>)
 800fabc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fac4:	60bb      	str	r3, [r7, #8]
 800fac6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fac8:	2200      	movs	r2, #0
 800faca:	2100      	movs	r1, #0
 800facc:	2065      	movs	r0, #101	@ 0x65
 800face:	f7f3 fbcd 	bl	800326c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fad2:	2065      	movs	r0, #101	@ 0x65
 800fad4:	f7f3 fbe4 	bl	80032a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fad8:	bf00      	nop
 800fada:	37e8      	adds	r7, #232	@ 0xe8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	40080000 	.word	0x40080000
 800fae4:	58024400 	.word	0x58024400
 800fae8:	58020000 	.word	0x58020000

0800faec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800fb00:	4619      	mov	r1, r3
 800fb02:	4610      	mov	r0, r2
 800fb04:	f7fd fe8b 	bl	800d81e <USBD_LL_SetupStage>
}
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	460b      	mov	r3, r1
 800fb1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800fb22:	78fa      	ldrb	r2, [r7, #3]
 800fb24:	6879      	ldr	r1, [r7, #4]
 800fb26:	4613      	mov	r3, r2
 800fb28:	00db      	lsls	r3, r3, #3
 800fb2a:	4413      	add	r3, r2
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	440b      	add	r3, r1
 800fb30:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	78fb      	ldrb	r3, [r7, #3]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	f7fd fec5 	bl	800d8c8 <USBD_LL_DataOutStage>
}
 800fb3e:	bf00      	nop
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b082      	sub	sp, #8
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
 800fb4e:	460b      	mov	r3, r1
 800fb50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800fb58:	78fa      	ldrb	r2, [r7, #3]
 800fb5a:	6879      	ldr	r1, [r7, #4]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	4413      	add	r3, r2
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	440b      	add	r3, r1
 800fb66:	3348      	adds	r3, #72	@ 0x48
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	78fb      	ldrb	r3, [r7, #3]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	f7fd ff5e 	bl	800da2e <USBD_LL_DataInStage>
}
 800fb72:	bf00      	nop
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b082      	sub	sp, #8
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fe f898 	bl	800dcbe <USBD_LL_SOF>
}
 800fb8e:	bf00      	nop
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b084      	sub	sp, #16
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	691b      	ldr	r3, [r3, #16]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d102      	bne.n	800fbb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	73fb      	strb	r3, [r7, #15]
 800fbae:	e008      	b.n	800fbc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	2b02      	cmp	r3, #2
 800fbb6:	d102      	bne.n	800fbbe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	73fb      	strb	r3, [r7, #15]
 800fbbc:	e001      	b.n	800fbc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fbbe:	f7f1 f9c5 	bl	8000f4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fbc8:	7bfa      	ldrb	r2, [r7, #15]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe f832 	bl	800dc36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fd ffda 	bl	800db92 <USBD_LL_Reset>
}
 800fbde:	bf00      	nop
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe f82d 	bl	800dc56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	6812      	ldr	r2, [r2, #0]
 800fc0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fc0e:	f043 0301 	orr.w	r3, r3, #1
 800fc12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a1b      	ldr	r3, [r3, #32]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d005      	beq.n	800fc28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc1c:	4b04      	ldr	r3, [pc, #16]	@ (800fc30 <HAL_PCD_SuspendCallback+0x48>)
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	4a03      	ldr	r2, [pc, #12]	@ (800fc30 <HAL_PCD_SuspendCallback+0x48>)
 800fc22:	f043 0306 	orr.w	r3, r3, #6
 800fc26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	e000ed00 	.word	0xe000ed00

0800fc34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe f823 	bl	800dc8e <USBD_LL_Resume>
}
 800fc48:	bf00      	nop
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fc62:	78fa      	ldrb	r2, [r7, #3]
 800fc64:	4611      	mov	r1, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fe f87b 	bl	800dd62 <USBD_LL_IsoOUTIncomplete>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fc86:	78fa      	ldrb	r2, [r7, #3]
 800fc88:	4611      	mov	r1, r2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fe f837 	bl	800dcfe <USBD_LL_IsoINIncomplete>
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fe f88d 	bl	800ddc6 <USBD_LL_DevConnected>
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe f88a 	bl	800dddc <USBD_LL_DevDisconnected>
}
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d13e      	bne.n	800fd5e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fce0:	4a21      	ldr	r2, [pc, #132]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	4a1f      	ldr	r2, [pc, #124]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fcec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fcf0:	4b1d      	ldr	r3, [pc, #116]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fcf2:	4a1e      	ldr	r2, [pc, #120]	@ (800fd6c <USBD_LL_Init+0x9c>)
 800fcf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fcf6:	4b1c      	ldr	r3, [pc, #112]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fcf8:	2209      	movs	r2, #9
 800fcfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fcfc:	4b1a      	ldr	r3, [pc, #104]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fcfe:	2202      	movs	r2, #2
 800fd00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd02:	4b19      	ldr	r3, [pc, #100]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd08:	4b17      	ldr	r3, [pc, #92]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd0a:	2202      	movs	r2, #2
 800fd0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd0e:	4b16      	ldr	r3, [pc, #88]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fd14:	4b14      	ldr	r3, [pc, #80]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fd1a:	4b13      	ldr	r3, [pc, #76]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fd20:	4b11      	ldr	r3, [pc, #68]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd22:	2200      	movs	r2, #0
 800fd24:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd26:	4b10      	ldr	r3, [pc, #64]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd2c:	4b0e      	ldr	r3, [pc, #56]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd2e:	2200      	movs	r2, #0
 800fd30:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd32:	480d      	ldr	r0, [pc, #52]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd34:	f7f4 fca5 	bl	8004682 <HAL_PCD_Init>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fd3e:	f7f1 f905 	bl	8000f4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd42:	2180      	movs	r1, #128	@ 0x80
 800fd44:	4808      	ldr	r0, [pc, #32]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd46:	f7f5 ff14 	bl	8005b72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fd4a:	2240      	movs	r2, #64	@ 0x40
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	4806      	ldr	r0, [pc, #24]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd50:	f7f5 fec8 	bl	8005ae4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fd54:	2280      	movs	r2, #128	@ 0x80
 800fd56:	2101      	movs	r1, #1
 800fd58:	4803      	ldr	r0, [pc, #12]	@ (800fd68 <USBD_LL_Init+0x98>)
 800fd5a:	f7f5 fec3 	bl	8005ae4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	24001894 	.word	0x24001894
 800fd6c:	40080000 	.word	0x40080000

0800fd70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7f4 fd9f 	bl	80048ca <HAL_PCD_Start>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 f942 	bl	801001c <USBD_Get_USB_Status>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b084      	sub	sp, #16
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	4608      	mov	r0, r1
 800fdb0:	4611      	mov	r1, r2
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	70fb      	strb	r3, [r7, #3]
 800fdb8:	460b      	mov	r3, r1
 800fdba:	70bb      	strb	r3, [r7, #2]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fdce:	78bb      	ldrb	r3, [r7, #2]
 800fdd0:	883a      	ldrh	r2, [r7, #0]
 800fdd2:	78f9      	ldrb	r1, [r7, #3]
 800fdd4:	f7f5 fa9f 	bl	8005316 <HAL_PCD_EP_Open>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 f91c 	bl	801001c <USBD_Get_USB_Status>
 800fde4:	4603      	mov	r3, r0
 800fde6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fde8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe02:	2300      	movs	r3, #0
 800fe04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe0c:	78fa      	ldrb	r2, [r7, #3]
 800fe0e:	4611      	mov	r1, r2
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7f5 fae8 	bl	80053e6 <HAL_PCD_EP_Close>
 800fe16:	4603      	mov	r3, r0
 800fe18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe1a:	7bfb      	ldrb	r3, [r7, #15]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f000 f8fd 	bl	801001c <USBD_Get_USB_Status>
 800fe22:	4603      	mov	r3, r0
 800fe24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe26:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe4a:	78fa      	ldrb	r2, [r7, #3]
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f5 fba2 	bl	8005598 <HAL_PCD_EP_SetStall>
 800fe54:	4603      	mov	r3, r0
 800fe56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f000 f8de 	bl	801001c <USBD_Get_USB_Status>
 800fe60:	4603      	mov	r3, r0
 800fe62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe64:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3710      	adds	r7, #16
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b084      	sub	sp, #16
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	460b      	mov	r3, r1
 800fe78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe88:	78fa      	ldrb	r2, [r7, #3]
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7f5 fbe7 	bl	8005660 <HAL_PCD_EP_ClrStall>
 800fe92:	4603      	mov	r3, r0
 800fe94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe96:	7bfb      	ldrb	r3, [r7, #15]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f000 f8bf 	bl	801001c <USBD_Get_USB_Status>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800feac:	b480      	push	{r7}
 800feae:	b085      	sub	sp, #20
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	460b      	mov	r3, r1
 800feb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800febe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	da0b      	bge.n	800fee0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fec8:	78fb      	ldrb	r3, [r7, #3]
 800feca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fece:	68f9      	ldr	r1, [r7, #12]
 800fed0:	4613      	mov	r3, r2
 800fed2:	00db      	lsls	r3, r3, #3
 800fed4:	4413      	add	r3, r2
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	440b      	add	r3, r1
 800feda:	333e      	adds	r3, #62	@ 0x3e
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	e00b      	b.n	800fef8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fee0:	78fb      	ldrb	r3, [r7, #3]
 800fee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fee6:	68f9      	ldr	r1, [r7, #12]
 800fee8:	4613      	mov	r3, r2
 800feea:	00db      	lsls	r3, r3, #3
 800feec:	4413      	add	r3, r2
 800feee:	009b      	lsls	r3, r3, #2
 800fef0:	440b      	add	r3, r1
 800fef2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800fef6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3714      	adds	r7, #20
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff10:	2300      	movs	r3, #0
 800ff12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff1e:	78fa      	ldrb	r2, [r7, #3]
 800ff20:	4611      	mov	r1, r2
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7f5 f9d2 	bl	80052cc <HAL_PCD_SetAddress>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f000 f874 	bl	801001c <USBD_Get_USB_Status>
 800ff34:	4603      	mov	r3, r0
 800ff36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b086      	sub	sp, #24
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	60f8      	str	r0, [r7, #12]
 800ff4a:	607a      	str	r2, [r7, #4]
 800ff4c:	603b      	str	r3, [r7, #0]
 800ff4e:	460b      	mov	r3, r1
 800ff50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff52:	2300      	movs	r3, #0
 800ff54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ff60:	7af9      	ldrb	r1, [r7, #11]
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	f7f5 fadc 	bl	8005522 <HAL_PCD_EP_Transmit>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff6e:	7dfb      	ldrb	r3, [r7, #23]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f000 f853 	bl	801001c <USBD_Get_USB_Status>
 800ff76:	4603      	mov	r3, r0
 800ff78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3718      	adds	r7, #24
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b086      	sub	sp, #24
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	60f8      	str	r0, [r7, #12]
 800ff8c:	607a      	str	r2, [r7, #4]
 800ff8e:	603b      	str	r3, [r7, #0]
 800ff90:	460b      	mov	r3, r1
 800ff92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff94:	2300      	movs	r3, #0
 800ff96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ffa2:	7af9      	ldrb	r1, [r7, #11]
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	f7f5 fa67 	bl	800547a <HAL_PCD_EP_Receive>
 800ffac:	4603      	mov	r3, r0
 800ffae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffb0:	7dfb      	ldrb	r3, [r7, #23]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f000 f832 	bl	801001c <USBD_Get_USB_Status>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffbc:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3718      	adds	r7, #24
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b082      	sub	sp, #8
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	460b      	mov	r3, r1
 800ffd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ffd8:	78fa      	ldrb	r2, [r7, #3]
 800ffda:	4611      	mov	r1, r2
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7f5 fa88 	bl	80054f2 <HAL_PCD_EP_GetRxCount>
 800ffe2:	4603      	mov	r3, r0
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fff4:	4b03      	ldr	r3, [pc, #12]	@ (8010004 <USBD_static_malloc+0x18>)
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	370c      	adds	r7, #12
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	24001da0 	.word	0x24001da0

08010008 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010010:	bf00      	nop
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	4603      	mov	r3, r0
 8010024:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010026:	2300      	movs	r3, #0
 8010028:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801002a:	79fb      	ldrb	r3, [r7, #7]
 801002c:	2b03      	cmp	r3, #3
 801002e:	d817      	bhi.n	8010060 <USBD_Get_USB_Status+0x44>
 8010030:	a201      	add	r2, pc, #4	@ (adr r2, 8010038 <USBD_Get_USB_Status+0x1c>)
 8010032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010036:	bf00      	nop
 8010038:	08010049 	.word	0x08010049
 801003c:	0801004f 	.word	0x0801004f
 8010040:	08010055 	.word	0x08010055
 8010044:	0801005b 	.word	0x0801005b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010048:	2300      	movs	r3, #0
 801004a:	73fb      	strb	r3, [r7, #15]
    break;
 801004c:	e00b      	b.n	8010066 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801004e:	2303      	movs	r3, #3
 8010050:	73fb      	strb	r3, [r7, #15]
    break;
 8010052:	e008      	b.n	8010066 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010054:	2301      	movs	r3, #1
 8010056:	73fb      	strb	r3, [r7, #15]
    break;
 8010058:	e005      	b.n	8010066 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801005a:	2303      	movs	r3, #3
 801005c:	73fb      	strb	r3, [r7, #15]
    break;
 801005e:	e002      	b.n	8010066 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010060:	2303      	movs	r3, #3
 8010062:	73fb      	strb	r3, [r7, #15]
    break;
 8010064:	bf00      	nop
  }
  return usb_status;
 8010066:	7bfb      	ldrb	r3, [r7, #15]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3714      	adds	r7, #20
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <arm_sin_f32>:
 8010074:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80100f4 <arm_sin_f32+0x80>
 8010078:	ee20 0a27 	vmul.f32	s0, s0, s15
 801007c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010080:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010088:	d504      	bpl.n	8010094 <arm_sin_f32+0x20>
 801008a:	ee17 3a90 	vmov	r3, s15
 801008e:	3b01      	subs	r3, #1
 8010090:	ee07 3a90 	vmov	s15, r3
 8010094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010098:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80100f8 <arm_sin_f32+0x84>
 801009c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80100a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100a4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80100a8:	ee17 3a10 	vmov	r3, s14
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100b2:	d21a      	bcs.n	80100ea <arm_sin_f32+0x76>
 80100b4:	ee07 3a10 	vmov	s14, r3
 80100b8:	1c59      	adds	r1, r3, #1
 80100ba:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80100be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80100c2:	4a0e      	ldr	r2, [pc, #56]	@ (80100fc <arm_sin_f32+0x88>)
 80100c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80100c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80100d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80100d4:	edd3 6a00 	vldr	s13, [r3]
 80100d8:	ed92 7a00 	vldr	s14, [r2]
 80100dc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80100e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100e8:	4770      	bx	lr
 80100ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80100ee:	2101      	movs	r1, #1
 80100f0:	2300      	movs	r3, #0
 80100f2:	e7e6      	b.n	80100c2 <arm_sin_f32+0x4e>
 80100f4:	3e22f983 	.word	0x3e22f983
 80100f8:	44000000 	.word	0x44000000
 80100fc:	080113b0 	.word	0x080113b0

08010100 <arm_cos_f32>:
 8010100:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8010188 <arm_cos_f32+0x88>
 8010104:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8010108:	ee20 0a27 	vmul.f32	s0, s0, s15
 801010c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010110:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010114:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011c:	d504      	bpl.n	8010128 <arm_cos_f32+0x28>
 801011e:	ee17 3a90 	vmov	r3, s15
 8010122:	3b01      	subs	r3, #1
 8010124:	ee07 3a90 	vmov	s15, r3
 8010128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801012c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 801018c <arm_cos_f32+0x8c>
 8010130:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010138:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801013c:	ee17 3a10 	vmov	r3, s14
 8010140:	b29b      	uxth	r3, r3
 8010142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010146:	d21a      	bcs.n	801017e <arm_cos_f32+0x7e>
 8010148:	ee07 3a10 	vmov	s14, r3
 801014c:	1c59      	adds	r1, r3, #1
 801014e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8010152:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010156:	4a0e      	ldr	r2, [pc, #56]	@ (8010190 <arm_cos_f32+0x90>)
 8010158:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801015c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010160:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010164:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010168:	edd3 6a00 	vldr	s13, [r3]
 801016c:	ed92 7a00 	vldr	s14, [r2]
 8010170:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010178:	ee30 0a27 	vadd.f32	s0, s0, s15
 801017c:	4770      	bx	lr
 801017e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010182:	2101      	movs	r1, #1
 8010184:	2300      	movs	r3, #0
 8010186:	e7e6      	b.n	8010156 <arm_cos_f32+0x56>
 8010188:	3e22f983 	.word	0x3e22f983
 801018c:	44000000 	.word	0x44000000
 8010190:	080113b0 	.word	0x080113b0

08010194 <malloc>:
 8010194:	4b02      	ldr	r3, [pc, #8]	@ (80101a0 <malloc+0xc>)
 8010196:	4601      	mov	r1, r0
 8010198:	6818      	ldr	r0, [r3, #0]
 801019a:	f000 b825 	b.w	80101e8 <_malloc_r>
 801019e:	bf00      	nop
 80101a0:	24000108 	.word	0x24000108

080101a4 <sbrk_aligned>:
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	4e0f      	ldr	r6, [pc, #60]	@ (80101e4 <sbrk_aligned+0x40>)
 80101a8:	460c      	mov	r4, r1
 80101aa:	6831      	ldr	r1, [r6, #0]
 80101ac:	4605      	mov	r5, r0
 80101ae:	b911      	cbnz	r1, 80101b6 <sbrk_aligned+0x12>
 80101b0:	f000 f8ce 	bl	8010350 <_sbrk_r>
 80101b4:	6030      	str	r0, [r6, #0]
 80101b6:	4621      	mov	r1, r4
 80101b8:	4628      	mov	r0, r5
 80101ba:	f000 f8c9 	bl	8010350 <_sbrk_r>
 80101be:	1c43      	adds	r3, r0, #1
 80101c0:	d103      	bne.n	80101ca <sbrk_aligned+0x26>
 80101c2:	f04f 34ff 	mov.w	r4, #4294967295
 80101c6:	4620      	mov	r0, r4
 80101c8:	bd70      	pop	{r4, r5, r6, pc}
 80101ca:	1cc4      	adds	r4, r0, #3
 80101cc:	f024 0403 	bic.w	r4, r4, #3
 80101d0:	42a0      	cmp	r0, r4
 80101d2:	d0f8      	beq.n	80101c6 <sbrk_aligned+0x22>
 80101d4:	1a21      	subs	r1, r4, r0
 80101d6:	4628      	mov	r0, r5
 80101d8:	f000 f8ba 	bl	8010350 <_sbrk_r>
 80101dc:	3001      	adds	r0, #1
 80101de:	d1f2      	bne.n	80101c6 <sbrk_aligned+0x22>
 80101e0:	e7ef      	b.n	80101c2 <sbrk_aligned+0x1e>
 80101e2:	bf00      	nop
 80101e4:	24001fc0 	.word	0x24001fc0

080101e8 <_malloc_r>:
 80101e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ec:	1ccd      	adds	r5, r1, #3
 80101ee:	f025 0503 	bic.w	r5, r5, #3
 80101f2:	3508      	adds	r5, #8
 80101f4:	2d0c      	cmp	r5, #12
 80101f6:	bf38      	it	cc
 80101f8:	250c      	movcc	r5, #12
 80101fa:	2d00      	cmp	r5, #0
 80101fc:	4606      	mov	r6, r0
 80101fe:	db01      	blt.n	8010204 <_malloc_r+0x1c>
 8010200:	42a9      	cmp	r1, r5
 8010202:	d904      	bls.n	801020e <_malloc_r+0x26>
 8010204:	230c      	movs	r3, #12
 8010206:	6033      	str	r3, [r6, #0]
 8010208:	2000      	movs	r0, #0
 801020a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801020e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80102e4 <_malloc_r+0xfc>
 8010212:	f000 f869 	bl	80102e8 <__malloc_lock>
 8010216:	f8d8 3000 	ldr.w	r3, [r8]
 801021a:	461c      	mov	r4, r3
 801021c:	bb44      	cbnz	r4, 8010270 <_malloc_r+0x88>
 801021e:	4629      	mov	r1, r5
 8010220:	4630      	mov	r0, r6
 8010222:	f7ff ffbf 	bl	80101a4 <sbrk_aligned>
 8010226:	1c43      	adds	r3, r0, #1
 8010228:	4604      	mov	r4, r0
 801022a:	d158      	bne.n	80102de <_malloc_r+0xf6>
 801022c:	f8d8 4000 	ldr.w	r4, [r8]
 8010230:	4627      	mov	r7, r4
 8010232:	2f00      	cmp	r7, #0
 8010234:	d143      	bne.n	80102be <_malloc_r+0xd6>
 8010236:	2c00      	cmp	r4, #0
 8010238:	d04b      	beq.n	80102d2 <_malloc_r+0xea>
 801023a:	6823      	ldr	r3, [r4, #0]
 801023c:	4639      	mov	r1, r7
 801023e:	4630      	mov	r0, r6
 8010240:	eb04 0903 	add.w	r9, r4, r3
 8010244:	f000 f884 	bl	8010350 <_sbrk_r>
 8010248:	4581      	cmp	r9, r0
 801024a:	d142      	bne.n	80102d2 <_malloc_r+0xea>
 801024c:	6821      	ldr	r1, [r4, #0]
 801024e:	1a6d      	subs	r5, r5, r1
 8010250:	4629      	mov	r1, r5
 8010252:	4630      	mov	r0, r6
 8010254:	f7ff ffa6 	bl	80101a4 <sbrk_aligned>
 8010258:	3001      	adds	r0, #1
 801025a:	d03a      	beq.n	80102d2 <_malloc_r+0xea>
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	442b      	add	r3, r5
 8010260:	6023      	str	r3, [r4, #0]
 8010262:	f8d8 3000 	ldr.w	r3, [r8]
 8010266:	685a      	ldr	r2, [r3, #4]
 8010268:	bb62      	cbnz	r2, 80102c4 <_malloc_r+0xdc>
 801026a:	f8c8 7000 	str.w	r7, [r8]
 801026e:	e00f      	b.n	8010290 <_malloc_r+0xa8>
 8010270:	6822      	ldr	r2, [r4, #0]
 8010272:	1b52      	subs	r2, r2, r5
 8010274:	d420      	bmi.n	80102b8 <_malloc_r+0xd0>
 8010276:	2a0b      	cmp	r2, #11
 8010278:	d917      	bls.n	80102aa <_malloc_r+0xc2>
 801027a:	1961      	adds	r1, r4, r5
 801027c:	42a3      	cmp	r3, r4
 801027e:	6025      	str	r5, [r4, #0]
 8010280:	bf18      	it	ne
 8010282:	6059      	strne	r1, [r3, #4]
 8010284:	6863      	ldr	r3, [r4, #4]
 8010286:	bf08      	it	eq
 8010288:	f8c8 1000 	streq.w	r1, [r8]
 801028c:	5162      	str	r2, [r4, r5]
 801028e:	604b      	str	r3, [r1, #4]
 8010290:	4630      	mov	r0, r6
 8010292:	f000 f82f 	bl	80102f4 <__malloc_unlock>
 8010296:	f104 000b 	add.w	r0, r4, #11
 801029a:	1d23      	adds	r3, r4, #4
 801029c:	f020 0007 	bic.w	r0, r0, #7
 80102a0:	1ac2      	subs	r2, r0, r3
 80102a2:	bf1c      	itt	ne
 80102a4:	1a1b      	subne	r3, r3, r0
 80102a6:	50a3      	strne	r3, [r4, r2]
 80102a8:	e7af      	b.n	801020a <_malloc_r+0x22>
 80102aa:	6862      	ldr	r2, [r4, #4]
 80102ac:	42a3      	cmp	r3, r4
 80102ae:	bf0c      	ite	eq
 80102b0:	f8c8 2000 	streq.w	r2, [r8]
 80102b4:	605a      	strne	r2, [r3, #4]
 80102b6:	e7eb      	b.n	8010290 <_malloc_r+0xa8>
 80102b8:	4623      	mov	r3, r4
 80102ba:	6864      	ldr	r4, [r4, #4]
 80102bc:	e7ae      	b.n	801021c <_malloc_r+0x34>
 80102be:	463c      	mov	r4, r7
 80102c0:	687f      	ldr	r7, [r7, #4]
 80102c2:	e7b6      	b.n	8010232 <_malloc_r+0x4a>
 80102c4:	461a      	mov	r2, r3
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	42a3      	cmp	r3, r4
 80102ca:	d1fb      	bne.n	80102c4 <_malloc_r+0xdc>
 80102cc:	2300      	movs	r3, #0
 80102ce:	6053      	str	r3, [r2, #4]
 80102d0:	e7de      	b.n	8010290 <_malloc_r+0xa8>
 80102d2:	230c      	movs	r3, #12
 80102d4:	6033      	str	r3, [r6, #0]
 80102d6:	4630      	mov	r0, r6
 80102d8:	f000 f80c 	bl	80102f4 <__malloc_unlock>
 80102dc:	e794      	b.n	8010208 <_malloc_r+0x20>
 80102de:	6005      	str	r5, [r0, #0]
 80102e0:	e7d6      	b.n	8010290 <_malloc_r+0xa8>
 80102e2:	bf00      	nop
 80102e4:	24001fc4 	.word	0x24001fc4

080102e8 <__malloc_lock>:
 80102e8:	4801      	ldr	r0, [pc, #4]	@ (80102f0 <__malloc_lock+0x8>)
 80102ea:	f000 b86b 	b.w	80103c4 <__retarget_lock_acquire_recursive>
 80102ee:	bf00      	nop
 80102f0:	24002104 	.word	0x24002104

080102f4 <__malloc_unlock>:
 80102f4:	4801      	ldr	r0, [pc, #4]	@ (80102fc <__malloc_unlock+0x8>)
 80102f6:	f000 b866 	b.w	80103c6 <__retarget_lock_release_recursive>
 80102fa:	bf00      	nop
 80102fc:	24002104 	.word	0x24002104

08010300 <siprintf>:
 8010300:	b40e      	push	{r1, r2, r3}
 8010302:	b500      	push	{lr}
 8010304:	b09c      	sub	sp, #112	@ 0x70
 8010306:	ab1d      	add	r3, sp, #116	@ 0x74
 8010308:	9002      	str	r0, [sp, #8]
 801030a:	9006      	str	r0, [sp, #24]
 801030c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010310:	4809      	ldr	r0, [pc, #36]	@ (8010338 <siprintf+0x38>)
 8010312:	9107      	str	r1, [sp, #28]
 8010314:	9104      	str	r1, [sp, #16]
 8010316:	4909      	ldr	r1, [pc, #36]	@ (801033c <siprintf+0x3c>)
 8010318:	f853 2b04 	ldr.w	r2, [r3], #4
 801031c:	9105      	str	r1, [sp, #20]
 801031e:	6800      	ldr	r0, [r0, #0]
 8010320:	9301      	str	r3, [sp, #4]
 8010322:	a902      	add	r1, sp, #8
 8010324:	f000 f8f6 	bl	8010514 <_svfiprintf_r>
 8010328:	9b02      	ldr	r3, [sp, #8]
 801032a:	2200      	movs	r2, #0
 801032c:	701a      	strb	r2, [r3, #0]
 801032e:	b01c      	add	sp, #112	@ 0x70
 8010330:	f85d eb04 	ldr.w	lr, [sp], #4
 8010334:	b003      	add	sp, #12
 8010336:	4770      	bx	lr
 8010338:	24000108 	.word	0x24000108
 801033c:	ffff0208 	.word	0xffff0208

08010340 <memset>:
 8010340:	4402      	add	r2, r0
 8010342:	4603      	mov	r3, r0
 8010344:	4293      	cmp	r3, r2
 8010346:	d100      	bne.n	801034a <memset+0xa>
 8010348:	4770      	bx	lr
 801034a:	f803 1b01 	strb.w	r1, [r3], #1
 801034e:	e7f9      	b.n	8010344 <memset+0x4>

08010350 <_sbrk_r>:
 8010350:	b538      	push	{r3, r4, r5, lr}
 8010352:	4d06      	ldr	r5, [pc, #24]	@ (801036c <_sbrk_r+0x1c>)
 8010354:	2300      	movs	r3, #0
 8010356:	4604      	mov	r4, r0
 8010358:	4608      	mov	r0, r1
 801035a:	602b      	str	r3, [r5, #0]
 801035c:	f7f0 ffbe 	bl	80012dc <_sbrk>
 8010360:	1c43      	adds	r3, r0, #1
 8010362:	d102      	bne.n	801036a <_sbrk_r+0x1a>
 8010364:	682b      	ldr	r3, [r5, #0]
 8010366:	b103      	cbz	r3, 801036a <_sbrk_r+0x1a>
 8010368:	6023      	str	r3, [r4, #0]
 801036a:	bd38      	pop	{r3, r4, r5, pc}
 801036c:	24002100 	.word	0x24002100

08010370 <__errno>:
 8010370:	4b01      	ldr	r3, [pc, #4]	@ (8010378 <__errno+0x8>)
 8010372:	6818      	ldr	r0, [r3, #0]
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	24000108 	.word	0x24000108

0801037c <__libc_init_array>:
 801037c:	b570      	push	{r4, r5, r6, lr}
 801037e:	4d0d      	ldr	r5, [pc, #52]	@ (80103b4 <__libc_init_array+0x38>)
 8010380:	4c0d      	ldr	r4, [pc, #52]	@ (80103b8 <__libc_init_array+0x3c>)
 8010382:	1b64      	subs	r4, r4, r5
 8010384:	10a4      	asrs	r4, r4, #2
 8010386:	2600      	movs	r6, #0
 8010388:	42a6      	cmp	r6, r4
 801038a:	d109      	bne.n	80103a0 <__libc_init_array+0x24>
 801038c:	4d0b      	ldr	r5, [pc, #44]	@ (80103bc <__libc_init_array+0x40>)
 801038e:	4c0c      	ldr	r4, [pc, #48]	@ (80103c0 <__libc_init_array+0x44>)
 8010390:	f000 fcda 	bl	8010d48 <_init>
 8010394:	1b64      	subs	r4, r4, r5
 8010396:	10a4      	asrs	r4, r4, #2
 8010398:	2600      	movs	r6, #0
 801039a:	42a6      	cmp	r6, r4
 801039c:	d105      	bne.n	80103aa <__libc_init_array+0x2e>
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80103a4:	4798      	blx	r3
 80103a6:	3601      	adds	r6, #1
 80103a8:	e7ee      	b.n	8010388 <__libc_init_array+0xc>
 80103aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80103ae:	4798      	blx	r3
 80103b0:	3601      	adds	r6, #1
 80103b2:	e7f2      	b.n	801039a <__libc_init_array+0x1e>
 80103b4:	08011c00 	.word	0x08011c00
 80103b8:	08011c00 	.word	0x08011c00
 80103bc:	08011c00 	.word	0x08011c00
 80103c0:	08011c04 	.word	0x08011c04

080103c4 <__retarget_lock_acquire_recursive>:
 80103c4:	4770      	bx	lr

080103c6 <__retarget_lock_release_recursive>:
 80103c6:	4770      	bx	lr

080103c8 <_free_r>:
 80103c8:	b538      	push	{r3, r4, r5, lr}
 80103ca:	4605      	mov	r5, r0
 80103cc:	2900      	cmp	r1, #0
 80103ce:	d041      	beq.n	8010454 <_free_r+0x8c>
 80103d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103d4:	1f0c      	subs	r4, r1, #4
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	bfb8      	it	lt
 80103da:	18e4      	addlt	r4, r4, r3
 80103dc:	f7ff ff84 	bl	80102e8 <__malloc_lock>
 80103e0:	4a1d      	ldr	r2, [pc, #116]	@ (8010458 <_free_r+0x90>)
 80103e2:	6813      	ldr	r3, [r2, #0]
 80103e4:	b933      	cbnz	r3, 80103f4 <_free_r+0x2c>
 80103e6:	6063      	str	r3, [r4, #4]
 80103e8:	6014      	str	r4, [r2, #0]
 80103ea:	4628      	mov	r0, r5
 80103ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103f0:	f7ff bf80 	b.w	80102f4 <__malloc_unlock>
 80103f4:	42a3      	cmp	r3, r4
 80103f6:	d908      	bls.n	801040a <_free_r+0x42>
 80103f8:	6820      	ldr	r0, [r4, #0]
 80103fa:	1821      	adds	r1, r4, r0
 80103fc:	428b      	cmp	r3, r1
 80103fe:	bf01      	itttt	eq
 8010400:	6819      	ldreq	r1, [r3, #0]
 8010402:	685b      	ldreq	r3, [r3, #4]
 8010404:	1809      	addeq	r1, r1, r0
 8010406:	6021      	streq	r1, [r4, #0]
 8010408:	e7ed      	b.n	80103e6 <_free_r+0x1e>
 801040a:	461a      	mov	r2, r3
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	b10b      	cbz	r3, 8010414 <_free_r+0x4c>
 8010410:	42a3      	cmp	r3, r4
 8010412:	d9fa      	bls.n	801040a <_free_r+0x42>
 8010414:	6811      	ldr	r1, [r2, #0]
 8010416:	1850      	adds	r0, r2, r1
 8010418:	42a0      	cmp	r0, r4
 801041a:	d10b      	bne.n	8010434 <_free_r+0x6c>
 801041c:	6820      	ldr	r0, [r4, #0]
 801041e:	4401      	add	r1, r0
 8010420:	1850      	adds	r0, r2, r1
 8010422:	4283      	cmp	r3, r0
 8010424:	6011      	str	r1, [r2, #0]
 8010426:	d1e0      	bne.n	80103ea <_free_r+0x22>
 8010428:	6818      	ldr	r0, [r3, #0]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	6053      	str	r3, [r2, #4]
 801042e:	4408      	add	r0, r1
 8010430:	6010      	str	r0, [r2, #0]
 8010432:	e7da      	b.n	80103ea <_free_r+0x22>
 8010434:	d902      	bls.n	801043c <_free_r+0x74>
 8010436:	230c      	movs	r3, #12
 8010438:	602b      	str	r3, [r5, #0]
 801043a:	e7d6      	b.n	80103ea <_free_r+0x22>
 801043c:	6820      	ldr	r0, [r4, #0]
 801043e:	1821      	adds	r1, r4, r0
 8010440:	428b      	cmp	r3, r1
 8010442:	bf04      	itt	eq
 8010444:	6819      	ldreq	r1, [r3, #0]
 8010446:	685b      	ldreq	r3, [r3, #4]
 8010448:	6063      	str	r3, [r4, #4]
 801044a:	bf04      	itt	eq
 801044c:	1809      	addeq	r1, r1, r0
 801044e:	6021      	streq	r1, [r4, #0]
 8010450:	6054      	str	r4, [r2, #4]
 8010452:	e7ca      	b.n	80103ea <_free_r+0x22>
 8010454:	bd38      	pop	{r3, r4, r5, pc}
 8010456:	bf00      	nop
 8010458:	24001fc4 	.word	0x24001fc4

0801045c <__ssputs_r>:
 801045c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010460:	688e      	ldr	r6, [r1, #8]
 8010462:	461f      	mov	r7, r3
 8010464:	42be      	cmp	r6, r7
 8010466:	680b      	ldr	r3, [r1, #0]
 8010468:	4682      	mov	sl, r0
 801046a:	460c      	mov	r4, r1
 801046c:	4690      	mov	r8, r2
 801046e:	d82d      	bhi.n	80104cc <__ssputs_r+0x70>
 8010470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010478:	d026      	beq.n	80104c8 <__ssputs_r+0x6c>
 801047a:	6965      	ldr	r5, [r4, #20]
 801047c:	6909      	ldr	r1, [r1, #16]
 801047e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010482:	eba3 0901 	sub.w	r9, r3, r1
 8010486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801048a:	1c7b      	adds	r3, r7, #1
 801048c:	444b      	add	r3, r9
 801048e:	106d      	asrs	r5, r5, #1
 8010490:	429d      	cmp	r5, r3
 8010492:	bf38      	it	cc
 8010494:	461d      	movcc	r5, r3
 8010496:	0553      	lsls	r3, r2, #21
 8010498:	d527      	bpl.n	80104ea <__ssputs_r+0x8e>
 801049a:	4629      	mov	r1, r5
 801049c:	f7ff fea4 	bl	80101e8 <_malloc_r>
 80104a0:	4606      	mov	r6, r0
 80104a2:	b360      	cbz	r0, 80104fe <__ssputs_r+0xa2>
 80104a4:	6921      	ldr	r1, [r4, #16]
 80104a6:	464a      	mov	r2, r9
 80104a8:	f000 fad8 	bl	8010a5c <memcpy>
 80104ac:	89a3      	ldrh	r3, [r4, #12]
 80104ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80104b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104b6:	81a3      	strh	r3, [r4, #12]
 80104b8:	6126      	str	r6, [r4, #16]
 80104ba:	6165      	str	r5, [r4, #20]
 80104bc:	444e      	add	r6, r9
 80104be:	eba5 0509 	sub.w	r5, r5, r9
 80104c2:	6026      	str	r6, [r4, #0]
 80104c4:	60a5      	str	r5, [r4, #8]
 80104c6:	463e      	mov	r6, r7
 80104c8:	42be      	cmp	r6, r7
 80104ca:	d900      	bls.n	80104ce <__ssputs_r+0x72>
 80104cc:	463e      	mov	r6, r7
 80104ce:	6820      	ldr	r0, [r4, #0]
 80104d0:	4632      	mov	r2, r6
 80104d2:	4641      	mov	r1, r8
 80104d4:	f000 faa8 	bl	8010a28 <memmove>
 80104d8:	68a3      	ldr	r3, [r4, #8]
 80104da:	1b9b      	subs	r3, r3, r6
 80104dc:	60a3      	str	r3, [r4, #8]
 80104de:	6823      	ldr	r3, [r4, #0]
 80104e0:	4433      	add	r3, r6
 80104e2:	6023      	str	r3, [r4, #0]
 80104e4:	2000      	movs	r0, #0
 80104e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ea:	462a      	mov	r2, r5
 80104ec:	f000 fac4 	bl	8010a78 <_realloc_r>
 80104f0:	4606      	mov	r6, r0
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d1e0      	bne.n	80104b8 <__ssputs_r+0x5c>
 80104f6:	6921      	ldr	r1, [r4, #16]
 80104f8:	4650      	mov	r0, sl
 80104fa:	f7ff ff65 	bl	80103c8 <_free_r>
 80104fe:	230c      	movs	r3, #12
 8010500:	f8ca 3000 	str.w	r3, [sl]
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801050a:	81a3      	strh	r3, [r4, #12]
 801050c:	f04f 30ff 	mov.w	r0, #4294967295
 8010510:	e7e9      	b.n	80104e6 <__ssputs_r+0x8a>
	...

08010514 <_svfiprintf_r>:
 8010514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010518:	4698      	mov	r8, r3
 801051a:	898b      	ldrh	r3, [r1, #12]
 801051c:	061b      	lsls	r3, r3, #24
 801051e:	b09d      	sub	sp, #116	@ 0x74
 8010520:	4607      	mov	r7, r0
 8010522:	460d      	mov	r5, r1
 8010524:	4614      	mov	r4, r2
 8010526:	d510      	bpl.n	801054a <_svfiprintf_r+0x36>
 8010528:	690b      	ldr	r3, [r1, #16]
 801052a:	b973      	cbnz	r3, 801054a <_svfiprintf_r+0x36>
 801052c:	2140      	movs	r1, #64	@ 0x40
 801052e:	f7ff fe5b 	bl	80101e8 <_malloc_r>
 8010532:	6028      	str	r0, [r5, #0]
 8010534:	6128      	str	r0, [r5, #16]
 8010536:	b930      	cbnz	r0, 8010546 <_svfiprintf_r+0x32>
 8010538:	230c      	movs	r3, #12
 801053a:	603b      	str	r3, [r7, #0]
 801053c:	f04f 30ff 	mov.w	r0, #4294967295
 8010540:	b01d      	add	sp, #116	@ 0x74
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010546:	2340      	movs	r3, #64	@ 0x40
 8010548:	616b      	str	r3, [r5, #20]
 801054a:	2300      	movs	r3, #0
 801054c:	9309      	str	r3, [sp, #36]	@ 0x24
 801054e:	2320      	movs	r3, #32
 8010550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010554:	f8cd 800c 	str.w	r8, [sp, #12]
 8010558:	2330      	movs	r3, #48	@ 0x30
 801055a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80106f8 <_svfiprintf_r+0x1e4>
 801055e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010562:	f04f 0901 	mov.w	r9, #1
 8010566:	4623      	mov	r3, r4
 8010568:	469a      	mov	sl, r3
 801056a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801056e:	b10a      	cbz	r2, 8010574 <_svfiprintf_r+0x60>
 8010570:	2a25      	cmp	r2, #37	@ 0x25
 8010572:	d1f9      	bne.n	8010568 <_svfiprintf_r+0x54>
 8010574:	ebba 0b04 	subs.w	fp, sl, r4
 8010578:	d00b      	beq.n	8010592 <_svfiprintf_r+0x7e>
 801057a:	465b      	mov	r3, fp
 801057c:	4622      	mov	r2, r4
 801057e:	4629      	mov	r1, r5
 8010580:	4638      	mov	r0, r7
 8010582:	f7ff ff6b 	bl	801045c <__ssputs_r>
 8010586:	3001      	adds	r0, #1
 8010588:	f000 80a7 	beq.w	80106da <_svfiprintf_r+0x1c6>
 801058c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801058e:	445a      	add	r2, fp
 8010590:	9209      	str	r2, [sp, #36]	@ 0x24
 8010592:	f89a 3000 	ldrb.w	r3, [sl]
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 809f 	beq.w	80106da <_svfiprintf_r+0x1c6>
 801059c:	2300      	movs	r3, #0
 801059e:	f04f 32ff 	mov.w	r2, #4294967295
 80105a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105a6:	f10a 0a01 	add.w	sl, sl, #1
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	9307      	str	r3, [sp, #28]
 80105ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80105b4:	4654      	mov	r4, sl
 80105b6:	2205      	movs	r2, #5
 80105b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105bc:	484e      	ldr	r0, [pc, #312]	@ (80106f8 <_svfiprintf_r+0x1e4>)
 80105be:	f7ef fe8f 	bl	80002e0 <memchr>
 80105c2:	9a04      	ldr	r2, [sp, #16]
 80105c4:	b9d8      	cbnz	r0, 80105fe <_svfiprintf_r+0xea>
 80105c6:	06d0      	lsls	r0, r2, #27
 80105c8:	bf44      	itt	mi
 80105ca:	2320      	movmi	r3, #32
 80105cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105d0:	0711      	lsls	r1, r2, #28
 80105d2:	bf44      	itt	mi
 80105d4:	232b      	movmi	r3, #43	@ 0x2b
 80105d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105da:	f89a 3000 	ldrb.w	r3, [sl]
 80105de:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e0:	d015      	beq.n	801060e <_svfiprintf_r+0xfa>
 80105e2:	9a07      	ldr	r2, [sp, #28]
 80105e4:	4654      	mov	r4, sl
 80105e6:	2000      	movs	r0, #0
 80105e8:	f04f 0c0a 	mov.w	ip, #10
 80105ec:	4621      	mov	r1, r4
 80105ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105f2:	3b30      	subs	r3, #48	@ 0x30
 80105f4:	2b09      	cmp	r3, #9
 80105f6:	d94b      	bls.n	8010690 <_svfiprintf_r+0x17c>
 80105f8:	b1b0      	cbz	r0, 8010628 <_svfiprintf_r+0x114>
 80105fa:	9207      	str	r2, [sp, #28]
 80105fc:	e014      	b.n	8010628 <_svfiprintf_r+0x114>
 80105fe:	eba0 0308 	sub.w	r3, r0, r8
 8010602:	fa09 f303 	lsl.w	r3, r9, r3
 8010606:	4313      	orrs	r3, r2
 8010608:	9304      	str	r3, [sp, #16]
 801060a:	46a2      	mov	sl, r4
 801060c:	e7d2      	b.n	80105b4 <_svfiprintf_r+0xa0>
 801060e:	9b03      	ldr	r3, [sp, #12]
 8010610:	1d19      	adds	r1, r3, #4
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	9103      	str	r1, [sp, #12]
 8010616:	2b00      	cmp	r3, #0
 8010618:	bfbb      	ittet	lt
 801061a:	425b      	neglt	r3, r3
 801061c:	f042 0202 	orrlt.w	r2, r2, #2
 8010620:	9307      	strge	r3, [sp, #28]
 8010622:	9307      	strlt	r3, [sp, #28]
 8010624:	bfb8      	it	lt
 8010626:	9204      	strlt	r2, [sp, #16]
 8010628:	7823      	ldrb	r3, [r4, #0]
 801062a:	2b2e      	cmp	r3, #46	@ 0x2e
 801062c:	d10a      	bne.n	8010644 <_svfiprintf_r+0x130>
 801062e:	7863      	ldrb	r3, [r4, #1]
 8010630:	2b2a      	cmp	r3, #42	@ 0x2a
 8010632:	d132      	bne.n	801069a <_svfiprintf_r+0x186>
 8010634:	9b03      	ldr	r3, [sp, #12]
 8010636:	1d1a      	adds	r2, r3, #4
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	9203      	str	r2, [sp, #12]
 801063c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010640:	3402      	adds	r4, #2
 8010642:	9305      	str	r3, [sp, #20]
 8010644:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010708 <_svfiprintf_r+0x1f4>
 8010648:	7821      	ldrb	r1, [r4, #0]
 801064a:	2203      	movs	r2, #3
 801064c:	4650      	mov	r0, sl
 801064e:	f7ef fe47 	bl	80002e0 <memchr>
 8010652:	b138      	cbz	r0, 8010664 <_svfiprintf_r+0x150>
 8010654:	9b04      	ldr	r3, [sp, #16]
 8010656:	eba0 000a 	sub.w	r0, r0, sl
 801065a:	2240      	movs	r2, #64	@ 0x40
 801065c:	4082      	lsls	r2, r0
 801065e:	4313      	orrs	r3, r2
 8010660:	3401      	adds	r4, #1
 8010662:	9304      	str	r3, [sp, #16]
 8010664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010668:	4824      	ldr	r0, [pc, #144]	@ (80106fc <_svfiprintf_r+0x1e8>)
 801066a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801066e:	2206      	movs	r2, #6
 8010670:	f7ef fe36 	bl	80002e0 <memchr>
 8010674:	2800      	cmp	r0, #0
 8010676:	d036      	beq.n	80106e6 <_svfiprintf_r+0x1d2>
 8010678:	4b21      	ldr	r3, [pc, #132]	@ (8010700 <_svfiprintf_r+0x1ec>)
 801067a:	bb1b      	cbnz	r3, 80106c4 <_svfiprintf_r+0x1b0>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	3307      	adds	r3, #7
 8010680:	f023 0307 	bic.w	r3, r3, #7
 8010684:	3308      	adds	r3, #8
 8010686:	9303      	str	r3, [sp, #12]
 8010688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801068a:	4433      	add	r3, r6
 801068c:	9309      	str	r3, [sp, #36]	@ 0x24
 801068e:	e76a      	b.n	8010566 <_svfiprintf_r+0x52>
 8010690:	fb0c 3202 	mla	r2, ip, r2, r3
 8010694:	460c      	mov	r4, r1
 8010696:	2001      	movs	r0, #1
 8010698:	e7a8      	b.n	80105ec <_svfiprintf_r+0xd8>
 801069a:	2300      	movs	r3, #0
 801069c:	3401      	adds	r4, #1
 801069e:	9305      	str	r3, [sp, #20]
 80106a0:	4619      	mov	r1, r3
 80106a2:	f04f 0c0a 	mov.w	ip, #10
 80106a6:	4620      	mov	r0, r4
 80106a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ac:	3a30      	subs	r2, #48	@ 0x30
 80106ae:	2a09      	cmp	r2, #9
 80106b0:	d903      	bls.n	80106ba <_svfiprintf_r+0x1a6>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d0c6      	beq.n	8010644 <_svfiprintf_r+0x130>
 80106b6:	9105      	str	r1, [sp, #20]
 80106b8:	e7c4      	b.n	8010644 <_svfiprintf_r+0x130>
 80106ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80106be:	4604      	mov	r4, r0
 80106c0:	2301      	movs	r3, #1
 80106c2:	e7f0      	b.n	80106a6 <_svfiprintf_r+0x192>
 80106c4:	ab03      	add	r3, sp, #12
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	462a      	mov	r2, r5
 80106ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010704 <_svfiprintf_r+0x1f0>)
 80106cc:	a904      	add	r1, sp, #16
 80106ce:	4638      	mov	r0, r7
 80106d0:	f3af 8000 	nop.w
 80106d4:	1c42      	adds	r2, r0, #1
 80106d6:	4606      	mov	r6, r0
 80106d8:	d1d6      	bne.n	8010688 <_svfiprintf_r+0x174>
 80106da:	89ab      	ldrh	r3, [r5, #12]
 80106dc:	065b      	lsls	r3, r3, #25
 80106de:	f53f af2d 	bmi.w	801053c <_svfiprintf_r+0x28>
 80106e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106e4:	e72c      	b.n	8010540 <_svfiprintf_r+0x2c>
 80106e6:	ab03      	add	r3, sp, #12
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	462a      	mov	r2, r5
 80106ec:	4b05      	ldr	r3, [pc, #20]	@ (8010704 <_svfiprintf_r+0x1f0>)
 80106ee:	a904      	add	r1, sp, #16
 80106f0:	4638      	mov	r0, r7
 80106f2:	f000 f879 	bl	80107e8 <_printf_i>
 80106f6:	e7ed      	b.n	80106d4 <_svfiprintf_r+0x1c0>
 80106f8:	08011bb4 	.word	0x08011bb4
 80106fc:	08011bbe 	.word	0x08011bbe
 8010700:	00000000 	.word	0x00000000
 8010704:	0801045d 	.word	0x0801045d
 8010708:	08011bba 	.word	0x08011bba

0801070c <_printf_common>:
 801070c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010710:	4616      	mov	r6, r2
 8010712:	4698      	mov	r8, r3
 8010714:	688a      	ldr	r2, [r1, #8]
 8010716:	690b      	ldr	r3, [r1, #16]
 8010718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801071c:	4293      	cmp	r3, r2
 801071e:	bfb8      	it	lt
 8010720:	4613      	movlt	r3, r2
 8010722:	6033      	str	r3, [r6, #0]
 8010724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010728:	4607      	mov	r7, r0
 801072a:	460c      	mov	r4, r1
 801072c:	b10a      	cbz	r2, 8010732 <_printf_common+0x26>
 801072e:	3301      	adds	r3, #1
 8010730:	6033      	str	r3, [r6, #0]
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	0699      	lsls	r1, r3, #26
 8010736:	bf42      	ittt	mi
 8010738:	6833      	ldrmi	r3, [r6, #0]
 801073a:	3302      	addmi	r3, #2
 801073c:	6033      	strmi	r3, [r6, #0]
 801073e:	6825      	ldr	r5, [r4, #0]
 8010740:	f015 0506 	ands.w	r5, r5, #6
 8010744:	d106      	bne.n	8010754 <_printf_common+0x48>
 8010746:	f104 0a19 	add.w	sl, r4, #25
 801074a:	68e3      	ldr	r3, [r4, #12]
 801074c:	6832      	ldr	r2, [r6, #0]
 801074e:	1a9b      	subs	r3, r3, r2
 8010750:	42ab      	cmp	r3, r5
 8010752:	dc26      	bgt.n	80107a2 <_printf_common+0x96>
 8010754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010758:	6822      	ldr	r2, [r4, #0]
 801075a:	3b00      	subs	r3, #0
 801075c:	bf18      	it	ne
 801075e:	2301      	movne	r3, #1
 8010760:	0692      	lsls	r2, r2, #26
 8010762:	d42b      	bmi.n	80107bc <_printf_common+0xb0>
 8010764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010768:	4641      	mov	r1, r8
 801076a:	4638      	mov	r0, r7
 801076c:	47c8      	blx	r9
 801076e:	3001      	adds	r0, #1
 8010770:	d01e      	beq.n	80107b0 <_printf_common+0xa4>
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	6922      	ldr	r2, [r4, #16]
 8010776:	f003 0306 	and.w	r3, r3, #6
 801077a:	2b04      	cmp	r3, #4
 801077c:	bf02      	ittt	eq
 801077e:	68e5      	ldreq	r5, [r4, #12]
 8010780:	6833      	ldreq	r3, [r6, #0]
 8010782:	1aed      	subeq	r5, r5, r3
 8010784:	68a3      	ldr	r3, [r4, #8]
 8010786:	bf0c      	ite	eq
 8010788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801078c:	2500      	movne	r5, #0
 801078e:	4293      	cmp	r3, r2
 8010790:	bfc4      	itt	gt
 8010792:	1a9b      	subgt	r3, r3, r2
 8010794:	18ed      	addgt	r5, r5, r3
 8010796:	2600      	movs	r6, #0
 8010798:	341a      	adds	r4, #26
 801079a:	42b5      	cmp	r5, r6
 801079c:	d11a      	bne.n	80107d4 <_printf_common+0xc8>
 801079e:	2000      	movs	r0, #0
 80107a0:	e008      	b.n	80107b4 <_printf_common+0xa8>
 80107a2:	2301      	movs	r3, #1
 80107a4:	4652      	mov	r2, sl
 80107a6:	4641      	mov	r1, r8
 80107a8:	4638      	mov	r0, r7
 80107aa:	47c8      	blx	r9
 80107ac:	3001      	adds	r0, #1
 80107ae:	d103      	bne.n	80107b8 <_printf_common+0xac>
 80107b0:	f04f 30ff 	mov.w	r0, #4294967295
 80107b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b8:	3501      	adds	r5, #1
 80107ba:	e7c6      	b.n	801074a <_printf_common+0x3e>
 80107bc:	18e1      	adds	r1, r4, r3
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	2030      	movs	r0, #48	@ 0x30
 80107c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80107c6:	4422      	add	r2, r4
 80107c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80107cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80107d0:	3302      	adds	r3, #2
 80107d2:	e7c7      	b.n	8010764 <_printf_common+0x58>
 80107d4:	2301      	movs	r3, #1
 80107d6:	4622      	mov	r2, r4
 80107d8:	4641      	mov	r1, r8
 80107da:	4638      	mov	r0, r7
 80107dc:	47c8      	blx	r9
 80107de:	3001      	adds	r0, #1
 80107e0:	d0e6      	beq.n	80107b0 <_printf_common+0xa4>
 80107e2:	3601      	adds	r6, #1
 80107e4:	e7d9      	b.n	801079a <_printf_common+0x8e>
	...

080107e8 <_printf_i>:
 80107e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107ec:	7e0f      	ldrb	r7, [r1, #24]
 80107ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107f0:	2f78      	cmp	r7, #120	@ 0x78
 80107f2:	4691      	mov	r9, r2
 80107f4:	4680      	mov	r8, r0
 80107f6:	460c      	mov	r4, r1
 80107f8:	469a      	mov	sl, r3
 80107fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80107fe:	d807      	bhi.n	8010810 <_printf_i+0x28>
 8010800:	2f62      	cmp	r7, #98	@ 0x62
 8010802:	d80a      	bhi.n	801081a <_printf_i+0x32>
 8010804:	2f00      	cmp	r7, #0
 8010806:	f000 80d2 	beq.w	80109ae <_printf_i+0x1c6>
 801080a:	2f58      	cmp	r7, #88	@ 0x58
 801080c:	f000 80b9 	beq.w	8010982 <_printf_i+0x19a>
 8010810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010818:	e03a      	b.n	8010890 <_printf_i+0xa8>
 801081a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801081e:	2b15      	cmp	r3, #21
 8010820:	d8f6      	bhi.n	8010810 <_printf_i+0x28>
 8010822:	a101      	add	r1, pc, #4	@ (adr r1, 8010828 <_printf_i+0x40>)
 8010824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010828:	08010881 	.word	0x08010881
 801082c:	08010895 	.word	0x08010895
 8010830:	08010811 	.word	0x08010811
 8010834:	08010811 	.word	0x08010811
 8010838:	08010811 	.word	0x08010811
 801083c:	08010811 	.word	0x08010811
 8010840:	08010895 	.word	0x08010895
 8010844:	08010811 	.word	0x08010811
 8010848:	08010811 	.word	0x08010811
 801084c:	08010811 	.word	0x08010811
 8010850:	08010811 	.word	0x08010811
 8010854:	08010995 	.word	0x08010995
 8010858:	080108bf 	.word	0x080108bf
 801085c:	0801094f 	.word	0x0801094f
 8010860:	08010811 	.word	0x08010811
 8010864:	08010811 	.word	0x08010811
 8010868:	080109b7 	.word	0x080109b7
 801086c:	08010811 	.word	0x08010811
 8010870:	080108bf 	.word	0x080108bf
 8010874:	08010811 	.word	0x08010811
 8010878:	08010811 	.word	0x08010811
 801087c:	08010957 	.word	0x08010957
 8010880:	6833      	ldr	r3, [r6, #0]
 8010882:	1d1a      	adds	r2, r3, #4
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	6032      	str	r2, [r6, #0]
 8010888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801088c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010890:	2301      	movs	r3, #1
 8010892:	e09d      	b.n	80109d0 <_printf_i+0x1e8>
 8010894:	6833      	ldr	r3, [r6, #0]
 8010896:	6820      	ldr	r0, [r4, #0]
 8010898:	1d19      	adds	r1, r3, #4
 801089a:	6031      	str	r1, [r6, #0]
 801089c:	0606      	lsls	r6, r0, #24
 801089e:	d501      	bpl.n	80108a4 <_printf_i+0xbc>
 80108a0:	681d      	ldr	r5, [r3, #0]
 80108a2:	e003      	b.n	80108ac <_printf_i+0xc4>
 80108a4:	0645      	lsls	r5, r0, #25
 80108a6:	d5fb      	bpl.n	80108a0 <_printf_i+0xb8>
 80108a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80108ac:	2d00      	cmp	r5, #0
 80108ae:	da03      	bge.n	80108b8 <_printf_i+0xd0>
 80108b0:	232d      	movs	r3, #45	@ 0x2d
 80108b2:	426d      	negs	r5, r5
 80108b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108b8:	4859      	ldr	r0, [pc, #356]	@ (8010a20 <_printf_i+0x238>)
 80108ba:	230a      	movs	r3, #10
 80108bc:	e011      	b.n	80108e2 <_printf_i+0xfa>
 80108be:	6821      	ldr	r1, [r4, #0]
 80108c0:	6833      	ldr	r3, [r6, #0]
 80108c2:	0608      	lsls	r0, r1, #24
 80108c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80108c8:	d402      	bmi.n	80108d0 <_printf_i+0xe8>
 80108ca:	0649      	lsls	r1, r1, #25
 80108cc:	bf48      	it	mi
 80108ce:	b2ad      	uxthmi	r5, r5
 80108d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80108d2:	4853      	ldr	r0, [pc, #332]	@ (8010a20 <_printf_i+0x238>)
 80108d4:	6033      	str	r3, [r6, #0]
 80108d6:	bf14      	ite	ne
 80108d8:	230a      	movne	r3, #10
 80108da:	2308      	moveq	r3, #8
 80108dc:	2100      	movs	r1, #0
 80108de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80108e2:	6866      	ldr	r6, [r4, #4]
 80108e4:	60a6      	str	r6, [r4, #8]
 80108e6:	2e00      	cmp	r6, #0
 80108e8:	bfa2      	ittt	ge
 80108ea:	6821      	ldrge	r1, [r4, #0]
 80108ec:	f021 0104 	bicge.w	r1, r1, #4
 80108f0:	6021      	strge	r1, [r4, #0]
 80108f2:	b90d      	cbnz	r5, 80108f8 <_printf_i+0x110>
 80108f4:	2e00      	cmp	r6, #0
 80108f6:	d04b      	beq.n	8010990 <_printf_i+0x1a8>
 80108f8:	4616      	mov	r6, r2
 80108fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80108fe:	fb03 5711 	mls	r7, r3, r1, r5
 8010902:	5dc7      	ldrb	r7, [r0, r7]
 8010904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010908:	462f      	mov	r7, r5
 801090a:	42bb      	cmp	r3, r7
 801090c:	460d      	mov	r5, r1
 801090e:	d9f4      	bls.n	80108fa <_printf_i+0x112>
 8010910:	2b08      	cmp	r3, #8
 8010912:	d10b      	bne.n	801092c <_printf_i+0x144>
 8010914:	6823      	ldr	r3, [r4, #0]
 8010916:	07df      	lsls	r7, r3, #31
 8010918:	d508      	bpl.n	801092c <_printf_i+0x144>
 801091a:	6923      	ldr	r3, [r4, #16]
 801091c:	6861      	ldr	r1, [r4, #4]
 801091e:	4299      	cmp	r1, r3
 8010920:	bfde      	ittt	le
 8010922:	2330      	movle	r3, #48	@ 0x30
 8010924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010928:	f106 36ff 	addle.w	r6, r6, #4294967295
 801092c:	1b92      	subs	r2, r2, r6
 801092e:	6122      	str	r2, [r4, #16]
 8010930:	f8cd a000 	str.w	sl, [sp]
 8010934:	464b      	mov	r3, r9
 8010936:	aa03      	add	r2, sp, #12
 8010938:	4621      	mov	r1, r4
 801093a:	4640      	mov	r0, r8
 801093c:	f7ff fee6 	bl	801070c <_printf_common>
 8010940:	3001      	adds	r0, #1
 8010942:	d14a      	bne.n	80109da <_printf_i+0x1f2>
 8010944:	f04f 30ff 	mov.w	r0, #4294967295
 8010948:	b004      	add	sp, #16
 801094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801094e:	6823      	ldr	r3, [r4, #0]
 8010950:	f043 0320 	orr.w	r3, r3, #32
 8010954:	6023      	str	r3, [r4, #0]
 8010956:	4833      	ldr	r0, [pc, #204]	@ (8010a24 <_printf_i+0x23c>)
 8010958:	2778      	movs	r7, #120	@ 0x78
 801095a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	6831      	ldr	r1, [r6, #0]
 8010962:	061f      	lsls	r7, r3, #24
 8010964:	f851 5b04 	ldr.w	r5, [r1], #4
 8010968:	d402      	bmi.n	8010970 <_printf_i+0x188>
 801096a:	065f      	lsls	r7, r3, #25
 801096c:	bf48      	it	mi
 801096e:	b2ad      	uxthmi	r5, r5
 8010970:	6031      	str	r1, [r6, #0]
 8010972:	07d9      	lsls	r1, r3, #31
 8010974:	bf44      	itt	mi
 8010976:	f043 0320 	orrmi.w	r3, r3, #32
 801097a:	6023      	strmi	r3, [r4, #0]
 801097c:	b11d      	cbz	r5, 8010986 <_printf_i+0x19e>
 801097e:	2310      	movs	r3, #16
 8010980:	e7ac      	b.n	80108dc <_printf_i+0xf4>
 8010982:	4827      	ldr	r0, [pc, #156]	@ (8010a20 <_printf_i+0x238>)
 8010984:	e7e9      	b.n	801095a <_printf_i+0x172>
 8010986:	6823      	ldr	r3, [r4, #0]
 8010988:	f023 0320 	bic.w	r3, r3, #32
 801098c:	6023      	str	r3, [r4, #0]
 801098e:	e7f6      	b.n	801097e <_printf_i+0x196>
 8010990:	4616      	mov	r6, r2
 8010992:	e7bd      	b.n	8010910 <_printf_i+0x128>
 8010994:	6833      	ldr	r3, [r6, #0]
 8010996:	6825      	ldr	r5, [r4, #0]
 8010998:	6961      	ldr	r1, [r4, #20]
 801099a:	1d18      	adds	r0, r3, #4
 801099c:	6030      	str	r0, [r6, #0]
 801099e:	062e      	lsls	r6, r5, #24
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	d501      	bpl.n	80109a8 <_printf_i+0x1c0>
 80109a4:	6019      	str	r1, [r3, #0]
 80109a6:	e002      	b.n	80109ae <_printf_i+0x1c6>
 80109a8:	0668      	lsls	r0, r5, #25
 80109aa:	d5fb      	bpl.n	80109a4 <_printf_i+0x1bc>
 80109ac:	8019      	strh	r1, [r3, #0]
 80109ae:	2300      	movs	r3, #0
 80109b0:	6123      	str	r3, [r4, #16]
 80109b2:	4616      	mov	r6, r2
 80109b4:	e7bc      	b.n	8010930 <_printf_i+0x148>
 80109b6:	6833      	ldr	r3, [r6, #0]
 80109b8:	1d1a      	adds	r2, r3, #4
 80109ba:	6032      	str	r2, [r6, #0]
 80109bc:	681e      	ldr	r6, [r3, #0]
 80109be:	6862      	ldr	r2, [r4, #4]
 80109c0:	2100      	movs	r1, #0
 80109c2:	4630      	mov	r0, r6
 80109c4:	f7ef fc8c 	bl	80002e0 <memchr>
 80109c8:	b108      	cbz	r0, 80109ce <_printf_i+0x1e6>
 80109ca:	1b80      	subs	r0, r0, r6
 80109cc:	6060      	str	r0, [r4, #4]
 80109ce:	6863      	ldr	r3, [r4, #4]
 80109d0:	6123      	str	r3, [r4, #16]
 80109d2:	2300      	movs	r3, #0
 80109d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109d8:	e7aa      	b.n	8010930 <_printf_i+0x148>
 80109da:	6923      	ldr	r3, [r4, #16]
 80109dc:	4632      	mov	r2, r6
 80109de:	4649      	mov	r1, r9
 80109e0:	4640      	mov	r0, r8
 80109e2:	47d0      	blx	sl
 80109e4:	3001      	adds	r0, #1
 80109e6:	d0ad      	beq.n	8010944 <_printf_i+0x15c>
 80109e8:	6823      	ldr	r3, [r4, #0]
 80109ea:	079b      	lsls	r3, r3, #30
 80109ec:	d413      	bmi.n	8010a16 <_printf_i+0x22e>
 80109ee:	68e0      	ldr	r0, [r4, #12]
 80109f0:	9b03      	ldr	r3, [sp, #12]
 80109f2:	4298      	cmp	r0, r3
 80109f4:	bfb8      	it	lt
 80109f6:	4618      	movlt	r0, r3
 80109f8:	e7a6      	b.n	8010948 <_printf_i+0x160>
 80109fa:	2301      	movs	r3, #1
 80109fc:	4632      	mov	r2, r6
 80109fe:	4649      	mov	r1, r9
 8010a00:	4640      	mov	r0, r8
 8010a02:	47d0      	blx	sl
 8010a04:	3001      	adds	r0, #1
 8010a06:	d09d      	beq.n	8010944 <_printf_i+0x15c>
 8010a08:	3501      	adds	r5, #1
 8010a0a:	68e3      	ldr	r3, [r4, #12]
 8010a0c:	9903      	ldr	r1, [sp, #12]
 8010a0e:	1a5b      	subs	r3, r3, r1
 8010a10:	42ab      	cmp	r3, r5
 8010a12:	dcf2      	bgt.n	80109fa <_printf_i+0x212>
 8010a14:	e7eb      	b.n	80109ee <_printf_i+0x206>
 8010a16:	2500      	movs	r5, #0
 8010a18:	f104 0619 	add.w	r6, r4, #25
 8010a1c:	e7f5      	b.n	8010a0a <_printf_i+0x222>
 8010a1e:	bf00      	nop
 8010a20:	08011bc5 	.word	0x08011bc5
 8010a24:	08011bd6 	.word	0x08011bd6

08010a28 <memmove>:
 8010a28:	4288      	cmp	r0, r1
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	eb01 0402 	add.w	r4, r1, r2
 8010a30:	d902      	bls.n	8010a38 <memmove+0x10>
 8010a32:	4284      	cmp	r4, r0
 8010a34:	4623      	mov	r3, r4
 8010a36:	d807      	bhi.n	8010a48 <memmove+0x20>
 8010a38:	1e43      	subs	r3, r0, #1
 8010a3a:	42a1      	cmp	r1, r4
 8010a3c:	d008      	beq.n	8010a50 <memmove+0x28>
 8010a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a46:	e7f8      	b.n	8010a3a <memmove+0x12>
 8010a48:	4402      	add	r2, r0
 8010a4a:	4601      	mov	r1, r0
 8010a4c:	428a      	cmp	r2, r1
 8010a4e:	d100      	bne.n	8010a52 <memmove+0x2a>
 8010a50:	bd10      	pop	{r4, pc}
 8010a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a5a:	e7f7      	b.n	8010a4c <memmove+0x24>

08010a5c <memcpy>:
 8010a5c:	440a      	add	r2, r1
 8010a5e:	4291      	cmp	r1, r2
 8010a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a64:	d100      	bne.n	8010a68 <memcpy+0xc>
 8010a66:	4770      	bx	lr
 8010a68:	b510      	push	{r4, lr}
 8010a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a72:	4291      	cmp	r1, r2
 8010a74:	d1f9      	bne.n	8010a6a <memcpy+0xe>
 8010a76:	bd10      	pop	{r4, pc}

08010a78 <_realloc_r>:
 8010a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7c:	4680      	mov	r8, r0
 8010a7e:	4615      	mov	r5, r2
 8010a80:	460c      	mov	r4, r1
 8010a82:	b921      	cbnz	r1, 8010a8e <_realloc_r+0x16>
 8010a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a88:	4611      	mov	r1, r2
 8010a8a:	f7ff bbad 	b.w	80101e8 <_malloc_r>
 8010a8e:	b92a      	cbnz	r2, 8010a9c <_realloc_r+0x24>
 8010a90:	f7ff fc9a 	bl	80103c8 <_free_r>
 8010a94:	2400      	movs	r4, #0
 8010a96:	4620      	mov	r0, r4
 8010a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a9c:	f000 f81a 	bl	8010ad4 <_malloc_usable_size_r>
 8010aa0:	4285      	cmp	r5, r0
 8010aa2:	4606      	mov	r6, r0
 8010aa4:	d802      	bhi.n	8010aac <_realloc_r+0x34>
 8010aa6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010aaa:	d8f4      	bhi.n	8010a96 <_realloc_r+0x1e>
 8010aac:	4629      	mov	r1, r5
 8010aae:	4640      	mov	r0, r8
 8010ab0:	f7ff fb9a 	bl	80101e8 <_malloc_r>
 8010ab4:	4607      	mov	r7, r0
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d0ec      	beq.n	8010a94 <_realloc_r+0x1c>
 8010aba:	42b5      	cmp	r5, r6
 8010abc:	462a      	mov	r2, r5
 8010abe:	4621      	mov	r1, r4
 8010ac0:	bf28      	it	cs
 8010ac2:	4632      	movcs	r2, r6
 8010ac4:	f7ff ffca 	bl	8010a5c <memcpy>
 8010ac8:	4621      	mov	r1, r4
 8010aca:	4640      	mov	r0, r8
 8010acc:	f7ff fc7c 	bl	80103c8 <_free_r>
 8010ad0:	463c      	mov	r4, r7
 8010ad2:	e7e0      	b.n	8010a96 <_realloc_r+0x1e>

08010ad4 <_malloc_usable_size_r>:
 8010ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ad8:	1f18      	subs	r0, r3, #4
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	bfbc      	itt	lt
 8010ade:	580b      	ldrlt	r3, [r1, r0]
 8010ae0:	18c0      	addlt	r0, r0, r3
 8010ae2:	4770      	bx	lr
 8010ae4:	0000      	movs	r0, r0
	...

08010ae8 <fmod>:
 8010ae8:	b508      	push	{r3, lr}
 8010aea:	ed2d 8b04 	vpush	{d8-d9}
 8010aee:	eeb0 9b40 	vmov.f64	d9, d0
 8010af2:	eeb0 8b41 	vmov.f64	d8, d1
 8010af6:	f000 f81b 	bl	8010b30 <__ieee754_fmod>
 8010afa:	eeb4 9b48 	vcmp.f64	d9, d8
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	d60c      	bvs.n	8010b1e <fmod+0x36>
 8010b04:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8010b28 <fmod+0x40>
 8010b08:	eeb4 8b49 	vcmp.f64	d8, d9
 8010b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b10:	d105      	bne.n	8010b1e <fmod+0x36>
 8010b12:	f7ff fc2d 	bl	8010370 <__errno>
 8010b16:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010b1a:	2321      	movs	r3, #33	@ 0x21
 8010b1c:	6003      	str	r3, [r0, #0]
 8010b1e:	ecbd 8b04 	vpop	{d8-d9}
 8010b22:	bd08      	pop	{r3, pc}
 8010b24:	f3af 8000 	nop.w
	...

08010b30 <__ieee754_fmod>:
 8010b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b34:	ed8d 1b00 	vstr	d1, [sp]
 8010b38:	e9dd 6500 	ldrd	r6, r5, [sp]
 8010b3c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8010b40:	ea56 0307 	orrs.w	r3, r6, r7
 8010b44:	46b6      	mov	lr, r6
 8010b46:	d00d      	beq.n	8010b64 <__ieee754_fmod+0x34>
 8010b48:	ee10 ca90 	vmov	ip, s1
 8010b4c:	4b78      	ldr	r3, [pc, #480]	@ (8010d30 <__ieee754_fmod+0x200>)
 8010b4e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8010b52:	4598      	cmp	r8, r3
 8010b54:	d806      	bhi.n	8010b64 <__ieee754_fmod+0x34>
 8010b56:	4273      	negs	r3, r6
 8010b58:	4a76      	ldr	r2, [pc, #472]	@ (8010d34 <__ieee754_fmod+0x204>)
 8010b5a:	4333      	orrs	r3, r6
 8010b5c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d908      	bls.n	8010b76 <__ieee754_fmod+0x46>
 8010b64:	ed9d 7b00 	vldr	d7, [sp]
 8010b68:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010b6c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8010b70:	b003      	add	sp, #12
 8010b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b76:	ee10 9a10 	vmov	r9, s0
 8010b7a:	45b8      	cmp	r8, r7
 8010b7c:	4649      	mov	r1, r9
 8010b7e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8010b82:	dc09      	bgt.n	8010b98 <__ieee754_fmod+0x68>
 8010b84:	dbf4      	blt.n	8010b70 <__ieee754_fmod+0x40>
 8010b86:	454e      	cmp	r6, r9
 8010b88:	d8f2      	bhi.n	8010b70 <__ieee754_fmod+0x40>
 8010b8a:	d105      	bne.n	8010b98 <__ieee754_fmod+0x68>
 8010b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8010d38 <__ieee754_fmod+0x208>)
 8010b8e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8010b92:	ed93 0b00 	vldr	d0, [r3]
 8010b96:	e7eb      	b.n	8010b70 <__ieee754_fmod+0x40>
 8010b98:	4a66      	ldr	r2, [pc, #408]	@ (8010d34 <__ieee754_fmod+0x204>)
 8010b9a:	ea1c 0f02 	tst.w	ip, r2
 8010b9e:	d14a      	bne.n	8010c36 <__ieee754_fmod+0x106>
 8010ba0:	f1b8 0f00 	cmp.w	r8, #0
 8010ba4:	d13f      	bne.n	8010c26 <__ieee754_fmod+0xf6>
 8010ba6:	4865      	ldr	r0, [pc, #404]	@ (8010d3c <__ieee754_fmod+0x20c>)
 8010ba8:	464b      	mov	r3, r9
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	dc38      	bgt.n	8010c20 <__ieee754_fmod+0xf0>
 8010bae:	4215      	tst	r5, r2
 8010bb0:	d150      	bne.n	8010c54 <__ieee754_fmod+0x124>
 8010bb2:	2f00      	cmp	r7, #0
 8010bb4:	d147      	bne.n	8010c46 <__ieee754_fmod+0x116>
 8010bb6:	4a61      	ldr	r2, [pc, #388]	@ (8010d3c <__ieee754_fmod+0x20c>)
 8010bb8:	4633      	mov	r3, r6
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dc40      	bgt.n	8010c40 <__ieee754_fmod+0x110>
 8010bbe:	4b60      	ldr	r3, [pc, #384]	@ (8010d40 <__ieee754_fmod+0x210>)
 8010bc0:	4298      	cmp	r0, r3
 8010bc2:	db4b      	blt.n	8010c5c <__ieee754_fmod+0x12c>
 8010bc4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8010bc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010bcc:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8010d40 <__ieee754_fmod+0x210>
 8010bd0:	4562      	cmp	r2, ip
 8010bd2:	db58      	blt.n	8010c86 <__ieee754_fmod+0x156>
 8010bd4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010bd8:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8010bdc:	1a80      	subs	r0, r0, r2
 8010bde:	1b5e      	subs	r6, r3, r5
 8010be0:	eba1 070e 	sub.w	r7, r1, lr
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d164      	bne.n	8010cb2 <__ieee754_fmod+0x182>
 8010be8:	4571      	cmp	r1, lr
 8010bea:	bf38      	it	cc
 8010bec:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8010bf0:	2e00      	cmp	r6, #0
 8010bf2:	bfa4      	itt	ge
 8010bf4:	4639      	movge	r1, r7
 8010bf6:	4633      	movge	r3, r6
 8010bf8:	ea53 0001 	orrs.w	r0, r3, r1
 8010bfc:	d0c6      	beq.n	8010b8c <__ieee754_fmod+0x5c>
 8010bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c02:	db6b      	blt.n	8010cdc <__ieee754_fmod+0x1ac>
 8010c04:	484e      	ldr	r0, [pc, #312]	@ (8010d40 <__ieee754_fmod+0x210>)
 8010c06:	4282      	cmp	r2, r0
 8010c08:	db6e      	blt.n	8010ce8 <__ieee754_fmod+0x1b8>
 8010c0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010c0e:	4323      	orrs	r3, r4
 8010c10:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8010c14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c18:	460c      	mov	r4, r1
 8010c1a:	ec45 4b10 	vmov	d0, r4, r5
 8010c1e:	e7a7      	b.n	8010b70 <__ieee754_fmod+0x40>
 8010c20:	3801      	subs	r0, #1
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	e7c1      	b.n	8010baa <__ieee754_fmod+0x7a>
 8010c26:	4846      	ldr	r0, [pc, #280]	@ (8010d40 <__ieee754_fmod+0x210>)
 8010c28:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	ddbe      	ble.n	8010bae <__ieee754_fmod+0x7e>
 8010c30:	3801      	subs	r0, #1
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	e7fa      	b.n	8010c2c <__ieee754_fmod+0xfc>
 8010c36:	ea4f 5028 	mov.w	r0, r8, asr #20
 8010c3a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8010c3e:	e7b6      	b.n	8010bae <__ieee754_fmod+0x7e>
 8010c40:	3a01      	subs	r2, #1
 8010c42:	005b      	lsls	r3, r3, #1
 8010c44:	e7b9      	b.n	8010bba <__ieee754_fmod+0x8a>
 8010c46:	4a3e      	ldr	r2, [pc, #248]	@ (8010d40 <__ieee754_fmod+0x210>)
 8010c48:	02fb      	lsls	r3, r7, #11
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	ddb7      	ble.n	8010bbe <__ieee754_fmod+0x8e>
 8010c4e:	3a01      	subs	r2, #1
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	e7fa      	b.n	8010c4a <__ieee754_fmod+0x11a>
 8010c54:	153a      	asrs	r2, r7, #20
 8010c56:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010c5a:	e7b0      	b.n	8010bbe <__ieee754_fmod+0x8e>
 8010c5c:	eba3 0c00 	sub.w	ip, r3, r0
 8010c60:	f1bc 0f1f 	cmp.w	ip, #31
 8010c64:	dc09      	bgt.n	8010c7a <__ieee754_fmod+0x14a>
 8010c66:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8010c6a:	fa08 f10c 	lsl.w	r1, r8, ip
 8010c6e:	fa29 f303 	lsr.w	r3, r9, r3
 8010c72:	430b      	orrs	r3, r1
 8010c74:	fa09 f10c 	lsl.w	r1, r9, ip
 8010c78:	e7a8      	b.n	8010bcc <__ieee754_fmod+0x9c>
 8010c7a:	4b32      	ldr	r3, [pc, #200]	@ (8010d44 <__ieee754_fmod+0x214>)
 8010c7c:	1a1b      	subs	r3, r3, r0
 8010c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8010c82:	2100      	movs	r1, #0
 8010c84:	e7a2      	b.n	8010bcc <__ieee754_fmod+0x9c>
 8010c86:	ebac 0c02 	sub.w	ip, ip, r2
 8010c8a:	f1bc 0f1f 	cmp.w	ip, #31
 8010c8e:	dc09      	bgt.n	8010ca4 <__ieee754_fmod+0x174>
 8010c90:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8010c94:	fa07 f70c 	lsl.w	r7, r7, ip
 8010c98:	fa26 f505 	lsr.w	r5, r6, r5
 8010c9c:	433d      	orrs	r5, r7
 8010c9e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8010ca2:	e79b      	b.n	8010bdc <__ieee754_fmod+0xac>
 8010ca4:	4d27      	ldr	r5, [pc, #156]	@ (8010d44 <__ieee754_fmod+0x214>)
 8010ca6:	1aad      	subs	r5, r5, r2
 8010ca8:	fa06 f505 	lsl.w	r5, r6, r5
 8010cac:	f04f 0e00 	mov.w	lr, #0
 8010cb0:	e794      	b.n	8010bdc <__ieee754_fmod+0xac>
 8010cb2:	4571      	cmp	r1, lr
 8010cb4:	bf38      	it	cc
 8010cb6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8010cba:	2e00      	cmp	r6, #0
 8010cbc:	da05      	bge.n	8010cca <__ieee754_fmod+0x19a>
 8010cbe:	0fce      	lsrs	r6, r1, #31
 8010cc0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8010cc4:	0049      	lsls	r1, r1, #1
 8010cc6:	3801      	subs	r0, #1
 8010cc8:	e789      	b.n	8010bde <__ieee754_fmod+0xae>
 8010cca:	ea56 0307 	orrs.w	r3, r6, r7
 8010cce:	f43f af5d 	beq.w	8010b8c <__ieee754_fmod+0x5c>
 8010cd2:	0ffb      	lsrs	r3, r7, #31
 8010cd4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8010cd8:	0079      	lsls	r1, r7, #1
 8010cda:	e7f4      	b.n	8010cc6 <__ieee754_fmod+0x196>
 8010cdc:	0fc8      	lsrs	r0, r1, #31
 8010cde:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010ce2:	0049      	lsls	r1, r1, #1
 8010ce4:	3a01      	subs	r2, #1
 8010ce6:	e78a      	b.n	8010bfe <__ieee754_fmod+0xce>
 8010ce8:	1a80      	subs	r0, r0, r2
 8010cea:	2814      	cmp	r0, #20
 8010cec:	dc0c      	bgt.n	8010d08 <__ieee754_fmod+0x1d8>
 8010cee:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010cf2:	fa03 f202 	lsl.w	r2, r3, r2
 8010cf6:	40c1      	lsrs	r1, r0
 8010cf8:	430a      	orrs	r2, r1
 8010cfa:	4103      	asrs	r3, r0
 8010cfc:	ea43 0104 	orr.w	r1, r3, r4
 8010d00:	4610      	mov	r0, r2
 8010d02:	ec41 0b10 	vmov	d0, r0, r1
 8010d06:	e733      	b.n	8010b70 <__ieee754_fmod+0x40>
 8010d08:	281f      	cmp	r0, #31
 8010d0a:	dc07      	bgt.n	8010d1c <__ieee754_fmod+0x1ec>
 8010d0c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8010d10:	40c1      	lsrs	r1, r0
 8010d12:	fa03 f202 	lsl.w	r2, r3, r2
 8010d16:	430a      	orrs	r2, r1
 8010d18:	4623      	mov	r3, r4
 8010d1a:	e7ef      	b.n	8010cfc <__ieee754_fmod+0x1cc>
 8010d1c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8010d20:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8010d24:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8010d28:	32e2      	adds	r2, #226	@ 0xe2
 8010d2a:	fa43 f202 	asr.w	r2, r3, r2
 8010d2e:	e7f3      	b.n	8010d18 <__ieee754_fmod+0x1e8>
 8010d30:	7fefffff 	.word	0x7fefffff
 8010d34:	7ff00000 	.word	0x7ff00000
 8010d38:	08011be8 	.word	0x08011be8
 8010d3c:	fffffbed 	.word	0xfffffbed
 8010d40:	fffffc02 	.word	0xfffffc02
 8010d44:	fffffbe2 	.word	0xfffffbe2

08010d48 <_init>:
 8010d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d4a:	bf00      	nop
 8010d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d4e:	bc08      	pop	{r3}
 8010d50:	469e      	mov	lr, r3
 8010d52:	4770      	bx	lr

08010d54 <_fini>:
 8010d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d56:	bf00      	nop
 8010d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d5a:	bc08      	pop	{r3}
 8010d5c:	469e      	mov	lr, r3
 8010d5e:	4770      	bx	lr
