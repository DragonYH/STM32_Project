
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015010  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  080152b0  080152b0  000162b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080164d0  080164d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080164d8  080164d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080164dc  080164dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  080164e0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021b8  240002d0  080167b0  000182d0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24002488  080167b0  00018488  2**0
                  ALLOC
  9 ._D3_Area     00000008  38000000  38000000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 ._DTCM_Area   00000010  20000000  20000000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  0001a008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031966  00000000  00000000  0001a036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000691c  00000000  00000000  0004b99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002218  00000000  00000000  000522b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019c5  00000000  00000000  000544d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040c06  00000000  00000000  00055e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003342d  00000000  00000000  00096a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f346  00000000  00000000  000c9ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0024920e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009da8  00000000  00000000  002492c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00253070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  002530f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  002532e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015298 	.word	0x08015298

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08015298 	.word	0x08015298

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003b6:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <MX_ADC1_Init+0x120>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ba:	4b3c      	ldr	r3, [pc, #240]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c2:	4b3a      	ldr	r3, [pc, #232]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003c8:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003ce:	4b37      	ldr	r3, [pc, #220]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d0:	2208      	movs	r2, #8
 80003d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d4:	4b35      	ldr	r3, [pc, #212]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003da:	4b34      	ldr	r3, [pc, #208]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80003e0:	4b32      	ldr	r3, [pc, #200]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80003f8:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_ADC1_Init+0x11c>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000400:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000404:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800040c:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800040e:	2201      	movs	r2, #1
 8000410:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 4;
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000416:	2204      	movs	r2, #4
 8000418:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800041a:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800041c:	2240      	movs	r2, #64	@ 0x40
 800041e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000422:	2200      	movs	r2, #0
 8000424:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000428:	2201      	movs	r2, #1
 800042a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800042c:	481f      	ldr	r0, [pc, #124]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800042e:	f001 febd 	bl	80021ac <HAL_ADC_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000438:	f000 ff0a 	bl	8001250 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	4619      	mov	r1, r3
 8000446:	4819      	ldr	r0, [pc, #100]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000448:	f002 ffcc 	bl	80033e4 <HAL_ADCEx_MultiModeConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 fefd 	bl	8001250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0x124>)
 8000458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045a:	2306      	movs	r3, #6
 800045c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800045e:	2305      	movs	r3, #5
 8000460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000462:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000468:	2304      	movs	r3, #4
 800046a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <MX_ADC1_Init+0x11c>)
 800047a:	f002 f91b 	bl	80026b4 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000484:	f000 fee4 	bl	8001250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <MX_ADC1_Init+0x128>)
 800048a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800048c:	230c      	movs	r3, #12
 800048e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_ADC1_Init+0x11c>)
 8000496:	f002 f90d 	bl	80026b4 <HAL_ADC_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80004a0:	f000 fed6 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	@ 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	240002ec 	.word	0x240002ec
 80004b0:	40022000 	.word	0x40022000
 80004b4:	10c00010 	.word	0x10c00010
 80004b8:	0c900008 	.word	0x0c900008

080004bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b0bc      	sub	sp, #240	@ 0xf0
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	22c0      	movs	r2, #192	@ 0xc0
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f012 fe04 	bl	80130ea <memset>
  if(adcHandle->Instance==ADC1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a54      	ldr	r2, [pc, #336]	@ (8000638 <HAL_ADC_MspInit+0x17c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	f040 80a0 	bne.w	800062e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004f2:	f04f 0300 	mov.w	r3, #0
 80004f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004fa:	2319      	movs	r3, #25
 80004fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 504;
 80004fe:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 7;
 8000504:	2307      	movs	r3, #7
 8000506:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000508:	2302      	movs	r3, #2
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000510:	2300      	movs	r3, #0
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000514:	2300      	movs	r3, #0
 8000516:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fe4c 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000532:	f000 fe8d 	bl	8001250 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000536:	4b41      	ldr	r3, [pc, #260]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800053c:	4a3f      	ldr	r2, [pc, #252]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b39      	ldr	r3, [pc, #228]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800055a:	4a38      	ldr	r2, [pc, #224]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000564:	4b35      	ldr	r3, [pc, #212]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000578:	4a30      	ldr	r2, [pc, #192]	@ (800063c <HAL_ADC_MspInit+0x180>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0x180>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000590:	2340      	movs	r3, #64	@ 0x40
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005a6:	4619      	mov	r1, r3
 80005a8:	4825      	ldr	r0, [pc, #148]	@ (8000640 <HAL_ADC_MspInit+0x184>)
 80005aa:	f005 fc73 	bl	8005e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ae:	2310      	movs	r3, #16
 80005b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80005c4:	4619      	mov	r1, r3
 80005c6:	481f      	ldr	r0, [pc, #124]	@ (8000644 <HAL_ADC_MspInit+0x188>)
 80005c8:	f005 fc64 	bl	8005e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <HAL_ADC_MspInit+0x190>)
 80005d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005de:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 80005fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000614:	f003 fb66 	bl	8003ce4 <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 800061e:	f000 fe17 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 8000626:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000628:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_ADC_MspInit+0x18c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	37f0      	adds	r7, #240	@ 0xf0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000
 800063c:	58024400 	.word	0x58024400
 8000640:	58020000 	.word	0x58020000
 8000644:	58020800 	.word	0x58020800
 8000648:	24000350 	.word	0x24000350
 800064c:	40020010 	.word	0x40020010

08000650 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2224      	movs	r2, #36	@ 0x24
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f012 fd44 	bl	80130ea <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_DAC1_Init+0x60>)
 8000666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <MX_DAC1_Init+0x5c>)
 800066a:	f003 f8f5 	bl	8003858 <HAL_DAC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000674:	f000 fdec 	bl	8001250 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_DAC1_Init+0x5c>)
 8000694:	f003 f9de 	bl	8003a54 <HAL_DAC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 fdd7 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	240003c8 	.word	0x240003c8
 80006b0:	40007400 	.word	0x40007400

080006b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <HAL_DAC_MspInit+0x90>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d131      	bne.n	800073a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80006e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000704:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <HAL_DAC_MspInit+0x94>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000712:	2310      	movs	r3, #16
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <HAL_DAC_MspInit+0x98>)
 8000726:	f005 fbb5 	bl	8005e94 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	2036      	movs	r0, #54	@ 0x36
 8000730:	f002 ffee 	bl	8003710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000734:	2036      	movs	r0, #54	@ 0x36
 8000736:	f003 f805 	bl	8003744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	@ 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40007400 	.word	0x40007400
 8000748:	58024400 	.word	0x58024400
 800074c:	58020000 	.word	0x58020000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_DMA_Init+0x3c>)
 8000758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x3c>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x3c>)
 8000768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	200b      	movs	r0, #11
 800077a:	f002 ffc9 	bl	8003710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800077e:	200b      	movs	r0, #11
 8000780:	f002 ffe0 	bl	8003744 <HAL_NVIC_EnableIRQ>

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400

08000790 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b4d      	ldr	r3, [pc, #308]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	4a4b      	ldr	r2, [pc, #300]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b6:	4b49      	ldr	r3, [pc, #292]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c4:	4b45      	ldr	r3, [pc, #276]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	4a44      	ldr	r2, [pc, #272]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d4:	4b41      	ldr	r3, [pc, #260]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b3e      	ldr	r3, [pc, #248]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a3c      	ldr	r2, [pc, #240]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b3a      	ldr	r3, [pc, #232]	@ (80008dc <MX_GPIO_Init+0x14c>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <MX_GPIO_Init+0x14c>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	4a35      	ldr	r2, [pc, #212]	@ (80008dc <MX_GPIO_Init+0x14c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000810:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <MX_GPIO_Init+0x14c>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800081e:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <MX_GPIO_Init+0x14c>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	4a2d      	ldr	r2, [pc, #180]	@ (80008dc <MX_GPIO_Init+0x14c>)
 8000826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082e:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <MX_GPIO_Init+0x14c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4827      	ldr	r0, [pc, #156]	@ (80008e0 <MX_GPIO_Init+0x150>)
 8000842:	f005 fcd7 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2102      	movs	r1, #2
 800084a:	4826      	ldr	r0, [pc, #152]	@ (80008e4 <MX_GPIO_Init+0x154>)
 800084c:	f005 fcd2 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4824      	ldr	r0, [pc, #144]	@ (80008e8 <MX_GPIO_Init+0x158>)
 8000856:	f005 fccd 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2140      	movs	r1, #64	@ 0x40
 800085e:	4822      	ldr	r0, [pc, #136]	@ (80008e8 <MX_GPIO_Init+0x158>)
 8000860:	f005 fcc8 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000864:	2320      	movs	r3, #32
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4819      	ldr	r0, [pc, #100]	@ (80008e0 <MX_GPIO_Init+0x150>)
 800087c:	f005 fb0a 	bl	8005e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000880:	2302      	movs	r3, #2
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <MX_GPIO_Init+0x154>)
 8000898:	f005 fafc 	bl	8005e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089c:	2301      	movs	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <MX_GPIO_Init+0x158>)
 80008b4:	f005 faee 	bl	8005e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80008b8:	2340      	movs	r3, #64	@ 0x40
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <MX_GPIO_Init+0x158>)
 80008d0:	f005 fae0 	bl	8005e94 <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	@ 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024400 	.word	0x58024400
 80008e0:	58020800 	.word	0x58020800
 80008e4:	58020400 	.word	0x58020400
 80008e8:	58022000 	.word	0x58022000

080008ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <MX_I2C1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000968 <MX_I2C1_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000928:	f005 fc98 	bl	800625c <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 fc8d 	bl	8001250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_I2C1_Init+0x74>)
 800093a:	f006 f897 	bl	8006a6c <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 fc84 	bl	8001250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_I2C1_Init+0x74>)
 800094c:	f006 f8d9 	bl	8006b02 <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 fc7b 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	240003dc 	.word	0x240003dc
 8000964:	40005400 	.word	0x40005400
 8000968:	307075b1 	.word	0x307075b1

0800096c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ba      	sub	sp, #232	@ 0xe8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	22c0      	movs	r2, #192	@ 0xc0
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f012 fbac 	bl	80130ea <memset>
  if(i2cHandle->Instance==I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a26      	ldr	r2, [pc, #152]	@ (8000a30 <HAL_I2C_MspInit+0xc4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d145      	bne.n	8000a28 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800099c:	f04f 0208 	mov.w	r2, #8
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4618      	mov	r0, r3
 80009b4:	f008 fc06 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009be:	f000 fc47 	bl	8001250 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <HAL_I2C_MspInit+0xc8>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <HAL_I2C_MspInit+0xc8>)
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_I2C_MspInit+0xc8>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e0:	23c0      	movs	r3, #192	@ 0xc0
 80009e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	2312      	movs	r3, #18
 80009e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f8:	2304      	movs	r3, #4
 80009fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <HAL_I2C_MspInit+0xcc>)
 8000a06:	f005 fa45 	bl	8005e94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_I2C_MspInit+0xc8>)
 8000a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a10:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_I2C_MspInit+0xc8>)
 8000a12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_I2C_MspInit+0xc8>)
 8000a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a28:	bf00      	nop
 8000a2a:	37e8      	adds	r7, #232	@ 0xe8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40005400 	.word	0x40005400
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020400 	.word	0x58020400

08000a3c <oled_Show>:
float M = 0.9f;
// 显示函数
uint8_t textBuf[256] = {0};
float theta_diff = 0.f;
void oled_Show()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af02      	add	r7, sp, #8
  // IN:
  sprintf((char *)textBuf, "IN:%5.2fV %4.2fA", signal_V->u_0, signal_I->u_0);
 8000a42:	4b47      	ldr	r3, [pc, #284]	@ (8000b60 <oled_Show+0x124>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a4e:	4b45      	ldr	r3, [pc, #276]	@ (8000b64 <oled_Show+0x128>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	edd3 7a00 	vldr	s15, [r3]
 8000a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5a:	ed8d 7b00 	vstr	d7, [sp]
 8000a5e:	ec53 2b16 	vmov	r2, r3, d6
 8000a62:	4941      	ldr	r1, [pc, #260]	@ (8000b68 <oled_Show+0x12c>)
 8000a64:	4841      	ldr	r0, [pc, #260]	@ (8000b6c <oled_Show+0x130>)
 8000a66:	f012 fadd 	bl	8013024 <siprintf>
  OLED_ShowString(0, 0, textBuf);
 8000a6a:	4a40      	ldr	r2, [pc, #256]	@ (8000b6c <oled_Show+0x130>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f010 fc0c 	bl	801128c <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000a74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a78:	483c      	ldr	r0, [pc, #240]	@ (8000b6c <oled_Show+0x130>)
 8000a7a:	f011 f823 	bl	8011ac4 <CDC_Transmit_FS>
  // OUT:
  sprintf((char *)textBuf, "OT:%5.2fV %4.2fA", signal_V->u_0, signal_I->u_0);
 8000a7e:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <oled_Show+0x124>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a8a:	4b36      	ldr	r3, [pc, #216]	@ (8000b64 <oled_Show+0x128>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	edd3 7a00 	vldr	s15, [r3]
 8000a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a96:	ed8d 7b00 	vstr	d7, [sp]
 8000a9a:	ec53 2b16 	vmov	r2, r3, d6
 8000a9e:	4934      	ldr	r1, [pc, #208]	@ (8000b70 <oled_Show+0x134>)
 8000aa0:	4832      	ldr	r0, [pc, #200]	@ (8000b6c <oled_Show+0x130>)
 8000aa2:	f012 fabf 	bl	8013024 <siprintf>
  OLED_ShowString(0, 2, textBuf);
 8000aa6:	4a31      	ldr	r2, [pc, #196]	@ (8000b6c <oled_Show+0x130>)
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f010 fbee 	bl	801128c <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000ab0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab4:	482d      	ldr	r0, [pc, #180]	@ (8000b6c <oled_Show+0x130>)
 8000ab6:	f011 f805 	bl	8011ac4 <CDC_Transmit_FS>
  // DC:
  sprintf((char *)textBuf, "DC:%5.2fV EF:", signal_V->u_0);
 8000aba:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <oled_Show+0x124>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	edd3 7a00 	vldr	s15, [r3]
 8000ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac6:	ec53 2b17 	vmov	r2, r3, d7
 8000aca:	492a      	ldr	r1, [pc, #168]	@ (8000b74 <oled_Show+0x138>)
 8000acc:	4827      	ldr	r0, [pc, #156]	@ (8000b6c <oled_Show+0x130>)
 8000ace:	f012 faa9 	bl	8013024 <siprintf>
  OLED_ShowString(0, 4, textBuf);
 8000ad2:	4a26      	ldr	r2, [pc, #152]	@ (8000b6c <oled_Show+0x130>)
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f010 fbd8 	bl	801128c <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000adc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <oled_Show+0x130>)
 8000ae2:	f010 ffef 	bl	8011ac4 <CDC_Transmit_FS>
  // FAC:
  sprintf((char *)textBuf, "FA:%5.2f %5.2f%%", arm_cos_f32(theta_diff), (signal_V->u_0 * signal_I->u_0) / (signal_V->u_0 * signal_I->u_0) * 100.f);
 8000ae6:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <oled_Show+0x13c>)
 8000ae8:	edd3 7a00 	vldr	s15, [r3]
 8000aec:	eeb0 0a67 	vmov.f32	s0, s15
 8000af0:	f011 fc9e 	bl	8012430 <arm_cos_f32>
 8000af4:	eef0 7a40 	vmov.f32	s15, s0
 8000af8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <oled_Show+0x124>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	ed93 7a00 	vldr	s14, [r3]
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <oled_Show+0x128>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	edd3 7a00 	vldr	s15, [r3]
 8000b0c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <oled_Show+0x124>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	ed93 7a00 	vldr	s14, [r3]
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <oled_Show+0x128>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b28:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000b7c <oled_Show+0x140>
 8000b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b34:	ed8d 7b00 	vstr	d7, [sp]
 8000b38:	ec53 2b15 	vmov	r2, r3, d5
 8000b3c:	4910      	ldr	r1, [pc, #64]	@ (8000b80 <oled_Show+0x144>)
 8000b3e:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <oled_Show+0x130>)
 8000b40:	f012 fa70 	bl	8013024 <siprintf>
  OLED_ShowString(0, 6, textBuf);
 8000b44:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <oled_Show+0x130>)
 8000b46:	2106      	movs	r1, #6
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f010 fb9f 	bl	801128c <OLED_ShowString>
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
 8000b4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <oled_Show+0x130>)
 8000b54:	f010 ffb6 	bl	8011ac4 <CDC_Transmit_FS>
  // sprintf((char *)textBuf, "x=0,thetaV=%.2f,thetaI=%.2f,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f\n", signal_V->theta, signal_I->theta, signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi_a_0, signal_V->sogi_b_0 / 382 * 3, signal_I->sogi_a_0, signal_I->sogi_b_0 / 382 * 3);
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	080152b0 	.word	0x080152b0
 8000b6c:	24000430 	.word	0x24000430
 8000b70:	080152c4 	.word	0x080152c4
 8000b74:	080152d8 	.word	0x080152d8
 8000b78:	24000530 	.word	0x24000530
 8000b7c:	42c80000 	.word	0x42c80000
 8000b80:	080152e8 	.word	0x080152e8

08000b84 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b8a:	f000 f9e1 	bl	8000f50 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8e:	4b75      	ldr	r3, [pc, #468]	@ (8000d64 <main+0x1e0>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11b      	bne.n	8000bd2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9a:	f3bf 8f4f 	dsb	sy
}
 8000b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
}
 8000ba4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ba6:	4b6f      	ldr	r3, [pc, #444]	@ (8000d64 <main+0x1e0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bae:	f3bf 8f4f 	dsb	sy
}
 8000bb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bb4:	f3bf 8f6f 	isb	sy
}
 8000bb8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bba:	4b6a      	ldr	r3, [pc, #424]	@ (8000d64 <main+0x1e0>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a69      	ldr	r2, [pc, #420]	@ (8000d64 <main+0x1e0>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc6:	f3bf 8f4f 	dsb	sy
}
 8000bca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bcc:	f3bf 8f6f 	isb	sy
}
 8000bd0:	e000      	b.n	8000bd4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bd2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bd4:	4b63      	ldr	r3, [pc, #396]	@ (8000d64 <main+0x1e0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d138      	bne.n	8000c52 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000be0:	4b60      	ldr	r3, [pc, #384]	@ (8000d64 <main+0x1e0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000be8:	f3bf 8f4f 	dsb	sy
}
 8000bec:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bee:	4b5d      	ldr	r3, [pc, #372]	@ (8000d64 <main+0x1e0>)
 8000bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bf4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	0b5b      	lsrs	r3, r3, #13
 8000bfa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bfe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c08:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	015a      	lsls	r2, r3, #5
 8000c0e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000c12:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c18:	4952      	ldr	r1, [pc, #328]	@ (8000d64 <main+0x1e0>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1ef      	bne.n	8000c0a <main+0x86>
    } while(sets-- != 0U);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	60ba      	str	r2, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1e5      	bne.n	8000c00 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <main+0x1e0>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a49      	ldr	r2, [pc, #292]	@ (8000d64 <main+0x1e0>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c44:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
}
 8000c4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4c:	f3bf 8f6f 	isb	sy
}
 8000c50:	e000      	b.n	8000c54 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c52:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 f810 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f89c 	bl	8000d94 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c5c:	f000 f948 	bl	8000ef0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f7ff fd96 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c64:	f7ff fd74 	bl	8000750 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c68:	f000 fe5c 	bl	8001924 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000c6c:	f000 fea8 	bl	80019c0 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000c70:	f7ff fb8e 	bl	8000390 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000c74:	f010 fe66 	bl	8011944 <MX_USB_DEVICE_Init>
  MX_DAC1_Init();
 8000c78:	f7ff fcea 	bl	8000650 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000c7c:	f7ff fe36 	bl	80008ec <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c80:	f000 faec 	bl	800125c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c84:	f000 fb40 	bl	8001308 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000c88:	205c      	movs	r0, #92	@ 0x5c
 8000c8a:	f011 fc1b 	bl	80124c4 <malloc>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <main+0x1e4>)
 8000c94:	601a      	str	r2, [r3, #0]
  signal_config_V = (pll_Config *)malloc(sizeof(pll_Config));
 8000c96:	2020      	movs	r0, #32
 8000c98:	f011 fc14 	bl	80124c4 <malloc>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b32      	ldr	r3, [pc, #200]	@ (8000d6c <main+0x1e8>)
 8000ca2:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal *)malloc(sizeof(pll_Signal));
 8000ca4:	205c      	movs	r0, #92	@ 0x5c
 8000ca6:	f011 fc0d 	bl	80124c4 <malloc>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b30      	ldr	r3, [pc, #192]	@ (8000d70 <main+0x1ec>)
 8000cb0:	601a      	str	r2, [r3, #0]
  signal_config_I = (pll_Config *)malloc(sizeof(pll_Config));
 8000cb2:	2020      	movs	r0, #32
 8000cb4:	f011 fc06 	bl	80124c4 <malloc>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <main+0x1f0>)
 8000cbe:	601a      	str	r2, [r3, #0]
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init(signal_V, signal_config_V, 50, 20000); // 电压环
 8000cc0:	4b29      	ldr	r3, [pc, #164]	@ (8000d68 <main+0x1e4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a29      	ldr	r2, [pc, #164]	@ (8000d6c <main+0x1e8>)
 8000cc6:	6811      	ldr	r1, [r2, #0]
 8000cc8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ccc:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8000d78 <main+0x1f4>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f010 fb93 	bl	80113fc <pll_Init>
  pll_Init(signal_I, signal_config_I, 50, 20000); // 电流环
 8000cd6:	4b26      	ldr	r3, [pc, #152]	@ (8000d70 <main+0x1ec>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a26      	ldr	r2, [pc, #152]	@ (8000d74 <main+0x1f0>)
 8000cdc:	6811      	ldr	r1, [r2, #0]
 8000cde:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ce2:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8000d78 <main+0x1f4>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f010 fb88 	bl	80113fc <pll_Init>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000cec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4821      	ldr	r0, [pc, #132]	@ (8000d7c <main+0x1f8>)
 8000cf6:	f002 fe7d 	bl	80039f4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	481f      	ldr	r0, [pc, #124]	@ (8000d7c <main+0x1f8>)
 8000cfe:	f002 fdcd 	bl	800389c <HAL_DAC_Start>
  // ADC校准并开启
  HAL_Delay(200);
 8000d02:	20c8      	movs	r0, #200	@ 0xc8
 8000d04:	f001 f814 	bl	8001d30 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000d08:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	481c      	ldr	r0, [pc, #112]	@ (8000d80 <main+0x1fc>)
 8000d10:	f002 fb04 	bl	800331c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED); // 线性度校准
 8000d14:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000d18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000d1c:	4818      	ldr	r0, [pc, #96]	@ (8000d80 <main+0x1fc>)
 8000d1e:	f002 fafd 	bl	800331c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d26:	f001 f803 	bl	8001d30 <HAL_Delay>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4815      	ldr	r0, [pc, #84]	@ (8000d84 <main+0x200>)
 8000d2e:	f00b fc81 	bl	800c634 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000d32:	2104      	movs	r1, #4
 8000d34:	4813      	ldr	r0, [pc, #76]	@ (8000d84 <main+0x200>)
 8000d36:	f00b fc7d 	bl	800c634 <HAL_TIM_PWM_Start>
  // OLED初始化
  OLED_Init();
 8000d3a:	f010 fad5 	bl	80112e8 <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c1, 0);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <main+0x204>)
 8000d42:	f010 f97d 	bl	8011040 <ina238_Init>
  // 开启中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <main+0x208>)
 8000d48:	f00b fb9a 	bl	800c480 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 虚拟串口输出日志
    oled_Show();
 8000d4c:	f7ff fe76 	bl	8000a3c <oled_Show>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000d50:	2101      	movs	r1, #1
 8000d52:	480f      	ldr	r0, [pc, #60]	@ (8000d90 <main+0x20c>)
 8000d54:	f005 fa67 	bl	8006226 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000d58:	20c8      	movs	r0, #200	@ 0xc8
 8000d5a:	f000 ffe9 	bl	8001d30 <HAL_Delay>
    oled_Show();
 8000d5e:	bf00      	nop
 8000d60:	e7f4      	b.n	8000d4c <main+0x1c8>
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	20000008 	.word	0x20000008
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	42480000 	.word	0x42480000
 8000d7c:	240003c8 	.word	0x240003c8
 8000d80:	240002ec 	.word	0x240002ec
 8000d84:	240006e0 	.word	0x240006e0
 8000d88:	240003dc 	.word	0x240003dc
 8000d8c:	24000694 	.word	0x24000694
 8000d90:	58022000 	.word	0x58022000

08000d94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b09e      	sub	sp, #120	@ 0x78
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f012 f9a1 	bl	80130ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2220      	movs	r2, #32
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f012 f99a 	bl	80130ea <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000db6:	2002      	movs	r0, #2
 8000db8:	f007 f9a8 	bl	800810c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	4b48      	ldr	r3, [pc, #288]	@ (8000ee4 <SystemClock_Config+0x150>)
 8000dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc4:	4a47      	ldr	r2, [pc, #284]	@ (8000ee4 <SystemClock_Config+0x150>)
 8000dc6:	f023 0301 	bic.w	r3, r3, #1
 8000dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dcc:	4b45      	ldr	r3, [pc, #276]	@ (8000ee4 <SystemClock_Config+0x150>)
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a43      	ldr	r2, [pc, #268]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000ddc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b41      	ldr	r3, [pc, #260]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000dee:	bf00      	nop
 8000df0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dfc:	d1f8      	bne.n	8000df0 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eec <SystemClock_Config+0x158>)
 8000e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e04:	4a39      	ldr	r2, [pc, #228]	@ (8000eec <SystemClock_Config+0x158>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e0e:	4b37      	ldr	r3, [pc, #220]	@ (8000eec <SystemClock_Config+0x158>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	4b31      	ldr	r3, [pc, #196]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a30      	ldr	r2, [pc, #192]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000e26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <SystemClock_Config+0x150>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee4 <SystemClock_Config+0x150>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e42:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <SystemClock_Config+0x150>)
 8000e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000e4e:	bf00      	nop
 8000e50:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <SystemClock_Config+0x154>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e5c:	d1f8      	bne.n	8000e50 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e70:	2305      	movs	r3, #5
 8000e72:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e74:	23c0      	movs	r3, #192	@ 0xc0
 8000e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e7c:	2314      	movs	r3, #20
 8000e7e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e84:	2308      	movs	r3, #8
 8000e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 f983 	bl	80081a0 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ea0:	f000 f9d6 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000ea4:	233f      	movs	r3, #63	@ 0x3f
 8000ea6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eb4:	2340      	movs	r3, #64	@ 0x40
 8000eb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eb8:	2340      	movs	r3, #64	@ 0x40
 8000eba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ec2:	2340      	movs	r3, #64	@ 0x40
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f007 fdc1 	bl	8008a54 <HAL_RCC_ClockConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000ed8:	f000 f9ba 	bl	8001250 <Error_Handler>
  }
}
 8000edc:	bf00      	nop
 8000ede:	3778      	adds	r7, #120	@ 0x78
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58000400 	.word	0x58000400
 8000ee8:	58024800 	.word	0x58024800
 8000eec:	58024400 	.word	0x58024400

08000ef0 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0b0      	sub	sp, #192	@ 0xc0
 8000ef4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	22c0      	movs	r2, #192	@ 0xc0
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f012 f8f4 	bl	80130ea <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000f02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000f0e:	2319      	movs	r3, #25
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000f12:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000f30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f008 f943 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f44:	f000 f984 	bl	8001250 <Error_Handler>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	37c0      	adds	r7, #192	@ 0xc0
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f62:	f002 fbfd 	bl	8003760 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f6e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000f72:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f74:	2312      	movs	r3, #18
 8000f76:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f80:	2303      	movs	r3, #3
 8000f82:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f94:	463b      	mov	r3, r7
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fc1a 	bl	80037d0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000fa0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000fa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fc0b 	bl	80037d0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8000fbe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fc2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fc00 	bl	80037d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f002 fbdd 	bl	8003790 <HAL_MPU_Enable>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	ed2d 8b02 	vpush	{d8}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a86      	ldr	r2, [pc, #536]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_IncTick();
 8000ff6:	f000 fe7b 	bl	8001cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001002:	f040 80fd 	bne.w	8001200 <HAL_TIM_PeriodElapsedCallback+0x220>
  {
    // 缓存adcBuf
    HAL_ADC_Start_DMA(&hadc1, adcBuf, 2);
 8001006:	2202      	movs	r2, #2
 8001008:	4981      	ldr	r1, [pc, #516]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800100a:	4882      	ldr	r0, [pc, #520]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800100c:	f001 fa70 	bl	80024f0 <HAL_ADC_Start_DMA>
 8001010:	4b7f      	ldr	r3, [pc, #508]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	2308      	movs	r3, #8
 8001016:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	dd1d      	ble.n	800105a <HAL_TIM_PeriodElapsedCallback+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800102e:	f3bf 8f4f 	dsb	sy
}
 8001032:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001034:	4a78      	ldr	r2, [pc, #480]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	3320      	adds	r3, #32
 8001040:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3b20      	subs	r3, #32
 8001046:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	dcf2      	bgt.n	8001034 <HAL_TIM_PeriodElapsedCallback+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
 800104e:	f3bf 8f4f 	dsb	sy
}
 8001052:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001054:	f3bf 8f6f 	isb	sy
}
 8001058:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800105a:	bf00      	nop
    SCB_InvalidateDCache_by_Addr(adcBuf, sizeof(adcBuf));
    signal_V->u_0 = adcBuf[0] * 3.3f / 65536.0f - 1.5f;
 800105c:	4b6c      	ldr	r3, [pc, #432]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001068:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800121c <HAL_TIM_PeriodElapsedCallback+0x23c>
 800106c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001070:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001220 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001078:	4b6a      	ldr	r3, [pc, #424]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001084:	edc3 7a00 	vstr	s15, [r3]
    signal_I->u_0 = adcBuf[1] * 3.3f / 65536.0f - 1.5f;
 8001088:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001094:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800121c <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001098:	ee27 7a87 	vmul.f32	s14, s15, s14
 800109c:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001220 <HAL_TIM_PeriodElapsedCallback+0x240>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	4b60      	ldr	r3, [pc, #384]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80010ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b0:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control(signal_V, signal_config_V, signal_V); // 电压环
 80010b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a5c      	ldr	r2, [pc, #368]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80010ba:	6811      	ldr	r1, [r2, #0]
 80010bc:	4a59      	ldr	r2, [pc, #356]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f010 fa81 	bl	80115c8 <pll_Control>
    pll_Control(signal_I, signal_config_I, signal_V); // 电流环
 80010c6:	4b58      	ldr	r3, [pc, #352]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a59      	ldr	r2, [pc, #356]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80010cc:	6811      	ldr	r1, [r2, #0]
 80010ce:	4a55      	ldr	r2, [pc, #340]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f010 fa78 	bl	80115c8 <pll_Control>
    theta_diff = signal_V->theta - signal_I->theta;
 80010d8:	4b52      	ldr	r3, [pc, #328]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80010e0:	4b51      	ldr	r3, [pc, #324]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ec:	4b51      	ldr	r3, [pc, #324]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]
    // 调节SPWM占空比
    // 要想实现PFC，需要让电流相位与电压相位相同，而电压相位由电网控制，所以需要闭环控制的是电流相位
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 80010f2:	4b51      	ldr	r3, [pc, #324]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001100:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001104:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001108:	4b4c      	ldr	r3, [pc, #304]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001112:	4b45      	ldr	r3, [pc, #276]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800111a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001240 <HAL_TIM_PeriodElapsedCallback+0x260>
 800111e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	f011 f93d 	bl	80123a4 <arm_sin_f32>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001132:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001140:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001144:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114c:	4b3a      	ldr	r3, [pc, #232]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 2a90 	vmov	r2, s15
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
    // 反馈侧
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, M * (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f) * arm_sin_f32(signal_I->theta + PI / 2.f) + (__HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f));
 800115a:	4b37      	ldr	r3, [pc, #220]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001168:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800116c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001170:	4b32      	ldr	r3, [pc, #200]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee27 8a27 	vmul.f32	s16, s14, s15
 800117a:	4b2b      	ldr	r3, [pc, #172]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001182:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001240 <HAL_TIM_PeriodElapsedCallback+0x260>
 8001186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800118a:	eeb0 0a67 	vmov.f32	s0, s15
 800118e:	f011 f909 	bl	80123a4 <arm_sin_f32>
 8001192:	eef0 7a40 	vmov.f32	s15, s0
 8001196:	ee28 7a27 	vmul.f32	s14, s16, s15
 800119a:	4b27      	ldr	r3, [pc, #156]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011a8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80011ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011bc:	ee17 2a90 	vmov	r2, s15
 80011c0:	639a      	str	r2, [r3, #56]	@ 0x38
    // todo: 控制中间直流电压
    // static float dcVolt;
    // dcVolt = ina238_GetVolt(&hi2c1);
    // DAC模拟输出，便于调试，不需要时可关闭
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_sin_f32(signal_V->theta + PI / 2.f) + 2048.f);
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80011ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001240 <HAL_TIM_PeriodElapsedCallback+0x260>
 80011ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d2:	eeb0 0a67 	vmov.f32	s0, s15
 80011d6:	f011 f8e5 	bl	80123a4 <arm_sin_f32>
 80011da:	eef0 7a40 	vmov.f32	s15, s0
 80011de:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001244 <HAL_TIM_PeriodElapsedCallback+0x264>
 80011e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001248 <HAL_TIM_PeriodElapsedCallback+0x268>
 80011ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	4814      	ldr	r0, [pc, #80]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80011fc:	f002 fbfa 	bl	80039f4 <HAL_DAC_SetValue>
  }
  /* USER CODE END Callback 1 */
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	ecbd 8b02 	vpop	{d8}
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40001000 	.word	0x40001000
 8001210:	38000000 	.word	0x38000000
 8001214:	240002ec 	.word	0x240002ec
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	40533333 	.word	0x40533333
 8001220:	47800000 	.word	0x47800000
 8001224:	20000000 	.word	0x20000000
 8001228:	20000008 	.word	0x20000008
 800122c:	20000004 	.word	0x20000004
 8001230:	2000000c 	.word	0x2000000c
 8001234:	24000530 	.word	0x24000530
 8001238:	240006e0 	.word	0x240006e0
 800123c:	24000000 	.word	0x24000000
 8001240:	3fc90fdb 	.word	0x3fc90fdb
 8001244:	44fa0000 	.word	0x44fa0000
 8001248:	45000000 	.word	0x45000000
 800124c:	240003c8 	.word	0x240003c8

08001250 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <Error_Handler+0x8>

0800125c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001260:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <MX_SPI1_Init+0xa4>)
 8001262:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <MX_SPI1_Init+0xa8>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <MX_SPI1_Init+0xa4>)
 8001268:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800126c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800126e:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <MX_SPI1_Init+0xa4>)
 8001270:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001274:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001276:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_SPI1_Init+0xa4>)
 8001278:	2207      	movs	r2, #7
 800127a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MX_SPI1_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_SPI1_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_SPI1_Init+0xa4>)
 800128a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800128e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <MX_SPI1_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_SPI1_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <MX_SPI1_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_SPI1_Init+0xa4>)
 80012ee:	f00a fc67 	bl	800bbc0 <HAL_SPI_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80012f8:	f7ff ffaa 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	24000534 	.word	0x24000534
 8001304:	40013000 	.word	0x40013000

08001308 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800130c:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800130e:	4a28      	ldr	r2, [pc, #160]	@ (80013b0 <MX_SPI2_Init+0xa8>)
 8001310:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001314:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001318:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800131a:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800131c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001320:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001322:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001324:	2203      	movs	r2, #3
 8001326:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001328:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001336:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800133a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800135c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_SPI2_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_SPI2_Init+0xa4>)
 800139a:	f00a fc11 	bl	800bbc0 <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80013a4:	f7ff ff54 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	240005bc 	.word	0x240005bc
 80013b0:	40003800 	.word	0x40003800

080013b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a34      	ldr	r2, [pc, #208]	@ (80014a4 <HAL_SPI_MspInit+0xf0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12e      	bne.n	8001434 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 80013d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013dc:	4a32      	ldr	r2, [pc, #200]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 80013de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013e6:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 80013e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	4a2b      	ldr	r2, [pc, #172]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001404:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8001412:	23a0      	movs	r3, #160	@ 0xa0
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800141e:	2301      	movs	r3, #1
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001422:	2305      	movs	r3, #5
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	481f      	ldr	r0, [pc, #124]	@ (80014ac <HAL_SPI_MspInit+0xf8>)
 800142e:	f004 fd31 	bl	8005e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001432:	e032      	b.n	800149a <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1d      	ldr	r2, [pc, #116]	@ (80014b0 <HAL_SPI_MspInit+0xfc>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12d      	bne.n	800149a <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 8001440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001444:	4a18      	ldr	r2, [pc, #96]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 8001450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	4a11      	ldr	r2, [pc, #68]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800147a:	2306      	movs	r3, #6
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800148a:	2305      	movs	r3, #5
 800148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	@ (80014b4 <HAL_SPI_MspInit+0x100>)
 8001496:	f004 fcfd 	bl	8005e94 <HAL_GPIO_Init>
}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40013000 	.word	0x40013000
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020000 	.word	0x58020000
 80014b0:	40003800 	.word	0x40003800
 80014b4:	58022000 	.word	0x58022000

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_MspInit+0x30>)
 80014c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_MspInit+0x30>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_MspInit+0x30>)
 80014d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	58024400 	.word	0x58024400

080014ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b090      	sub	sp, #64	@ 0x40
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d827      	bhi.n	800154a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014fa:	2200      	movs	r2, #0
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	2036      	movs	r0, #54	@ 0x36
 8001500:	f002 f906 	bl	8003710 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001504:	2036      	movs	r0, #54	@ 0x36
 8001506:	f002 f91d 	bl	8003744 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800150a:	4a29      	ldr	r2, [pc, #164]	@ (80015b0 <HAL_InitTick+0xc4>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001510:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <HAL_InitTick+0xc8>)
 8001512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001516:	4a27      	ldr	r2, [pc, #156]	@ (80015b4 <HAL_InitTick+0xc8>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <HAL_InitTick+0xc8>)
 8001522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800152e:	f107 0210 	add.w	r2, r7, #16
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f007 fe01 	bl	8009140 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800153e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001540:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <HAL_InitTick+0x6a>
 8001548:	e001      	b.n	800154e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e02b      	b.n	80015a6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800154e:	f007 fde1 	bl	8009114 <HAL_RCC_GetPCLK1Freq>
 8001552:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001554:	e004      	b.n	8001560 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001556:	f007 fddd 	bl	8009114 <HAL_RCC_GetPCLK1Freq>
 800155a:	4603      	mov	r3, r0
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001562:	4a15      	ldr	r2, [pc, #84]	@ (80015b8 <HAL_InitTick+0xcc>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	3b01      	subs	r3, #1
 800156c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_InitTick+0xd0>)
 8001570:	4a13      	ldr	r2, [pc, #76]	@ (80015c0 <HAL_InitTick+0xd4>)
 8001572:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_InitTick+0xd0>)
 8001576:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800157a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800157c:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <HAL_InitTick+0xd0>)
 800157e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001580:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_InitTick+0xd0>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_InitTick+0xd0>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800158e:	480b      	ldr	r0, [pc, #44]	@ (80015bc <HAL_InitTick+0xd0>)
 8001590:	f00a ff1f 	bl	800c3d2 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d104      	bne.n	80015a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800159a:	4808      	ldr	r0, [pc, #32]	@ (80015bc <HAL_InitTick+0xd0>)
 800159c:	f00a ff70 	bl	800c480 <HAL_TIM_Base_Start_IT>
 80015a0:	4603      	mov	r3, r0
 80015a2:	e000      	b.n	80015a6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3740      	adds	r7, #64	@ 0x40
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2400000c 	.word	0x2400000c
 80015b4:	58024400 	.word	0x58024400
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	24000644 	.word	0x24000644
 80015c0:	40001000 	.word	0x40001000

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <NMI_Handler+0x4>

080015cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <MemManage_Handler+0x4>

080015dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Stream0_IRQHandler+0x10>)
 800162a:	f003 f921 	bl	8004870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	24000350 	.word	0x24000350

08001638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <TIM2_IRQHandler+0x10>)
 800163e:	f00b f907 	bl	800c850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	24000694 	.word	0x24000694

0800164c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <TIM6_DAC_IRQHandler+0x20>)
 8001652:	791b      	ldrb	r3, [r3, #4]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800165a:	4804      	ldr	r0, [pc, #16]	@ (800166c <TIM6_DAC_IRQHandler+0x20>)
 800165c:	f002 f970 	bl	8003940 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <TIM6_DAC_IRQHandler+0x24>)
 8001662:	f00b f8f5 	bl	800c850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	240003c8 	.word	0x240003c8
 8001670:	24000644 	.word	0x24000644

08001674 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <OTG_FS_IRQHandler+0x10>)
 800167a:	f005 fbe7 	bl	8006e4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24001c10 	.word	0x24001c10

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_kill>:

int _kill(int pid, int sig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a2:	f011 fd85 	bl	80131b0 <__errno>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2216      	movs	r2, #22
 80016aa:	601a      	str	r2, [r3, #0]
  return -1;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_exit>:

void _exit (int status)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ffe7 	bl	8001698 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ca:	bf00      	nop
 80016cc:	e7fd      	b.n	80016ca <_exit+0x12>

080016ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e00a      	b.n	80016f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e0:	f3af 8000 	nop.w
 80016e4:	4601      	mov	r1, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	60ba      	str	r2, [r7, #8]
 80016ec:	b2ca      	uxtb	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbf0      	blt.n	80016e0 <_read+0x12>
  }

  return len;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e009      	b.n	800172e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbf1      	blt.n	800171a <_write+0x12>
  }
  return len;
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_close>:

int _close(int file)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001768:	605a      	str	r2, [r3, #4]
  return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_isatty>:

int _isatty(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f011 fcea 	bl	80131b0 <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24080000 	.word	0x24080000
 8001808:	00004000 	.word	0x00004000
 800180c:	24000690 	.word	0x24000690
 8001810:	24002488 	.word	0x24002488

08001814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001818:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <SystemInit+0xe4>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a36      	ldr	r2, [pc, #216]	@ (80018f8 <SystemInit+0xe4>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001828:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <SystemInit+0xe8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	2b06      	cmp	r3, #6
 8001832:	d807      	bhi.n	8001844 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001834:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <SystemInit+0xe8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 030f 	bic.w	r3, r3, #15
 800183c:	4a2f      	ldr	r2, [pc, #188]	@ (80018fc <SystemInit+0xe8>)
 800183e:	f043 0307 	orr.w	r3, r3, #7
 8001842:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001844:	4b2e      	ldr	r3, [pc, #184]	@ (8001900 <SystemInit+0xec>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2d      	ldr	r2, [pc, #180]	@ (8001900 <SystemInit+0xec>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <SystemInit+0xec>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001856:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <SystemInit+0xec>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4929      	ldr	r1, [pc, #164]	@ (8001900 <SystemInit+0xec>)
 800185c:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <SystemInit+0xf0>)
 800185e:	4013      	ands	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <SystemInit+0xe8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800186e:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <SystemInit+0xe8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 030f 	bic.w	r3, r3, #15
 8001876:	4a21      	ldr	r2, [pc, #132]	@ (80018fc <SystemInit+0xe8>)
 8001878:	f043 0307 	orr.w	r3, r3, #7
 800187c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <SystemInit+0xec>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001884:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <SystemInit+0xec>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <SystemInit+0xec>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <SystemInit+0xec>)
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <SystemInit+0xf4>)
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <SystemInit+0xec>)
 8001898:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <SystemInit+0xf8>)
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800189c:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <SystemInit+0xec>)
 800189e:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <SystemInit+0xfc>)
 80018a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <SystemInit+0xec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <SystemInit+0xec>)
 80018aa:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <SystemInit+0xfc>)
 80018ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <SystemInit+0xec>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <SystemInit+0xec>)
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <SystemInit+0xfc>)
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <SystemInit+0xec>)
 80018bc:	2200      	movs	r2, #0
 80018be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <SystemInit+0xec>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001900 <SystemInit+0xec>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <SystemInit+0xec>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <SystemInit+0x100>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <SystemInit+0x104>)
 80018d8:	4013      	ands	r3, r2
 80018da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018de:	d202      	bcs.n	80018e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <SystemInit+0x108>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <SystemInit+0x10c>)
 80018e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	52002000 	.word	0x52002000
 8001900:	58024400 	.word	0x58024400
 8001904:	eaf6ed7f 	.word	0xeaf6ed7f
 8001908:	02020200 	.word	0x02020200
 800190c:	01ff0000 	.word	0x01ff0000
 8001910:	01010280 	.word	0x01010280
 8001914:	5c001000 	.word	0x5c001000
 8001918:	ffff0000 	.word	0xffff0000
 800191c:	51008108 	.word	0x51008108
 8001920:	52004000 	.word	0x52004000

08001924 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_TIM2_Init+0x98>)
 8001944:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001948:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_TIM2_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_TIM2_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_TIM2_Init+0x98>)
 8001958:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800195c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_TIM2_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_TIM2_Init+0x98>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196a:	4814      	ldr	r0, [pc, #80]	@ (80019bc <MX_TIM2_Init+0x98>)
 800196c:	f00a fd31 	bl	800c3d2 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001976:	f7ff fc6b 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <MX_TIM2_Init+0x98>)
 8001988:	f00b f996 	bl	800ccb8 <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001992:	f7ff fc5d 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <MX_TIM2_Init+0x98>)
 80019a4:	f00b fedc 	bl	800d760 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019ae:	f7ff fc4f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	24000694 	.word	0x24000694

080019c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b09a      	sub	sp, #104	@ 0x68
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	615a      	str	r2, [r3, #20]
 80019f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	222c      	movs	r2, #44	@ 0x2c
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f011 fb75 	bl	80130ea <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a00:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a02:	4a4b      	ldr	r2, [pc, #300]	@ (8001b30 <MX_TIM8_Init+0x170>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a06:	4b49      	ldr	r3, [pc, #292]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 8001a12:	4b46      	ldr	r3, [pc, #280]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a14:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001a18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b44      	ldr	r3, [pc, #272]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a20:	4b42      	ldr	r3, [pc, #264]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b41      	ldr	r3, [pc, #260]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a2c:	483f      	ldr	r0, [pc, #252]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a2e:	f00a fcd0 	bl	800c3d2 <HAL_TIM_Base_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001a38:	f7ff fc0a 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a40:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a46:	4619      	mov	r1, r3
 8001a48:	4838      	ldr	r0, [pc, #224]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a4a:	f00b f935 	bl	800ccb8 <HAL_TIM_ConfigClockSource>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001a54:	f7ff fbfc 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a58:	4834      	ldr	r0, [pc, #208]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a5a:	f00a fd89 	bl	800c570 <HAL_TIM_PWM_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001a64:	f7ff fbf4 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	482c      	ldr	r0, [pc, #176]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001a7c:	f00b fe70 	bl	800d760 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001a86:	f7ff fbe3 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8a:	2360      	movs	r3, #96	@ 0x60
 8001a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 6000-1;
 8001a8e:	f241 736f 	movw	r3, #5999	@ 0x176f
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aac:	2200      	movs	r2, #0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481e      	ldr	r0, [pc, #120]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001ab2:	f00a ffed 	bl	800ca90 <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001abc:	f7ff fbc8 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4818      	ldr	r0, [pc, #96]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001aca:	f00a ffe1 	bl	800ca90 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001ad4:	f7ff fbbc 	bl	8001250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4807      	ldr	r0, [pc, #28]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001b0e:	f00b feb5 	bl	800d87c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8001b18:	f7ff fb9a 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b1c:	4803      	ldr	r0, [pc, #12]	@ (8001b2c <MX_TIM8_Init+0x16c>)
 8001b1e:	f000 f847 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8001b22:	bf00      	nop
 8001b24:	3768      	adds	r7, #104	@ 0x68
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	240006e0 	.word	0x240006e0
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b44:	d117      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x74>)
 8001b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x74>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b56:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x74>)
 8001b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	201c      	movs	r0, #28
 8001b6a:	f001 fdd1 	bl	8003710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b6e:	201c      	movs	r0, #28
 8001b70:	f001 fde8 	bl	8003744 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b74:	e013      	b.n	8001b9e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM8)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bac <HAL_TIM_Base_MspInit+0x78>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d10e      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x74>)
 8001b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x74>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x74>)
 8001b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <HAL_TIM_MspPostInit+0x68>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11e      	bne.n	8001c10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd8:	4a10      	ldr	r2, [pc, #64]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf0:	23c0      	movs	r3, #192	@ 0xc0
 8001bf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c00:	2303      	movs	r3, #3
 8001c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <HAL_TIM_MspPostInit+0x70>)
 8001c0c:	f004 f942 	bl	8005e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40010400 	.word	0x40010400
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58020800 	.word	0x58020800

08001c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c28:	f7ff fdf4 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480c      	ldr	r0, [pc, #48]	@ (8001c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2e:	490d      	ldr	r1, [pc, #52]	@ (8001c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c30:	4a0d      	ldr	r2, [pc, #52]	@ (8001c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c44:	4c0a      	ldr	r4, [pc, #40]	@ (8001c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c52:	f011 fab3 	bl	80131bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c56:	f7fe ff95 	bl	8000b84 <main>
  bx  lr
 8001c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c64:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8001c68:	080164e0 	.word	0x080164e0
  ldr r2, =_sbss
 8001c6c:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8001c70:	24002488 	.word	0x24002488

08001c74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC3_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7e:	2003      	movs	r0, #3
 8001c80:	f001 fd3b 	bl	80036fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c84:	f007 f89c 	bl	8008dc0 <HAL_RCC_GetSysClockFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_Init+0x68>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	4913      	ldr	r1, [pc, #76]	@ (8001ce4 <HAL_Init+0x6c>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <HAL_Init+0x68>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce4 <HAL_Init+0x6c>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce8 <HAL_Init+0x70>)
 8001cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_Init+0x74>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc2:	200f      	movs	r0, #15
 8001cc4:	f7ff fc12 	bl	80014ec <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e002      	b.n	8001cd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd2:	f7ff fbf1 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	08015344 	.word	0x08015344
 8001ce8:	24000008 	.word	0x24000008
 8001cec:	24000004 	.word	0x24000004

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	24000010 	.word	0x24000010
 8001d14:	2400072c 	.word	0x2400072c

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2400072c 	.word	0x2400072c

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff ffee 	bl	8001d18 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	24000010 	.word	0x24000010

08001d78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <HAL_GetREVID+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0c1b      	lsrs	r3, r3, #16
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	5c001000 	.word	0x5c001000

08001d90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	609a      	str	r2, [r3, #8]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3360      	adds	r3, #96	@ 0x60
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	431a      	orrs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3360      	adds	r3, #96	@ 0x60
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	601a      	str	r2, [r3, #0]
  }
}
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b087      	sub	sp, #28
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3330      	adds	r3, #48	@ 0x30
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	4413      	add	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	211f      	movs	r1, #31
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	401a      	ands	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 011f 	and.w	r1, r3, #31
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f023 0203 	bic.w	r2, r3, #3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3314      	adds	r3, #20
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0e5b      	lsrs	r3, r3, #25
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0d1b      	lsrs	r3, r3, #20
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2107      	movs	r1, #7
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	401a      	ands	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	0d1b      	lsrs	r3, r3, #20
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0318 	and.w	r3, r3, #24
 8001fbe:	4908      	ldr	r1, [pc, #32]	@ (8001fe0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fc0:	40d9      	lsrs	r1, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	000fffff 	.word	0x000fffff

08001fe4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <LL_ADC_DisableDeepPowerDown+0x20>)
 800200e:	4013      	ands	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6093      	str	r3, [r2, #8]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	5fffffc0 	.word	0x5fffffc0

08002024 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002038:	d101      	bne.n	800203e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <LL_ADC_EnableInternalRegulator+0x24>)
 800205a:	4013      	ands	r3, r2
 800205c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	6fffffc0 	.word	0x6fffffc0

08002074 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002088:	d101      	bne.n	800208e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <LL_ADC_Enable+0x24>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	7fffffc0 	.word	0x7fffffc0

080020c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <LL_ADC_Disable+0x24>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	f043 0202 	orr.w	r2, r3, #2
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	7fffffc0 	.word	0x7fffffc0

080020ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <LL_ADC_IsEnabled+0x18>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <LL_ADC_IsEnabled+0x1a>
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b02      	cmp	r3, #2
 8002124:	d101      	bne.n	800212a <LL_ADC_IsDisableOngoing+0x18>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_ADC_IsDisableOngoing+0x1a>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <LL_ADC_REG_StartConversion+0x24>)
 8002146:	4013      	ands	r3, r2
 8002148:	f043 0204 	orr.w	r2, r3, #4
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	7fffffc0 	.word	0x7fffffc0

08002160 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d101      	bne.n	8002178 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d101      	bne.n	800219e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e18f      	b.n	80024e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe f971 	bl	80004bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff19 	bl	8002024 <LL_ADC_IsDeepPowerDownEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff feff 	bl	8002000 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff34 	bl	8002074 <LL_ADC_IsInternalRegulatorEnabled>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d114      	bne.n	800223c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff18 	bl	800204c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800221c:	4b87      	ldr	r3, [pc, #540]	@ (800243c <HAL_ADC_Init+0x290>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	4a87      	ldr	r2, [pc, #540]	@ (8002440 <HAL_ADC_Init+0x294>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	3301      	adds	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800222e:	e002      	b.n	8002236 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3b01      	subs	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f9      	bne.n	8002230 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff17 	bl	8002074 <LL_ADC_IsInternalRegulatorEnabled>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	f043 0210 	orr.w	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff77 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 8002272:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 8129 	bne.w	80024d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 8125 	bne.w	80024d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff24 	bl	80020ec <LL_ADC_IsEnabled>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d136      	bne.n	8002318 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a65      	ldr	r2, [pc, #404]	@ (8002444 <HAL_ADC_Init+0x298>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_ADC_Init+0x112>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a63      	ldr	r2, [pc, #396]	@ (8002448 <HAL_ADC_Init+0x29c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10e      	bne.n	80022dc <HAL_ADC_Init+0x130>
 80022be:	4861      	ldr	r0, [pc, #388]	@ (8002444 <HAL_ADC_Init+0x298>)
 80022c0:	f7ff ff14 	bl	80020ec <LL_ADC_IsEnabled>
 80022c4:	4604      	mov	r4, r0
 80022c6:	4860      	ldr	r0, [pc, #384]	@ (8002448 <HAL_ADC_Init+0x29c>)
 80022c8:	f7ff ff10 	bl	80020ec <LL_ADC_IsEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4323      	orrs	r3, r4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e008      	b.n	80022ee <HAL_ADC_Init+0x142>
 80022dc:	485b      	ldr	r0, [pc, #364]	@ (800244c <HAL_ADC_Init+0x2a0>)
 80022de:	f7ff ff05 	bl	80020ec <LL_ADC_IsEnabled>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a53      	ldr	r2, [pc, #332]	@ (8002444 <HAL_ADC_Init+0x298>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_ADC_Init+0x15a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a51      	ldr	r2, [pc, #324]	@ (8002448 <HAL_ADC_Init+0x29c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_ADC_Init+0x15e>
 8002306:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_ADC_Init+0x2a4>)
 8002308:	e000      	b.n	800230c <HAL_ADC_Init+0x160>
 800230a:	4a52      	ldr	r2, [pc, #328]	@ (8002454 <HAL_ADC_Init+0x2a8>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7ff fd3c 	bl	8001d90 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002318:	f7ff fd2e 	bl	8001d78 <HAL_GetREVID>
 800231c:	4603      	mov	r3, r0
 800231e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002322:	4293      	cmp	r3, r2
 8002324:	d914      	bls.n	8002350 <HAL_ADC_Init+0x1a4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b10      	cmp	r3, #16
 800232c:	d110      	bne.n	8002350 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7d5b      	ldrb	r3, [r3, #21]
 8002332:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002338:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800233e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7f1b      	ldrb	r3, [r3, #28]
 8002344:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002346:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002348:	f043 030c 	orr.w	r3, r3, #12
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	e00d      	b.n	800236c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7d5b      	ldrb	r3, [r3, #21]
 8002354:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800235a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002360:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7f1b      	ldrb	r3, [r3, #28]
 8002366:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7f1b      	ldrb	r3, [r3, #28]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	3b01      	subs	r3, #1
 800237a:	045b      	lsls	r3, r3, #17
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002396:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <HAL_ADC_Init+0x2ac>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	69b9      	ldr	r1, [r7, #24]
 80023ae:	430b      	orrs	r3, r1
 80023b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fed2 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 80023bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fedf 	bl	8002186 <LL_ADC_INJ_IsConversionOngoing>
 80023c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d15f      	bne.n	8002490 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d15c      	bne.n	8002490 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7d1b      	ldrb	r3, [r3, #20]
 80023da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <HAL_ADC_Init+0x2b0>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d130      	bne.n	8002464 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <HAL_ADC_Init+0x2b4>)
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002416:	3a01      	subs	r2, #1
 8002418:	0411      	lsls	r1, r2, #16
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800241e:	4311      	orrs	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800242a:	430a      	orrs	r2, r1
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	611a      	str	r2, [r3, #16]
 8002438:	e01c      	b.n	8002474 <HAL_ADC_Init+0x2c8>
 800243a:	bf00      	nop
 800243c:	24000004 	.word	0x24000004
 8002440:	053e2d63 	.word	0x053e2d63
 8002444:	40022000 	.word	0x40022000
 8002448:	40022100 	.word	0x40022100
 800244c:	58026000 	.word	0x58026000
 8002450:	40022300 	.word	0x40022300
 8002454:	58026300 	.word	0x58026300
 8002458:	fff0c003 	.word	0xfff0c003
 800245c:	ffffbffc 	.word	0xffffbffc
 8002460:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fde0 	bl	8003050 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10c      	bne.n	80024b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f023 010f 	bic.w	r1, r3, #15
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	1e5a      	subs	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80024b0:	e007      	b.n	80024c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 020f 	bic.w	r2, r2, #15
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80024d2:	e007      	b.n	80024e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d8:	f043 0210 	orr.w	r2, r3, #16
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	bf00      	nop

080024f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a55      	ldr	r2, [pc, #340]	@ (8002658 <HAL_ADC_Start_DMA+0x168>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_ADC_Start_DMA+0x20>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a54      	ldr	r2, [pc, #336]	@ (800265c <HAL_ADC_Start_DMA+0x16c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_ADC_Start_DMA+0x24>
 8002510:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <HAL_ADC_Start_DMA+0x170>)
 8002512:	e000      	b.n	8002516 <HAL_ADC_Start_DMA+0x26>
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_ADC_Start_DMA+0x174>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fd64 	bl	8001fe4 <LL_ADC_GetMultimode>
 800251c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fe1c 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 808c 	bne.w	8002648 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_ADC_Start_DMA+0x4e>
 800253a:	2302      	movs	r3, #2
 800253c:	e087      	b.n	800264e <HAL_ADC_Start_DMA+0x15e>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d002      	beq.n	8002558 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b09      	cmp	r3, #9
 8002556:	d170      	bne.n	800263a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fbfb 	bl	8002d54 <ADC_Enable>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d163      	bne.n	8002630 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800256c:	4b3e      	ldr	r3, [pc, #248]	@ (8002668 <HAL_ADC_Start_DMA+0x178>)
 800256e:	4013      	ands	r3, r2
 8002570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a37      	ldr	r2, [pc, #220]	@ (800265c <HAL_ADC_Start_DMA+0x16c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d002      	beq.n	8002588 <HAL_ADC_Start_DMA+0x98>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e000      	b.n	800258a <HAL_ADC_Start_DMA+0x9a>
 8002588:	4b33      	ldr	r3, [pc, #204]	@ (8002658 <HAL_ADC_Start_DMA+0x168>)
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4293      	cmp	r3, r2
 8002590:	d002      	beq.n	8002598 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	f023 0206 	bic.w	r2, r3, #6
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	4a28      	ldr	r2, [pc, #160]	@ (800266c <HAL_ADC_Start_DMA+0x17c>)
 80025ca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d0:	4a27      	ldr	r2, [pc, #156]	@ (8002670 <HAL_ADC_Start_DMA+0x180>)
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d8:	4a26      	ldr	r2, [pc, #152]	@ (8002674 <HAL_ADC_Start_DMA+0x184>)
 80025da:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	221c      	movs	r2, #28
 80025e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0210 	orr.w	r2, r2, #16
 80025fa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7ff fc89 	bl	8001f1e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3340      	adds	r3, #64	@ 0x40
 8002616:	4619      	mov	r1, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f001 febe 	bl	800439c <HAL_DMA_Start_IT>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fd85 	bl	8002138 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800262e:	e00d      	b.n	800264c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002638:	e008      	b.n	800264c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002646:	e001      	b.n	800264c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40022000 	.word	0x40022000
 800265c:	40022100 	.word	0x40022100
 8002660:	40022300 	.word	0x40022300
 8002664:	58026300 	.word	0x58026300
 8002668:	fffff0fe 	.word	0xfffff0fe
 800266c:	08002f27 	.word	0x08002f27
 8002670:	08002fff 	.word	0x08002fff
 8002674:	0800301b 	.word	0x0800301b

08002678 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b0a1      	sub	sp, #132	@ 0x84
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a9d      	ldr	r2, [pc, #628]	@ (8002944 <HAL_ADC_ConfigChannel+0x290>)
 80026ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x2a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e321      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x66e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fd38 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 8306 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002700:	2b00      	cmp	r3, #0
 8002702:	d108      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x62>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2201      	movs	r2, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	e016      	b.n	8002744 <HAL_ADC_ConfigChannel+0x90>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002726:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e003      	b.n	800273a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2201      	movs	r2, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	69d1      	ldr	r1, [r2, #28]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	430b      	orrs	r3, r1
 8002750:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	f7ff fbb1 	bl	8001ec6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fcf9 	bl	8002160 <LL_ADC_REG_IsConversionOngoing>
 800276e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fd06 	bl	8002186 <LL_ADC_INJ_IsConversionOngoing>
 800277a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800277c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 80b3 	bne.w	80028ea <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 80af 	bne.w	80028ea <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	461a      	mov	r2, r3
 800279a:	f7ff fbd3 	bl	8001f44 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800279e:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_ADC_ConfigChannel+0x294>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80027a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027aa:	d10b      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x110>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	e01d      	b.n	8002800 <HAL_ADC_ConfigChannel+0x14c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x136>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	e00a      	b.n	8002800 <HAL_ADC_ConfigChannel+0x14c>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d027      	beq.n	800285a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6919      	ldr	r1, [r3, #16]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002818:	f7ff faee 	bl	8001df8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6919      	ldr	r1, [r3, #16]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7e5b      	ldrb	r3, [r3, #25]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d102      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x17e>
 800282c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002830:	e000      	b.n	8002834 <HAL_ADC_ConfigChannel+0x180>
 8002832:	2300      	movs	r3, #0
 8002834:	461a      	mov	r2, r3
 8002836:	f7ff fb18 	bl	8001e6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6919      	ldr	r1, [r3, #16]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	7e1b      	ldrb	r3, [r3, #24]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x19c>
 800284a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800284e:	e000      	b.n	8002852 <HAL_ADC_ConfigChannel+0x19e>
 8002850:	2300      	movs	r3, #0
 8002852:	461a      	mov	r2, r3
 8002854:	f7ff faf0 	bl	8001e38 <LL_ADC_SetDataRightShift>
 8002858:	e047      	b.n	80028ea <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002860:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	429a      	cmp	r2, r3
 800286c:	d107      	bne.n	800287e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800287c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002884:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	069b      	lsls	r3, r3, #26
 800288e:	429a      	cmp	r2, r3
 8002890:	d107      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028a0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	069b      	lsls	r3, r3, #26
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d107      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028c4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	069b      	lsls	r3, r3, #26
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d107      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fbfc 	bl	80020ec <LL_ADC_IsEnabled>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 820d 	bne.w	8002d16 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	461a      	mov	r2, r3
 800290a:	f7ff fb47 	bl	8001f9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4a0c      	ldr	r2, [pc, #48]	@ (8002944 <HAL_ADC_ConfigChannel+0x290>)
 8002914:	4293      	cmp	r3, r2
 8002916:	f040 8133 	bne.w	8002b80 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002926:	2b00      	cmp	r3, #0
 8002928:	d110      	bne.n	800294c <HAL_ADC_ConfigChannel+0x298>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	3301      	adds	r3, #1
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	2b09      	cmp	r3, #9
 8002938:	bf94      	ite	ls
 800293a:	2301      	movls	r3, #1
 800293c:	2300      	movhi	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e01e      	b.n	8002980 <HAL_ADC_ConfigChannel+0x2cc>
 8002942:	bf00      	nop
 8002944:	47ff0000 	.word	0x47ff0000
 8002948:	5c001000 	.word	0x5c001000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800295a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800295e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e003      	b.n	8002970 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2b09      	cmp	r3, #9
 8002978:	bf94      	ite	ls
 800297a:	2301      	movls	r3, #1
 800297c:	2300      	movhi	r3, #0
 800297e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002980:	2b00      	cmp	r3, #0
 8002982:	d079      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x2ec>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	069b      	lsls	r3, r3, #26
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800299e:	e015      	b.n	80029cc <HAL_ADC_ConfigChannel+0x318>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	069b      	lsls	r3, r3, #26
 80029c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x338>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	e017      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x368>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	ea42 0103 	orr.w	r1, r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x38e>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	051b      	lsls	r3, r3, #20
 8002a40:	e018      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x3c0>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e003      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a74:	430b      	orrs	r3, r1
 8002a76:	e07e      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x3e0>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	069b      	lsls	r3, r3, #26
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a92:	e015      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x40c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e003      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x42c>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	e017      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x45c>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	61bb      	str	r3, [r7, #24]
  return result;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	ea42 0103 	orr.w	r1, r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x488>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	3b1e      	subs	r3, #30
 8002b34:	051b      	lsls	r3, r3, #20
 8002b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	e01b      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x4c0>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	60fb      	str	r3, [r7, #12]
  return result;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 021f 	and.w	r2, r3, #31
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b1e      	subs	r3, #30
 8002b6e:	051b      	lsls	r3, r3, #20
 8002b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b74:	430b      	orrs	r3, r1
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	6892      	ldr	r2, [r2, #8]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f7ff f9e2 	bl	8001f44 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f280 80c6 	bge.w	8002d16 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a67      	ldr	r2, [pc, #412]	@ (8002d2c <HAL_ADC_ConfigChannel+0x678>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d004      	beq.n	8002b9e <HAL_ADC_ConfigChannel+0x4ea>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a65      	ldr	r2, [pc, #404]	@ (8002d30 <HAL_ADC_ConfigChannel+0x67c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x4ee>
 8002b9e:	4b65      	ldr	r3, [pc, #404]	@ (8002d34 <HAL_ADC_ConfigChannel+0x680>)
 8002ba0:	e000      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x4f0>
 8002ba2:	4b65      	ldr	r3, [pc, #404]	@ (8002d38 <HAL_ADC_ConfigChannel+0x684>)
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f919 	bl	8001ddc <LL_ADC_GetCommonPathInternalCh>
 8002baa:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5e      	ldr	r2, [pc, #376]	@ (8002d2c <HAL_ADC_ConfigChannel+0x678>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x50c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5d      	ldr	r2, [pc, #372]	@ (8002d30 <HAL_ADC_ConfigChannel+0x67c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10e      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x52a>
 8002bc0:	485a      	ldr	r0, [pc, #360]	@ (8002d2c <HAL_ADC_ConfigChannel+0x678>)
 8002bc2:	f7ff fa93 	bl	80020ec <LL_ADC_IsEnabled>
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	4859      	ldr	r0, [pc, #356]	@ (8002d30 <HAL_ADC_ConfigChannel+0x67c>)
 8002bca:	f7ff fa8f 	bl	80020ec <LL_ADC_IsEnabled>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4323      	orrs	r3, r4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e008      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x53c>
 8002bde:	4857      	ldr	r0, [pc, #348]	@ (8002d3c <HAL_ADC_ConfigChannel+0x688>)
 8002be0:	f7ff fa84 	bl	80020ec <LL_ADC_IsEnabled>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d07d      	beq.n	8002cf0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a51      	ldr	r2, [pc, #324]	@ (8002d40 <HAL_ADC_ConfigChannel+0x68c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d130      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x5ac>
 8002bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d12b      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d3c <HAL_ADC_ConfigChannel+0x688>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f040 8081 	bne.w	8002d16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a44      	ldr	r2, [pc, #272]	@ (8002d2c <HAL_ADC_ConfigChannel+0x678>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_ADC_ConfigChannel+0x574>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a43      	ldr	r2, [pc, #268]	@ (8002d30 <HAL_ADC_ConfigChannel+0x67c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x578>
 8002c28:	4a42      	ldr	r2, [pc, #264]	@ (8002d34 <HAL_ADC_ConfigChannel+0x680>)
 8002c2a:	e000      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x57a>
 8002c2c:	4a42      	ldr	r2, [pc, #264]	@ (8002d38 <HAL_ADC_ConfigChannel+0x684>)
 8002c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f7ff f8bd 	bl	8001db6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c3c:	4b41      	ldr	r3, [pc, #260]	@ (8002d44 <HAL_ADC_ConfigChannel+0x690>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	4a41      	ldr	r2, [pc, #260]	@ (8002d48 <HAL_ADC_ConfigChannel+0x694>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c50:	e002      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f9      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c5e:	e05a      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a39      	ldr	r2, [pc, #228]	@ (8002d4c <HAL_ADC_ConfigChannel+0x698>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d11e      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x5f4>
 8002c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d119      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a30      	ldr	r2, [pc, #192]	@ (8002d3c <HAL_ADC_ConfigChannel+0x688>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d14b      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2a      	ldr	r2, [pc, #168]	@ (8002d2c <HAL_ADC_ConfigChannel+0x678>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_ADC_ConfigChannel+0x5de>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	@ (8002d30 <HAL_ADC_ConfigChannel+0x67c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x5e2>
 8002c92:	4a28      	ldr	r2, [pc, #160]	@ (8002d34 <HAL_ADC_ConfigChannel+0x680>)
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x5e4>
 8002c96:	4a28      	ldr	r2, [pc, #160]	@ (8002d38 <HAL_ADC_ConfigChannel+0x684>)
 8002c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f7ff f888 	bl	8001db6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca6:	e036      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <HAL_ADC_ConfigChannel+0x69c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d131      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
 8002cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d12c      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <HAL_ADC_ConfigChannel+0x688>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d127      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a18      	ldr	r2, [pc, #96]	@ (8002d2c <HAL_ADC_ConfigChannel+0x678>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_ConfigChannel+0x626>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <HAL_ADC_ConfigChannel+0x67c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x62a>
 8002cda:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <HAL_ADC_ConfigChannel+0x680>)
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x62c>
 8002cde:	4a16      	ldr	r2, [pc, #88]	@ (8002d38 <HAL_ADC_ConfigChannel+0x684>)
 8002ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f7ff f864 	bl	8001db6 <LL_ADC_SetCommonPathInternalCh>
 8002cee:	e012      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d02:	e008      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3784      	adds	r7, #132	@ 0x84
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022100 	.word	0x40022100
 8002d34:	40022300 	.word	0x40022300
 8002d38:	58026300 	.word	0x58026300
 8002d3c:	58026000 	.word	0x58026000
 8002d40:	cb840000 	.word	0xcb840000
 8002d44:	24000004 	.word	0x24000004
 8002d48:	053e2d63 	.word	0x053e2d63
 8002d4c:	c7520000 	.word	0xc7520000
 8002d50:	cfb80000 	.word	0xcfb80000

08002d54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f9c3 	bl	80020ec <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d16e      	bne.n	8002e4a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	4b38      	ldr	r3, [pc, #224]	@ (8002e54 <ADC_Enable+0x100>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e05a      	b.n	8002e4c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f97e 	bl	800209c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002da0:	f7fe ffba 	bl	8001d18 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2b      	ldr	r2, [pc, #172]	@ (8002e58 <ADC_Enable+0x104>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <ADC_Enable+0x66>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a29      	ldr	r2, [pc, #164]	@ (8002e5c <ADC_Enable+0x108>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <ADC_Enable+0x6a>
 8002dba:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <ADC_Enable+0x10c>)
 8002dbc:	e000      	b.n	8002dc0 <ADC_Enable+0x6c>
 8002dbe:	4b29      	ldr	r3, [pc, #164]	@ (8002e64 <ADC_Enable+0x110>)
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f90f 	bl	8001fe4 <LL_ADC_GetMultimode>
 8002dc6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	@ (8002e5c <ADC_Enable+0x108>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d002      	beq.n	8002dd8 <ADC_Enable+0x84>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e000      	b.n	8002dda <ADC_Enable+0x86>
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <ADC_Enable+0x104>)
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02c      	beq.n	8002e3c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d130      	bne.n	8002e4a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002de8:	e028      	b.n	8002e3c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f97c 	bl	80020ec <LL_ADC_IsEnabled>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f94c 	bl	800209c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e04:	f7fe ff88 	bl	8001d18 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d914      	bls.n	8002e3c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d00d      	beq.n	8002e3c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d1cf      	bne.n	8002dea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	8000003f 	.word	0x8000003f
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40022100 	.word	0x40022100
 8002e60:	40022300 	.word	0x40022300
 8002e64:	58026300 	.word	0x58026300

08002e68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f94c 	bl	8002112 <LL_ADC_IsDisableOngoing>
 8002e7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff f933 	bl	80020ec <LL_ADC_IsEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d047      	beq.n	8002f1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d144      	bne.n	8002f1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030d 	and.w	r3, r3, #13
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d10c      	bne.n	8002eba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff f90d 	bl	80020c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2203      	movs	r2, #3
 8002eb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eb2:	f7fe ff31 	bl	8001d18 <HAL_GetTick>
 8002eb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eb8:	e029      	b.n	8002f0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	f043 0210 	orr.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e023      	b.n	8002f1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ed6:	f7fe ff1f 	bl	8001d18 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d914      	bls.n	8002f0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e007      	b.n	8002f1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1dc      	bne.n	8002ed6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d14b      	bne.n	8002fd8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d021      	beq.n	8002f9e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe ff9e 	bl	8001ea0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d032      	beq.n	8002fd0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d12b      	bne.n	8002fd0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11f      	bne.n	8002fd0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f9c:	e018      	b.n	8002fd0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d111      	bne.n	8002fd0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fb51 	bl	8002678 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fd6:	e00e      	b.n	8002ff6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff fb5b 	bl	80026a0 <HAL_ADC_ErrorCallback>
}
 8002fea:	e004      	b.n	8002ff6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff fb3d 	bl	800268c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	f043 0204 	orr.w	r2, r3, #4
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fb2d 	bl	80026a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a7a      	ldr	r2, [pc, #488]	@ (8003248 <ADC_ConfigureBoostMode+0x1f8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <ADC_ConfigureBoostMode+0x1c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a79      	ldr	r2, [pc, #484]	@ (800324c <ADC_ConfigureBoostMode+0x1fc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d109      	bne.n	8003080 <ADC_ConfigureBoostMode+0x30>
 800306c:	4b78      	ldr	r3, [pc, #480]	@ (8003250 <ADC_ConfigureBoostMode+0x200>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e008      	b.n	8003092 <ADC_ConfigureBoostMode+0x42>
 8003080:	4b74      	ldr	r3, [pc, #464]	@ (8003254 <ADC_ConfigureBoostMode+0x204>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf14      	ite	ne
 800308c:	2301      	movne	r3, #1
 800308e:	2300      	moveq	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01c      	beq.n	80030d0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003096:	f006 f80d 	bl	80090b4 <HAL_RCC_GetHCLKFreq>
 800309a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030a4:	d010      	beq.n	80030c8 <ADC_ConfigureBoostMode+0x78>
 80030a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030aa:	d873      	bhi.n	8003194 <ADC_ConfigureBoostMode+0x144>
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b0:	d002      	beq.n	80030b8 <ADC_ConfigureBoostMode+0x68>
 80030b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b6:	d16d      	bne.n	8003194 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	60fb      	str	r3, [r7, #12]
        break;
 80030c6:	e068      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	60fb      	str	r3, [r7, #12]
        break;
 80030ce:	e064      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	f007 fa7e 	bl	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80030dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030e6:	d051      	beq.n	800318c <ADC_ConfigureBoostMode+0x13c>
 80030e8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80030ec:	d854      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 80030ee:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80030f2:	d047      	beq.n	8003184 <ADC_ConfigureBoostMode+0x134>
 80030f4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80030f8:	d84e      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 80030fa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80030fe:	d03d      	beq.n	800317c <ADC_ConfigureBoostMode+0x12c>
 8003100:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003104:	d848      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 8003106:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800310a:	d033      	beq.n	8003174 <ADC_ConfigureBoostMode+0x124>
 800310c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003110:	d842      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 8003112:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003116:	d029      	beq.n	800316c <ADC_ConfigureBoostMode+0x11c>
 8003118:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800311c:	d83c      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 800311e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003122:	d01a      	beq.n	800315a <ADC_ConfigureBoostMode+0x10a>
 8003124:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003128:	d836      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 800312a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800312e:	d014      	beq.n	800315a <ADC_ConfigureBoostMode+0x10a>
 8003130:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003134:	d830      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800313a:	d00e      	beq.n	800315a <ADC_ConfigureBoostMode+0x10a>
 800313c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003140:	d82a      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 8003142:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003146:	d008      	beq.n	800315a <ADC_ConfigureBoostMode+0x10a>
 8003148:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800314c:	d824      	bhi.n	8003198 <ADC_ConfigureBoostMode+0x148>
 800314e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003152:	d002      	beq.n	800315a <ADC_ConfigureBoostMode+0x10a>
 8003154:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003158:	d11e      	bne.n	8003198 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0c9b      	lsrs	r3, r3, #18
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	60fb      	str	r3, [r7, #12]
        break;
 800316a:	e016      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
        break;
 8003172:	e012      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	60fb      	str	r3, [r7, #12]
        break;
 800317a:	e00e      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	60fb      	str	r3, [r7, #12]
        break;
 8003182:	e00a      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	09db      	lsrs	r3, r3, #7
 8003188:	60fb      	str	r3, [r7, #12]
        break;
 800318a:	e006      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	60fb      	str	r3, [r7, #12]
        break;
 8003192:	e002      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003198:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800319a:	f7fe fded 	bl	8001d78 <HAL_GetREVID>
 800319e:	4603      	mov	r3, r0
 80031a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d815      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003258 <ADC_ConfigureBoostMode+0x208>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d908      	bls.n	80031c2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031be:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031c0:	e03e      	b.n	8003240 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	e035      	b.n	8003240 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <ADC_ConfigureBoostMode+0x20c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d808      	bhi.n	80031f4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80031f0:	609a      	str	r2, [r3, #8]
}
 80031f2:	e025      	b.n	8003240 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003260 <ADC_ConfigureBoostMode+0x210>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d80a      	bhi.n	8003212 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	e016      	b.n	8003240 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a13      	ldr	r2, [pc, #76]	@ (8003264 <ADC_ConfigureBoostMode+0x214>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d80a      	bhi.n	8003230 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322c:	609a      	str	r2, [r3, #8]
}
 800322e:	e007      	b.n	8003240 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40022000 	.word	0x40022000
 800324c:	40022100 	.word	0x40022100
 8003250:	40022300 	.word	0x40022300
 8003254:	58026300 	.word	0x58026300
 8003258:	01312d00 	.word	0x01312d00
 800325c:	005f5e10 	.word	0x005f5e10
 8003260:	00bebc20 	.word	0x00bebc20
 8003264:	017d7840 	.word	0x017d7840

08003268 <LL_ADC_IsEnabled>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <LL_ADC_IsEnabled+0x18>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <LL_ADC_IsEnabled+0x1a>
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <LL_ADC_StartCalibration>:
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <LL_ADC_StartCalibration+0x38>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	3ffeffc0 	.word	0x3ffeffc0

080032cc <LL_ADC_IsCalibrationOnGoing>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032e0:	d101      	bne.n	80032e6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_REG_IsConversionOngoing>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d101      	bne.n	800330c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_ADCEx_Calibration_Start+0x1e>
 8003336:	2302      	movs	r3, #2
 8003338:	e04c      	b.n	80033d4 <HAL_ADCEx_Calibration_Start+0xb8>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f7ff fd90 	bl	8002e68 <ADC_Disable>
 8003348:	4603      	mov	r3, r0
 800334a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800334c:	7dfb      	ldrb	r3, [r7, #23]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d135      	bne.n	80033be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003356:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003358:	4013      	ands	r3, r2
 800335a:	f043 0202 	orr.w	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff90 	bl	8003290 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003370:	e014      	b.n	800339c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	3301      	adds	r3, #1
 8003376:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4a19      	ldr	r2, [pc, #100]	@ (80033e0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d30d      	bcc.n	800339c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	f023 0312 	bic.w	r3, r3, #18
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e01b      	b.n	80033d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff93 	bl	80032cc <LL_ADC_IsCalibrationOnGoing>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e2      	bne.n	8003372 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	f023 0303 	bic.w	r3, r3, #3
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80033bc:	e005      	b.n	80033ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	ffffeefd 	.word	0xffffeefd
 80033e0:	25c3f800 	.word	0x25c3f800

080033e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b09f      	sub	sp, #124	@ 0x7c
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0be      	b.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800340e:	2300      	movs	r3, #0
 8003410:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5c      	ldr	r2, [pc, #368]	@ (8003588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d102      	bne.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800341c:	4b5b      	ldr	r3, [pc, #364]	@ (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	e001      	b.n	8003426 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e09d      	b.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff54 	bl	80032f4 <LL_ADC_REG_IsConversionOngoing>
 800344c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff4e 	bl	80032f4 <LL_ADC_REG_IsConversionOngoing>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d17f      	bne.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800345e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003460:	2b00      	cmp	r3, #0
 8003462:	d17c      	bne.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a47      	ldr	r2, [pc, #284]	@ (8003588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a46      	ldr	r2, [pc, #280]	@ (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003478:	4b45      	ldr	r3, [pc, #276]	@ (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800347a:	e000      	b.n	800347e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800347c:	4b45      	ldr	r3, [pc, #276]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800347e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d039      	beq.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	431a      	orrs	r2, r3
 8003496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003498:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3a      	ldr	r2, [pc, #232]	@ (8003588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a38      	ldr	r2, [pc, #224]	@ (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10e      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034ae:	4836      	ldr	r0, [pc, #216]	@ (8003588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034b0:	f7ff feda 	bl	8003268 <LL_ADC_IsEnabled>
 80034b4:	4604      	mov	r4, r0
 80034b6:	4835      	ldr	r0, [pc, #212]	@ (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034b8:	f7ff fed6 	bl	8003268 <LL_ADC_IsEnabled>
 80034bc:	4603      	mov	r3, r0
 80034be:	4323      	orrs	r3, r4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e008      	b.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80034cc:	4832      	ldr	r0, [pc, #200]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034ce:	f7ff fecb 	bl	8003268 <LL_ADC_IsEnabled>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d047      	beq.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	4b2d      	ldr	r3, [pc, #180]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	6811      	ldr	r1, [r2, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	6892      	ldr	r2, [r2, #8]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034fa:	e03a      	b.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003506:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10e      	bne.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800351c:	481a      	ldr	r0, [pc, #104]	@ (8003588 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800351e:	f7ff fea3 	bl	8003268 <LL_ADC_IsEnabled>
 8003522:	4604      	mov	r4, r0
 8003524:	4819      	ldr	r0, [pc, #100]	@ (800358c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003526:	f7ff fe9f 	bl	8003268 <LL_ADC_IsEnabled>
 800352a:	4603      	mov	r3, r0
 800352c:	4323      	orrs	r3, r4
 800352e:	2b00      	cmp	r3, #0
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e008      	b.n	800354c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800353a:	4817      	ldr	r0, [pc, #92]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800353c:	f7ff fe94 	bl	8003268 <LL_ADC_IsEnabled>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b11      	ldr	r3, [pc, #68]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003556:	4013      	ands	r3, r2
 8003558:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800355a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800355c:	e009      	b.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003570:	e000      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003572:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800357c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003580:	4618      	mov	r0, r3
 8003582:	377c      	adds	r7, #124	@ 0x7c
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	40022000 	.word	0x40022000
 800358c:	40022100 	.word	0x40022100
 8003590:	40022300 	.word	0x40022300
 8003594:	58026300 	.word	0x58026300
 8003598:	58026000 	.word	0x58026000
 800359c:	fffff0e0 	.word	0xfffff0e0

080035a0 <__NVIC_SetPriorityGrouping>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <__NVIC_SetPriorityGrouping+0x40>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ce:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <__NVIC_SetPriorityGrouping+0x40>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	60d3      	str	r3, [r2, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00
 80035e4:	05fa0000 	.word	0x05fa0000

080035e8 <__NVIC_GetPriorityGrouping>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	@ (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	@ (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	@ (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	@ 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff4c 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800371e:	f7ff ff63 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 8003722:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6978      	ldr	r0, [r7, #20]
 800372a:	f7ff ffb3 	bl	8003694 <NVIC_EncodePriority>
 800372e:	4602      	mov	r2, r0
 8003730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff82 	bl	8003640 <__NVIC_SetPriority>
}
 800373c:	bf00      	nop
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ff56 	bl	8003604 <__NVIC_EnableIRQ>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003764:	f3bf 8f5f 	dmb	sy
}
 8003768:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800376a:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <HAL_MPU_Disable+0x28>)
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	4a06      	ldr	r2, [pc, #24]	@ (8003788 <HAL_MPU_Disable+0x28>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003774:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003776:	4b05      	ldr	r3, [pc, #20]	@ (800378c <HAL_MPU_Disable+0x2c>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00
 800378c:	e000ed90 	.word	0xe000ed90

08003790 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003798:	4a0b      	ldr	r2, [pc, #44]	@ (80037c8 <HAL_MPU_Enable+0x38>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <HAL_MPU_Enable+0x3c>)
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	4a09      	ldr	r2, [pc, #36]	@ (80037cc <HAL_MPU_Enable+0x3c>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80037ae:	f3bf 8f4f 	dsb	sy
}
 80037b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037b4:	f3bf 8f6f 	isb	sy
}
 80037b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	e000ed90 	.word	0xe000ed90
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	785a      	ldrb	r2, [r3, #1]
 80037dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <HAL_MPU_ConfigRegion+0x84>)
 80037de:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d029      	beq.n	800383c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80037e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003854 <HAL_MPU_ConfigRegion+0x84>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7b1b      	ldrb	r3, [r3, #12]
 80037f4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7adb      	ldrb	r3, [r3, #11]
 80037fa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7a9b      	ldrb	r3, [r3, #10]
 8003802:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003804:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7b5b      	ldrb	r3, [r3, #13]
 800380a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800380c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7b9b      	ldrb	r3, [r3, #14]
 8003812:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003814:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7bdb      	ldrb	r3, [r3, #15]
 800381a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800381c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7a5b      	ldrb	r3, [r3, #9]
 8003822:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003824:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7a1b      	ldrb	r3, [r3, #8]
 800382a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800382c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003834:	4a07      	ldr	r2, [pc, #28]	@ (8003854 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003836:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003838:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800383a:	e005      	b.n	8003848 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_MPU_ConfigRegion+0x84>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003842:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <HAL_MPU_ConfigRegion+0x84>)
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed90 	.word	0xe000ed90

08003858 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e014      	b.n	8003894 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	791b      	ldrb	r3, [r3, #4]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fc ff1a 	bl	80006b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	795b      	ldrb	r3, [r3, #5]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_DAC_Start+0x16>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e040      	b.n	8003934 <HAL_DAC_Start+0x98>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2201      	movs	r2, #1
 80038cc:	409a      	lsls	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10f      	bne.n	80038fc <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d11d      	bne.n	8003926 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e014      	b.n	8003926 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2102      	movs	r1, #2
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	429a      	cmp	r2, r3
 8003914:	d107      	bne.n	8003926 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0202 	orr.w	r2, r2, #2
 8003924:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003956:	d120      	bne.n	800399a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003966:	d118      	bne.n	800399a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003982:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003992:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f852 	bl	8003a3e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a8:	d120      	bne.n	80039ec <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b8:	d118      	bne.n	80039ec <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2204      	movs	r2, #4
 80039be:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80039d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80039e4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f972 	bl	8003cd0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	3308      	adds	r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e004      	b.n	8003a28 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3314      	adds	r3, #20
 8003a26:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	795b      	ldrb	r3, [r3, #5]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_DAC_ConfigChannel+0x18>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e12a      	b.n	8003cc2 <HAL_DAC_ConfigChannel+0x26e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2202      	movs	r2, #2
 8003a76:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	f040 8081 	bne.w	8003b84 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003a82:	f7fe f949 	bl	8001d18 <HAL_GetTick>
 8003a86:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d140      	bne.n	8003b10 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a8e:	e018      	b.n	8003ac2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a90:	f7fe f942 	bl	8001d18 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d911      	bls.n	8003ac2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa4:	4b89      	ldr	r3, [pc, #548]	@ (8003ccc <HAL_DAC_ConfigChannel+0x278>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f043 0208 	orr.w	r2, r3, #8
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2203      	movs	r2, #3
 8003abc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0ff      	b.n	8003cc2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ac8:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_DAC_ConfigChannel+0x278>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1df      	bne.n	8003a90 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f7fe f92d 	bl	8001d30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	6992      	ldr	r2, [r2, #24]
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ae0:	e023      	b.n	8003b2a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ae2:	f7fe f919 	bl	8001d18 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d90f      	bls.n	8003b10 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da0a      	bge.n	8003b10 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f043 0208 	orr.w	r2, r3, #8
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0d8      	b.n	8003cc2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	dbe3      	blt.n	8003ae2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f7fe f908 	bl	8001d30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	6992      	ldr	r2, [r2, #24]
 8003b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	ea02 0103 	and.w	r1, r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	21ff      	movs	r1, #255	@ 0xff
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	ea02 0103 	and.w	r1, r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d11d      	bne.n	8003bc8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	221f      	movs	r2, #31
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2207      	movs	r2, #7
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4013      	ands	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e00f      	b.n	8003c12 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d102      	bne.n	8003c00 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e008      	b.n	8003c12 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e001      	b.n	8003c12 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43da      	mvns	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	400a      	ands	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4013      	ands	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	22c0      	movs	r2, #192	@ 0xc0
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20008000 	.word	0x20008000

08003cd0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7fe f814 	bl	8001d18 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e316      	b.n	800432a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a66      	ldr	r2, [pc, #408]	@ (8003e9c <HAL_DMA_Init+0x1b8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d04a      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a65      	ldr	r2, [pc, #404]	@ (8003ea0 <HAL_DMA_Init+0x1bc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d045      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a63      	ldr	r2, [pc, #396]	@ (8003ea4 <HAL_DMA_Init+0x1c0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d040      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a62      	ldr	r2, [pc, #392]	@ (8003ea8 <HAL_DMA_Init+0x1c4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d03b      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a60      	ldr	r2, [pc, #384]	@ (8003eac <HAL_DMA_Init+0x1c8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d036      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5f      	ldr	r2, [pc, #380]	@ (8003eb0 <HAL_DMA_Init+0x1cc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d031      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8003eb4 <HAL_DMA_Init+0x1d0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d02c      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb8 <HAL_DMA_Init+0x1d4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d027      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5a      	ldr	r2, [pc, #360]	@ (8003ebc <HAL_DMA_Init+0x1d8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d022      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a59      	ldr	r2, [pc, #356]	@ (8003ec0 <HAL_DMA_Init+0x1dc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d01d      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a57      	ldr	r2, [pc, #348]	@ (8003ec4 <HAL_DMA_Init+0x1e0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d018      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a56      	ldr	r2, [pc, #344]	@ (8003ec8 <HAL_DMA_Init+0x1e4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a54      	ldr	r2, [pc, #336]	@ (8003ecc <HAL_DMA_Init+0x1e8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00e      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a53      	ldr	r2, [pc, #332]	@ (8003ed0 <HAL_DMA_Init+0x1ec>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a51      	ldr	r2, [pc, #324]	@ (8003ed4 <HAL_DMA_Init+0x1f0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_DMA_Init+0xb8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a50      	ldr	r2, [pc, #320]	@ (8003ed8 <HAL_DMA_Init+0x1f4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA_Init+0xbc>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_DMA_Init+0xbe>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 813b 	beq.w	800401e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a37      	ldr	r2, [pc, #220]	@ (8003e9c <HAL_DMA_Init+0x1b8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d04a      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a36      	ldr	r2, [pc, #216]	@ (8003ea0 <HAL_DMA_Init+0x1bc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d045      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a34      	ldr	r2, [pc, #208]	@ (8003ea4 <HAL_DMA_Init+0x1c0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d040      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a33      	ldr	r2, [pc, #204]	@ (8003ea8 <HAL_DMA_Init+0x1c4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d03b      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a31      	ldr	r2, [pc, #196]	@ (8003eac <HAL_DMA_Init+0x1c8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d036      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a30      	ldr	r2, [pc, #192]	@ (8003eb0 <HAL_DMA_Init+0x1cc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d031      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb4 <HAL_DMA_Init+0x1d0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d02c      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb8 <HAL_DMA_Init+0x1d4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d027      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ebc <HAL_DMA_Init+0x1d8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec0 <HAL_DMA_Init+0x1dc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a28      	ldr	r2, [pc, #160]	@ (8003ec4 <HAL_DMA_Init+0x1e0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a27      	ldr	r2, [pc, #156]	@ (8003ec8 <HAL_DMA_Init+0x1e4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a25      	ldr	r2, [pc, #148]	@ (8003ecc <HAL_DMA_Init+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a24      	ldr	r2, [pc, #144]	@ (8003ed0 <HAL_DMA_Init+0x1ec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a22      	ldr	r2, [pc, #136]	@ (8003ed4 <HAL_DMA_Init+0x1f0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_DMA_Init+0x174>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a21      	ldr	r2, [pc, #132]	@ (8003ed8 <HAL_DMA_Init+0x1f4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <HAL_DMA_Init+0x186>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e007      	b.n	8003e7a <HAL_DMA_Init+0x196>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e7a:	e02f      	b.n	8003edc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e7c:	f7fd ff4c 	bl	8001d18 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d928      	bls.n	8003edc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2203      	movs	r2, #3
 8003e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e246      	b.n	800432a <HAL_DMA_Init+0x646>
 8003e9c:	40020010 	.word	0x40020010
 8003ea0:	40020028 	.word	0x40020028
 8003ea4:	40020040 	.word	0x40020040
 8003ea8:	40020058 	.word	0x40020058
 8003eac:	40020070 	.word	0x40020070
 8003eb0:	40020088 	.word	0x40020088
 8003eb4:	400200a0 	.word	0x400200a0
 8003eb8:	400200b8 	.word	0x400200b8
 8003ebc:	40020410 	.word	0x40020410
 8003ec0:	40020428 	.word	0x40020428
 8003ec4:	40020440 	.word	0x40020440
 8003ec8:	40020458 	.word	0x40020458
 8003ecc:	40020470 	.word	0x40020470
 8003ed0:	40020488 	.word	0x40020488
 8003ed4:	400204a0 	.word	0x400204a0
 8003ed8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1c8      	bne.n	8003e7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4b83      	ldr	r3, [pc, #524]	@ (8004104 <HAL_DMA_Init+0x420>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f40:	4b71      	ldr	r3, [pc, #452]	@ (8004108 <HAL_DMA_Init+0x424>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b71      	ldr	r3, [pc, #452]	@ (800410c <HAL_DMA_Init+0x428>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f4c:	d328      	bcc.n	8003fa0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b28      	cmp	r3, #40	@ 0x28
 8003f54:	d903      	bls.n	8003f5e <HAL_DMA_Init+0x27a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f5c:	d917      	bls.n	8003f8e <HAL_DMA_Init+0x2aa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f64:	d903      	bls.n	8003f6e <HAL_DMA_Init+0x28a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b42      	cmp	r3, #66	@ 0x42
 8003f6c:	d90f      	bls.n	8003f8e <HAL_DMA_Init+0x2aa>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b46      	cmp	r3, #70	@ 0x46
 8003f74:	d903      	bls.n	8003f7e <HAL_DMA_Init+0x29a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b48      	cmp	r3, #72	@ 0x48
 8003f7c:	d907      	bls.n	8003f8e <HAL_DMA_Init+0x2aa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f84:	d905      	bls.n	8003f92 <HAL_DMA_Init+0x2ae>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b52      	cmp	r3, #82	@ 0x52
 8003f8c:	d801      	bhi.n	8003f92 <HAL_DMA_Init+0x2ae>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_DMA_Init+0x2b0>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f9e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0307 	bic.w	r3, r3, #7
 8003fb6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d117      	bne.n	8003ffa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f001 fdcf 	bl	8005b80 <DMA_CheckFifoParam>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2240      	movs	r2, #64	@ 0x40
 8003fec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e197      	b.n	800432a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 fd0a 	bl	8005a1c <DMA_CalcBaseAndBitshift>
 8004008:	4603      	mov	r3, r0
 800400a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	223f      	movs	r2, #63	@ 0x3f
 8004016:	409a      	lsls	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	e0cd      	b.n	80041ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a3b      	ldr	r2, [pc, #236]	@ (8004110 <HAL_DMA_Init+0x42c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_DMA_Init+0x38a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a39      	ldr	r2, [pc, #228]	@ (8004114 <HAL_DMA_Init+0x430>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01d      	beq.n	800406e <HAL_DMA_Init+0x38a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a38      	ldr	r2, [pc, #224]	@ (8004118 <HAL_DMA_Init+0x434>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d018      	beq.n	800406e <HAL_DMA_Init+0x38a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a36      	ldr	r2, [pc, #216]	@ (800411c <HAL_DMA_Init+0x438>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_DMA_Init+0x38a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a35      	ldr	r2, [pc, #212]	@ (8004120 <HAL_DMA_Init+0x43c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_DMA_Init+0x38a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a33      	ldr	r2, [pc, #204]	@ (8004124 <HAL_DMA_Init+0x440>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_DMA_Init+0x38a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a32      	ldr	r2, [pc, #200]	@ (8004128 <HAL_DMA_Init+0x444>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_DMA_Init+0x38a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a30      	ldr	r2, [pc, #192]	@ (800412c <HAL_DMA_Init+0x448>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d101      	bne.n	8004072 <HAL_DMA_Init+0x38e>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_DMA_Init+0x390>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8097 	beq.w	80041a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a24      	ldr	r2, [pc, #144]	@ (8004110 <HAL_DMA_Init+0x42c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d021      	beq.n	80040c8 <HAL_DMA_Init+0x3e4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a22      	ldr	r2, [pc, #136]	@ (8004114 <HAL_DMA_Init+0x430>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01c      	beq.n	80040c8 <HAL_DMA_Init+0x3e4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a21      	ldr	r2, [pc, #132]	@ (8004118 <HAL_DMA_Init+0x434>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d017      	beq.n	80040c8 <HAL_DMA_Init+0x3e4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1f      	ldr	r2, [pc, #124]	@ (800411c <HAL_DMA_Init+0x438>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d012      	beq.n	80040c8 <HAL_DMA_Init+0x3e4>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004120 <HAL_DMA_Init+0x43c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00d      	beq.n	80040c8 <HAL_DMA_Init+0x3e4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004124 <HAL_DMA_Init+0x440>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d008      	beq.n	80040c8 <HAL_DMA_Init+0x3e4>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004128 <HAL_DMA_Init+0x444>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <HAL_DMA_Init+0x3e4>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	@ (800412c <HAL_DMA_Init+0x448>)
 80040c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4b13      	ldr	r3, [pc, #76]	@ (8004130 <HAL_DMA_Init+0x44c>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d021      	beq.n	8004134 <HAL_DMA_Init+0x450>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b80      	cmp	r3, #128	@ 0x80
 80040f6:	d102      	bne.n	80040fe <HAL_DMA_Init+0x41a>
 80040f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040fc:	e01b      	b.n	8004136 <HAL_DMA_Init+0x452>
 80040fe:	2300      	movs	r3, #0
 8004100:	e019      	b.n	8004136 <HAL_DMA_Init+0x452>
 8004102:	bf00      	nop
 8004104:	fe10803f 	.word	0xfe10803f
 8004108:	5c001000 	.word	0x5c001000
 800410c:	ffff0000 	.word	0xffff0000
 8004110:	58025408 	.word	0x58025408
 8004114:	5802541c 	.word	0x5802541c
 8004118:	58025430 	.word	0x58025430
 800411c:	58025444 	.word	0x58025444
 8004120:	58025458 	.word	0x58025458
 8004124:	5802546c 	.word	0x5802546c
 8004128:	58025480 	.word	0x58025480
 800412c:	58025494 	.word	0x58025494
 8004130:	fffe000f 	.word	0xfffe000f
 8004134:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800413c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800414c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800415c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004164:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b6e      	ldr	r3, [pc, #440]	@ (8004334 <HAL_DMA_Init+0x650>)
 800417c:	4413      	add	r3, r2
 800417e:	4a6e      	ldr	r2, [pc, #440]	@ (8004338 <HAL_DMA_Init+0x654>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f001 fc45 	bl	8005a1c <DMA_CalcBaseAndBitshift>
 8004192:	4603      	mov	r3, r0
 8004194:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2201      	movs	r2, #1
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	e008      	b.n	80041ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2240      	movs	r2, #64	@ 0x40
 80041ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2203      	movs	r2, #3
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e0b7      	b.n	800432a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a5f      	ldr	r2, [pc, #380]	@ (800433c <HAL_DMA_Init+0x658>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d072      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004340 <HAL_DMA_Init+0x65c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d06d      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004344 <HAL_DMA_Init+0x660>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d068      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004348 <HAL_DMA_Init+0x664>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d063      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a59      	ldr	r2, [pc, #356]	@ (800434c <HAL_DMA_Init+0x668>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d05e      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a57      	ldr	r2, [pc, #348]	@ (8004350 <HAL_DMA_Init+0x66c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d059      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a56      	ldr	r2, [pc, #344]	@ (8004354 <HAL_DMA_Init+0x670>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d054      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a54      	ldr	r2, [pc, #336]	@ (8004358 <HAL_DMA_Init+0x674>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04f      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a53      	ldr	r2, [pc, #332]	@ (800435c <HAL_DMA_Init+0x678>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d04a      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a51      	ldr	r2, [pc, #324]	@ (8004360 <HAL_DMA_Init+0x67c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d045      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a50      	ldr	r2, [pc, #320]	@ (8004364 <HAL_DMA_Init+0x680>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d040      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4e      	ldr	r2, [pc, #312]	@ (8004368 <HAL_DMA_Init+0x684>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d03b      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4d      	ldr	r2, [pc, #308]	@ (800436c <HAL_DMA_Init+0x688>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d036      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4b      	ldr	r2, [pc, #300]	@ (8004370 <HAL_DMA_Init+0x68c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d031      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4a      	ldr	r2, [pc, #296]	@ (8004374 <HAL_DMA_Init+0x690>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d02c      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a48      	ldr	r2, [pc, #288]	@ (8004378 <HAL_DMA_Init+0x694>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d027      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a47      	ldr	r2, [pc, #284]	@ (800437c <HAL_DMA_Init+0x698>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d022      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a45      	ldr	r2, [pc, #276]	@ (8004380 <HAL_DMA_Init+0x69c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01d      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a44      	ldr	r2, [pc, #272]	@ (8004384 <HAL_DMA_Init+0x6a0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a42      	ldr	r2, [pc, #264]	@ (8004388 <HAL_DMA_Init+0x6a4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a41      	ldr	r2, [pc, #260]	@ (800438c <HAL_DMA_Init+0x6a8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3f      	ldr	r2, [pc, #252]	@ (8004390 <HAL_DMA_Init+0x6ac>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3e      	ldr	r2, [pc, #248]	@ (8004394 <HAL_DMA_Init+0x6b0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_DMA_Init+0x5c6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004398 <HAL_DMA_Init+0x6b4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_DMA_Init+0x5ca>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_DMA_Init+0x5cc>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d032      	beq.n	800431a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 fcdf 	bl	8005c78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b80      	cmp	r3, #128	@ 0x80
 80042c0:	d102      	bne.n	80042c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d010      	beq.n	8004308 <HAL_DMA_Init+0x624>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d80c      	bhi.n	8004308 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f001 fd5c 	bl	8005dac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e008      	b.n	800431a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	a7fdabf8 	.word	0xa7fdabf8
 8004338:	cccccccd 	.word	0xcccccccd
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	58025408 	.word	0x58025408
 8004380:	5802541c 	.word	0x5802541c
 8004384:	58025430 	.word	0x58025430
 8004388:	58025444 	.word	0x58025444
 800438c:	58025458 	.word	0x58025458
 8004390:	5802546c 	.word	0x5802546c
 8004394:	58025480 	.word	0x58025480
 8004398:	58025494 	.word	0x58025494

0800439c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e226      	b.n	8004806 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_DMA_Start_IT+0x2a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e21f      	b.n	8004806 <HAL_DMA_Start_IT+0x46a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	f040 820a 	bne.w	80047f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a68      	ldr	r2, [pc, #416]	@ (8004590 <HAL_DMA_Start_IT+0x1f4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d04a      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a66      	ldr	r2, [pc, #408]	@ (8004594 <HAL_DMA_Start_IT+0x1f8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d045      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a65      	ldr	r2, [pc, #404]	@ (8004598 <HAL_DMA_Start_IT+0x1fc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d040      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a63      	ldr	r2, [pc, #396]	@ (800459c <HAL_DMA_Start_IT+0x200>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d03b      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a62      	ldr	r2, [pc, #392]	@ (80045a0 <HAL_DMA_Start_IT+0x204>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d036      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a60      	ldr	r2, [pc, #384]	@ (80045a4 <HAL_DMA_Start_IT+0x208>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d031      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5f      	ldr	r2, [pc, #380]	@ (80045a8 <HAL_DMA_Start_IT+0x20c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d02c      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5d      	ldr	r2, [pc, #372]	@ (80045ac <HAL_DMA_Start_IT+0x210>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d027      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5c      	ldr	r2, [pc, #368]	@ (80045b0 <HAL_DMA_Start_IT+0x214>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a5a      	ldr	r2, [pc, #360]	@ (80045b4 <HAL_DMA_Start_IT+0x218>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01d      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a59      	ldr	r2, [pc, #356]	@ (80045b8 <HAL_DMA_Start_IT+0x21c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d018      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a57      	ldr	r2, [pc, #348]	@ (80045bc <HAL_DMA_Start_IT+0x220>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a56      	ldr	r2, [pc, #344]	@ (80045c0 <HAL_DMA_Start_IT+0x224>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00e      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a54      	ldr	r2, [pc, #336]	@ (80045c4 <HAL_DMA_Start_IT+0x228>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a53      	ldr	r2, [pc, #332]	@ (80045c8 <HAL_DMA_Start_IT+0x22c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_DMA_Start_IT+0xee>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a51      	ldr	r2, [pc, #324]	@ (80045cc <HAL_DMA_Start_IT+0x230>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <HAL_DMA_Start_IT+0x100>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e007      	b.n	80044ac <HAL_DMA_Start_IT+0x110>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f001 f906 	bl	80056c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a34      	ldr	r2, [pc, #208]	@ (8004590 <HAL_DMA_Start_IT+0x1f4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d04a      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a33      	ldr	r2, [pc, #204]	@ (8004594 <HAL_DMA_Start_IT+0x1f8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d045      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a31      	ldr	r2, [pc, #196]	@ (8004598 <HAL_DMA_Start_IT+0x1fc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d040      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a30      	ldr	r2, [pc, #192]	@ (800459c <HAL_DMA_Start_IT+0x200>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d03b      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2e      	ldr	r2, [pc, #184]	@ (80045a0 <HAL_DMA_Start_IT+0x204>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d036      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2d      	ldr	r2, [pc, #180]	@ (80045a4 <HAL_DMA_Start_IT+0x208>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d031      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a2b      	ldr	r2, [pc, #172]	@ (80045a8 <HAL_DMA_Start_IT+0x20c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d02c      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2a      	ldr	r2, [pc, #168]	@ (80045ac <HAL_DMA_Start_IT+0x210>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d027      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a28      	ldr	r2, [pc, #160]	@ (80045b0 <HAL_DMA_Start_IT+0x214>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a27      	ldr	r2, [pc, #156]	@ (80045b4 <HAL_DMA_Start_IT+0x218>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01d      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a25      	ldr	r2, [pc, #148]	@ (80045b8 <HAL_DMA_Start_IT+0x21c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a24      	ldr	r2, [pc, #144]	@ (80045bc <HAL_DMA_Start_IT+0x220>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_DMA_Start_IT+0x224>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	@ (80045c4 <HAL_DMA_Start_IT+0x228>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1f      	ldr	r2, [pc, #124]	@ (80045c8 <HAL_DMA_Start_IT+0x22c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_DMA_Start_IT+0x1bc>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1e      	ldr	r2, [pc, #120]	@ (80045cc <HAL_DMA_Start_IT+0x230>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_DMA_Start_IT+0x1c0>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_DMA_Start_IT+0x1c2>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d036      	beq.n	80045d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 021e 	bic.w	r2, r3, #30
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0216 	orr.w	r2, r2, #22
 8004574:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d03e      	beq.n	80045fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0208 	orr.w	r2, r2, #8
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e035      	b.n	80045fc <HAL_DMA_Start_IT+0x260>
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 020e 	bic.w	r2, r3, #14
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 020a 	orr.w	r2, r2, #10
 80045e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0204 	orr.w	r2, r2, #4
 80045fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a83      	ldr	r2, [pc, #524]	@ (8004810 <HAL_DMA_Start_IT+0x474>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d072      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a82      	ldr	r2, [pc, #520]	@ (8004814 <HAL_DMA_Start_IT+0x478>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d06d      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a80      	ldr	r2, [pc, #512]	@ (8004818 <HAL_DMA_Start_IT+0x47c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d068      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7f      	ldr	r2, [pc, #508]	@ (800481c <HAL_DMA_Start_IT+0x480>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d063      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7d      	ldr	r2, [pc, #500]	@ (8004820 <HAL_DMA_Start_IT+0x484>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d05e      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a7c      	ldr	r2, [pc, #496]	@ (8004824 <HAL_DMA_Start_IT+0x488>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d059      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a7a      	ldr	r2, [pc, #488]	@ (8004828 <HAL_DMA_Start_IT+0x48c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d054      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a79      	ldr	r2, [pc, #484]	@ (800482c <HAL_DMA_Start_IT+0x490>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d04f      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a77      	ldr	r2, [pc, #476]	@ (8004830 <HAL_DMA_Start_IT+0x494>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d04a      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a76      	ldr	r2, [pc, #472]	@ (8004834 <HAL_DMA_Start_IT+0x498>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d045      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a74      	ldr	r2, [pc, #464]	@ (8004838 <HAL_DMA_Start_IT+0x49c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d040      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a73      	ldr	r2, [pc, #460]	@ (800483c <HAL_DMA_Start_IT+0x4a0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d03b      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a71      	ldr	r2, [pc, #452]	@ (8004840 <HAL_DMA_Start_IT+0x4a4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d036      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a70      	ldr	r2, [pc, #448]	@ (8004844 <HAL_DMA_Start_IT+0x4a8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d031      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6e      	ldr	r2, [pc, #440]	@ (8004848 <HAL_DMA_Start_IT+0x4ac>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d02c      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6d      	ldr	r2, [pc, #436]	@ (800484c <HAL_DMA_Start_IT+0x4b0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d027      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004850 <HAL_DMA_Start_IT+0x4b4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d022      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004854 <HAL_DMA_Start_IT+0x4b8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01d      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a68      	ldr	r2, [pc, #416]	@ (8004858 <HAL_DMA_Start_IT+0x4bc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d018      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a67      	ldr	r2, [pc, #412]	@ (800485c <HAL_DMA_Start_IT+0x4c0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a65      	ldr	r2, [pc, #404]	@ (8004860 <HAL_DMA_Start_IT+0x4c4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a64      	ldr	r2, [pc, #400]	@ (8004864 <HAL_DMA_Start_IT+0x4c8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a62      	ldr	r2, [pc, #392]	@ (8004868 <HAL_DMA_Start_IT+0x4cc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_DMA_Start_IT+0x350>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a61      	ldr	r2, [pc, #388]	@ (800486c <HAL_DMA_Start_IT+0x4d0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d101      	bne.n	80046f0 <HAL_DMA_Start_IT+0x354>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_DMA_Start_IT+0x356>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01a      	beq.n	800472c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004712:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a37      	ldr	r2, [pc, #220]	@ (8004810 <HAL_DMA_Start_IT+0x474>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d04a      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a36      	ldr	r2, [pc, #216]	@ (8004814 <HAL_DMA_Start_IT+0x478>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d045      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a34      	ldr	r2, [pc, #208]	@ (8004818 <HAL_DMA_Start_IT+0x47c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d040      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a33      	ldr	r2, [pc, #204]	@ (800481c <HAL_DMA_Start_IT+0x480>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d03b      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a31      	ldr	r2, [pc, #196]	@ (8004820 <HAL_DMA_Start_IT+0x484>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d036      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a30      	ldr	r2, [pc, #192]	@ (8004824 <HAL_DMA_Start_IT+0x488>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d031      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2e      	ldr	r2, [pc, #184]	@ (8004828 <HAL_DMA_Start_IT+0x48c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02c      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2d      	ldr	r2, [pc, #180]	@ (800482c <HAL_DMA_Start_IT+0x490>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d027      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2b      	ldr	r2, [pc, #172]	@ (8004830 <HAL_DMA_Start_IT+0x494>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2a      	ldr	r2, [pc, #168]	@ (8004834 <HAL_DMA_Start_IT+0x498>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d01d      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a28      	ldr	r2, [pc, #160]	@ (8004838 <HAL_DMA_Start_IT+0x49c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a27      	ldr	r2, [pc, #156]	@ (800483c <HAL_DMA_Start_IT+0x4a0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a25      	ldr	r2, [pc, #148]	@ (8004840 <HAL_DMA_Start_IT+0x4a4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a24      	ldr	r2, [pc, #144]	@ (8004844 <HAL_DMA_Start_IT+0x4a8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a22      	ldr	r2, [pc, #136]	@ (8004848 <HAL_DMA_Start_IT+0x4ac>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_DMA_Start_IT+0x430>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a21      	ldr	r2, [pc, #132]	@ (800484c <HAL_DMA_Start_IT+0x4b0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d108      	bne.n	80047de <HAL_DMA_Start_IT+0x442>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e012      	b.n	8004804 <HAL_DMA_Start_IT+0x468>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e009      	b.n	8004804 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004804:	7dfb      	ldrb	r3, [r7, #23]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40020010 	.word	0x40020010
 8004814:	40020028 	.word	0x40020028
 8004818:	40020040 	.word	0x40020040
 800481c:	40020058 	.word	0x40020058
 8004820:	40020070 	.word	0x40020070
 8004824:	40020088 	.word	0x40020088
 8004828:	400200a0 	.word	0x400200a0
 800482c:	400200b8 	.word	0x400200b8
 8004830:	40020410 	.word	0x40020410
 8004834:	40020428 	.word	0x40020428
 8004838:	40020440 	.word	0x40020440
 800483c:	40020458 	.word	0x40020458
 8004840:	40020470 	.word	0x40020470
 8004844:	40020488 	.word	0x40020488
 8004848:	400204a0 	.word	0x400204a0
 800484c:	400204b8 	.word	0x400204b8
 8004850:	58025408 	.word	0x58025408
 8004854:	5802541c 	.word	0x5802541c
 8004858:	58025430 	.word	0x58025430
 800485c:	58025444 	.word	0x58025444
 8004860:	58025458 	.word	0x58025458
 8004864:	5802546c 	.word	0x5802546c
 8004868:	58025480 	.word	0x58025480
 800486c:	58025494 	.word	0x58025494

08004870 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800487c:	4b67      	ldr	r3, [pc, #412]	@ (8004a1c <HAL_DMA_IRQHandler+0x1ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a67      	ldr	r2, [pc, #412]	@ (8004a20 <HAL_DMA_IRQHandler+0x1b0>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	0a9b      	lsrs	r3, r3, #10
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a5f      	ldr	r2, [pc, #380]	@ (8004a24 <HAL_DMA_IRQHandler+0x1b4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d04a      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004a28 <HAL_DMA_IRQHandler+0x1b8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d045      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a5c      	ldr	r2, [pc, #368]	@ (8004a2c <HAL_DMA_IRQHandler+0x1bc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d040      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a30 <HAL_DMA_IRQHandler+0x1c0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d03b      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a59      	ldr	r2, [pc, #356]	@ (8004a34 <HAL_DMA_IRQHandler+0x1c4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d036      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a57      	ldr	r2, [pc, #348]	@ (8004a38 <HAL_DMA_IRQHandler+0x1c8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d031      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a56      	ldr	r2, [pc, #344]	@ (8004a3c <HAL_DMA_IRQHandler+0x1cc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d02c      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a54      	ldr	r2, [pc, #336]	@ (8004a40 <HAL_DMA_IRQHandler+0x1d0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d027      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a53      	ldr	r2, [pc, #332]	@ (8004a44 <HAL_DMA_IRQHandler+0x1d4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d022      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a51      	ldr	r2, [pc, #324]	@ (8004a48 <HAL_DMA_IRQHandler+0x1d8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01d      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a50      	ldr	r2, [pc, #320]	@ (8004a4c <HAL_DMA_IRQHandler+0x1dc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a4e      	ldr	r2, [pc, #312]	@ (8004a50 <HAL_DMA_IRQHandler+0x1e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a4d      	ldr	r2, [pc, #308]	@ (8004a54 <HAL_DMA_IRQHandler+0x1e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a4b      	ldr	r2, [pc, #300]	@ (8004a58 <HAL_DMA_IRQHandler+0x1e8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a4a      	ldr	r2, [pc, #296]	@ (8004a5c <HAL_DMA_IRQHandler+0x1ec>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_DMA_IRQHandler+0xd2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a48      	ldr	r2, [pc, #288]	@ (8004a60 <HAL_DMA_IRQHandler+0x1f0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_DMA_IRQHandler+0xd6>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_DMA_IRQHandler+0xd8>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 842b 	beq.w	80051a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2208      	movs	r2, #8
 8004958:	409a      	lsls	r2, r3
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80a2 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2e      	ldr	r2, [pc, #184]	@ (8004a24 <HAL_DMA_IRQHandler+0x1b4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d04a      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2d      	ldr	r2, [pc, #180]	@ (8004a28 <HAL_DMA_IRQHandler+0x1b8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d045      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a2c <HAL_DMA_IRQHandler+0x1bc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d040      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2a      	ldr	r2, [pc, #168]	@ (8004a30 <HAL_DMA_IRQHandler+0x1c0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d03b      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a28      	ldr	r2, [pc, #160]	@ (8004a34 <HAL_DMA_IRQHandler+0x1c4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d036      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a27      	ldr	r2, [pc, #156]	@ (8004a38 <HAL_DMA_IRQHandler+0x1c8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d031      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a25      	ldr	r2, [pc, #148]	@ (8004a3c <HAL_DMA_IRQHandler+0x1cc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d02c      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a24      	ldr	r2, [pc, #144]	@ (8004a40 <HAL_DMA_IRQHandler+0x1d0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d027      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	@ (8004a44 <HAL_DMA_IRQHandler+0x1d4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d022      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	@ (8004a48 <HAL_DMA_IRQHandler+0x1d8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d01d      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a4c <HAL_DMA_IRQHandler+0x1dc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a50 <HAL_DMA_IRQHandler+0x1e0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a54 <HAL_DMA_IRQHandler+0x1e4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004a58 <HAL_DMA_IRQHandler+0x1e8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a19      	ldr	r2, [pc, #100]	@ (8004a5c <HAL_DMA_IRQHandler+0x1ec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x194>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a18      	ldr	r2, [pc, #96]	@ (8004a60 <HAL_DMA_IRQHandler+0x1f0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d12f      	bne.n	8004a64 <HAL_DMA_IRQHandler+0x1f4>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e02e      	b.n	8004a78 <HAL_DMA_IRQHandler+0x208>
 8004a1a:	bf00      	nop
 8004a1c:	24000004 	.word	0x24000004
 8004a20:	1b4e81b5 	.word	0x1b4e81b5
 8004a24:	40020010 	.word	0x40020010
 8004a28:	40020028 	.word	0x40020028
 8004a2c:	40020040 	.word	0x40020040
 8004a30:	40020058 	.word	0x40020058
 8004a34:	40020070 	.word	0x40020070
 8004a38:	40020088 	.word	0x40020088
 8004a3c:	400200a0 	.word	0x400200a0
 8004a40:	400200b8 	.word	0x400200b8
 8004a44:	40020410 	.word	0x40020410
 8004a48:	40020428 	.word	0x40020428
 8004a4c:	40020440 	.word	0x40020440
 8004a50:	40020458 	.word	0x40020458
 8004a54:	40020470 	.word	0x40020470
 8004a58:	40020488 	.word	0x40020488
 8004a5c:	400204a0 	.word	0x400204a0
 8004a60:	400204b8 	.word	0x400204b8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf14      	ite	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	2300      	moveq	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0204 	bic.w	r2, r2, #4
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	2208      	movs	r2, #8
 8004a96:	409a      	lsls	r2, r3
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	f043 0201 	orr.w	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d06e      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a69      	ldr	r2, [pc, #420]	@ (8004c68 <HAL_DMA_IRQHandler+0x3f8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d04a      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a67      	ldr	r2, [pc, #412]	@ (8004c6c <HAL_DMA_IRQHandler+0x3fc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d045      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a66      	ldr	r2, [pc, #408]	@ (8004c70 <HAL_DMA_IRQHandler+0x400>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d040      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a64      	ldr	r2, [pc, #400]	@ (8004c74 <HAL_DMA_IRQHandler+0x404>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d03b      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a63      	ldr	r2, [pc, #396]	@ (8004c78 <HAL_DMA_IRQHandler+0x408>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d036      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a61      	ldr	r2, [pc, #388]	@ (8004c7c <HAL_DMA_IRQHandler+0x40c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d031      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a60      	ldr	r2, [pc, #384]	@ (8004c80 <HAL_DMA_IRQHandler+0x410>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d02c      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5e      	ldr	r2, [pc, #376]	@ (8004c84 <HAL_DMA_IRQHandler+0x414>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d027      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5d      	ldr	r2, [pc, #372]	@ (8004c88 <HAL_DMA_IRQHandler+0x418>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d022      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5b      	ldr	r2, [pc, #364]	@ (8004c8c <HAL_DMA_IRQHandler+0x41c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01d      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a5a      	ldr	r2, [pc, #360]	@ (8004c90 <HAL_DMA_IRQHandler+0x420>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d018      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a58      	ldr	r2, [pc, #352]	@ (8004c94 <HAL_DMA_IRQHandler+0x424>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a57      	ldr	r2, [pc, #348]	@ (8004c98 <HAL_DMA_IRQHandler+0x428>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a55      	ldr	r2, [pc, #340]	@ (8004c9c <HAL_DMA_IRQHandler+0x42c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a54      	ldr	r2, [pc, #336]	@ (8004ca0 <HAL_DMA_IRQHandler+0x430>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x2ee>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a52      	ldr	r2, [pc, #328]	@ (8004ca4 <HAL_DMA_IRQHandler+0x434>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10a      	bne.n	8004b74 <HAL_DMA_IRQHandler+0x304>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e003      	b.n	8004b7c <HAL_DMA_IRQHandler+0x30c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2201      	movs	r2, #1
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	f043 0202 	orr.w	r2, r3, #2
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 808f 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c68 <HAL_DMA_IRQHandler+0x3f8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c6c <HAL_DMA_IRQHandler+0x3fc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a29      	ldr	r2, [pc, #164]	@ (8004c70 <HAL_DMA_IRQHandler+0x400>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	@ (8004c74 <HAL_DMA_IRQHandler+0x404>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a26      	ldr	r2, [pc, #152]	@ (8004c78 <HAL_DMA_IRQHandler+0x408>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a24      	ldr	r2, [pc, #144]	@ (8004c7c <HAL_DMA_IRQHandler+0x40c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a23      	ldr	r2, [pc, #140]	@ (8004c80 <HAL_DMA_IRQHandler+0x410>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a21      	ldr	r2, [pc, #132]	@ (8004c84 <HAL_DMA_IRQHandler+0x414>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a20      	ldr	r2, [pc, #128]	@ (8004c88 <HAL_DMA_IRQHandler+0x418>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1e      	ldr	r2, [pc, #120]	@ (8004c8c <HAL_DMA_IRQHandler+0x41c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c90 <HAL_DMA_IRQHandler+0x420>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1b      	ldr	r2, [pc, #108]	@ (8004c94 <HAL_DMA_IRQHandler+0x424>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c98 <HAL_DMA_IRQHandler+0x428>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <HAL_DMA_IRQHandler+0x42c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <HAL_DMA_IRQHandler+0x430>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x3e2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <HAL_DMA_IRQHandler+0x434>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d12a      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x438>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e023      	b.n	8004cb0 <HAL_DMA_IRQHandler+0x440>
 8004c68:	40020010 	.word	0x40020010
 8004c6c:	40020028 	.word	0x40020028
 8004c70:	40020040 	.word	0x40020040
 8004c74:	40020058 	.word	0x40020058
 8004c78:	40020070 	.word	0x40020070
 8004c7c:	40020088 	.word	0x40020088
 8004c80:	400200a0 	.word	0x400200a0
 8004c84:	400200b8 	.word	0x400200b8
 8004c88:	40020410 	.word	0x40020410
 8004c8c:	40020428 	.word	0x40020428
 8004c90:	40020440 	.word	0x40020440
 8004c94:	40020458 	.word	0x40020458
 8004c98:	40020470 	.word	0x40020470
 8004c9c:	40020488 	.word	0x40020488
 8004ca0:	400204a0 	.word	0x400204a0
 8004ca4:	400204b8 	.word	0x400204b8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	f043 0204 	orr.w	r2, r3, #4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2210      	movs	r2, #16
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80a6 	beq.w	8004e32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a85      	ldr	r2, [pc, #532]	@ (8004f00 <HAL_DMA_IRQHandler+0x690>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d04a      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a83      	ldr	r2, [pc, #524]	@ (8004f04 <HAL_DMA_IRQHandler+0x694>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d045      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a82      	ldr	r2, [pc, #520]	@ (8004f08 <HAL_DMA_IRQHandler+0x698>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d040      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a80      	ldr	r2, [pc, #512]	@ (8004f0c <HAL_DMA_IRQHandler+0x69c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d03b      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7f      	ldr	r2, [pc, #508]	@ (8004f10 <HAL_DMA_IRQHandler+0x6a0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d036      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a7d      	ldr	r2, [pc, #500]	@ (8004f14 <HAL_DMA_IRQHandler+0x6a4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d031      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7c      	ldr	r2, [pc, #496]	@ (8004f18 <HAL_DMA_IRQHandler+0x6a8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d02c      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a7a      	ldr	r2, [pc, #488]	@ (8004f1c <HAL_DMA_IRQHandler+0x6ac>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d027      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a79      	ldr	r2, [pc, #484]	@ (8004f20 <HAL_DMA_IRQHandler+0x6b0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d022      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a77      	ldr	r2, [pc, #476]	@ (8004f24 <HAL_DMA_IRQHandler+0x6b4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a76      	ldr	r2, [pc, #472]	@ (8004f28 <HAL_DMA_IRQHandler+0x6b8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d018      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a74      	ldr	r2, [pc, #464]	@ (8004f2c <HAL_DMA_IRQHandler+0x6bc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a73      	ldr	r2, [pc, #460]	@ (8004f30 <HAL_DMA_IRQHandler+0x6c0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a71      	ldr	r2, [pc, #452]	@ (8004f34 <HAL_DMA_IRQHandler+0x6c4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a70      	ldr	r2, [pc, #448]	@ (8004f38 <HAL_DMA_IRQHandler+0x6c8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x516>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a6e      	ldr	r2, [pc, #440]	@ (8004f3c <HAL_DMA_IRQHandler+0x6cc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d10a      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x52c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e009      	b.n	8004db0 <HAL_DMA_IRQHandler+0x540>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d03e      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2210      	movs	r2, #16
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d018      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d024      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
 8004df0:	e01f      	b.n	8004e32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
 8004e02:	e016      	b.n	8004e32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0208 	bic.w	r2, r2, #8
 8004e20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8110 	beq.w	8005068 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f00 <HAL_DMA_IRQHandler+0x690>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d04a      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2b      	ldr	r2, [pc, #172]	@ (8004f04 <HAL_DMA_IRQHandler+0x694>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d045      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a29      	ldr	r2, [pc, #164]	@ (8004f08 <HAL_DMA_IRQHandler+0x698>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d040      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a28      	ldr	r2, [pc, #160]	@ (8004f0c <HAL_DMA_IRQHandler+0x69c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d03b      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a26      	ldr	r2, [pc, #152]	@ (8004f10 <HAL_DMA_IRQHandler+0x6a0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d036      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a25      	ldr	r2, [pc, #148]	@ (8004f14 <HAL_DMA_IRQHandler+0x6a4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d031      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a23      	ldr	r2, [pc, #140]	@ (8004f18 <HAL_DMA_IRQHandler+0x6a8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02c      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <HAL_DMA_IRQHandler+0x6ac>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d027      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	@ (8004f20 <HAL_DMA_IRQHandler+0x6b0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f24 <HAL_DMA_IRQHandler+0x6b4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f28 <HAL_DMA_IRQHandler+0x6b8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1c      	ldr	r2, [pc, #112]	@ (8004f2c <HAL_DMA_IRQHandler+0x6bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f30 <HAL_DMA_IRQHandler+0x6c0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a19      	ldr	r2, [pc, #100]	@ (8004f34 <HAL_DMA_IRQHandler+0x6c4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <HAL_DMA_IRQHandler+0x6c8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x678>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	@ (8004f3c <HAL_DMA_IRQHandler+0x6cc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d12b      	bne.n	8004f40 <HAL_DMA_IRQHandler+0x6d0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bf14      	ite	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	2300      	moveq	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	e02a      	b.n	8004f54 <HAL_DMA_IRQHandler+0x6e4>
 8004efe:	bf00      	nop
 8004f00:	40020010 	.word	0x40020010
 8004f04:	40020028 	.word	0x40020028
 8004f08:	40020040 	.word	0x40020040
 8004f0c:	40020058 	.word	0x40020058
 8004f10:	40020070 	.word	0x40020070
 8004f14:	40020088 	.word	0x40020088
 8004f18:	400200a0 	.word	0x400200a0
 8004f1c:	400200b8 	.word	0x400200b8
 8004f20:	40020410 	.word	0x40020410
 8004f24:	40020428 	.word	0x40020428
 8004f28:	40020440 	.word	0x40020440
 8004f2c:	40020458 	.word	0x40020458
 8004f30:	40020470 	.word	0x40020470
 8004f34:	40020488 	.word	0x40020488
 8004f38:	400204a0 	.word	0x400204a0
 8004f3c:	400204b8 	.word	0x400204b8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8087 	beq.w	8005068 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2220      	movs	r2, #32
 8004f64:	409a      	lsls	r2, r3
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d139      	bne.n	8004fea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0216 	bic.w	r2, r2, #22
 8004f84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <HAL_DMA_IRQHandler+0x736>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0208 	bic.w	r2, r2, #8
 8004fb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	223f      	movs	r2, #63	@ 0x3f
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 834a 	beq.w	8005674 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	4798      	blx	r3
          }
          return;
 8004fe8:	e344      	b.n	8005674 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d018      	beq.n	800502a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d108      	bne.n	8005018 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	2b00      	cmp	r3, #0
 800500c:	d02c      	beq.n	8005068 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
 8005016:	e027      	b.n	8005068 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d023      	beq.n	8005068 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	e01e      	b.n	8005068 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10f      	bne.n	8005058 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0210 	bic.w	r2, r2, #16
 8005046:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8306 	beq.w	800567e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8088 	beq.w	8005190 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2204      	movs	r2, #4
 8005084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a7a      	ldr	r2, [pc, #488]	@ (8005278 <HAL_DMA_IRQHandler+0xa08>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d04a      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a79      	ldr	r2, [pc, #484]	@ (800527c <HAL_DMA_IRQHandler+0xa0c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d045      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a77      	ldr	r2, [pc, #476]	@ (8005280 <HAL_DMA_IRQHandler+0xa10>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d040      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a76      	ldr	r2, [pc, #472]	@ (8005284 <HAL_DMA_IRQHandler+0xa14>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d03b      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a74      	ldr	r2, [pc, #464]	@ (8005288 <HAL_DMA_IRQHandler+0xa18>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d036      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a73      	ldr	r2, [pc, #460]	@ (800528c <HAL_DMA_IRQHandler+0xa1c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d031      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a71      	ldr	r2, [pc, #452]	@ (8005290 <HAL_DMA_IRQHandler+0xa20>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d02c      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a70      	ldr	r2, [pc, #448]	@ (8005294 <HAL_DMA_IRQHandler+0xa24>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d027      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005298 <HAL_DMA_IRQHandler+0xa28>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d022      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6d      	ldr	r2, [pc, #436]	@ (800529c <HAL_DMA_IRQHandler+0xa2c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d01d      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6b      	ldr	r2, [pc, #428]	@ (80052a0 <HAL_DMA_IRQHandler+0xa30>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a6a      	ldr	r2, [pc, #424]	@ (80052a4 <HAL_DMA_IRQHandler+0xa34>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a68      	ldr	r2, [pc, #416]	@ (80052a8 <HAL_DMA_IRQHandler+0xa38>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a67      	ldr	r2, [pc, #412]	@ (80052ac <HAL_DMA_IRQHandler+0xa3c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a65      	ldr	r2, [pc, #404]	@ (80052b0 <HAL_DMA_IRQHandler+0xa40>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_DMA_IRQHandler+0x8b8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a64      	ldr	r2, [pc, #400]	@ (80052b4 <HAL_DMA_IRQHandler+0xa44>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <HAL_DMA_IRQHandler+0x8ca>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e007      	b.n	800514a <HAL_DMA_IRQHandler+0x8da>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3301      	adds	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005152:	429a      	cmp	r2, r3
 8005154:	d307      	bcc.n	8005166 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f2      	bne.n	800514a <HAL_DMA_IRQHandler+0x8da>
 8005164:	e000      	b.n	8005168 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005166:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2203      	movs	r2, #3
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800517e:	e003      	b.n	8005188 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8272 	beq.w	800567e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
 80051a2:	e26c      	b.n	800567e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a43      	ldr	r2, [pc, #268]	@ (80052b8 <HAL_DMA_IRQHandler+0xa48>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x984>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a42      	ldr	r2, [pc, #264]	@ (80052bc <HAL_DMA_IRQHandler+0xa4c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x984>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a40      	ldr	r2, [pc, #256]	@ (80052c0 <HAL_DMA_IRQHandler+0xa50>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x984>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a3f      	ldr	r2, [pc, #252]	@ (80052c4 <HAL_DMA_IRQHandler+0xa54>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x984>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a3d      	ldr	r2, [pc, #244]	@ (80052c8 <HAL_DMA_IRQHandler+0xa58>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x984>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3c      	ldr	r2, [pc, #240]	@ (80052cc <HAL_DMA_IRQHandler+0xa5c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x984>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3a      	ldr	r2, [pc, #232]	@ (80052d0 <HAL_DMA_IRQHandler+0xa60>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x984>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a39      	ldr	r2, [pc, #228]	@ (80052d4 <HAL_DMA_IRQHandler+0xa64>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d101      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x988>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <HAL_DMA_IRQHandler+0x98a>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 823f 	beq.w	800567e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2204      	movs	r2, #4
 8005212:	409a      	lsls	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80cd 	beq.w	80053b8 <HAL_DMA_IRQHandler+0xb48>
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80c7 	beq.w	80053b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2204      	movs	r2, #4
 8005234:	409a      	lsls	r2, r3
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d049      	beq.n	80052d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8210 	beq.w	8005678 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005260:	e20a      	b.n	8005678 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8206 	beq.w	8005678 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005274:	e200      	b.n	8005678 <HAL_DMA_IRQHandler+0xe08>
 8005276:	bf00      	nop
 8005278:	40020010 	.word	0x40020010
 800527c:	40020028 	.word	0x40020028
 8005280:	40020040 	.word	0x40020040
 8005284:	40020058 	.word	0x40020058
 8005288:	40020070 	.word	0x40020070
 800528c:	40020088 	.word	0x40020088
 8005290:	400200a0 	.word	0x400200a0
 8005294:	400200b8 	.word	0x400200b8
 8005298:	40020410 	.word	0x40020410
 800529c:	40020428 	.word	0x40020428
 80052a0:	40020440 	.word	0x40020440
 80052a4:	40020458 	.word	0x40020458
 80052a8:	40020470 	.word	0x40020470
 80052ac:	40020488 	.word	0x40020488
 80052b0:	400204a0 	.word	0x400204a0
 80052b4:	400204b8 	.word	0x400204b8
 80052b8:	58025408 	.word	0x58025408
 80052bc:	5802541c 	.word	0x5802541c
 80052c0:	58025430 	.word	0x58025430
 80052c4:	58025444 	.word	0x58025444
 80052c8:	58025458 	.word	0x58025458
 80052cc:	5802546c 	.word	0x5802546c
 80052d0:	58025480 	.word	0x58025480
 80052d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d160      	bne.n	80053a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a7f      	ldr	r2, [pc, #508]	@ (80054e4 <HAL_DMA_IRQHandler+0xc74>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d04a      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a7d      	ldr	r2, [pc, #500]	@ (80054e8 <HAL_DMA_IRQHandler+0xc78>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d045      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a7c      	ldr	r2, [pc, #496]	@ (80054ec <HAL_DMA_IRQHandler+0xc7c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d040      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a7a      	ldr	r2, [pc, #488]	@ (80054f0 <HAL_DMA_IRQHandler+0xc80>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d03b      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a79      	ldr	r2, [pc, #484]	@ (80054f4 <HAL_DMA_IRQHandler+0xc84>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d036      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a77      	ldr	r2, [pc, #476]	@ (80054f8 <HAL_DMA_IRQHandler+0xc88>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d031      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a76      	ldr	r2, [pc, #472]	@ (80054fc <HAL_DMA_IRQHandler+0xc8c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d02c      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a74      	ldr	r2, [pc, #464]	@ (8005500 <HAL_DMA_IRQHandler+0xc90>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d027      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a73      	ldr	r2, [pc, #460]	@ (8005504 <HAL_DMA_IRQHandler+0xc94>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d022      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a71      	ldr	r2, [pc, #452]	@ (8005508 <HAL_DMA_IRQHandler+0xc98>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01d      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a70      	ldr	r2, [pc, #448]	@ (800550c <HAL_DMA_IRQHandler+0xc9c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d018      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a6e      	ldr	r2, [pc, #440]	@ (8005510 <HAL_DMA_IRQHandler+0xca0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a6d      	ldr	r2, [pc, #436]	@ (8005514 <HAL_DMA_IRQHandler+0xca4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00e      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a6b      	ldr	r2, [pc, #428]	@ (8005518 <HAL_DMA_IRQHandler+0xca8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d009      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a6a      	ldr	r2, [pc, #424]	@ (800551c <HAL_DMA_IRQHandler+0xcac>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_DMA_IRQHandler+0xb12>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a68      	ldr	r2, [pc, #416]	@ (8005520 <HAL_DMA_IRQHandler+0xcb0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d108      	bne.n	8005394 <HAL_DMA_IRQHandler+0xb24>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0208 	bic.w	r2, r2, #8
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e007      	b.n	80053a4 <HAL_DMA_IRQHandler+0xb34>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8165 	beq.w	8005678 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053b6:	e15f      	b.n	8005678 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2202      	movs	r2, #2
 80053c2:	409a      	lsls	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80c5 	beq.w	8005558 <HAL_DMA_IRQHandler+0xce8>
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80bf 	beq.w	8005558 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2202      	movs	r2, #2
 80053e4:	409a      	lsls	r2, r3
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d018      	beq.n	8005426 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 813a 	beq.w	800567c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005410:	e134      	b.n	800567c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8130 	beq.w	800567c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005424:	e12a      	b.n	800567c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	f040 8089 	bne.w	8005544 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2b      	ldr	r2, [pc, #172]	@ (80054e4 <HAL_DMA_IRQHandler+0xc74>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d04a      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a29      	ldr	r2, [pc, #164]	@ (80054e8 <HAL_DMA_IRQHandler+0xc78>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d045      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a28      	ldr	r2, [pc, #160]	@ (80054ec <HAL_DMA_IRQHandler+0xc7c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d040      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a26      	ldr	r2, [pc, #152]	@ (80054f0 <HAL_DMA_IRQHandler+0xc80>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d03b      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a25      	ldr	r2, [pc, #148]	@ (80054f4 <HAL_DMA_IRQHandler+0xc84>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d036      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a23      	ldr	r2, [pc, #140]	@ (80054f8 <HAL_DMA_IRQHandler+0xc88>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d031      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a22      	ldr	r2, [pc, #136]	@ (80054fc <HAL_DMA_IRQHandler+0xc8c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d02c      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a20      	ldr	r2, [pc, #128]	@ (8005500 <HAL_DMA_IRQHandler+0xc90>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d027      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1f      	ldr	r2, [pc, #124]	@ (8005504 <HAL_DMA_IRQHandler+0xc94>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d022      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <HAL_DMA_IRQHandler+0xc98>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01d      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1c      	ldr	r2, [pc, #112]	@ (800550c <HAL_DMA_IRQHandler+0xc9c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d018      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005510 <HAL_DMA_IRQHandler+0xca0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <HAL_DMA_IRQHandler+0xca4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a17      	ldr	r2, [pc, #92]	@ (8005518 <HAL_DMA_IRQHandler+0xca8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d009      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a16      	ldr	r2, [pc, #88]	@ (800551c <HAL_DMA_IRQHandler+0xcac>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_DMA_IRQHandler+0xc62>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a14      	ldr	r2, [pc, #80]	@ (8005520 <HAL_DMA_IRQHandler+0xcb0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d128      	bne.n	8005524 <HAL_DMA_IRQHandler+0xcb4>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0214 	bic.w	r2, r2, #20
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e027      	b.n	8005534 <HAL_DMA_IRQHandler+0xcc4>
 80054e4:	40020010 	.word	0x40020010
 80054e8:	40020028 	.word	0x40020028
 80054ec:	40020040 	.word	0x40020040
 80054f0:	40020058 	.word	0x40020058
 80054f4:	40020070 	.word	0x40020070
 80054f8:	40020088 	.word	0x40020088
 80054fc:	400200a0 	.word	0x400200a0
 8005500:	400200b8 	.word	0x400200b8
 8005504:	40020410 	.word	0x40020410
 8005508:	40020428 	.word	0x40020428
 800550c:	40020440 	.word	0x40020440
 8005510:	40020458 	.word	0x40020458
 8005514:	40020470 	.word	0x40020470
 8005518:	40020488 	.word	0x40020488
 800551c:	400204a0 	.word	0x400204a0
 8005520:	400204b8 	.word	0x400204b8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 020a 	bic.w	r2, r2, #10
 8005532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8097 	beq.w	800567c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005556:	e091      	b.n	800567c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2208      	movs	r2, #8
 8005562:	409a      	lsls	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8088 	beq.w	800567e <HAL_DMA_IRQHandler+0xe0e>
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8082 	beq.w	800567e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a41      	ldr	r2, [pc, #260]	@ (8005684 <HAL_DMA_IRQHandler+0xe14>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04a      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3f      	ldr	r2, [pc, #252]	@ (8005688 <HAL_DMA_IRQHandler+0xe18>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d045      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a3e      	ldr	r2, [pc, #248]	@ (800568c <HAL_DMA_IRQHandler+0xe1c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d040      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a3c      	ldr	r2, [pc, #240]	@ (8005690 <HAL_DMA_IRQHandler+0xe20>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d03b      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005694 <HAL_DMA_IRQHandler+0xe24>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d036      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a39      	ldr	r2, [pc, #228]	@ (8005698 <HAL_DMA_IRQHandler+0xe28>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d031      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a38      	ldr	r2, [pc, #224]	@ (800569c <HAL_DMA_IRQHandler+0xe2c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d02c      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a36      	ldr	r2, [pc, #216]	@ (80056a0 <HAL_DMA_IRQHandler+0xe30>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d027      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a35      	ldr	r2, [pc, #212]	@ (80056a4 <HAL_DMA_IRQHandler+0xe34>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a33      	ldr	r2, [pc, #204]	@ (80056a8 <HAL_DMA_IRQHandler+0xe38>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01d      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a32      	ldr	r2, [pc, #200]	@ (80056ac <HAL_DMA_IRQHandler+0xe3c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a30      	ldr	r2, [pc, #192]	@ (80056b0 <HAL_DMA_IRQHandler+0xe40>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2f      	ldr	r2, [pc, #188]	@ (80056b4 <HAL_DMA_IRQHandler+0xe44>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a2d      	ldr	r2, [pc, #180]	@ (80056b8 <HAL_DMA_IRQHandler+0xe48>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2c      	ldr	r2, [pc, #176]	@ (80056bc <HAL_DMA_IRQHandler+0xe4c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_DMA_IRQHandler+0xdaa>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2a      	ldr	r2, [pc, #168]	@ (80056c0 <HAL_DMA_IRQHandler+0xe50>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <HAL_DMA_IRQHandler+0xdbc>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 021c 	bic.w	r2, r2, #28
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e007      	b.n	800563c <HAL_DMA_IRQHandler+0xdcc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 020e 	bic.w	r2, r2, #14
 800563a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	2201      	movs	r2, #1
 8005646:	409a      	lsls	r2, r3
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
 8005672:	e004      	b.n	800567e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005674:	bf00      	nop
 8005676:	e002      	b.n	800567e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005678:	bf00      	nop
 800567a:	e000      	b.n	800567e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800567c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800567e:	3728      	adds	r7, #40	@ 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40020010 	.word	0x40020010
 8005688:	40020028 	.word	0x40020028
 800568c:	40020040 	.word	0x40020040
 8005690:	40020058 	.word	0x40020058
 8005694:	40020070 	.word	0x40020070
 8005698:	40020088 	.word	0x40020088
 800569c:	400200a0 	.word	0x400200a0
 80056a0:	400200b8 	.word	0x400200b8
 80056a4:	40020410 	.word	0x40020410
 80056a8:	40020428 	.word	0x40020428
 80056ac:	40020440 	.word	0x40020440
 80056b0:	40020458 	.word	0x40020458
 80056b4:	40020470 	.word	0x40020470
 80056b8:	40020488 	.word	0x40020488
 80056bc:	400204a0 	.word	0x400204a0
 80056c0:	400204b8 	.word	0x400204b8

080056c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a7f      	ldr	r2, [pc, #508]	@ (80058e0 <DMA_SetConfig+0x21c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d072      	beq.n	80057ce <DMA_SetConfig+0x10a>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a7d      	ldr	r2, [pc, #500]	@ (80058e4 <DMA_SetConfig+0x220>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d06d      	beq.n	80057ce <DMA_SetConfig+0x10a>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a7c      	ldr	r2, [pc, #496]	@ (80058e8 <DMA_SetConfig+0x224>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d068      	beq.n	80057ce <DMA_SetConfig+0x10a>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a7a      	ldr	r2, [pc, #488]	@ (80058ec <DMA_SetConfig+0x228>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d063      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a79      	ldr	r2, [pc, #484]	@ (80058f0 <DMA_SetConfig+0x22c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d05e      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a77      	ldr	r2, [pc, #476]	@ (80058f4 <DMA_SetConfig+0x230>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d059      	beq.n	80057ce <DMA_SetConfig+0x10a>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a76      	ldr	r2, [pc, #472]	@ (80058f8 <DMA_SetConfig+0x234>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d054      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a74      	ldr	r2, [pc, #464]	@ (80058fc <DMA_SetConfig+0x238>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d04f      	beq.n	80057ce <DMA_SetConfig+0x10a>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	@ (8005900 <DMA_SetConfig+0x23c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d04a      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a71      	ldr	r2, [pc, #452]	@ (8005904 <DMA_SetConfig+0x240>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d045      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a70      	ldr	r2, [pc, #448]	@ (8005908 <DMA_SetConfig+0x244>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d040      	beq.n	80057ce <DMA_SetConfig+0x10a>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a6e      	ldr	r2, [pc, #440]	@ (800590c <DMA_SetConfig+0x248>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d03b      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a6d      	ldr	r2, [pc, #436]	@ (8005910 <DMA_SetConfig+0x24c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d036      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a6b      	ldr	r2, [pc, #428]	@ (8005914 <DMA_SetConfig+0x250>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d031      	beq.n	80057ce <DMA_SetConfig+0x10a>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a6a      	ldr	r2, [pc, #424]	@ (8005918 <DMA_SetConfig+0x254>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d02c      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a68      	ldr	r2, [pc, #416]	@ (800591c <DMA_SetConfig+0x258>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d027      	beq.n	80057ce <DMA_SetConfig+0x10a>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a67      	ldr	r2, [pc, #412]	@ (8005920 <DMA_SetConfig+0x25c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a65      	ldr	r2, [pc, #404]	@ (8005924 <DMA_SetConfig+0x260>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <DMA_SetConfig+0x10a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a64      	ldr	r2, [pc, #400]	@ (8005928 <DMA_SetConfig+0x264>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <DMA_SetConfig+0x10a>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a62      	ldr	r2, [pc, #392]	@ (800592c <DMA_SetConfig+0x268>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <DMA_SetConfig+0x10a>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a61      	ldr	r2, [pc, #388]	@ (8005930 <DMA_SetConfig+0x26c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <DMA_SetConfig+0x10a>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005934 <DMA_SetConfig+0x270>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <DMA_SetConfig+0x10a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a5e      	ldr	r2, [pc, #376]	@ (8005938 <DMA_SetConfig+0x274>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <DMA_SetConfig+0x10a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a5c      	ldr	r2, [pc, #368]	@ (800593c <DMA_SetConfig+0x278>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <DMA_SetConfig+0x10e>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <DMA_SetConfig+0x110>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80057e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a39      	ldr	r2, [pc, #228]	@ (80058e0 <DMA_SetConfig+0x21c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d04a      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a38      	ldr	r2, [pc, #224]	@ (80058e4 <DMA_SetConfig+0x220>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d045      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a36      	ldr	r2, [pc, #216]	@ (80058e8 <DMA_SetConfig+0x224>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d040      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a35      	ldr	r2, [pc, #212]	@ (80058ec <DMA_SetConfig+0x228>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d03b      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a33      	ldr	r2, [pc, #204]	@ (80058f0 <DMA_SetConfig+0x22c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d036      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a32      	ldr	r2, [pc, #200]	@ (80058f4 <DMA_SetConfig+0x230>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d031      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a30      	ldr	r2, [pc, #192]	@ (80058f8 <DMA_SetConfig+0x234>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d02c      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2f      	ldr	r2, [pc, #188]	@ (80058fc <DMA_SetConfig+0x238>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d027      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2d      	ldr	r2, [pc, #180]	@ (8005900 <DMA_SetConfig+0x23c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a2c      	ldr	r2, [pc, #176]	@ (8005904 <DMA_SetConfig+0x240>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01d      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2a      	ldr	r2, [pc, #168]	@ (8005908 <DMA_SetConfig+0x244>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a29      	ldr	r2, [pc, #164]	@ (800590c <DMA_SetConfig+0x248>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a27      	ldr	r2, [pc, #156]	@ (8005910 <DMA_SetConfig+0x24c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a26      	ldr	r2, [pc, #152]	@ (8005914 <DMA_SetConfig+0x250>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a24      	ldr	r2, [pc, #144]	@ (8005918 <DMA_SetConfig+0x254>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <DMA_SetConfig+0x1d0>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a23      	ldr	r2, [pc, #140]	@ (800591c <DMA_SetConfig+0x258>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d101      	bne.n	8005898 <DMA_SetConfig+0x1d4>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <DMA_SetConfig+0x1d6>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d059      	beq.n	8005952 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	223f      	movs	r2, #63	@ 0x3f
 80058a8:	409a      	lsls	r2, r3
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80058bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b40      	cmp	r3, #64	@ 0x40
 80058cc:	d138      	bne.n	8005940 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058de:	e086      	b.n	80059ee <DMA_SetConfig+0x32a>
 80058e0:	40020010 	.word	0x40020010
 80058e4:	40020028 	.word	0x40020028
 80058e8:	40020040 	.word	0x40020040
 80058ec:	40020058 	.word	0x40020058
 80058f0:	40020070 	.word	0x40020070
 80058f4:	40020088 	.word	0x40020088
 80058f8:	400200a0 	.word	0x400200a0
 80058fc:	400200b8 	.word	0x400200b8
 8005900:	40020410 	.word	0x40020410
 8005904:	40020428 	.word	0x40020428
 8005908:	40020440 	.word	0x40020440
 800590c:	40020458 	.word	0x40020458
 8005910:	40020470 	.word	0x40020470
 8005914:	40020488 	.word	0x40020488
 8005918:	400204a0 	.word	0x400204a0
 800591c:	400204b8 	.word	0x400204b8
 8005920:	58025408 	.word	0x58025408
 8005924:	5802541c 	.word	0x5802541c
 8005928:	58025430 	.word	0x58025430
 800592c:	58025444 	.word	0x58025444
 8005930:	58025458 	.word	0x58025458
 8005934:	5802546c 	.word	0x5802546c
 8005938:	58025480 	.word	0x58025480
 800593c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
}
 8005950:	e04d      	b.n	80059ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <DMA_SetConfig+0x338>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d022      	beq.n	80059a2 <DMA_SetConfig+0x2de>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <DMA_SetConfig+0x33c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01d      	beq.n	80059a2 <DMA_SetConfig+0x2de>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <DMA_SetConfig+0x340>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <DMA_SetConfig+0x2de>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a24      	ldr	r2, [pc, #144]	@ (8005a08 <DMA_SetConfig+0x344>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <DMA_SetConfig+0x2de>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a23      	ldr	r2, [pc, #140]	@ (8005a0c <DMA_SetConfig+0x348>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <DMA_SetConfig+0x2de>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a21      	ldr	r2, [pc, #132]	@ (8005a10 <DMA_SetConfig+0x34c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <DMA_SetConfig+0x2de>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a20      	ldr	r2, [pc, #128]	@ (8005a14 <DMA_SetConfig+0x350>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <DMA_SetConfig+0x2de>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a18 <DMA_SetConfig+0x354>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <DMA_SetConfig+0x2e2>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <DMA_SetConfig+0x2e4>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d108      	bne.n	80059de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	60da      	str	r2, [r3, #12]
}
 80059dc:	e007      	b.n	80059ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	58025408 	.word	0x58025408
 8005a00:	5802541c 	.word	0x5802541c
 8005a04:	58025430 	.word	0x58025430
 8005a08:	58025444 	.word	0x58025444
 8005a0c:	58025458 	.word	0x58025458
 8005a10:	5802546c 	.word	0x5802546c
 8005a14:	58025480 	.word	0x58025480
 8005a18:	58025494 	.word	0x58025494

08005a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a42      	ldr	r2, [pc, #264]	@ (8005b34 <DMA_CalcBaseAndBitshift+0x118>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d04a      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a41      	ldr	r2, [pc, #260]	@ (8005b38 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d045      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b3c <DMA_CalcBaseAndBitshift+0x120>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d040      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3e      	ldr	r2, [pc, #248]	@ (8005b40 <DMA_CalcBaseAndBitshift+0x124>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d03b      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a3c      	ldr	r2, [pc, #240]	@ (8005b44 <DMA_CalcBaseAndBitshift+0x128>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d036      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b48 <DMA_CalcBaseAndBitshift+0x12c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d031      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a39      	ldr	r2, [pc, #228]	@ (8005b4c <DMA_CalcBaseAndBitshift+0x130>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02c      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a38      	ldr	r2, [pc, #224]	@ (8005b50 <DMA_CalcBaseAndBitshift+0x134>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d027      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a36      	ldr	r2, [pc, #216]	@ (8005b54 <DMA_CalcBaseAndBitshift+0x138>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d022      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a35      	ldr	r2, [pc, #212]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d01d      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a33      	ldr	r2, [pc, #204]	@ (8005b5c <DMA_CalcBaseAndBitshift+0x140>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d018      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a32      	ldr	r2, [pc, #200]	@ (8005b60 <DMA_CalcBaseAndBitshift+0x144>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d013      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a30      	ldr	r2, [pc, #192]	@ (8005b64 <DMA_CalcBaseAndBitshift+0x148>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8005b68 <DMA_CalcBaseAndBitshift+0x14c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d009      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b6c <DMA_CalcBaseAndBitshift+0x150>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2c      	ldr	r2, [pc, #176]	@ (8005b70 <DMA_CalcBaseAndBitshift+0x154>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d101      	bne.n	8005ac8 <DMA_CalcBaseAndBitshift+0xac>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <DMA_CalcBaseAndBitshift+0xae>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d024      	beq.n	8005b18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	3b10      	subs	r3, #16
 8005ad6:	4a27      	ldr	r2, [pc, #156]	@ (8005b74 <DMA_CalcBaseAndBitshift+0x158>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	4a24      	ldr	r2, [pc, #144]	@ (8005b78 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ae8:	5cd3      	ldrb	r3, [r2, r3]
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d908      	bls.n	8005b08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b7c <DMA_CalcBaseAndBitshift+0x160>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b06:	e00d      	b.n	8005b24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b7c <DMA_CalcBaseAndBitshift+0x160>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b16:	e005      	b.n	8005b24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40020010 	.word	0x40020010
 8005b38:	40020028 	.word	0x40020028
 8005b3c:	40020040 	.word	0x40020040
 8005b40:	40020058 	.word	0x40020058
 8005b44:	40020070 	.word	0x40020070
 8005b48:	40020088 	.word	0x40020088
 8005b4c:	400200a0 	.word	0x400200a0
 8005b50:	400200b8 	.word	0x400200b8
 8005b54:	40020410 	.word	0x40020410
 8005b58:	40020428 	.word	0x40020428
 8005b5c:	40020440 	.word	0x40020440
 8005b60:	40020458 	.word	0x40020458
 8005b64:	40020470 	.word	0x40020470
 8005b68:	40020488 	.word	0x40020488
 8005b6c:	400204a0 	.word	0x400204a0
 8005b70:	400204b8 	.word	0x400204b8
 8005b74:	aaaaaaab 	.word	0xaaaaaaab
 8005b78:	08015354 	.word	0x08015354
 8005b7c:	fffffc00 	.word	0xfffffc00

08005b80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d120      	bne.n	8005bd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d858      	bhi.n	8005c4e <DMA_CheckFifoParam+0xce>
 8005b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <DMA_CheckFifoParam+0x24>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005bb5 	.word	0x08005bb5
 8005ba8:	08005bc7 	.word	0x08005bc7
 8005bac:	08005bb5 	.word	0x08005bb5
 8005bb0:	08005c4f 	.word	0x08005c4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d048      	beq.n	8005c52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bc4:	e045      	b.n	8005c52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bce:	d142      	bne.n	8005c56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bd4:	e03f      	b.n	8005c56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bde:	d123      	bne.n	8005c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d838      	bhi.n	8005c5a <DMA_CheckFifoParam+0xda>
 8005be8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf0 <DMA_CheckFifoParam+0x70>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c07 	.word	0x08005c07
 8005bf8:	08005c01 	.word	0x08005c01
 8005bfc:	08005c19 	.word	0x08005c19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
        break;
 8005c04:	e030      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d025      	beq.n	8005c5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c16:	e022      	b.n	8005c5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c20:	d11f      	bne.n	8005c62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c26:	e01c      	b.n	8005c62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d902      	bls.n	8005c36 <DMA_CheckFifoParam+0xb6>
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d003      	beq.n	8005c3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c34:	e018      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
        break;
 8005c3a:	e015      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8005c4c:	e00b      	b.n	8005c66 <DMA_CheckFifoParam+0xe6>
        break;
 8005c4e:	bf00      	nop
 8005c50:	e00a      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
        break;
 8005c52:	bf00      	nop
 8005c54:	e008      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
        break;
 8005c56:	bf00      	nop
 8005c58:	e006      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
        break;
 8005c5a:	bf00      	nop
 8005c5c:	e004      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e002      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
        break;
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <DMA_CheckFifoParam+0xe8>
    break;
 8005c66:	bf00      	nop
    }
  }

  return status;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop

08005c78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a38      	ldr	r2, [pc, #224]	@ (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d022      	beq.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a36      	ldr	r2, [pc, #216]	@ (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01d      	beq.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a35      	ldr	r2, [pc, #212]	@ (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d018      	beq.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a33      	ldr	r2, [pc, #204]	@ (8005d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a32      	ldr	r2, [pc, #200]	@ (8005d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00e      	beq.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a30      	ldr	r2, [pc, #192]	@ (8005d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d009      	beq.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8005d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d004      	beq.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d101      	bne.n	8005cda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01a      	beq.n	8005d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	3b08      	subs	r3, #8
 8005ce8:	4a28      	ldr	r2, [pc, #160]	@ (8005d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005cea:	fba2 2303 	umull	r2, r3, r2, r3
 8005cee:	091b      	lsrs	r3, r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4b26      	ldr	r3, [pc, #152]	@ (8005d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a24      	ldr	r2, [pc, #144]	@ (8005d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005d04:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	409a      	lsls	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005d14:	e024      	b.n	8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	3b10      	subs	r3, #16
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d806      	bhi.n	8005d3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4a1b      	ldr	r2, [pc, #108]	@ (8005da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d902      	bls.n	8005d3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4b18      	ldr	r3, [pc, #96]	@ (8005da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	461a      	mov	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a16      	ldr	r2, [pc, #88]	@ (8005da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d50:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	2201      	movs	r2, #1
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	58025408 	.word	0x58025408
 8005d70:	5802541c 	.word	0x5802541c
 8005d74:	58025430 	.word	0x58025430
 8005d78:	58025444 	.word	0x58025444
 8005d7c:	58025458 	.word	0x58025458
 8005d80:	5802546c 	.word	0x5802546c
 8005d84:	58025480 	.word	0x58025480
 8005d88:	58025494 	.word	0x58025494
 8005d8c:	cccccccd 	.word	0xcccccccd
 8005d90:	16009600 	.word	0x16009600
 8005d94:	58025880 	.word	0x58025880
 8005d98:	aaaaaaab 	.word	0xaaaaaaab
 8005d9c:	400204b8 	.word	0x400204b8
 8005da0:	4002040f 	.word	0x4002040f
 8005da4:	10008200 	.word	0x10008200
 8005da8:	40020880 	.word	0x40020880

08005dac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d04a      	beq.n	8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d847      	bhi.n	8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	@ (8005e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a24      	ldr	r2, [pc, #144]	@ (8005e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a22      	ldr	r2, [pc, #136]	@ (8005e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a21      	ldr	r2, [pc, #132]	@ (8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1c      	ldr	r2, [pc, #112]	@ (8005e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1b      	ldr	r2, [pc, #108]	@ (8005e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4b17      	ldr	r3, [pc, #92]	@ (8005e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e34:	671a      	str	r2, [r3, #112]	@ 0x70
 8005e36:	e009      	b.n	8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4b14      	ldr	r3, [pc, #80]	@ (8005e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	461a      	mov	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a11      	ldr	r2, [pc, #68]	@ (8005e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	2201      	movs	r2, #1
 8005e52:	409a      	lsls	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	58025408 	.word	0x58025408
 8005e68:	5802541c 	.word	0x5802541c
 8005e6c:	58025430 	.word	0x58025430
 8005e70:	58025444 	.word	0x58025444
 8005e74:	58025458 	.word	0x58025458
 8005e78:	5802546c 	.word	0x5802546c
 8005e7c:	58025480 	.word	0x58025480
 8005e80:	58025494 	.word	0x58025494
 8005e84:	1600963f 	.word	0x1600963f
 8005e88:	58025940 	.word	0x58025940
 8005e8c:	1000823f 	.word	0x1000823f
 8005e90:	40020940 	.word	0x40020940

08005e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b089      	sub	sp, #36	@ 0x24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ea2:	4b89      	ldr	r3, [pc, #548]	@ (80060c8 <HAL_GPIO_Init+0x234>)
 8005ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ea6:	e194      	b.n	80061d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	2101      	movs	r1, #1
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8186 	beq.w	80061cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d005      	beq.n	8005ed8 <HAL_GPIO_Init+0x44>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d130      	bne.n	8005f3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f0e:	2201      	movs	r2, #1
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	43db      	mvns	r3, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	f003 0201 	and.w	r2, r3, #1
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d017      	beq.n	8005f76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	2203      	movs	r2, #3
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d123      	bne.n	8005fca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	08da      	lsrs	r2, r3, #3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3208      	adds	r2, #8
 8005f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	220f      	movs	r2, #15
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	08da      	lsrs	r2, r3, #3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3208      	adds	r2, #8
 8005fc4:	69b9      	ldr	r1, [r7, #24]
 8005fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f003 0203 	and.w	r2, r3, #3
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80e0 	beq.w	80061cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800600c:	4b2f      	ldr	r3, [pc, #188]	@ (80060cc <HAL_GPIO_Init+0x238>)
 800600e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006012:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <HAL_GPIO_Init+0x238>)
 8006014:	f043 0302 	orr.w	r3, r3, #2
 8006018:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800601c:	4b2b      	ldr	r3, [pc, #172]	@ (80060cc <HAL_GPIO_Init+0x238>)
 800601e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800602a:	4a29      	ldr	r2, [pc, #164]	@ (80060d0 <HAL_GPIO_Init+0x23c>)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	089b      	lsrs	r3, r3, #2
 8006030:	3302      	adds	r3, #2
 8006032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	220f      	movs	r2, #15
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43db      	mvns	r3, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4013      	ands	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a20      	ldr	r2, [pc, #128]	@ (80060d4 <HAL_GPIO_Init+0x240>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d052      	beq.n	80060fc <HAL_GPIO_Init+0x268>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1f      	ldr	r2, [pc, #124]	@ (80060d8 <HAL_GPIO_Init+0x244>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d031      	beq.n	80060c2 <HAL_GPIO_Init+0x22e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1e      	ldr	r2, [pc, #120]	@ (80060dc <HAL_GPIO_Init+0x248>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d02b      	beq.n	80060be <HAL_GPIO_Init+0x22a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1d      	ldr	r2, [pc, #116]	@ (80060e0 <HAL_GPIO_Init+0x24c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d025      	beq.n	80060ba <HAL_GPIO_Init+0x226>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1c      	ldr	r2, [pc, #112]	@ (80060e4 <HAL_GPIO_Init+0x250>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <HAL_GPIO_Init+0x222>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1b      	ldr	r2, [pc, #108]	@ (80060e8 <HAL_GPIO_Init+0x254>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d019      	beq.n	80060b2 <HAL_GPIO_Init+0x21e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1a      	ldr	r2, [pc, #104]	@ (80060ec <HAL_GPIO_Init+0x258>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_GPIO_Init+0x21a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a19      	ldr	r2, [pc, #100]	@ (80060f0 <HAL_GPIO_Init+0x25c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00d      	beq.n	80060aa <HAL_GPIO_Init+0x216>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a18      	ldr	r2, [pc, #96]	@ (80060f4 <HAL_GPIO_Init+0x260>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <HAL_GPIO_Init+0x212>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a17      	ldr	r2, [pc, #92]	@ (80060f8 <HAL_GPIO_Init+0x264>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d101      	bne.n	80060a2 <HAL_GPIO_Init+0x20e>
 800609e:	2309      	movs	r3, #9
 80060a0:	e02d      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060a2:	230a      	movs	r3, #10
 80060a4:	e02b      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060a6:	2308      	movs	r3, #8
 80060a8:	e029      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060aa:	2307      	movs	r3, #7
 80060ac:	e027      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060ae:	2306      	movs	r3, #6
 80060b0:	e025      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060b2:	2305      	movs	r3, #5
 80060b4:	e023      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060b6:	2304      	movs	r3, #4
 80060b8:	e021      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060ba:	2303      	movs	r3, #3
 80060bc:	e01f      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060be:	2302      	movs	r3, #2
 80060c0:	e01d      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e01b      	b.n	80060fe <HAL_GPIO_Init+0x26a>
 80060c6:	bf00      	nop
 80060c8:	58000080 	.word	0x58000080
 80060cc:	58024400 	.word	0x58024400
 80060d0:	58000400 	.word	0x58000400
 80060d4:	58020000 	.word	0x58020000
 80060d8:	58020400 	.word	0x58020400
 80060dc:	58020800 	.word	0x58020800
 80060e0:	58020c00 	.word	0x58020c00
 80060e4:	58021000 	.word	0x58021000
 80060e8:	58021400 	.word	0x58021400
 80060ec:	58021800 	.word	0x58021800
 80060f0:	58021c00 	.word	0x58021c00
 80060f4:	58022000 	.word	0x58022000
 80060f8:	58022400 	.word	0x58022400
 80060fc:	2300      	movs	r3, #0
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	f002 0203 	and.w	r2, r2, #3
 8006104:	0092      	lsls	r2, r2, #2
 8006106:	4093      	lsls	r3, r2
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800610e:	4938      	ldr	r1, [pc, #224]	@ (80061f0 <HAL_GPIO_Init+0x35c>)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	089b      	lsrs	r3, r3, #2
 8006114:	3302      	adds	r3, #2
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800611c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006142:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800614a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006170:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	43db      	mvns	r3, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4013      	ands	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	43db      	mvns	r3, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4013      	ands	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	3301      	adds	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f47f ae63 	bne.w	8005ea8 <HAL_GPIO_Init+0x14>
  }
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	3724      	adds	r7, #36	@ 0x24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	58000400 	.word	0x58000400

080061f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]
 8006200:	4613      	mov	r3, r2
 8006202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006204:	787b      	ldrb	r3, [r7, #1]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800620a:	887a      	ldrh	r2, [r7, #2]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006210:	e003      	b.n	800621a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	041a      	lsls	r2, r3, #16
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	619a      	str	r2, [r3, #24]
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006238:	887a      	ldrh	r2, [r7, #2]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4013      	ands	r3, r2
 800623e:	041a      	lsls	r2, r3, #16
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	43d9      	mvns	r1, r3
 8006244:	887b      	ldrh	r3, [r7, #2]
 8006246:	400b      	ands	r3, r1
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	619a      	str	r2, [r3, #24]
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e07f      	b.n	800636e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fa fb72 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	@ 0x24
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80062ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d107      	bne.n	80062d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062d2:	609a      	str	r2, [r3, #8]
 80062d4:	e006      	b.n	80062e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80062e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d104      	bne.n	80062f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6859      	ldr	r1, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b1d      	ldr	r3, [pc, #116]	@ (8006378 <HAL_I2C_Init+0x11c>)
 8006302:	430b      	orrs	r3, r1
 8006304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	02008000 	.word	0x02008000

0800637c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	4608      	mov	r0, r1
 8006386:	4611      	mov	r1, r2
 8006388:	461a      	mov	r2, r3
 800638a:	4603      	mov	r3, r0
 800638c:	817b      	strh	r3, [r7, #10]
 800638e:	460b      	mov	r3, r1
 8006390:	813b      	strh	r3, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b20      	cmp	r3, #32
 80063a0:	f040 80f9 	bne.w	8006596 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_I2C_Mem_Write+0x34>
 80063aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d105      	bne.n	80063bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0ed      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_I2C_Mem_Write+0x4e>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e0e6      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063d2:	f7fb fca1 	bl	8001d18 <HAL_GetTick>
 80063d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	2319      	movs	r3, #25
 80063de:	2201      	movs	r2, #1
 80063e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f955 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0d1      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2221      	movs	r2, #33	@ 0x21
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2240      	movs	r2, #64	@ 0x40
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006414:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800641c:	88f8      	ldrh	r0, [r7, #6]
 800641e:	893a      	ldrh	r2, [r7, #8]
 8006420:	8979      	ldrh	r1, [r7, #10]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4603      	mov	r3, r0
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f8b9 	bl	80065a4 <I2C_RequestMemoryWrite>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0a9      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	2bff      	cmp	r3, #255	@ 0xff
 800644c:	d90e      	bls.n	800646c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	22ff      	movs	r2, #255	@ 0xff
 8006452:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006458:	b2da      	uxtb	r2, r3
 800645a:	8979      	ldrh	r1, [r7, #10]
 800645c:	2300      	movs	r3, #0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 facf 	bl	8006a08 <I2C_TransferConfig>
 800646a:	e00f      	b.n	800648c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647a:	b2da      	uxtb	r2, r3
 800647c:	8979      	ldrh	r1, [r7, #10]
 800647e:	2300      	movs	r3, #0
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fabe 	bl	8006a08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f94e 	bl	8006732 <I2C_WaitOnTXISFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e07b      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d034      	beq.n	8006544 <HAL_I2C_Mem_Write+0x1c8>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d130      	bne.n	8006544 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	2200      	movs	r2, #0
 80064ea:	2180      	movs	r1, #128	@ 0x80
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f8d1 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e04d      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2bff      	cmp	r3, #255	@ 0xff
 8006504:	d90e      	bls.n	8006524 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	22ff      	movs	r2, #255	@ 0xff
 800650a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006510:	b2da      	uxtb	r2, r3
 8006512:	8979      	ldrh	r1, [r7, #10]
 8006514:	2300      	movs	r3, #0
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fa73 	bl	8006a08 <I2C_TransferConfig>
 8006522:	e00f      	b.n	8006544 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006532:	b2da      	uxtb	r2, r3
 8006534:	8979      	ldrh	r1, [r7, #10]
 8006536:	2300      	movs	r3, #0
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fa62 	bl	8006a08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d19e      	bne.n	800648c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f934 	bl	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e01a      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2220      	movs	r2, #32
 8006568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6859      	ldr	r1, [r3, #4]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <HAL_I2C_Mem_Write+0x224>)
 8006576:	400b      	ands	r3, r1
 8006578:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e000      	b.n	8006598 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006596:	2302      	movs	r3, #2
  }
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	fe00e800 	.word	0xfe00e800

080065a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	817b      	strh	r3, [r7, #10]
 80065b6:	460b      	mov	r3, r1
 80065b8:	813b      	strh	r3, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	8979      	ldrh	r1, [r7, #10]
 80065c4:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <I2C_RequestMemoryWrite+0xa4>)
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fa1b 	bl	8006a08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f8ab 	bl	8006732 <I2C_WaitOnTXISFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e02c      	b.n	8006640 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d105      	bne.n	80065f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065ec:	893b      	ldrh	r3, [r7, #8]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80065f6:	e015      	b.n	8006624 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065f8:	893b      	ldrh	r3, [r7, #8]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	69b9      	ldr	r1, [r7, #24]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f891 	bl	8006732 <I2C_WaitOnTXISFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e012      	b.n	8006640 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800661a:	893b      	ldrh	r3, [r7, #8]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2200      	movs	r2, #0
 800662c:	2180      	movs	r1, #128	@ 0x80
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f830 	bl	8006694 <I2C_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	80002000 	.word	0x80002000

0800664c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b02      	cmp	r3, #2
 8006660:	d103      	bne.n	800666a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2200      	movs	r2, #0
 8006668:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d007      	beq.n	8006688 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	619a      	str	r2, [r3, #24]
  }
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a4:	e031      	b.n	800670a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d02d      	beq.n	800670a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ae:	f7fb fb33 	bl	8001d18 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d302      	bcc.n	80066c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d122      	bne.n	800670a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d113      	bne.n	800670a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e00f      	b.n	800672a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4013      	ands	r3, r2
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	bf0c      	ite	eq
 800671a:	2301      	moveq	r3, #1
 800671c:	2300      	movne	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d0be      	beq.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800673e:	e033      	b.n	80067a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f87f 	bl	8006848 <I2C_IsErrorOccurred>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e031      	b.n	80067b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	d025      	beq.n	80067a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675c:	f7fb fadc 	bl	8001d18 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	d302      	bcc.n	8006772 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d11a      	bne.n	80067a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b02      	cmp	r3, #2
 800677e:	d013      	beq.n	80067a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006784:	f043 0220 	orr.w	r2, r3, #32
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e007      	b.n	80067b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d1c4      	bne.n	8006740 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067cc:	e02f      	b.n	800682e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f838 	bl	8006848 <I2C_IsErrorOccurred>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e02d      	b.n	800683e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fb fa99 	bl	8001d18 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d11a      	bne.n	800682e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b20      	cmp	r3, #32
 8006804:	d013      	beq.n	800682e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680a:	f043 0220 	orr.w	r2, r3, #32
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e007      	b.n	800683e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b20      	cmp	r3, #32
 800683a:	d1c8      	bne.n	80067ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	@ 0x28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d068      	beq.n	8006946 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2210      	movs	r2, #16
 800687a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800687c:	e049      	b.n	8006912 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d045      	beq.n	8006912 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006886:	f7fb fa47 	bl	8001d18 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <I2C_IsErrorOccurred+0x54>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d13a      	bne.n	8006912 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068be:	d121      	bne.n	8006904 <I2C_IsErrorOccurred+0xbc>
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068c6:	d01d      	beq.n	8006904 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068c8:	7cfb      	ldrb	r3, [r7, #19]
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d01a      	beq.n	8006904 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068de:	f7fb fa1b 	bl	8001d18 <HAL_GetTick>
 80068e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068e4:	e00e      	b.n	8006904 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068e6:	f7fb fa17 	bl	8001d18 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b19      	cmp	r3, #25
 80068f2:	d907      	bls.n	8006904 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	f043 0320 	orr.w	r3, r3, #32
 80068fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006902:	e006      	b.n	8006912 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b20      	cmp	r3, #32
 8006910:	d1e9      	bne.n	80068e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b20      	cmp	r3, #32
 800691e:	d003      	beq.n	8006928 <I2C_IsErrorOccurred+0xe0>
 8006920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0aa      	beq.n	800687e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800692c:	2b00      	cmp	r3, #0
 800692e:	d103      	bne.n	8006938 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2220      	movs	r2, #32
 8006936:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	f043 0304 	orr.w	r3, r3, #4
 800693e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006968:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f043 0308 	orr.w	r3, r3, #8
 8006980:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800698a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f043 0302 	orr.w	r3, r3, #2
 80069a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80069b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01c      	beq.n	80069f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff fe45 	bl	800664c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <I2C_IsErrorOccurred+0x1bc>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	431a      	orrs	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80069f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3728      	adds	r7, #40	@ 0x28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	fe00e800 	.word	0xfe00e800

08006a08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	817b      	strh	r3, [r7, #10]
 8006a16:	4613      	mov	r3, r2
 8006a18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a1a:	897b      	ldrh	r3, [r7, #10]
 8006a1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a20:	7a7b      	ldrb	r3, [r7, #9]
 8006a22:	041b      	lsls	r3, r3, #16
 8006a24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	0d5b      	lsrs	r3, r3, #21
 8006a42:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006a46:	4b08      	ldr	r3, [pc, #32]	@ (8006a68 <I2C_TransferConfig+0x60>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	ea02 0103 	and.w	r1, r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	03ff63ff 	.word	0x03ff63ff

08006a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d138      	bne.n	8006af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e032      	b.n	8006af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	@ 0x24
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d139      	bne.n	8006b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d101      	bne.n	8006b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b22:	2302      	movs	r3, #2
 8006b24:	e033      	b.n	8006b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	@ 0x24
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e000      	b.n	8006b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b9c:	b08f      	sub	sp, #60	@ 0x3c
 8006b9e:	af0a      	add	r7, sp, #40	@ 0x28
 8006ba0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e116      	b.n	8006dda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f00b f8b4 	bl	8011d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f007 f803 	bl	800dbf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	603b      	str	r3, [r7, #0]
 8006bf6:	687e      	ldr	r6, [r7, #4]
 8006bf8:	466d      	mov	r5, sp
 8006bfa:	f106 0410 	add.w	r4, r6, #16
 8006bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c0e:	1d33      	adds	r3, r6, #4
 8006c10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c12:	6838      	ldr	r0, [r7, #0]
 8006c14:	f006 fece 	bl	800d9b4 <USB_CoreInit>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e0d7      	b.n	8006dda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f006 fff1 	bl	800dc18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
 8006c3a:	e04a      	b.n	8006cd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c3c:	7bfa      	ldrb	r2, [r7, #15]
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	333d      	adds	r3, #61	@ 0x3d
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c50:	7bfa      	ldrb	r2, [r7, #15]
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	333c      	adds	r3, #60	@ 0x3c
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c64:	7bfa      	ldrb	r2, [r7, #15]
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	b298      	uxth	r0, r3
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3356      	adds	r3, #86	@ 0x56
 8006c78:	4602      	mov	r2, r0
 8006c7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c7c:	7bfa      	ldrb	r2, [r7, #15]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	3340      	adds	r3, #64	@ 0x40
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c90:	7bfa      	ldrb	r2, [r7, #15]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3344      	adds	r3, #68	@ 0x44
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ca4:	7bfa      	ldrb	r2, [r7, #15]
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3348      	adds	r3, #72	@ 0x48
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cb8:	7bfa      	ldrb	r2, [r7, #15]
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	334c      	adds	r3, #76	@ 0x4c
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
 8006cd2:	7bfa      	ldrb	r2, [r7, #15]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3af      	bcc.n	8006c3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
 8006ce0:	e044      	b.n	8006d6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ce2:	7bfa      	ldrb	r2, [r7, #15]
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cf8:	7bfa      	ldrb	r2, [r7, #15]
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8006d0a:	7bfa      	ldrb	r2, [r7, #15]
 8006d0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d0e:	7bfa      	ldrb	r2, [r7, #15]
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d3a:	7bfa      	ldrb	r2, [r7, #15]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d50:	7bfa      	ldrb	r2, [r7, #15]
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
 8006d6c:	7bfa      	ldrb	r2, [r7, #15]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d3b5      	bcc.n	8006ce2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	687e      	ldr	r6, [r7, #4]
 8006d7e:	466d      	mov	r5, sp
 8006d80:	f106 0410 	add.w	r4, r6, #16
 8006d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d90:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d94:	1d33      	adds	r3, r6, #4
 8006d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d98:	6838      	ldr	r0, [r7, #0]
 8006d9a:	f006 ff89 	bl	800dcb0 <USB_DevInit>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e014      	b.n	8006dda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d102      	bne.n	8006dce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f96f 	bl	80080ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f007 ffcb 	bl	800ed6e <USB_DevDisconnect>

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006de2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_PCD_Start+0x1c>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e022      	b.n	8006e44 <HAL_PCD_Start+0x62>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d105      	bne.n	8006e26 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f006 fed2 	bl	800dbd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f007 ff79 	bl	800ed2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b08d      	sub	sp, #52	@ 0x34
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f008 f837 	bl	800eed6 <USB_GetMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 84b7 	bne.w	80077de <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f007 ff9b 	bl	800edb0 <USB_ReadInterrupts>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 84ad 	beq.w	80077dc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f007 ff88 	bl	800edb0 <USB_ReadInterrupts>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d107      	bne.n	8006eba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f002 0202 	and.w	r2, r2, #2
 8006eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f007 ff76 	bl	800edb0 <USB_ReadInterrupts>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d161      	bne.n	8006f92 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0210 	bic.w	r2, r2, #16
 8006edc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	f003 020f 	and.w	r2, r3, #15
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	3304      	adds	r3, #4
 8006efc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	0c5b      	lsrs	r3, r3, #17
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d124      	bne.n	8006f54 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d035      	beq.n	8006f82 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	6a38      	ldr	r0, [r7, #32]
 8006f2a:	f007 fdad 	bl	800ea88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f3a:	441a      	add	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	091b      	lsrs	r3, r3, #4
 8006f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f4c:	441a      	add	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	615a      	str	r2, [r3, #20]
 8006f52:	e016      	b.n	8006f82 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	0c5b      	lsrs	r3, r3, #17
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	2b06      	cmp	r3, #6
 8006f5e:	d110      	bne.n	8006f82 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006f66:	2208      	movs	r2, #8
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6a38      	ldr	r0, [r7, #32]
 8006f6c:	f007 fd8c 	bl	800ea88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f7c:	441a      	add	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0210 	orr.w	r2, r2, #16
 8006f90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f007 ff0a 	bl	800edb0 <USB_ReadInterrupts>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fa2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fa6:	f040 80a7 	bne.w	80070f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f007 ff0f 	bl	800edd6 <USB_ReadDevAllOutEpInterrupt>
 8006fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006fba:	e099      	b.n	80070f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 808e 	beq.w	80070e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f007 ff33 	bl	800ee3e <USB_ReadDevOutEPInterrupt>
 8006fd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fed1 	bl	8007da0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	2308      	movs	r3, #8
 8007018:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800701a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 ffa7 	bl	8007f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	d008      	beq.n	800703e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007038:	461a      	mov	r2, r3
 800703a:	2310      	movs	r3, #16
 800703c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d030      	beq.n	80070aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007050:	2b80      	cmp	r3, #128	@ 0x80
 8007052:	d109      	bne.n	8007068 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007066:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706a:	4613      	mov	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	3304      	adds	r3, #4
 800707c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	78db      	ldrb	r3, [r3, #3]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d108      	bne.n	8007098 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2200      	movs	r2, #0
 800708a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	b2db      	uxtb	r3, r3
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f00a ff74 	bl	8011f80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	2302      	movs	r3, #2
 80070a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c0:	461a      	mov	r2, r3
 80070c2:	2320      	movs	r3, #32
 80070c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070dc:	461a      	mov	r2, r3
 80070de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	3301      	adds	r3, #1
 80070e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f47f af62 	bne.w	8006fbc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f007 fe57 	bl	800edb0 <USB_ReadInterrupts>
 8007102:	4603      	mov	r3, r0
 8007104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007108:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800710c:	f040 80db 	bne.w	80072c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f007 fe78 	bl	800ee0a <USB_ReadDevAllInEpInterrupt>
 800711a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007120:	e0cd      	b.n	80072be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80c2 	beq.w	80072b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	4611      	mov	r1, r2
 8007138:	4618      	mov	r0, r3
 800713a:	f007 fe9e 	bl	800ee7a <USB_ReadDevInEPInterrupt>
 800713e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d057      	beq.n	80071fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2201      	movs	r2, #1
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	43db      	mvns	r3, r3
 8007164:	69f9      	ldr	r1, [r7, #28]
 8007166:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800716a:	4013      	ands	r3, r2
 800716c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717a:	461a      	mov	r2, r3
 800717c:	2301      	movs	r3, #1
 800717e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d132      	bne.n	80071ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718c:	4613      	mov	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	3348      	adds	r3, #72	@ 0x48
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719e:	4613      	mov	r3, r2
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4403      	add	r3, r0
 80071a8:	3344      	adds	r3, #68	@ 0x44
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4419      	add	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b2:	4613      	mov	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4403      	add	r3, r0
 80071bc:	3348      	adds	r3, #72	@ 0x48
 80071be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d113      	bne.n	80071ee <HAL_PCD_IRQHandler+0x3a2>
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ca:	4613      	mov	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	334c      	adds	r3, #76	@ 0x4c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d108      	bne.n	80071ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80071e6:	461a      	mov	r2, r3
 80071e8:	2101      	movs	r1, #1
 80071ea:	f007 fea7 	bl	800ef3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f00a fe3e 	bl	8011e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007210:	461a      	mov	r2, r3
 8007212:	2308      	movs	r3, #8
 8007214:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722c:	461a      	mov	r2, r3
 800722e:	2310      	movs	r3, #16
 8007230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007248:	461a      	mov	r2, r3
 800724a:	2340      	movs	r3, #64	@ 0x40
 800724c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d023      	beq.n	80072a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800725a:	6a38      	ldr	r0, [r7, #32]
 800725c:	f006 fe86 	bl	800df6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007262:	4613      	mov	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	3338      	adds	r3, #56	@ 0x38
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	3304      	adds	r3, #4
 8007272:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	78db      	ldrb	r3, [r3, #3]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d108      	bne.n	800728e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	b2db      	uxtb	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f00a fe8b 	bl	8011fa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800729a:	461a      	mov	r2, r3
 800729c:	2302      	movs	r3, #2
 800729e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80072aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fcea 	bl	8007c86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	3301      	adds	r3, #1
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80072be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f47f af2e 	bne.w	8007122 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f007 fd70 	bl	800edb0 <USB_ReadInterrupts>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072da:	d122      	bne.n	8007322 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ea:	f023 0301 	bic.w	r3, r3, #1
 80072ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d108      	bne.n	800730c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007302:	2100      	movs	r1, #0
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fef5 	bl	80080f4 <HAL_PCDEx_LPM_Callback>
 800730a:	e002      	b.n	8007312 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f00a fe29 	bl	8011f64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f007 fd42 	bl	800edb0 <USB_ReadInterrupts>
 800732c:	4603      	mov	r3, r0
 800732e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007336:	d112      	bne.n	800735e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b01      	cmp	r3, #1
 8007346:	d102      	bne.n	800734e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f00a fde5 	bl	8011f18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800735c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f007 fd24 	bl	800edb0 <USB_ReadInterrupts>
 8007368:	4603      	mov	r3, r0
 800736a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800736e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007372:	d121      	bne.n	80073b8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695a      	ldr	r2, [r3, #20]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007382:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d111      	bne.n	80073b2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800739c:	089b      	lsrs	r3, r3, #2
 800739e:	f003 020f 	and.w	r2, r3, #15
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80073a8:	2101      	movs	r1, #1
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fea2 	bl	80080f4 <HAL_PCDEx_LPM_Callback>
 80073b0:	e002      	b.n	80073b8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f00a fdb0 	bl	8011f18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f007 fcf7 	bl	800edb0 <USB_ReadInterrupts>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073cc:	f040 80b7 	bne.w	800753e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2110      	movs	r1, #16
 80073ea:	4618      	mov	r0, r3
 80073ec:	f006 fdbe 	bl	800df6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073f0:	2300      	movs	r3, #0
 80073f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073f4:	e046      	b.n	8007484 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007402:	461a      	mov	r2, r3
 8007404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007408:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007424:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007428:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800742a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007436:	461a      	mov	r2, r3
 8007438:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800743c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800743e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007458:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800745c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800745e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007478:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800747c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800747e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007480:	3301      	adds	r3, #1
 8007482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800748a:	429a      	cmp	r2, r3
 800748c:	d3b3      	bcc.n	80073f6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800749c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80074a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074ba:	f043 030b 	orr.w	r3, r3, #11
 80074be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074d0:	f043 030b 	orr.w	r3, r3, #11
 80074d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80074d6:	e015      	b.n	8007504 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e6:	4619      	mov	r1, r3
 80074e8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80074ec:	4313      	orrs	r3, r2
 80074ee:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074fe:	f043 030b 	orr.w	r3, r3, #11
 8007502:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007512:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007516:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007528:	461a      	mov	r2, r3
 800752a:	f007 fd07 	bl	800ef3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695a      	ldr	r2, [r3, #20]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800753c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f007 fc34 	bl	800edb0 <USB_ReadInterrupts>
 8007548:	4603      	mov	r3, r0
 800754a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800754e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007552:	d124      	bne.n	800759e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f007 fccb 	bl	800eef4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f006 fd7f 	bl	800e066 <USB_GetDevSpeed>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681c      	ldr	r4, [r3, #0]
 8007574:	f001 fd9e 	bl	80090b4 <HAL_RCC_GetHCLKFreq>
 8007578:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800757e:	b2db      	uxtb	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	4620      	mov	r0, r4
 8007584:	f006 fa84 	bl	800da90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f00a fc9c 	bl	8011ec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695a      	ldr	r2, [r3, #20]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800759c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f007 fc04 	bl	800edb0 <USB_ReadInterrupts>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f003 0308 	and.w	r3, r3, #8
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d10a      	bne.n	80075c8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f00a fc79 	bl	8011eaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f002 0208 	and.w	r2, r2, #8
 80075c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f007 fbef 	bl	800edb0 <USB_ReadInterrupts>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d8:	2b80      	cmp	r3, #128	@ 0x80
 80075da:	d122      	bne.n	8007622 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075e8:	2301      	movs	r3, #1
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ec:	e014      	b.n	8007618 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d105      	bne.n	8007612 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	b2db      	uxtb	r3, r3
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb09 	bl	8007c24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	3301      	adds	r3, #1
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761e:	429a      	cmp	r2, r3
 8007620:	d3e5      	bcc.n	80075ee <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f007 fbc2 	bl	800edb0 <USB_ReadInterrupts>
 800762c:	4603      	mov	r3, r0
 800762e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007636:	d13b      	bne.n	80076b0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007638:	2301      	movs	r3, #1
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
 800763c:	e02b      	b.n	8007696 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	3340      	adds	r3, #64	@ 0x40
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d115      	bne.n	8007690 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007664:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007666:	2b00      	cmp	r3, #0
 8007668:	da12      	bge.n	8007690 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800766e:	4613      	mov	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	333f      	adds	r3, #63	@ 0x3f
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 faca 	bl	8007c24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	3301      	adds	r3, #1
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800769c:	429a      	cmp	r2, r3
 800769e:	d3ce      	bcc.n	800763e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80076ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f007 fb7b 	bl	800edb0 <USB_ReadInterrupts>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076c4:	d155      	bne.n	8007772 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076c6:	2301      	movs	r3, #1
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ca:	e045      	b.n	8007758 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e0:	4613      	mov	r3, r2
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	440b      	add	r3, r1
 80076ea:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d12e      	bne.n	8007752 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	da2b      	bge.n	8007752 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007706:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800770a:	429a      	cmp	r2, r3
 800770c:	d121      	bne.n	8007752 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007712:	4613      	mov	r3, r2
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007720:	2201      	movs	r2, #1
 8007722:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800774a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800774e:	6053      	str	r3, [r2, #4]
            break;
 8007750:	e007      	b.n	8007762 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	3301      	adds	r3, #1
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775e:	429a      	cmp	r2, r3
 8007760:	d3b4      	bcc.n	80076cc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695a      	ldr	r2, [r3, #20]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f007 fb1a 	bl	800edb0 <USB_ReadInterrupts>
 800777c:	4603      	mov	r3, r0
 800777e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007786:	d10a      	bne.n	800779e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f00a fc1d 	bl	8011fc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695a      	ldr	r2, [r3, #20]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800779c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f007 fb04 	bl	800edb0 <USB_ReadInterrupts>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d115      	bne.n	80077de <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f00a fc0d 	bl	8011fe4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6859      	ldr	r1, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	e000      	b.n	80077de <HAL_PCD_IRQHandler+0x992>
      return;
 80077dc:	bf00      	nop
    }
  }
}
 80077de:	3734      	adds	r7, #52	@ 0x34
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd90      	pop	{r4, r7, pc}

080077e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_PCD_SetAddress+0x1a>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e013      	b.n	8007826 <HAL_PCD_SetAddress+0x42>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	4611      	mov	r1, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f007 fa62 	bl	800ece0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	4608      	mov	r0, r1
 8007838:	4611      	mov	r1, r2
 800783a:	461a      	mov	r2, r3
 800783c:	4603      	mov	r3, r0
 800783e:	70fb      	strb	r3, [r7, #3]
 8007840:	460b      	mov	r3, r1
 8007842:	803b      	strh	r3, [r7, #0]
 8007844:	4613      	mov	r3, r2
 8007846:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800784c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007850:	2b00      	cmp	r3, #0
 8007852:	da0f      	bge.n	8007874 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	4613      	mov	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	3338      	adds	r3, #56	@ 0x38
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	4413      	add	r3, r2
 8007868:	3304      	adds	r3, #4
 800786a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	705a      	strb	r2, [r3, #1]
 8007872:	e00f      	b.n	8007894 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	f003 020f 	and.w	r2, r3, #15
 800787a:	4613      	mov	r3, r2
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	3304      	adds	r3, #4
 800788c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	b2da      	uxtb	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80078a0:	883a      	ldrh	r2, [r7, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	78ba      	ldrb	r2, [r7, #2]
 80078aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80078be:	78bb      	ldrb	r3, [r7, #2]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d102      	bne.n	80078ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_PCD_EP_Open+0xaa>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e00e      	b.n	80078f6 <HAL_PCD_EP_Open+0xc8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68f9      	ldr	r1, [r7, #12]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f006 fbe2 	bl	800e0b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800790a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800790e:	2b00      	cmp	r3, #0
 8007910:	da0f      	bge.n	8007932 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	4613      	mov	r3, r2
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	3338      	adds	r3, #56	@ 0x38
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	3304      	adds	r3, #4
 8007928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	705a      	strb	r2, [r3, #1]
 8007930:	e00f      	b.n	8007952 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	f003 020f 	and.w	r2, r3, #15
 8007938:	4613      	mov	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4413      	add	r3, r2
 8007948:	3304      	adds	r3, #4
 800794a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_PCD_EP_Close+0x6e>
 8007968:	2302      	movs	r3, #2
 800796a:	e00e      	b.n	800798a <HAL_PCD_EP_Close+0x8c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68f9      	ldr	r1, [r7, #12]
 800797a:	4618      	mov	r0, r3
 800797c:	f006 fc20 	bl	800e1c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b086      	sub	sp, #24
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
 800799e:	460b      	mov	r3, r1
 80079a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079a2:	7afb      	ldrb	r3, [r7, #11]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	4613      	mov	r3, r2
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	3304      	adds	r3, #4
 80079ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2200      	movs	r2, #0
 80079cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2200      	movs	r2, #0
 80079d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d102      	bne.n	80079ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	461a      	mov	r2, r3
 80079fa:	6979      	ldr	r1, [r7, #20]
 80079fc:	f006 fcbc 	bl	800e378 <USB_EPStartXfer>

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8007a2c:	681b      	ldr	r3, [r3, #0]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
 8007a46:	460b      	mov	r3, r1
 8007a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	f003 020f 	and.w	r2, r3, #15
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	3338      	adds	r3, #56	@ 0x38
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3304      	adds	r3, #4
 8007a60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2201      	movs	r2, #1
 8007a78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d102      	bne.n	8007a94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6979      	ldr	r1, [r7, #20]
 8007aa2:	f006 fc69 	bl	800e378 <USB_EPStartXfer>

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	f003 020f 	and.w	r2, r3, #15
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d901      	bls.n	8007ace <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e050      	b.n	8007b70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	da0f      	bge.n	8007af6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	4613      	mov	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	3338      	adds	r3, #56	@ 0x38
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	4413      	add	r3, r2
 8007aea:	3304      	adds	r3, #4
 8007aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	705a      	strb	r2, [r3, #1]
 8007af4:	e00d      	b.n	8007b12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007af6:	78fa      	ldrb	r2, [r7, #3]
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	4413      	add	r3, r2
 8007b08:	3304      	adds	r3, #4
 8007b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_PCD_EP_SetStall+0x82>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e01e      	b.n	8007b70 <HAL_PCD_EP_SetStall+0xc0>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68f9      	ldr	r1, [r7, #12]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f006 fff9 	bl	800eb38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	b2d9      	uxtb	r1, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007b60:	461a      	mov	r2, r3
 8007b62:	f007 f9eb 	bl	800ef3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d901      	bls.n	8007b96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e042      	b.n	8007c1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da0f      	bge.n	8007bbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f003 020f 	and.w	r2, r3, #15
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	3338      	adds	r3, #56	@ 0x38
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	705a      	strb	r2, [r3, #1]
 8007bbc:	e00f      	b.n	8007bde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	f003 020f 	and.w	r2, r3, #15
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_PCD_EP_ClrStall+0x86>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e00e      	b.n	8007c1c <HAL_PCD_EP_ClrStall+0xa4>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f007 f801 	bl	800ec14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	da0c      	bge.n	8007c52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	f003 020f 	and.w	r2, r3, #15
 8007c3e:	4613      	mov	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	3338      	adds	r3, #56	@ 0x38
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	e00c      	b.n	8007c6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	f003 020f 	and.w	r2, r3, #15
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	3304      	adds	r3, #4
 8007c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68f9      	ldr	r1, [r7, #12]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f006 fe20 	bl	800e8b8 <USB_EPStopXfer>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b08a      	sub	sp, #40	@ 0x28
 8007c8a:	af02      	add	r7, sp, #8
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	3338      	adds	r3, #56	@ 0x38
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	3304      	adds	r3, #4
 8007cac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	695a      	ldr	r2, [r3, #20]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d901      	bls.n	8007cbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e06c      	b.n	8007d98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d902      	bls.n	8007cda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	3303      	adds	r3, #3
 8007cde:	089b      	lsrs	r3, r3, #2
 8007ce0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ce2:	e02b      	b.n	8007d3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691a      	ldr	r2, [r3, #16]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d902      	bls.n	8007d00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	3303      	adds	r3, #3
 8007d04:	089b      	lsrs	r3, r3, #2
 8007d06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68d9      	ldr	r1, [r3, #12]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	6978      	ldr	r0, [r7, #20]
 8007d20:	f006 fe74 	bl	800ea0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	695a      	ldr	r2, [r3, #20]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	441a      	add	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d809      	bhi.n	8007d66 <PCD_WriteEmptyTxFifo+0xe0>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d203      	bcs.n	8007d66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1be      	bne.n	8007ce4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d811      	bhi.n	8007d96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	2201      	movs	r2, #1
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	6939      	ldr	r1, [r7, #16]
 8007d8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d92:	4013      	ands	r3, r2
 8007d94:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	333c      	adds	r3, #60	@ 0x3c
 8007db8:	3304      	adds	r3, #4
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d17b      	bne.n	8007ece <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d015      	beq.n	8007e0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	4a61      	ldr	r2, [pc, #388]	@ (8007f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	f240 80b9 	bls.w	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80b3 	beq.w	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e02:	461a      	mov	r2, r3
 8007e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e08:	6093      	str	r3, [r2, #8]
 8007e0a:	e0a7      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e22:	461a      	mov	r2, r3
 8007e24:	2320      	movs	r3, #32
 8007e26:	6093      	str	r3, [r2, #8]
 8007e28:	e098      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f040 8093 	bne.w	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4a4b      	ldr	r2, [pc, #300]	@ (8007f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d90f      	bls.n	8007e5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e54:	461a      	mov	r2, r3
 8007e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e5a:	6093      	str	r3, [r2, #8]
 8007e5c:	e07e      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a1a      	ldr	r2, [r3, #32]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	0159      	lsls	r1, r3, #5
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	440b      	add	r3, r1
 8007e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d114      	bne.n	8007ec0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2101      	movs	r1, #1
 8007eac:	f007 f846 	bl	800ef3c <USB_EP0_OutStart>
 8007eb0:	e006      	b.n	8007ec0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	441a      	add	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f009 ffba 	bl	8011e40 <HAL_PCD_DataOutStageCallback>
 8007ecc:	e046      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	@ (8007f6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d124      	bne.n	8007f20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eec:	461a      	mov	r2, r3
 8007eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ef2:	6093      	str	r3, [r2, #8]
 8007ef4:	e032      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2320      	movs	r3, #32
 8007f10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f009 ff91 	bl	8011e40 <HAL_PCD_DataOutStageCallback>
 8007f1e:	e01d      	b.n	8007f5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d114      	bne.n	8007f50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f006 fff6 	bl	800ef3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f009 ff72 	bl	8011e40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	4f54300a 	.word	0x4f54300a
 8007f6c:	4f54310a 	.word	0x4f54310a

08007f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	333c      	adds	r3, #60	@ 0x3c
 8007f88:	3304      	adds	r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4a15      	ldr	r2, [pc, #84]	@ (8007ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d90e      	bls.n	8007fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f009 ff29 	bl	8011e1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d90c      	bls.n	8007fec <PCD_EP_OutSetupPacket_int+0x7c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d108      	bne.n	8007fec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	f006 ffa8 	bl	800ef3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	4f54300a 	.word	0x4f54300a

08007ffc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
 8008008:	4613      	mov	r3, r2
 800800a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d107      	bne.n	800802a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800801a:	883b      	ldrh	r3, [r7, #0]
 800801c:	0419      	lsls	r1, r3, #16
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	430a      	orrs	r2, r1
 8008026:	629a      	str	r2, [r3, #40]	@ 0x28
 8008028:	e028      	b.n	800807c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	4413      	add	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
 800803c:	e00d      	b.n	800805a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	3340      	adds	r3, #64	@ 0x40
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	0c1b      	lsrs	r3, r3, #16
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	3301      	adds	r3, #1
 8008058:	73fb      	strb	r3, [r7, #15]
 800805a:	7bfa      	ldrb	r2, [r7, #15]
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	3b01      	subs	r3, #1
 8008060:	429a      	cmp	r2, r3
 8008062:	d3ec      	bcc.n	800803e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008064:	883b      	ldrh	r3, [r7, #0]
 8008066:	0418      	lsls	r0, r3, #16
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6819      	ldr	r1, [r3, #0]
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	3b01      	subs	r3, #1
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4302      	orrs	r2, r0
 8008074:	3340      	adds	r3, #64	@ 0x40
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	887a      	ldrh	r2, [r7, #2]
 800809c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080da:	4b05      	ldr	r3, [pc, #20]	@ (80080f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	10000003 	.word	0x10000003

080080f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008114:	4b19      	ldr	r3, [pc, #100]	@ (800817c <HAL_PWREx_ConfigSupply+0x70>)
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b04      	cmp	r3, #4
 800811e:	d00a      	beq.n	8008136 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008120:	4b16      	ldr	r3, [pc, #88]	@ (800817c <HAL_PWREx_ConfigSupply+0x70>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d001      	beq.n	8008132 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e01f      	b.n	8008172 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	e01d      	b.n	8008172 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008136:	4b11      	ldr	r3, [pc, #68]	@ (800817c <HAL_PWREx_ConfigSupply+0x70>)
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f023 0207 	bic.w	r2, r3, #7
 800813e:	490f      	ldr	r1, [pc, #60]	@ (800817c <HAL_PWREx_ConfigSupply+0x70>)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4313      	orrs	r3, r2
 8008144:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008146:	f7f9 fde7 	bl	8001d18 <HAL_GetTick>
 800814a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800814c:	e009      	b.n	8008162 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800814e:	f7f9 fde3 	bl	8001d18 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800815c:	d901      	bls.n	8008162 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e007      	b.n	8008172 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008162:	4b06      	ldr	r3, [pc, #24]	@ (800817c <HAL_PWREx_ConfigSupply+0x70>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800816a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816e:	d1ee      	bne.n	800814e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	58024800 	.word	0x58024800

08008180 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	4a04      	ldr	r2, [pc, #16]	@ (800819c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800818a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800818e:	60d3      	str	r3, [r2, #12]
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	58024800 	.word	0x58024800

080081a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08c      	sub	sp, #48	@ 0x30
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f000 bc48 	b.w	8008a44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8088 	beq.w	80082d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081c2:	4b99      	ldr	r3, [pc, #612]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081cc:	4b96      	ldr	r3, [pc, #600]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80081ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	2b10      	cmp	r3, #16
 80081d6:	d007      	beq.n	80081e8 <HAL_RCC_OscConfig+0x48>
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	2b18      	cmp	r3, #24
 80081dc:	d111      	bne.n	8008202 <HAL_RCC_OscConfig+0x62>
 80081de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d10c      	bne.n	8008202 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081e8:	4b8f      	ldr	r3, [pc, #572]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d06d      	beq.n	80082d0 <HAL_RCC_OscConfig+0x130>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d169      	bne.n	80082d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f000 bc21 	b.w	8008a44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800820a:	d106      	bne.n	800821a <HAL_RCC_OscConfig+0x7a>
 800820c:	4b86      	ldr	r3, [pc, #536]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a85      	ldr	r2, [pc, #532]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e02e      	b.n	8008278 <HAL_RCC_OscConfig+0xd8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10c      	bne.n	800823c <HAL_RCC_OscConfig+0x9c>
 8008222:	4b81      	ldr	r3, [pc, #516]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a80      	ldr	r2, [pc, #512]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4b7e      	ldr	r3, [pc, #504]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a7d      	ldr	r2, [pc, #500]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	e01d      	b.n	8008278 <HAL_RCC_OscConfig+0xd8>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008244:	d10c      	bne.n	8008260 <HAL_RCC_OscConfig+0xc0>
 8008246:	4b78      	ldr	r3, [pc, #480]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a77      	ldr	r2, [pc, #476]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800824c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	4b75      	ldr	r3, [pc, #468]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a74      	ldr	r2, [pc, #464]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	e00b      	b.n	8008278 <HAL_RCC_OscConfig+0xd8>
 8008260:	4b71      	ldr	r3, [pc, #452]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a70      	ldr	r2, [pc, #448]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	4b6e      	ldr	r3, [pc, #440]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a6d      	ldr	r2, [pc, #436]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d013      	beq.n	80082a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008280:	f7f9 fd4a 	bl	8001d18 <HAL_GetTick>
 8008284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008288:	f7f9 fd46 	bl	8001d18 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b64      	cmp	r3, #100	@ 0x64
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e3d4      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800829a:	4b63      	ldr	r3, [pc, #396]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0f0      	beq.n	8008288 <HAL_RCC_OscConfig+0xe8>
 80082a6:	e014      	b.n	80082d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a8:	f7f9 fd36 	bl	8001d18 <HAL_GetTick>
 80082ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082b0:	f7f9 fd32 	bl	8001d18 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b64      	cmp	r3, #100	@ 0x64
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e3c0      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082c2:	4b59      	ldr	r3, [pc, #356]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1f0      	bne.n	80082b0 <HAL_RCC_OscConfig+0x110>
 80082ce:	e000      	b.n	80082d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80ca 	beq.w	8008474 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e0:	4b51      	ldr	r3, [pc, #324]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80082ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <HAL_RCC_OscConfig+0x166>
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	2b18      	cmp	r3, #24
 80082fa:	d156      	bne.n	80083aa <HAL_RCC_OscConfig+0x20a>
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d151      	bne.n	80083aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008306:	4b48      	ldr	r3, [pc, #288]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <HAL_RCC_OscConfig+0x17e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e392      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800831e:	4b42      	ldr	r3, [pc, #264]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f023 0219 	bic.w	r2, r3, #25
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	493f      	ldr	r1, [pc, #252]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800832c:	4313      	orrs	r3, r2
 800832e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008330:	f7f9 fcf2 	bl	8001d18 <HAL_GetTick>
 8008334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008338:	f7f9 fcee 	bl	8001d18 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b02      	cmp	r3, #2
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e37c      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800834a:	4b37      	ldr	r3, [pc, #220]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f0      	beq.n	8008338 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008356:	f7f9 fd0f 	bl	8001d78 <HAL_GetREVID>
 800835a:	4603      	mov	r3, r0
 800835c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008360:	4293      	cmp	r3, r2
 8008362:	d817      	bhi.n	8008394 <HAL_RCC_OscConfig+0x1f4>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2b40      	cmp	r3, #64	@ 0x40
 800836a:	d108      	bne.n	800837e <HAL_RCC_OscConfig+0x1de>
 800836c:	4b2e      	ldr	r3, [pc, #184]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008374:	4a2c      	ldr	r2, [pc, #176]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800837a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800837c:	e07a      	b.n	8008474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800837e:	4b2a      	ldr	r3, [pc, #168]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	031b      	lsls	r3, r3, #12
 800838c:	4926      	ldr	r1, [pc, #152]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800838e:	4313      	orrs	r3, r2
 8008390:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008392:	e06f      	b.n	8008474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008394:	4b24      	ldr	r3, [pc, #144]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	061b      	lsls	r3, r3, #24
 80083a2:	4921      	ldr	r1, [pc, #132]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a8:	e064      	b.n	8008474 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d047      	beq.n	8008442 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f023 0219 	bic.w	r2, r3, #25
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	491a      	ldr	r1, [pc, #104]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c4:	f7f9 fca8 	bl	8001d18 <HAL_GetTick>
 80083c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083cc:	f7f9 fca4 	bl	8001d18 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e332      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083de:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0f0      	beq.n	80083cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ea:	f7f9 fcc5 	bl	8001d78 <HAL_GetREVID>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d819      	bhi.n	800842c <HAL_RCC_OscConfig+0x28c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b40      	cmp	r3, #64	@ 0x40
 80083fe:	d108      	bne.n	8008412 <HAL_RCC_OscConfig+0x272>
 8008400:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008408:	4a07      	ldr	r2, [pc, #28]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 800840a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800840e:	6053      	str	r3, [r2, #4]
 8008410:	e030      	b.n	8008474 <HAL_RCC_OscConfig+0x2d4>
 8008412:	4b05      	ldr	r3, [pc, #20]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	031b      	lsls	r3, r3, #12
 8008420:	4901      	ldr	r1, [pc, #4]	@ (8008428 <HAL_RCC_OscConfig+0x288>)
 8008422:	4313      	orrs	r3, r2
 8008424:	604b      	str	r3, [r1, #4]
 8008426:	e025      	b.n	8008474 <HAL_RCC_OscConfig+0x2d4>
 8008428:	58024400 	.word	0x58024400
 800842c:	4b9a      	ldr	r3, [pc, #616]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	061b      	lsls	r3, r3, #24
 800843a:	4997      	ldr	r1, [pc, #604]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800843c:	4313      	orrs	r3, r2
 800843e:	604b      	str	r3, [r1, #4]
 8008440:	e018      	b.n	8008474 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008442:	4b95      	ldr	r3, [pc, #596]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a94      	ldr	r2, [pc, #592]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844e:	f7f9 fc63 	bl	8001d18 <HAL_GetTick>
 8008452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008456:	f7f9 fc5f 	bl	8001d18 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e2ed      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008468:	4b8b      	ldr	r3, [pc, #556]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 80a9 	beq.w	80085d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008482:	4b85      	ldr	r3, [pc, #532]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800848a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800848c:	4b82      	ldr	r3, [pc, #520]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800848e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008490:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	2b08      	cmp	r3, #8
 8008496:	d007      	beq.n	80084a8 <HAL_RCC_OscConfig+0x308>
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b18      	cmp	r3, #24
 800849c:	d13a      	bne.n	8008514 <HAL_RCC_OscConfig+0x374>
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d135      	bne.n	8008514 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084a8:	4b7b      	ldr	r3, [pc, #492]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <HAL_RCC_OscConfig+0x320>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	2b80      	cmp	r3, #128	@ 0x80
 80084ba:	d001      	beq.n	80084c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e2c1      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084c0:	f7f9 fc5a 	bl	8001d78 <HAL_GetREVID>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d817      	bhi.n	80084fe <HAL_RCC_OscConfig+0x35e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d108      	bne.n	80084e8 <HAL_RCC_OscConfig+0x348>
 80084d6:	4b70      	ldr	r3, [pc, #448]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80084de:	4a6e      	ldr	r2, [pc, #440]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80084e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084e6:	e075      	b.n	80085d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084e8:	4b6b      	ldr	r3, [pc, #428]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	069b      	lsls	r3, r3, #26
 80084f6:	4968      	ldr	r1, [pc, #416]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084fc:	e06a      	b.n	80085d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084fe:	4b66      	ldr	r3, [pc, #408]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	061b      	lsls	r3, r3, #24
 800850c:	4962      	ldr	r1, [pc, #392]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800850e:	4313      	orrs	r3, r2
 8008510:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008512:	e05f      	b.n	80085d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d042      	beq.n	80085a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800851c:	4b5e      	ldr	r3, [pc, #376]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a5d      	ldr	r2, [pc, #372]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008528:	f7f9 fbf6 	bl	8001d18 <HAL_GetTick>
 800852c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800852e:	e008      	b.n	8008542 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008530:	f7f9 fbf2 	bl	8001d18 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e280      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008542:	4b55      	ldr	r3, [pc, #340]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0f0      	beq.n	8008530 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800854e:	f7f9 fc13 	bl	8001d78 <HAL_GetREVID>
 8008552:	4603      	mov	r3, r0
 8008554:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008558:	4293      	cmp	r3, r2
 800855a:	d817      	bhi.n	800858c <HAL_RCC_OscConfig+0x3ec>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	2b20      	cmp	r3, #32
 8008562:	d108      	bne.n	8008576 <HAL_RCC_OscConfig+0x3d6>
 8008564:	4b4c      	ldr	r3, [pc, #304]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800856c:	4a4a      	ldr	r2, [pc, #296]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800856e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008572:	6053      	str	r3, [r2, #4]
 8008574:	e02e      	b.n	80085d4 <HAL_RCC_OscConfig+0x434>
 8008576:	4b48      	ldr	r3, [pc, #288]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	069b      	lsls	r3, r3, #26
 8008584:	4944      	ldr	r1, [pc, #272]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008586:	4313      	orrs	r3, r2
 8008588:	604b      	str	r3, [r1, #4]
 800858a:	e023      	b.n	80085d4 <HAL_RCC_OscConfig+0x434>
 800858c:	4b42      	ldr	r3, [pc, #264]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	061b      	lsls	r3, r3, #24
 800859a:	493f      	ldr	r1, [pc, #252]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800859c:	4313      	orrs	r3, r2
 800859e:	60cb      	str	r3, [r1, #12]
 80085a0:	e018      	b.n	80085d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80085a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a3c      	ldr	r2, [pc, #240]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80085a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ae:	f7f9 fbb3 	bl	8001d18 <HAL_GetTick>
 80085b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80085b6:	f7f9 fbaf 	bl	8001d18 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e23d      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085c8:	4b33      	ldr	r3, [pc, #204]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1f0      	bne.n	80085b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d036      	beq.n	800864e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d019      	beq.n	800861c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80085ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f4:	f7f9 fb90 	bl	8001d18 <HAL_GetTick>
 80085f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085fa:	e008      	b.n	800860e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085fc:	f7f9 fb8c 	bl	8001d18 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b02      	cmp	r3, #2
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e21a      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800860e:	4b22      	ldr	r3, [pc, #136]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0f0      	beq.n	80085fc <HAL_RCC_OscConfig+0x45c>
 800861a:	e018      	b.n	800864e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800861c:	4b1e      	ldr	r3, [pc, #120]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800861e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008620:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008628:	f7f9 fb76 	bl	8001d18 <HAL_GetTick>
 800862c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800862e:	e008      	b.n	8008642 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008630:	f7f9 fb72 	bl	8001d18 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e200      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008642:	4b15      	ldr	r3, [pc, #84]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1f0      	bne.n	8008630 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d039      	beq.n	80086ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01c      	beq.n	800869c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008662:	4b0d      	ldr	r3, [pc, #52]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a0c      	ldr	r2, [pc, #48]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 8008668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800866c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800866e:	f7f9 fb53 	bl	8001d18 <HAL_GetTick>
 8008672:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008676:	f7f9 fb4f 	bl	8001d18 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e1dd      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008688:	4b03      	ldr	r3, [pc, #12]	@ (8008698 <HAL_RCC_OscConfig+0x4f8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x4d6>
 8008694:	e01b      	b.n	80086ce <HAL_RCC_OscConfig+0x52e>
 8008696:	bf00      	nop
 8008698:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800869c:	4b9b      	ldr	r3, [pc, #620]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a9a      	ldr	r2, [pc, #616]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80086a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086a8:	f7f9 fb36 	bl	8001d18 <HAL_GetTick>
 80086ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086b0:	f7f9 fb32 	bl	8001d18 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e1c0      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086c2:	4b92      	ldr	r3, [pc, #584]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1f0      	bne.n	80086b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 8081 	beq.w	80087de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086dc:	4b8c      	ldr	r3, [pc, #560]	@ (8008910 <HAL_RCC_OscConfig+0x770>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a8b      	ldr	r2, [pc, #556]	@ (8008910 <HAL_RCC_OscConfig+0x770>)
 80086e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086e8:	f7f9 fb16 	bl	8001d18 <HAL_GetTick>
 80086ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086f0:	f7f9 fb12 	bl	8001d18 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b64      	cmp	r3, #100	@ 0x64
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e1a0      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008702:	4b83      	ldr	r3, [pc, #524]	@ (8008910 <HAL_RCC_OscConfig+0x770>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d106      	bne.n	8008724 <HAL_RCC_OscConfig+0x584>
 8008716:	4b7d      	ldr	r3, [pc, #500]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871a:	4a7c      	ldr	r2, [pc, #496]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	6713      	str	r3, [r2, #112]	@ 0x70
 8008722:	e02d      	b.n	8008780 <HAL_RCC_OscConfig+0x5e0>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10c      	bne.n	8008746 <HAL_RCC_OscConfig+0x5a6>
 800872c:	4b77      	ldr	r3, [pc, #476]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800872e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008730:	4a76      	ldr	r2, [pc, #472]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008732:	f023 0301 	bic.w	r3, r3, #1
 8008736:	6713      	str	r3, [r2, #112]	@ 0x70
 8008738:	4b74      	ldr	r3, [pc, #464]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800873a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873c:	4a73      	ldr	r2, [pc, #460]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800873e:	f023 0304 	bic.w	r3, r3, #4
 8008742:	6713      	str	r3, [r2, #112]	@ 0x70
 8008744:	e01c      	b.n	8008780 <HAL_RCC_OscConfig+0x5e0>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2b05      	cmp	r3, #5
 800874c:	d10c      	bne.n	8008768 <HAL_RCC_OscConfig+0x5c8>
 800874e:	4b6f      	ldr	r3, [pc, #444]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008752:	4a6e      	ldr	r2, [pc, #440]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008754:	f043 0304 	orr.w	r3, r3, #4
 8008758:	6713      	str	r3, [r2, #112]	@ 0x70
 800875a:	4b6c      	ldr	r3, [pc, #432]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800875c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875e:	4a6b      	ldr	r2, [pc, #428]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	6713      	str	r3, [r2, #112]	@ 0x70
 8008766:	e00b      	b.n	8008780 <HAL_RCC_OscConfig+0x5e0>
 8008768:	4b68      	ldr	r3, [pc, #416]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800876a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800876c:	4a67      	ldr	r2, [pc, #412]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	6713      	str	r3, [r2, #112]	@ 0x70
 8008774:	4b65      	ldr	r3, [pc, #404]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008778:	4a64      	ldr	r2, [pc, #400]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800877a:	f023 0304 	bic.w	r3, r3, #4
 800877e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d015      	beq.n	80087b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008788:	f7f9 fac6 	bl	8001d18 <HAL_GetTick>
 800878c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800878e:	e00a      	b.n	80087a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008790:	f7f9 fac2 	bl	8001d18 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800879e:	4293      	cmp	r3, r2
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e14e      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087a6:	4b59      	ldr	r3, [pc, #356]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80087a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087aa:	f003 0302 	and.w	r3, r3, #2
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0ee      	beq.n	8008790 <HAL_RCC_OscConfig+0x5f0>
 80087b2:	e014      	b.n	80087de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b4:	f7f9 fab0 	bl	8001d18 <HAL_GetTick>
 80087b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087ba:	e00a      	b.n	80087d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087bc:	f7f9 faac 	bl	8001d18 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e138      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087d2:	4b4e      	ldr	r3, [pc, #312]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1ee      	bne.n	80087bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 812d 	beq.w	8008a42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80087e8:	4b48      	ldr	r3, [pc, #288]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087f0:	2b18      	cmp	r3, #24
 80087f2:	f000 80bd 	beq.w	8008970 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	f040 809e 	bne.w	800893c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008800:	4b42      	ldr	r3, [pc, #264]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a41      	ldr	r2, [pc, #260]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800880a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7f9 fa84 	bl	8001d18 <HAL_GetTick>
 8008810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008814:	f7f9 fa80 	bl	8001d18 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e10e      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008826:	4b39      	ldr	r3, [pc, #228]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f0      	bne.n	8008814 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008832:	4b36      	ldr	r3, [pc, #216]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008836:	4b37      	ldr	r3, [pc, #220]	@ (8008914 <HAL_RCC_OscConfig+0x774>)
 8008838:	4013      	ands	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008842:	0112      	lsls	r2, r2, #4
 8008844:	430a      	orrs	r2, r1
 8008846:	4931      	ldr	r1, [pc, #196]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008848:	4313      	orrs	r3, r2
 800884a:	628b      	str	r3, [r1, #40]	@ 0x28
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008850:	3b01      	subs	r3, #1
 8008852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800885a:	3b01      	subs	r3, #1
 800885c:	025b      	lsls	r3, r3, #9
 800885e:	b29b      	uxth	r3, r3
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008866:	3b01      	subs	r3, #1
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008874:	3b01      	subs	r3, #1
 8008876:	061b      	lsls	r3, r3, #24
 8008878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800887c:	4923      	ldr	r1, [pc, #140]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800887e:	4313      	orrs	r3, r2
 8008880:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008882:	4b22      	ldr	r3, [pc, #136]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	4a21      	ldr	r2, [pc, #132]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800888e:	4b1f      	ldr	r3, [pc, #124]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 8008890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008892:	4b21      	ldr	r3, [pc, #132]	@ (8008918 <HAL_RCC_OscConfig+0x778>)
 8008894:	4013      	ands	r3, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800889a:	00d2      	lsls	r2, r2, #3
 800889c:	491b      	ldr	r1, [pc, #108]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80088a2:	4b1a      	ldr	r3, [pc, #104]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	f023 020c 	bic.w	r2, r3, #12
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	4917      	ldr	r1, [pc, #92]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80088b4:	4b15      	ldr	r3, [pc, #84]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	f023 0202 	bic.w	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c0:	4912      	ldr	r1, [pc, #72]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80088c6:	4b11      	ldr	r3, [pc, #68]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	4a10      	ldr	r2, [pc, #64]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d2:	4b0e      	ldr	r3, [pc, #56]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	4a0d      	ldr	r2, [pc, #52]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80088de:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e2:	4a0a      	ldr	r2, [pc, #40]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80088ea:	4b08      	ldr	r3, [pc, #32]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ee:	4a07      	ldr	r2, [pc, #28]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088f6:	4b05      	ldr	r3, [pc, #20]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a04      	ldr	r2, [pc, #16]	@ (800890c <HAL_RCC_OscConfig+0x76c>)
 80088fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008902:	f7f9 fa09 	bl	8001d18 <HAL_GetTick>
 8008906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008908:	e011      	b.n	800892e <HAL_RCC_OscConfig+0x78e>
 800890a:	bf00      	nop
 800890c:	58024400 	.word	0x58024400
 8008910:	58024800 	.word	0x58024800
 8008914:	fffffc0c 	.word	0xfffffc0c
 8008918:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800891c:	f7f9 f9fc 	bl	8001d18 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e08a      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800892e:	4b47      	ldr	r3, [pc, #284]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <HAL_RCC_OscConfig+0x77c>
 800893a:	e082      	b.n	8008a42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800893c:	4b43      	ldr	r3, [pc, #268]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a42      	ldr	r2, [pc, #264]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008948:	f7f9 f9e6 	bl	8001d18 <HAL_GetTick>
 800894c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008950:	f7f9 f9e2 	bl	8001d18 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b02      	cmp	r3, #2
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e070      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008962:	4b3a      	ldr	r3, [pc, #232]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1f0      	bne.n	8008950 <HAL_RCC_OscConfig+0x7b0>
 800896e:	e068      	b.n	8008a42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008970:	4b36      	ldr	r3, [pc, #216]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008976:	4b35      	ldr	r3, [pc, #212]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	2b01      	cmp	r3, #1
 8008982:	d031      	beq.n	80089e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f003 0203 	and.w	r2, r3, #3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800898e:	429a      	cmp	r2, r3
 8008990:	d12a      	bne.n	80089e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	091b      	lsrs	r3, r3, #4
 8008996:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800899e:	429a      	cmp	r2, r3
 80089a0:	d122      	bne.n	80089e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d11a      	bne.n	80089e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	0a5b      	lsrs	r3, r3, #9
 80089b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d111      	bne.n	80089e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	0c1b      	lsrs	r3, r3, #16
 80089c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d108      	bne.n	80089e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	0e1b      	lsrs	r3, r3, #24
 80089da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d001      	beq.n	80089ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e02b      	b.n	8008a44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80089ec:	4b17      	ldr	r3, [pc, #92]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 80089ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f0:	08db      	lsrs	r3, r3, #3
 80089f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d01f      	beq.n	8008a42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008a02:	4b12      	ldr	r3, [pc, #72]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	4a11      	ldr	r2, [pc, #68]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008a08:	f023 0301 	bic.w	r3, r3, #1
 8008a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a0e:	f7f9 f983 	bl	8001d18 <HAL_GetTick>
 8008a12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008a14:	bf00      	nop
 8008a16:	f7f9 f97f 	bl	8001d18 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d0f9      	beq.n	8008a16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a22:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a26:	4b0a      	ldr	r3, [pc, #40]	@ (8008a50 <HAL_RCC_OscConfig+0x8b0>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a2e:	00d2      	lsls	r2, r2, #3
 8008a30:	4906      	ldr	r1, [pc, #24]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008a36:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3a:	4a04      	ldr	r2, [pc, #16]	@ (8008a4c <HAL_RCC_OscConfig+0x8ac>)
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3730      	adds	r7, #48	@ 0x30
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	ffff0007 	.word	0xffff0007

08008a54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e19c      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a68:	4b8a      	ldr	r3, [pc, #552]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d910      	bls.n	8008a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a76:	4b87      	ldr	r3, [pc, #540]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f023 020f 	bic.w	r2, r3, #15
 8008a7e:	4985      	ldr	r1, [pc, #532]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a86:	4b83      	ldr	r3, [pc, #524]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d001      	beq.n	8008a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e184      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d010      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691a      	ldr	r2, [r3, #16]
 8008aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d908      	bls.n	8008ac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ab4:	4b78      	ldr	r3, [pc, #480]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	4975      	ldr	r1, [pc, #468]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d010      	beq.n	8008af4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	4b70      	ldr	r3, [pc, #448]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d908      	bls.n	8008af4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	496a      	ldr	r1, [pc, #424]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d010      	beq.n	8008b22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	4b64      	ldr	r3, [pc, #400]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d908      	bls.n	8008b22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b10:	4b61      	ldr	r3, [pc, #388]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	495e      	ldr	r1, [pc, #376]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d010      	beq.n	8008b50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69da      	ldr	r2, [r3, #28]
 8008b32:	4b59      	ldr	r3, [pc, #356]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d908      	bls.n	8008b50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b3e:	4b56      	ldr	r3, [pc, #344]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	4953      	ldr	r1, [pc, #332]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d010      	beq.n	8008b7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	4b4d      	ldr	r3, [pc, #308]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d908      	bls.n	8008b7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f023 020f 	bic.w	r2, r3, #15
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	4947      	ldr	r1, [pc, #284]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d055      	beq.n	8008c36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b8a:	4b43      	ldr	r3, [pc, #268]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	4940      	ldr	r1, [pc, #256]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d121      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0f6      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d107      	bne.n	8008bcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bbc:	4b36      	ldr	r3, [pc, #216]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d115      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0ea      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d107      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bd4:	4b30      	ldr	r3, [pc, #192]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d109      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0de      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008be4:	4b2c      	ldr	r3, [pc, #176]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0d6      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bf4:	4b28      	ldr	r3, [pc, #160]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f023 0207 	bic.w	r2, r3, #7
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4925      	ldr	r1, [pc, #148]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c06:	f7f9 f887 	bl	8001d18 <HAL_GetTick>
 8008c0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c0c:	e00a      	b.n	8008c24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c0e:	f7f9 f883 	bl	8001d18 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e0be      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c24:	4b1c      	ldr	r3, [pc, #112]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d1eb      	bne.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d010      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	4b14      	ldr	r3, [pc, #80]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d208      	bcs.n	8008c64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c52:	4b11      	ldr	r3, [pc, #68]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f023 020f 	bic.w	r2, r3, #15
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	490e      	ldr	r1, [pc, #56]	@ (8008c98 <HAL_RCC_ClockConfig+0x244>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c64:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d214      	bcs.n	8008c9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c72:	4b08      	ldr	r3, [pc, #32]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f023 020f 	bic.w	r2, r3, #15
 8008c7a:	4906      	ldr	r1, [pc, #24]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c82:	4b04      	ldr	r3, [pc, #16]	@ (8008c94 <HAL_RCC_ClockConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d005      	beq.n	8008c9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e086      	b.n	8008da2 <HAL_RCC_ClockConfig+0x34e>
 8008c94:	52002000 	.word	0x52002000
 8008c98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d010      	beq.n	8008cca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	4b3f      	ldr	r3, [pc, #252]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d208      	bcs.n	8008cca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	4939      	ldr	r1, [pc, #228]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d010      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	4b34      	ldr	r3, [pc, #208]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d208      	bcs.n	8008cf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ce6:	4b31      	ldr	r3, [pc, #196]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	492e      	ldr	r1, [pc, #184]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699a      	ldr	r2, [r3, #24]
 8008d08:	4b28      	ldr	r3, [pc, #160]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d208      	bcs.n	8008d26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d14:	4b25      	ldr	r3, [pc, #148]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	4922      	ldr	r1, [pc, #136]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d010      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69da      	ldr	r2, [r3, #28]
 8008d36:	4b1d      	ldr	r3, [pc, #116]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d208      	bcs.n	8008d54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d42:	4b1a      	ldr	r3, [pc, #104]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	4917      	ldr	r1, [pc, #92]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d54:	f000 f834 	bl	8008dc0 <HAL_RCC_GetSysClockFreq>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b14      	ldr	r3, [pc, #80]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	4912      	ldr	r1, [pc, #72]	@ (8008db0 <HAL_RCC_ClockConfig+0x35c>)
 8008d66:	5ccb      	ldrb	r3, [r1, r3]
 8008d68:	f003 031f 	and.w	r3, r3, #31
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d72:	4b0e      	ldr	r3, [pc, #56]	@ (8008dac <HAL_RCC_ClockConfig+0x358>)
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8008db0 <HAL_RCC_ClockConfig+0x35c>)
 8008d7c:	5cd3      	ldrb	r3, [r2, r3]
 8008d7e:	f003 031f 	and.w	r3, r3, #31
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
 8008d88:	4a0a      	ldr	r2, [pc, #40]	@ (8008db4 <HAL_RCC_ClockConfig+0x360>)
 8008d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008db8 <HAL_RCC_ClockConfig+0x364>)
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008d92:	4b0a      	ldr	r3, [pc, #40]	@ (8008dbc <HAL_RCC_ClockConfig+0x368>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f8 fba8 	bl	80014ec <HAL_InitTick>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	58024400 	.word	0x58024400
 8008db0:	08015344 	.word	0x08015344
 8008db4:	24000008 	.word	0x24000008
 8008db8:	24000004 	.word	0x24000004
 8008dbc:	2400000c 	.word	0x2400000c

08008dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b089      	sub	sp, #36	@ 0x24
 8008dc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dc6:	4bb3      	ldr	r3, [pc, #716]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dce:	2b18      	cmp	r3, #24
 8008dd0:	f200 8155 	bhi.w	800907e <HAL_RCC_GetSysClockFreq+0x2be>
 8008dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ddc <HAL_RCC_GetSysClockFreq+0x1c>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008e41 	.word	0x08008e41
 8008de0:	0800907f 	.word	0x0800907f
 8008de4:	0800907f 	.word	0x0800907f
 8008de8:	0800907f 	.word	0x0800907f
 8008dec:	0800907f 	.word	0x0800907f
 8008df0:	0800907f 	.word	0x0800907f
 8008df4:	0800907f 	.word	0x0800907f
 8008df8:	0800907f 	.word	0x0800907f
 8008dfc:	08008e67 	.word	0x08008e67
 8008e00:	0800907f 	.word	0x0800907f
 8008e04:	0800907f 	.word	0x0800907f
 8008e08:	0800907f 	.word	0x0800907f
 8008e0c:	0800907f 	.word	0x0800907f
 8008e10:	0800907f 	.word	0x0800907f
 8008e14:	0800907f 	.word	0x0800907f
 8008e18:	0800907f 	.word	0x0800907f
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	0800907f 	.word	0x0800907f
 8008e24:	0800907f 	.word	0x0800907f
 8008e28:	0800907f 	.word	0x0800907f
 8008e2c:	0800907f 	.word	0x0800907f
 8008e30:	0800907f 	.word	0x0800907f
 8008e34:	0800907f 	.word	0x0800907f
 8008e38:	0800907f 	.word	0x0800907f
 8008e3c:	08008e73 	.word	0x08008e73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e40:	4b94      	ldr	r3, [pc, #592]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e4c:	4b91      	ldr	r3, [pc, #580]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	08db      	lsrs	r3, r3, #3
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	4a90      	ldr	r2, [pc, #576]	@ (8009098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e58:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e5e:	e111      	b.n	8009084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e60:	4b8d      	ldr	r3, [pc, #564]	@ (8009098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e62:	61bb      	str	r3, [r7, #24]
      break;
 8008e64:	e10e      	b.n	8009084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008e66:	4b8d      	ldr	r3, [pc, #564]	@ (800909c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e68:	61bb      	str	r3, [r7, #24]
      break;
 8008e6a:	e10b      	b.n	8009084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80090a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e6e:	61bb      	str	r3, [r7, #24]
      break;
 8008e70:	e108      	b.n	8009084 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e72:	4b88      	ldr	r3, [pc, #544]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008e7c:	4b85      	ldr	r3, [pc, #532]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e80:	091b      	lsrs	r3, r3, #4
 8008e82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e88:	4b82      	ldr	r3, [pc, #520]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e92:	4b80      	ldr	r3, [pc, #512]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e96:	08db      	lsrs	r3, r3, #3
 8008e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 80e1 	beq.w	8009078 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	f000 8083 	beq.w	8008fc4 <HAL_RCC_GetSysClockFreq+0x204>
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	f200 80a1 	bhi.w	8009008 <HAL_RCC_GetSysClockFreq+0x248>
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x114>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d056      	beq.n	8008f80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ed2:	e099      	b.n	8009008 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d02d      	beq.n	8008f3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	08db      	lsrs	r3, r3, #3
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	4a6b      	ldr	r2, [pc, #428]	@ (8009098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	ee07 3a90 	vmov	s15, r3
 8008ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0a:	4b62      	ldr	r3, [pc, #392]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80090a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008f3a:	e087      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80090a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4e:	4b51      	ldr	r3, [pc, #324]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80090a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f7e:	e065      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80090ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f92:	4b40      	ldr	r3, [pc, #256]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fa6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80090a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fc2:	e043      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80090b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80090a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009006:	e021      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80090ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800901a:	4b1e      	ldr	r3, [pc, #120]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902a:	ed97 6a02 	vldr	s12, [r7, #8]
 800902e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80090a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800903a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800903e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800904a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800904c:	4b11      	ldr	r3, [pc, #68]	@ (8009094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800904e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009050:	0a5b      	lsrs	r3, r3, #9
 8009052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009056:	3301      	adds	r3, #1
 8009058:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	ee07 3a90 	vmov	s15, r3
 8009060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009064:	edd7 6a07 	vldr	s13, [r7, #28]
 8009068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800906c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009070:	ee17 3a90 	vmov	r3, s15
 8009074:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009076:	e005      	b.n	8009084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	61bb      	str	r3, [r7, #24]
      break;
 800907c:	e002      	b.n	8009084 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800907e:	4b07      	ldr	r3, [pc, #28]	@ (800909c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009080:	61bb      	str	r3, [r7, #24]
      break;
 8009082:	bf00      	nop
  }

  return sysclockfreq;
 8009084:	69bb      	ldr	r3, [r7, #24]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3724      	adds	r7, #36	@ 0x24
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
 8009098:	03d09000 	.word	0x03d09000
 800909c:	003d0900 	.word	0x003d0900
 80090a0:	017d7840 	.word	0x017d7840
 80090a4:	46000000 	.word	0x46000000
 80090a8:	4c742400 	.word	0x4c742400
 80090ac:	4a742400 	.word	0x4a742400
 80090b0:	4bbebc20 	.word	0x4bbebc20

080090b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80090ba:	f7ff fe81 	bl	8008dc0 <HAL_RCC_GetSysClockFreq>
 80090be:	4602      	mov	r2, r0
 80090c0:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <HAL_RCC_GetHCLKFreq+0x50>)
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	0a1b      	lsrs	r3, r3, #8
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	490f      	ldr	r1, [pc, #60]	@ (8009108 <HAL_RCC_GetHCLKFreq+0x54>)
 80090cc:	5ccb      	ldrb	r3, [r1, r3]
 80090ce:	f003 031f 	and.w	r3, r3, #31
 80090d2:	fa22 f303 	lsr.w	r3, r2, r3
 80090d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009104 <HAL_RCC_GetHCLKFreq+0x50>)
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	f003 030f 	and.w	r3, r3, #15
 80090e0:	4a09      	ldr	r2, [pc, #36]	@ (8009108 <HAL_RCC_GetHCLKFreq+0x54>)
 80090e2:	5cd3      	ldrb	r3, [r2, r3]
 80090e4:	f003 031f 	and.w	r3, r3, #31
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	fa22 f303 	lsr.w	r3, r2, r3
 80090ee:	4a07      	ldr	r2, [pc, #28]	@ (800910c <HAL_RCC_GetHCLKFreq+0x58>)
 80090f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090f2:	4a07      	ldr	r2, [pc, #28]	@ (8009110 <HAL_RCC_GetHCLKFreq+0x5c>)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090f8:	4b04      	ldr	r3, [pc, #16]	@ (800910c <HAL_RCC_GetHCLKFreq+0x58>)
 80090fa:	681b      	ldr	r3, [r3, #0]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	58024400 	.word	0x58024400
 8009108:	08015344 	.word	0x08015344
 800910c:	24000008 	.word	0x24000008
 8009110:	24000004 	.word	0x24000004

08009114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009118:	f7ff ffcc 	bl	80090b4 <HAL_RCC_GetHCLKFreq>
 800911c:	4602      	mov	r2, r0
 800911e:	4b06      	ldr	r3, [pc, #24]	@ (8009138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	091b      	lsrs	r3, r3, #4
 8009124:	f003 0307 	and.w	r3, r3, #7
 8009128:	4904      	ldr	r1, [pc, #16]	@ (800913c <HAL_RCC_GetPCLK1Freq+0x28>)
 800912a:	5ccb      	ldrb	r3, [r1, r3]
 800912c:	f003 031f 	and.w	r3, r3, #31
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009134:	4618      	mov	r0, r3
 8009136:	bd80      	pop	{r7, pc}
 8009138:	58024400 	.word	0x58024400
 800913c:	08015344 	.word	0x08015344

08009140 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	223f      	movs	r2, #63	@ 0x3f
 800914e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009150:	4b1a      	ldr	r3, [pc, #104]	@ (80091bc <HAL_RCC_GetClockConfig+0x7c>)
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	f003 0207 	and.w	r2, r3, #7
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800915c:	4b17      	ldr	r3, [pc, #92]	@ (80091bc <HAL_RCC_GetClockConfig+0x7c>)
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009168:	4b14      	ldr	r3, [pc, #80]	@ (80091bc <HAL_RCC_GetClockConfig+0x7c>)
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009174:	4b11      	ldr	r3, [pc, #68]	@ (80091bc <HAL_RCC_GetClockConfig+0x7c>)
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009180:	4b0e      	ldr	r3, [pc, #56]	@ (80091bc <HAL_RCC_GetClockConfig+0x7c>)
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800918c:	4b0b      	ldr	r3, [pc, #44]	@ (80091bc <HAL_RCC_GetClockConfig+0x7c>)
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009198:	4b08      	ldr	r3, [pc, #32]	@ (80091bc <HAL_RCC_GetClockConfig+0x7c>)
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091a4:	4b06      	ldr	r3, [pc, #24]	@ (80091c0 <HAL_RCC_GetClockConfig+0x80>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 020f 	and.w	r2, r3, #15
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	601a      	str	r2, [r3, #0]
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	58024400 	.word	0x58024400
 80091c0:	52002000 	.word	0x52002000

080091c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091c8:	b0ca      	sub	sp, #296	@ 0x128
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091d0:	2300      	movs	r3, #0
 80091d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091d6:	2300      	movs	r3, #0
 80091d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80091e8:	2500      	movs	r5, #0
 80091ea:	ea54 0305 	orrs.w	r3, r4, r5
 80091ee:	d049      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091fa:	d02f      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80091fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009200:	d828      	bhi.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009206:	d01a      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800920c:	d822      	bhi.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009216:	d007      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009218:	e01c      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921a:	4bb8      	ldr	r3, [pc, #736]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800921c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921e:	4ab7      	ldr	r2, [pc, #732]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009226:	e01a      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922c:	3308      	adds	r3, #8
 800922e:	2102      	movs	r1, #2
 8009230:	4618      	mov	r0, r3
 8009232:	f002 fb61 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009236:	4603      	mov	r3, r0
 8009238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800923c:	e00f      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009242:	3328      	adds	r3, #40	@ 0x28
 8009244:	2102      	movs	r1, #2
 8009246:	4618      	mov	r0, r3
 8009248:	f002 fc08 	bl	800ba5c <RCCEx_PLL3_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009252:	e004      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800925a:	e000      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800925c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800925e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009266:	4ba5      	ldr	r3, [pc, #660]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800926a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009274:	4aa1      	ldr	r2, [pc, #644]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009276:	430b      	orrs	r3, r1
 8009278:	6513      	str	r3, [r2, #80]	@ 0x50
 800927a:	e003      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009290:	f04f 0900 	mov.w	r9, #0
 8009294:	ea58 0309 	orrs.w	r3, r8, r9
 8009298:	d047      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800929a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d82a      	bhi.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80092a4:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	080092c1 	.word	0x080092c1
 80092b0:	080092cf 	.word	0x080092cf
 80092b4:	080092e5 	.word	0x080092e5
 80092b8:	08009303 	.word	0x08009303
 80092bc:	08009303 	.word	0x08009303
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c0:	4b8e      	ldr	r3, [pc, #568]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c4:	4a8d      	ldr	r2, [pc, #564]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092cc:	e01a      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d2:	3308      	adds	r3, #8
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f002 fb0e 	bl	800b8f8 <RCCEx_PLL2_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092e2:	e00f      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e8:	3328      	adds	r3, #40	@ 0x28
 80092ea:	2100      	movs	r1, #0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f002 fbb5 	bl	800ba5c <RCCEx_PLL3_Config>
 80092f2:	4603      	mov	r3, r0
 80092f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092f8:	e004      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009300:	e000      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800930c:	4b7b      	ldr	r3, [pc, #492]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800930e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009310:	f023 0107 	bic.w	r1, r3, #7
 8009314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800931a:	4a78      	ldr	r2, [pc, #480]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800931c:	430b      	orrs	r3, r1
 800931e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009320:	e003      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800932a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009336:	f04f 0b00 	mov.w	fp, #0
 800933a:	ea5a 030b 	orrs.w	r3, sl, fp
 800933e:	d04c      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800934a:	d030      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800934c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009350:	d829      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009352:	2bc0      	cmp	r3, #192	@ 0xc0
 8009354:	d02d      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009356:	2bc0      	cmp	r3, #192	@ 0xc0
 8009358:	d825      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800935a:	2b80      	cmp	r3, #128	@ 0x80
 800935c:	d018      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800935e:	2b80      	cmp	r3, #128	@ 0x80
 8009360:	d821      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d002      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009366:	2b40      	cmp	r3, #64	@ 0x40
 8009368:	d007      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800936a:	e01c      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800936c:	4b63      	ldr	r3, [pc, #396]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	4a62      	ldr	r2, [pc, #392]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009378:	e01c      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937e:	3308      	adds	r3, #8
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f002 fab8 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800938e:	e011      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009394:	3328      	adds	r3, #40	@ 0x28
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f002 fb5f 	bl	800ba5c <RCCEx_PLL3_Config>
 800939e:	4603      	mov	r3, r0
 80093a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093ac:	e002      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80093ae:	bf00      	nop
 80093b0:	e000      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80093b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80093bc:	4b4f      	ldr	r3, [pc, #316]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80093c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093ca:	4a4c      	ldr	r2, [pc, #304]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093cc:	430b      	orrs	r3, r1
 80093ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80093d0:	e003      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80093e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80093ea:	2300      	movs	r3, #0
 80093ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80093f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80093f4:	460b      	mov	r3, r1
 80093f6:	4313      	orrs	r3, r2
 80093f8:	d053      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009402:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009406:	d035      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800940c:	d82e      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800940e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009412:	d031      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009414:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009418:	d828      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800941a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800941e:	d01a      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009424:	d822      	bhi.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800942a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800942e:	d007      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009430:	e01c      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009432:	4b32      	ldr	r3, [pc, #200]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009436:	4a31      	ldr	r2, [pc, #196]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800943c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800943e:	e01c      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009444:	3308      	adds	r3, #8
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f002 fa55 	bl	800b8f8 <RCCEx_PLL2_Config>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009454:	e011      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945a:	3328      	adds	r3, #40	@ 0x28
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f002 fafc 	bl	800ba5c <RCCEx_PLL3_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800946a:	e006      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009472:	e002      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009474:	bf00      	nop
 8009476:	e000      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800947a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10b      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009482:	4b1e      	ldr	r3, [pc, #120]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009486:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009492:	4a1a      	ldr	r2, [pc, #104]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009494:	430b      	orrs	r3, r1
 8009496:	6593      	str	r3, [r2, #88]	@ 0x58
 8009498:	e003      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800949a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800949e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80094a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80094ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094b2:	2300      	movs	r3, #0
 80094b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80094b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80094bc:	460b      	mov	r3, r1
 80094be:	4313      	orrs	r3, r2
 80094c0:	d056      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80094c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80094ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094ce:	d038      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80094d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094d4:	d831      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094da:	d034      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80094dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094e0:	d82b      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094e6:	d01d      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80094e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094ec:	d825      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d006      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80094f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094f6:	d00a      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80094f8:	e01f      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80094fa:	bf00      	nop
 80094fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009500:	4ba2      	ldr	r3, [pc, #648]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009504:	4aa1      	ldr	r2, [pc, #644]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800950a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800950c:	e01c      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800950e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009512:	3308      	adds	r3, #8
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f002 f9ee 	bl	800b8f8 <RCCEx_PLL2_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009522:	e011      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009528:	3328      	adds	r3, #40	@ 0x28
 800952a:	2100      	movs	r1, #0
 800952c:	4618      	mov	r0, r3
 800952e:	f002 fa95 	bl	800ba5c <RCCEx_PLL3_Config>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009538:	e006      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009540:	e002      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10b      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009550:	4b8e      	ldr	r3, [pc, #568]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009554:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009560:	4a8a      	ldr	r2, [pc, #552]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009562:	430b      	orrs	r3, r1
 8009564:	6593      	str	r3, [r2, #88]	@ 0x58
 8009566:	e003      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800956c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800957c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009580:	2300      	movs	r3, #0
 8009582:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009586:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800958a:	460b      	mov	r3, r1
 800958c:	4313      	orrs	r3, r2
 800958e:	d03a      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009596:	2b30      	cmp	r3, #48	@ 0x30
 8009598:	d01f      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800959a:	2b30      	cmp	r3, #48	@ 0x30
 800959c:	d819      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d00c      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d815      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d019      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80095aa:	2b10      	cmp	r3, #16
 80095ac:	d111      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ae:	4b77      	ldr	r3, [pc, #476]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b2:	4a76      	ldr	r2, [pc, #472]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80095ba:	e011      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c0:	3308      	adds	r3, #8
 80095c2:	2102      	movs	r1, #2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f002 f997 	bl	800b8f8 <RCCEx_PLL2_Config>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80095d0:	e006      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095d8:	e002      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80095da:	bf00      	nop
 80095dc:	e000      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80095de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80095e8:	4b68      	ldr	r3, [pc, #416]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f6:	4a65      	ldr	r2, [pc, #404]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095f8:	430b      	orrs	r3, r1
 80095fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095fc:	e003      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009612:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009616:	2300      	movs	r3, #0
 8009618:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800961c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009620:	460b      	mov	r3, r1
 8009622:	4313      	orrs	r3, r2
 8009624:	d051      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800962c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009630:	d035      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009636:	d82e      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009638:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800963c:	d031      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800963e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009642:	d828      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009648:	d01a      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800964a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800964e:	d822      	bhi.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009658:	d007      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800965a:	e01c      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800965c:	4b4b      	ldr	r3, [pc, #300]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800965e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009660:	4a4a      	ldr	r2, [pc, #296]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009668:	e01c      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966e:	3308      	adds	r3, #8
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f002 f940 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009678:	4603      	mov	r3, r0
 800967a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800967e:	e011      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009684:	3328      	adds	r3, #40	@ 0x28
 8009686:	2100      	movs	r1, #0
 8009688:	4618      	mov	r0, r3
 800968a:	f002 f9e7 	bl	800ba5c <RCCEx_PLL3_Config>
 800968e:	4603      	mov	r3, r0
 8009690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009694:	e006      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800969c:	e002      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800969e:	bf00      	nop
 80096a0:	e000      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80096a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096ac:	4b37      	ldr	r3, [pc, #220]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80096b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ba:	4a34      	ldr	r2, [pc, #208]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096bc:	430b      	orrs	r3, r1
 80096be:	6513      	str	r3, [r2, #80]	@ 0x50
 80096c0:	e003      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80096d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80096da:	2300      	movs	r3, #0
 80096dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80096e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80096e4:	460b      	mov	r3, r1
 80096e6:	4313      	orrs	r3, r2
 80096e8:	d056      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80096ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096f4:	d033      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80096f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096fa:	d82c      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80096fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009700:	d02f      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009706:	d826      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009708:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800970c:	d02b      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800970e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009712:	d820      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009718:	d012      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800971a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800971e:	d81a      	bhi.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d022      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009728:	d115      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972e:	3308      	adds	r3, #8
 8009730:	2101      	movs	r1, #1
 8009732:	4618      	mov	r0, r3
 8009734:	f002 f8e0 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800973e:	e015      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009744:	3328      	adds	r3, #40	@ 0x28
 8009746:	2101      	movs	r1, #1
 8009748:	4618      	mov	r0, r3
 800974a:	f002 f987 	bl	800ba5c <RCCEx_PLL3_Config>
 800974e:	4603      	mov	r3, r0
 8009750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009754:	e00a      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800975c:	e006      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800975e:	bf00      	nop
 8009760:	e004      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009762:	bf00      	nop
 8009764:	e002      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009766:	bf00      	nop
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800976a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800976c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10d      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009778:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800977c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009782:	4a02      	ldr	r2, [pc, #8]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009784:	430b      	orrs	r3, r1
 8009786:	6513      	str	r3, [r2, #80]	@ 0x50
 8009788:	e006      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800978a:	bf00      	nop
 800978c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80097a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80097ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4313      	orrs	r3, r2
 80097b6:	d055      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097c4:	d033      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80097c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097ca:	d82c      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d0:	d02f      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80097d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d6:	d826      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097dc:	d02b      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80097de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097e2:	d820      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097e8:	d012      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80097ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ee:	d81a      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d022      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80097f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097f8:	d115      	bne.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fe:	3308      	adds	r3, #8
 8009800:	2101      	movs	r1, #1
 8009802:	4618      	mov	r0, r3
 8009804:	f002 f878 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800980e:	e015      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009814:	3328      	adds	r3, #40	@ 0x28
 8009816:	2101      	movs	r1, #1
 8009818:	4618      	mov	r0, r3
 800981a:	f002 f91f 	bl	800ba5c <RCCEx_PLL3_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009824:	e00a      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800982c:	e006      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800982e:	bf00      	nop
 8009830:	e004      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009832:	bf00      	nop
 8009834:	e002      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009836:	bf00      	nop
 8009838:	e000      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800983a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10b      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009844:	4ba3      	ldr	r3, [pc, #652]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009848:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009854:	4a9f      	ldr	r2, [pc, #636]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009856:	430b      	orrs	r3, r1
 8009858:	6593      	str	r3, [r2, #88]	@ 0x58
 800985a:	e003      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009860:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009874:	2300      	movs	r3, #0
 8009876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800987a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800987e:	460b      	mov	r3, r1
 8009880:	4313      	orrs	r3, r2
 8009882:	d037      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800988a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800988e:	d00e      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009894:	d816      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d018      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800989a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800989e:	d111      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a0:	4b8c      	ldr	r3, [pc, #560]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a4:	4a8b      	ldr	r2, [pc, #556]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80098ac:	e00f      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b2:	3308      	adds	r3, #8
 80098b4:	2101      	movs	r1, #1
 80098b6:	4618      	mov	r0, r3
 80098b8:	f002 f81e 	bl	800b8f8 <RCCEx_PLL2_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80098c2:	e004      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098ca:	e000      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80098cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098d6:	4b7f      	ldr	r3, [pc, #508]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e4:	4a7b      	ldr	r2, [pc, #492]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098e6:	430b      	orrs	r3, r1
 80098e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80098ea:	e003      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009904:	2300      	movs	r3, #0
 8009906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800990a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800990e:	460b      	mov	r3, r1
 8009910:	4313      	orrs	r3, r2
 8009912:	d039      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800991a:	2b03      	cmp	r3, #3
 800991c:	d81c      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800991e:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	08009961 	.word	0x08009961
 8009928:	08009935 	.word	0x08009935
 800992c:	08009943 	.word	0x08009943
 8009930:	08009961 	.word	0x08009961
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009934:	4b67      	ldr	r3, [pc, #412]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009938:	4a66      	ldr	r2, [pc, #408]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800993a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800993e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009940:	e00f      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009946:	3308      	adds	r3, #8
 8009948:	2102      	movs	r1, #2
 800994a:	4618      	mov	r0, r3
 800994c:	f001 ffd4 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009956:	e004      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800995e:	e000      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800996a:	4b5a      	ldr	r3, [pc, #360]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800996c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800996e:	f023 0103 	bic.w	r1, r3, #3
 8009972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009978:	4a56      	ldr	r2, [pc, #344]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800997a:	430b      	orrs	r3, r1
 800997c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800997e:	e003      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009998:	2300      	movs	r3, #0
 800999a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800999e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80099a2:	460b      	mov	r3, r1
 80099a4:	4313      	orrs	r3, r2
 80099a6:	f000 809f 	beq.w	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099aa:	4b4b      	ldr	r3, [pc, #300]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a4a      	ldr	r2, [pc, #296]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80099b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099b6:	f7f8 f9af 	bl	8001d18 <HAL_GetTick>
 80099ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099be:	e00b      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099c0:	f7f8 f9aa 	bl	8001d18 <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b64      	cmp	r3, #100	@ 0x64
 80099ce:	d903      	bls.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099d6:	e005      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099d8:	4b3f      	ldr	r3, [pc, #252]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d0ed      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80099e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d179      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099ec:	4b39      	ldr	r3, [pc, #228]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80099f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80099f8:	4053      	eors	r3, r2
 80099fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d015      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a02:	4b34      	ldr	r3, [pc, #208]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a0e:	4b31      	ldr	r3, [pc, #196]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a12:	4a30      	ldr	r2, [pc, #192]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a26:	4a2b      	ldr	r2, [pc, #172]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a3a:	d118      	bne.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a3c:	f7f8 f96c 	bl	8001d18 <HAL_GetTick>
 8009a40:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a44:	e00d      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a46:	f7f8 f967 	bl	8001d18 <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009a50:	1ad2      	subs	r2, r2, r3
 8009a52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d903      	bls.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009a60:	e005      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a62:	4b1c      	ldr	r3, [pc, #112]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a66:	f003 0302 	and.w	r3, r3, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0eb      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d129      	bne.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a86:	d10e      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009a88:	4b12      	ldr	r3, [pc, #72]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a98:	091a      	lsrs	r2, r3, #4
 8009a9a:	4b10      	ldr	r3, [pc, #64]	@ (8009adc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	6113      	str	r3, [r2, #16]
 8009aa4:	e005      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009ab0:	6113      	str	r3, [r2, #16]
 8009ab2:	4b08      	ldr	r3, [pc, #32]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ab4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ac2:	4a04      	ldr	r2, [pc, #16]	@ (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ac8:	e00e      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009ad2:	e009      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	58024800 	.word	0x58024800
 8009adc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f002 0301 	and.w	r3, r2, #1
 8009af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009af8:	2300      	movs	r3, #0
 8009afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009afe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f000 8089 	beq.w	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b10:	2b28      	cmp	r3, #40	@ 0x28
 8009b12:	d86b      	bhi.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009b14:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009bf5 	.word	0x08009bf5
 8009b20:	08009bed 	.word	0x08009bed
 8009b24:	08009bed 	.word	0x08009bed
 8009b28:	08009bed 	.word	0x08009bed
 8009b2c:	08009bed 	.word	0x08009bed
 8009b30:	08009bed 	.word	0x08009bed
 8009b34:	08009bed 	.word	0x08009bed
 8009b38:	08009bed 	.word	0x08009bed
 8009b3c:	08009bc1 	.word	0x08009bc1
 8009b40:	08009bed 	.word	0x08009bed
 8009b44:	08009bed 	.word	0x08009bed
 8009b48:	08009bed 	.word	0x08009bed
 8009b4c:	08009bed 	.word	0x08009bed
 8009b50:	08009bed 	.word	0x08009bed
 8009b54:	08009bed 	.word	0x08009bed
 8009b58:	08009bed 	.word	0x08009bed
 8009b5c:	08009bd7 	.word	0x08009bd7
 8009b60:	08009bed 	.word	0x08009bed
 8009b64:	08009bed 	.word	0x08009bed
 8009b68:	08009bed 	.word	0x08009bed
 8009b6c:	08009bed 	.word	0x08009bed
 8009b70:	08009bed 	.word	0x08009bed
 8009b74:	08009bed 	.word	0x08009bed
 8009b78:	08009bed 	.word	0x08009bed
 8009b7c:	08009bf5 	.word	0x08009bf5
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009bed 	.word	0x08009bed
 8009b88:	08009bed 	.word	0x08009bed
 8009b8c:	08009bed 	.word	0x08009bed
 8009b90:	08009bed 	.word	0x08009bed
 8009b94:	08009bed 	.word	0x08009bed
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009bf5 	.word	0x08009bf5
 8009ba0:	08009bed 	.word	0x08009bed
 8009ba4:	08009bed 	.word	0x08009bed
 8009ba8:	08009bed 	.word	0x08009bed
 8009bac:	08009bed 	.word	0x08009bed
 8009bb0:	08009bed 	.word	0x08009bed
 8009bb4:	08009bed 	.word	0x08009bed
 8009bb8:	08009bed 	.word	0x08009bed
 8009bbc:	08009bf5 	.word	0x08009bf5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f001 fe95 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009bd4:	e00f      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bda:	3328      	adds	r3, #40	@ 0x28
 8009bdc:	2101      	movs	r1, #1
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 ff3c 	bl	800ba5c <RCCEx_PLL3_Config>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009bea:	e004      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bf2:	e000      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009bfe:	4bbf      	ldr	r3, [pc, #764]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c0c:	4abb      	ldr	r2, [pc, #748]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c12:	e003      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f002 0302 	and.w	r3, r2, #2
 8009c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009c32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009c36:	460b      	mov	r3, r1
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	d041      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	d824      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009c46:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c99 	.word	0x08009c99
 8009c50:	08009c65 	.word	0x08009c65
 8009c54:	08009c7b 	.word	0x08009c7b
 8009c58:	08009c99 	.word	0x08009c99
 8009c5c:	08009c99 	.word	0x08009c99
 8009c60:	08009c99 	.word	0x08009c99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c68:	3308      	adds	r3, #8
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 fe43 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c78:	e00f      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7e:	3328      	adds	r3, #40	@ 0x28
 8009c80:	2101      	movs	r1, #1
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 feea 	bl	800ba5c <RCCEx_PLL3_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009c8e:	e004      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c96:	e000      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009ca2:	4b96      	ldr	r3, [pc, #600]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca6:	f023 0107 	bic.w	r1, r3, #7
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cb0:	4a92      	ldr	r2, [pc, #584]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8009cb6:	e003      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f002 0304 	and.w	r3, r2, #4
 8009ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	d044      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ce8:	2b05      	cmp	r3, #5
 8009cea:	d825      	bhi.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009cec:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf2:	bf00      	nop
 8009cf4:	08009d41 	.word	0x08009d41
 8009cf8:	08009d0d 	.word	0x08009d0d
 8009cfc:	08009d23 	.word	0x08009d23
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d41 	.word	0x08009d41
 8009d08:	08009d41 	.word	0x08009d41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d10:	3308      	adds	r3, #8
 8009d12:	2101      	movs	r1, #1
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 fdef 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d20:	e00f      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d26:	3328      	adds	r3, #40	@ 0x28
 8009d28:	2101      	movs	r1, #1
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f001 fe96 	bl	800ba5c <RCCEx_PLL3_Config>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d36:	e004      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d3e:	e000      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10b      	bne.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d4e:	f023 0107 	bic.w	r1, r3, #7
 8009d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d5a:	4a68      	ldr	r2, [pc, #416]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d60:	e003      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f002 0320 	and.w	r3, r2, #32
 8009d76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d84:	460b      	mov	r3, r1
 8009d86:	4313      	orrs	r3, r2
 8009d88:	d055      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d96:	d033      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d9c:	d82c      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da2:	d02f      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da8:	d826      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009daa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009dae:	d02b      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009db0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009db4:	d820      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dba:	d012      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dc0:	d81a      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d022      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dca:	d115      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 fd8f 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009de0:	e015      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de6:	3328      	adds	r3, #40	@ 0x28
 8009de8:	2102      	movs	r1, #2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fe36 	bl	800ba5c <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009df6:	e00a      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dfe:	e006      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e00:	bf00      	nop
 8009e02:	e004      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e04:	bf00      	nop
 8009e06:	e002      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e08:	bf00      	nop
 8009e0a:	e000      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10b      	bne.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e16:	4b39      	ldr	r3, [pc, #228]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e26:	4a35      	ldr	r2, [pc, #212]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e2c:	e003      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e46:	2300      	movs	r3, #0
 8009e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009e4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4313      	orrs	r3, r2
 8009e54:	d058      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009e62:	d033      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009e64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009e68:	d82c      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e6e:	d02f      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e74:	d826      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e7a:	d02b      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009e7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e80:	d820      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e86:	d012      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e8c:	d81a      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d022      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e96:	d115      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 fd29 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009eac:	e015      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb2:	3328      	adds	r3, #40	@ 0x28
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fdd0 	bl	800ba5c <RCCEx_PLL3_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ec2:	e00a      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009eca:	e006      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ecc:	bf00      	nop
 8009ece:	e004      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ed0:	bf00      	nop
 8009ed2:	e002      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ed4:	bf00      	nop
 8009ed6:	e000      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10e      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ee2:	4b06      	ldr	r3, [pc, #24]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ee6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ef2:	4a02      	ldr	r2, [pc, #8]	@ (8009efc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ef8:	e006      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009efa:	bf00      	nop
 8009efc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009f22:	460b      	mov	r3, r1
 8009f24:	4313      	orrs	r3, r2
 8009f26:	d055      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f34:	d033      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009f36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f3a:	d82c      	bhi.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f40:	d02f      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f46:	d826      	bhi.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f4c:	d02b      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009f4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009f52:	d820      	bhi.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f58:	d012      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009f5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f5e:	d81a      	bhi.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d022      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f68:	d115      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6e:	3308      	adds	r3, #8
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fcc0 	bl	800b8f8 <RCCEx_PLL2_Config>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f7e:	e015      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f84:	3328      	adds	r3, #40	@ 0x28
 8009f86:	2102      	movs	r1, #2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f001 fd67 	bl	800ba5c <RCCEx_PLL3_Config>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009f94:	e00a      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f9c:	e006      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009f9e:	bf00      	nop
 8009fa0:	e004      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009fa2:	bf00      	nop
 8009fa4:	e002      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009fa6:	bf00      	nop
 8009fa8:	e000      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10b      	bne.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fc4:	4a9d      	ldr	r2, [pc, #628]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fc6:	430b      	orrs	r3, r1
 8009fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fca:	e003      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f002 0308 	and.w	r3, r2, #8
 8009fe0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	d01e      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a000:	d10c      	bne.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a006:	3328      	adds	r3, #40	@ 0x28
 800a008:	2102      	movs	r1, #2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fd26 	bl	800ba5c <RCCEx_PLL3_Config>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a01c:	4b87      	ldr	r3, [pc, #540]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a01e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a020:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a02c:	4a83      	ldr	r2, [pc, #524]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a02e:	430b      	orrs	r3, r1
 800a030:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f002 0310 	and.w	r3, r2, #16
 800a03e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a042:	2300      	movs	r3, #0
 800a044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a048:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a04c:	460b      	mov	r3, r1
 800a04e:	4313      	orrs	r3, r2
 800a050:	d01e      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a05a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a05e:	d10c      	bne.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a064:	3328      	adds	r3, #40	@ 0x28
 800a066:	2102      	movs	r1, #2
 800a068:	4618      	mov	r0, r3
 800a06a:	f001 fcf7 	bl	800ba5c <RCCEx_PLL3_Config>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a07a:	4b70      	ldr	r3, [pc, #448]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a07e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a08a:	4a6c      	ldr	r2, [pc, #432]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a09c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	d03e      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0bc:	d022      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a0be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0c2:	d81b      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0cc:	d00b      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a0ce:	e015      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 fc0d 	bl	800b8f8 <RCCEx_PLL2_Config>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a0e4:	e00f      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ea:	3328      	adds	r3, #40	@ 0x28
 800a0ec:	2102      	movs	r1, #2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 fcb4 	bl	800ba5c <RCCEx_PLL3_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a0fa:	e004      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a102:	e000      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a104:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10b      	bne.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a10e:	4b4b      	ldr	r3, [pc, #300]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a112:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a11e:	4a47      	ldr	r2, [pc, #284]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a120:	430b      	orrs	r3, r1
 800a122:	6593      	str	r3, [r2, #88]	@ 0x58
 800a124:	e003      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a12a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a13a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a13c:	2300      	movs	r3, #0
 800a13e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a140:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a144:	460b      	mov	r3, r1
 800a146:	4313      	orrs	r3, r2
 800a148:	d03b      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a156:	d01f      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a158:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a15c:	d818      	bhi.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a15e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a162:	d003      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a168:	d007      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a16a:	e011      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a16c:	4b33      	ldr	r3, [pc, #204]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a170:	4a32      	ldr	r2, [pc, #200]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a178:	e00f      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17e:	3328      	adds	r3, #40	@ 0x28
 800a180:	2101      	movs	r1, #1
 800a182:	4618      	mov	r0, r3
 800a184:	f001 fc6a 	bl	800ba5c <RCCEx_PLL3_Config>
 800a188:	4603      	mov	r3, r0
 800a18a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a18e:	e004      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a196:	e000      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a19a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10b      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1a2:	4b26      	ldr	r3, [pc, #152]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1b2:	4a22      	ldr	r2, [pc, #136]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1b4:	430b      	orrs	r3, r1
 800a1b6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1b8:	e003      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a1ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	d034      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d003      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a1e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1ec:	d007      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a1ee:	e011      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1f0:	4b12      	ldr	r3, [pc, #72]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f4:	4a11      	ldr	r2, [pc, #68]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a1fc:	e00e      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a202:	3308      	adds	r3, #8
 800a204:	2102      	movs	r1, #2
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fb76 	bl	800b8f8 <RCCEx_PLL2_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a212:	e003      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a21c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10d      	bne.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a224:	4b05      	ldr	r3, [pc, #20]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a228:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a232:	4a02      	ldr	r2, [pc, #8]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a234:	430b      	orrs	r3, r1
 800a236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a238:	e006      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a23a:	bf00      	nop
 800a23c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a254:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a256:	2300      	movs	r3, #0
 800a258:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a25a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a25e:	460b      	mov	r3, r1
 800a260:	4313      	orrs	r3, r2
 800a262:	d00c      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a268:	3328      	adds	r3, #40	@ 0x28
 800a26a:	2102      	movs	r1, #2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 fbf5 	bl	800ba5c <RCCEx_PLL3_Config>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a28a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a28c:	2300      	movs	r3, #0
 800a28e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a290:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a294:	460b      	mov	r3, r1
 800a296:	4313      	orrs	r3, r2
 800a298:	d038      	beq.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2a6:	d018      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a2a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2ac:	d811      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a2ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2b2:	d014      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2b8:	d80b      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d011      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a2be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2c2:	d106      	bne.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c4:	4bc3      	ldr	r3, [pc, #780]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c8:	4ac2      	ldr	r2, [pc, #776]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a2d0:	e008      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2d8:	e004      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10b      	bne.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a2ec:	4bb9      	ldr	r3, [pc, #740]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2fc:	4ab5      	ldr	r2, [pc, #724]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2fe:	430b      	orrs	r3, r1
 800a300:	6553      	str	r3, [r2, #84]	@ 0x54
 800a302:	e003      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a318:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a31a:	2300      	movs	r3, #0
 800a31c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a31e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a322:	460b      	mov	r3, r1
 800a324:	4313      	orrs	r3, r2
 800a326:	d009      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a328:	4baa      	ldr	r3, [pc, #680]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a32c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a336:	4aa7      	ldr	r2, [pc, #668]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a338:	430b      	orrs	r3, r1
 800a33a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a348:	653b      	str	r3, [r7, #80]	@ 0x50
 800a34a:	2300      	movs	r3, #0
 800a34c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a34e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a352:	460b      	mov	r3, r1
 800a354:	4313      	orrs	r3, r2
 800a356:	d00a      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a358:	4b9e      	ldr	r3, [pc, #632]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a364:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a368:	4a9a      	ldr	r2, [pc, #616]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a36a:	430b      	orrs	r3, r1
 800a36c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a37a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a37c:	2300      	movs	r3, #0
 800a37e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a380:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a384:	460b      	mov	r3, r1
 800a386:	4313      	orrs	r3, r2
 800a388:	d009      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a38a:	4b92      	ldr	r3, [pc, #584]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a38c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a38e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a398:	4a8e      	ldr	r2, [pc, #568]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a39a:	430b      	orrs	r3, r1
 800a39c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a3aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	d00e      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3ba:	4b86      	ldr	r3, [pc, #536]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	4a85      	ldr	r2, [pc, #532]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3c4:	6113      	str	r3, [r2, #16]
 800a3c6:	4b83      	ldr	r3, [pc, #524]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3c8:	6919      	ldr	r1, [r3, #16]
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a3d2:	4a80      	ldr	r2, [pc, #512]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	d009      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3f4:	4b77      	ldr	r3, [pc, #476]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a402:	4a74      	ldr	r2, [pc, #464]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a404:	430b      	orrs	r3, r1
 800a406:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a414:	633b      	str	r3, [r7, #48]	@ 0x30
 800a416:	2300      	movs	r3, #0
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a41e:	460b      	mov	r3, r1
 800a420:	4313      	orrs	r3, r2
 800a422:	d00a      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a424:	4b6b      	ldr	r3, [pc, #428]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a428:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a434:	4a67      	ldr	r2, [pc, #412]	@ (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a436:	430b      	orrs	r3, r1
 800a438:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	2100      	movs	r1, #0
 800a444:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a44c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a450:	460b      	mov	r3, r1
 800a452:	4313      	orrs	r3, r2
 800a454:	d011      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45a:	3308      	adds	r3, #8
 800a45c:	2100      	movs	r1, #0
 800a45e:	4618      	mov	r0, r3
 800a460:	f001 fa4a 	bl	800b8f8 <RCCEx_PLL2_Config>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a46a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	2100      	movs	r1, #0
 800a484:	6239      	str	r1, [r7, #32]
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a48c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a490:	460b      	mov	r3, r1
 800a492:	4313      	orrs	r3, r2
 800a494:	d011      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a49a:	3308      	adds	r3, #8
 800a49c:	2101      	movs	r1, #1
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 fa2a 	bl	800b8f8 <RCCEx_PLL2_Config>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a4aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	61b9      	str	r1, [r7, #24]
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	61fb      	str	r3, [r7, #28]
 800a4cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	d011      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4da:	3308      	adds	r3, #8
 800a4dc:	2102      	movs	r1, #2
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f001 fa0a 	bl	800b8f8 <RCCEx_PLL2_Config>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a4ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	2100      	movs	r1, #0
 800a504:	6139      	str	r1, [r7, #16]
 800a506:	f003 0308 	and.w	r3, r3, #8
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a510:	460b      	mov	r3, r1
 800a512:	4313      	orrs	r3, r2
 800a514:	d011      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51a:	3328      	adds	r3, #40	@ 0x28
 800a51c:	2100      	movs	r1, #0
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 fa9c 	bl	800ba5c <RCCEx_PLL3_Config>
 800a524:	4603      	mov	r3, r0
 800a526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a52a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	2100      	movs	r1, #0
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	f003 0310 	and.w	r3, r3, #16
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a550:	460b      	mov	r3, r1
 800a552:	4313      	orrs	r3, r2
 800a554:	d011      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a55a:	3328      	adds	r3, #40	@ 0x28
 800a55c:	2101      	movs	r1, #1
 800a55e:	4618      	mov	r0, r3
 800a560:	f001 fa7c 	bl	800ba5c <RCCEx_PLL3_Config>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a56a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	2100      	movs	r1, #0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	607b      	str	r3, [r7, #4]
 800a58c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a590:	460b      	mov	r3, r1
 800a592:	4313      	orrs	r3, r2
 800a594:	d011      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59a:	3328      	adds	r3, #40	@ 0x28
 800a59c:	2102      	movs	r1, #2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 fa5c 	bl	800ba5c <RCCEx_PLL3_Config>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a5ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	e000      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5d4:	58024400 	.word	0x58024400

0800a5d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b090      	sub	sp, #64	@ 0x40
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	f040 8094 	bne.w	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a5f0:	4b9e      	ldr	r3, [pc, #632]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	f200 8087 	bhi.w	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a602:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a61d 	.word	0x0800a61d
 800a60c:	0800a645 	.word	0x0800a645
 800a610:	0800a66d 	.word	0x0800a66d
 800a614:	0800a709 	.word	0x0800a709
 800a618:	0800a695 	.word	0x0800a695
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61c:	4b93      	ldr	r3, [pc, #588]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a628:	d108      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a62a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62e:	4618      	mov	r0, r3
 800a630:	f001 f810 	bl	800b654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a638:	f000 bd45 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a640:	f000 bd41 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a644:	4b89      	ldr	r3, [pc, #548]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a64c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a650:	d108      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a652:	f107 0318 	add.w	r3, r7, #24
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fd54 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a660:	f000 bd31 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a668:	f000 bd2d 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a66c:	4b7f      	ldr	r3, [pc, #508]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a678:	d108      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a67a:	f107 030c 	add.w	r3, r7, #12
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 fe94 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a688:	f000 bd1d 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a690:	f000 bd19 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a694:	4b75      	ldr	r3, [pc, #468]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a698:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a69c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a69e:	4b73      	ldr	r3, [pc, #460]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d10c      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d109      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b0:	4b6e      	ldr	r3, [pc, #440]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	08db      	lsrs	r3, r3, #3
 800a6b6:	f003 0303 	and.w	r3, r3, #3
 800a6ba:	4a6d      	ldr	r2, [pc, #436]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c2:	e01f      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6c4:	4b69      	ldr	r3, [pc, #420]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6d0:	d106      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6d8:	d102      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6da:	4b66      	ldr	r3, [pc, #408]	@ (800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6de:	e011      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6e0:	4b62      	ldr	r3, [pc, #392]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ec:	d106      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f4:	d102      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6f6:	4b60      	ldr	r3, [pc, #384]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6fa:	e003      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a700:	f000 bce1 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a704:	f000 bcdf 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a708:	4b5c      	ldr	r3, [pc, #368]	@ (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70c:	f000 bcdb 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a714:	f000 bcd7 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a720:	430b      	orrs	r3, r1
 800a722:	f040 80ad 	bne.w	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a726:	4b51      	ldr	r3, [pc, #324]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a72e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a736:	d056      	beq.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a73e:	f200 8090 	bhi.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	2bc0      	cmp	r3, #192	@ 0xc0
 800a746:	f000 8088 	beq.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a74e:	f200 8088 	bhi.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	2b80      	cmp	r3, #128	@ 0x80
 800a756:	d032      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	2b80      	cmp	r3, #128	@ 0x80
 800a75c:	f200 8081 	bhi.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	2b40      	cmp	r3, #64	@ 0x40
 800a76a:	d014      	beq.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a76c:	e079      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a76e:	4b3f      	ldr	r3, [pc, #252]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a776:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a77a:	d108      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a77c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a780:	4618      	mov	r0, r3
 800a782:	f000 ff67 	bl	800b654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a78a:	f000 bc9c 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a792:	f000 bc98 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a796:	4b35      	ldr	r3, [pc, #212]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a79e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a2:	d108      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7a4:	f107 0318 	add.w	r3, r7, #24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fcab 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b2:	f000 bc88 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ba:	f000 bc84 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7be:	4b2b      	ldr	r3, [pc, #172]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ca:	d108      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7cc:	f107 030c 	add.w	r3, r7, #12
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fdeb 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7da:	f000 bc74 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e2:	f000 bc70 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7e6:	4b21      	ldr	r3, [pc, #132]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0304 	and.w	r3, r3, #4
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	d10c      	bne.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d109      	bne.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a802:	4b1a      	ldr	r3, [pc, #104]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	08db      	lsrs	r3, r3, #3
 800a808:	f003 0303 	and.w	r3, r3, #3
 800a80c:	4a18      	ldr	r2, [pc, #96]	@ (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a80e:	fa22 f303 	lsr.w	r3, r2, r3
 800a812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a814:	e01f      	b.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a816:	4b15      	ldr	r3, [pc, #84]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a822:	d106      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a82a:	d102      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a82c:	4b11      	ldr	r3, [pc, #68]	@ (800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a830:	e011      	b.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a832:	4b0e      	ldr	r3, [pc, #56]	@ (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a83a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a83e:	d106      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a846:	d102      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a848:	4b0b      	ldr	r3, [pc, #44]	@ (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a84c:	e003      	b.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a852:	f000 bc38 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a856:	f000 bc36 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a85a:	4b08      	ldr	r3, [pc, #32]	@ (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85e:	f000 bc32 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a866:	f000 bc2e 	b.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a86a:	bf00      	nop
 800a86c:	58024400 	.word	0x58024400
 800a870:	03d09000 	.word	0x03d09000
 800a874:	003d0900 	.word	0x003d0900
 800a878:	017d7840 	.word	0x017d7840
 800a87c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a880:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a884:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a888:	430b      	orrs	r3, r1
 800a88a:	f040 809c 	bne.w	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a88e:	4b9e      	ldr	r3, [pc, #632]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a892:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a896:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a89e:	d054      	beq.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a8a6:	f200 808b 	bhi.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a8b0:	f000 8083 	beq.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a8ba:	f200 8081 	bhi.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8c4:	d02f      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8cc:	d878      	bhi.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d004      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8da:	d012      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a8dc:	e070      	b.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8de:	4b8a      	ldr	r3, [pc, #552]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ea:	d107      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 feaf 	bl	800b654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fa:	e3e4      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e3e1      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a902:	4b81      	ldr	r3, [pc, #516]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a90a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a90e:	d107      	bne.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a910:	f107 0318 	add.w	r3, r7, #24
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fbf5 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91e:	e3d2      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e3cf      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a926:	4b78      	ldr	r3, [pc, #480]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a92e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a932:	d107      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a934:	f107 030c 	add.w	r3, r7, #12
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 fd37 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a942:	e3c0      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a948:	e3bd      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a94a:	4b6f      	ldr	r3, [pc, #444]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a94c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a94e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a952:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a954:	4b6c      	ldr	r3, [pc, #432]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d10c      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a962:	2b00      	cmp	r3, #0
 800a964:	d109      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a966:	4b68      	ldr	r3, [pc, #416]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	08db      	lsrs	r3, r3, #3
 800a96c:	f003 0303 	and.w	r3, r3, #3
 800a970:	4a66      	ldr	r2, [pc, #408]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a972:	fa22 f303 	lsr.w	r3, r2, r3
 800a976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a978:	e01e      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a97a:	4b63      	ldr	r3, [pc, #396]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a986:	d106      	bne.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a98e:	d102      	bne.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a990:	4b5f      	ldr	r3, [pc, #380]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a994:	e010      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a996:	4b5c      	ldr	r3, [pc, #368]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a99e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9a2:	d106      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9aa:	d102      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9ac:	4b59      	ldr	r3, [pc, #356]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9b0:	e002      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9b6:	e386      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9b8:	e385      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9ba:	4b57      	ldr	r3, [pc, #348]	@ (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9be:	e382      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c4:	e37f      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a9c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	f040 80a7 	bne.w	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a9d4:	4b4c      	ldr	r3, [pc, #304]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9d8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a9dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9e4:	d055      	beq.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9ec:	f200 8096 	bhi.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9f6:	f000 8084 	beq.w	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aa00:	f200 808c 	bhi.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa0a:	d030      	beq.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa12:	f200 8083 	bhi.w	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa22:	d012      	beq.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aa24:	e07a      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa26:	4b38      	ldr	r3, [pc, #224]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa32:	d107      	bne.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fe0b 	bl	800b654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa42:	e340      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa48:	e33d      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa4a:	4b2f      	ldr	r3, [pc, #188]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa56:	d107      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa58:	f107 0318 	add.w	r3, r7, #24
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fb51 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa66:	e32e      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6c:	e32b      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa6e:	4b26      	ldr	r3, [pc, #152]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa7a:	d107      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa7c:	f107 030c 	add.w	r3, r7, #12
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 fc93 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa8a:	e31c      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa90:	e319      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa92:	4b1d      	ldr	r3, [pc, #116]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d10c      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d109      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaae:	4b16      	ldr	r3, [pc, #88]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	08db      	lsrs	r3, r3, #3
 800aab4:	f003 0303 	and.w	r3, r3, #3
 800aab8:	4a14      	ldr	r2, [pc, #80]	@ (800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aaba:	fa22 f303 	lsr.w	r3, r2, r3
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aac0:	e01e      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aac2:	4b11      	ldr	r3, [pc, #68]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aace:	d106      	bne.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aad6:	d102      	bne.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aad8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aadc:	e010      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aade:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaea:	d106      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800aaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf2:	d102      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaf4:	4b07      	ldr	r3, [pc, #28]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf8:	e002      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aafe:	e2e2      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab00:	e2e1      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab02:	4b05      	ldr	r3, [pc, #20]	@ (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab06:	e2de      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab08:	58024400 	.word	0x58024400
 800ab0c:	03d09000 	.word	0x03d09000
 800ab10:	003d0900 	.word	0x003d0900
 800ab14:	017d7840 	.word	0x017d7840
 800ab18:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab20:	e2d1      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ab22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab26:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ab2a:	430b      	orrs	r3, r1
 800ab2c:	f040 809c 	bne.w	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ab30:	4b93      	ldr	r3, [pc, #588]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab34:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ab38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab40:	d054      	beq.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ab42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab48:	f200 808b 	bhi.w	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab52:	f000 8083 	beq.w	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ab56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab5c:	f200 8081 	bhi.w	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab66:	d02f      	beq.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab6e:	d878      	bhi.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d004      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab7c:	d012      	beq.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ab7e:	e070      	b.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab80:	4b7f      	ldr	r3, [pc, #508]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab8c:	d107      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fd5e 	bl	800b654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9c:	e293      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba2:	e290      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aba4:	4b76      	ldr	r3, [pc, #472]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abb0:	d107      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abb2:	f107 0318 	add.w	r3, r7, #24
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 faa4 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc0:	e281      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc6:	e27e      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abc8:	4b6d      	ldr	r3, [pc, #436]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abd4:	d107      	bne.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abd6:	f107 030c 	add.w	r3, r7, #12
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 fbe6 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abe4:	e26f      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abea:	e26c      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abec:	4b64      	ldr	r3, [pc, #400]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abf4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abf6:	4b62      	ldr	r3, [pc, #392]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0304 	and.w	r3, r3, #4
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d10c      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ac02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d109      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac08:	4b5d      	ldr	r3, [pc, #372]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	08db      	lsrs	r3, r3, #3
 800ac0e:	f003 0303 	and.w	r3, r3, #3
 800ac12:	4a5c      	ldr	r2, [pc, #368]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ac14:	fa22 f303 	lsr.w	r3, r2, r3
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac1a:	e01e      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac1c:	4b58      	ldr	r3, [pc, #352]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac28:	d106      	bne.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac30:	d102      	bne.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac32:	4b55      	ldr	r3, [pc, #340]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac36:	e010      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac38:	4b51      	ldr	r3, [pc, #324]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac44:	d106      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ac46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac4c:	d102      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac4e:	4b4f      	ldr	r3, [pc, #316]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac52:	e002      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac58:	e235      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac5a:	e234      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac5c:	4b4c      	ldr	r3, [pc, #304]	@ (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac60:	e231      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac66:	e22e      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac6c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ac70:	430b      	orrs	r3, r1
 800ac72:	f040 808f 	bne.w	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac76:	4b42      	ldr	r3, [pc, #264]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac7a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ac7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac86:	d06b      	beq.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ac88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac8e:	d874      	bhi.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ac90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac96:	d056      	beq.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ac98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac9e:	d86c      	bhi.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aca6:	d03b      	beq.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acae:	d864      	bhi.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800acb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acb6:	d021      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800acb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acbe:	d85c      	bhi.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800acc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d004      	beq.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800acc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800accc:	d004      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800acce:	e054      	b.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800acd0:	f7fe fa20 	bl	8009114 <HAL_RCC_GetPCLK1Freq>
 800acd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acd6:	e1f6      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acd8:	4b29      	ldr	r3, [pc, #164]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ace0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ace4:	d107      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ace6:	f107 0318 	add.w	r3, r7, #24
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fa0a 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf4:	e1e7      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfa:	e1e4      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acfc:	4b20      	ldr	r3, [pc, #128]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad08:	d107      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fb4c 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad18:	e1d5      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad1e:	e1d2      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad20:	4b17      	ldr	r3, [pc, #92]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0304 	and.w	r3, r3, #4
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	d109      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad2c:	4b14      	ldr	r3, [pc, #80]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	08db      	lsrs	r3, r3, #3
 800ad32:	f003 0303 	and.w	r3, r3, #3
 800ad36:	4a13      	ldr	r2, [pc, #76]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad3e:	e1c2      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad44:	e1bf      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad46:	4b0e      	ldr	r3, [pc, #56]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad52:	d102      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ad54:	4b0c      	ldr	r3, [pc, #48]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad58:	e1b5      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5e:	e1b2      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad60:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad6c:	d102      	bne.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ad6e:	4b07      	ldr	r3, [pc, #28]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad72:	e1a8      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad78:	e1a5      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7e:	e1a2      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad80:	58024400 	.word	0x58024400
 800ad84:	03d09000 	.word	0x03d09000
 800ad88:	003d0900 	.word	0x003d0900
 800ad8c:	017d7840 	.word	0x017d7840
 800ad90:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ad94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad98:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	d173      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ada0:	4b9c      	ldr	r3, [pc, #624]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ada2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ada4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ada8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adb0:	d02f      	beq.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800adb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adb8:	d863      	bhi.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800adba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc6:	d012      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800adc8:	e05b      	b.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adca:	4b92      	ldr	r3, [pc, #584]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800add2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800add6:	d107      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add8:	f107 0318 	add.w	r3, r7, #24
 800addc:	4618      	mov	r0, r3
 800adde:	f000 f991 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade6:	e16e      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adec:	e16b      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adee:	4b89      	ldr	r3, [pc, #548]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adfa:	d107      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adfc:	f107 030c 	add.w	r3, r7, #12
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 fad3 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0a:	e15c      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae10:	e159      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae12:	4b80      	ldr	r3, [pc, #512]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae1c:	4b7d      	ldr	r3, [pc, #500]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d10c      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ae28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae2e:	4b79      	ldr	r3, [pc, #484]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	08db      	lsrs	r3, r3, #3
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	4a77      	ldr	r2, [pc, #476]	@ (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae40:	e01e      	b.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae42:	4b74      	ldr	r3, [pc, #464]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae4e:	d106      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ae50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae56:	d102      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae58:	4b70      	ldr	r3, [pc, #448]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae5c:	e010      	b.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae5e:	4b6d      	ldr	r3, [pc, #436]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae6a:	d106      	bne.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae72:	d102      	bne.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae74:	4b6a      	ldr	r3, [pc, #424]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae78:	e002      	b.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae7e:	e122      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae80:	e121      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae86:	e11e      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae8c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ae90:	430b      	orrs	r3, r1
 800ae92:	d133      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae94:	4b5f      	ldr	r3, [pc, #380]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d004      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeaa:	d012      	beq.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aeac:	e023      	b.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aeae:	4b59      	ldr	r3, [pc, #356]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aeba:	d107      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 fbc7 	bl	800b654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeca:	e0fc      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed0:	e0f9      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aed2:	4b50      	ldr	r3, [pc, #320]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aede:	d107      	bne.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee0:	f107 0318 	add.w	r3, r7, #24
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 f90d 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeee:	e0ea      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef4:	e0e7      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aefa:	e0e4      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aefc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af00:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800af04:	430b      	orrs	r3, r1
 800af06:	f040 808d 	bne.w	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800af0a:	4b42      	ldr	r3, [pc, #264]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af0e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800af12:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af1a:	d06b      	beq.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800af1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af22:	d874      	bhi.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af2a:	d056      	beq.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af32:	d86c      	bhi.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af3a:	d03b      	beq.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af42:	d864      	bhi.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af4a:	d021      	beq.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800af4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af52:	d85c      	bhi.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800af54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800af5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af60:	d004      	beq.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800af62:	e054      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af64:	f000 f8b8 	bl	800b0d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800af68:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af6a:	e0ac      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af6c:	4b29      	ldr	r3, [pc, #164]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af78:	d107      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af7a:	f107 0318 	add.w	r3, r7, #24
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 f8c0 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af88:	e09d      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8e:	e09a      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af90:	4b20      	ldr	r3, [pc, #128]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af9c:	d107      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af9e:	f107 030c 	add.w	r3, r7, #12
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fa02 	bl	800b3ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afac:	e08b      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afb2:	e088      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afb4:	4b17      	ldr	r3, [pc, #92]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d109      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc0:	4b14      	ldr	r3, [pc, #80]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	08db      	lsrs	r3, r3, #3
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	4a13      	ldr	r2, [pc, #76]	@ (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800afcc:	fa22 f303 	lsr.w	r3, r2, r3
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd2:	e078      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd8:	e075      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afda:	4b0e      	ldr	r3, [pc, #56]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afe6:	d102      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800afe8:	4b0c      	ldr	r3, [pc, #48]	@ (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800afea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afec:	e06b      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff2:	e068      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aff4:	4b07      	ldr	r3, [pc, #28]	@ (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800affc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b000:	d102      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b002:	4b07      	ldr	r3, [pc, #28]	@ (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b006:	e05e      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b00c:	e05b      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b012:	e058      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b014:	58024400 	.word	0x58024400
 800b018:	03d09000 	.word	0x03d09000
 800b01c:	003d0900 	.word	0x003d0900
 800b020:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b028:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b02c:	430b      	orrs	r3, r1
 800b02e:	d148      	bne.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b030:	4b27      	ldr	r3, [pc, #156]	@ (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b038:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b040:	d02a      	beq.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b048:	d838      	bhi.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d004      	beq.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b056:	d00d      	beq.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b058:	e030      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b05a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b062:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b066:	d102      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b068:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b06c:	e02b      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b072:	e028      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b074:	4b16      	ldr	r3, [pc, #88]	@ (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b07c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b080:	d107      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b086:	4618      	mov	r0, r3
 800b088:	f000 fae4 	bl	800b654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b090:	e019      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b096:	e016      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b098:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0a4:	d107      	bne.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a6:	f107 0318 	add.w	r3, r7, #24
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f82a 	bl	800b104 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b4:	e007      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ba:	e004      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c0:	e001      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3740      	adds	r7, #64	@ 0x40
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	58024400 	.word	0x58024400
 800b0d4:	017d7840 	.word	0x017d7840

0800b0d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b0dc:	f7fd ffea 	bl	80090b4 <HAL_RCC_GetHCLKFreq>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	4b06      	ldr	r3, [pc, #24]	@ (800b0fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	091b      	lsrs	r3, r3, #4
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	4904      	ldr	r1, [pc, #16]	@ (800b100 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b0ee:	5ccb      	ldrb	r3, [r1, r3]
 800b0f0:	f003 031f 	and.w	r3, r3, #31
 800b0f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	58024400 	.word	0x58024400
 800b100:	08015344 	.word	0x08015344

0800b104 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b104:	b480      	push	{r7}
 800b106:	b089      	sub	sp, #36	@ 0x24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b10c:	4ba1      	ldr	r3, [pc, #644]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b110:	f003 0303 	and.w	r3, r3, #3
 800b114:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b116:	4b9f      	ldr	r3, [pc, #636]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11a:	0b1b      	lsrs	r3, r3, #12
 800b11c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b120:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b122:	4b9c      	ldr	r3, [pc, #624]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b126:	091b      	lsrs	r3, r3, #4
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b12e:	4b99      	ldr	r3, [pc, #612]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b132:	08db      	lsrs	r3, r3, #3
 800b134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	fb02 f303 	mul.w	r3, r2, r3
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b146:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 8111 	beq.w	800b374 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	2b02      	cmp	r3, #2
 800b156:	f000 8083 	beq.w	800b260 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	f200 80a1 	bhi.w	800b2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d056      	beq.n	800b21c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b16e:	e099      	b.n	800b2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b170:	4b88      	ldr	r3, [pc, #544]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0320 	and.w	r3, r3, #32
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d02d      	beq.n	800b1d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b17c:	4b85      	ldr	r3, [pc, #532]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	08db      	lsrs	r3, r3, #3
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	4a84      	ldr	r2, [pc, #528]	@ (800b398 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b188:	fa22 f303 	lsr.w	r3, r2, r3
 800b18c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	ee07 3a90 	vmov	s15, r3
 800b194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a6:	4b7b      	ldr	r3, [pc, #492]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b39c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1d6:	e087      	b.n	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ea:	4b6a      	ldr	r3, [pc, #424]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f2:	ee07 3a90 	vmov	s15, r3
 800b1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b39c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b21a:	e065      	b.n	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b226:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22e:	4b59      	ldr	r3, [pc, #356]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b242:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b39c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b25e:	e043      	b.n	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b272:	4b48      	ldr	r3, [pc, #288]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b282:	ed97 6a03 	vldr	s12, [r7, #12]
 800b286:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b39c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b29e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2a2:	e021      	b.n	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2b6:	4b37      	ldr	r3, [pc, #220]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b39c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b2e8:	4b2a      	ldr	r3, [pc, #168]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ec:	0a5b      	lsrs	r3, r3, #9
 800b2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b302:	edd7 6a07 	vldr	s13, [r7, #28]
 800b306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b30a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b30e:	ee17 2a90 	vmov	r2, s15
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b316:	4b1f      	ldr	r3, [pc, #124]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31a:	0c1b      	lsrs	r3, r3, #16
 800b31c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b32c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b330:	edd7 6a07 	vldr	s13, [r7, #28]
 800b334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b33c:	ee17 2a90 	vmov	r2, s15
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b344:	4b13      	ldr	r3, [pc, #76]	@ (800b394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b348:	0e1b      	lsrs	r3, r3, #24
 800b34a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b35a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b35e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b36a:	ee17 2a90 	vmov	r2, s15
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b372:	e008      	b.n	800b386 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	609a      	str	r2, [r3, #8]
}
 800b386:	bf00      	nop
 800b388:	3724      	adds	r7, #36	@ 0x24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	58024400 	.word	0x58024400
 800b398:	03d09000 	.word	0x03d09000
 800b39c:	46000000 	.word	0x46000000
 800b3a0:	4c742400 	.word	0x4c742400
 800b3a4:	4a742400 	.word	0x4a742400
 800b3a8:	4bbebc20 	.word	0x4bbebc20

0800b3ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b089      	sub	sp, #36	@ 0x24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3b4:	4ba1      	ldr	r3, [pc, #644]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b8:	f003 0303 	and.w	r3, r3, #3
 800b3bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b3be:	4b9f      	ldr	r3, [pc, #636]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c2:	0d1b      	lsrs	r3, r3, #20
 800b3c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b3ca:	4b9c      	ldr	r3, [pc, #624]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ce:	0a1b      	lsrs	r3, r3, #8
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b3d6:	4b99      	ldr	r3, [pc, #612]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3da:	08db      	lsrs	r3, r3, #3
 800b3dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	fb02 f303 	mul.w	r3, r2, r3
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 8111 	beq.w	800b61c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	f000 8083 	beq.w	800b508 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	2b02      	cmp	r3, #2
 800b406:	f200 80a1 	bhi.w	800b54c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d056      	beq.n	800b4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b416:	e099      	b.n	800b54c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b418:	4b88      	ldr	r3, [pc, #544]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 0320 	and.w	r3, r3, #32
 800b420:	2b00      	cmp	r3, #0
 800b422:	d02d      	beq.n	800b480 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b424:	4b85      	ldr	r3, [pc, #532]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	08db      	lsrs	r3, r3, #3
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	4a84      	ldr	r2, [pc, #528]	@ (800b640 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b430:	fa22 f303 	lsr.w	r3, r2, r3
 800b434:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	ee07 3a90 	vmov	s15, r3
 800b43c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	ee07 3a90 	vmov	s15, r3
 800b446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44e:	4b7b      	ldr	r3, [pc, #492]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b462:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b47e:	e087      	b.n	800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b648 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b492:	4b6a      	ldr	r3, [pc, #424]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49a:	ee07 3a90 	vmov	s15, r3
 800b49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4c2:	e065      	b.n	800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d6:	4b59      	ldr	r3, [pc, #356]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4de:	ee07 3a90 	vmov	s15, r3
 800b4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b506:	e043      	b.n	800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	ee07 3a90 	vmov	s15, r3
 800b50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b512:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51a:	4b48      	ldr	r3, [pc, #288]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b52e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b54a:	e021      	b.n	800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	ee07 3a90 	vmov	s15, r3
 800b552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b556:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b64c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b55a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b55e:	4b37      	ldr	r3, [pc, #220]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b56e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b572:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b57e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b58e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b590:	4b2a      	ldr	r3, [pc, #168]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b594:	0a5b      	lsrs	r3, r3, #9
 800b596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5b6:	ee17 2a90 	vmov	r2, s15
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b5be:	4b1f      	ldr	r3, [pc, #124]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c2:	0c1b      	lsrs	r3, r3, #16
 800b5c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5c8:	ee07 3a90 	vmov	s15, r3
 800b5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5e4:	ee17 2a90 	vmov	r2, s15
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5ec:	4b13      	ldr	r3, [pc, #76]	@ (800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f0:	0e1b      	lsrs	r3, r3, #24
 800b5f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b602:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b606:	edd7 6a07 	vldr	s13, [r7, #28]
 800b60a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b60e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b612:	ee17 2a90 	vmov	r2, s15
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b61a:	e008      	b.n	800b62e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	609a      	str	r2, [r3, #8]
}
 800b62e:	bf00      	nop
 800b630:	3724      	adds	r7, #36	@ 0x24
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	58024400 	.word	0x58024400
 800b640:	03d09000 	.word	0x03d09000
 800b644:	46000000 	.word	0x46000000
 800b648:	4c742400 	.word	0x4c742400
 800b64c:	4a742400 	.word	0x4a742400
 800b650:	4bbebc20 	.word	0x4bbebc20

0800b654 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b654:	b480      	push	{r7}
 800b656:	b089      	sub	sp, #36	@ 0x24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b65c:	4ba0      	ldr	r3, [pc, #640]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b660:	f003 0303 	and.w	r3, r3, #3
 800b664:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b666:	4b9e      	ldr	r3, [pc, #632]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66a:	091b      	lsrs	r3, r3, #4
 800b66c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b670:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b672:	4b9b      	ldr	r3, [pc, #620]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b67c:	4b98      	ldr	r3, [pc, #608]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b680:	08db      	lsrs	r3, r3, #3
 800b682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	fb02 f303 	mul.w	r3, r2, r3
 800b68c:	ee07 3a90 	vmov	s15, r3
 800b690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b694:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 8111 	beq.w	800b8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	f000 8083 	beq.w	800b7ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	f200 80a1 	bhi.w	800b7f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d003      	beq.n	800b6be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d056      	beq.n	800b76a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b6bc:	e099      	b.n	800b7f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6be:	4b88      	ldr	r3, [pc, #544]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0320 	and.w	r3, r3, #32
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d02d      	beq.n	800b726 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6ca:	4b85      	ldr	r3, [pc, #532]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	08db      	lsrs	r3, r3, #3
 800b6d0:	f003 0303 	and.w	r3, r3, #3
 800b6d4:	4a83      	ldr	r2, [pc, #524]	@ (800b8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	ee07 3a90 	vmov	s15, r3
 800b6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f4:	4b7a      	ldr	r3, [pc, #488]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fc:	ee07 3a90 	vmov	s15, r3
 800b700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b704:	ed97 6a03 	vldr	s12, [r7, #12]
 800b708:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b70c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b720:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b724:	e087      	b.n	800b836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	ee07 3a90 	vmov	s15, r3
 800b72c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b730:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b8ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b738:	4b69      	ldr	r3, [pc, #420]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b740:	ee07 3a90 	vmov	s15, r3
 800b744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b748:	ed97 6a03 	vldr	s12, [r7, #12]
 800b74c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b75c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b760:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b764:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b768:	e065      	b.n	800b836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	ee07 3a90 	vmov	s15, r3
 800b770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b774:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b77c:	4b58      	ldr	r3, [pc, #352]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b77e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b784:	ee07 3a90 	vmov	s15, r3
 800b788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b790:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b79c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ac:	e043      	b.n	800b836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	ee07 3a90 	vmov	s15, r3
 800b7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b8f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b7bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c0:	4b47      	ldr	r3, [pc, #284]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c8:	ee07 3a90 	vmov	s15, r3
 800b7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7d4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7f0:	e021      	b.n	800b836 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	ee07 3a90 	vmov	s15, r3
 800b7f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b8ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b804:	4b36      	ldr	r3, [pc, #216]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b80c:	ee07 3a90 	vmov	s15, r3
 800b810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b814:	ed97 6a03 	vldr	s12, [r7, #12]
 800b818:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b81c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b82c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b834:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b836:	4b2a      	ldr	r3, [pc, #168]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83a:	0a5b      	lsrs	r3, r3, #9
 800b83c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b848:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b84c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b850:	edd7 6a07 	vldr	s13, [r7, #28]
 800b854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b85c:	ee17 2a90 	vmov	r2, s15
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b864:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b868:	0c1b      	lsrs	r3, r3, #16
 800b86a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b86e:	ee07 3a90 	vmov	s15, r3
 800b872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b87a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b87e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88a:	ee17 2a90 	vmov	r2, s15
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b892:	4b13      	ldr	r3, [pc, #76]	@ (800b8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b896:	0e1b      	lsrs	r3, r3, #24
 800b898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b8:	ee17 2a90 	vmov	r2, s15
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b8c0:	e008      	b.n	800b8d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	609a      	str	r2, [r3, #8]
}
 800b8d4:	bf00      	nop
 800b8d6:	3724      	adds	r7, #36	@ 0x24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	58024400 	.word	0x58024400
 800b8e4:	03d09000 	.word	0x03d09000
 800b8e8:	46000000 	.word	0x46000000
 800b8ec:	4c742400 	.word	0x4c742400
 800b8f0:	4a742400 	.word	0x4a742400
 800b8f4:	4bbebc20 	.word	0x4bbebc20

0800b8f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b906:	4b53      	ldr	r3, [pc, #332]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d101      	bne.n	800b916 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e099      	b.n	800ba4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b916:	4b4f      	ldr	r3, [pc, #316]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a4e      	ldr	r2, [pc, #312]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b91c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b922:	f7f6 f9f9 	bl	8001d18 <HAL_GetTick>
 800b926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b928:	e008      	b.n	800b93c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b92a:	f7f6 f9f5 	bl	8001d18 <HAL_GetTick>
 800b92e:	4602      	mov	r2, r0
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	2b02      	cmp	r3, #2
 800b936:	d901      	bls.n	800b93c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b938:	2303      	movs	r3, #3
 800b93a:	e086      	b.n	800ba4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b93c:	4b45      	ldr	r3, [pc, #276]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1f0      	bne.n	800b92a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b948:	4b42      	ldr	r3, [pc, #264]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	031b      	lsls	r3, r3, #12
 800b956:	493f      	ldr	r1, [pc, #252]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	3b01      	subs	r3, #1
 800b962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	3b01      	subs	r3, #1
 800b96c:	025b      	lsls	r3, r3, #9
 800b96e:	b29b      	uxth	r3, r3
 800b970:	431a      	orrs	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	3b01      	subs	r3, #1
 800b978:	041b      	lsls	r3, r3, #16
 800b97a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	3b01      	subs	r3, #1
 800b986:	061b      	lsls	r3, r3, #24
 800b988:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b98c:	4931      	ldr	r1, [pc, #196]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b992:	4b30      	ldr	r3, [pc, #192]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	492d      	ldr	r1, [pc, #180]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b9a4:	4b2b      	ldr	r3, [pc, #172]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a8:	f023 0220 	bic.w	r2, r3, #32
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	4928      	ldr	r1, [pc, #160]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b9b6:	4b27      	ldr	r3, [pc, #156]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ba:	4a26      	ldr	r2, [pc, #152]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9bc:	f023 0310 	bic.w	r3, r3, #16
 800b9c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b9c2:	4b24      	ldr	r3, [pc, #144]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9c6:	4b24      	ldr	r3, [pc, #144]	@ (800ba58 <RCCEx_PLL2_Config+0x160>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	69d2      	ldr	r2, [r2, #28]
 800b9ce:	00d2      	lsls	r2, r2, #3
 800b9d0:	4920      	ldr	r1, [pc, #128]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b9d6:	4b1f      	ldr	r3, [pc, #124]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9da:	4a1e      	ldr	r2, [pc, #120]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9dc:	f043 0310 	orr.w	r3, r3, #16
 800b9e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d106      	bne.n	800b9f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9e8:	4b1a      	ldr	r3, [pc, #104]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ec:	4a19      	ldr	r2, [pc, #100]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b9f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9f4:	e00f      	b.n	800ba16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d106      	bne.n	800ba0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b9fc:	4b15      	ldr	r3, [pc, #84]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800b9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba00:	4a14      	ldr	r2, [pc, #80]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800ba02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba08:	e005      	b.n	800ba16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba0a:	4b12      	ldr	r3, [pc, #72]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800ba0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0e:	4a11      	ldr	r2, [pc, #68]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800ba10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ba14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ba16:	4b0f      	ldr	r3, [pc, #60]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a0e      	ldr	r2, [pc, #56]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800ba1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba22:	f7f6 f979 	bl	8001d18 <HAL_GetTick>
 800ba26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba28:	e008      	b.n	800ba3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba2a:	f7f6 f975 	bl	8001d18 <HAL_GetTick>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d901      	bls.n	800ba3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e006      	b.n	800ba4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba3c:	4b05      	ldr	r3, [pc, #20]	@ (800ba54 <RCCEx_PLL2_Config+0x15c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0f0      	beq.n	800ba2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	58024400 	.word	0x58024400
 800ba58:	ffff0007 	.word	0xffff0007

0800ba5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba6a:	4b53      	ldr	r3, [pc, #332]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d101      	bne.n	800ba7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e099      	b.n	800bbae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba7a:	4b4f      	ldr	r3, [pc, #316]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a4e      	ldr	r2, [pc, #312]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800ba80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba86:	f7f6 f947 	bl	8001d18 <HAL_GetTick>
 800ba8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba8c:	e008      	b.n	800baa0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba8e:	f7f6 f943 	bl	8001d18 <HAL_GetTick>
 800ba92:	4602      	mov	r2, r0
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d901      	bls.n	800baa0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e086      	b.n	800bbae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800baa0:	4b45      	ldr	r3, [pc, #276]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1f0      	bne.n	800ba8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800baac:	4b42      	ldr	r3, [pc, #264]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800baae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	051b      	lsls	r3, r3, #20
 800baba:	493f      	ldr	r1, [pc, #252]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800babc:	4313      	orrs	r3, r2
 800babe:	628b      	str	r3, [r1, #40]	@ 0x28
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	3b01      	subs	r3, #1
 800bad0:	025b      	lsls	r3, r3, #9
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	431a      	orrs	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	3b01      	subs	r3, #1
 800badc:	041b      	lsls	r3, r3, #16
 800bade:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bae2:	431a      	orrs	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	3b01      	subs	r3, #1
 800baea:	061b      	lsls	r3, r3, #24
 800baec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800baf0:	4931      	ldr	r1, [pc, #196]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800baf6:	4b30      	ldr	r3, [pc, #192]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800baf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	492d      	ldr	r1, [pc, #180]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb04:	4313      	orrs	r3, r2
 800bb06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb08:	4b2b      	ldr	r3, [pc, #172]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	4928      	ldr	r1, [pc, #160]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bb1a:	4b27      	ldr	r3, [pc, #156]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1e:	4a26      	ldr	r2, [pc, #152]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb26:	4b24      	ldr	r3, [pc, #144]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb2a:	4b24      	ldr	r3, [pc, #144]	@ (800bbbc <RCCEx_PLL3_Config+0x160>)
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	69d2      	ldr	r2, [r2, #28]
 800bb32:	00d2      	lsls	r2, r2, #3
 800bb34:	4920      	ldr	r1, [pc, #128]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb36:	4313      	orrs	r3, r2
 800bb38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb3a:	4b1f      	ldr	r3, [pc, #124]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb3e:	4a1e      	ldr	r2, [pc, #120]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb50:	4a19      	ldr	r2, [pc, #100]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bb56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb58:	e00f      	b.n	800bb7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d106      	bne.n	800bb6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb60:	4b15      	ldr	r3, [pc, #84]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb64:	4a14      	ldr	r2, [pc, #80]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb6c:	e005      	b.n	800bb7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bb6e:	4b12      	ldr	r3, [pc, #72]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb72:	4a11      	ldr	r2, [pc, #68]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bb7a:	4b0f      	ldr	r3, [pc, #60]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a0e      	ldr	r2, [pc, #56]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bb80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb86:	f7f6 f8c7 	bl	8001d18 <HAL_GetTick>
 800bb8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb8c:	e008      	b.n	800bba0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb8e:	f7f6 f8c3 	bl	8001d18 <HAL_GetTick>
 800bb92:	4602      	mov	r2, r0
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d901      	bls.n	800bba0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e006      	b.n	800bbae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bba0:	4b05      	ldr	r3, [pc, #20]	@ (800bbb8 <RCCEx_PLL3_Config+0x15c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d0f0      	beq.n	800bb8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	58024400 	.word	0x58024400
 800bbbc:	ffff0007 	.word	0xffff0007

0800bbc0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e10f      	b.n	800bdf2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a87      	ldr	r2, [pc, #540]	@ (800bdfc <HAL_SPI_Init+0x23c>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d00f      	beq.n	800bc02 <HAL_SPI_Init+0x42>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a86      	ldr	r2, [pc, #536]	@ (800be00 <HAL_SPI_Init+0x240>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00a      	beq.n	800bc02 <HAL_SPI_Init+0x42>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a84      	ldr	r2, [pc, #528]	@ (800be04 <HAL_SPI_Init+0x244>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d005      	beq.n	800bc02 <HAL_SPI_Init+0x42>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	2b0f      	cmp	r3, #15
 800bbfc:	d901      	bls.n	800bc02 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e0f7      	b.n	800bdf2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fbca 	bl	800c39c <SPI_GetPacketSize>
 800bc08:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a7b      	ldr	r2, [pc, #492]	@ (800bdfc <HAL_SPI_Init+0x23c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d00c      	beq.n	800bc2e <HAL_SPI_Init+0x6e>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a79      	ldr	r2, [pc, #484]	@ (800be00 <HAL_SPI_Init+0x240>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d007      	beq.n	800bc2e <HAL_SPI_Init+0x6e>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a78      	ldr	r2, [pc, #480]	@ (800be04 <HAL_SPI_Init+0x244>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d002      	beq.n	800bc2e <HAL_SPI_Init+0x6e>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b08      	cmp	r3, #8
 800bc2c:	d811      	bhi.n	800bc52 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc32:	4a72      	ldr	r2, [pc, #456]	@ (800bdfc <HAL_SPI_Init+0x23c>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d009      	beq.n	800bc4c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a70      	ldr	r2, [pc, #448]	@ (800be00 <HAL_SPI_Init+0x240>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d004      	beq.n	800bc4c <HAL_SPI_Init+0x8c>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a6f      	ldr	r2, [pc, #444]	@ (800be04 <HAL_SPI_Init+0x244>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d104      	bne.n	800bc56 <HAL_SPI_Init+0x96>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b10      	cmp	r3, #16
 800bc50:	d901      	bls.n	800bc56 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e0cd      	b.n	800bdf2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d106      	bne.n	800bc70 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7f5 fba2 	bl	80013b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0201 	bic.w	r2, r2, #1
 800bc86:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bc92:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc9c:	d119      	bne.n	800bcd2 <HAL_SPI_Init+0x112>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bca6:	d103      	bne.n	800bcb0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d008      	beq.n	800bcc2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10c      	bne.n	800bcd2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bcbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bcc0:	d107      	bne.n	800bcd2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bcd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00f      	beq.n	800bcfe <HAL_SPI_Init+0x13e>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	2b06      	cmp	r3, #6
 800bce4:	d90b      	bls.n	800bcfe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	e007      	b.n	800bd0e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bd0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	69da      	ldr	r2, [r3, #28]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	431a      	orrs	r2, r3
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd20:	ea42 0103 	orr.w	r1, r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68da      	ldr	r2, [r3, #12]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd38:	431a      	orrs	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	431a      	orrs	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	431a      	orrs	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd62:	431a      	orrs	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd6e:	ea42 0103 	orr.w	r1, r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d113      	bne.n	800bdae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bdac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f022 0201 	bic.w	r2, r2, #1
 800bdbc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00a      	beq.n	800bde0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40013000 	.word	0x40013000
 800be00:	40003800 	.word	0x40003800
 800be04:	40003c00 	.word	0x40003c00

0800be08 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	@ 0x28
 800be0c:	af02      	add	r7, sp, #8
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	4613      	mov	r3, r2
 800be16:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3320      	adds	r3, #32
 800be1e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d101      	bne.n	800be32 <HAL_SPI_Transmit+0x2a>
 800be2e:	2302      	movs	r3, #2
 800be30:	e1e1      	b.n	800c1f6 <HAL_SPI_Transmit+0x3ee>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be3a:	f7f5 ff6d 	bl	8001d18 <HAL_GetTick>
 800be3e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d007      	beq.n	800be5c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800be4c:	2302      	movs	r3, #2
 800be4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800be58:	7efb      	ldrb	r3, [r7, #27]
 800be5a:	e1cc      	b.n	800c1f6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <HAL_SPI_Transmit+0x60>
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d107      	bne.n	800be78 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800be74:	7efb      	ldrb	r3, [r7, #27]
 800be76:	e1be      	b.n	800c1f6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2203      	movs	r2, #3
 800be7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	88fa      	ldrh	r2, [r7, #6]
 800be92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	88fa      	ldrh	r2, [r7, #6]
 800be9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2200      	movs	r2, #0
 800bebe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bec8:	d108      	bne.n	800bedc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	e009      	b.n	800bef0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800beee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	4b96      	ldr	r3, [pc, #600]	@ (800c150 <HAL_SPI_Transmit+0x348>)
 800bef8:	4013      	ands	r3, r2
 800befa:	88f9      	ldrh	r1, [r7, #6]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	6812      	ldr	r2, [r2, #0]
 800bf00:	430b      	orrs	r3, r1
 800bf02:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0201 	orr.w	r2, r2, #1
 800bf12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf1c:	d107      	bne.n	800bf2e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	2b0f      	cmp	r3, #15
 800bf34:	d947      	bls.n	800bfc6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bf36:	e03f      	b.n	800bfb8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	f003 0302 	and.w	r3, r3, #2
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d114      	bne.n	800bf70 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6812      	ldr	r2, [r2, #0]
 800bf50:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf56:	1d1a      	adds	r2, r3, #4
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	3b01      	subs	r3, #1
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf6e:	e023      	b.n	800bfb8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf70:	f7f5 fed2 	bl	8001d18 <HAL_GetTick>
 800bf74:	4602      	mov	r2, r0
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d803      	bhi.n	800bf88 <HAL_SPI_Transmit+0x180>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf86:	d102      	bne.n	800bf8e <HAL_SPI_Transmit+0x186>
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d114      	bne.n	800bfb8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f000 f936 	bl	800c200 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfa2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e11e      	b.n	800c1f6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1b9      	bne.n	800bf38 <HAL_SPI_Transmit+0x130>
 800bfc4:	e0f1      	b.n	800c1aa <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	2b07      	cmp	r3, #7
 800bfcc:	f240 80e6 	bls.w	800c19c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bfd0:	e05d      	b.n	800c08e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d132      	bne.n	800c046 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d918      	bls.n	800c01e <HAL_SPI_Transmit+0x216>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d014      	beq.n	800c01e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6812      	ldr	r2, [r2, #0]
 800bffe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c004:	1d1a      	adds	r2, r3, #4
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b02      	subs	r3, #2
 800c014:	b29a      	uxth	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c01c:	e037      	b.n	800c08e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c022:	881a      	ldrh	r2, [r3, #0]
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c02c:	1c9a      	adds	r2, r3, #2
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c038:	b29b      	uxth	r3, r3
 800c03a:	3b01      	subs	r3, #1
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c044:	e023      	b.n	800c08e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c046:	f7f5 fe67 	bl	8001d18 <HAL_GetTick>
 800c04a:	4602      	mov	r2, r0
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	429a      	cmp	r2, r3
 800c054:	d803      	bhi.n	800c05e <HAL_SPI_Transmit+0x256>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05c:	d102      	bne.n	800c064 <HAL_SPI_Transmit+0x25c>
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d114      	bne.n	800c08e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 f8cb 	bl	800c200 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c078:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c08a:	2303      	movs	r3, #3
 800c08c:	e0b3      	b.n	800c1f6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c094:	b29b      	uxth	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d19b      	bne.n	800bfd2 <HAL_SPI_Transmit+0x1ca>
 800c09a:	e086      	b.n	800c1aa <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d154      	bne.n	800c154 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	2b03      	cmp	r3, #3
 800c0b4:	d918      	bls.n	800c0e8 <HAL_SPI_Transmit+0x2e0>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ba:	2b40      	cmp	r3, #64	@ 0x40
 800c0bc:	d914      	bls.n	800c0e8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6812      	ldr	r2, [r2, #0]
 800c0c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0ce:	1d1a      	adds	r2, r3, #4
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b04      	subs	r3, #4
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c0e6:	e059      	b.n	800c19c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d917      	bls.n	800c124 <HAL_SPI_Transmit+0x31c>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d013      	beq.n	800c124 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c100:	881a      	ldrh	r2, [r3, #0]
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c10a:	1c9a      	adds	r2, r3, #2
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c116:	b29b      	uxth	r3, r3
 800c118:	3b02      	subs	r3, #2
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c122:	e03b      	b.n	800c19c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3320      	adds	r3, #32
 800c12e:	7812      	ldrb	r2, [r2, #0]
 800c130:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c136:	1c5a      	adds	r2, r3, #1
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c142:	b29b      	uxth	r3, r3
 800c144:	3b01      	subs	r3, #1
 800c146:	b29a      	uxth	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c14e:	e025      	b.n	800c19c <HAL_SPI_Transmit+0x394>
 800c150:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c154:	f7f5 fde0 	bl	8001d18 <HAL_GetTick>
 800c158:	4602      	mov	r2, r0
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	429a      	cmp	r2, r3
 800c162:	d803      	bhi.n	800c16c <HAL_SPI_Transmit+0x364>
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c16a:	d102      	bne.n	800c172 <HAL_SPI_Transmit+0x36a>
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d114      	bne.n	800c19c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 f844 	bl	800c200 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c186:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800c198:	2303      	movs	r3, #3
 800c19a:	e02c      	b.n	800c1f6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f47f af79 	bne.w	800c09c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2108      	movs	r1, #8
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f8c3 	bl	800c340 <SPI_WaitOnFlagUntilTimeout>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d007      	beq.n	800c1d0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1c6:	f043 0220 	orr.w	r2, r3, #32
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 f815 	bl	800c200 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d001      	beq.n	800c1f4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e000      	b.n	800c1f6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800c1f4:	7efb      	ldrb	r3, [r7, #27]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3720      	adds	r7, #32
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop

0800c200 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	699a      	ldr	r2, [r3, #24]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f042 0208 	orr.w	r2, r2, #8
 800c21e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	699a      	ldr	r2, [r3, #24]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f042 0210 	orr.w	r2, r2, #16
 800c22e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f022 0201 	bic.w	r2, r2, #1
 800c23e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6919      	ldr	r1, [r3, #16]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	4b3c      	ldr	r3, [pc, #240]	@ (800c33c <SPI_CloseTransfer+0x13c>)
 800c24c:	400b      	ands	r3, r1
 800c24e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c25e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c266:	b2db      	uxtb	r3, r3
 800c268:	2b04      	cmp	r3, #4
 800c26a:	d014      	beq.n	800c296 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f003 0320 	and.w	r3, r3, #32
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00f      	beq.n	800c296 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c27c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	699a      	ldr	r2, [r3, #24]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f042 0220 	orr.w	r2, r2, #32
 800c294:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d014      	beq.n	800c2cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00f      	beq.n	800c2cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2b2:	f043 0204 	orr.w	r2, r3, #4
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	699a      	ldr	r2, [r3, #24]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00f      	beq.n	800c2f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2dc:	f043 0201 	orr.w	r2, r3, #1
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	699a      	ldr	r2, [r3, #24]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00f      	beq.n	800c320 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c306:	f043 0208 	orr.w	r2, r3, #8
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	699a      	ldr	r2, [r3, #24]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c31e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c330:	bf00      	nop
 800c332:	3714      	adds	r7, #20
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	fffffc90 	.word	0xfffffc90

0800c340 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	603b      	str	r3, [r7, #0]
 800c34c:	4613      	mov	r3, r2
 800c34e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c350:	e010      	b.n	800c374 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c352:	f7f5 fce1 	bl	8001d18 <HAL_GetTick>
 800c356:	4602      	mov	r2, r0
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d803      	bhi.n	800c36a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c368:	d102      	bne.n	800c370 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e00f      	b.n	800c394 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	695a      	ldr	r2, [r3, #20]
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	4013      	ands	r3, r2
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	429a      	cmp	r2, r3
 800c382:	bf0c      	ite	eq
 800c384:	2301      	moveq	r3, #1
 800c386:	2300      	movne	r3, #0
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	461a      	mov	r2, r3
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d0df      	beq.n	800c352 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3a8:	095b      	lsrs	r3, r3, #5
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	3307      	adds	r3, #7
 800c3ba:	08db      	lsrs	r3, r3, #3
 800c3bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e049      	b.n	800c478 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d106      	bne.n	800c3fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7f5 fb9b 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2202      	movs	r2, #2
 800c402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3304      	adds	r3, #4
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f000 fd71 	bl	800cef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2201      	movs	r2, #1
 800c472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b01      	cmp	r3, #1
 800c492:	d001      	beq.n	800c498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e054      	b.n	800c542 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2202      	movs	r2, #2
 800c49c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68da      	ldr	r2, [r3, #12]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f042 0201 	orr.w	r2, r2, #1
 800c4ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a26      	ldr	r2, [pc, #152]	@ (800c550 <HAL_TIM_Base_Start_IT+0xd0>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d022      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x80>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4c2:	d01d      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x80>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a22      	ldr	r2, [pc, #136]	@ (800c554 <HAL_TIM_Base_Start_IT+0xd4>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d018      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x80>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a21      	ldr	r2, [pc, #132]	@ (800c558 <HAL_TIM_Base_Start_IT+0xd8>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d013      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x80>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c55c <HAL_TIM_Base_Start_IT+0xdc>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d00e      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x80>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a1e      	ldr	r2, [pc, #120]	@ (800c560 <HAL_TIM_Base_Start_IT+0xe0>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d009      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x80>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a1c      	ldr	r2, [pc, #112]	@ (800c564 <HAL_TIM_Base_Start_IT+0xe4>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d004      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x80>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c568 <HAL_TIM_Base_Start_IT+0xe8>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d115      	bne.n	800c52c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	689a      	ldr	r2, [r3, #8]
 800c506:	4b19      	ldr	r3, [pc, #100]	@ (800c56c <HAL_TIM_Base_Start_IT+0xec>)
 800c508:	4013      	ands	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b06      	cmp	r3, #6
 800c510:	d015      	beq.n	800c53e <HAL_TIM_Base_Start_IT+0xbe>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c518:	d011      	beq.n	800c53e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f042 0201 	orr.w	r2, r2, #1
 800c528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c52a:	e008      	b.n	800c53e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f042 0201 	orr.w	r2, r2, #1
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	e000      	b.n	800c540 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c53e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	40010000 	.word	0x40010000
 800c554:	40000400 	.word	0x40000400
 800c558:	40000800 	.word	0x40000800
 800c55c:	40000c00 	.word	0x40000c00
 800c560:	40010400 	.word	0x40010400
 800c564:	40001800 	.word	0x40001800
 800c568:	40014000 	.word	0x40014000
 800c56c:	00010007 	.word	0x00010007

0800c570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e049      	b.n	800c616 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f841 	bl	800c61e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	f000 fca2 	bl	800cef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c61e:	b480      	push	{r7}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c626:	bf00      	nop
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
	...

0800c634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d109      	bne.n	800c658 <HAL_TIM_PWM_Start+0x24>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	bf14      	ite	ne
 800c650:	2301      	movne	r3, #1
 800c652:	2300      	moveq	r3, #0
 800c654:	b2db      	uxtb	r3, r3
 800c656:	e03c      	b.n	800c6d2 <HAL_TIM_PWM_Start+0x9e>
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	d109      	bne.n	800c672 <HAL_TIM_PWM_Start+0x3e>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b01      	cmp	r3, #1
 800c668:	bf14      	ite	ne
 800c66a:	2301      	movne	r3, #1
 800c66c:	2300      	moveq	r3, #0
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	e02f      	b.n	800c6d2 <HAL_TIM_PWM_Start+0x9e>
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b08      	cmp	r3, #8
 800c676:	d109      	bne.n	800c68c <HAL_TIM_PWM_Start+0x58>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	2b01      	cmp	r3, #1
 800c682:	bf14      	ite	ne
 800c684:	2301      	movne	r3, #1
 800c686:	2300      	moveq	r3, #0
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	e022      	b.n	800c6d2 <HAL_TIM_PWM_Start+0x9e>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b0c      	cmp	r3, #12
 800c690:	d109      	bne.n	800c6a6 <HAL_TIM_PWM_Start+0x72>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	bf14      	ite	ne
 800c69e:	2301      	movne	r3, #1
 800c6a0:	2300      	moveq	r3, #0
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	e015      	b.n	800c6d2 <HAL_TIM_PWM_Start+0x9e>
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b10      	cmp	r3, #16
 800c6aa:	d109      	bne.n	800c6c0 <HAL_TIM_PWM_Start+0x8c>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	bf14      	ite	ne
 800c6b8:	2301      	movne	r3, #1
 800c6ba:	2300      	moveq	r3, #0
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	e008      	b.n	800c6d2 <HAL_TIM_PWM_Start+0x9e>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	bf14      	ite	ne
 800c6cc:	2301      	movne	r3, #1
 800c6ce:	2300      	moveq	r3, #0
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e0a1      	b.n	800c81e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <HAL_TIM_PWM_Start+0xb6>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6e8:	e023      	b.n	800c732 <HAL_TIM_PWM_Start+0xfe>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	d104      	bne.n	800c6fa <HAL_TIM_PWM_Start+0xc6>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6f8:	e01b      	b.n	800c732 <HAL_TIM_PWM_Start+0xfe>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b08      	cmp	r3, #8
 800c6fe:	d104      	bne.n	800c70a <HAL_TIM_PWM_Start+0xd6>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c708:	e013      	b.n	800c732 <HAL_TIM_PWM_Start+0xfe>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b0c      	cmp	r3, #12
 800c70e:	d104      	bne.n	800c71a <HAL_TIM_PWM_Start+0xe6>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c718:	e00b      	b.n	800c732 <HAL_TIM_PWM_Start+0xfe>
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	2b10      	cmp	r3, #16
 800c71e:	d104      	bne.n	800c72a <HAL_TIM_PWM_Start+0xf6>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2202      	movs	r2, #2
 800c724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c728:	e003      	b.n	800c732 <HAL_TIM_PWM_Start+0xfe>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2202      	movs	r2, #2
 800c72e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2201      	movs	r2, #1
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 ffea 	bl	800d714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a38      	ldr	r2, [pc, #224]	@ (800c828 <HAL_TIM_PWM_Start+0x1f4>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d013      	beq.n	800c772 <HAL_TIM_PWM_Start+0x13e>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a37      	ldr	r2, [pc, #220]	@ (800c82c <HAL_TIM_PWM_Start+0x1f8>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d00e      	beq.n	800c772 <HAL_TIM_PWM_Start+0x13e>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a35      	ldr	r2, [pc, #212]	@ (800c830 <HAL_TIM_PWM_Start+0x1fc>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d009      	beq.n	800c772 <HAL_TIM_PWM_Start+0x13e>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a34      	ldr	r2, [pc, #208]	@ (800c834 <HAL_TIM_PWM_Start+0x200>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d004      	beq.n	800c772 <HAL_TIM_PWM_Start+0x13e>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a32      	ldr	r2, [pc, #200]	@ (800c838 <HAL_TIM_PWM_Start+0x204>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d101      	bne.n	800c776 <HAL_TIM_PWM_Start+0x142>
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <HAL_TIM_PWM_Start+0x144>
 800c776:	2300      	movs	r3, #0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d007      	beq.n	800c78c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c78a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a25      	ldr	r2, [pc, #148]	@ (800c828 <HAL_TIM_PWM_Start+0x1f4>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d022      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x1a8>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c79e:	d01d      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x1a8>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a25      	ldr	r2, [pc, #148]	@ (800c83c <HAL_TIM_PWM_Start+0x208>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d018      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x1a8>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a24      	ldr	r2, [pc, #144]	@ (800c840 <HAL_TIM_PWM_Start+0x20c>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d013      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x1a8>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a22      	ldr	r2, [pc, #136]	@ (800c844 <HAL_TIM_PWM_Start+0x210>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00e      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x1a8>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a1a      	ldr	r2, [pc, #104]	@ (800c82c <HAL_TIM_PWM_Start+0x1f8>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d009      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x1a8>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a1e      	ldr	r2, [pc, #120]	@ (800c848 <HAL_TIM_PWM_Start+0x214>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d004      	beq.n	800c7dc <HAL_TIM_PWM_Start+0x1a8>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a16      	ldr	r2, [pc, #88]	@ (800c830 <HAL_TIM_PWM_Start+0x1fc>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d115      	bne.n	800c808 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c84c <HAL_TIM_PWM_Start+0x218>)
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b06      	cmp	r3, #6
 800c7ec:	d015      	beq.n	800c81a <HAL_TIM_PWM_Start+0x1e6>
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7f4:	d011      	beq.n	800c81a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f042 0201 	orr.w	r2, r2, #1
 800c804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c806:	e008      	b.n	800c81a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f042 0201 	orr.w	r2, r2, #1
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	e000      	b.n	800c81c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c81a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	40010000 	.word	0x40010000
 800c82c:	40010400 	.word	0x40010400
 800c830:	40014000 	.word	0x40014000
 800c834:	40014400 	.word	0x40014400
 800c838:	40014800 	.word	0x40014800
 800c83c:	40000400 	.word	0x40000400
 800c840:	40000800 	.word	0x40000800
 800c844:	40000c00 	.word	0x40000c00
 800c848:	40001800 	.word	0x40001800
 800c84c:	00010007 	.word	0x00010007

0800c850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f003 0302 	and.w	r3, r3, #2
 800c862:	2b02      	cmp	r3, #2
 800c864:	d122      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	f003 0302 	and.w	r3, r3, #2
 800c870:	2b02      	cmp	r3, #2
 800c872:	d11b      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f06f 0202 	mvn.w	r2, #2
 800c87c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	f003 0303 	and.w	r3, r3, #3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fb12 	bl	800cebc <HAL_TIM_IC_CaptureCallback>
 800c898:	e005      	b.n	800c8a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fb04 	bl	800cea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fb15 	bl	800ced0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	f003 0304 	and.w	r3, r3, #4
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d122      	bne.n	800c900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d11b      	bne.n	800c900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f06f 0204 	mvn.w	r2, #4
 800c8d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d003      	beq.n	800c8ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 fae8 	bl	800cebc <HAL_TIM_IC_CaptureCallback>
 800c8ec:	e005      	b.n	800c8fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fada 	bl	800cea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 faeb 	bl	800ced0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	f003 0308 	and.w	r3, r3, #8
 800c90a:	2b08      	cmp	r3, #8
 800c90c:	d122      	bne.n	800c954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	f003 0308 	and.w	r3, r3, #8
 800c918:	2b08      	cmp	r3, #8
 800c91a:	d11b      	bne.n	800c954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f06f 0208 	mvn.w	r2, #8
 800c924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2204      	movs	r2, #4
 800c92a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	69db      	ldr	r3, [r3, #28]
 800c932:	f003 0303 	and.w	r3, r3, #3
 800c936:	2b00      	cmp	r3, #0
 800c938:	d003      	beq.n	800c942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fabe 	bl	800cebc <HAL_TIM_IC_CaptureCallback>
 800c940:	e005      	b.n	800c94e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fab0 	bl	800cea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fac1 	bl	800ced0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	f003 0310 	and.w	r3, r3, #16
 800c95e:	2b10      	cmp	r3, #16
 800c960:	d122      	bne.n	800c9a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	f003 0310 	and.w	r3, r3, #16
 800c96c:	2b10      	cmp	r3, #16
 800c96e:	d11b      	bne.n	800c9a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f06f 0210 	mvn.w	r2, #16
 800c978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2208      	movs	r2, #8
 800c97e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	69db      	ldr	r3, [r3, #28]
 800c986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d003      	beq.n	800c996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fa94 	bl	800cebc <HAL_TIM_IC_CaptureCallback>
 800c994:	e005      	b.n	800c9a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fa86 	bl	800cea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fa97 	bl	800ced0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d10e      	bne.n	800c9d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d107      	bne.n	800c9d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f06f 0201 	mvn.w	r2, #1
 800c9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7f4 fb06 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9de:	2b80      	cmp	r3, #128	@ 0x80
 800c9e0:	d10e      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ec:	2b80      	cmp	r3, #128	@ 0x80
 800c9ee:	d107      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c9f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 ffc6 	bl	800d98c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca0e:	d10e      	bne.n	800ca2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca1a:	2b80      	cmp	r3, #128	@ 0x80
 800ca1c:	d107      	bne.n	800ca2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ca26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 ffb9 	bl	800d9a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca38:	2b40      	cmp	r3, #64	@ 0x40
 800ca3a:	d10e      	bne.n	800ca5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca46:	2b40      	cmp	r3, #64	@ 0x40
 800ca48:	d107      	bne.n	800ca5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ca52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 fa45 	bl	800cee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	f003 0320 	and.w	r3, r3, #32
 800ca64:	2b20      	cmp	r3, #32
 800ca66:	d10e      	bne.n	800ca86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	f003 0320 	and.w	r3, r3, #32
 800ca72:	2b20      	cmp	r3, #32
 800ca74:	d107      	bne.n	800ca86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f06f 0220 	mvn.w	r2, #32
 800ca7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 ff79 	bl	800d978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca86:	bf00      	nop
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
	...

0800ca90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d101      	bne.n	800caae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800caaa:	2302      	movs	r3, #2
 800caac:	e0ff      	b.n	800ccae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b14      	cmp	r3, #20
 800caba:	f200 80f0 	bhi.w	800cc9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cabe:	a201      	add	r2, pc, #4	@ (adr r2, 800cac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800cb19 	.word	0x0800cb19
 800cac8:	0800cc9f 	.word	0x0800cc9f
 800cacc:	0800cc9f 	.word	0x0800cc9f
 800cad0:	0800cc9f 	.word	0x0800cc9f
 800cad4:	0800cb59 	.word	0x0800cb59
 800cad8:	0800cc9f 	.word	0x0800cc9f
 800cadc:	0800cc9f 	.word	0x0800cc9f
 800cae0:	0800cc9f 	.word	0x0800cc9f
 800cae4:	0800cb9b 	.word	0x0800cb9b
 800cae8:	0800cc9f 	.word	0x0800cc9f
 800caec:	0800cc9f 	.word	0x0800cc9f
 800caf0:	0800cc9f 	.word	0x0800cc9f
 800caf4:	0800cbdb 	.word	0x0800cbdb
 800caf8:	0800cc9f 	.word	0x0800cc9f
 800cafc:	0800cc9f 	.word	0x0800cc9f
 800cb00:	0800cc9f 	.word	0x0800cc9f
 800cb04:	0800cc1d 	.word	0x0800cc1d
 800cb08:	0800cc9f 	.word	0x0800cc9f
 800cb0c:	0800cc9f 	.word	0x0800cc9f
 800cb10:	0800cc9f 	.word	0x0800cc9f
 800cb14:	0800cc5d 	.word	0x0800cc5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fa84 	bl	800d02c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	699a      	ldr	r2, [r3, #24]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f042 0208 	orr.w	r2, r2, #8
 800cb32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	699a      	ldr	r2, [r3, #24]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0204 	bic.w	r2, r2, #4
 800cb42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6999      	ldr	r1, [r3, #24]
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	691a      	ldr	r2, [r3, #16]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	430a      	orrs	r2, r1
 800cb54:	619a      	str	r2, [r3, #24]
      break;
 800cb56:	e0a5      	b.n	800cca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68b9      	ldr	r1, [r7, #8]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 faf4 	bl	800d14c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	699a      	ldr	r2, [r3, #24]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	699a      	ldr	r2, [r3, #24]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6999      	ldr	r1, [r3, #24]
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	021a      	lsls	r2, r3, #8
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	430a      	orrs	r2, r1
 800cb96:	619a      	str	r2, [r3, #24]
      break;
 800cb98:	e084      	b.n	800cca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f000 fb5d 	bl	800d260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69da      	ldr	r2, [r3, #28]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f042 0208 	orr.w	r2, r2, #8
 800cbb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	69da      	ldr	r2, [r3, #28]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0204 	bic.w	r2, r2, #4
 800cbc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	69d9      	ldr	r1, [r3, #28]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	691a      	ldr	r2, [r3, #16]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	61da      	str	r2, [r3, #28]
      break;
 800cbd8:	e064      	b.n	800cca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68b9      	ldr	r1, [r7, #8]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 fbc5 	bl	800d370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	69da      	ldr	r2, [r3, #28]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	69da      	ldr	r2, [r3, #28]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	69d9      	ldr	r1, [r3, #28]
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	021a      	lsls	r2, r3, #8
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	61da      	str	r2, [r3, #28]
      break;
 800cc1a:	e043      	b.n	800cca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68b9      	ldr	r1, [r7, #8]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 fc0e 	bl	800d444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f042 0208 	orr.w	r2, r2, #8
 800cc36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f022 0204 	bic.w	r2, r2, #4
 800cc46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	691a      	ldr	r2, [r3, #16]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cc5a:	e023      	b.n	800cca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68b9      	ldr	r1, [r7, #8]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fc52 	bl	800d50c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	691b      	ldr	r3, [r3, #16]
 800cc92:	021a      	lsls	r2, r3, #8
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cc9c:	e002      	b.n	800cca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	75fb      	strb	r3, [r7, #23]
      break;
 800cca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3718      	adds	r7, #24
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop

0800ccb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d101      	bne.n	800ccd4 <HAL_TIM_ConfigClockSource+0x1c>
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	e0dc      	b.n	800ce8e <HAL_TIM_ConfigClockSource+0x1d6>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2202      	movs	r2, #2
 800cce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	4b6a      	ldr	r3, [pc, #424]	@ (800ce98 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a64      	ldr	r2, [pc, #400]	@ (800ce9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	f000 80a9 	beq.w	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd10:	4a62      	ldr	r2, [pc, #392]	@ (800ce9c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	f200 80ae 	bhi.w	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd18:	4a61      	ldr	r2, [pc, #388]	@ (800cea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	f000 80a1 	beq.w	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd20:	4a5f      	ldr	r2, [pc, #380]	@ (800cea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	f200 80a6 	bhi.w	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd28:	4a5e      	ldr	r2, [pc, #376]	@ (800cea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	f000 8099 	beq.w	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd30:	4a5c      	ldr	r2, [pc, #368]	@ (800cea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	f200 809e 	bhi.w	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cd3c:	f000 8091 	beq.w	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cd44:	f200 8096 	bhi.w	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd4c:	f000 8089 	beq.w	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd54:	f200 808e 	bhi.w	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd5c:	d03e      	beq.n	800cddc <HAL_TIM_ConfigClockSource+0x124>
 800cd5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd62:	f200 8087 	bhi.w	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd6a:	f000 8086 	beq.w	800ce7a <HAL_TIM_ConfigClockSource+0x1c2>
 800cd6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd72:	d87f      	bhi.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd74:	2b70      	cmp	r3, #112	@ 0x70
 800cd76:	d01a      	beq.n	800cdae <HAL_TIM_ConfigClockSource+0xf6>
 800cd78:	2b70      	cmp	r3, #112	@ 0x70
 800cd7a:	d87b      	bhi.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd7c:	2b60      	cmp	r3, #96	@ 0x60
 800cd7e:	d050      	beq.n	800ce22 <HAL_TIM_ConfigClockSource+0x16a>
 800cd80:	2b60      	cmp	r3, #96	@ 0x60
 800cd82:	d877      	bhi.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd84:	2b50      	cmp	r3, #80	@ 0x50
 800cd86:	d03c      	beq.n	800ce02 <HAL_TIM_ConfigClockSource+0x14a>
 800cd88:	2b50      	cmp	r3, #80	@ 0x50
 800cd8a:	d873      	bhi.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd8c:	2b40      	cmp	r3, #64	@ 0x40
 800cd8e:	d058      	beq.n	800ce42 <HAL_TIM_ConfigClockSource+0x18a>
 800cd90:	2b40      	cmp	r3, #64	@ 0x40
 800cd92:	d86f      	bhi.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd94:	2b30      	cmp	r3, #48	@ 0x30
 800cd96:	d064      	beq.n	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd98:	2b30      	cmp	r3, #48	@ 0x30
 800cd9a:	d86b      	bhi.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd9c:	2b20      	cmp	r3, #32
 800cd9e:	d060      	beq.n	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	d867      	bhi.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d05c      	beq.n	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cda8:	2b10      	cmp	r3, #16
 800cdaa:	d05a      	beq.n	800ce62 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdac:	e062      	b.n	800ce74 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cdbe:	f000 fc89 	bl	800d6d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cdd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	609a      	str	r2, [r3, #8]
      break;
 800cdda:	e04f      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cdec:	f000 fc72 	bl	800d6d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdfe:	609a      	str	r2, [r3, #8]
      break;
 800ce00:	e03c      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce0e:	461a      	mov	r2, r3
 800ce10:	f000 fbe2 	bl	800d5d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2150      	movs	r1, #80	@ 0x50
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 fc3c 	bl	800d698 <TIM_ITRx_SetConfig>
      break;
 800ce20:	e02c      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f000 fc01 	bl	800d636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2160      	movs	r1, #96	@ 0x60
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 fc2c 	bl	800d698 <TIM_ITRx_SetConfig>
      break;
 800ce40:	e01c      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce4e:	461a      	mov	r2, r3
 800ce50:	f000 fbc2 	bl	800d5d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2140      	movs	r1, #64	@ 0x40
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 fc1c 	bl	800d698 <TIM_ITRx_SetConfig>
      break;
 800ce60:	e00c      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	f000 fc13 	bl	800d698 <TIM_ITRx_SetConfig>
      break;
 800ce72:	e003      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	73fb      	strb	r3, [r7, #15]
      break;
 800ce78:	e000      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	ffceff88 	.word	0xffceff88
 800ce9c:	00100040 	.word	0x00100040
 800cea0:	00100030 	.word	0x00100030
 800cea4:	00100020 	.word	0x00100020

0800cea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ced8:	bf00      	nop
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a40      	ldr	r2, [pc, #256]	@ (800d00c <TIM_Base_SetConfig+0x114>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d013      	beq.n	800cf38 <TIM_Base_SetConfig+0x40>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf16:	d00f      	beq.n	800cf38 <TIM_Base_SetConfig+0x40>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a3d      	ldr	r2, [pc, #244]	@ (800d010 <TIM_Base_SetConfig+0x118>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d00b      	beq.n	800cf38 <TIM_Base_SetConfig+0x40>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a3c      	ldr	r2, [pc, #240]	@ (800d014 <TIM_Base_SetConfig+0x11c>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d007      	beq.n	800cf38 <TIM_Base_SetConfig+0x40>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a3b      	ldr	r2, [pc, #236]	@ (800d018 <TIM_Base_SetConfig+0x120>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d003      	beq.n	800cf38 <TIM_Base_SetConfig+0x40>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a3a      	ldr	r2, [pc, #232]	@ (800d01c <TIM_Base_SetConfig+0x124>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d108      	bne.n	800cf4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a2f      	ldr	r2, [pc, #188]	@ (800d00c <TIM_Base_SetConfig+0x114>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d01f      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf58:	d01b      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a2c      	ldr	r2, [pc, #176]	@ (800d010 <TIM_Base_SetConfig+0x118>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d017      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a2b      	ldr	r2, [pc, #172]	@ (800d014 <TIM_Base_SetConfig+0x11c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d013      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a2a      	ldr	r2, [pc, #168]	@ (800d018 <TIM_Base_SetConfig+0x120>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d00f      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a29      	ldr	r2, [pc, #164]	@ (800d01c <TIM_Base_SetConfig+0x124>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d00b      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a28      	ldr	r2, [pc, #160]	@ (800d020 <TIM_Base_SetConfig+0x128>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d007      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a27      	ldr	r2, [pc, #156]	@ (800d024 <TIM_Base_SetConfig+0x12c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d003      	beq.n	800cf92 <TIM_Base_SetConfig+0x9a>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a26      	ldr	r2, [pc, #152]	@ (800d028 <TIM_Base_SetConfig+0x130>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d108      	bne.n	800cfa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	695b      	ldr	r3, [r3, #20]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	689a      	ldr	r2, [r3, #8]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a10      	ldr	r2, [pc, #64]	@ (800d00c <TIM_Base_SetConfig+0x114>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d00f      	beq.n	800cff0 <TIM_Base_SetConfig+0xf8>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a12      	ldr	r2, [pc, #72]	@ (800d01c <TIM_Base_SetConfig+0x124>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d00b      	beq.n	800cff0 <TIM_Base_SetConfig+0xf8>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a11      	ldr	r2, [pc, #68]	@ (800d020 <TIM_Base_SetConfig+0x128>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d007      	beq.n	800cff0 <TIM_Base_SetConfig+0xf8>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a10      	ldr	r2, [pc, #64]	@ (800d024 <TIM_Base_SetConfig+0x12c>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d003      	beq.n	800cff0 <TIM_Base_SetConfig+0xf8>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a0f      	ldr	r2, [pc, #60]	@ (800d028 <TIM_Base_SetConfig+0x130>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d103      	bne.n	800cff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	691a      	ldr	r2, [r3, #16]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	615a      	str	r2, [r3, #20]
}
 800cffe:	bf00      	nop
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	40010000 	.word	0x40010000
 800d010:	40000400 	.word	0x40000400
 800d014:	40000800 	.word	0x40000800
 800d018:	40000c00 	.word	0x40000c00
 800d01c:	40010400 	.word	0x40010400
 800d020:	40014000 	.word	0x40014000
 800d024:	40014400 	.word	0x40014400
 800d028:	40014800 	.word	0x40014800

0800d02c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b087      	sub	sp, #28
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	f023 0201 	bic.w	r2, r3, #1
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a1b      	ldr	r3, [r3, #32]
 800d046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	4b37      	ldr	r3, [pc, #220]	@ (800d134 <TIM_OC1_SetConfig+0x108>)
 800d058:	4013      	ands	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f023 0303 	bic.w	r3, r3, #3
 800d062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f023 0302 	bic.w	r3, r3, #2
 800d074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a2d      	ldr	r2, [pc, #180]	@ (800d138 <TIM_OC1_SetConfig+0x10c>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d00f      	beq.n	800d0a8 <TIM_OC1_SetConfig+0x7c>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a2c      	ldr	r2, [pc, #176]	@ (800d13c <TIM_OC1_SetConfig+0x110>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d00b      	beq.n	800d0a8 <TIM_OC1_SetConfig+0x7c>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a2b      	ldr	r2, [pc, #172]	@ (800d140 <TIM_OC1_SetConfig+0x114>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d007      	beq.n	800d0a8 <TIM_OC1_SetConfig+0x7c>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a2a      	ldr	r2, [pc, #168]	@ (800d144 <TIM_OC1_SetConfig+0x118>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d003      	beq.n	800d0a8 <TIM_OC1_SetConfig+0x7c>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a29      	ldr	r2, [pc, #164]	@ (800d148 <TIM_OC1_SetConfig+0x11c>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d10c      	bne.n	800d0c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f023 0308 	bic.w	r3, r3, #8
 800d0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	697a      	ldr	r2, [r7, #20]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f023 0304 	bic.w	r3, r3, #4
 800d0c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800d138 <TIM_OC1_SetConfig+0x10c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d00f      	beq.n	800d0ea <TIM_OC1_SetConfig+0xbe>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d13c <TIM_OC1_SetConfig+0x110>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d00b      	beq.n	800d0ea <TIM_OC1_SetConfig+0xbe>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d140 <TIM_OC1_SetConfig+0x114>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d007      	beq.n	800d0ea <TIM_OC1_SetConfig+0xbe>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4a19      	ldr	r2, [pc, #100]	@ (800d144 <TIM_OC1_SetConfig+0x118>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d003      	beq.n	800d0ea <TIM_OC1_SetConfig+0xbe>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a18      	ldr	r2, [pc, #96]	@ (800d148 <TIM_OC1_SetConfig+0x11c>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d111      	bne.n	800d10e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d0f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	693a      	ldr	r2, [r7, #16]
 800d100:	4313      	orrs	r3, r2
 800d102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	693a      	ldr	r2, [r7, #16]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	693a      	ldr	r2, [r7, #16]
 800d112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	685a      	ldr	r2, [r3, #4]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	621a      	str	r2, [r3, #32]
}
 800d128:	bf00      	nop
 800d12a:	371c      	adds	r7, #28
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	fffeff8f 	.word	0xfffeff8f
 800d138:	40010000 	.word	0x40010000
 800d13c:	40010400 	.word	0x40010400
 800d140:	40014000 	.word	0x40014000
 800d144:	40014400 	.word	0x40014400
 800d148:	40014800 	.word	0x40014800

0800d14c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a1b      	ldr	r3, [r3, #32]
 800d15a:	f023 0210 	bic.w	r2, r3, #16
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	699b      	ldr	r3, [r3, #24]
 800d172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	4b34      	ldr	r3, [pc, #208]	@ (800d248 <TIM_OC2_SetConfig+0xfc>)
 800d178:	4013      	ands	r3, r2
 800d17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	021b      	lsls	r3, r3, #8
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f023 0320 	bic.w	r3, r3, #32
 800d196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a29      	ldr	r2, [pc, #164]	@ (800d24c <TIM_OC2_SetConfig+0x100>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d003      	beq.n	800d1b4 <TIM_OC2_SetConfig+0x68>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a28      	ldr	r2, [pc, #160]	@ (800d250 <TIM_OC2_SetConfig+0x104>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d10d      	bne.n	800d1d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	011b      	lsls	r3, r3, #4
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a1e      	ldr	r2, [pc, #120]	@ (800d24c <TIM_OC2_SetConfig+0x100>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d00f      	beq.n	800d1f8 <TIM_OC2_SetConfig+0xac>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a1d      	ldr	r2, [pc, #116]	@ (800d250 <TIM_OC2_SetConfig+0x104>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00b      	beq.n	800d1f8 <TIM_OC2_SetConfig+0xac>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a1c      	ldr	r2, [pc, #112]	@ (800d254 <TIM_OC2_SetConfig+0x108>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d007      	beq.n	800d1f8 <TIM_OC2_SetConfig+0xac>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a1b      	ldr	r2, [pc, #108]	@ (800d258 <TIM_OC2_SetConfig+0x10c>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d003      	beq.n	800d1f8 <TIM_OC2_SetConfig+0xac>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a1a      	ldr	r2, [pc, #104]	@ (800d25c <TIM_OC2_SetConfig+0x110>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d113      	bne.n	800d220 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d1fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	4313      	orrs	r3, r2
 800d212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	693a      	ldr	r2, [r7, #16]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	693a      	ldr	r2, [r7, #16]
 800d224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	621a      	str	r2, [r3, #32]
}
 800d23a:	bf00      	nop
 800d23c:	371c      	adds	r7, #28
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	feff8fff 	.word	0xfeff8fff
 800d24c:	40010000 	.word	0x40010000
 800d250:	40010400 	.word	0x40010400
 800d254:	40014000 	.word	0x40014000
 800d258:	40014400 	.word	0x40014400
 800d25c:	40014800 	.word	0x40014800

0800d260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d260:	b480      	push	{r7}
 800d262:	b087      	sub	sp, #28
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a1b      	ldr	r3, [r3, #32]
 800d26e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	69db      	ldr	r3, [r3, #28]
 800d286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	4b33      	ldr	r3, [pc, #204]	@ (800d358 <TIM_OC3_SetConfig+0xf8>)
 800d28c:	4013      	ands	r3, r2
 800d28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f023 0303 	bic.w	r3, r3, #3
 800d296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d2a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4a28      	ldr	r2, [pc, #160]	@ (800d35c <TIM_OC3_SetConfig+0xfc>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d003      	beq.n	800d2c6 <TIM_OC3_SetConfig+0x66>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a27      	ldr	r2, [pc, #156]	@ (800d360 <TIM_OC3_SetConfig+0x100>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d10d      	bne.n	800d2e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d2cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	021b      	lsls	r3, r3, #8
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d2e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a1d      	ldr	r2, [pc, #116]	@ (800d35c <TIM_OC3_SetConfig+0xfc>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d00f      	beq.n	800d30a <TIM_OC3_SetConfig+0xaa>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a1c      	ldr	r2, [pc, #112]	@ (800d360 <TIM_OC3_SetConfig+0x100>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d00b      	beq.n	800d30a <TIM_OC3_SetConfig+0xaa>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a1b      	ldr	r2, [pc, #108]	@ (800d364 <TIM_OC3_SetConfig+0x104>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d007      	beq.n	800d30a <TIM_OC3_SetConfig+0xaa>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a1a      	ldr	r2, [pc, #104]	@ (800d368 <TIM_OC3_SetConfig+0x108>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d003      	beq.n	800d30a <TIM_OC3_SetConfig+0xaa>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a19      	ldr	r2, [pc, #100]	@ (800d36c <TIM_OC3_SetConfig+0x10c>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d113      	bne.n	800d332 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	011b      	lsls	r3, r3, #4
 800d320:	693a      	ldr	r2, [r7, #16]
 800d322:	4313      	orrs	r3, r2
 800d324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	693a      	ldr	r2, [r7, #16]
 800d32e:	4313      	orrs	r3, r2
 800d330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	697a      	ldr	r2, [r7, #20]
 800d34a:	621a      	str	r2, [r3, #32]
}
 800d34c:	bf00      	nop
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	fffeff8f 	.word	0xfffeff8f
 800d35c:	40010000 	.word	0x40010000
 800d360:	40010400 	.word	0x40010400
 800d364:	40014000 	.word	0x40014000
 800d368:	40014400 	.word	0x40014400
 800d36c:	40014800 	.word	0x40014800

0800d370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d370:	b480      	push	{r7}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	4b24      	ldr	r3, [pc, #144]	@ (800d42c <TIM_OC4_SetConfig+0xbc>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d3a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	021b      	lsls	r3, r3, #8
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d3ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	031b      	lsls	r3, r3, #12
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a19      	ldr	r2, [pc, #100]	@ (800d430 <TIM_OC4_SetConfig+0xc0>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d00f      	beq.n	800d3f0 <TIM_OC4_SetConfig+0x80>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4a18      	ldr	r2, [pc, #96]	@ (800d434 <TIM_OC4_SetConfig+0xc4>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d00b      	beq.n	800d3f0 <TIM_OC4_SetConfig+0x80>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4a17      	ldr	r2, [pc, #92]	@ (800d438 <TIM_OC4_SetConfig+0xc8>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d007      	beq.n	800d3f0 <TIM_OC4_SetConfig+0x80>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4a16      	ldr	r2, [pc, #88]	@ (800d43c <TIM_OC4_SetConfig+0xcc>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d003      	beq.n	800d3f0 <TIM_OC4_SetConfig+0x80>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a15      	ldr	r2, [pc, #84]	@ (800d440 <TIM_OC4_SetConfig+0xd0>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d109      	bne.n	800d404 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	019b      	lsls	r3, r3, #6
 800d3fe:	697a      	ldr	r2, [r7, #20]
 800d400:	4313      	orrs	r3, r2
 800d402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	685a      	ldr	r2, [r3, #4]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	621a      	str	r2, [r3, #32]
}
 800d41e:	bf00      	nop
 800d420:	371c      	adds	r7, #28
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	feff8fff 	.word	0xfeff8fff
 800d430:	40010000 	.word	0x40010000
 800d434:	40010400 	.word	0x40010400
 800d438:	40014000 	.word	0x40014000
 800d43c:	40014400 	.word	0x40014400
 800d440:	40014800 	.word	0x40014800

0800d444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d444:	b480      	push	{r7}
 800d446:	b087      	sub	sp, #28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	4b21      	ldr	r3, [pc, #132]	@ (800d4f4 <TIM_OC5_SetConfig+0xb0>)
 800d470:	4013      	ands	r3, r2
 800d472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	041b      	lsls	r3, r3, #16
 800d48c:	693a      	ldr	r2, [r7, #16]
 800d48e:	4313      	orrs	r3, r2
 800d490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a18      	ldr	r2, [pc, #96]	@ (800d4f8 <TIM_OC5_SetConfig+0xb4>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d00f      	beq.n	800d4ba <TIM_OC5_SetConfig+0x76>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a17      	ldr	r2, [pc, #92]	@ (800d4fc <TIM_OC5_SetConfig+0xb8>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d00b      	beq.n	800d4ba <TIM_OC5_SetConfig+0x76>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a16      	ldr	r2, [pc, #88]	@ (800d500 <TIM_OC5_SetConfig+0xbc>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d007      	beq.n	800d4ba <TIM_OC5_SetConfig+0x76>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a15      	ldr	r2, [pc, #84]	@ (800d504 <TIM_OC5_SetConfig+0xc0>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d003      	beq.n	800d4ba <TIM_OC5_SetConfig+0x76>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a14      	ldr	r2, [pc, #80]	@ (800d508 <TIM_OC5_SetConfig+0xc4>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d109      	bne.n	800d4ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d4c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	021b      	lsls	r3, r3, #8
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	685a      	ldr	r2, [r3, #4]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	693a      	ldr	r2, [r7, #16]
 800d4e6:	621a      	str	r2, [r3, #32]
}
 800d4e8:	bf00      	nop
 800d4ea:	371c      	adds	r7, #28
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr
 800d4f4:	fffeff8f 	.word	0xfffeff8f
 800d4f8:	40010000 	.word	0x40010000
 800d4fc:	40010400 	.word	0x40010400
 800d500:	40014000 	.word	0x40014000
 800d504:	40014400 	.word	0x40014400
 800d508:	40014800 	.word	0x40014800

0800d50c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b087      	sub	sp, #28
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	4b22      	ldr	r3, [pc, #136]	@ (800d5c0 <TIM_OC6_SetConfig+0xb4>)
 800d538:	4013      	ands	r3, r2
 800d53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	021b      	lsls	r3, r3, #8
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	4313      	orrs	r3, r2
 800d546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d54e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	051b      	lsls	r3, r3, #20
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	4313      	orrs	r3, r2
 800d55a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a19      	ldr	r2, [pc, #100]	@ (800d5c4 <TIM_OC6_SetConfig+0xb8>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d00f      	beq.n	800d584 <TIM_OC6_SetConfig+0x78>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a18      	ldr	r2, [pc, #96]	@ (800d5c8 <TIM_OC6_SetConfig+0xbc>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d00b      	beq.n	800d584 <TIM_OC6_SetConfig+0x78>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4a17      	ldr	r2, [pc, #92]	@ (800d5cc <TIM_OC6_SetConfig+0xc0>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d007      	beq.n	800d584 <TIM_OC6_SetConfig+0x78>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a16      	ldr	r2, [pc, #88]	@ (800d5d0 <TIM_OC6_SetConfig+0xc4>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d003      	beq.n	800d584 <TIM_OC6_SetConfig+0x78>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a15      	ldr	r2, [pc, #84]	@ (800d5d4 <TIM_OC6_SetConfig+0xc8>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d109      	bne.n	800d598 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d58a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	029b      	lsls	r3, r3, #10
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	4313      	orrs	r3, r2
 800d596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	685a      	ldr	r2, [r3, #4]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	621a      	str	r2, [r3, #32]
}
 800d5b2:	bf00      	nop
 800d5b4:	371c      	adds	r7, #28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	feff8fff 	.word	0xfeff8fff
 800d5c4:	40010000 	.word	0x40010000
 800d5c8:	40010400 	.word	0x40010400
 800d5cc:	40014000 	.word	0x40014000
 800d5d0:	40014400 	.word	0x40014400
 800d5d4:	40014800 	.word	0x40014800

0800d5d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b087      	sub	sp, #28
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6a1b      	ldr	r3, [r3, #32]
 800d5e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6a1b      	ldr	r3, [r3, #32]
 800d5ee:	f023 0201 	bic.w	r2, r3, #1
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	011b      	lsls	r3, r3, #4
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f023 030a 	bic.w	r3, r3, #10
 800d614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d616:	697a      	ldr	r2, [r7, #20]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	693a      	ldr	r2, [r7, #16]
 800d622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	697a      	ldr	r2, [r7, #20]
 800d628:	621a      	str	r2, [r3, #32]
}
 800d62a:	bf00      	nop
 800d62c:	371c      	adds	r7, #28
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d636:	b480      	push	{r7}
 800d638:	b087      	sub	sp, #28
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	60b9      	str	r1, [r7, #8]
 800d640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	f023 0210 	bic.w	r2, r3, #16
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6a1b      	ldr	r3, [r3, #32]
 800d658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	031b      	lsls	r3, r3, #12
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	4313      	orrs	r3, r2
 800d66a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	011b      	lsls	r3, r3, #4
 800d678:	693a      	ldr	r2, [r7, #16]
 800d67a:	4313      	orrs	r3, r2
 800d67c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	697a      	ldr	r2, [r7, #20]
 800d682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	693a      	ldr	r2, [r7, #16]
 800d688:	621a      	str	r2, [r3, #32]
}
 800d68a:	bf00      	nop
 800d68c:	371c      	adds	r7, #28
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
	...

0800d698 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	4b09      	ldr	r3, [pc, #36]	@ (800d6d0 <TIM_ITRx_SetConfig+0x38>)
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	f043 0307 	orr.w	r3, r3, #7
 800d6ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	609a      	str	r2, [r3, #8]
}
 800d6c2:	bf00      	nop
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
 800d6ce:	bf00      	nop
 800d6d0:	ffcfff8f 	.word	0xffcfff8f

0800d6d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b087      	sub	sp, #28
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d6ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	021a      	lsls	r2, r3, #8
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	431a      	orrs	r2, r3
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	4313      	orrs	r3, r2
 800d700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	697a      	ldr	r2, [r7, #20]
 800d706:	609a      	str	r2, [r3, #8]
}
 800d708:	bf00      	nop
 800d70a:	371c      	adds	r7, #28
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f003 031f 	and.w	r3, r3, #31
 800d726:	2201      	movs	r2, #1
 800d728:	fa02 f303 	lsl.w	r3, r2, r3
 800d72c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6a1a      	ldr	r2, [r3, #32]
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	43db      	mvns	r3, r3
 800d736:	401a      	ands	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6a1a      	ldr	r2, [r3, #32]
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	f003 031f 	and.w	r3, r3, #31
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	fa01 f303 	lsl.w	r3, r1, r3
 800d74c:	431a      	orrs	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	621a      	str	r2, [r3, #32]
}
 800d752:	bf00      	nop
 800d754:	371c      	adds	r7, #28
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
	...

0800d760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d760:	b480      	push	{r7}
 800d762:	b085      	sub	sp, #20
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d770:	2b01      	cmp	r3, #1
 800d772:	d101      	bne.n	800d778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d774:	2302      	movs	r3, #2
 800d776:	e06d      	b.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2202      	movs	r2, #2
 800d784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a30      	ldr	r2, [pc, #192]	@ (800d860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d004      	beq.n	800d7ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a2f      	ldr	r2, [pc, #188]	@ (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d108      	bne.n	800d7be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d7b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a20      	ldr	r2, [pc, #128]	@ (800d860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d022      	beq.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ea:	d01d      	beq.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d868 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d018      	beq.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a1c      	ldr	r2, [pc, #112]	@ (800d86c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d013      	beq.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a1a      	ldr	r2, [pc, #104]	@ (800d870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d00e      	beq.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a15      	ldr	r2, [pc, #84]	@ (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d009      	beq.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a16      	ldr	r2, [pc, #88]	@ (800d874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d004      	beq.n	800d828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4a15      	ldr	r2, [pc, #84]	@ (800d878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d10c      	bne.n	800d842 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d82e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	4313      	orrs	r3, r2
 800d838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	40010000 	.word	0x40010000
 800d864:	40010400 	.word	0x40010400
 800d868:	40000400 	.word	0x40000400
 800d86c:	40000800 	.word	0x40000800
 800d870:	40000c00 	.word	0x40000c00
 800d874:	40001800 	.word	0x40001800
 800d878:	40014000 	.word	0x40014000

0800d87c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d886:	2300      	movs	r3, #0
 800d888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d890:	2b01      	cmp	r3, #1
 800d892:	d101      	bne.n	800d898 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d894:	2302      	movs	r3, #2
 800d896:	e065      	b.n	800d964 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fe:	4313      	orrs	r3, r2
 800d900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	041b      	lsls	r3, r3, #16
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a16      	ldr	r2, [pc, #88]	@ (800d970 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d004      	beq.n	800d926 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a14      	ldr	r2, [pc, #80]	@ (800d974 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d115      	bne.n	800d952 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d930:	051b      	lsls	r3, r3, #20
 800d932:	4313      	orrs	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	69db      	ldr	r3, [r3, #28]
 800d940:	4313      	orrs	r3, r2
 800d942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	4313      	orrs	r3, r2
 800d950:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	40010000 	.word	0x40010000
 800d974:	40010400 	.word	0x40010400

0800d978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d9a8:	bf00      	nop
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9b4:	b084      	sub	sp, #16
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	f107 001c 	add.w	r0, r7, #28
 800d9c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d120      	bne.n	800da0e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	68da      	ldr	r2, [r3, #12]
 800d9dc:	4b2a      	ldr	r3, [pc, #168]	@ (800da88 <USB_CoreInit+0xd4>)
 800d9de:	4013      	ands	r3, r2
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d9f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d105      	bne.n	800da02 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 faf8 	bl	800eff8 <USB_CoreReset>
 800da08:	4603      	mov	r3, r0
 800da0a:	73fb      	strb	r3, [r7, #15]
 800da0c:	e01a      	b.n	800da44 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f001 faec 	bl	800eff8 <USB_CoreReset>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da26:	2b00      	cmp	r3, #0
 800da28:	d106      	bne.n	800da38 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	639a      	str	r2, [r3, #56]	@ 0x38
 800da36:	e005      	b.n	800da44 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da46:	2b01      	cmp	r3, #1
 800da48:	d116      	bne.n	800da78 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da4e:	b29a      	uxth	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800da58:	4b0c      	ldr	r3, [pc, #48]	@ (800da8c <USB_CoreInit+0xd8>)
 800da5a:	4313      	orrs	r3, r2
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f043 0206 	orr.w	r2, r3, #6
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f043 0220 	orr.w	r2, r3, #32
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da78:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da84:	b004      	add	sp, #16
 800da86:	4770      	bx	lr
 800da88:	ffbdffbf 	.word	0xffbdffbf
 800da8c:	03ee0000 	.word	0x03ee0000

0800da90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800da90:	b480      	push	{r7}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	4613      	mov	r3, r2
 800da9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d165      	bne.n	800db70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	4a41      	ldr	r2, [pc, #260]	@ (800dbac <USB_SetTurnaroundTime+0x11c>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d906      	bls.n	800daba <USB_SetTurnaroundTime+0x2a>
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	4a40      	ldr	r2, [pc, #256]	@ (800dbb0 <USB_SetTurnaroundTime+0x120>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d202      	bcs.n	800daba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dab4:	230f      	movs	r3, #15
 800dab6:	617b      	str	r3, [r7, #20]
 800dab8:	e062      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	4a3c      	ldr	r2, [pc, #240]	@ (800dbb0 <USB_SetTurnaroundTime+0x120>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d306      	bcc.n	800dad0 <USB_SetTurnaroundTime+0x40>
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	4a3b      	ldr	r2, [pc, #236]	@ (800dbb4 <USB_SetTurnaroundTime+0x124>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d202      	bcs.n	800dad0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800daca:	230e      	movs	r3, #14
 800dacc:	617b      	str	r3, [r7, #20]
 800dace:	e057      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	4a38      	ldr	r2, [pc, #224]	@ (800dbb4 <USB_SetTurnaroundTime+0x124>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d306      	bcc.n	800dae6 <USB_SetTurnaroundTime+0x56>
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	4a37      	ldr	r2, [pc, #220]	@ (800dbb8 <USB_SetTurnaroundTime+0x128>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d202      	bcs.n	800dae6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dae0:	230d      	movs	r3, #13
 800dae2:	617b      	str	r3, [r7, #20]
 800dae4:	e04c      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	4a33      	ldr	r2, [pc, #204]	@ (800dbb8 <USB_SetTurnaroundTime+0x128>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d306      	bcc.n	800dafc <USB_SetTurnaroundTime+0x6c>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	4a32      	ldr	r2, [pc, #200]	@ (800dbbc <USB_SetTurnaroundTime+0x12c>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d802      	bhi.n	800dafc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800daf6:	230c      	movs	r3, #12
 800daf8:	617b      	str	r3, [r7, #20]
 800dafa:	e041      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	4a2f      	ldr	r2, [pc, #188]	@ (800dbbc <USB_SetTurnaroundTime+0x12c>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d906      	bls.n	800db12 <USB_SetTurnaroundTime+0x82>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	4a2e      	ldr	r2, [pc, #184]	@ (800dbc0 <USB_SetTurnaroundTime+0x130>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d802      	bhi.n	800db12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800db0c:	230b      	movs	r3, #11
 800db0e:	617b      	str	r3, [r7, #20]
 800db10:	e036      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	4a2a      	ldr	r2, [pc, #168]	@ (800dbc0 <USB_SetTurnaroundTime+0x130>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d906      	bls.n	800db28 <USB_SetTurnaroundTime+0x98>
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	4a29      	ldr	r2, [pc, #164]	@ (800dbc4 <USB_SetTurnaroundTime+0x134>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d802      	bhi.n	800db28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800db22:	230a      	movs	r3, #10
 800db24:	617b      	str	r3, [r7, #20]
 800db26:	e02b      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	4a26      	ldr	r2, [pc, #152]	@ (800dbc4 <USB_SetTurnaroundTime+0x134>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d906      	bls.n	800db3e <USB_SetTurnaroundTime+0xae>
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	4a25      	ldr	r2, [pc, #148]	@ (800dbc8 <USB_SetTurnaroundTime+0x138>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d202      	bcs.n	800db3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800db38:	2309      	movs	r3, #9
 800db3a:	617b      	str	r3, [r7, #20]
 800db3c:	e020      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	4a21      	ldr	r2, [pc, #132]	@ (800dbc8 <USB_SetTurnaroundTime+0x138>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d306      	bcc.n	800db54 <USB_SetTurnaroundTime+0xc4>
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	4a20      	ldr	r2, [pc, #128]	@ (800dbcc <USB_SetTurnaroundTime+0x13c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d802      	bhi.n	800db54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800db4e:	2308      	movs	r3, #8
 800db50:	617b      	str	r3, [r7, #20]
 800db52:	e015      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	4a1d      	ldr	r2, [pc, #116]	@ (800dbcc <USB_SetTurnaroundTime+0x13c>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d906      	bls.n	800db6a <USB_SetTurnaroundTime+0xda>
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	4a1c      	ldr	r2, [pc, #112]	@ (800dbd0 <USB_SetTurnaroundTime+0x140>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d202      	bcs.n	800db6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800db64:	2307      	movs	r3, #7
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	e00a      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800db6a:	2306      	movs	r3, #6
 800db6c:	617b      	str	r3, [r7, #20]
 800db6e:	e007      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d102      	bne.n	800db7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800db76:	2309      	movs	r3, #9
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	e001      	b.n	800db80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800db7c:	2309      	movs	r3, #9
 800db7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	68da      	ldr	r2, [r3, #12]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	029b      	lsls	r3, r3, #10
 800db94:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800db98:	431a      	orrs	r2, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	371c      	adds	r7, #28
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	00d8acbf 	.word	0x00d8acbf
 800dbb0:	00e4e1c0 	.word	0x00e4e1c0
 800dbb4:	00f42400 	.word	0x00f42400
 800dbb8:	01067380 	.word	0x01067380
 800dbbc:	011a499f 	.word	0x011a499f
 800dbc0:	01312cff 	.word	0x01312cff
 800dbc4:	014ca43f 	.word	0x014ca43f
 800dbc8:	016e3600 	.word	0x016e3600
 800dbcc:	01a6ab1f 	.word	0x01a6ab1f
 800dbd0:	01e84800 	.word	0x01e84800

0800dbd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f043 0201 	orr.w	r2, r3, #1
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	370c      	adds	r7, #12
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr

0800dbf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b083      	sub	sp, #12
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f023 0201 	bic.w	r2, r3, #1
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	460b      	mov	r3, r1
 800dc22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dc24:	2300      	movs	r3, #0
 800dc26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dc34:	78fb      	ldrb	r3, [r7, #3]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d115      	bne.n	800dc66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc46:	2001      	movs	r0, #1
 800dc48:	f7f4 f872 	bl	8001d30 <HAL_Delay>
      ms++;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f001 f93f 	bl	800eed6 <USB_GetMode>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d01e      	beq.n	800dc9c <USB_SetCurrentMode+0x84>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b31      	cmp	r3, #49	@ 0x31
 800dc62:	d9f0      	bls.n	800dc46 <USB_SetCurrentMode+0x2e>
 800dc64:	e01a      	b.n	800dc9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc66:	78fb      	ldrb	r3, [r7, #3]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d115      	bne.n	800dc98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f7f4 f859 	bl	8001d30 <HAL_Delay>
      ms++;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3301      	adds	r3, #1
 800dc82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f001 f926 	bl	800eed6 <USB_GetMode>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d005      	beq.n	800dc9c <USB_SetCurrentMode+0x84>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b31      	cmp	r3, #49	@ 0x31
 800dc94:	d9f0      	bls.n	800dc78 <USB_SetCurrentMode+0x60>
 800dc96:	e001      	b.n	800dc9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e005      	b.n	800dca8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2b32      	cmp	r3, #50	@ 0x32
 800dca0:	d101      	bne.n	800dca6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e000      	b.n	800dca8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dcb0:	b084      	sub	sp, #16
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b086      	sub	sp, #24
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dcbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dcca:	2300      	movs	r3, #0
 800dccc:	613b      	str	r3, [r7, #16]
 800dcce:	e009      	b.n	800dce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	3340      	adds	r3, #64	@ 0x40
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	2200      	movs	r2, #0
 800dcdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	3301      	adds	r3, #1
 800dce2:	613b      	str	r3, [r7, #16]
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	2b0e      	cmp	r3, #14
 800dce8:	d9f2      	bls.n	800dcd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dcea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d11c      	bne.n	800dd2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dcfe:	f043 0302 	orr.w	r3, r3, #2
 800dd02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd08:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	601a      	str	r2, [r3, #0]
 800dd28:	e005      	b.n	800dd36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	2300      	movs	r3, #0
 800dd40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd48:	4619      	mov	r1, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd50:	461a      	mov	r2, r3
 800dd52:	680b      	ldr	r3, [r1, #0]
 800dd54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d10c      	bne.n	800dd76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d104      	bne.n	800dd6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dd62:	2100      	movs	r1, #0
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 f965 	bl	800e034 <USB_SetDevSpeed>
 800dd6a:	e008      	b.n	800dd7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dd6c:	2101      	movs	r1, #1
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f960 	bl	800e034 <USB_SetDevSpeed>
 800dd74:	e003      	b.n	800dd7e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dd76:	2103      	movs	r1, #3
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 f95b 	bl	800e034 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd7e:	2110      	movs	r1, #16
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 f8f3 	bl	800df6c <USB_FlushTxFifo>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f91f 	bl	800dfd4 <USB_FlushRxFifo>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dda6:	461a      	mov	r2, r3
 800dda8:	2300      	movs	r3, #0
 800ddaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	e043      	b.n	800de52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	015a      	lsls	r2, r3, #5
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dddc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dde0:	d118      	bne.n	800de14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	015a      	lsls	r2, r3, #5
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	4413      	add	r3, r2
 800ddf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	e013      	b.n	800de26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	015a      	lsls	r2, r3, #5
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4413      	add	r3, r2
 800de06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de0a:	461a      	mov	r2, r3
 800de0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	e008      	b.n	800de26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de20:	461a      	mov	r2, r3
 800de22:	2300      	movs	r3, #0
 800de24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	015a      	lsls	r2, r3, #5
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	4413      	add	r3, r2
 800de2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de32:	461a      	mov	r2, r3
 800de34:	2300      	movs	r3, #0
 800de36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	015a      	lsls	r2, r3, #5
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	4413      	add	r3, r2
 800de40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de44:	461a      	mov	r2, r3
 800de46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800de4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	3301      	adds	r3, #1
 800de50:	613b      	str	r3, [r7, #16]
 800de52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	429a      	cmp	r2, r3
 800de58:	d3b7      	bcc.n	800ddca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de5a:	2300      	movs	r3, #0
 800de5c:	613b      	str	r3, [r7, #16]
 800de5e:	e043      	b.n	800dee8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	015a      	lsls	r2, r3, #5
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4413      	add	r3, r2
 800de68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de76:	d118      	bne.n	800deaa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10a      	bne.n	800de94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	015a      	lsls	r2, r3, #5
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	4413      	add	r3, r2
 800de86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de8a:	461a      	mov	r2, r3
 800de8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800de90:	6013      	str	r3, [r2, #0]
 800de92:	e013      	b.n	800debc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	015a      	lsls	r2, r3, #5
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	4413      	add	r3, r2
 800de9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dea0:	461a      	mov	r2, r3
 800dea2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	e008      	b.n	800debc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb6:	461a      	mov	r2, r3
 800deb8:	2300      	movs	r3, #0
 800deba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	015a      	lsls	r2, r3, #5
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4413      	add	r3, r2
 800dec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dec8:	461a      	mov	r2, r3
 800deca:	2300      	movs	r3, #0
 800decc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	015a      	lsls	r2, r3, #5
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	4413      	add	r3, r2
 800ded6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deda:	461a      	mov	r2, r3
 800dedc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dee0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	3301      	adds	r3, #1
 800dee6:	613b      	str	r3, [r7, #16]
 800dee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deea:	693a      	ldr	r2, [r7, #16]
 800deec:	429a      	cmp	r2, r3
 800deee:	d3b7      	bcc.n	800de60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800defe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800df10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800df12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df14:	2b00      	cmp	r3, #0
 800df16:	d105      	bne.n	800df24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	699b      	ldr	r3, [r3, #24]
 800df1c:	f043 0210 	orr.w	r2, r3, #16
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	699a      	ldr	r2, [r3, #24]
 800df28:	4b0e      	ldr	r3, [pc, #56]	@ (800df64 <USB_DevInit+0x2b4>)
 800df2a:	4313      	orrs	r3, r2
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800df30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df32:	2b00      	cmp	r3, #0
 800df34:	d005      	beq.n	800df42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	699b      	ldr	r3, [r3, #24]
 800df3a:	f043 0208 	orr.w	r2, r3, #8
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800df42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df44:	2b01      	cmp	r3, #1
 800df46:	d105      	bne.n	800df54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	699a      	ldr	r2, [r3, #24]
 800df4c:	4b06      	ldr	r3, [pc, #24]	@ (800df68 <USB_DevInit+0x2b8>)
 800df4e:	4313      	orrs	r3, r2
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800df54:	7dfb      	ldrb	r3, [r7, #23]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3718      	adds	r7, #24
 800df5a:	46bd      	mov	sp, r7
 800df5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df60:	b004      	add	sp, #16
 800df62:	4770      	bx	lr
 800df64:	803c3800 	.word	0x803c3800
 800df68:	40000004 	.word	0x40000004

0800df6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df76:	2300      	movs	r3, #0
 800df78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	3301      	adds	r3, #1
 800df7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	4a13      	ldr	r2, [pc, #76]	@ (800dfd0 <USB_FlushTxFifo+0x64>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d901      	bls.n	800df8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800df88:	2303      	movs	r3, #3
 800df8a:	e01b      	b.n	800dfc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	daf2      	bge.n	800df7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800df94:	2300      	movs	r3, #0
 800df96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	019b      	lsls	r3, r3, #6
 800df9c:	f043 0220 	orr.w	r2, r3, #32
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	4a08      	ldr	r2, [pc, #32]	@ (800dfd0 <USB_FlushTxFifo+0x64>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d901      	bls.n	800dfb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	e006      	b.n	800dfc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	f003 0320 	and.w	r3, r3, #32
 800dfbe:	2b20      	cmp	r3, #32
 800dfc0:	d0f0      	beq.n	800dfa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3714      	adds	r7, #20
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr
 800dfd0:	00030d40 	.word	0x00030d40

0800dfd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	4a11      	ldr	r2, [pc, #68]	@ (800e030 <USB_FlushRxFifo+0x5c>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d901      	bls.n	800dff2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dfee:	2303      	movs	r3, #3
 800dff0:	e018      	b.n	800e024 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	daf2      	bge.n	800dfe0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dffa:	2300      	movs	r3, #0
 800dffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2210      	movs	r2, #16
 800e002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3301      	adds	r3, #1
 800e008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	4a08      	ldr	r2, [pc, #32]	@ (800e030 <USB_FlushRxFifo+0x5c>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d901      	bls.n	800e016 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e012:	2303      	movs	r3, #3
 800e014:	e006      	b.n	800e024 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	f003 0310 	and.w	r3, r3, #16
 800e01e:	2b10      	cmp	r3, #16
 800e020:	d0f0      	beq.n	800e004 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e022:	2300      	movs	r3, #0
}
 800e024:	4618      	mov	r0, r3
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	00030d40 	.word	0x00030d40

0800e034 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	78fb      	ldrb	r3, [r7, #3]
 800e04e:	68f9      	ldr	r1, [r7, #12]
 800e050:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e054:	4313      	orrs	r3, r2
 800e056:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3714      	adds	r7, #20
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr

0800e066 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e066:	b480      	push	{r7}
 800e068:	b087      	sub	sp, #28
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	f003 0306 	and.w	r3, r3, #6
 800e07e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d102      	bne.n	800e08c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e086:	2300      	movs	r3, #0
 800e088:	75fb      	strb	r3, [r7, #23]
 800e08a:	e00a      	b.n	800e0a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d002      	beq.n	800e098 <USB_GetDevSpeed+0x32>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2b06      	cmp	r3, #6
 800e096:	d102      	bne.n	800e09e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e098:	2302      	movs	r3, #2
 800e09a:	75fb      	strb	r3, [r7, #23]
 800e09c:	e001      	b.n	800e0a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e09e:	230f      	movs	r3, #15
 800e0a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	371c      	adds	r7, #28
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	785b      	ldrb	r3, [r3, #1]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d139      	bne.n	800e140 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0d2:	69da      	ldr	r2, [r3, #28]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	f003 030f 	and.w	r3, r3, #15
 800e0dc:	2101      	movs	r1, #1
 800e0de:	fa01 f303 	lsl.w	r3, r1, r3
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	68f9      	ldr	r1, [r7, #12]
 800e0e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	015a      	lsls	r2, r3, #5
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e100:	2b00      	cmp	r3, #0
 800e102:	d153      	bne.n	800e1ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	015a      	lsls	r2, r3, #5
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4413      	add	r3, r2
 800e10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	791b      	ldrb	r3, [r3, #4]
 800e11e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e120:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	059b      	lsls	r3, r3, #22
 800e126:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e128:	431a      	orrs	r2, r3
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	0159      	lsls	r1, r3, #5
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	440b      	add	r3, r1
 800e132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e136:	4619      	mov	r1, r3
 800e138:	4b20      	ldr	r3, [pc, #128]	@ (800e1bc <USB_ActivateEndpoint+0x10c>)
 800e13a:	4313      	orrs	r3, r2
 800e13c:	600b      	str	r3, [r1, #0]
 800e13e:	e035      	b.n	800e1ac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e146:	69da      	ldr	r2, [r3, #28]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	f003 030f 	and.w	r3, r3, #15
 800e150:	2101      	movs	r1, #1
 800e152:	fa01 f303 	lsl.w	r3, r1, r3
 800e156:	041b      	lsls	r3, r3, #16
 800e158:	68f9      	ldr	r1, [r7, #12]
 800e15a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e15e:	4313      	orrs	r3, r2
 800e160:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	4413      	add	r3, r2
 800e16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e174:	2b00      	cmp	r3, #0
 800e176:	d119      	bne.n	800e1ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	015a      	lsls	r2, r3, #5
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	4413      	add	r3, r2
 800e180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	791b      	ldrb	r3, [r3, #4]
 800e192:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e194:	430b      	orrs	r3, r1
 800e196:	431a      	orrs	r2, r3
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	0159      	lsls	r1, r3, #5
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	440b      	add	r3, r1
 800e1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4b05      	ldr	r3, [pc, #20]	@ (800e1bc <USB_ActivateEndpoint+0x10c>)
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3714      	adds	r7, #20
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	10008000 	.word	0x10008000

0800e1c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	785b      	ldrb	r3, [r3, #1]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d161      	bne.n	800e2a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	015a      	lsls	r2, r3, #5
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1f2:	d11f      	bne.n	800e234 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	015a      	lsls	r2, r3, #5
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	0151      	lsls	r1, r2, #5
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	440a      	add	r2, r1
 800e20a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e20e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e212:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	015a      	lsls	r2, r3, #5
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	4413      	add	r3, r2
 800e21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68ba      	ldr	r2, [r7, #8]
 800e224:	0151      	lsls	r1, r2, #5
 800e226:	68fa      	ldr	r2, [r7, #12]
 800e228:	440a      	add	r2, r1
 800e22a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e22e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e232:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e23a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	f003 030f 	and.w	r3, r3, #15
 800e244:	2101      	movs	r1, #1
 800e246:	fa01 f303 	lsl.w	r3, r1, r3
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	43db      	mvns	r3, r3
 800e24e:	68f9      	ldr	r1, [r7, #12]
 800e250:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e254:	4013      	ands	r3, r2
 800e256:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e25e:	69da      	ldr	r2, [r3, #28]
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	f003 030f 	and.w	r3, r3, #15
 800e268:	2101      	movs	r1, #1
 800e26a:	fa01 f303 	lsl.w	r3, r1, r3
 800e26e:	b29b      	uxth	r3, r3
 800e270:	43db      	mvns	r3, r3
 800e272:	68f9      	ldr	r1, [r7, #12]
 800e274:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e278:	4013      	ands	r3, r2
 800e27a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	015a      	lsls	r2, r3, #5
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	4413      	add	r3, r2
 800e284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	0159      	lsls	r1, r3, #5
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	440b      	add	r3, r1
 800e292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e296:	4619      	mov	r1, r3
 800e298:	4b35      	ldr	r3, [pc, #212]	@ (800e370 <USB_DeactivateEndpoint+0x1b0>)
 800e29a:	4013      	ands	r3, r2
 800e29c:	600b      	str	r3, [r1, #0]
 800e29e:	e060      	b.n	800e362 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	015a      	lsls	r2, r3, #5
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2b6:	d11f      	bne.n	800e2f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	015a      	lsls	r2, r3, #5
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68ba      	ldr	r2, [r7, #8]
 800e2c8:	0151      	lsls	r1, r2, #5
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	440a      	add	r2, r1
 800e2ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e2d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	015a      	lsls	r2, r3, #5
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	4413      	add	r3, r2
 800e2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	0151      	lsls	r1, r2, #5
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	440a      	add	r2, r1
 800e2ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	f003 030f 	and.w	r3, r3, #15
 800e308:	2101      	movs	r1, #1
 800e30a:	fa01 f303 	lsl.w	r3, r1, r3
 800e30e:	041b      	lsls	r3, r3, #16
 800e310:	43db      	mvns	r3, r3
 800e312:	68f9      	ldr	r1, [r7, #12]
 800e314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e318:	4013      	ands	r3, r2
 800e31a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e322:	69da      	ldr	r2, [r3, #28]
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	f003 030f 	and.w	r3, r3, #15
 800e32c:	2101      	movs	r1, #1
 800e32e:	fa01 f303 	lsl.w	r3, r1, r3
 800e332:	041b      	lsls	r3, r3, #16
 800e334:	43db      	mvns	r3, r3
 800e336:	68f9      	ldr	r1, [r7, #12]
 800e338:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e33c:	4013      	ands	r3, r2
 800e33e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	015a      	lsls	r2, r3, #5
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	4413      	add	r3, r2
 800e348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	0159      	lsls	r1, r3, #5
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	440b      	add	r3, r1
 800e356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e35a:	4619      	mov	r1, r3
 800e35c:	4b05      	ldr	r3, [pc, #20]	@ (800e374 <USB_DeactivateEndpoint+0x1b4>)
 800e35e:	4013      	ands	r3, r2
 800e360:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	ec337800 	.word	0xec337800
 800e374:	eff37800 	.word	0xeff37800

0800e378 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08a      	sub	sp, #40	@ 0x28
 800e37c:	af02      	add	r7, sp, #8
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	785b      	ldrb	r3, [r3, #1]
 800e394:	2b01      	cmp	r3, #1
 800e396:	f040 8181 	bne.w	800e69c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d132      	bne.n	800e408 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	015a      	lsls	r2, r3, #5
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ae:	691a      	ldr	r2, [r3, #16]
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	0159      	lsls	r1, r3, #5
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	440b      	add	r3, r1
 800e3b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4ba5      	ldr	r3, [pc, #660]	@ (800e654 <USB_EPStartXfer+0x2dc>)
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	015a      	lsls	r2, r3, #5
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	69ba      	ldr	r2, [r7, #24]
 800e3d4:	0151      	lsls	r1, r2, #5
 800e3d6:	69fa      	ldr	r2, [r7, #28]
 800e3d8:	440a      	add	r2, r1
 800e3da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e3e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	015a      	lsls	r2, r3, #5
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3f0:	691a      	ldr	r2, [r3, #16]
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	0159      	lsls	r1, r3, #5
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	440b      	add	r3, r1
 800e3fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3fe:	4619      	mov	r1, r3
 800e400:	4b95      	ldr	r3, [pc, #596]	@ (800e658 <USB_EPStartXfer+0x2e0>)
 800e402:	4013      	ands	r3, r2
 800e404:	610b      	str	r3, [r1, #16]
 800e406:	e092      	b.n	800e52e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	015a      	lsls	r2, r3, #5
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	4413      	add	r3, r2
 800e410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e414:	691a      	ldr	r2, [r3, #16]
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	0159      	lsls	r1, r3, #5
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	440b      	add	r3, r1
 800e41e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e422:	4619      	mov	r1, r3
 800e424:	4b8c      	ldr	r3, [pc, #560]	@ (800e658 <USB_EPStartXfer+0x2e0>)
 800e426:	4013      	ands	r3, r2
 800e428:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	015a      	lsls	r2, r3, #5
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	4413      	add	r3, r2
 800e432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e436:	691a      	ldr	r2, [r3, #16]
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	0159      	lsls	r1, r3, #5
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	440b      	add	r3, r1
 800e440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e444:	4619      	mov	r1, r3
 800e446:	4b83      	ldr	r3, [pc, #524]	@ (800e654 <USB_EPStartXfer+0x2dc>)
 800e448:	4013      	ands	r3, r2
 800e44a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d11a      	bne.n	800e488 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	691a      	ldr	r2, [r3, #16]
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d903      	bls.n	800e466 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	689a      	ldr	r2, [r3, #8]
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	015a      	lsls	r2, r3, #5
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	4413      	add	r3, r2
 800e46e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e472:	691b      	ldr	r3, [r3, #16]
 800e474:	69ba      	ldr	r2, [r7, #24]
 800e476:	0151      	lsls	r1, r2, #5
 800e478:	69fa      	ldr	r2, [r7, #28]
 800e47a:	440a      	add	r2, r1
 800e47c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e480:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e484:	6113      	str	r3, [r2, #16]
 800e486:	e01b      	b.n	800e4c0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	015a      	lsls	r2, r3, #5
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	4413      	add	r3, r2
 800e490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e494:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	6919      	ldr	r1, [r3, #16]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	440b      	add	r3, r1
 800e4a0:	1e59      	subs	r1, r3, #1
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800e4aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e4ac:	4b6b      	ldr	r3, [pc, #428]	@ (800e65c <USB_EPStartXfer+0x2e4>)
 800e4ae:	400b      	ands	r3, r1
 800e4b0:	69b9      	ldr	r1, [r7, #24]
 800e4b2:	0148      	lsls	r0, r1, #5
 800e4b4:	69f9      	ldr	r1, [r7, #28]
 800e4b6:	4401      	add	r1, r0
 800e4b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	015a      	lsls	r2, r3, #5
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4cc:	691a      	ldr	r2, [r3, #16]
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	691b      	ldr	r3, [r3, #16]
 800e4d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4d6:	69b9      	ldr	r1, [r7, #24]
 800e4d8:	0148      	lsls	r0, r1, #5
 800e4da:	69f9      	ldr	r1, [r7, #28]
 800e4dc:	4401      	add	r1, r0
 800e4de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	791b      	ldrb	r3, [r3, #4]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d11f      	bne.n	800e52e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	015a      	lsls	r2, r3, #5
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	69ba      	ldr	r2, [r7, #24]
 800e4fe:	0151      	lsls	r1, r2, #5
 800e500:	69fa      	ldr	r2, [r7, #28]
 800e502:	440a      	add	r2, r1
 800e504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e508:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e50c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	015a      	lsls	r2, r3, #5
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	4413      	add	r3, r2
 800e516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	69ba      	ldr	r2, [r7, #24]
 800e51e:	0151      	lsls	r1, r2, #5
 800e520:	69fa      	ldr	r2, [r7, #28]
 800e522:	440a      	add	r2, r1
 800e524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e528:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e52c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e52e:	79fb      	ldrb	r3, [r7, #7]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d14b      	bne.n	800e5cc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	69db      	ldr	r3, [r3, #28]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d009      	beq.n	800e550 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	015a      	lsls	r2, r3, #5
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	4413      	add	r3, r2
 800e544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e548:	461a      	mov	r2, r3
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	69db      	ldr	r3, [r3, #28]
 800e54e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	791b      	ldrb	r3, [r3, #4]
 800e554:	2b01      	cmp	r3, #1
 800e556:	d128      	bne.n	800e5aa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e564:	2b00      	cmp	r3, #0
 800e566:	d110      	bne.n	800e58a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	015a      	lsls	r2, r3, #5
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	4413      	add	r3, r2
 800e570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	69ba      	ldr	r2, [r7, #24]
 800e578:	0151      	lsls	r1, r2, #5
 800e57a:	69fa      	ldr	r2, [r7, #28]
 800e57c:	440a      	add	r2, r1
 800e57e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e582:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e586:	6013      	str	r3, [r2, #0]
 800e588:	e00f      	b.n	800e5aa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	015a      	lsls	r2, r3, #5
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	4413      	add	r3, r2
 800e592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	69ba      	ldr	r2, [r7, #24]
 800e59a:	0151      	lsls	r1, r2, #5
 800e59c:	69fa      	ldr	r2, [r7, #28]
 800e59e:	440a      	add	r2, r1
 800e5a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	015a      	lsls	r2, r3, #5
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	69ba      	ldr	r2, [r7, #24]
 800e5ba:	0151      	lsls	r1, r2, #5
 800e5bc:	69fa      	ldr	r2, [r7, #28]
 800e5be:	440a      	add	r2, r1
 800e5c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e5c8:	6013      	str	r3, [r2, #0]
 800e5ca:	e16a      	b.n	800e8a2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	015a      	lsls	r2, r3, #5
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	0151      	lsls	r1, r2, #5
 800e5de:	69fa      	ldr	r2, [r7, #28]
 800e5e0:	440a      	add	r2, r1
 800e5e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e5ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	791b      	ldrb	r3, [r3, #4]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d015      	beq.n	800e620 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 8152 	beq.w	800e8a2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	f003 030f 	and.w	r3, r3, #15
 800e60e:	2101      	movs	r1, #1
 800e610:	fa01 f303 	lsl.w	r3, r1, r3
 800e614:	69f9      	ldr	r1, [r7, #28]
 800e616:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e61a:	4313      	orrs	r3, r2
 800e61c:	634b      	str	r3, [r1, #52]	@ 0x34
 800e61e:	e140      	b.n	800e8a2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e626:	689b      	ldr	r3, [r3, #8]
 800e628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d117      	bne.n	800e660 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	4413      	add	r3, r2
 800e638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	69ba      	ldr	r2, [r7, #24]
 800e640:	0151      	lsls	r1, r2, #5
 800e642:	69fa      	ldr	r2, [r7, #28]
 800e644:	440a      	add	r2, r1
 800e646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e64a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e64e:	6013      	str	r3, [r2, #0]
 800e650:	e016      	b.n	800e680 <USB_EPStartXfer+0x308>
 800e652:	bf00      	nop
 800e654:	e007ffff 	.word	0xe007ffff
 800e658:	fff80000 	.word	0xfff80000
 800e65c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	015a      	lsls	r2, r3, #5
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	4413      	add	r3, r2
 800e668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	69ba      	ldr	r2, [r7, #24]
 800e670:	0151      	lsls	r1, r2, #5
 800e672:	69fa      	ldr	r2, [r7, #28]
 800e674:	440a      	add	r2, r1
 800e676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e67a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e67e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	68d9      	ldr	r1, [r3, #12]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	781a      	ldrb	r2, [r3, #0]
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	b298      	uxth	r0, r3
 800e68e:	79fb      	ldrb	r3, [r7, #7]
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	4603      	mov	r3, r0
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f000 f9b9 	bl	800ea0c <USB_WritePacket>
 800e69a:	e102      	b.n	800e8a2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	015a      	lsls	r2, r3, #5
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6a8:	691a      	ldr	r2, [r3, #16]
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	0159      	lsls	r1, r3, #5
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	440b      	add	r3, r1
 800e6b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4b7c      	ldr	r3, [pc, #496]	@ (800e8ac <USB_EPStartXfer+0x534>)
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	015a      	lsls	r2, r3, #5
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6ca:	691a      	ldr	r2, [r3, #16]
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	0159      	lsls	r1, r3, #5
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	440b      	add	r3, r1
 800e6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4b75      	ldr	r3, [pc, #468]	@ (800e8b0 <USB_EPStartXfer+0x538>)
 800e6dc:	4013      	ands	r3, r2
 800e6de:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d12f      	bne.n	800e746 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d003      	beq.n	800e6f6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	689a      	ldr	r2, [r3, #8]
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	689a      	ldr	r2, [r3, #8]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	015a      	lsls	r2, r3, #5
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	4413      	add	r3, r2
 800e706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e70a:	691a      	ldr	r2, [r3, #16]
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e714:	69b9      	ldr	r1, [r7, #24]
 800e716:	0148      	lsls	r0, r1, #5
 800e718:	69f9      	ldr	r1, [r7, #28]
 800e71a:	4401      	add	r1, r0
 800e71c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e720:	4313      	orrs	r3, r2
 800e722:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	015a      	lsls	r2, r3, #5
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	4413      	add	r3, r2
 800e72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	0151      	lsls	r1, r2, #5
 800e736:	69fa      	ldr	r2, [r7, #28]
 800e738:	440a      	add	r2, r1
 800e73a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e73e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e742:	6113      	str	r3, [r2, #16]
 800e744:	e05f      	b.n	800e806 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	691b      	ldr	r3, [r3, #16]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d123      	bne.n	800e796 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	015a      	lsls	r2, r3, #5
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	4413      	add	r3, r2
 800e756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e75a:	691a      	ldr	r2, [r3, #16]
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e764:	69b9      	ldr	r1, [r7, #24]
 800e766:	0148      	lsls	r0, r1, #5
 800e768:	69f9      	ldr	r1, [r7, #28]
 800e76a:	4401      	add	r1, r0
 800e76c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e770:	4313      	orrs	r3, r2
 800e772:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	015a      	lsls	r2, r3, #5
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	4413      	add	r3, r2
 800e77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	69ba      	ldr	r2, [r7, #24]
 800e784:	0151      	lsls	r1, r2, #5
 800e786:	69fa      	ldr	r2, [r7, #28]
 800e788:	440a      	add	r2, r1
 800e78a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e78e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e792:	6113      	str	r3, [r2, #16]
 800e794:	e037      	b.n	800e806 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	691a      	ldr	r2, [r3, #16]
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	4413      	add	r3, r2
 800e7a0:	1e5a      	subs	r2, r3, #1
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7aa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	8afa      	ldrh	r2, [r7, #22]
 800e7b2:	fb03 f202 	mul.w	r2, r3, r2
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	015a      	lsls	r2, r3, #5
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7c6:	691a      	ldr	r2, [r3, #16]
 800e7c8:	8afb      	ldrh	r3, [r7, #22]
 800e7ca:	04d9      	lsls	r1, r3, #19
 800e7cc:	4b39      	ldr	r3, [pc, #228]	@ (800e8b4 <USB_EPStartXfer+0x53c>)
 800e7ce:	400b      	ands	r3, r1
 800e7d0:	69b9      	ldr	r1, [r7, #24]
 800e7d2:	0148      	lsls	r0, r1, #5
 800e7d4:	69f9      	ldr	r1, [r7, #28]
 800e7d6:	4401      	add	r1, r0
 800e7d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	015a      	lsls	r2, r3, #5
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7ec:	691a      	ldr	r2, [r3, #16]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	6a1b      	ldr	r3, [r3, #32]
 800e7f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7f6:	69b9      	ldr	r1, [r7, #24]
 800e7f8:	0148      	lsls	r0, r1, #5
 800e7fa:	69f9      	ldr	r1, [r7, #28]
 800e7fc:	4401      	add	r1, r0
 800e7fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e802:	4313      	orrs	r3, r2
 800e804:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d10d      	bne.n	800e828 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d009      	beq.n	800e828 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	68d9      	ldr	r1, [r3, #12]
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	015a      	lsls	r2, r3, #5
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	4413      	add	r3, r2
 800e820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e824:	460a      	mov	r2, r1
 800e826:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	791b      	ldrb	r3, [r3, #4]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d128      	bne.n	800e882 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d110      	bne.n	800e862 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	015a      	lsls	r2, r3, #5
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	4413      	add	r3, r2
 800e848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	69ba      	ldr	r2, [r7, #24]
 800e850:	0151      	lsls	r1, r2, #5
 800e852:	69fa      	ldr	r2, [r7, #28]
 800e854:	440a      	add	r2, r1
 800e856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e85a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e85e:	6013      	str	r3, [r2, #0]
 800e860:	e00f      	b.n	800e882 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	015a      	lsls	r2, r3, #5
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	4413      	add	r3, r2
 800e86a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	69ba      	ldr	r2, [r7, #24]
 800e872:	0151      	lsls	r1, r2, #5
 800e874:	69fa      	ldr	r2, [r7, #28]
 800e876:	440a      	add	r2, r1
 800e878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e87c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e880:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	015a      	lsls	r2, r3, #5
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	4413      	add	r3, r2
 800e88a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	69ba      	ldr	r2, [r7, #24]
 800e892:	0151      	lsls	r1, r2, #5
 800e894:	69fa      	ldr	r2, [r7, #28]
 800e896:	440a      	add	r2, r1
 800e898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e89c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e8a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3720      	adds	r7, #32
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	fff80000 	.word	0xfff80000
 800e8b0:	e007ffff 	.word	0xe007ffff
 800e8b4:	1ff80000 	.word	0x1ff80000

0800e8b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b087      	sub	sp, #28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	785b      	ldrb	r3, [r3, #1]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d14a      	bne.n	800e96c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	015a      	lsls	r2, r3, #5
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	4413      	add	r3, r2
 800e8e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8ee:	f040 8086 	bne.w	800e9fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	015a      	lsls	r2, r3, #5
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	683a      	ldr	r2, [r7, #0]
 800e904:	7812      	ldrb	r2, [r2, #0]
 800e906:	0151      	lsls	r1, r2, #5
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	440a      	add	r2, r1
 800e90c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e910:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e914:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	015a      	lsls	r2, r3, #5
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	4413      	add	r3, r2
 800e920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	683a      	ldr	r2, [r7, #0]
 800e928:	7812      	ldrb	r2, [r2, #0]
 800e92a:	0151      	lsls	r1, r2, #5
 800e92c:	693a      	ldr	r2, [r7, #16]
 800e92e:	440a      	add	r2, r1
 800e930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e938:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	3301      	adds	r3, #1
 800e93e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e946:	4293      	cmp	r3, r2
 800e948:	d902      	bls.n	800e950 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	75fb      	strb	r3, [r7, #23]
          break;
 800e94e:	e056      	b.n	800e9fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	015a      	lsls	r2, r3, #5
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	4413      	add	r3, r2
 800e95a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e968:	d0e7      	beq.n	800e93a <USB_EPStopXfer+0x82>
 800e96a:	e048      	b.n	800e9fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	015a      	lsls	r2, r3, #5
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	4413      	add	r3, r2
 800e976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e984:	d13b      	bne.n	800e9fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	015a      	lsls	r2, r3, #5
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	4413      	add	r3, r2
 800e990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	7812      	ldrb	r2, [r2, #0]
 800e99a:	0151      	lsls	r1, r2, #5
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	440a      	add	r2, r1
 800e9a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e9a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	015a      	lsls	r2, r3, #5
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	7812      	ldrb	r2, [r2, #0]
 800e9be:	0151      	lsls	r1, r2, #5
 800e9c0:	693a      	ldr	r2, [r7, #16]
 800e9c2:	440a      	add	r2, r1
 800e9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e9cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d902      	bls.n	800e9e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	75fb      	strb	r3, [r7, #23]
          break;
 800e9e2:	e00c      	b.n	800e9fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	015a      	lsls	r2, r3, #5
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	4413      	add	r3, r2
 800e9ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e9f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e9fc:	d0e7      	beq.n	800e9ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	371c      	adds	r7, #28
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b089      	sub	sp, #36	@ 0x24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	4611      	mov	r1, r2
 800ea18:	461a      	mov	r2, r3
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	71fb      	strb	r3, [r7, #7]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ea2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d123      	bne.n	800ea7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ea32:	88bb      	ldrh	r3, [r7, #4]
 800ea34:	3303      	adds	r3, #3
 800ea36:	089b      	lsrs	r3, r3, #2
 800ea38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	61bb      	str	r3, [r7, #24]
 800ea3e:	e018      	b.n	800ea72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ea40:	79fb      	ldrb	r3, [r7, #7]
 800ea42:	031a      	lsls	r2, r3, #12
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	4413      	add	r3, r2
 800ea48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	3301      	adds	r3, #1
 800ea58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	3301      	adds	r3, #1
 800ea64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	61bb      	str	r3, [r7, #24]
 800ea72:	69ba      	ldr	r2, [r7, #24]
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d3e2      	bcc.n	800ea40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3724      	adds	r7, #36	@ 0x24
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b08b      	sub	sp, #44	@ 0x2c
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ea9e:	88fb      	ldrh	r3, [r7, #6]
 800eaa0:	089b      	lsrs	r3, r3, #2
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800eaa6:	88fb      	ldrh	r3, [r7, #6]
 800eaa8:	f003 0303 	and.w	r3, r3, #3
 800eaac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eaae:	2300      	movs	r3, #0
 800eab0:	623b      	str	r3, [r7, #32]
 800eab2:	e014      	b.n	800eade <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabe:	601a      	str	r2, [r3, #0]
    pDest++;
 800eac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac2:	3301      	adds	r3, #1
 800eac4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac8:	3301      	adds	r3, #1
 800eaca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eace:	3301      	adds	r3, #1
 800ead0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ead2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead4:	3301      	adds	r3, #1
 800ead6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ead8:	6a3b      	ldr	r3, [r7, #32]
 800eada:	3301      	adds	r3, #1
 800eadc:	623b      	str	r3, [r7, #32]
 800eade:	6a3a      	ldr	r2, [r7, #32]
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d3e6      	bcc.n	800eab4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eae6:	8bfb      	ldrh	r3, [r7, #30]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01e      	beq.n	800eb2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eaec:	2300      	movs	r3, #0
 800eaee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	f107 0310 	add.w	r3, r7, #16
 800eafc:	6812      	ldr	r2, [r2, #0]
 800eafe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eb00:	693a      	ldr	r2, [r7, #16]
 800eb02:	6a3b      	ldr	r3, [r7, #32]
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	fa22 f303 	lsr.w	r3, r2, r3
 800eb0c:	b2da      	uxtb	r2, r3
 800eb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb10:	701a      	strb	r2, [r3, #0]
      i++;
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	3301      	adds	r3, #1
 800eb16:	623b      	str	r3, [r7, #32]
      pDest++;
 800eb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eb1e:	8bfb      	ldrh	r3, [r7, #30]
 800eb20:	3b01      	subs	r3, #1
 800eb22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eb24:	8bfb      	ldrh	r3, [r7, #30]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1ea      	bne.n	800eb00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	372c      	adds	r7, #44	@ 0x2c
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	785b      	ldrb	r3, [r3, #1]
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d12c      	bne.n	800ebae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	015a      	lsls	r2, r3, #5
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	db12      	blt.n	800eb8c <USB_EPSetStall+0x54>
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00f      	beq.n	800eb8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	015a      	lsls	r2, r3, #5
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	4413      	add	r3, r2
 800eb74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	0151      	lsls	r1, r2, #5
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	440a      	add	r2, r1
 800eb82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eb8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	015a      	lsls	r2, r3, #5
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	4413      	add	r3, r2
 800eb94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	0151      	lsls	r1, r2, #5
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	440a      	add	r2, r1
 800eba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eba6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ebaa:	6013      	str	r3, [r2, #0]
 800ebac:	e02b      	b.n	800ec06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	015a      	lsls	r2, r3, #5
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	db12      	blt.n	800ebe6 <USB_EPSetStall+0xae>
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00f      	beq.n	800ebe6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	015a      	lsls	r2, r3, #5
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	4413      	add	r3, r2
 800ebce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	0151      	lsls	r1, r2, #5
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	440a      	add	r2, r1
 800ebdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebe0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ebe4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	015a      	lsls	r2, r3, #5
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	4413      	add	r3, r2
 800ebee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	0151      	lsls	r1, r2, #5
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	440a      	add	r2, r1
 800ebfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ec04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3714      	adds	r7, #20
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	785b      	ldrb	r3, [r3, #1]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d128      	bne.n	800ec82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	015a      	lsls	r2, r3, #5
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	4413      	add	r3, r2
 800ec38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	0151      	lsls	r1, r2, #5
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	440a      	add	r2, r1
 800ec46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ec4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	791b      	ldrb	r3, [r3, #4]
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	d003      	beq.n	800ec60 <USB_EPClearStall+0x4c>
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	791b      	ldrb	r3, [r3, #4]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d138      	bne.n	800ecd2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	015a      	lsls	r2, r3, #5
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	4413      	add	r3, r2
 800ec68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	0151      	lsls	r1, r2, #5
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	440a      	add	r2, r1
 800ec76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec7e:	6013      	str	r3, [r2, #0]
 800ec80:	e027      	b.n	800ecd2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	0151      	lsls	r1, r2, #5
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	440a      	add	r2, r1
 800ec98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eca0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	791b      	ldrb	r3, [r3, #4]
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d003      	beq.n	800ecb2 <USB_EPClearStall+0x9e>
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	791b      	ldrb	r3, [r3, #4]
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	d10f      	bne.n	800ecd2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	015a      	lsls	r2, r3, #5
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	4413      	add	r3, r2
 800ecba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68ba      	ldr	r2, [r7, #8]
 800ecc2:	0151      	lsls	r1, r2, #5
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	440a      	add	r2, r1
 800ecc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ecd0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3714      	adds	r7, #20
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	460b      	mov	r3, r1
 800ecea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecfe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ed02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	78fb      	ldrb	r3, [r7, #3]
 800ed0e:	011b      	lsls	r3, r3, #4
 800ed10:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ed14:	68f9      	ldr	r1, [r7, #12]
 800ed16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3714      	adds	r7, #20
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b085      	sub	sp, #20
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ed46:	f023 0303 	bic.w	r3, r3, #3
 800ed4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed5a:	f023 0302 	bic.w	r3, r3, #2
 800ed5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3714      	adds	r7, #20
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr

0800ed6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed6e:	b480      	push	{r7}
 800ed70:	b085      	sub	sp, #20
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ed88:	f023 0303 	bic.w	r3, r3, #3
 800ed8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed9c:	f043 0302 	orr.w	r3, r3, #2
 800eda0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	695b      	ldr	r3, [r3, #20]
 800edbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	4013      	ands	r3, r2
 800edc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800edc8:	68fb      	ldr	r3, [r7, #12]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3714      	adds	r7, #20
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr

0800edd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800edd6:	b480      	push	{r7}
 800edd8:	b085      	sub	sp, #20
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ede8:	699b      	ldr	r3, [r3, #24]
 800edea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edf2:	69db      	ldr	r3, [r3, #28]
 800edf4:	68ba      	ldr	r2, [r7, #8]
 800edf6:	4013      	ands	r3, r2
 800edf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	0c1b      	lsrs	r3, r3, #16
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3714      	adds	r7, #20
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b085      	sub	sp, #20
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee1c:	699b      	ldr	r3, [r3, #24]
 800ee1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	4013      	ands	r3, r2
 800ee2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	b29b      	uxth	r3, r3
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3714      	adds	r7, #20
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b085      	sub	sp, #20
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	460b      	mov	r3, r1
 800ee48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ee4e:	78fb      	ldrb	r3, [r7, #3]
 800ee50:	015a      	lsls	r2, r3, #5
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	4413      	add	r3, r2
 800ee56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee64:	695b      	ldr	r3, [r3, #20]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	4013      	ands	r3, r2
 800ee6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3714      	adds	r7, #20
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr

0800ee7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee7a:	b480      	push	{r7}
 800ee7c:	b087      	sub	sp, #28
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	460b      	mov	r3, r1
 800ee84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee90:	691b      	ldr	r3, [r3, #16]
 800ee92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ee9e:	78fb      	ldrb	r3, [r7, #3]
 800eea0:	f003 030f 	and.w	r3, r3, #15
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	fa22 f303 	lsr.w	r3, r2, r3
 800eeaa:	01db      	lsls	r3, r3, #7
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eeb4:	78fb      	ldrb	r3, [r7, #3]
 800eeb6:	015a      	lsls	r2, r3, #5
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	4413      	add	r3, r2
 800eebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	693a      	ldr	r2, [r7, #16]
 800eec4:	4013      	ands	r3, r2
 800eec6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eec8:	68bb      	ldr	r3, [r7, #8]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	371c      	adds	r7, #28
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eed6:	b480      	push	{r7}
 800eed8:	b083      	sub	sp, #12
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	695b      	ldr	r3, [r3, #20]
 800eee2:	f003 0301 	and.w	r3, r3, #1
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
	...

0800eef4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef0e:	4619      	mov	r1, r3
 800ef10:	4b09      	ldr	r3, [pc, #36]	@ (800ef38 <USB_ActivateSetup+0x44>)
 800ef12:	4013      	ands	r3, r2
 800ef14:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ef24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ef28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr
 800ef38:	fffff800 	.word	0xfffff800

0800ef3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b087      	sub	sp, #28
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	460b      	mov	r3, r1
 800ef46:	607a      	str	r2, [r7, #4]
 800ef48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	333c      	adds	r3, #60	@ 0x3c
 800ef52:	3304      	adds	r3, #4
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	4a26      	ldr	r2, [pc, #152]	@ (800eff4 <USB_EP0_OutStart+0xb8>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d90a      	bls.n	800ef76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef70:	d101      	bne.n	800ef76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ef72:	2300      	movs	r3, #0
 800ef74:	e037      	b.n	800efe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	2300      	movs	r3, #0
 800ef80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef88:	691b      	ldr	r3, [r3, #16]
 800ef8a:	697a      	ldr	r2, [r7, #20]
 800ef8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ef94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efa4:	f043 0318 	orr.w	r3, r3, #24
 800efa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efb0:	691b      	ldr	r3, [r3, #16]
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efb8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800efbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800efbe:	7afb      	ldrb	r3, [r7, #11]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d10f      	bne.n	800efe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efca:	461a      	mov	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efde:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800efe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	371c      	adds	r7, #28
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	4f54300a 	.word	0x4f54300a

0800eff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f000:	2300      	movs	r3, #0
 800f002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	3301      	adds	r3, #1
 800f008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	4a13      	ldr	r2, [pc, #76]	@ (800f05c <USB_CoreReset+0x64>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d901      	bls.n	800f016 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f012:	2303      	movs	r3, #3
 800f014:	e01b      	b.n	800f04e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	daf2      	bge.n	800f004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f01e:	2300      	movs	r3, #0
 800f020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	f043 0201 	orr.w	r2, r3, #1
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3301      	adds	r3, #1
 800f032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4a09      	ldr	r2, [pc, #36]	@ (800f05c <USB_CoreReset+0x64>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d901      	bls.n	800f040 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f03c:	2303      	movs	r3, #3
 800f03e:	e006      	b.n	800f04e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	f003 0301 	and.w	r3, r3, #1
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d0f0      	beq.n	800f02e <USB_CoreReset+0x36>

  return HAL_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3714      	adds	r7, #20
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	00030d40 	.word	0x00030d40

0800f060 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	460b      	mov	r3, r1
 800f06a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f06c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f070:	f003 f954 	bl	801231c <USBD_static_malloc>
 800f074:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d109      	bne.n	800f090 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	32b0      	adds	r2, #176	@ 0xb0
 800f086:	2100      	movs	r1, #0
 800f088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f08c:	2302      	movs	r3, #2
 800f08e:	e0d4      	b.n	800f23a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f090:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f094:	2100      	movs	r1, #0
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f004 f827 	bl	80130ea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	32b0      	adds	r2, #176	@ 0xb0
 800f0a6:	68f9      	ldr	r1, [r7, #12]
 800f0a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	32b0      	adds	r2, #176	@ 0xb0
 800f0b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7c1b      	ldrb	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d138      	bne.n	800f13a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f0c8:	4b5e      	ldr	r3, [pc, #376]	@ (800f244 <USBD_CDC_Init+0x1e4>)
 800f0ca:	7819      	ldrb	r1, [r3, #0]
 800f0cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0d0:	2202      	movs	r2, #2
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f002 ffff 	bl	80120d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f0d8:	4b5a      	ldr	r3, [pc, #360]	@ (800f244 <USBD_CDC_Init+0x1e4>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 020f 	and.w	r2, r3, #15
 800f0e0:	6879      	ldr	r1, [r7, #4]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	4413      	add	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	440b      	add	r3, r1
 800f0ec:	3324      	adds	r3, #36	@ 0x24
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f0f2:	4b55      	ldr	r3, [pc, #340]	@ (800f248 <USBD_CDC_Init+0x1e8>)
 800f0f4:	7819      	ldrb	r1, [r3, #0]
 800f0f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0fa:	2202      	movs	r2, #2
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f002 ffea 	bl	80120d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f102:	4b51      	ldr	r3, [pc, #324]	@ (800f248 <USBD_CDC_Init+0x1e8>)
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	f003 020f 	and.w	r2, r3, #15
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	4613      	mov	r3, r2
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	4413      	add	r3, r2
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	440b      	add	r3, r1
 800f116:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f11a:	2201      	movs	r2, #1
 800f11c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f11e:	4b4b      	ldr	r3, [pc, #300]	@ (800f24c <USBD_CDC_Init+0x1ec>)
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	f003 020f 	and.w	r2, r3, #15
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	4613      	mov	r3, r2
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	4413      	add	r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	440b      	add	r3, r1
 800f132:	3326      	adds	r3, #38	@ 0x26
 800f134:	2210      	movs	r2, #16
 800f136:	801a      	strh	r2, [r3, #0]
 800f138:	e035      	b.n	800f1a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f13a:	4b42      	ldr	r3, [pc, #264]	@ (800f244 <USBD_CDC_Init+0x1e4>)
 800f13c:	7819      	ldrb	r1, [r3, #0]
 800f13e:	2340      	movs	r3, #64	@ 0x40
 800f140:	2202      	movs	r2, #2
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f002 ffc7 	bl	80120d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f148:	4b3e      	ldr	r3, [pc, #248]	@ (800f244 <USBD_CDC_Init+0x1e4>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	f003 020f 	and.w	r2, r3, #15
 800f150:	6879      	ldr	r1, [r7, #4]
 800f152:	4613      	mov	r3, r2
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	4413      	add	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	440b      	add	r3, r1
 800f15c:	3324      	adds	r3, #36	@ 0x24
 800f15e:	2201      	movs	r2, #1
 800f160:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f162:	4b39      	ldr	r3, [pc, #228]	@ (800f248 <USBD_CDC_Init+0x1e8>)
 800f164:	7819      	ldrb	r1, [r3, #0]
 800f166:	2340      	movs	r3, #64	@ 0x40
 800f168:	2202      	movs	r2, #2
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f002 ffb3 	bl	80120d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f170:	4b35      	ldr	r3, [pc, #212]	@ (800f248 <USBD_CDC_Init+0x1e8>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	f003 020f 	and.w	r2, r3, #15
 800f178:	6879      	ldr	r1, [r7, #4]
 800f17a:	4613      	mov	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	4413      	add	r3, r2
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	440b      	add	r3, r1
 800f184:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f188:	2201      	movs	r2, #1
 800f18a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f18c:	4b2f      	ldr	r3, [pc, #188]	@ (800f24c <USBD_CDC_Init+0x1ec>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	f003 020f 	and.w	r2, r3, #15
 800f194:	6879      	ldr	r1, [r7, #4]
 800f196:	4613      	mov	r3, r2
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	4413      	add	r3, r2
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	440b      	add	r3, r1
 800f1a0:	3326      	adds	r3, #38	@ 0x26
 800f1a2:	2210      	movs	r2, #16
 800f1a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f1a6:	4b29      	ldr	r3, [pc, #164]	@ (800f24c <USBD_CDC_Init+0x1ec>)
 800f1a8:	7819      	ldrb	r1, [r3, #0]
 800f1aa:	2308      	movs	r3, #8
 800f1ac:	2203      	movs	r2, #3
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f002 ff91 	bl	80120d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f1b4:	4b25      	ldr	r3, [pc, #148]	@ (800f24c <USBD_CDC_Init+0x1ec>)
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	f003 020f 	and.w	r2, r3, #15
 800f1bc:	6879      	ldr	r1, [r7, #4]
 800f1be:	4613      	mov	r3, r2
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	4413      	add	r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	440b      	add	r3, r1
 800f1c8:	3324      	adds	r3, #36	@ 0x24
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	33b0      	adds	r3, #176	@ 0xb0
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f200:	2b00      	cmp	r3, #0
 800f202:	d101      	bne.n	800f208 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f204:	2302      	movs	r3, #2
 800f206:	e018      	b.n	800f23a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	7c1b      	ldrb	r3, [r3, #16]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10a      	bne.n	800f226 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f210:	4b0d      	ldr	r3, [pc, #52]	@ (800f248 <USBD_CDC_Init+0x1e8>)
 800f212:	7819      	ldrb	r1, [r3, #0]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f21a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f003 f848 	bl	80122b4 <USBD_LL_PrepareReceive>
 800f224:	e008      	b.n	800f238 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f226:	4b08      	ldr	r3, [pc, #32]	@ (800f248 <USBD_CDC_Init+0x1e8>)
 800f228:	7819      	ldrb	r1, [r3, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f230:	2340      	movs	r3, #64	@ 0x40
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f003 f83e 	bl	80122b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	2400009b 	.word	0x2400009b
 800f248:	2400009c 	.word	0x2400009c
 800f24c:	2400009d 	.word	0x2400009d

0800f250 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f25c:	4b3a      	ldr	r3, [pc, #232]	@ (800f348 <USBD_CDC_DeInit+0xf8>)
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	4619      	mov	r1, r3
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f002 ff5d 	bl	8012122 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f268:	4b37      	ldr	r3, [pc, #220]	@ (800f348 <USBD_CDC_DeInit+0xf8>)
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	f003 020f 	and.w	r2, r3, #15
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	4613      	mov	r3, r2
 800f274:	009b      	lsls	r3, r3, #2
 800f276:	4413      	add	r3, r2
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	440b      	add	r3, r1
 800f27c:	3324      	adds	r3, #36	@ 0x24
 800f27e:	2200      	movs	r2, #0
 800f280:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f282:	4b32      	ldr	r3, [pc, #200]	@ (800f34c <USBD_CDC_DeInit+0xfc>)
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	4619      	mov	r1, r3
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f002 ff4a 	bl	8012122 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f28e:	4b2f      	ldr	r3, [pc, #188]	@ (800f34c <USBD_CDC_DeInit+0xfc>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	f003 020f 	and.w	r2, r3, #15
 800f296:	6879      	ldr	r1, [r7, #4]
 800f298:	4613      	mov	r3, r2
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4413      	add	r3, r2
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	440b      	add	r3, r1
 800f2a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f2aa:	4b29      	ldr	r3, [pc, #164]	@ (800f350 <USBD_CDC_DeInit+0x100>)
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f002 ff36 	bl	8012122 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f2b6:	4b26      	ldr	r3, [pc, #152]	@ (800f350 <USBD_CDC_DeInit+0x100>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	f003 020f 	and.w	r2, r3, #15
 800f2be:	6879      	ldr	r1, [r7, #4]
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	4413      	add	r3, r2
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	440b      	add	r3, r1
 800f2ca:	3324      	adds	r3, #36	@ 0x24
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f2d0:	4b1f      	ldr	r3, [pc, #124]	@ (800f350 <USBD_CDC_DeInit+0x100>)
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	f003 020f 	and.w	r2, r3, #15
 800f2d8:	6879      	ldr	r1, [r7, #4]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	3326      	adds	r3, #38	@ 0x26
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	32b0      	adds	r2, #176	@ 0xb0
 800f2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d01f      	beq.n	800f33c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	33b0      	adds	r3, #176	@ 0xb0
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	32b0      	adds	r2, #176	@ 0xb0
 800f31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f31e:	4618      	mov	r0, r3
 800f320:	f003 f80a 	bl	8012338 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	32b0      	adds	r2, #176	@ 0xb0
 800f32e:	2100      	movs	r1, #0
 800f330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f33c:	2300      	movs	r3, #0
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	2400009b 	.word	0x2400009b
 800f34c:	2400009c 	.word	0x2400009c
 800f350:	2400009d 	.word	0x2400009d

0800f354 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	32b0      	adds	r2, #176	@ 0xb0
 800f368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f36c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f36e:	2300      	movs	r3, #0
 800f370:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f372:	2300      	movs	r3, #0
 800f374:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f376:	2300      	movs	r3, #0
 800f378:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d101      	bne.n	800f384 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f380:	2303      	movs	r3, #3
 800f382:	e0bf      	b.n	800f504 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d050      	beq.n	800f432 <USBD_CDC_Setup+0xde>
 800f390:	2b20      	cmp	r3, #32
 800f392:	f040 80af 	bne.w	800f4f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	88db      	ldrh	r3, [r3, #6]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d03a      	beq.n	800f414 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	b25b      	sxtb	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	da1b      	bge.n	800f3e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	33b0      	adds	r3, #176	@ 0xb0
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4413      	add	r3, r2
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	683a      	ldr	r2, [r7, #0]
 800f3bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f3be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	88d2      	ldrh	r2, [r2, #6]
 800f3c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	88db      	ldrh	r3, [r3, #6]
 800f3ca:	2b07      	cmp	r3, #7
 800f3cc:	bf28      	it	cs
 800f3ce:	2307      	movcs	r3, #7
 800f3d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	89fa      	ldrh	r2, [r7, #14]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 fdb1 	bl	8010f40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f3de:	e090      	b.n	800f502 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	785a      	ldrb	r2, [r3, #1]
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	88db      	ldrh	r3, [r3, #6]
 800f3ee:	2b3f      	cmp	r3, #63	@ 0x3f
 800f3f0:	d803      	bhi.n	800f3fa <USBD_CDC_Setup+0xa6>
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	88db      	ldrh	r3, [r3, #6]
 800f3f6:	b2da      	uxtb	r2, r3
 800f3f8:	e000      	b.n	800f3fc <USBD_CDC_Setup+0xa8>
 800f3fa:	2240      	movs	r2, #64	@ 0x40
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f402:	6939      	ldr	r1, [r7, #16]
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f40a:	461a      	mov	r2, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f001 fdc3 	bl	8010f98 <USBD_CtlPrepareRx>
      break;
 800f412:	e076      	b.n	800f502 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	33b0      	adds	r3, #176	@ 0xb0
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	683a      	ldr	r2, [r7, #0]
 800f428:	7850      	ldrb	r0, [r2, #1]
 800f42a:	2200      	movs	r2, #0
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	4798      	blx	r3
      break;
 800f430:	e067      	b.n	800f502 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	785b      	ldrb	r3, [r3, #1]
 800f436:	2b0b      	cmp	r3, #11
 800f438:	d851      	bhi.n	800f4de <USBD_CDC_Setup+0x18a>
 800f43a:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <USBD_CDC_Setup+0xec>)
 800f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f440:	0800f471 	.word	0x0800f471
 800f444:	0800f4ed 	.word	0x0800f4ed
 800f448:	0800f4df 	.word	0x0800f4df
 800f44c:	0800f4df 	.word	0x0800f4df
 800f450:	0800f4df 	.word	0x0800f4df
 800f454:	0800f4df 	.word	0x0800f4df
 800f458:	0800f4df 	.word	0x0800f4df
 800f45c:	0800f4df 	.word	0x0800f4df
 800f460:	0800f4df 	.word	0x0800f4df
 800f464:	0800f4df 	.word	0x0800f4df
 800f468:	0800f49b 	.word	0x0800f49b
 800f46c:	0800f4c5 	.word	0x0800f4c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f476:	b2db      	uxtb	r3, r3
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d107      	bne.n	800f48c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f47c:	f107 030a 	add.w	r3, r7, #10
 800f480:	2202      	movs	r2, #2
 800f482:	4619      	mov	r1, r3
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f001 fd5b 	bl	8010f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f48a:	e032      	b.n	800f4f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f48c:	6839      	ldr	r1, [r7, #0]
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f001 fce5 	bl	8010e5e <USBD_CtlError>
            ret = USBD_FAIL;
 800f494:	2303      	movs	r3, #3
 800f496:	75fb      	strb	r3, [r7, #23]
          break;
 800f498:	e02b      	b.n	800f4f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	2b03      	cmp	r3, #3
 800f4a4:	d107      	bne.n	800f4b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f4a6:	f107 030d 	add.w	r3, r7, #13
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f001 fd46 	bl	8010f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f4b4:	e01d      	b.n	800f4f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f001 fcd0 	bl	8010e5e <USBD_CtlError>
            ret = USBD_FAIL;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	75fb      	strb	r3, [r7, #23]
          break;
 800f4c2:	e016      	b.n	800f4f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b03      	cmp	r3, #3
 800f4ce:	d00f      	beq.n	800f4f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f4d0:	6839      	ldr	r1, [r7, #0]
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f001 fcc3 	bl	8010e5e <USBD_CtlError>
            ret = USBD_FAIL;
 800f4d8:	2303      	movs	r3, #3
 800f4da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f4dc:	e008      	b.n	800f4f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f4de:	6839      	ldr	r1, [r7, #0]
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f001 fcbc 	bl	8010e5e <USBD_CtlError>
          ret = USBD_FAIL;
 800f4e6:	2303      	movs	r3, #3
 800f4e8:	75fb      	strb	r3, [r7, #23]
          break;
 800f4ea:	e002      	b.n	800f4f2 <USBD_CDC_Setup+0x19e>
          break;
 800f4ec:	bf00      	nop
 800f4ee:	e008      	b.n	800f502 <USBD_CDC_Setup+0x1ae>
          break;
 800f4f0:	bf00      	nop
      }
      break;
 800f4f2:	e006      	b.n	800f502 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f001 fcb1 	bl	8010e5e <USBD_CtlError>
      ret = USBD_FAIL;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	75fb      	strb	r3, [r7, #23]
      break;
 800f500:	bf00      	nop
  }

  return (uint8_t)ret;
 800f502:	7dfb      	ldrb	r3, [r7, #23]
}
 800f504:	4618      	mov	r0, r3
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	460b      	mov	r3, r1
 800f516:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f51e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	32b0      	adds	r2, #176	@ 0xb0
 800f52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d101      	bne.n	800f536 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f532:	2303      	movs	r3, #3
 800f534:	e065      	b.n	800f602 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	32b0      	adds	r2, #176	@ 0xb0
 800f540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f544:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f546:	78fb      	ldrb	r3, [r7, #3]
 800f548:	f003 020f 	and.w	r2, r3, #15
 800f54c:	6879      	ldr	r1, [r7, #4]
 800f54e:	4613      	mov	r3, r2
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	4413      	add	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	440b      	add	r3, r1
 800f558:	3318      	adds	r3, #24
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d02f      	beq.n	800f5c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f560:	78fb      	ldrb	r3, [r7, #3]
 800f562:	f003 020f 	and.w	r2, r3, #15
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	4613      	mov	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4413      	add	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	440b      	add	r3, r1
 800f572:	3318      	adds	r3, #24
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	78fb      	ldrb	r3, [r7, #3]
 800f578:	f003 010f 	and.w	r1, r3, #15
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	460b      	mov	r3, r1
 800f580:	00db      	lsls	r3, r3, #3
 800f582:	440b      	add	r3, r1
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	4403      	add	r3, r0
 800f588:	3344      	adds	r3, #68	@ 0x44
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f590:	fb01 f303 	mul.w	r3, r1, r3
 800f594:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f596:	2b00      	cmp	r3, #0
 800f598:	d112      	bne.n	800f5c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f59a:	78fb      	ldrb	r3, [r7, #3]
 800f59c:	f003 020f 	and.w	r2, r3, #15
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	4613      	mov	r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	4413      	add	r3, r2
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	440b      	add	r3, r1
 800f5ac:	3318      	adds	r3, #24
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f5b2:	78f9      	ldrb	r1, [r7, #3]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f002 fe5a 	bl	8012272 <USBD_LL_Transmit>
 800f5be:	e01f      	b.n	800f600 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	33b0      	adds	r3, #176	@ 0xb0
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	4413      	add	r3, r2
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d010      	beq.n	800f600 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	33b0      	adds	r3, #176	@ 0xb0
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	4413      	add	r3, r2
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f5fc:	78fa      	ldrb	r2, [r7, #3]
 800f5fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	460b      	mov	r3, r1
 800f614:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	32b0      	adds	r2, #176	@ 0xb0
 800f620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f624:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	32b0      	adds	r2, #176	@ 0xb0
 800f630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d101      	bne.n	800f63c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f638:	2303      	movs	r3, #3
 800f63a:	e01a      	b.n	800f672 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f63c:	78fb      	ldrb	r3, [r7, #3]
 800f63e:	4619      	mov	r1, r3
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f002 fe58 	bl	80122f6 <USBD_LL_GetRxDataSize>
 800f646:	4602      	mov	r2, r0
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	33b0      	adds	r3, #176	@ 0xb0
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f66c:	4611      	mov	r1, r2
 800f66e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3710      	adds	r7, #16
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}

0800f67a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b084      	sub	sp, #16
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	32b0      	adds	r2, #176	@ 0xb0
 800f68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f690:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d101      	bne.n	800f69c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f698:	2303      	movs	r3, #3
 800f69a:	e024      	b.n	800f6e6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	33b0      	adds	r3, #176	@ 0xb0
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	4413      	add	r3, r2
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d019      	beq.n	800f6e4 <USBD_CDC_EP0_RxReady+0x6a>
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f6b6:	2bff      	cmp	r3, #255	@ 0xff
 800f6b8:	d014      	beq.n	800f6e4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	33b0      	adds	r3, #176	@ 0xb0
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	4413      	add	r3, r2
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f6d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f6da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	22ff      	movs	r2, #255	@ 0xff
 800f6e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f6e4:	2300      	movs	r3, #0
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3710      	adds	r7, #16
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
	...

0800f6f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f6f8:	2182      	movs	r1, #130	@ 0x82
 800f6fa:	4818      	ldr	r0, [pc, #96]	@ (800f75c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f6fc:	f000 fd4f 	bl	801019e <USBD_GetEpDesc>
 800f700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f702:	2101      	movs	r1, #1
 800f704:	4815      	ldr	r0, [pc, #84]	@ (800f75c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f706:	f000 fd4a 	bl	801019e <USBD_GetEpDesc>
 800f70a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f70c:	2181      	movs	r1, #129	@ 0x81
 800f70e:	4813      	ldr	r0, [pc, #76]	@ (800f75c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f710:	f000 fd45 	bl	801019e <USBD_GetEpDesc>
 800f714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d002      	beq.n	800f722 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	2210      	movs	r2, #16
 800f720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d006      	beq.n	800f736 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f730:	711a      	strb	r2, [r3, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d006      	beq.n	800f74a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2200      	movs	r2, #0
 800f740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f744:	711a      	strb	r2, [r3, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2243      	movs	r2, #67	@ 0x43
 800f74e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f750:	4b02      	ldr	r3, [pc, #8]	@ (800f75c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f752:	4618      	mov	r0, r3
 800f754:	3718      	adds	r7, #24
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	24000058 	.word	0x24000058

0800f760 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f768:	2182      	movs	r1, #130	@ 0x82
 800f76a:	4818      	ldr	r0, [pc, #96]	@ (800f7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f76c:	f000 fd17 	bl	801019e <USBD_GetEpDesc>
 800f770:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f772:	2101      	movs	r1, #1
 800f774:	4815      	ldr	r0, [pc, #84]	@ (800f7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f776:	f000 fd12 	bl	801019e <USBD_GetEpDesc>
 800f77a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f77c:	2181      	movs	r1, #129	@ 0x81
 800f77e:	4813      	ldr	r0, [pc, #76]	@ (800f7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f780:	f000 fd0d 	bl	801019e <USBD_GetEpDesc>
 800f784:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	2210      	movs	r2, #16
 800f790:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d006      	beq.n	800f7a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	2200      	movs	r2, #0
 800f79c:	711a      	strb	r2, [r3, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f042 0202 	orr.w	r2, r2, #2
 800f7a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d006      	beq.n	800f7ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	711a      	strb	r2, [r3, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f042 0202 	orr.w	r2, r2, #2
 800f7b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2243      	movs	r2, #67	@ 0x43
 800f7be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f7c0:	4b02      	ldr	r3, [pc, #8]	@ (800f7cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3718      	adds	r7, #24
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	24000058 	.word	0x24000058

0800f7d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f7d8:	2182      	movs	r1, #130	@ 0x82
 800f7da:	4818      	ldr	r0, [pc, #96]	@ (800f83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f7dc:	f000 fcdf 	bl	801019e <USBD_GetEpDesc>
 800f7e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	4815      	ldr	r0, [pc, #84]	@ (800f83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f7e6:	f000 fcda 	bl	801019e <USBD_GetEpDesc>
 800f7ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f7ec:	2181      	movs	r1, #129	@ 0x81
 800f7ee:	4813      	ldr	r0, [pc, #76]	@ (800f83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f7f0:	f000 fcd5 	bl	801019e <USBD_GetEpDesc>
 800f7f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d002      	beq.n	800f802 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	2210      	movs	r2, #16
 800f800:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d006      	beq.n	800f816 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	2200      	movs	r2, #0
 800f80c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f810:	711a      	strb	r2, [r3, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d006      	beq.n	800f82a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2200      	movs	r2, #0
 800f820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f824:	711a      	strb	r2, [r3, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2243      	movs	r2, #67	@ 0x43
 800f82e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f830:	4b02      	ldr	r3, [pc, #8]	@ (800f83c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f832:	4618      	mov	r0, r3
 800f834:	3718      	adds	r7, #24
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	24000058 	.word	0x24000058

0800f840 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	220a      	movs	r2, #10
 800f84c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f84e:	4b03      	ldr	r3, [pc, #12]	@ (800f85c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f850:	4618      	mov	r0, r3
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr
 800f85c:	24000014 	.word	0x24000014

0800f860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d101      	bne.n	800f874 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f870:	2303      	movs	r3, #3
 800f872:	e009      	b.n	800f888 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	33b0      	adds	r3, #176	@ 0xb0
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	4413      	add	r3, r2
 800f882:	683a      	ldr	r2, [r7, #0]
 800f884:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f894:	b480      	push	{r7}
 800f896:	b087      	sub	sp, #28
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	32b0      	adds	r2, #176	@ 0xb0
 800f8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	e008      	b.n	800f8cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	687a      	ldr	r2, [r7, #4]
 800f8c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	371c      	adds	r7, #28
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	32b0      	adds	r2, #176	@ 0xb0
 800f8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	e004      	b.n	800f906 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3714      	adds	r7, #20
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
	...

0800f914 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	32b0      	adds	r2, #176	@ 0xb0
 800f926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f92a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f92c:	2301      	movs	r3, #1
 800f92e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d101      	bne.n	800f93a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f936:	2303      	movs	r3, #3
 800f938:	e025      	b.n	800f986 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f940:	2b00      	cmp	r3, #0
 800f942:	d11f      	bne.n	800f984 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	2201      	movs	r2, #1
 800f948:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f94c:	4b10      	ldr	r3, [pc, #64]	@ (800f990 <USBD_CDC_TransmitPacket+0x7c>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	f003 020f 	and.w	r2, r3, #15
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	4613      	mov	r3, r2
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4413      	add	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4403      	add	r3, r0
 800f966:	3318      	adds	r3, #24
 800f968:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f96a:	4b09      	ldr	r3, [pc, #36]	@ (800f990 <USBD_CDC_TransmitPacket+0x7c>)
 800f96c:	7819      	ldrb	r1, [r3, #0]
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f002 fc79 	bl	8012272 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f980:	2300      	movs	r3, #0
 800f982:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f984:	7bfb      	ldrb	r3, [r7, #15]
}
 800f986:	4618      	mov	r0, r3
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	2400009b 	.word	0x2400009b

0800f994 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	32b0      	adds	r2, #176	@ 0xb0
 800f9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	32b0      	adds	r2, #176	@ 0xb0
 800f9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d101      	bne.n	800f9c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	e018      	b.n	800f9f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	7c1b      	ldrb	r3, [r3, #16]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d10a      	bne.n	800f9e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f9ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f9fc <USBD_CDC_ReceivePacket+0x68>)
 800f9cc:	7819      	ldrb	r1, [r3, #0]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f9d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f002 fc6b 	bl	80122b4 <USBD_LL_PrepareReceive>
 800f9de:	e008      	b.n	800f9f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f9e0:	4b06      	ldr	r3, [pc, #24]	@ (800f9fc <USBD_CDC_ReceivePacket+0x68>)
 800f9e2:	7819      	ldrb	r1, [r3, #0]
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f9ea:	2340      	movs	r3, #64	@ 0x40
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f002 fc61 	bl	80122b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	2400009c 	.word	0x2400009c

0800fa00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d101      	bne.n	800fa18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fa14:	2303      	movs	r3, #3
 800fa16:	e01f      	b.n	800fa58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2200      	movs	r2, #0
 800fa24:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d003      	beq.n	800fa3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2201      	movs	r2, #1
 800fa42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	79fa      	ldrb	r2, [r7, #7]
 800fa4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f002 fad7 	bl	8012000 <USBD_LL_Init>
 800fa52:	4603      	mov	r3, r0
 800fa54:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3718      	adds	r7, #24
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fa74:	2303      	movs	r3, #3
 800fa76:	e025      	b.n	800fac4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	683a      	ldr	r2, [r7, #0]
 800fa7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	32ae      	adds	r2, #174	@ 0xae
 800fa8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00f      	beq.n	800fab4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	32ae      	adds	r2, #174	@ 0xae
 800fa9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa4:	f107 020e 	add.w	r2, r7, #14
 800faa8:	4610      	mov	r0, r2
 800faaa:	4798      	blx	r3
 800faac:	4602      	mov	r2, r0
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f002 fae3 	bl	80120a0 <USBD_LL_Start>
 800fada:	4603      	mov	r3, r0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800faec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800faee:	4618      	mov	r0, r3
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b084      	sub	sp, #16
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	460b      	mov	r3, r1
 800fb04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb06:	2300      	movs	r3, #0
 800fb08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d009      	beq.n	800fb28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	78fa      	ldrb	r2, [r7, #3]
 800fb1e:	4611      	mov	r1, r2
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	4798      	blx	r3
 800fb24:	4603      	mov	r3, r0
 800fb26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	78fa      	ldrb	r2, [r7, #3]
 800fb4c:	4611      	mov	r1, r2
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	4798      	blx	r3
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fb58:	2303      	movs	r3, #3
 800fb5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b084      	sub	sp, #16
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f001 f936 	bl	8010dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2201      	movs	r2, #1
 800fb82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fb9a:	f003 031f 	and.w	r3, r3, #31
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d01a      	beq.n	800fbd8 <USBD_LL_SetupStage+0x72>
 800fba2:	2b02      	cmp	r3, #2
 800fba4:	d822      	bhi.n	800fbec <USBD_LL_SetupStage+0x86>
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d002      	beq.n	800fbb0 <USBD_LL_SetupStage+0x4a>
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d00a      	beq.n	800fbc4 <USBD_LL_SetupStage+0x5e>
 800fbae:	e01d      	b.n	800fbec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 fb63 	bl	8010284 <USBD_StdDevReq>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	73fb      	strb	r3, [r7, #15]
      break;
 800fbc2:	e020      	b.n	800fc06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fbca:	4619      	mov	r1, r3
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fbcb 	bl	8010368 <USBD_StdItfReq>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]
      break;
 800fbd6:	e016      	b.n	800fc06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fbde:	4619      	mov	r1, r3
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 fc2d 	bl	8010440 <USBD_StdEPReq>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	73fb      	strb	r3, [r7, #15]
      break;
 800fbea:	e00c      	b.n	800fc06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fbf2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f002 fab0 	bl	8012160 <USBD_LL_StallEP>
 800fc00:	4603      	mov	r3, r0
 800fc02:	73fb      	strb	r3, [r7, #15]
      break;
 800fc04:	bf00      	nop
  }

  return ret;
 800fc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	607a      	str	r2, [r7, #4]
 800fc1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fc22:	7afb      	ldrb	r3, [r7, #11]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d16e      	bne.n	800fd06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fc2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fc36:	2b03      	cmp	r3, #3
 800fc38:	f040 8098 	bne.w	800fd6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	689a      	ldr	r2, [r3, #8]
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d913      	bls.n	800fc70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	689a      	ldr	r2, [r3, #8]
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	1ad2      	subs	r2, r2, r3
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	68da      	ldr	r2, [r3, #12]
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	689b      	ldr	r3, [r3, #8]
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	bf28      	it	cs
 800fc62:	4613      	movcs	r3, r2
 800fc64:	461a      	mov	r2, r3
 800fc66:	6879      	ldr	r1, [r7, #4]
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f001 f9b2 	bl	8010fd2 <USBD_CtlContinueRx>
 800fc6e:	e07d      	b.n	800fd6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fc76:	f003 031f 	and.w	r3, r3, #31
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d014      	beq.n	800fca8 <USBD_LL_DataOutStage+0x98>
 800fc7e:	2b02      	cmp	r3, #2
 800fc80:	d81d      	bhi.n	800fcbe <USBD_LL_DataOutStage+0xae>
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d002      	beq.n	800fc8c <USBD_LL_DataOutStage+0x7c>
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d003      	beq.n	800fc92 <USBD_LL_DataOutStage+0x82>
 800fc8a:	e018      	b.n	800fcbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	75bb      	strb	r3, [r7, #22]
            break;
 800fc90:	e018      	b.n	800fcc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f000 fa64 	bl	801016a <USBD_CoreFindIF>
 800fca2:	4603      	mov	r3, r0
 800fca4:	75bb      	strb	r3, [r7, #22]
            break;
 800fca6:	e00d      	b.n	800fcc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f000 fa66 	bl	8010184 <USBD_CoreFindEP>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	75bb      	strb	r3, [r7, #22]
            break;
 800fcbc:	e002      	b.n	800fcc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	75bb      	strb	r3, [r7, #22]
            break;
 800fcc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fcc4:	7dbb      	ldrb	r3, [r7, #22]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d119      	bne.n	800fcfe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	d113      	bne.n	800fcfe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fcd6:	7dba      	ldrb	r2, [r7, #22]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	32ae      	adds	r2, #174	@ 0xae
 800fcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fce0:	691b      	ldr	r3, [r3, #16]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00b      	beq.n	800fcfe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fce6:	7dba      	ldrb	r2, [r7, #22]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fcee:	7dba      	ldrb	r2, [r7, #22]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	32ae      	adds	r2, #174	@ 0xae
 800fcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcf8:	691b      	ldr	r3, [r3, #16]
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f001 f978 	bl	8010ff4 <USBD_CtlSendStatus>
 800fd04:	e032      	b.n	800fd6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fd06:	7afb      	ldrb	r3, [r7, #11]
 800fd08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	4619      	mov	r1, r3
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 fa37 	bl	8010184 <USBD_CoreFindEP>
 800fd16:	4603      	mov	r3, r0
 800fd18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fd1a:	7dbb      	ldrb	r3, [r7, #22]
 800fd1c:	2bff      	cmp	r3, #255	@ 0xff
 800fd1e:	d025      	beq.n	800fd6c <USBD_LL_DataOutStage+0x15c>
 800fd20:	7dbb      	ldrb	r3, [r7, #22]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d122      	bne.n	800fd6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	d117      	bne.n	800fd62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fd32:	7dba      	ldrb	r2, [r7, #22]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	32ae      	adds	r2, #174	@ 0xae
 800fd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd3c:	699b      	ldr	r3, [r3, #24]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00f      	beq.n	800fd62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fd42:	7dba      	ldrb	r2, [r7, #22]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fd4a:	7dba      	ldrb	r2, [r7, #22]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	32ae      	adds	r2, #174	@ 0xae
 800fd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd54:	699b      	ldr	r3, [r3, #24]
 800fd56:	7afa      	ldrb	r2, [r7, #11]
 800fd58:	4611      	mov	r1, r2
 800fd5a:	68f8      	ldr	r0, [r7, #12]
 800fd5c:	4798      	blx	r3
 800fd5e:	4603      	mov	r3, r0
 800fd60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fd62:	7dfb      	ldrb	r3, [r7, #23]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fd68:	7dfb      	ldrb	r3, [r7, #23]
 800fd6a:	e000      	b.n	800fd6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3718      	adds	r7, #24
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b086      	sub	sp, #24
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	60f8      	str	r0, [r7, #12]
 800fd7e:	460b      	mov	r3, r1
 800fd80:	607a      	str	r2, [r7, #4]
 800fd82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fd84:	7afb      	ldrb	r3, [r7, #11]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d16f      	bne.n	800fe6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3314      	adds	r3, #20
 800fd8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d15a      	bne.n	800fe50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	689a      	ldr	r2, [r3, #8]
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d914      	bls.n	800fdd0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	689a      	ldr	r2, [r3, #8]
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	1ad2      	subs	r2, r2, r3
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	689b      	ldr	r3, [r3, #8]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	6879      	ldr	r1, [r7, #4]
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f001 f8da 	bl	8010f76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f002 fa73 	bl	80122b4 <USBD_LL_PrepareReceive>
 800fdce:	e03f      	b.n	800fe50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	68da      	ldr	r2, [r3, #12]
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d11c      	bne.n	800fe16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	685a      	ldr	r2, [r3, #4]
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d316      	bcc.n	800fe16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	685a      	ldr	r2, [r3, #4]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d20f      	bcs.n	800fe16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f001 f8bb 	bl	8010f76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2200      	movs	r2, #0
 800fe04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe08:	2300      	movs	r3, #0
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f002 fa50 	bl	80122b4 <USBD_LL_PrepareReceive>
 800fe14:	e01c      	b.n	800fe50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d10f      	bne.n	800fe42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d009      	beq.n	800fe42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe42:	2180      	movs	r1, #128	@ 0x80
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f002 f98b 	bl	8012160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	f001 f8e5 	bl	801101a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d03a      	beq.n	800fed0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	f7ff fe42 	bl	800fae4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fe68:	e032      	b.n	800fed0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fe6a:	7afb      	ldrb	r3, [r7, #11]
 800fe6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	4619      	mov	r1, r3
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 f985 	bl	8010184 <USBD_CoreFindEP>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe7e:	7dfb      	ldrb	r3, [r7, #23]
 800fe80:	2bff      	cmp	r3, #255	@ 0xff
 800fe82:	d025      	beq.n	800fed0 <USBD_LL_DataInStage+0x15a>
 800fe84:	7dfb      	ldrb	r3, [r7, #23]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d122      	bne.n	800fed0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d11c      	bne.n	800fed0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fe96:	7dfa      	ldrb	r2, [r7, #23]
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	32ae      	adds	r2, #174	@ 0xae
 800fe9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea0:	695b      	ldr	r3, [r3, #20]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d014      	beq.n	800fed0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fea6:	7dfa      	ldrb	r2, [r7, #23]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800feae:	7dfa      	ldrb	r2, [r7, #23]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	32ae      	adds	r2, #174	@ 0xae
 800feb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb8:	695b      	ldr	r3, [r3, #20]
 800feba:	7afa      	ldrb	r2, [r7, #11]
 800febc:	4611      	mov	r1, r2
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	4798      	blx	r3
 800fec2:	4603      	mov	r3, r0
 800fec4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fec6:	7dbb      	ldrb	r3, [r7, #22]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fecc:	7dbb      	ldrb	r3, [r7, #22]
 800fece:	e000      	b.n	800fed2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3718      	adds	r7, #24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800feda:	b580      	push	{r7, lr}
 800fedc:	b084      	sub	sp, #16
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fee2:	2300      	movs	r3, #0
 800fee4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2201      	movs	r2, #1
 800feea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d014      	beq.n	800ff40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00e      	beq.n	800ff40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	6852      	ldr	r2, [r2, #4]
 800ff2e:	b2d2      	uxtb	r2, r2
 800ff30:	4611      	mov	r1, r2
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	4798      	blx	r3
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ff3c:	2303      	movs	r3, #3
 800ff3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ff40:	2340      	movs	r3, #64	@ 0x40
 800ff42:	2200      	movs	r2, #0
 800ff44:	2100      	movs	r1, #0
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f002 f8c5 	bl	80120d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2201      	movs	r2, #1
 800ff50:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2240      	movs	r2, #64	@ 0x40
 800ff58:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ff5c:	2340      	movs	r3, #64	@ 0x40
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2180      	movs	r1, #128	@ 0x80
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f002 f8b7 	bl	80120d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2240      	movs	r2, #64	@ 0x40
 800ff72:	621a      	str	r2, [r3, #32]

  return ret;
 800ff74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b083      	sub	sp, #12
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	460b      	mov	r3, r1
 800ff88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	78fa      	ldrb	r2, [r7, #3]
 800ff8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ff90:	2300      	movs	r3, #0
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	370c      	adds	r7, #12
 800ff96:	46bd      	mov	sp, r7
 800ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9c:	4770      	bx	lr

0800ff9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ff9e:	b480      	push	{r7}
 800ffa0:	b083      	sub	sp, #12
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	2b04      	cmp	r3, #4
 800ffb0:	d006      	beq.n	800ffc0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffb8:	b2da      	uxtb	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2204      	movs	r2, #4
 800ffc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	370c      	adds	r7, #12
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr

0800ffd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ffd6:	b480      	push	{r7}
 800ffd8:	b083      	sub	sp, #12
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	2b04      	cmp	r3, #4
 800ffe8:	d106      	bne.n	800fff8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b082      	sub	sp, #8
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010014:	b2db      	uxtb	r3, r3
 8010016:	2b03      	cmp	r3, #3
 8010018:	d110      	bne.n	801003c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00b      	beq.n	801003c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801002a:	69db      	ldr	r3, [r3, #28]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d005      	beq.n	801003c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010036:	69db      	ldr	r3, [r3, #28]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	3708      	adds	r7, #8
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b082      	sub	sp, #8
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
 801004e:	460b      	mov	r3, r1
 8010050:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	32ae      	adds	r2, #174	@ 0xae
 801005c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d101      	bne.n	8010068 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010064:	2303      	movs	r3, #3
 8010066:	e01c      	b.n	80100a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801006e:	b2db      	uxtb	r3, r3
 8010070:	2b03      	cmp	r3, #3
 8010072:	d115      	bne.n	80100a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	32ae      	adds	r2, #174	@ 0xae
 801007e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010082:	6a1b      	ldr	r3, [r3, #32]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00b      	beq.n	80100a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	32ae      	adds	r2, #174	@ 0xae
 8010092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010096:	6a1b      	ldr	r3, [r3, #32]
 8010098:	78fa      	ldrb	r2, [r7, #3]
 801009a:	4611      	mov	r1, r2
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80100a0:	2300      	movs	r3, #0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3708      	adds	r7, #8
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b082      	sub	sp, #8
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	460b      	mov	r3, r1
 80100b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	32ae      	adds	r2, #174	@ 0xae
 80100c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80100c8:	2303      	movs	r3, #3
 80100ca:	e01c      	b.n	8010106 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	2b03      	cmp	r3, #3
 80100d6:	d115      	bne.n	8010104 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	32ae      	adds	r2, #174	@ 0xae
 80100e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00b      	beq.n	8010104 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	32ae      	adds	r2, #174	@ 0xae
 80100f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100fc:	78fa      	ldrb	r2, [r7, #3]
 80100fe:	4611      	mov	r1, r2
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801010e:	b480      	push	{r7}
 8010110:	b083      	sub	sp, #12
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00e      	beq.n	8010160 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	6852      	ldr	r2, [r2, #4]
 801014e:	b2d2      	uxtb	r2, r2
 8010150:	4611      	mov	r1, r2
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	4798      	blx	r3
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801015c:	2303      	movs	r3, #3
 801015e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010160:	7bfb      	ldrb	r3, [r7, #15]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801016a:	b480      	push	{r7}
 801016c:	b083      	sub	sp, #12
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	460b      	mov	r3, r1
 8010174:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010176:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010178:	4618      	mov	r0, r3
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010190:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010192:	4618      	mov	r0, r3
 8010194:	370c      	adds	r7, #12
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b086      	sub	sp, #24
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	460b      	mov	r3, r1
 80101a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	885b      	ldrh	r3, [r3, #2]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	68fa      	ldr	r2, [r7, #12]
 80101be:	7812      	ldrb	r2, [r2, #0]
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d91f      	bls.n	8010204 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80101ca:	e013      	b.n	80101f4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80101cc:	f107 030a 	add.w	r3, r7, #10
 80101d0:	4619      	mov	r1, r3
 80101d2:	6978      	ldr	r0, [r7, #20]
 80101d4:	f000 f81b 	bl	801020e <USBD_GetNextDesc>
 80101d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	785b      	ldrb	r3, [r3, #1]
 80101de:	2b05      	cmp	r3, #5
 80101e0:	d108      	bne.n	80101f4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	789b      	ldrb	r3, [r3, #2]
 80101ea:	78fa      	ldrb	r2, [r7, #3]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d008      	beq.n	8010202 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80101f0:	2300      	movs	r3, #0
 80101f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	885b      	ldrh	r3, [r3, #2]
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	897b      	ldrh	r3, [r7, #10]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d8e5      	bhi.n	80101cc <USBD_GetEpDesc+0x2e>
 8010200:	e000      	b.n	8010204 <USBD_GetEpDesc+0x66>
          break;
 8010202:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010204:	693b      	ldr	r3, [r7, #16]
}
 8010206:	4618      	mov	r0, r3
 8010208:	3718      	adds	r7, #24
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801020e:	b480      	push	{r7}
 8010210:	b085      	sub	sp, #20
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
 8010216:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	7812      	ldrb	r2, [r2, #0]
 8010224:	4413      	add	r3, r2
 8010226:	b29a      	uxth	r2, r3
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	461a      	mov	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4413      	add	r3, r2
 8010236:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010238:	68fb      	ldr	r3, [r7, #12]
}
 801023a:	4618      	mov	r0, r3
 801023c:	3714      	adds	r7, #20
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010246:	b480      	push	{r7}
 8010248:	b087      	sub	sp, #28
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	3301      	adds	r3, #1
 801025c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010264:	8a3b      	ldrh	r3, [r7, #16]
 8010266:	021b      	lsls	r3, r3, #8
 8010268:	b21a      	sxth	r2, r3
 801026a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801026e:	4313      	orrs	r3, r2
 8010270:	b21b      	sxth	r3, r3
 8010272:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010274:	89fb      	ldrh	r3, [r7, #14]
}
 8010276:	4618      	mov	r0, r3
 8010278:	371c      	adds	r7, #28
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
	...

08010284 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801028e:	2300      	movs	r3, #0
 8010290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801029a:	2b40      	cmp	r3, #64	@ 0x40
 801029c:	d005      	beq.n	80102aa <USBD_StdDevReq+0x26>
 801029e:	2b40      	cmp	r3, #64	@ 0x40
 80102a0:	d857      	bhi.n	8010352 <USBD_StdDevReq+0xce>
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00f      	beq.n	80102c6 <USBD_StdDevReq+0x42>
 80102a6:	2b20      	cmp	r3, #32
 80102a8:	d153      	bne.n	8010352 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	32ae      	adds	r2, #174	@ 0xae
 80102b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	4798      	blx	r3
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]
      break;
 80102c4:	e04a      	b.n	801035c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	785b      	ldrb	r3, [r3, #1]
 80102ca:	2b09      	cmp	r3, #9
 80102cc:	d83b      	bhi.n	8010346 <USBD_StdDevReq+0xc2>
 80102ce:	a201      	add	r2, pc, #4	@ (adr r2, 80102d4 <USBD_StdDevReq+0x50>)
 80102d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102d4:	08010329 	.word	0x08010329
 80102d8:	0801033d 	.word	0x0801033d
 80102dc:	08010347 	.word	0x08010347
 80102e0:	08010333 	.word	0x08010333
 80102e4:	08010347 	.word	0x08010347
 80102e8:	08010307 	.word	0x08010307
 80102ec:	080102fd 	.word	0x080102fd
 80102f0:	08010347 	.word	0x08010347
 80102f4:	0801031f 	.word	0x0801031f
 80102f8:	08010311 	.word	0x08010311
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80102fc:	6839      	ldr	r1, [r7, #0]
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 fa3c 	bl	801077c <USBD_GetDescriptor>
          break;
 8010304:	e024      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 fbcb 	bl	8010aa4 <USBD_SetAddress>
          break;
 801030e:	e01f      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010310:	6839      	ldr	r1, [r7, #0]
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 fc0a 	bl	8010b2c <USBD_SetConfig>
 8010318:	4603      	mov	r3, r0
 801031a:	73fb      	strb	r3, [r7, #15]
          break;
 801031c:	e018      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801031e:	6839      	ldr	r1, [r7, #0]
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 fcad 	bl	8010c80 <USBD_GetConfig>
          break;
 8010326:	e013      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010328:	6839      	ldr	r1, [r7, #0]
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f000 fcde 	bl	8010cec <USBD_GetStatus>
          break;
 8010330:	e00e      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010332:	6839      	ldr	r1, [r7, #0]
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fd0d 	bl	8010d54 <USBD_SetFeature>
          break;
 801033a:	e009      	b.n	8010350 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801033c:	6839      	ldr	r1, [r7, #0]
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 fd31 	bl	8010da6 <USBD_ClrFeature>
          break;
 8010344:	e004      	b.n	8010350 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010346:	6839      	ldr	r1, [r7, #0]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fd88 	bl	8010e5e <USBD_CtlError>
          break;
 801034e:	bf00      	nop
      }
      break;
 8010350:	e004      	b.n	801035c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010352:	6839      	ldr	r1, [r7, #0]
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f000 fd82 	bl	8010e5e <USBD_CtlError>
      break;
 801035a:	bf00      	nop
  }

  return ret;
 801035c:	7bfb      	ldrb	r3, [r7, #15]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop

08010368 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010372:	2300      	movs	r3, #0
 8010374:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801037e:	2b40      	cmp	r3, #64	@ 0x40
 8010380:	d005      	beq.n	801038e <USBD_StdItfReq+0x26>
 8010382:	2b40      	cmp	r3, #64	@ 0x40
 8010384:	d852      	bhi.n	801042c <USBD_StdItfReq+0xc4>
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <USBD_StdItfReq+0x26>
 801038a:	2b20      	cmp	r3, #32
 801038c:	d14e      	bne.n	801042c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010394:	b2db      	uxtb	r3, r3
 8010396:	3b01      	subs	r3, #1
 8010398:	2b02      	cmp	r3, #2
 801039a:	d840      	bhi.n	801041e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	889b      	ldrh	r3, [r3, #4]
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d836      	bhi.n	8010414 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	889b      	ldrh	r3, [r3, #4]
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	4619      	mov	r1, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7ff fedb 	bl	801016a <USBD_CoreFindIF>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80103b8:	7bbb      	ldrb	r3, [r7, #14]
 80103ba:	2bff      	cmp	r3, #255	@ 0xff
 80103bc:	d01d      	beq.n	80103fa <USBD_StdItfReq+0x92>
 80103be:	7bbb      	ldrb	r3, [r7, #14]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d11a      	bne.n	80103fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80103c4:	7bba      	ldrb	r2, [r7, #14]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	32ae      	adds	r2, #174	@ 0xae
 80103ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00f      	beq.n	80103f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80103d4:	7bba      	ldrb	r2, [r7, #14]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80103dc:	7bba      	ldrb	r2, [r7, #14]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	32ae      	adds	r2, #174	@ 0xae
 80103e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103e6:	689b      	ldr	r3, [r3, #8]
 80103e8:	6839      	ldr	r1, [r7, #0]
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	4798      	blx	r3
 80103ee:	4603      	mov	r3, r0
 80103f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80103f2:	e004      	b.n	80103fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80103f4:	2303      	movs	r3, #3
 80103f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80103f8:	e001      	b.n	80103fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80103fa:	2303      	movs	r3, #3
 80103fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	88db      	ldrh	r3, [r3, #6]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d110      	bne.n	8010428 <USBD_StdItfReq+0xc0>
 8010406:	7bfb      	ldrb	r3, [r7, #15]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10d      	bne.n	8010428 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 fdf1 	bl	8010ff4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010412:	e009      	b.n	8010428 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010414:	6839      	ldr	r1, [r7, #0]
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fd21 	bl	8010e5e <USBD_CtlError>
          break;
 801041c:	e004      	b.n	8010428 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801041e:	6839      	ldr	r1, [r7, #0]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fd1c 	bl	8010e5e <USBD_CtlError>
          break;
 8010426:	e000      	b.n	801042a <USBD_StdItfReq+0xc2>
          break;
 8010428:	bf00      	nop
      }
      break;
 801042a:	e004      	b.n	8010436 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801042c:	6839      	ldr	r1, [r7, #0]
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 fd15 	bl	8010e5e <USBD_CtlError>
      break;
 8010434:	bf00      	nop
  }

  return ret;
 8010436:	7bfb      	ldrb	r3, [r7, #15]
}
 8010438:	4618      	mov	r0, r3
 801043a:	3710      	adds	r7, #16
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	889b      	ldrh	r3, [r3, #4]
 8010452:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801045c:	2b40      	cmp	r3, #64	@ 0x40
 801045e:	d007      	beq.n	8010470 <USBD_StdEPReq+0x30>
 8010460:	2b40      	cmp	r3, #64	@ 0x40
 8010462:	f200 817f 	bhi.w	8010764 <USBD_StdEPReq+0x324>
 8010466:	2b00      	cmp	r3, #0
 8010468:	d02a      	beq.n	80104c0 <USBD_StdEPReq+0x80>
 801046a:	2b20      	cmp	r3, #32
 801046c:	f040 817a 	bne.w	8010764 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010470:	7bbb      	ldrb	r3, [r7, #14]
 8010472:	4619      	mov	r1, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7ff fe85 	bl	8010184 <USBD_CoreFindEP>
 801047a:	4603      	mov	r3, r0
 801047c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801047e:	7b7b      	ldrb	r3, [r7, #13]
 8010480:	2bff      	cmp	r3, #255	@ 0xff
 8010482:	f000 8174 	beq.w	801076e <USBD_StdEPReq+0x32e>
 8010486:	7b7b      	ldrb	r3, [r7, #13]
 8010488:	2b00      	cmp	r3, #0
 801048a:	f040 8170 	bne.w	801076e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801048e:	7b7a      	ldrb	r2, [r7, #13]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010496:	7b7a      	ldrb	r2, [r7, #13]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	32ae      	adds	r2, #174	@ 0xae
 801049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 8163 	beq.w	801076e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80104a8:	7b7a      	ldrb	r2, [r7, #13]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	32ae      	adds	r2, #174	@ 0xae
 80104ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	6839      	ldr	r1, [r7, #0]
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	4798      	blx	r3
 80104ba:	4603      	mov	r3, r0
 80104bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80104be:	e156      	b.n	801076e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	785b      	ldrb	r3, [r3, #1]
 80104c4:	2b03      	cmp	r3, #3
 80104c6:	d008      	beq.n	80104da <USBD_StdEPReq+0x9a>
 80104c8:	2b03      	cmp	r3, #3
 80104ca:	f300 8145 	bgt.w	8010758 <USBD_StdEPReq+0x318>
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 809b 	beq.w	801060a <USBD_StdEPReq+0x1ca>
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d03c      	beq.n	8010552 <USBD_StdEPReq+0x112>
 80104d8:	e13e      	b.n	8010758 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	d002      	beq.n	80104ec <USBD_StdEPReq+0xac>
 80104e6:	2b03      	cmp	r3, #3
 80104e8:	d016      	beq.n	8010518 <USBD_StdEPReq+0xd8>
 80104ea:	e02c      	b.n	8010546 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104ec:	7bbb      	ldrb	r3, [r7, #14]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00d      	beq.n	801050e <USBD_StdEPReq+0xce>
 80104f2:	7bbb      	ldrb	r3, [r7, #14]
 80104f4:	2b80      	cmp	r3, #128	@ 0x80
 80104f6:	d00a      	beq.n	801050e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	4619      	mov	r1, r3
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f001 fe2f 	bl	8012160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010502:	2180      	movs	r1, #128	@ 0x80
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f001 fe2b 	bl	8012160 <USBD_LL_StallEP>
 801050a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801050c:	e020      	b.n	8010550 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801050e:	6839      	ldr	r1, [r7, #0]
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 fca4 	bl	8010e5e <USBD_CtlError>
              break;
 8010516:	e01b      	b.n	8010550 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	885b      	ldrh	r3, [r3, #2]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10e      	bne.n	801053e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010520:	7bbb      	ldrb	r3, [r7, #14]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00b      	beq.n	801053e <USBD_StdEPReq+0xfe>
 8010526:	7bbb      	ldrb	r3, [r7, #14]
 8010528:	2b80      	cmp	r3, #128	@ 0x80
 801052a:	d008      	beq.n	801053e <USBD_StdEPReq+0xfe>
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	88db      	ldrh	r3, [r3, #6]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d104      	bne.n	801053e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010534:	7bbb      	ldrb	r3, [r7, #14]
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f001 fe11 	bl	8012160 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 fd58 	bl	8010ff4 <USBD_CtlSendStatus>

              break;
 8010544:	e004      	b.n	8010550 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010546:	6839      	ldr	r1, [r7, #0]
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 fc88 	bl	8010e5e <USBD_CtlError>
              break;
 801054e:	bf00      	nop
          }
          break;
 8010550:	e107      	b.n	8010762 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010558:	b2db      	uxtb	r3, r3
 801055a:	2b02      	cmp	r3, #2
 801055c:	d002      	beq.n	8010564 <USBD_StdEPReq+0x124>
 801055e:	2b03      	cmp	r3, #3
 8010560:	d016      	beq.n	8010590 <USBD_StdEPReq+0x150>
 8010562:	e04b      	b.n	80105fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010564:	7bbb      	ldrb	r3, [r7, #14]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00d      	beq.n	8010586 <USBD_StdEPReq+0x146>
 801056a:	7bbb      	ldrb	r3, [r7, #14]
 801056c:	2b80      	cmp	r3, #128	@ 0x80
 801056e:	d00a      	beq.n	8010586 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010570:	7bbb      	ldrb	r3, [r7, #14]
 8010572:	4619      	mov	r1, r3
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f001 fdf3 	bl	8012160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801057a:	2180      	movs	r1, #128	@ 0x80
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f001 fdef 	bl	8012160 <USBD_LL_StallEP>
 8010582:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010584:	e040      	b.n	8010608 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010586:	6839      	ldr	r1, [r7, #0]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 fc68 	bl	8010e5e <USBD_CtlError>
              break;
 801058e:	e03b      	b.n	8010608 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	885b      	ldrh	r3, [r3, #2]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d136      	bne.n	8010606 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010598:	7bbb      	ldrb	r3, [r7, #14]
 801059a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d004      	beq.n	80105ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80105a2:	7bbb      	ldrb	r3, [r7, #14]
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f001 fdf9 	bl	801219e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 fd21 	bl	8010ff4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80105b2:	7bbb      	ldrb	r3, [r7, #14]
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff fde4 	bl	8010184 <USBD_CoreFindEP>
 80105bc:	4603      	mov	r3, r0
 80105be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80105c0:	7b7b      	ldrb	r3, [r7, #13]
 80105c2:	2bff      	cmp	r3, #255	@ 0xff
 80105c4:	d01f      	beq.n	8010606 <USBD_StdEPReq+0x1c6>
 80105c6:	7b7b      	ldrb	r3, [r7, #13]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d11c      	bne.n	8010606 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80105cc:	7b7a      	ldrb	r2, [r7, #13]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80105d4:	7b7a      	ldrb	r2, [r7, #13]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	32ae      	adds	r2, #174	@ 0xae
 80105da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d010      	beq.n	8010606 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80105e4:	7b7a      	ldrb	r2, [r7, #13]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	32ae      	adds	r2, #174	@ 0xae
 80105ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	6839      	ldr	r1, [r7, #0]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	4798      	blx	r3
 80105f6:	4603      	mov	r3, r0
 80105f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80105fa:	e004      	b.n	8010606 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80105fc:	6839      	ldr	r1, [r7, #0]
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 fc2d 	bl	8010e5e <USBD_CtlError>
              break;
 8010604:	e000      	b.n	8010608 <USBD_StdEPReq+0x1c8>
              break;
 8010606:	bf00      	nop
          }
          break;
 8010608:	e0ab      	b.n	8010762 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010610:	b2db      	uxtb	r3, r3
 8010612:	2b02      	cmp	r3, #2
 8010614:	d002      	beq.n	801061c <USBD_StdEPReq+0x1dc>
 8010616:	2b03      	cmp	r3, #3
 8010618:	d032      	beq.n	8010680 <USBD_StdEPReq+0x240>
 801061a:	e097      	b.n	801074c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801061c:	7bbb      	ldrb	r3, [r7, #14]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d007      	beq.n	8010632 <USBD_StdEPReq+0x1f2>
 8010622:	7bbb      	ldrb	r3, [r7, #14]
 8010624:	2b80      	cmp	r3, #128	@ 0x80
 8010626:	d004      	beq.n	8010632 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010628:	6839      	ldr	r1, [r7, #0]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 fc17 	bl	8010e5e <USBD_CtlError>
                break;
 8010630:	e091      	b.n	8010756 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010636:	2b00      	cmp	r3, #0
 8010638:	da0b      	bge.n	8010652 <USBD_StdEPReq+0x212>
 801063a:	7bbb      	ldrb	r3, [r7, #14]
 801063c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010640:	4613      	mov	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	4413      	add	r3, r2
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	3310      	adds	r3, #16
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	4413      	add	r3, r2
 801064e:	3304      	adds	r3, #4
 8010650:	e00b      	b.n	801066a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010652:	7bbb      	ldrb	r3, [r7, #14]
 8010654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010658:	4613      	mov	r3, r2
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	4413      	add	r3, r2
 8010668:	3304      	adds	r3, #4
 801066a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2200      	movs	r2, #0
 8010670:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2202      	movs	r2, #2
 8010676:	4619      	mov	r1, r3
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 fc61 	bl	8010f40 <USBD_CtlSendData>
              break;
 801067e:	e06a      	b.n	8010756 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010684:	2b00      	cmp	r3, #0
 8010686:	da11      	bge.n	80106ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010688:	7bbb      	ldrb	r3, [r7, #14]
 801068a:	f003 020f 	and.w	r2, r3, #15
 801068e:	6879      	ldr	r1, [r7, #4]
 8010690:	4613      	mov	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	440b      	add	r3, r1
 801069a:	3324      	adds	r3, #36	@ 0x24
 801069c:	881b      	ldrh	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d117      	bne.n	80106d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80106a2:	6839      	ldr	r1, [r7, #0]
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f000 fbda 	bl	8010e5e <USBD_CtlError>
                  break;
 80106aa:	e054      	b.n	8010756 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80106ac:	7bbb      	ldrb	r3, [r7, #14]
 80106ae:	f003 020f 	and.w	r2, r3, #15
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	4613      	mov	r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4413      	add	r3, r2
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	440b      	add	r3, r1
 80106be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80106c2:	881b      	ldrh	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d104      	bne.n	80106d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80106c8:	6839      	ldr	r1, [r7, #0]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 fbc7 	bl	8010e5e <USBD_CtlError>
                  break;
 80106d0:	e041      	b.n	8010756 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	da0b      	bge.n	80106f2 <USBD_StdEPReq+0x2b2>
 80106da:	7bbb      	ldrb	r3, [r7, #14]
 80106dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106e0:	4613      	mov	r3, r2
 80106e2:	009b      	lsls	r3, r3, #2
 80106e4:	4413      	add	r3, r2
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	3310      	adds	r3, #16
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	4413      	add	r3, r2
 80106ee:	3304      	adds	r3, #4
 80106f0:	e00b      	b.n	801070a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80106f2:	7bbb      	ldrb	r3, [r7, #14]
 80106f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106f8:	4613      	mov	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	4413      	add	r3, r2
 80106fe:	009b      	lsls	r3, r3, #2
 8010700:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	4413      	add	r3, r2
 8010708:	3304      	adds	r3, #4
 801070a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801070c:	7bbb      	ldrb	r3, [r7, #14]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d002      	beq.n	8010718 <USBD_StdEPReq+0x2d8>
 8010712:	7bbb      	ldrb	r3, [r7, #14]
 8010714:	2b80      	cmp	r3, #128	@ 0x80
 8010716:	d103      	bne.n	8010720 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	2200      	movs	r2, #0
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	e00e      	b.n	801073e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f001 fd59 	bl	80121dc <USBD_LL_IsStallEP>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d003      	beq.n	8010738 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	2201      	movs	r2, #1
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	e002      	b.n	801073e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2202      	movs	r2, #2
 8010742:	4619      	mov	r1, r3
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fbfb 	bl	8010f40 <USBD_CtlSendData>
              break;
 801074a:	e004      	b.n	8010756 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801074c:	6839      	ldr	r1, [r7, #0]
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fb85 	bl	8010e5e <USBD_CtlError>
              break;
 8010754:	bf00      	nop
          }
          break;
 8010756:	e004      	b.n	8010762 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 fb7f 	bl	8010e5e <USBD_CtlError>
          break;
 8010760:	bf00      	nop
      }
      break;
 8010762:	e005      	b.n	8010770 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fb79 	bl	8010e5e <USBD_CtlError>
      break;
 801076c:	e000      	b.n	8010770 <USBD_StdEPReq+0x330>
      break;
 801076e:	bf00      	nop
  }

  return ret;
 8010770:	7bfb      	ldrb	r3, [r7, #15]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
	...

0801077c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010786:	2300      	movs	r3, #0
 8010788:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801078a:	2300      	movs	r3, #0
 801078c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801078e:	2300      	movs	r3, #0
 8010790:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	885b      	ldrh	r3, [r3, #2]
 8010796:	0a1b      	lsrs	r3, r3, #8
 8010798:	b29b      	uxth	r3, r3
 801079a:	3b01      	subs	r3, #1
 801079c:	2b0e      	cmp	r3, #14
 801079e:	f200 8152 	bhi.w	8010a46 <USBD_GetDescriptor+0x2ca>
 80107a2:	a201      	add	r2, pc, #4	@ (adr r2, 80107a8 <USBD_GetDescriptor+0x2c>)
 80107a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a8:	08010819 	.word	0x08010819
 80107ac:	08010831 	.word	0x08010831
 80107b0:	08010871 	.word	0x08010871
 80107b4:	08010a47 	.word	0x08010a47
 80107b8:	08010a47 	.word	0x08010a47
 80107bc:	080109e7 	.word	0x080109e7
 80107c0:	08010a13 	.word	0x08010a13
 80107c4:	08010a47 	.word	0x08010a47
 80107c8:	08010a47 	.word	0x08010a47
 80107cc:	08010a47 	.word	0x08010a47
 80107d0:	08010a47 	.word	0x08010a47
 80107d4:	08010a47 	.word	0x08010a47
 80107d8:	08010a47 	.word	0x08010a47
 80107dc:	08010a47 	.word	0x08010a47
 80107e0:	080107e5 	.word	0x080107e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107ea:	69db      	ldr	r3, [r3, #28]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d00b      	beq.n	8010808 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107f6:	69db      	ldr	r3, [r3, #28]
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	7c12      	ldrb	r2, [r2, #16]
 80107fc:	f107 0108 	add.w	r1, r7, #8
 8010800:	4610      	mov	r0, r2
 8010802:	4798      	blx	r3
 8010804:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010806:	e126      	b.n	8010a56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 fb27 	bl	8010e5e <USBD_CtlError>
        err++;
 8010810:	7afb      	ldrb	r3, [r7, #11]
 8010812:	3301      	adds	r3, #1
 8010814:	72fb      	strb	r3, [r7, #11]
      break;
 8010816:	e11e      	b.n	8010a56 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	7c12      	ldrb	r2, [r2, #16]
 8010824:	f107 0108 	add.w	r1, r7, #8
 8010828:	4610      	mov	r0, r2
 801082a:	4798      	blx	r3
 801082c:	60f8      	str	r0, [r7, #12]
      break;
 801082e:	e112      	b.n	8010a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	7c1b      	ldrb	r3, [r3, #16]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d10d      	bne.n	8010854 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801083e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010840:	f107 0208 	add.w	r2, r7, #8
 8010844:	4610      	mov	r0, r2
 8010846:	4798      	blx	r3
 8010848:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	3301      	adds	r3, #1
 801084e:	2202      	movs	r2, #2
 8010850:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010852:	e100      	b.n	8010a56 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801085a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801085c:	f107 0208 	add.w	r2, r7, #8
 8010860:	4610      	mov	r0, r2
 8010862:	4798      	blx	r3
 8010864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3301      	adds	r3, #1
 801086a:	2202      	movs	r2, #2
 801086c:	701a      	strb	r2, [r3, #0]
      break;
 801086e:	e0f2      	b.n	8010a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	885b      	ldrh	r3, [r3, #2]
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b05      	cmp	r3, #5
 8010878:	f200 80ac 	bhi.w	80109d4 <USBD_GetDescriptor+0x258>
 801087c:	a201      	add	r2, pc, #4	@ (adr r2, 8010884 <USBD_GetDescriptor+0x108>)
 801087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010882:	bf00      	nop
 8010884:	0801089d 	.word	0x0801089d
 8010888:	080108d1 	.word	0x080108d1
 801088c:	08010905 	.word	0x08010905
 8010890:	08010939 	.word	0x08010939
 8010894:	0801096d 	.word	0x0801096d
 8010898:	080109a1 	.word	0x080109a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00b      	beq.n	80108c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	7c12      	ldrb	r2, [r2, #16]
 80108b4:	f107 0108 	add.w	r1, r7, #8
 80108b8:	4610      	mov	r0, r2
 80108ba:	4798      	blx	r3
 80108bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108be:	e091      	b.n	80109e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108c0:	6839      	ldr	r1, [r7, #0]
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f000 facb 	bl	8010e5e <USBD_CtlError>
            err++;
 80108c8:	7afb      	ldrb	r3, [r7, #11]
 80108ca:	3301      	adds	r3, #1
 80108cc:	72fb      	strb	r3, [r7, #11]
          break;
 80108ce:	e089      	b.n	80109e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00b      	beq.n	80108f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	7c12      	ldrb	r2, [r2, #16]
 80108e8:	f107 0108 	add.w	r1, r7, #8
 80108ec:	4610      	mov	r0, r2
 80108ee:	4798      	blx	r3
 80108f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108f2:	e077      	b.n	80109e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108f4:	6839      	ldr	r1, [r7, #0]
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fab1 	bl	8010e5e <USBD_CtlError>
            err++;
 80108fc:	7afb      	ldrb	r3, [r7, #11]
 80108fe:	3301      	adds	r3, #1
 8010900:	72fb      	strb	r3, [r7, #11]
          break;
 8010902:	e06f      	b.n	80109e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801090a:	68db      	ldr	r3, [r3, #12]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00b      	beq.n	8010928 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	7c12      	ldrb	r2, [r2, #16]
 801091c:	f107 0108 	add.w	r1, r7, #8
 8010920:	4610      	mov	r0, r2
 8010922:	4798      	blx	r3
 8010924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010926:	e05d      	b.n	80109e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010928:	6839      	ldr	r1, [r7, #0]
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 fa97 	bl	8010e5e <USBD_CtlError>
            err++;
 8010930:	7afb      	ldrb	r3, [r7, #11]
 8010932:	3301      	adds	r3, #1
 8010934:	72fb      	strb	r3, [r7, #11]
          break;
 8010936:	e055      	b.n	80109e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801093e:	691b      	ldr	r3, [r3, #16]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00b      	beq.n	801095c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801094a:	691b      	ldr	r3, [r3, #16]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	7c12      	ldrb	r2, [r2, #16]
 8010950:	f107 0108 	add.w	r1, r7, #8
 8010954:	4610      	mov	r0, r2
 8010956:	4798      	blx	r3
 8010958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801095a:	e043      	b.n	80109e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801095c:	6839      	ldr	r1, [r7, #0]
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f000 fa7d 	bl	8010e5e <USBD_CtlError>
            err++;
 8010964:	7afb      	ldrb	r3, [r7, #11]
 8010966:	3301      	adds	r3, #1
 8010968:	72fb      	strb	r3, [r7, #11]
          break;
 801096a:	e03b      	b.n	80109e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010972:	695b      	ldr	r3, [r3, #20]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00b      	beq.n	8010990 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801097e:	695b      	ldr	r3, [r3, #20]
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	7c12      	ldrb	r2, [r2, #16]
 8010984:	f107 0108 	add.w	r1, r7, #8
 8010988:	4610      	mov	r0, r2
 801098a:	4798      	blx	r3
 801098c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801098e:	e029      	b.n	80109e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010990:	6839      	ldr	r1, [r7, #0]
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fa63 	bl	8010e5e <USBD_CtlError>
            err++;
 8010998:	7afb      	ldrb	r3, [r7, #11]
 801099a:	3301      	adds	r3, #1
 801099c:	72fb      	strb	r3, [r7, #11]
          break;
 801099e:	e021      	b.n	80109e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109a6:	699b      	ldr	r3, [r3, #24]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00b      	beq.n	80109c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109b2:	699b      	ldr	r3, [r3, #24]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	7c12      	ldrb	r2, [r2, #16]
 80109b8:	f107 0108 	add.w	r1, r7, #8
 80109bc:	4610      	mov	r0, r2
 80109be:	4798      	blx	r3
 80109c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109c2:	e00f      	b.n	80109e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80109c4:	6839      	ldr	r1, [r7, #0]
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 fa49 	bl	8010e5e <USBD_CtlError>
            err++;
 80109cc:	7afb      	ldrb	r3, [r7, #11]
 80109ce:	3301      	adds	r3, #1
 80109d0:	72fb      	strb	r3, [r7, #11]
          break;
 80109d2:	e007      	b.n	80109e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80109d4:	6839      	ldr	r1, [r7, #0]
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 fa41 	bl	8010e5e <USBD_CtlError>
          err++;
 80109dc:	7afb      	ldrb	r3, [r7, #11]
 80109de:	3301      	adds	r3, #1
 80109e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80109e2:	bf00      	nop
      }
      break;
 80109e4:	e037      	b.n	8010a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	7c1b      	ldrb	r3, [r3, #16]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d109      	bne.n	8010a02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109f6:	f107 0208 	add.w	r2, r7, #8
 80109fa:	4610      	mov	r0, r2
 80109fc:	4798      	blx	r3
 80109fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a00:	e029      	b.n	8010a56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010a02:	6839      	ldr	r1, [r7, #0]
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 fa2a 	bl	8010e5e <USBD_CtlError>
        err++;
 8010a0a:	7afb      	ldrb	r3, [r7, #11]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8010a10:	e021      	b.n	8010a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	7c1b      	ldrb	r3, [r3, #16]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d10d      	bne.n	8010a36 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a22:	f107 0208 	add.w	r2, r7, #8
 8010a26:	4610      	mov	r0, r2
 8010a28:	4798      	blx	r3
 8010a2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	3301      	adds	r3, #1
 8010a30:	2207      	movs	r2, #7
 8010a32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a34:	e00f      	b.n	8010a56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f000 fa10 	bl	8010e5e <USBD_CtlError>
        err++;
 8010a3e:	7afb      	ldrb	r3, [r7, #11]
 8010a40:	3301      	adds	r3, #1
 8010a42:	72fb      	strb	r3, [r7, #11]
      break;
 8010a44:	e007      	b.n	8010a56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fa08 	bl	8010e5e <USBD_CtlError>
      err++;
 8010a4e:	7afb      	ldrb	r3, [r7, #11]
 8010a50:	3301      	adds	r3, #1
 8010a52:	72fb      	strb	r3, [r7, #11]
      break;
 8010a54:	bf00      	nop
  }

  if (err != 0U)
 8010a56:	7afb      	ldrb	r3, [r7, #11]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d11e      	bne.n	8010a9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	88db      	ldrh	r3, [r3, #6]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d016      	beq.n	8010a92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010a64:	893b      	ldrh	r3, [r7, #8]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d00e      	beq.n	8010a88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	88da      	ldrh	r2, [r3, #6]
 8010a6e:	893b      	ldrh	r3, [r7, #8]
 8010a70:	4293      	cmp	r3, r2
 8010a72:	bf28      	it	cs
 8010a74:	4613      	movcs	r3, r2
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010a7a:	893b      	ldrh	r3, [r7, #8]
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	68f9      	ldr	r1, [r7, #12]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fa5d 	bl	8010f40 <USBD_CtlSendData>
 8010a86:	e009      	b.n	8010a9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010a88:	6839      	ldr	r1, [r7, #0]
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 f9e7 	bl	8010e5e <USBD_CtlError>
 8010a90:	e004      	b.n	8010a9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 faae 	bl	8010ff4 <USBD_CtlSendStatus>
 8010a98:	e000      	b.n	8010a9c <USBD_GetDescriptor+0x320>
    return;
 8010a9a:	bf00      	nop
  }
}
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop

08010aa4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	889b      	ldrh	r3, [r3, #4]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d131      	bne.n	8010b1a <USBD_SetAddress+0x76>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	88db      	ldrh	r3, [r3, #6]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d12d      	bne.n	8010b1a <USBD_SetAddress+0x76>
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	885b      	ldrh	r3, [r3, #2]
 8010ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ac4:	d829      	bhi.n	8010b1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	885b      	ldrh	r3, [r3, #2]
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ad0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ad8:	b2db      	uxtb	r3, r3
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d104      	bne.n	8010ae8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010ade:	6839      	ldr	r1, [r7, #0]
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 f9bc 	bl	8010e5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ae6:	e01d      	b.n	8010b24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	7bfa      	ldrb	r2, [r7, #15]
 8010aec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010af0:	7bfb      	ldrb	r3, [r7, #15]
 8010af2:	4619      	mov	r1, r3
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f001 fb9d 	bl	8012234 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 fa7a 	bl	8010ff4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010b00:	7bfb      	ldrb	r3, [r7, #15]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d004      	beq.n	8010b10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2202      	movs	r2, #2
 8010b0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b0e:	e009      	b.n	8010b24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2201      	movs	r2, #1
 8010b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b18:	e004      	b.n	8010b24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010b1a:	6839      	ldr	r1, [r7, #0]
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f000 f99e 	bl	8010e5e <USBD_CtlError>
  }
}
 8010b22:	bf00      	nop
 8010b24:	bf00      	nop
 8010b26:	3710      	adds	r7, #16
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b36:	2300      	movs	r3, #0
 8010b38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	885b      	ldrh	r3, [r3, #2]
 8010b3e:	b2da      	uxtb	r2, r3
 8010b40:	4b4e      	ldr	r3, [pc, #312]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010b42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010b44:	4b4d      	ldr	r3, [pc, #308]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d905      	bls.n	8010b58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 f985 	bl	8010e5e <USBD_CtlError>
    return USBD_FAIL;
 8010b54:	2303      	movs	r3, #3
 8010b56:	e08c      	b.n	8010c72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	2b02      	cmp	r3, #2
 8010b62:	d002      	beq.n	8010b6a <USBD_SetConfig+0x3e>
 8010b64:	2b03      	cmp	r3, #3
 8010b66:	d029      	beq.n	8010bbc <USBD_SetConfig+0x90>
 8010b68:	e075      	b.n	8010c56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010b6a:	4b44      	ldr	r3, [pc, #272]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d020      	beq.n	8010bb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010b72:	4b42      	ldr	r3, [pc, #264]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	461a      	mov	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	4619      	mov	r1, r3
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7fe ffb9 	bl	800fafa <USBD_SetClassConfig>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010b8c:	7bfb      	ldrb	r3, [r7, #15]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d008      	beq.n	8010ba4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 f962 	bl	8010e5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2202      	movs	r2, #2
 8010b9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ba2:	e065      	b.n	8010c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 fa25 	bl	8010ff4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2203      	movs	r2, #3
 8010bae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010bb2:	e05d      	b.n	8010c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 fa1d 	bl	8010ff4 <USBD_CtlSendStatus>
      break;
 8010bba:	e059      	b.n	8010c70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d112      	bne.n	8010bea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2202      	movs	r2, #2
 8010bc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010bd6:	4b29      	ldr	r3, [pc, #164]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	4619      	mov	r1, r3
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f7fe ffa8 	bl	800fb32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 fa06 	bl	8010ff4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010be8:	e042      	b.n	8010c70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010bea:	4b24      	ldr	r3, [pc, #144]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d02a      	beq.n	8010c4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	4619      	mov	r1, r3
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7fe ff96 	bl	800fb32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010c06:	4b1d      	ldr	r3, [pc, #116]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010c10:	4b1a      	ldr	r3, [pc, #104]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	4619      	mov	r1, r3
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f7fe ff6f 	bl	800fafa <USBD_SetClassConfig>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d00f      	beq.n	8010c46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010c26:	6839      	ldr	r1, [r7, #0]
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 f918 	bl	8010e5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	4619      	mov	r1, r3
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7fe ff7b 	bl	800fb32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2202      	movs	r2, #2
 8010c40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010c44:	e014      	b.n	8010c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f9d4 	bl	8010ff4 <USBD_CtlSendStatus>
      break;
 8010c4c:	e010      	b.n	8010c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 f9d0 	bl	8010ff4 <USBD_CtlSendStatus>
      break;
 8010c54:	e00c      	b.n	8010c70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010c56:	6839      	ldr	r1, [r7, #0]
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f000 f900 	bl	8010e5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010c5e:	4b07      	ldr	r3, [pc, #28]	@ (8010c7c <USBD_SetConfig+0x150>)
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	4619      	mov	r1, r3
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7fe ff64 	bl	800fb32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010c6a:	2303      	movs	r3, #3
 8010c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8010c6e:	bf00      	nop
  }

  return ret;
 8010c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	24000730 	.word	0x24000730

08010c80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	88db      	ldrh	r3, [r3, #6]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d004      	beq.n	8010c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010c92:	6839      	ldr	r1, [r7, #0]
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 f8e2 	bl	8010e5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010c9a:	e023      	b.n	8010ce4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	2b02      	cmp	r3, #2
 8010ca6:	dc02      	bgt.n	8010cae <USBD_GetConfig+0x2e>
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dc03      	bgt.n	8010cb4 <USBD_GetConfig+0x34>
 8010cac:	e015      	b.n	8010cda <USBD_GetConfig+0x5a>
 8010cae:	2b03      	cmp	r3, #3
 8010cb0:	d00b      	beq.n	8010cca <USBD_GetConfig+0x4a>
 8010cb2:	e012      	b.n	8010cda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	3308      	adds	r3, #8
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 f93c 	bl	8010f40 <USBD_CtlSendData>
        break;
 8010cc8:	e00c      	b.n	8010ce4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	3304      	adds	r3, #4
 8010cce:	2201      	movs	r2, #1
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f934 	bl	8010f40 <USBD_CtlSendData>
        break;
 8010cd8:	e004      	b.n	8010ce4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 f8be 	bl	8010e5e <USBD_CtlError>
        break;
 8010ce2:	bf00      	nop
}
 8010ce4:	bf00      	nop
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	3b01      	subs	r3, #1
 8010d00:	2b02      	cmp	r3, #2
 8010d02:	d81e      	bhi.n	8010d42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	88db      	ldrh	r3, [r3, #6]
 8010d08:	2b02      	cmp	r3, #2
 8010d0a:	d004      	beq.n	8010d16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010d0c:	6839      	ldr	r1, [r7, #0]
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f000 f8a5 	bl	8010e5e <USBD_CtlError>
        break;
 8010d14:	e01a      	b.n	8010d4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2201      	movs	r2, #1
 8010d1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d005      	beq.n	8010d32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	f043 0202 	orr.w	r2, r3, #2
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	330c      	adds	r3, #12
 8010d36:	2202      	movs	r2, #2
 8010d38:	4619      	mov	r1, r3
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f000 f900 	bl	8010f40 <USBD_CtlSendData>
      break;
 8010d40:	e004      	b.n	8010d4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010d42:	6839      	ldr	r1, [r7, #0]
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f88a 	bl	8010e5e <USBD_CtlError>
      break;
 8010d4a:	bf00      	nop
  }
}
 8010d4c:	bf00      	nop
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	885b      	ldrh	r3, [r3, #2]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d107      	bne.n	8010d76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f940 	bl	8010ff4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010d74:	e013      	b.n	8010d9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	885b      	ldrh	r3, [r3, #2]
 8010d7a:	2b02      	cmp	r3, #2
 8010d7c:	d10b      	bne.n	8010d96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	889b      	ldrh	r3, [r3, #4]
 8010d82:	0a1b      	lsrs	r3, r3, #8
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	b2da      	uxtb	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f930 	bl	8010ff4 <USBD_CtlSendStatus>
}
 8010d94:	e003      	b.n	8010d9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010d96:	6839      	ldr	r1, [r7, #0]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 f860 	bl	8010e5e <USBD_CtlError>
}
 8010d9e:	bf00      	nop
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b082      	sub	sp, #8
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	3b01      	subs	r3, #1
 8010dba:	2b02      	cmp	r3, #2
 8010dbc:	d80b      	bhi.n	8010dd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	885b      	ldrh	r3, [r3, #2]
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	d10c      	bne.n	8010de0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 f910 	bl	8010ff4 <USBD_CtlSendStatus>
      }
      break;
 8010dd4:	e004      	b.n	8010de0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010dd6:	6839      	ldr	r1, [r7, #0]
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f840 	bl	8010e5e <USBD_CtlError>
      break;
 8010dde:	e000      	b.n	8010de2 <USBD_ClrFeature+0x3c>
      break;
 8010de0:	bf00      	nop
  }
}
 8010de2:	bf00      	nop
 8010de4:	3708      	adds	r7, #8
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b084      	sub	sp, #16
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
 8010df2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	781a      	ldrb	r2, [r3, #0]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	3301      	adds	r3, #1
 8010e04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	781a      	ldrb	r2, [r3, #0]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	3301      	adds	r3, #1
 8010e12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f7ff fa16 	bl	8010246 <SWAPBYTE>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	3301      	adds	r3, #1
 8010e26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	f7ff fa09 	bl	8010246 <SWAPBYTE>
 8010e34:	4603      	mov	r3, r0
 8010e36:	461a      	mov	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	3301      	adds	r3, #1
 8010e40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	3301      	adds	r3, #1
 8010e46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f7ff f9fc 	bl	8010246 <SWAPBYTE>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	461a      	mov	r2, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	80da      	strh	r2, [r3, #6]
}
 8010e56:	bf00      	nop
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b082      	sub	sp, #8
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
 8010e66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e68:	2180      	movs	r1, #128	@ 0x80
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f001 f978 	bl	8012160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010e70:	2100      	movs	r1, #0
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f001 f974 	bl	8012160 <USBD_LL_StallEP>
}
 8010e78:	bf00      	nop
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d036      	beq.n	8010f04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010e9a:	6938      	ldr	r0, [r7, #16]
 8010e9c:	f000 f836 	bl	8010f0c <USBD_GetLen>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	005b      	lsls	r3, r3, #1
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010eae:	7dfb      	ldrb	r3, [r7, #23]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	7812      	ldrb	r2, [r2, #0]
 8010eb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8010eba:	7dfb      	ldrb	r3, [r7, #23]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010ec0:	7dfb      	ldrb	r3, [r7, #23]
 8010ec2:	68ba      	ldr	r2, [r7, #8]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	2203      	movs	r2, #3
 8010ec8:	701a      	strb	r2, [r3, #0]
  idx++;
 8010eca:	7dfb      	ldrb	r3, [r7, #23]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010ed0:	e013      	b.n	8010efa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
 8010ed4:	68ba      	ldr	r2, [r7, #8]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	693a      	ldr	r2, [r7, #16]
 8010eda:	7812      	ldrb	r2, [r2, #0]
 8010edc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	613b      	str	r3, [r7, #16]
    idx++;
 8010ee4:	7dfb      	ldrb	r3, [r7, #23]
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010eea:	7dfb      	ldrb	r3, [r7, #23]
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	4413      	add	r3, r2
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	701a      	strb	r2, [r3, #0]
    idx++;
 8010ef4:	7dfb      	ldrb	r3, [r7, #23]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e7      	bne.n	8010ed2 <USBD_GetString+0x52>
 8010f02:	e000      	b.n	8010f06 <USBD_GetString+0x86>
    return;
 8010f04:	bf00      	nop
  }
}
 8010f06:	3718      	adds	r7, #24
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010f14:	2300      	movs	r3, #0
 8010f16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010f1c:	e005      	b.n	8010f2a <USBD_GetLen+0x1e>
  {
    len++;
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
 8010f20:	3301      	adds	r3, #1
 8010f22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	3301      	adds	r3, #1
 8010f28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d1f5      	bne.n	8010f1e <USBD_GetLen+0x12>
  }

  return len;
 8010f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3714      	adds	r7, #20
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2202      	movs	r2, #2
 8010f50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	68ba      	ldr	r2, [r7, #8]
 8010f64:	2100      	movs	r1, #0
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f001 f983 	bl	8012272 <USBD_LL_Transmit>

  return USBD_OK;
 8010f6c:	2300      	movs	r3, #0
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b084      	sub	sp, #16
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	60f8      	str	r0, [r7, #12]
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68ba      	ldr	r2, [r7, #8]
 8010f86:	2100      	movs	r1, #0
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f001 f972 	bl	8012272 <USBD_LL_Transmit>

  return USBD_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3710      	adds	r7, #16
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2203      	movs	r2, #3
 8010fa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	68f8      	ldr	r0, [r7, #12]
 8010fc4:	f001 f976 	bl	80122b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b084      	sub	sp, #16
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	60f8      	str	r0, [r7, #12]
 8010fda:	60b9      	str	r1, [r7, #8]
 8010fdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	68ba      	ldr	r2, [r7, #8]
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	f001 f965 	bl	80122b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3710      	adds	r7, #16
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2204      	movs	r2, #4
 8011000:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011004:	2300      	movs	r3, #0
 8011006:	2200      	movs	r2, #0
 8011008:	2100      	movs	r1, #0
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f001 f931 	bl	8012272 <USBD_LL_Transmit>

  return USBD_OK;
 8011010:	2300      	movs	r3, #0
}
 8011012:	4618      	mov	r0, r3
 8011014:	3708      	adds	r7, #8
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801101a:	b580      	push	{r7, lr}
 801101c:	b082      	sub	sp, #8
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2205      	movs	r2, #5
 8011026:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801102a:	2300      	movs	r3, #0
 801102c:	2200      	movs	r2, #0
 801102e:	2100      	movs	r1, #0
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f001 f93f 	bl	80122b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011036:	2300      	movs	r3, #0
}
 8011038:	4618      	mov	r0, r3
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c: I2C句柄
 * @param  error: 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b088      	sub	sp, #32
 8011044:	af04      	add	r7, sp, #16
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	460b      	mov	r3, r1
 801104a:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 801104c:	2300      	movs	r3, #0
 801104e:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 8011050:	2300      	movs	r3, #0
 8011052:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 8011054:	2364      	movs	r3, #100	@ 0x64
 8011056:	9302      	str	r3, [sp, #8]
 8011058:	2302      	movs	r3, #2
 801105a:	9301      	str	r3, [sp, #4]
 801105c:	f107 030c 	add.w	r3, r7, #12
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	2301      	movs	r3, #1
 8011064:	2200      	movs	r2, #0
 8011066:	2181      	movs	r1, #129	@ 0x81
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7f5 f987 	bl	800637c <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 801106e:	23f4      	movs	r3, #244	@ 0xf4
 8011070:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 8011072:	2393      	movs	r3, #147	@ 0x93
 8011074:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 8011076:	2364      	movs	r3, #100	@ 0x64
 8011078:	9302      	str	r3, [sp, #8]
 801107a:	2302      	movs	r3, #2
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	f107 030c 	add.w	r3, r7, #12
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	2301      	movs	r3, #1
 8011086:	2201      	movs	r2, #1
 8011088:	2181      	movs	r1, #129	@ 0x81
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f7f5 f976 	bl	800637c <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 8011090:	230f      	movs	r3, #15
 8011092:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 8011094:	78fb      	ldrb	r3, [r7, #3]
 8011096:	3b60      	subs	r3, #96	@ 0x60
 8011098:	b2db      	uxtb	r3, r3
 801109a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 801109c:	2364      	movs	r3, #100	@ 0x64
 801109e:	9302      	str	r3, [sp, #8]
 80110a0:	2302      	movs	r3, #2
 80110a2:	9301      	str	r3, [sp, #4]
 80110a4:	f107 030c 	add.w	r3, r7, #12
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	2301      	movs	r3, #1
 80110ac:	2202      	movs	r2, #2
 80110ae:	2181      	movs	r1, #129	@ 0x81
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7f5 f963 	bl	800637c <HAL_I2C_Mem_Write>
}
 80110b6:	bf00      	nop
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
	...

080110c0 <OLED_WR_Byte>:
//[7]0 1 2 3 ... 127
// 向SSD1306写入一个字节
// dat:要写入的数据/命令
// cmd:数据/命令标志 0，表示命令；1，表示数据
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	4603      	mov	r3, r0
 80110c8:	460a      	mov	r2, r1
 80110ca:	71fb      	strb	r3, [r7, #7]
 80110cc:	4613      	mov	r3, r2
 80110ce:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 80110d0:	79bb      	ldrb	r3, [r7, #6]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d005      	beq.n	80110e2 <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); // 命令/数据标志位置为1，则表示传送的是命令字节
 80110d6:	2201      	movs	r2, #1
 80110d8:	2140      	movs	r1, #64	@ 0x40
 80110da:	4811      	ldr	r0, [pc, #68]	@ (8011120 <OLED_WR_Byte+0x60>)
 80110dc:	f7f5 f88a 	bl	80061f4 <HAL_GPIO_WritePin>
 80110e0:	e004      	b.n	80110ec <OLED_WR_Byte+0x2c>
	}
	else
		OLED_DC_Clr();						 // 命令/数据标志位置为0，则表示传送的是数据字节
 80110e2:	2200      	movs	r2, #0
 80110e4:	2140      	movs	r1, #64	@ 0x40
 80110e6:	480e      	ldr	r0, [pc, #56]	@ (8011120 <OLED_WR_Byte+0x60>)
 80110e8:	f7f5 f884 	bl	80061f4 <HAL_GPIO_WritePin>
	OLED_CS_Clr();							 // 片选信号为低，表示选中OLED
 80110ec:	2200      	movs	r2, #0
 80110ee:	2102      	movs	r1, #2
 80110f0:	480c      	ldr	r0, [pc, #48]	@ (8011124 <OLED_WR_Byte+0x64>)
 80110f2:	f7f5 f87f 	bl	80061f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); // oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 80110f6:	1df9      	adds	r1, r7, #7
 80110f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80110fc:	2201      	movs	r2, #1
 80110fe:	480a      	ldr	r0, [pc, #40]	@ (8011128 <OLED_WR_Byte+0x68>)
 8011100:	f7fa fe82 	bl	800be08 <HAL_SPI_Transmit>
	OLED_CS_Set();
 8011104:	2201      	movs	r2, #1
 8011106:	2102      	movs	r1, #2
 8011108:	4806      	ldr	r0, [pc, #24]	@ (8011124 <OLED_WR_Byte+0x64>)
 801110a:	f7f5 f873 	bl	80061f4 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 801110e:	2201      	movs	r2, #1
 8011110:	2140      	movs	r1, #64	@ 0x40
 8011112:	4803      	ldr	r0, [pc, #12]	@ (8011120 <OLED_WR_Byte+0x60>)
 8011114:	f7f5 f86e 	bl	80061f4 <HAL_GPIO_WritePin>
}
 8011118:	bf00      	nop
 801111a:	3708      	adds	r7, #8
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	58022000 	.word	0x58022000
 8011124:	58020400 	.word	0x58020400
 8011128:	24000534 	.word	0x24000534

0801112c <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	4603      	mov	r3, r0
 8011134:	460a      	mov	r2, r1
 8011136:	71fb      	strb	r3, [r7, #7]
 8011138:	4613      	mov	r3, r2
 801113a:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 801113c:	79bb      	ldrb	r3, [r7, #6]
 801113e:	3b50      	subs	r3, #80	@ 0x50
 8011140:	b2db      	uxtb	r3, r3
 8011142:	2100      	movs	r1, #0
 8011144:	4618      	mov	r0, r3
 8011146:	f7ff ffbb 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 801114a:	79fb      	ldrb	r3, [r7, #7]
 801114c:	3302      	adds	r3, #2
 801114e:	111b      	asrs	r3, r3, #4
 8011150:	b25b      	sxtb	r3, r3
 8011152:	f003 030f 	and.w	r3, r3, #15
 8011156:	b25b      	sxtb	r3, r3
 8011158:	f043 0310 	orr.w	r3, r3, #16
 801115c:	b25b      	sxtb	r3, r3
 801115e:	b2db      	uxtb	r3, r3
 8011160:	2100      	movs	r1, #0
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff ffac 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 8011168:	79fb      	ldrb	r3, [r7, #7]
 801116a:	3302      	adds	r3, #2
 801116c:	b2db      	uxtb	r3, r3
 801116e:	f003 030f 	and.w	r3, r3, #15
 8011172:	b2db      	uxtb	r3, r3
 8011174:	2100      	movs	r1, #0
 8011176:	4618      	mov	r0, r3
 8011178:	f7ff ffa2 	bl	80110c0 <OLED_WR_Byte>
}
 801117c:	bf00      	nop
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <OLED_Clear>:
	OLED_WR_Byte(0X10, OLED_CMD); // 关闭电荷泵
	OLED_WR_Byte(0XAE, OLED_CMD); // DISPLAY OFF
}
// 清屏函数，清完后整个屏幕都是黑色的，没有一点光亮
void OLED_Clear(void)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 801118a:	2300      	movs	r3, #0
 801118c:	71fb      	strb	r3, [r7, #7]
 801118e:	e01f      	b.n	80111d0 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址
 8011190:	79fb      	ldrb	r3, [r7, #7]
 8011192:	3b50      	subs	r3, #80	@ 0x50
 8011194:	b2db      	uxtb	r3, r3
 8011196:	2100      	movs	r1, #0
 8011198:	4618      	mov	r0, r3
 801119a:	f7ff ff91 	bl	80110c0 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);	  // 设置起始列低地址
 801119e:	2100      	movs	r1, #0
 80111a0:	2002      	movs	r0, #2
 80111a2:	f7ff ff8d 	bl	80110c0 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置起始列高地址
 80111a6:	2100      	movs	r1, #0
 80111a8:	2010      	movs	r0, #16
 80111aa:	f7ff ff89 	bl	80110c0 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80111ae:	2300      	movs	r3, #0
 80111b0:	71bb      	strb	r3, [r7, #6]
 80111b2:	e006      	b.n	80111c2 <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 80111b4:	2101      	movs	r1, #1
 80111b6:	2000      	movs	r0, #0
 80111b8:	f7ff ff82 	bl	80110c0 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80111bc:	79bb      	ldrb	r3, [r7, #6]
 80111be:	3301      	adds	r3, #1
 80111c0:	71bb      	strb	r3, [r7, #6]
 80111c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	daf4      	bge.n	80111b4 <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 80111ca:	79fb      	ldrb	r3, [r7, #7]
 80111cc:	3301      	adds	r3, #1
 80111ce:	71fb      	strb	r3, [r7, #7]
 80111d0:	79fb      	ldrb	r3, [r7, #7]
 80111d2:	2b07      	cmp	r3, #7
 80111d4:	d9dc      	bls.n	8011190 <OLED_Clear+0xc>
	} // 更新显示
}
 80111d6:	bf00      	nop
 80111d8:	bf00      	nop
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <OLED_ShowChar>:
// x:0~127
// y:0~6
// mode:0,反白显示；1，正常显示
// size:选择字体大小 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	4603      	mov	r3, r0
 80111e8:	71fb      	strb	r3, [r7, #7]
 80111ea:	460b      	mov	r3, r1
 80111ec:	71bb      	strb	r3, [r7, #6]
 80111ee:	4613      	mov	r3, r2
 80111f0:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 80111f2:	2300      	movs	r3, #0
 80111f4:	73bb      	strb	r3, [r7, #14]
 80111f6:	2300      	movs	r3, #0
 80111f8:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; // 得到偏移后的值
 80111fa:	797b      	ldrb	r3, [r7, #5]
 80111fc:	3b20      	subs	r3, #32
 80111fe:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 8011200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011204:	2b00      	cmp	r3, #0
 8011206:	da04      	bge.n	8011212 <OLED_ShowChar+0x32>
	{
		x = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 801120c:	79bb      	ldrb	r3, [r7, #6]
 801120e:	3302      	adds	r3, #2
 8011210:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 8011212:	79ba      	ldrb	r2, [r7, #6]
 8011214:	79fb      	ldrb	r3, [r7, #7]
 8011216:	4611      	mov	r1, r2
 8011218:	4618      	mov	r0, r3
 801121a:	f7ff ff87 	bl	801112c <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 801121e:	2300      	movs	r3, #0
 8011220:	73fb      	strb	r3, [r7, #15]
 8011222:	e00c      	b.n	801123e <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 8011224:	7bbb      	ldrb	r3, [r7, #14]
 8011226:	011a      	lsls	r2, r3, #4
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	4413      	add	r3, r2
 801122c:	4a16      	ldr	r2, [pc, #88]	@ (8011288 <OLED_ShowChar+0xa8>)
 801122e:	5cd3      	ldrb	r3, [r2, r3]
 8011230:	2101      	movs	r1, #1
 8011232:	4618      	mov	r0, r3
 8011234:	f7ff ff44 	bl	80110c0 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 8011238:	7bfb      	ldrb	r3, [r7, #15]
 801123a:	3301      	adds	r3, #1
 801123c:	73fb      	strb	r3, [r7, #15]
 801123e:	7bfb      	ldrb	r3, [r7, #15]
 8011240:	2b07      	cmp	r3, #7
 8011242:	d9ef      	bls.n	8011224 <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 8011244:	79bb      	ldrb	r3, [r7, #6]
 8011246:	3301      	adds	r3, #1
 8011248:	b2da      	uxtb	r2, r3
 801124a:	79fb      	ldrb	r3, [r7, #7]
 801124c:	4611      	mov	r1, r2
 801124e:	4618      	mov	r0, r3
 8011250:	f7ff ff6c 	bl	801112c <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 8011254:	2300      	movs	r3, #0
 8011256:	73fb      	strb	r3, [r7, #15]
 8011258:	e00d      	b.n	8011276 <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 801125a:	7bbb      	ldrb	r3, [r7, #14]
 801125c:	011a      	lsls	r2, r3, #4
 801125e:	7bfb      	ldrb	r3, [r7, #15]
 8011260:	4413      	add	r3, r2
 8011262:	3308      	adds	r3, #8
 8011264:	4a08      	ldr	r2, [pc, #32]	@ (8011288 <OLED_ShowChar+0xa8>)
 8011266:	5cd3      	ldrb	r3, [r2, r3]
 8011268:	2101      	movs	r1, #1
 801126a:	4618      	mov	r0, r3
 801126c:	f7ff ff28 	bl	80110c0 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 8011270:	7bfb      	ldrb	r3, [r7, #15]
 8011272:	3301      	adds	r3, #1
 8011274:	73fb      	strb	r3, [r7, #15]
 8011276:	7bfb      	ldrb	r3, [r7, #15]
 8011278:	2b07      	cmp	r3, #7
 801127a:	d9ee      	bls.n	801125a <OLED_ShowChar+0x7a>
	{
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);
	}
}
 801127c:	bf00      	nop
 801127e:	bf00      	nop
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	0801535c 	.word	0x0801535c

0801128c <OLED_ShowString>:
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
	}
}
// 显示一个字符串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	4603      	mov	r3, r0
 8011294:	603a      	str	r2, [r7, #0]
 8011296:	71fb      	strb	r3, [r7, #7]
 8011298:	460b      	mov	r3, r1
 801129a:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0;
 801129c:	2300      	movs	r3, #0
 801129e:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 80112a0:	e016      	b.n	80112d0 <OLED_ShowString+0x44>
	{
		OLED_ShowChar(x, y, chr[j]);
 80112a2:	7bfb      	ldrb	r3, [r7, #15]
 80112a4:	683a      	ldr	r2, [r7, #0]
 80112a6:	4413      	add	r3, r2
 80112a8:	781a      	ldrb	r2, [r3, #0]
 80112aa:	79b9      	ldrb	r1, [r7, #6]
 80112ac:	79fb      	ldrb	r3, [r7, #7]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7ff ff96 	bl	80111e0 <OLED_ShowChar>
		x += 8;
 80112b4:	79fb      	ldrb	r3, [r7, #7]
 80112b6:	3308      	adds	r3, #8
 80112b8:	71fb      	strb	r3, [r7, #7]
		if (x > 120)
 80112ba:	79fb      	ldrb	r3, [r7, #7]
 80112bc:	2b78      	cmp	r3, #120	@ 0x78
 80112be:	d904      	bls.n	80112ca <OLED_ShowString+0x3e>
		{
			x = 0;
 80112c0:	2300      	movs	r3, #0
 80112c2:	71fb      	strb	r3, [r7, #7]
			y += 2;
 80112c4:	79bb      	ldrb	r3, [r7, #6]
 80112c6:	3302      	adds	r3, #2
 80112c8:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 80112ca:	7bfb      	ldrb	r3, [r7, #15]
 80112cc:	3301      	adds	r3, #1
 80112ce:	73fb      	strb	r3, [r7, #15]
	while (chr[j] != '\0')
 80112d0:	7bfb      	ldrb	r3, [r7, #15]
 80112d2:	683a      	ldr	r2, [r7, #0]
 80112d4:	4413      	add	r3, r2
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d1e2      	bne.n	80112a2 <OLED_ShowString+0x16>
	}
}
 80112dc:	bf00      	nop
 80112de:	bf00      	nop
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
	...

080112e8 <OLED_Init>:
	}
}

// 初始化SSD1306
void OLED_Init(void)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	af00      	add	r7, sp, #0
	// 复位OLED
	OLED_RST_Clr(); // 拉低复位引脚
 80112ec:	2200      	movs	r2, #0
 80112ee:	2120      	movs	r1, #32
 80112f0:	4841      	ldr	r0, [pc, #260]	@ (80113f8 <OLED_Init+0x110>)
 80112f2:	f7f4 ff7f 	bl	80061f4 <HAL_GPIO_WritePin>
	HAL_Delay(200); // 延时200毫秒
 80112f6:	20c8      	movs	r0, #200	@ 0xc8
 80112f8:	f7f0 fd1a 	bl	8001d30 <HAL_Delay>
	OLED_RST_Set(); // 拉高复位引脚
 80112fc:	2201      	movs	r2, #1
 80112fe:	2120      	movs	r1, #32
 8011300:	483d      	ldr	r0, [pc, #244]	@ (80113f8 <OLED_Init+0x110>)
 8011302:	f7f4 ff77 	bl	80061f4 <HAL_GPIO_WritePin>

	// 关闭OLED面板
	OLED_WR_Byte(0xAE, OLED_CMD); // 关闭面板指令
 8011306:	2100      	movs	r1, #0
 8011308:	20ae      	movs	r0, #174	@ 0xae
 801130a:	f7ff fed9 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // 设置低列地址
 801130e:	2100      	movs	r1, #0
 8011310:	2002      	movs	r0, #2
 8011312:	f7ff fed5 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
 8011316:	2100      	movs	r1, #0
 8011318:	2010      	movs	r0, #16
 801131a:	f7ff fed1 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行地址，映射RAM显示起始行（0x00~0x3F）
 801131e:	2100      	movs	r1, #0
 8011320:	2040      	movs	r0, #64	@ 0x40
 8011322:	f7ff fecd 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); // 设置对比度控制寄存器
 8011326:	2100      	movs	r1, #0
 8011328:	2081      	movs	r0, #129	@ 0x81
 801132a:	f7ff fec9 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // 设置SEG输出电流亮度
 801132e:	2100      	movs	r1, #0
 8011330:	20cf      	movs	r0, #207	@ 0xcf
 8011332:	f7ff fec5 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // 设置SEG/列映射，0Xa0左右反置，0Xa1正常
 8011336:	2100      	movs	r1, #0
 8011338:	20a1      	movs	r0, #161	@ 0xa1
 801133a:	f7ff fec1 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // 设置COM/行扫描方向，0Xc0上下反置，0Xc8正常
 801133e:	2100      	movs	r1, #0
 8011340:	20c8      	movs	r0, #200	@ 0xc8
 8011342:	f7ff febd 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 设置正常显示
 8011346:	2100      	movs	r1, #0
 8011348:	20a6      	movs	r0, #166	@ 0xa6
 801134a:	f7ff feb9 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比（1到64）
 801134e:	2100      	movs	r1, #0
 8011350:	20a8      	movs	r0, #168	@ 0xa8
 8011352:	f7ff feb5 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); // 1/64 duty
 8011356:	2100      	movs	r1, #0
 8011358:	203f      	movs	r0, #63	@ 0x3f
 801135a:	f7ff feb1 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // 设置显示偏移，移动映射RAM计数器（0x00~0x3F）
 801135e:	2100      	movs	r1, #0
 8011360:	20d3      	movs	r0, #211	@ 0xd3
 8011362:	f7ff fead 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); // 不偏移
 8011366:	2100      	movs	r1, #0
 8011368:	2000      	movs	r0, #0
 801136a:	f7ff fea9 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); // 设置显示时钟分频比/振荡器频率
 801136e:	2100      	movs	r1, #0
 8011370:	20d5      	movs	r0, #213	@ 0xd5
 8011372:	f7ff fea5 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); // 设置分频比，设置时钟为100帧/秒
 8011376:	2100      	movs	r1, #0
 8011378:	2080      	movs	r0, #128	@ 0x80
 801137a:	f7ff fea1 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // 设置预充电周期
 801137e:	2100      	movs	r1, #0
 8011380:	20d9      	movs	r0, #217	@ 0xd9
 8011382:	f7ff fe9d 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // 设置预充电为15个时钟，放电为1个时钟
 8011386:	2100      	movs	r1, #0
 8011388:	20f1      	movs	r0, #241	@ 0xf1
 801138a:	f7ff fe99 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // 设置COM引脚硬件配置
 801138e:	2100      	movs	r1, #0
 8011390:	20da      	movs	r0, #218	@ 0xda
 8011392:	f7ff fe95 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8011396:	2100      	movs	r1, #0
 8011398:	2012      	movs	r0, #18
 801139a:	f7ff fe91 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // 设置vcomh
 801139e:	2100      	movs	r1, #0
 80113a0:	20db      	movs	r0, #219	@ 0xdb
 80113a2:	f7ff fe8d 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // 设置VCOM取消电平
 80113a6:	2100      	movs	r1, #0
 80113a8:	2040      	movs	r0, #64	@ 0x40
 80113aa:	f7ff fe89 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // 设置页面寻址模式（0x00/0x01/0x02）
 80113ae:	2100      	movs	r1, #0
 80113b0:	2020      	movs	r0, #32
 80113b2:	f7ff fe85 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);
 80113b6:	2100      	movs	r1, #0
 80113b8:	2002      	movs	r0, #2
 80113ba:	f7ff fe81 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); // 设置充电泵使能/禁用
 80113be:	2100      	movs	r1, #0
 80113c0:	208d      	movs	r0, #141	@ 0x8d
 80113c2:	f7ff fe7d 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // 设置（0x10）禁用
 80113c6:	2100      	movs	r1, #0
 80113c8:	2014      	movs	r0, #20
 80113ca:	f7ff fe79 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // 禁用整个显示（0xa4/0xa5）
 80113ce:	2100      	movs	r1, #0
 80113d0:	20a4      	movs	r0, #164	@ 0xa4
 80113d2:	f7ff fe75 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // 禁用反相显示（0xa6/a7）
 80113d6:	2100      	movs	r1, #0
 80113d8:	20a6      	movs	r0, #166	@ 0xa6
 80113da:	f7ff fe71 	bl	80110c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // 打开OLED面板
 80113de:	2100      	movs	r1, #0
 80113e0:	20af      	movs	r0, #175	@ 0xaf
 80113e2:	f7ff fe6d 	bl	80110c0 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*显示开*/
 80113e6:	2100      	movs	r1, #0
 80113e8:	20af      	movs	r0, #175	@ 0xaf
 80113ea:	f7ff fe69 	bl	80110c0 <OLED_WR_Byte>
	OLED_Clear();				  // 清除显示
 80113ee:	f7ff fec9 	bl	8011184 <OLED_Clear>
}
 80113f2:	bf00      	nop
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	58020800 	.word	0x58020800

080113fc <pll_Init>:
 * @param config: 配置指针
 * @param f: 信号频率(典型值:50)
 * @param F: 采样频率(典型值:20000)
 */
void pll_Init(pll_Signal *signal, pll_Config *config, float f, uint16_t F)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	ed87 0a01 	vstr	s0, [r7, #4]
 801140a:	4613      	mov	r3, r2
 801140c:	807b      	strh	r3, [r7, #2]
    // 初始化赋值
    signal->u_0 = 0.f;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f04f 0200 	mov.w	r2, #0
 8011414:	601a      	str	r2, [r3, #0]
    signal->u_1 = 0.f;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f04f 0200 	mov.w	r2, #0
 801141c:	605a      	str	r2, [r3, #4]
    signal->u_2 = 0.f;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f04f 0200 	mov.w	r2, #0
 8011424:	609a      	str	r2, [r3, #8]

    signal->sogi_a_1 = 0.f;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f04f 0200 	mov.w	r2, #0
 801142c:	611a      	str	r2, [r3, #16]
    signal->sogi_a_2 = 0.f;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f04f 0200 	mov.w	r2, #0
 8011434:	615a      	str	r2, [r3, #20]
    signal->sogi_b_1 = 0.f;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f04f 0200 	mov.w	r2, #0
 801143c:	61da      	str	r2, [r3, #28]
    signal->sogi_b_2 = 0.f;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f04f 0200 	mov.w	r2, #0
 8011444:	621a      	str	r2, [r3, #32]

    signal->theta = 0.f;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f04f 0200 	mov.w	r2, #0
 801144c:	635a      	str	r2, [r3, #52]	@ 0x34

    config->omiga = 2 * PI * f; // f典型值50
 801144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011452:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80115b8 <pll_Init+0x1bc>
 8011456:	ee67 7a87 	vmul.f32	s15, s15, s14
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	edc3 7a00 	vstr	s15, [r3]
    config->Ts = 1.f / F;       // F典型值20000
 8011460:	887b      	ldrh	r3, [r7, #2]
 8011462:	ee07 3a90 	vmov	s15, r3
 8011466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801146a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801146e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	edc3 7a01 	vstr	s15, [r3, #4]
    config->k = 1.414f;         // 阻尼比典型值1.414
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	4a50      	ldr	r2, [pc, #320]	@ (80115bc <pll_Init+0x1c0>)
 801147c:	609a      	str	r2, [r3, #8]
    config->phase = 0.f;        // 设定相位差
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	f04f 0200 	mov.w	r2, #0
 8011484:	60da      	str	r2, [r3, #12]
    // 计算中间量
    signal->lamda = 0.5f * config->omiga * config->Ts;
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	edd3 7a00 	vldr	s15, [r3]
 801148c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011490:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	edd3 7a01 	vldr	s15, [r3, #4]
 801149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    signal->x = 2.f * config->k * config->omiga * config->Ts;
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80114aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	edd3 7a00 	vldr	s15, [r3]
 80114b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80114be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    signal->y = config->omiga * config->Ts * config->omiga * config->Ts;
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	ed93 7a00 	vldr	s14, [r3]
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80114d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	edd3 7a00 	vldr	s15, [r3]
 80114de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80114e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    signal->b0 = signal->x / (signal->x + signal->y + 4);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011508:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801150c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    signal->a1 = (8 - 2.f * signal->y) / (signal->x + signal->y + 4);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011520:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011524:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8011528:	ee77 6a67 	vsub.f32	s13, s14, s15
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801153c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
    signal->a2 = (signal->x - signal->y - 4) / (signal->x + signal->y + 4);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801155a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801155e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8011562:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8011572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011576:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801157a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    // 初始化pid参数
    config->pid_kp = 70.73586f;
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	4a0d      	ldr	r2, [pc, #52]	@ (80115c0 <pll_Init+0x1c4>)
 801158c:	611a      	str	r2, [r3, #16]
    config->pid_ki = 15715.9305749f;
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	4a0c      	ldr	r2, [pc, #48]	@ (80115c4 <pll_Init+0x1c8>)
 8011592:	615a      	str	r2, [r3, #20]
    config->pid_kd = 0.f; // 只需要PI控制
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	f04f 0200 	mov.w	r2, #0
 801159a:	619a      	str	r2, [r3, #24]
    signal->pid_err[1] = 0.f;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f04f 0200 	mov.w	r2, #0
 80115a2:	641a      	str	r2, [r3, #64]	@ 0x40
    signal->pid_out = 0.f;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f04f 0200 	mov.w	r2, #0
 80115aa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80115ac:	bf00      	nop
 80115ae:	3714      	adds	r7, #20
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr
 80115b8:	40c90fdb 	.word	0x40c90fdb
 80115bc:	3fb4fdf4 	.word	0x3fb4fdf4
 80115c0:	428d78c3 	.word	0x428d78c3
 80115c4:	46758fb9 	.word	0x46758fb9

080115c8 <pll_Control>:
 * @param signal_In: 信号指针
 * @param config: 配置指针
 * @param signal_Target: 目标信号指针
 */
void pll_Control(pll_Signal *signal_In, pll_Config *config, pll_Signal *signal_Target)
{
 80115c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115cc:	ed2d 8b02 	vpush	{d8}
 80115d0:	b090      	sub	sp, #64	@ 0x40
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	60f8      	str	r0, [r7, #12]
 80115d6:	60b9      	str	r1, [r7, #8]
 80115d8:	607a      	str	r2, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_In);
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f000 f932 	bl	8011844 <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_In->sogi_a_0, signal_In->sogi_b_0 / 382 * 3, &signal_In->park_d, &signal_In->park_q, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	68de      	ldr	r6, [r3, #12]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	ed93 7a06 	vldr	s14, [r3, #24]
 80115ea:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8011788 <pll_Control+0x1c0>
 80115ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80115f2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80115f6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801160c:	eeb0 0a67 	vmov.f32	s0, s15
 8011610:	f000 fec8 	bl	80123a4 <arm_sin_f32>
 8011614:	eef0 8a40 	vmov.f32	s17, s0
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801161e:	eeb0 0a67 	vmov.f32	s0, s15
 8011622:	f000 ff05 	bl	8012430 <arm_cos_f32>
 8011626:	eef0 7a40 	vmov.f32	s15, s0
 801162a:	627e      	str	r6, [r7, #36]	@ 0x24
 801162c:	ed87 8a08 	vstr	s16, [r7, #32]
 8011630:	61fd      	str	r5, [r7, #28]
 8011632:	61bc      	str	r4, [r7, #24]
 8011634:	edc7 8a05 	vstr	s17, [r7, #20]
 8011638:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 801163c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011640:	edd7 7a04 	vldr	s15, [r7, #16]
 8011644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011648:	edd7 6a08 	vldr	s13, [r7, #32]
 801164c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 801165e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011662:	eeb1 7a67 	vneg.f32	s14, s15
 8011666:	edd7 7a05 	vldr	s15, [r7, #20]
 801166a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801166e:	edd7 6a08 	vldr	s13, [r7, #32]
 8011672:	edd7 7a04 	vldr	s15, [r7, #16]
 8011676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801167a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	edc3 7a00 	vstr	s15, [r3]
  }
 8011684:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pll_Pid(signal_In, config);
 8011686:	68b9      	ldr	r1, [r7, #8]
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f000 f87f 	bl	801178c <pll_Pid>
    // 更新theta
    signal_In->theta += (signal_In->pid_out + config->omiga) * config->Ts;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	edd3 7a00 	vldr	s15, [r3]
 80116a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80116aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    signal_In->theta = (float)fmod(signal_In->theta, 2 * PI);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80116be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80116c2:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8011780 <pll_Control+0x1b8>
 80116c6:	eeb0 0b47 	vmov.f64	d0, d7
 80116ca:	f003 fcb5 	bl	8015038 <fmod>
 80116ce:	eeb0 7b40 	vmov.f64	d7, d0
 80116d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 反park变换
    arm_inv_park_f32(signal_In->park_d, signal_In->park_q, &signal_In->park_inv_a, &signal_In->park_inv_b, arm_sin_f32(signal_Target->theta), arm_cos_f32(signal_Target->theta));
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f103 052c 	add.w	r5, r3, #44	@ 0x2c
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80116f8:	eeb0 0a67 	vmov.f32	s0, s15
 80116fc:	f000 fe52 	bl	80123a4 <arm_sin_f32>
 8011700:	eeb0 8a40 	vmov.f32	s16, s0
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801170a:	eeb0 0a67 	vmov.f32	s0, s15
 801170e:	f000 fe8f 	bl	8012430 <arm_cos_f32>
 8011712:	eef0 7a40 	vmov.f32	s15, s0
 8011716:	f8c7 803c 	str.w	r8, [r7, #60]	@ 0x3c
 801171a:	63be      	str	r6, [r7, #56]	@ 0x38
 801171c:	637d      	str	r5, [r7, #52]	@ 0x34
 801171e:	633c      	str	r4, [r7, #48]	@ 0x30
 8011720:	ed87 8a0b 	vstr	s16, [r7, #44]	@ 0x2c
 8011724:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011728:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801172c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011734:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8011738:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801173c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011746:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 801174a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801174e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011756:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 801175a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801175e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011768:	edc3 7a00 	vstr	s15, [r3]
  }
 801176c:	bf00      	nop
}
 801176e:	bf00      	nop
 8011770:	3740      	adds	r7, #64	@ 0x40
 8011772:	46bd      	mov	sp, r7
 8011774:	ecbd 8b02 	vpop	{d8}
 8011778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801177c:	f3af 8000 	nop.w
 8011780:	60000000 	.word	0x60000000
 8011784:	401921fb 	.word	0x401921fb
 8011788:	43bf0000 	.word	0x43bf0000

0801178c <pll_Pid>:
 *
 * @param signal: 信号指针
 * @param config: 配置指针
 */
void pll_Pid(pll_Signal *signal, pll_Config *config)
{
 801178c:	b480      	push	{r7}
 801178e:	b083      	sub	sp, #12
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
    signal->pid_err[0] = signal->park_q - config->phase;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	edd3 7a03 	vldr	s15, [r3, #12]
 80117a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    signal->pid_out = signal->pid_out + config->pid_kp * (signal->pid_err[0] - signal->pid_err[1]) + config->pid_ki * signal->pid_err[0];
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	edd3 6a04 	vldr	s13, [r3, #16]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80117c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80117c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	edd3 6a05 	vldr	s13, [r3, #20]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80117dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    // 限制调参幅度，防止跑飞
    if (signal->pid_out > 50 * PI)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80117f0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8011834 <pll_Pid+0xa8>
 80117f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80117f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117fc:	dd03      	ble.n	8011806 <pll_Pid+0x7a>
        signal->pid_out = 50 * PI;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	4a0d      	ldr	r2, [pc, #52]	@ (8011838 <pll_Pid+0xac>)
 8011802:	639a      	str	r2, [r3, #56]	@ 0x38
 8011804:	e00c      	b.n	8011820 <pll_Pid+0x94>
    else if (signal->pid_out < -20 * PI)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 801180c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 801183c <pll_Pid+0xb0>
 8011810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011818:	d502      	bpl.n	8011820 <pll_Pid+0x94>
        signal->pid_out = -20 * PI;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4a08      	ldr	r2, [pc, #32]	@ (8011840 <pll_Pid+0xb4>)
 801181e:	639a      	str	r2, [r3, #56]	@ 0x38

    signal->pid_err[1] = signal->pid_err[0];
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8011828:	bf00      	nop
 801182a:	370c      	adds	r7, #12
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr
 8011834:	431d1463 	.word	0x431d1463
 8011838:	431d1463 	.word	0x431d1463
 801183c:	c27b53d2 	.word	0xc27b53d2
 8011840:	c27b53d2 	.word	0xc27b53d2

08011844 <pll_Sogi>:
 * @brief Sogi变换
 *
 * @param signal: 信号指针
 */
void pll_Sogi(pll_Signal *signal)
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
    signal->sogi_a_0 = signal->b0 * signal->u_0 - signal->b0 * signal->u_2 + signal->a1 * signal->sogi_a_1 + signal->a2 * signal->sogi_a_2;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	edd3 7a00 	vldr	s15, [r3]
 8011858:	ee27 7a27 	vmul.f32	s14, s14, s15
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	edd3 7a02 	vldr	s15, [r3, #8]
 8011868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801186c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	edd3 7a04 	vldr	s15, [r3, #16]
 801187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	edd3 7a05 	vldr	s15, [r3, #20]
 8011890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	edc3 7a03 	vstr	s15, [r3, #12]
    signal->sogi_b_0 = signal->b0 * signal->u_0 + 2.0f * signal->b0 * signal->u_1 + signal->b0 * signal->u_2 + signal->a1 * signal->sogi_b_1 + signal->a2 * signal->sogi_b_2;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	edd3 7a00 	vldr	s15, [r3]
 80118aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80118b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80118be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80118d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80118e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80118fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	edc3 7a06 	vstr	s15, [r3, #24]

    signal->u_2 = signal->u_1;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	685a      	ldr	r2, [r3, #4]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	609a      	str	r2, [r3, #8]
    signal->u_1 = signal->u_0;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681a      	ldr	r2, [r3, #0]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	605a      	str	r2, [r3, #4]
    signal->sogi_a_2 = signal->sogi_a_1;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	691a      	ldr	r2, [r3, #16]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	615a      	str	r2, [r3, #20]
    signal->sogi_a_1 = signal->sogi_a_0;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	68da      	ldr	r2, [r3, #12]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	611a      	str	r2, [r3, #16]
    signal->sogi_b_2 = signal->sogi_b_1;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	69da      	ldr	r2, [r3, #28]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	621a      	str	r2, [r3, #32]
    signal->sogi_b_1 = signal->sogi_b_0;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	699a      	ldr	r2, [r3, #24]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	61da      	str	r2, [r3, #28]
}
 8011938:	bf00      	nop
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr

08011944 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011948:	2200      	movs	r2, #0
 801194a:	4913      	ldr	r1, [pc, #76]	@ (8011998 <MX_USB_DEVICE_Init+0x54>)
 801194c:	4813      	ldr	r0, [pc, #76]	@ (801199c <MX_USB_DEVICE_Init+0x58>)
 801194e:	f7fe f857 	bl	800fa00 <USBD_Init>
 8011952:	4603      	mov	r3, r0
 8011954:	2b00      	cmp	r3, #0
 8011956:	d001      	beq.n	801195c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011958:	f7ef fc7a 	bl	8001250 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801195c:	4910      	ldr	r1, [pc, #64]	@ (80119a0 <MX_USB_DEVICE_Init+0x5c>)
 801195e:	480f      	ldr	r0, [pc, #60]	@ (801199c <MX_USB_DEVICE_Init+0x58>)
 8011960:	f7fe f87e 	bl	800fa60 <USBD_RegisterClass>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d001      	beq.n	801196e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801196a:	f7ef fc71 	bl	8001250 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801196e:	490d      	ldr	r1, [pc, #52]	@ (80119a4 <MX_USB_DEVICE_Init+0x60>)
 8011970:	480a      	ldr	r0, [pc, #40]	@ (801199c <MX_USB_DEVICE_Init+0x58>)
 8011972:	f7fd ff75 	bl	800f860 <USBD_CDC_RegisterInterface>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d001      	beq.n	8011980 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801197c:	f7ef fc68 	bl	8001250 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011980:	4806      	ldr	r0, [pc, #24]	@ (801199c <MX_USB_DEVICE_Init+0x58>)
 8011982:	f7fe f8a3 	bl	800facc <USBD_Start>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801198c:	f7ef fc60 	bl	8001250 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011990:	f7f6 fbf6 	bl	8008180 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011994:	bf00      	nop
 8011996:	bd80      	pop	{r7, pc}
 8011998:	240000b4 	.word	0x240000b4
 801199c:	24000734 	.word	0x24000734
 80119a0:	24000020 	.word	0x24000020
 80119a4:	240000a0 	.word	0x240000a0

080119a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80119ac:	2200      	movs	r2, #0
 80119ae:	4905      	ldr	r1, [pc, #20]	@ (80119c4 <CDC_Init_FS+0x1c>)
 80119b0:	4805      	ldr	r0, [pc, #20]	@ (80119c8 <CDC_Init_FS+0x20>)
 80119b2:	f7fd ff6f 	bl	800f894 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80119b6:	4905      	ldr	r1, [pc, #20]	@ (80119cc <CDC_Init_FS+0x24>)
 80119b8:	4803      	ldr	r0, [pc, #12]	@ (80119c8 <CDC_Init_FS+0x20>)
 80119ba:	f7fd ff8d 	bl	800f8d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80119be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	24001210 	.word	0x24001210
 80119c8:	24000734 	.word	0x24000734
 80119cc:	24000a10 	.word	0x24000a10

080119d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80119d0:	b480      	push	{r7}
 80119d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80119d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	4603      	mov	r3, r0
 80119e8:	6039      	str	r1, [r7, #0]
 80119ea:	71fb      	strb	r3, [r7, #7]
 80119ec:	4613      	mov	r3, r2
 80119ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80119f0:	79fb      	ldrb	r3, [r7, #7]
 80119f2:	2b23      	cmp	r3, #35	@ 0x23
 80119f4:	d84a      	bhi.n	8011a8c <CDC_Control_FS+0xac>
 80119f6:	a201      	add	r2, pc, #4	@ (adr r2, 80119fc <CDC_Control_FS+0x1c>)
 80119f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119fc:	08011a8d 	.word	0x08011a8d
 8011a00:	08011a8d 	.word	0x08011a8d
 8011a04:	08011a8d 	.word	0x08011a8d
 8011a08:	08011a8d 	.word	0x08011a8d
 8011a0c:	08011a8d 	.word	0x08011a8d
 8011a10:	08011a8d 	.word	0x08011a8d
 8011a14:	08011a8d 	.word	0x08011a8d
 8011a18:	08011a8d 	.word	0x08011a8d
 8011a1c:	08011a8d 	.word	0x08011a8d
 8011a20:	08011a8d 	.word	0x08011a8d
 8011a24:	08011a8d 	.word	0x08011a8d
 8011a28:	08011a8d 	.word	0x08011a8d
 8011a2c:	08011a8d 	.word	0x08011a8d
 8011a30:	08011a8d 	.word	0x08011a8d
 8011a34:	08011a8d 	.word	0x08011a8d
 8011a38:	08011a8d 	.word	0x08011a8d
 8011a3c:	08011a8d 	.word	0x08011a8d
 8011a40:	08011a8d 	.word	0x08011a8d
 8011a44:	08011a8d 	.word	0x08011a8d
 8011a48:	08011a8d 	.word	0x08011a8d
 8011a4c:	08011a8d 	.word	0x08011a8d
 8011a50:	08011a8d 	.word	0x08011a8d
 8011a54:	08011a8d 	.word	0x08011a8d
 8011a58:	08011a8d 	.word	0x08011a8d
 8011a5c:	08011a8d 	.word	0x08011a8d
 8011a60:	08011a8d 	.word	0x08011a8d
 8011a64:	08011a8d 	.word	0x08011a8d
 8011a68:	08011a8d 	.word	0x08011a8d
 8011a6c:	08011a8d 	.word	0x08011a8d
 8011a70:	08011a8d 	.word	0x08011a8d
 8011a74:	08011a8d 	.word	0x08011a8d
 8011a78:	08011a8d 	.word	0x08011a8d
 8011a7c:	08011a8d 	.word	0x08011a8d
 8011a80:	08011a8d 	.word	0x08011a8d
 8011a84:	08011a8d 	.word	0x08011a8d
 8011a88:	08011a8d 	.word	0x08011a8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011a8c:	bf00      	nop
  }

  return (USBD_OK);
 8011a8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	370c      	adds	r7, #12
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011aa6:	6879      	ldr	r1, [r7, #4]
 8011aa8:	4805      	ldr	r0, [pc, #20]	@ (8011ac0 <CDC_Receive_FS+0x24>)
 8011aaa:	f7fd ff15 	bl	800f8d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011aae:	4804      	ldr	r0, [pc, #16]	@ (8011ac0 <CDC_Receive_FS+0x24>)
 8011ab0:	f7fd ff70 	bl	800f994 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011ab4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	24000734 	.word	0x24000734

08011ac4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b084      	sub	sp, #16
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	460b      	mov	r3, r1
 8011ace:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8011b0c <CDC_Transmit_FS+0x48>)
 8011ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011ada:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d001      	beq.n	8011aea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	e00b      	b.n	8011b02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011aea:	887b      	ldrh	r3, [r7, #2]
 8011aec:	461a      	mov	r2, r3
 8011aee:	6879      	ldr	r1, [r7, #4]
 8011af0:	4806      	ldr	r0, [pc, #24]	@ (8011b0c <CDC_Transmit_FS+0x48>)
 8011af2:	f7fd fecf 	bl	800f894 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011af6:	4805      	ldr	r0, [pc, #20]	@ (8011b0c <CDC_Transmit_FS+0x48>)
 8011af8:	f7fd ff0c 	bl	800f914 <USBD_CDC_TransmitPacket>
 8011afc:	4603      	mov	r3, r0
 8011afe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	24000734 	.word	0x24000734

08011b10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b087      	sub	sp, #28
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	4613      	mov	r3, r2
 8011b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	371c      	adds	r7, #28
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
	...

08011b34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b083      	sub	sp, #12
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	6039      	str	r1, [r7, #0]
 8011b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	2212      	movs	r2, #18
 8011b44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011b46:	4b03      	ldr	r3, [pc, #12]	@ (8011b54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	240000d4 	.word	0x240000d4

08011b58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	4603      	mov	r3, r0
 8011b60:	6039      	str	r1, [r7, #0]
 8011b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	2204      	movs	r2, #4
 8011b68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011b6a:	4b03      	ldr	r3, [pc, #12]	@ (8011b78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr
 8011b78:	240000e8 	.word	0x240000e8

08011b7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	4603      	mov	r3, r0
 8011b84:	6039      	str	r1, [r7, #0]
 8011b86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b88:	79fb      	ldrb	r3, [r7, #7]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d105      	bne.n	8011b9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b8e:	683a      	ldr	r2, [r7, #0]
 8011b90:	4907      	ldr	r1, [pc, #28]	@ (8011bb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b92:	4808      	ldr	r0, [pc, #32]	@ (8011bb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011b94:	f7ff f974 	bl	8010e80 <USBD_GetString>
 8011b98:	e004      	b.n	8011ba4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b9a:	683a      	ldr	r2, [r7, #0]
 8011b9c:	4904      	ldr	r1, [pc, #16]	@ (8011bb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b9e:	4805      	ldr	r0, [pc, #20]	@ (8011bb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011ba0:	f7ff f96e 	bl	8010e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ba4:	4b02      	ldr	r3, [pc, #8]	@ (8011bb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	24001a10 	.word	0x24001a10
 8011bb4:	080152fc 	.word	0x080152fc

08011bb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	6039      	str	r1, [r7, #0]
 8011bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011bc4:	683a      	ldr	r2, [r7, #0]
 8011bc6:	4904      	ldr	r1, [pc, #16]	@ (8011bd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011bc8:	4804      	ldr	r0, [pc, #16]	@ (8011bdc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011bca:	f7ff f959 	bl	8010e80 <USBD_GetString>
  return USBD_StrDesc;
 8011bce:	4b02      	ldr	r3, [pc, #8]	@ (8011bd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	24001a10 	.word	0x24001a10
 8011bdc:	08015314 	.word	0x08015314

08011be0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	4603      	mov	r3, r0
 8011be8:	6039      	str	r1, [r7, #0]
 8011bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	221a      	movs	r2, #26
 8011bf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011bf2:	f000 f843 	bl	8011c7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011bf6:	4b02      	ldr	r3, [pc, #8]	@ (8011c00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	240000ec 	.word	0x240000ec

08011c04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	6039      	str	r1, [r7, #0]
 8011c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011c10:	79fb      	ldrb	r3, [r7, #7]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d105      	bne.n	8011c22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c16:	683a      	ldr	r2, [r7, #0]
 8011c18:	4907      	ldr	r1, [pc, #28]	@ (8011c38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c1a:	4808      	ldr	r0, [pc, #32]	@ (8011c3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c1c:	f7ff f930 	bl	8010e80 <USBD_GetString>
 8011c20:	e004      	b.n	8011c2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c22:	683a      	ldr	r2, [r7, #0]
 8011c24:	4904      	ldr	r1, [pc, #16]	@ (8011c38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c26:	4805      	ldr	r0, [pc, #20]	@ (8011c3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c28:	f7ff f92a 	bl	8010e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c2c:	4b02      	ldr	r3, [pc, #8]	@ (8011c38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	bf00      	nop
 8011c38:	24001a10 	.word	0x24001a10
 8011c3c:	08015328 	.word	0x08015328

08011c40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	6039      	str	r1, [r7, #0]
 8011c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c4c:	79fb      	ldrb	r3, [r7, #7]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d105      	bne.n	8011c5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c52:	683a      	ldr	r2, [r7, #0]
 8011c54:	4907      	ldr	r1, [pc, #28]	@ (8011c74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c56:	4808      	ldr	r0, [pc, #32]	@ (8011c78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c58:	f7ff f912 	bl	8010e80 <USBD_GetString>
 8011c5c:	e004      	b.n	8011c68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c5e:	683a      	ldr	r2, [r7, #0]
 8011c60:	4904      	ldr	r1, [pc, #16]	@ (8011c74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c62:	4805      	ldr	r0, [pc, #20]	@ (8011c78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c64:	f7ff f90c 	bl	8010e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c68:	4b02      	ldr	r3, [pc, #8]	@ (8011c74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	24001a10 	.word	0x24001a10
 8011c78:	08015334 	.word	0x08015334

08011c7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8011c82:	68fa      	ldr	r2, [r7, #12]
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	4413      	add	r3, r2
 8011c88:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d009      	beq.n	8011ca4 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011c90:	2208      	movs	r2, #8
 8011c92:	4906      	ldr	r1, [pc, #24]	@ (8011cac <Get_SerialNum+0x30>)
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f000 f80d 	bl	8011cb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011c9a:	2204      	movs	r2, #4
 8011c9c:	4904      	ldr	r1, [pc, #16]	@ (8011cb0 <Get_SerialNum+0x34>)
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 f808 	bl	8011cb4 <IntToUnicode>
  }
}
 8011ca4:	bf00      	nop
 8011ca6:	3710      	adds	r7, #16
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	240000ee 	.word	0x240000ee
 8011cb0:	240000fe 	.word	0x240000fe

08011cb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b087      	sub	sp, #28
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	75fb      	strb	r3, [r7, #23]
 8011cca:	e027      	b.n	8011d1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	0f1b      	lsrs	r3, r3, #28
 8011cd0:	2b09      	cmp	r3, #9
 8011cd2:	d80b      	bhi.n	8011cec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	0f1b      	lsrs	r3, r3, #28
 8011cd8:	b2da      	uxtb	r2, r3
 8011cda:	7dfb      	ldrb	r3, [r7, #23]
 8011cdc:	005b      	lsls	r3, r3, #1
 8011cde:	4619      	mov	r1, r3
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	440b      	add	r3, r1
 8011ce4:	3230      	adds	r2, #48	@ 0x30
 8011ce6:	b2d2      	uxtb	r2, r2
 8011ce8:	701a      	strb	r2, [r3, #0]
 8011cea:	e00a      	b.n	8011d02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	0f1b      	lsrs	r3, r3, #28
 8011cf0:	b2da      	uxtb	r2, r3
 8011cf2:	7dfb      	ldrb	r3, [r7, #23]
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	440b      	add	r3, r1
 8011cfc:	3237      	adds	r2, #55	@ 0x37
 8011cfe:	b2d2      	uxtb	r2, r2
 8011d00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	011b      	lsls	r3, r3, #4
 8011d06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011d08:	7dfb      	ldrb	r3, [r7, #23]
 8011d0a:	005b      	lsls	r3, r3, #1
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	68ba      	ldr	r2, [r7, #8]
 8011d10:	4413      	add	r3, r2
 8011d12:	2200      	movs	r2, #0
 8011d14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011d16:	7dfb      	ldrb	r3, [r7, #23]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	75fb      	strb	r3, [r7, #23]
 8011d1c:	7dfa      	ldrb	r2, [r7, #23]
 8011d1e:	79fb      	ldrb	r3, [r7, #7]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d3d3      	bcc.n	8011ccc <IntToUnicode+0x18>
  }
}
 8011d24:	bf00      	nop
 8011d26:	bf00      	nop
 8011d28:	371c      	adds	r7, #28
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr
	...

08011d34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b0ba      	sub	sp, #232	@ 0xe8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011d40:	2200      	movs	r2, #0
 8011d42:	601a      	str	r2, [r3, #0]
 8011d44:	605a      	str	r2, [r3, #4]
 8011d46:	609a      	str	r2, [r3, #8]
 8011d48:	60da      	str	r2, [r3, #12]
 8011d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011d4c:	f107 0310 	add.w	r3, r7, #16
 8011d50:	22c0      	movs	r2, #192	@ 0xc0
 8011d52:	2100      	movs	r1, #0
 8011d54:	4618      	mov	r0, r3
 8011d56:	f001 f9c8 	bl	80130ea <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8011e10 <HAL_PCD_MspInit+0xdc>)
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d151      	bne.n	8011e08 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011d64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011d68:	f04f 0300 	mov.w	r3, #0
 8011d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011d70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011d78:	f107 0310 	add.w	r3, r7, #16
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7f7 fa21 	bl	80091c4 <HAL_RCCEx_PeriphCLKConfig>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d001      	beq.n	8011d8c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011d88:	f7ef fa62 	bl	8001250 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011d8c:	f7f6 f9f8 	bl	8008180 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d90:	4b20      	ldr	r3, [pc, #128]	@ (8011e14 <HAL_PCD_MspInit+0xe0>)
 8011d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d96:	4a1f      	ldr	r2, [pc, #124]	@ (8011e14 <HAL_PCD_MspInit+0xe0>)
 8011d98:	f043 0301 	orr.w	r3, r3, #1
 8011d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011da0:	4b1c      	ldr	r3, [pc, #112]	@ (8011e14 <HAL_PCD_MspInit+0xe0>)
 8011da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011da6:	f003 0301 	and.w	r3, r3, #1
 8011daa:	60fb      	str	r3, [r7, #12]
 8011dac:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011dae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011db6:	2302      	movs	r3, #2
 8011db8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011dc8:	230a      	movs	r3, #10
 8011dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011dce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	4810      	ldr	r0, [pc, #64]	@ (8011e18 <HAL_PCD_MspInit+0xe4>)
 8011dd6:	f7f4 f85d 	bl	8005e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011dda:	4b0e      	ldr	r3, [pc, #56]	@ (8011e14 <HAL_PCD_MspInit+0xe0>)
 8011ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011de0:	4a0c      	ldr	r2, [pc, #48]	@ (8011e14 <HAL_PCD_MspInit+0xe0>)
 8011de2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011de6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011dea:	4b0a      	ldr	r3, [pc, #40]	@ (8011e14 <HAL_PCD_MspInit+0xe0>)
 8011dec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011df4:	60bb      	str	r3, [r7, #8]
 8011df6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011df8:	2200      	movs	r2, #0
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	2065      	movs	r0, #101	@ 0x65
 8011dfe:	f7f1 fc87 	bl	8003710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011e02:	2065      	movs	r0, #101	@ 0x65
 8011e04:	f7f1 fc9e 	bl	8003744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011e08:	bf00      	nop
 8011e0a:	37e8      	adds	r7, #232	@ 0xe8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	40080000 	.word	0x40080000
 8011e14:	58024400 	.word	0x58024400
 8011e18:	58020000 	.word	0x58020000

08011e1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011e30:	4619      	mov	r1, r3
 8011e32:	4610      	mov	r0, r2
 8011e34:	f7fd fe97 	bl	800fb66 <USBD_LL_SetupStage>
}
 8011e38:	bf00      	nop
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011e52:	78fa      	ldrb	r2, [r7, #3]
 8011e54:	6879      	ldr	r1, [r7, #4]
 8011e56:	4613      	mov	r3, r2
 8011e58:	00db      	lsls	r3, r3, #3
 8011e5a:	4413      	add	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	440b      	add	r3, r1
 8011e60:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	78fb      	ldrb	r3, [r7, #3]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	f7fd fed1 	bl	800fc10 <USBD_LL_DataOutStage>
}
 8011e6e:	bf00      	nop
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b082      	sub	sp, #8
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
 8011e7e:	460b      	mov	r3, r1
 8011e80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8011e88:	78fa      	ldrb	r2, [r7, #3]
 8011e8a:	6879      	ldr	r1, [r7, #4]
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	00db      	lsls	r3, r3, #3
 8011e90:	4413      	add	r3, r2
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	440b      	add	r3, r1
 8011e96:	3348      	adds	r3, #72	@ 0x48
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	78fb      	ldrb	r3, [r7, #3]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	f7fd ff6a 	bl	800fd76 <USBD_LL_DataInStage>
}
 8011ea2:	bf00      	nop
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b082      	sub	sp, #8
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fe f8a4 	bl	8010006 <USBD_LL_SOF>
}
 8011ebe:	bf00      	nop
 8011ec0:	3708      	adds	r7, #8
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}

08011ec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b084      	sub	sp, #16
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	691b      	ldr	r3, [r3, #16]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011eda:	2300      	movs	r3, #0
 8011edc:	73fb      	strb	r3, [r7, #15]
 8011ede:	e008      	b.n	8011ef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	691b      	ldr	r3, [r3, #16]
 8011ee4:	2b02      	cmp	r3, #2
 8011ee6:	d102      	bne.n	8011eee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	73fb      	strb	r3, [r7, #15]
 8011eec:	e001      	b.n	8011ef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011eee:	f7ef f9af 	bl	8001250 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011ef8:	7bfa      	ldrb	r2, [r7, #15]
 8011efa:	4611      	mov	r1, r2
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7fe f83e 	bl	800ff7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fd ffe6 	bl	800feda <USBD_LL_Reset>
}
 8011f0e:	bf00      	nop
 8011f10:	3710      	adds	r7, #16
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
	...

08011f18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fe f839 	bl	800ff9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	6812      	ldr	r2, [r2, #0]
 8011f3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011f3e:	f043 0301 	orr.w	r3, r3, #1
 8011f42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6a1b      	ldr	r3, [r3, #32]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d005      	beq.n	8011f58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f4c:	4b04      	ldr	r3, [pc, #16]	@ (8011f60 <HAL_PCD_SuspendCallback+0x48>)
 8011f4e:	691b      	ldr	r3, [r3, #16]
 8011f50:	4a03      	ldr	r2, [pc, #12]	@ (8011f60 <HAL_PCD_SuspendCallback+0x48>)
 8011f52:	f043 0306 	orr.w	r3, r3, #6
 8011f56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011f58:	bf00      	nop
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	e000ed00 	.word	0xe000ed00

08011f64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fe f82f 	bl	800ffd6 <USBD_LL_Resume>
}
 8011f78:	bf00      	nop
 8011f7a:	3708      	adds	r7, #8
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	460b      	mov	r3, r1
 8011f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011f92:	78fa      	ldrb	r2, [r7, #3]
 8011f94:	4611      	mov	r1, r2
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fe f887 	bl	80100aa <USBD_LL_IsoOUTIncomplete>
}
 8011f9c:	bf00      	nop
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	460b      	mov	r3, r1
 8011fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011fb6:	78fa      	ldrb	r2, [r7, #3]
 8011fb8:	4611      	mov	r1, r2
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fe f843 	bl	8010046 <USBD_LL_IsoINIncomplete>
}
 8011fc0:	bf00      	nop
 8011fc2:	3708      	adds	r7, #8
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe f899 	bl	801010e <USBD_LL_DevConnected>
}
 8011fdc:	bf00      	nop
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fe f896 	bl	8010124 <USBD_LL_DevDisconnected>
}
 8011ff8:	bf00      	nop
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d13e      	bne.n	801208e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012010:	4a21      	ldr	r2, [pc, #132]	@ (8012098 <USBD_LL_Init+0x98>)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	4a1f      	ldr	r2, [pc, #124]	@ (8012098 <USBD_LL_Init+0x98>)
 801201c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012020:	4b1d      	ldr	r3, [pc, #116]	@ (8012098 <USBD_LL_Init+0x98>)
 8012022:	4a1e      	ldr	r2, [pc, #120]	@ (801209c <USBD_LL_Init+0x9c>)
 8012024:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012026:	4b1c      	ldr	r3, [pc, #112]	@ (8012098 <USBD_LL_Init+0x98>)
 8012028:	2209      	movs	r2, #9
 801202a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801202c:	4b1a      	ldr	r3, [pc, #104]	@ (8012098 <USBD_LL_Init+0x98>)
 801202e:	2202      	movs	r2, #2
 8012030:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012032:	4b19      	ldr	r3, [pc, #100]	@ (8012098 <USBD_LL_Init+0x98>)
 8012034:	2200      	movs	r2, #0
 8012036:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012038:	4b17      	ldr	r3, [pc, #92]	@ (8012098 <USBD_LL_Init+0x98>)
 801203a:	2202      	movs	r2, #2
 801203c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801203e:	4b16      	ldr	r3, [pc, #88]	@ (8012098 <USBD_LL_Init+0x98>)
 8012040:	2200      	movs	r2, #0
 8012042:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012044:	4b14      	ldr	r3, [pc, #80]	@ (8012098 <USBD_LL_Init+0x98>)
 8012046:	2200      	movs	r2, #0
 8012048:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801204a:	4b13      	ldr	r3, [pc, #76]	@ (8012098 <USBD_LL_Init+0x98>)
 801204c:	2200      	movs	r2, #0
 801204e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012050:	4b11      	ldr	r3, [pc, #68]	@ (8012098 <USBD_LL_Init+0x98>)
 8012052:	2200      	movs	r2, #0
 8012054:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012056:	4b10      	ldr	r3, [pc, #64]	@ (8012098 <USBD_LL_Init+0x98>)
 8012058:	2200      	movs	r2, #0
 801205a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801205c:	4b0e      	ldr	r3, [pc, #56]	@ (8012098 <USBD_LL_Init+0x98>)
 801205e:	2200      	movs	r2, #0
 8012060:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012062:	480d      	ldr	r0, [pc, #52]	@ (8012098 <USBD_LL_Init+0x98>)
 8012064:	f7f4 fd99 	bl	8006b9a <HAL_PCD_Init>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d001      	beq.n	8012072 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801206e:	f7ef f8ef 	bl	8001250 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012072:	2180      	movs	r1, #128	@ 0x80
 8012074:	4808      	ldr	r0, [pc, #32]	@ (8012098 <USBD_LL_Init+0x98>)
 8012076:	f7f6 f808 	bl	800808a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801207a:	2240      	movs	r2, #64	@ 0x40
 801207c:	2100      	movs	r1, #0
 801207e:	4806      	ldr	r0, [pc, #24]	@ (8012098 <USBD_LL_Init+0x98>)
 8012080:	f7f5 ffbc 	bl	8007ffc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012084:	2280      	movs	r2, #128	@ 0x80
 8012086:	2101      	movs	r1, #1
 8012088:	4803      	ldr	r0, [pc, #12]	@ (8012098 <USBD_LL_Init+0x98>)
 801208a:	f7f5 ffb7 	bl	8007ffc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801208e:	2300      	movs	r3, #0
}
 8012090:	4618      	mov	r0, r3
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	24001c10 	.word	0x24001c10
 801209c:	40080000 	.word	0x40080000

080120a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ac:	2300      	movs	r3, #0
 80120ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7f4 fe93 	bl	8006de2 <HAL_PCD_Start>
 80120bc:	4603      	mov	r3, r0
 80120be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120c0:	7bfb      	ldrb	r3, [r7, #15]
 80120c2:	4618      	mov	r0, r3
 80120c4:	f000 f942 	bl	801234c <USBD_Get_USB_Status>
 80120c8:	4603      	mov	r3, r0
 80120ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b084      	sub	sp, #16
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	4608      	mov	r0, r1
 80120e0:	4611      	mov	r1, r2
 80120e2:	461a      	mov	r2, r3
 80120e4:	4603      	mov	r3, r0
 80120e6:	70fb      	strb	r3, [r7, #3]
 80120e8:	460b      	mov	r3, r1
 80120ea:	70bb      	strb	r3, [r7, #2]
 80120ec:	4613      	mov	r3, r2
 80120ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120f0:	2300      	movs	r3, #0
 80120f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120f4:	2300      	movs	r3, #0
 80120f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80120fe:	78bb      	ldrb	r3, [r7, #2]
 8012100:	883a      	ldrh	r2, [r7, #0]
 8012102:	78f9      	ldrb	r1, [r7, #3]
 8012104:	f7f5 fb93 	bl	800782e <HAL_PCD_EP_Open>
 8012108:	4603      	mov	r3, r0
 801210a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801210c:	7bfb      	ldrb	r3, [r7, #15]
 801210e:	4618      	mov	r0, r3
 8012110:	f000 f91c 	bl	801234c <USBD_Get_USB_Status>
 8012114:	4603      	mov	r3, r0
 8012116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012118:	7bbb      	ldrb	r3, [r7, #14]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b084      	sub	sp, #16
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	460b      	mov	r3, r1
 801212c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801212e:	2300      	movs	r3, #0
 8012130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801213c:	78fa      	ldrb	r2, [r7, #3]
 801213e:	4611      	mov	r1, r2
 8012140:	4618      	mov	r0, r3
 8012142:	f7f5 fbdc 	bl	80078fe <HAL_PCD_EP_Close>
 8012146:	4603      	mov	r3, r0
 8012148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801214a:	7bfb      	ldrb	r3, [r7, #15]
 801214c:	4618      	mov	r0, r3
 801214e:	f000 f8fd 	bl	801234c <USBD_Get_USB_Status>
 8012152:	4603      	mov	r3, r0
 8012154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012156:	7bbb      	ldrb	r3, [r7, #14]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801216c:	2300      	movs	r3, #0
 801216e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012170:	2300      	movs	r3, #0
 8012172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801217a:	78fa      	ldrb	r2, [r7, #3]
 801217c:	4611      	mov	r1, r2
 801217e:	4618      	mov	r0, r3
 8012180:	f7f5 fc96 	bl	8007ab0 <HAL_PCD_EP_SetStall>
 8012184:	4603      	mov	r3, r0
 8012186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012188:	7bfb      	ldrb	r3, [r7, #15]
 801218a:	4618      	mov	r0, r3
 801218c:	f000 f8de 	bl	801234c <USBD_Get_USB_Status>
 8012190:	4603      	mov	r3, r0
 8012192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012194:	7bbb      	ldrb	r3, [r7, #14]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b084      	sub	sp, #16
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	460b      	mov	r3, r1
 80121a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121aa:	2300      	movs	r3, #0
 80121ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121ae:	2300      	movs	r3, #0
 80121b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121b8:	78fa      	ldrb	r2, [r7, #3]
 80121ba:	4611      	mov	r1, r2
 80121bc:	4618      	mov	r0, r3
 80121be:	f7f5 fcdb 	bl	8007b78 <HAL_PCD_EP_ClrStall>
 80121c2:	4603      	mov	r3, r0
 80121c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121c6:	7bfb      	ldrb	r3, [r7, #15]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f000 f8bf 	bl	801234c <USBD_Get_USB_Status>
 80121ce:	4603      	mov	r3, r0
 80121d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3710      	adds	r7, #16
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80121dc:	b480      	push	{r7}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	460b      	mov	r3, r1
 80121e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80121f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	da0b      	bge.n	8012210 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80121f8:	78fb      	ldrb	r3, [r7, #3]
 80121fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80121fe:	68f9      	ldr	r1, [r7, #12]
 8012200:	4613      	mov	r3, r2
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	4413      	add	r3, r2
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	440b      	add	r3, r1
 801220a:	333e      	adds	r3, #62	@ 0x3e
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	e00b      	b.n	8012228 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012210:	78fb      	ldrb	r3, [r7, #3]
 8012212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012216:	68f9      	ldr	r1, [r7, #12]
 8012218:	4613      	mov	r3, r2
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	4413      	add	r3, r2
 801221e:	009b      	lsls	r3, r3, #2
 8012220:	440b      	add	r3, r1
 8012222:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8012226:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012228:	4618      	mov	r0, r3
 801222a:	3714      	adds	r7, #20
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	460b      	mov	r3, r1
 801223e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012240:	2300      	movs	r3, #0
 8012242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012244:	2300      	movs	r3, #0
 8012246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801224e:	78fa      	ldrb	r2, [r7, #3]
 8012250:	4611      	mov	r1, r2
 8012252:	4618      	mov	r0, r3
 8012254:	f7f5 fac6 	bl	80077e4 <HAL_PCD_SetAddress>
 8012258:	4603      	mov	r3, r0
 801225a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801225c:	7bfb      	ldrb	r3, [r7, #15]
 801225e:	4618      	mov	r0, r3
 8012260:	f000 f874 	bl	801234c <USBD_Get_USB_Status>
 8012264:	4603      	mov	r3, r0
 8012266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012268:	7bbb      	ldrb	r3, [r7, #14]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012272:	b580      	push	{r7, lr}
 8012274:	b086      	sub	sp, #24
 8012276:	af00      	add	r7, sp, #0
 8012278:	60f8      	str	r0, [r7, #12]
 801227a:	607a      	str	r2, [r7, #4]
 801227c:	603b      	str	r3, [r7, #0]
 801227e:	460b      	mov	r3, r1
 8012280:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012286:	2300      	movs	r3, #0
 8012288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012290:	7af9      	ldrb	r1, [r7, #11]
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	f7f5 fbd0 	bl	8007a3a <HAL_PCD_EP_Transmit>
 801229a:	4603      	mov	r3, r0
 801229c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801229e:	7dfb      	ldrb	r3, [r7, #23]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f000 f853 	bl	801234c <USBD_Get_USB_Status>
 80122a6:	4603      	mov	r3, r0
 80122a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	607a      	str	r2, [r7, #4]
 80122be:	603b      	str	r3, [r7, #0]
 80122c0:	460b      	mov	r3, r1
 80122c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122c4:	2300      	movs	r3, #0
 80122c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122c8:	2300      	movs	r3, #0
 80122ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80122d2:	7af9      	ldrb	r1, [r7, #11]
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	f7f5 fb5b 	bl	8007992 <HAL_PCD_EP_Receive>
 80122dc:	4603      	mov	r3, r0
 80122de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122e0:	7dfb      	ldrb	r3, [r7, #23]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f000 f832 	bl	801234c <USBD_Get_USB_Status>
 80122e8:	4603      	mov	r3, r0
 80122ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3718      	adds	r7, #24
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b082      	sub	sp, #8
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	460b      	mov	r3, r1
 8012300:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012308:	78fa      	ldrb	r2, [r7, #3]
 801230a:	4611      	mov	r1, r2
 801230c:	4618      	mov	r0, r3
 801230e:	f7f5 fb7c 	bl	8007a0a <HAL_PCD_EP_GetRxCount>
 8012312:	4603      	mov	r3, r0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012324:	4b03      	ldr	r3, [pc, #12]	@ (8012334 <USBD_static_malloc+0x18>)
}
 8012326:	4618      	mov	r0, r3
 8012328:	370c      	adds	r7, #12
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	2400211c 	.word	0x2400211c

08012338 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012340:	bf00      	nop
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801234c:	b480      	push	{r7}
 801234e:	b085      	sub	sp, #20
 8012350:	af00      	add	r7, sp, #0
 8012352:	4603      	mov	r3, r0
 8012354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012356:	2300      	movs	r3, #0
 8012358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801235a:	79fb      	ldrb	r3, [r7, #7]
 801235c:	2b03      	cmp	r3, #3
 801235e:	d817      	bhi.n	8012390 <USBD_Get_USB_Status+0x44>
 8012360:	a201      	add	r2, pc, #4	@ (adr r2, 8012368 <USBD_Get_USB_Status+0x1c>)
 8012362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012366:	bf00      	nop
 8012368:	08012379 	.word	0x08012379
 801236c:	0801237f 	.word	0x0801237f
 8012370:	08012385 	.word	0x08012385
 8012374:	0801238b 	.word	0x0801238b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012378:	2300      	movs	r3, #0
 801237a:	73fb      	strb	r3, [r7, #15]
    break;
 801237c:	e00b      	b.n	8012396 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801237e:	2303      	movs	r3, #3
 8012380:	73fb      	strb	r3, [r7, #15]
    break;
 8012382:	e008      	b.n	8012396 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012384:	2301      	movs	r3, #1
 8012386:	73fb      	strb	r3, [r7, #15]
    break;
 8012388:	e005      	b.n	8012396 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801238a:	2303      	movs	r3, #3
 801238c:	73fb      	strb	r3, [r7, #15]
    break;
 801238e:	e002      	b.n	8012396 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012390:	2303      	movs	r3, #3
 8012392:	73fb      	strb	r3, [r7, #15]
    break;
 8012394:	bf00      	nop
  }
  return usb_status;
 8012396:	7bfb      	ldrb	r3, [r7, #15]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3714      	adds	r7, #20
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr

080123a4 <arm_sin_f32>:
 80123a4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012424 <arm_sin_f32+0x80>
 80123a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80123ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80123b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80123b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b8:	d504      	bpl.n	80123c4 <arm_sin_f32+0x20>
 80123ba:	ee17 3a90 	vmov	r3, s15
 80123be:	3b01      	subs	r3, #1
 80123c0:	ee07 3a90 	vmov	s15, r3
 80123c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123c8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012428 <arm_sin_f32+0x84>
 80123cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80123d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123d4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80123d8:	ee17 3a10 	vmov	r3, s14
 80123dc:	b29b      	uxth	r3, r3
 80123de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123e2:	d21a      	bcs.n	801241a <arm_sin_f32+0x76>
 80123e4:	ee07 3a10 	vmov	s14, r3
 80123e8:	1c59      	adds	r1, r3, #1
 80123ea:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80123ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80123f2:	4a0e      	ldr	r2, [pc, #56]	@ (801242c <arm_sin_f32+0x88>)
 80123f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80123f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80123fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012400:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012404:	edd3 6a00 	vldr	s13, [r3]
 8012408:	ed92 7a00 	vldr	s14, [r2]
 801240c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012414:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012418:	4770      	bx	lr
 801241a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801241e:	2101      	movs	r1, #1
 8012420:	2300      	movs	r3, #0
 8012422:	e7e6      	b.n	80123f2 <arm_sin_f32+0x4e>
 8012424:	3e22f983 	.word	0x3e22f983
 8012428:	44000000 	.word	0x44000000
 801242c:	0801594c 	.word	0x0801594c

08012430 <arm_cos_f32>:
 8012430:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80124b8 <arm_cos_f32+0x88>
 8012434:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8012438:	ee20 0a27 	vmul.f32	s0, s0, s15
 801243c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8012440:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012444:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244c:	d504      	bpl.n	8012458 <arm_cos_f32+0x28>
 801244e:	ee17 3a90 	vmov	r3, s15
 8012452:	3b01      	subs	r3, #1
 8012454:	ee07 3a90 	vmov	s15, r3
 8012458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801245c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80124bc <arm_cos_f32+0x8c>
 8012460:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012468:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801246c:	ee17 3a10 	vmov	r3, s14
 8012470:	b29b      	uxth	r3, r3
 8012472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012476:	d21a      	bcs.n	80124ae <arm_cos_f32+0x7e>
 8012478:	ee07 3a10 	vmov	s14, r3
 801247c:	1c59      	adds	r1, r3, #1
 801247e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8012482:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012486:	4a0e      	ldr	r2, [pc, #56]	@ (80124c0 <arm_cos_f32+0x90>)
 8012488:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801248c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012490:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012494:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012498:	edd3 6a00 	vldr	s13, [r3]
 801249c:	ed92 7a00 	vldr	s14, [r2]
 80124a0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80124a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124ac:	4770      	bx	lr
 80124ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80124b2:	2101      	movs	r1, #1
 80124b4:	2300      	movs	r3, #0
 80124b6:	e7e6      	b.n	8012486 <arm_cos_f32+0x56>
 80124b8:	3e22f983 	.word	0x3e22f983
 80124bc:	44000000 	.word	0x44000000
 80124c0:	0801594c 	.word	0x0801594c

080124c4 <malloc>:
 80124c4:	4b02      	ldr	r3, [pc, #8]	@ (80124d0 <malloc+0xc>)
 80124c6:	4601      	mov	r1, r0
 80124c8:	6818      	ldr	r0, [r3, #0]
 80124ca:	f000 b825 	b.w	8012518 <_malloc_r>
 80124ce:	bf00      	nop
 80124d0:	24000114 	.word	0x24000114

080124d4 <sbrk_aligned>:
 80124d4:	b570      	push	{r4, r5, r6, lr}
 80124d6:	4e0f      	ldr	r6, [pc, #60]	@ (8012514 <sbrk_aligned+0x40>)
 80124d8:	460c      	mov	r4, r1
 80124da:	6831      	ldr	r1, [r6, #0]
 80124dc:	4605      	mov	r5, r0
 80124de:	b911      	cbnz	r1, 80124e6 <sbrk_aligned+0x12>
 80124e0:	f000 fe44 	bl	801316c <_sbrk_r>
 80124e4:	6030      	str	r0, [r6, #0]
 80124e6:	4621      	mov	r1, r4
 80124e8:	4628      	mov	r0, r5
 80124ea:	f000 fe3f 	bl	801316c <_sbrk_r>
 80124ee:	1c43      	adds	r3, r0, #1
 80124f0:	d103      	bne.n	80124fa <sbrk_aligned+0x26>
 80124f2:	f04f 34ff 	mov.w	r4, #4294967295
 80124f6:	4620      	mov	r0, r4
 80124f8:	bd70      	pop	{r4, r5, r6, pc}
 80124fa:	1cc4      	adds	r4, r0, #3
 80124fc:	f024 0403 	bic.w	r4, r4, #3
 8012500:	42a0      	cmp	r0, r4
 8012502:	d0f8      	beq.n	80124f6 <sbrk_aligned+0x22>
 8012504:	1a21      	subs	r1, r4, r0
 8012506:	4628      	mov	r0, r5
 8012508:	f000 fe30 	bl	801316c <_sbrk_r>
 801250c:	3001      	adds	r0, #1
 801250e:	d1f2      	bne.n	80124f6 <sbrk_aligned+0x22>
 8012510:	e7ef      	b.n	80124f2 <sbrk_aligned+0x1e>
 8012512:	bf00      	nop
 8012514:	2400233c 	.word	0x2400233c

08012518 <_malloc_r>:
 8012518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801251c:	1ccd      	adds	r5, r1, #3
 801251e:	f025 0503 	bic.w	r5, r5, #3
 8012522:	3508      	adds	r5, #8
 8012524:	2d0c      	cmp	r5, #12
 8012526:	bf38      	it	cc
 8012528:	250c      	movcc	r5, #12
 801252a:	2d00      	cmp	r5, #0
 801252c:	4606      	mov	r6, r0
 801252e:	db01      	blt.n	8012534 <_malloc_r+0x1c>
 8012530:	42a9      	cmp	r1, r5
 8012532:	d904      	bls.n	801253e <_malloc_r+0x26>
 8012534:	230c      	movs	r3, #12
 8012536:	6033      	str	r3, [r6, #0]
 8012538:	2000      	movs	r0, #0
 801253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801253e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012614 <_malloc_r+0xfc>
 8012542:	f000 f869 	bl	8012618 <__malloc_lock>
 8012546:	f8d8 3000 	ldr.w	r3, [r8]
 801254a:	461c      	mov	r4, r3
 801254c:	bb44      	cbnz	r4, 80125a0 <_malloc_r+0x88>
 801254e:	4629      	mov	r1, r5
 8012550:	4630      	mov	r0, r6
 8012552:	f7ff ffbf 	bl	80124d4 <sbrk_aligned>
 8012556:	1c43      	adds	r3, r0, #1
 8012558:	4604      	mov	r4, r0
 801255a:	d158      	bne.n	801260e <_malloc_r+0xf6>
 801255c:	f8d8 4000 	ldr.w	r4, [r8]
 8012560:	4627      	mov	r7, r4
 8012562:	2f00      	cmp	r7, #0
 8012564:	d143      	bne.n	80125ee <_malloc_r+0xd6>
 8012566:	2c00      	cmp	r4, #0
 8012568:	d04b      	beq.n	8012602 <_malloc_r+0xea>
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	4639      	mov	r1, r7
 801256e:	4630      	mov	r0, r6
 8012570:	eb04 0903 	add.w	r9, r4, r3
 8012574:	f000 fdfa 	bl	801316c <_sbrk_r>
 8012578:	4581      	cmp	r9, r0
 801257a:	d142      	bne.n	8012602 <_malloc_r+0xea>
 801257c:	6821      	ldr	r1, [r4, #0]
 801257e:	1a6d      	subs	r5, r5, r1
 8012580:	4629      	mov	r1, r5
 8012582:	4630      	mov	r0, r6
 8012584:	f7ff ffa6 	bl	80124d4 <sbrk_aligned>
 8012588:	3001      	adds	r0, #1
 801258a:	d03a      	beq.n	8012602 <_malloc_r+0xea>
 801258c:	6823      	ldr	r3, [r4, #0]
 801258e:	442b      	add	r3, r5
 8012590:	6023      	str	r3, [r4, #0]
 8012592:	f8d8 3000 	ldr.w	r3, [r8]
 8012596:	685a      	ldr	r2, [r3, #4]
 8012598:	bb62      	cbnz	r2, 80125f4 <_malloc_r+0xdc>
 801259a:	f8c8 7000 	str.w	r7, [r8]
 801259e:	e00f      	b.n	80125c0 <_malloc_r+0xa8>
 80125a0:	6822      	ldr	r2, [r4, #0]
 80125a2:	1b52      	subs	r2, r2, r5
 80125a4:	d420      	bmi.n	80125e8 <_malloc_r+0xd0>
 80125a6:	2a0b      	cmp	r2, #11
 80125a8:	d917      	bls.n	80125da <_malloc_r+0xc2>
 80125aa:	1961      	adds	r1, r4, r5
 80125ac:	42a3      	cmp	r3, r4
 80125ae:	6025      	str	r5, [r4, #0]
 80125b0:	bf18      	it	ne
 80125b2:	6059      	strne	r1, [r3, #4]
 80125b4:	6863      	ldr	r3, [r4, #4]
 80125b6:	bf08      	it	eq
 80125b8:	f8c8 1000 	streq.w	r1, [r8]
 80125bc:	5162      	str	r2, [r4, r5]
 80125be:	604b      	str	r3, [r1, #4]
 80125c0:	4630      	mov	r0, r6
 80125c2:	f000 f82f 	bl	8012624 <__malloc_unlock>
 80125c6:	f104 000b 	add.w	r0, r4, #11
 80125ca:	1d23      	adds	r3, r4, #4
 80125cc:	f020 0007 	bic.w	r0, r0, #7
 80125d0:	1ac2      	subs	r2, r0, r3
 80125d2:	bf1c      	itt	ne
 80125d4:	1a1b      	subne	r3, r3, r0
 80125d6:	50a3      	strne	r3, [r4, r2]
 80125d8:	e7af      	b.n	801253a <_malloc_r+0x22>
 80125da:	6862      	ldr	r2, [r4, #4]
 80125dc:	42a3      	cmp	r3, r4
 80125de:	bf0c      	ite	eq
 80125e0:	f8c8 2000 	streq.w	r2, [r8]
 80125e4:	605a      	strne	r2, [r3, #4]
 80125e6:	e7eb      	b.n	80125c0 <_malloc_r+0xa8>
 80125e8:	4623      	mov	r3, r4
 80125ea:	6864      	ldr	r4, [r4, #4]
 80125ec:	e7ae      	b.n	801254c <_malloc_r+0x34>
 80125ee:	463c      	mov	r4, r7
 80125f0:	687f      	ldr	r7, [r7, #4]
 80125f2:	e7b6      	b.n	8012562 <_malloc_r+0x4a>
 80125f4:	461a      	mov	r2, r3
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	42a3      	cmp	r3, r4
 80125fa:	d1fb      	bne.n	80125f4 <_malloc_r+0xdc>
 80125fc:	2300      	movs	r3, #0
 80125fe:	6053      	str	r3, [r2, #4]
 8012600:	e7de      	b.n	80125c0 <_malloc_r+0xa8>
 8012602:	230c      	movs	r3, #12
 8012604:	6033      	str	r3, [r6, #0]
 8012606:	4630      	mov	r0, r6
 8012608:	f000 f80c 	bl	8012624 <__malloc_unlock>
 801260c:	e794      	b.n	8012538 <_malloc_r+0x20>
 801260e:	6005      	str	r5, [r0, #0]
 8012610:	e7d6      	b.n	80125c0 <_malloc_r+0xa8>
 8012612:	bf00      	nop
 8012614:	24002340 	.word	0x24002340

08012618 <__malloc_lock>:
 8012618:	4801      	ldr	r0, [pc, #4]	@ (8012620 <__malloc_lock+0x8>)
 801261a:	f000 bdf4 	b.w	8013206 <__retarget_lock_acquire_recursive>
 801261e:	bf00      	nop
 8012620:	24002484 	.word	0x24002484

08012624 <__malloc_unlock>:
 8012624:	4801      	ldr	r0, [pc, #4]	@ (801262c <__malloc_unlock+0x8>)
 8012626:	f000 bdef 	b.w	8013208 <__retarget_lock_release_recursive>
 801262a:	bf00      	nop
 801262c:	24002484 	.word	0x24002484

08012630 <__cvt>:
 8012630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012632:	ed2d 8b02 	vpush	{d8}
 8012636:	eeb0 8b40 	vmov.f64	d8, d0
 801263a:	b085      	sub	sp, #20
 801263c:	4617      	mov	r7, r2
 801263e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012640:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012642:	ee18 2a90 	vmov	r2, s17
 8012646:	f025 0520 	bic.w	r5, r5, #32
 801264a:	2a00      	cmp	r2, #0
 801264c:	bfb6      	itet	lt
 801264e:	222d      	movlt	r2, #45	@ 0x2d
 8012650:	2200      	movge	r2, #0
 8012652:	eeb1 8b40 	vneglt.f64	d8, d0
 8012656:	2d46      	cmp	r5, #70	@ 0x46
 8012658:	460c      	mov	r4, r1
 801265a:	701a      	strb	r2, [r3, #0]
 801265c:	d004      	beq.n	8012668 <__cvt+0x38>
 801265e:	2d45      	cmp	r5, #69	@ 0x45
 8012660:	d100      	bne.n	8012664 <__cvt+0x34>
 8012662:	3401      	adds	r4, #1
 8012664:	2102      	movs	r1, #2
 8012666:	e000      	b.n	801266a <__cvt+0x3a>
 8012668:	2103      	movs	r1, #3
 801266a:	ab03      	add	r3, sp, #12
 801266c:	9301      	str	r3, [sp, #4]
 801266e:	ab02      	add	r3, sp, #8
 8012670:	9300      	str	r3, [sp, #0]
 8012672:	4622      	mov	r2, r4
 8012674:	4633      	mov	r3, r6
 8012676:	eeb0 0b48 	vmov.f64	d0, d8
 801267a:	f000 fe51 	bl	8013320 <_dtoa_r>
 801267e:	2d47      	cmp	r5, #71	@ 0x47
 8012680:	d114      	bne.n	80126ac <__cvt+0x7c>
 8012682:	07fb      	lsls	r3, r7, #31
 8012684:	d50a      	bpl.n	801269c <__cvt+0x6c>
 8012686:	1902      	adds	r2, r0, r4
 8012688:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012690:	bf08      	it	eq
 8012692:	9203      	streq	r2, [sp, #12]
 8012694:	2130      	movs	r1, #48	@ 0x30
 8012696:	9b03      	ldr	r3, [sp, #12]
 8012698:	4293      	cmp	r3, r2
 801269a:	d319      	bcc.n	80126d0 <__cvt+0xa0>
 801269c:	9b03      	ldr	r3, [sp, #12]
 801269e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126a0:	1a1b      	subs	r3, r3, r0
 80126a2:	6013      	str	r3, [r2, #0]
 80126a4:	b005      	add	sp, #20
 80126a6:	ecbd 8b02 	vpop	{d8}
 80126aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ac:	2d46      	cmp	r5, #70	@ 0x46
 80126ae:	eb00 0204 	add.w	r2, r0, r4
 80126b2:	d1e9      	bne.n	8012688 <__cvt+0x58>
 80126b4:	7803      	ldrb	r3, [r0, #0]
 80126b6:	2b30      	cmp	r3, #48	@ 0x30
 80126b8:	d107      	bne.n	80126ca <__cvt+0x9a>
 80126ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80126be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c2:	bf1c      	itt	ne
 80126c4:	f1c4 0401 	rsbne	r4, r4, #1
 80126c8:	6034      	strne	r4, [r6, #0]
 80126ca:	6833      	ldr	r3, [r6, #0]
 80126cc:	441a      	add	r2, r3
 80126ce:	e7db      	b.n	8012688 <__cvt+0x58>
 80126d0:	1c5c      	adds	r4, r3, #1
 80126d2:	9403      	str	r4, [sp, #12]
 80126d4:	7019      	strb	r1, [r3, #0]
 80126d6:	e7de      	b.n	8012696 <__cvt+0x66>

080126d8 <__exponent>:
 80126d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126da:	2900      	cmp	r1, #0
 80126dc:	bfba      	itte	lt
 80126de:	4249      	neglt	r1, r1
 80126e0:	232d      	movlt	r3, #45	@ 0x2d
 80126e2:	232b      	movge	r3, #43	@ 0x2b
 80126e4:	2909      	cmp	r1, #9
 80126e6:	7002      	strb	r2, [r0, #0]
 80126e8:	7043      	strb	r3, [r0, #1]
 80126ea:	dd29      	ble.n	8012740 <__exponent+0x68>
 80126ec:	f10d 0307 	add.w	r3, sp, #7
 80126f0:	461d      	mov	r5, r3
 80126f2:	270a      	movs	r7, #10
 80126f4:	461a      	mov	r2, r3
 80126f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80126fa:	fb07 1416 	mls	r4, r7, r6, r1
 80126fe:	3430      	adds	r4, #48	@ 0x30
 8012700:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012704:	460c      	mov	r4, r1
 8012706:	2c63      	cmp	r4, #99	@ 0x63
 8012708:	f103 33ff 	add.w	r3, r3, #4294967295
 801270c:	4631      	mov	r1, r6
 801270e:	dcf1      	bgt.n	80126f4 <__exponent+0x1c>
 8012710:	3130      	adds	r1, #48	@ 0x30
 8012712:	1e94      	subs	r4, r2, #2
 8012714:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012718:	1c41      	adds	r1, r0, #1
 801271a:	4623      	mov	r3, r4
 801271c:	42ab      	cmp	r3, r5
 801271e:	d30a      	bcc.n	8012736 <__exponent+0x5e>
 8012720:	f10d 0309 	add.w	r3, sp, #9
 8012724:	1a9b      	subs	r3, r3, r2
 8012726:	42ac      	cmp	r4, r5
 8012728:	bf88      	it	hi
 801272a:	2300      	movhi	r3, #0
 801272c:	3302      	adds	r3, #2
 801272e:	4403      	add	r3, r0
 8012730:	1a18      	subs	r0, r3, r0
 8012732:	b003      	add	sp, #12
 8012734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012736:	f813 6b01 	ldrb.w	r6, [r3], #1
 801273a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801273e:	e7ed      	b.n	801271c <__exponent+0x44>
 8012740:	2330      	movs	r3, #48	@ 0x30
 8012742:	3130      	adds	r1, #48	@ 0x30
 8012744:	7083      	strb	r3, [r0, #2]
 8012746:	70c1      	strb	r1, [r0, #3]
 8012748:	1d03      	adds	r3, r0, #4
 801274a:	e7f1      	b.n	8012730 <__exponent+0x58>
 801274c:	0000      	movs	r0, r0
	...

08012750 <_printf_float>:
 8012750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012754:	b08d      	sub	sp, #52	@ 0x34
 8012756:	460c      	mov	r4, r1
 8012758:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801275c:	4616      	mov	r6, r2
 801275e:	461f      	mov	r7, r3
 8012760:	4605      	mov	r5, r0
 8012762:	f000 fccb 	bl	80130fc <_localeconv_r>
 8012766:	f8d0 b000 	ldr.w	fp, [r0]
 801276a:	4658      	mov	r0, fp
 801276c:	f7ed fe08 	bl	8000380 <strlen>
 8012770:	2300      	movs	r3, #0
 8012772:	930a      	str	r3, [sp, #40]	@ 0x28
 8012774:	f8d8 3000 	ldr.w	r3, [r8]
 8012778:	f894 9018 	ldrb.w	r9, [r4, #24]
 801277c:	6822      	ldr	r2, [r4, #0]
 801277e:	9005      	str	r0, [sp, #20]
 8012780:	3307      	adds	r3, #7
 8012782:	f023 0307 	bic.w	r3, r3, #7
 8012786:	f103 0108 	add.w	r1, r3, #8
 801278a:	f8c8 1000 	str.w	r1, [r8]
 801278e:	ed93 0b00 	vldr	d0, [r3]
 8012792:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80129f0 <_printf_float+0x2a0>
 8012796:	eeb0 7bc0 	vabs.f64	d7, d0
 801279a:	eeb4 7b46 	vcmp.f64	d7, d6
 801279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80127a6:	dd24      	ble.n	80127f2 <_printf_float+0xa2>
 80127a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80127ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b0:	d502      	bpl.n	80127b8 <_printf_float+0x68>
 80127b2:	232d      	movs	r3, #45	@ 0x2d
 80127b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127b8:	498f      	ldr	r1, [pc, #572]	@ (80129f8 <_printf_float+0x2a8>)
 80127ba:	4b90      	ldr	r3, [pc, #576]	@ (80129fc <_printf_float+0x2ac>)
 80127bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80127c0:	bf94      	ite	ls
 80127c2:	4688      	movls	r8, r1
 80127c4:	4698      	movhi	r8, r3
 80127c6:	f022 0204 	bic.w	r2, r2, #4
 80127ca:	2303      	movs	r3, #3
 80127cc:	6123      	str	r3, [r4, #16]
 80127ce:	6022      	str	r2, [r4, #0]
 80127d0:	f04f 0a00 	mov.w	sl, #0
 80127d4:	9700      	str	r7, [sp, #0]
 80127d6:	4633      	mov	r3, r6
 80127d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80127da:	4621      	mov	r1, r4
 80127dc:	4628      	mov	r0, r5
 80127de:	f000 f9d1 	bl	8012b84 <_printf_common>
 80127e2:	3001      	adds	r0, #1
 80127e4:	f040 8089 	bne.w	80128fa <_printf_float+0x1aa>
 80127e8:	f04f 30ff 	mov.w	r0, #4294967295
 80127ec:	b00d      	add	sp, #52	@ 0x34
 80127ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80127f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fa:	d709      	bvc.n	8012810 <_printf_float+0xc0>
 80127fc:	ee10 3a90 	vmov	r3, s1
 8012800:	2b00      	cmp	r3, #0
 8012802:	bfbc      	itt	lt
 8012804:	232d      	movlt	r3, #45	@ 0x2d
 8012806:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801280a:	497d      	ldr	r1, [pc, #500]	@ (8012a00 <_printf_float+0x2b0>)
 801280c:	4b7d      	ldr	r3, [pc, #500]	@ (8012a04 <_printf_float+0x2b4>)
 801280e:	e7d5      	b.n	80127bc <_printf_float+0x6c>
 8012810:	6863      	ldr	r3, [r4, #4]
 8012812:	1c59      	adds	r1, r3, #1
 8012814:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012818:	d139      	bne.n	801288e <_printf_float+0x13e>
 801281a:	2306      	movs	r3, #6
 801281c:	6063      	str	r3, [r4, #4]
 801281e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012822:	2300      	movs	r3, #0
 8012824:	6022      	str	r2, [r4, #0]
 8012826:	9303      	str	r3, [sp, #12]
 8012828:	ab0a      	add	r3, sp, #40	@ 0x28
 801282a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801282e:	ab09      	add	r3, sp, #36	@ 0x24
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	6861      	ldr	r1, [r4, #4]
 8012834:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012838:	4628      	mov	r0, r5
 801283a:	f7ff fef9 	bl	8012630 <__cvt>
 801283e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012842:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012844:	4680      	mov	r8, r0
 8012846:	d129      	bne.n	801289c <_printf_float+0x14c>
 8012848:	1cc8      	adds	r0, r1, #3
 801284a:	db02      	blt.n	8012852 <_printf_float+0x102>
 801284c:	6863      	ldr	r3, [r4, #4]
 801284e:	4299      	cmp	r1, r3
 8012850:	dd41      	ble.n	80128d6 <_printf_float+0x186>
 8012852:	f1a9 0902 	sub.w	r9, r9, #2
 8012856:	fa5f f989 	uxtb.w	r9, r9
 801285a:	3901      	subs	r1, #1
 801285c:	464a      	mov	r2, r9
 801285e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012862:	9109      	str	r1, [sp, #36]	@ 0x24
 8012864:	f7ff ff38 	bl	80126d8 <__exponent>
 8012868:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801286a:	1813      	adds	r3, r2, r0
 801286c:	2a01      	cmp	r2, #1
 801286e:	4682      	mov	sl, r0
 8012870:	6123      	str	r3, [r4, #16]
 8012872:	dc02      	bgt.n	801287a <_printf_float+0x12a>
 8012874:	6822      	ldr	r2, [r4, #0]
 8012876:	07d2      	lsls	r2, r2, #31
 8012878:	d501      	bpl.n	801287e <_printf_float+0x12e>
 801287a:	3301      	adds	r3, #1
 801287c:	6123      	str	r3, [r4, #16]
 801287e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012882:	2b00      	cmp	r3, #0
 8012884:	d0a6      	beq.n	80127d4 <_printf_float+0x84>
 8012886:	232d      	movs	r3, #45	@ 0x2d
 8012888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801288c:	e7a2      	b.n	80127d4 <_printf_float+0x84>
 801288e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012892:	d1c4      	bne.n	801281e <_printf_float+0xce>
 8012894:	2b00      	cmp	r3, #0
 8012896:	d1c2      	bne.n	801281e <_printf_float+0xce>
 8012898:	2301      	movs	r3, #1
 801289a:	e7bf      	b.n	801281c <_printf_float+0xcc>
 801289c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80128a0:	d9db      	bls.n	801285a <_printf_float+0x10a>
 80128a2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80128a6:	d118      	bne.n	80128da <_printf_float+0x18a>
 80128a8:	2900      	cmp	r1, #0
 80128aa:	6863      	ldr	r3, [r4, #4]
 80128ac:	dd0b      	ble.n	80128c6 <_printf_float+0x176>
 80128ae:	6121      	str	r1, [r4, #16]
 80128b0:	b913      	cbnz	r3, 80128b8 <_printf_float+0x168>
 80128b2:	6822      	ldr	r2, [r4, #0]
 80128b4:	07d0      	lsls	r0, r2, #31
 80128b6:	d502      	bpl.n	80128be <_printf_float+0x16e>
 80128b8:	3301      	adds	r3, #1
 80128ba:	440b      	add	r3, r1
 80128bc:	6123      	str	r3, [r4, #16]
 80128be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80128c0:	f04f 0a00 	mov.w	sl, #0
 80128c4:	e7db      	b.n	801287e <_printf_float+0x12e>
 80128c6:	b913      	cbnz	r3, 80128ce <_printf_float+0x17e>
 80128c8:	6822      	ldr	r2, [r4, #0]
 80128ca:	07d2      	lsls	r2, r2, #31
 80128cc:	d501      	bpl.n	80128d2 <_printf_float+0x182>
 80128ce:	3302      	adds	r3, #2
 80128d0:	e7f4      	b.n	80128bc <_printf_float+0x16c>
 80128d2:	2301      	movs	r3, #1
 80128d4:	e7f2      	b.n	80128bc <_printf_float+0x16c>
 80128d6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80128da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128dc:	4299      	cmp	r1, r3
 80128de:	db05      	blt.n	80128ec <_printf_float+0x19c>
 80128e0:	6823      	ldr	r3, [r4, #0]
 80128e2:	6121      	str	r1, [r4, #16]
 80128e4:	07d8      	lsls	r0, r3, #31
 80128e6:	d5ea      	bpl.n	80128be <_printf_float+0x16e>
 80128e8:	1c4b      	adds	r3, r1, #1
 80128ea:	e7e7      	b.n	80128bc <_printf_float+0x16c>
 80128ec:	2900      	cmp	r1, #0
 80128ee:	bfd4      	ite	le
 80128f0:	f1c1 0202 	rsble	r2, r1, #2
 80128f4:	2201      	movgt	r2, #1
 80128f6:	4413      	add	r3, r2
 80128f8:	e7e0      	b.n	80128bc <_printf_float+0x16c>
 80128fa:	6823      	ldr	r3, [r4, #0]
 80128fc:	055a      	lsls	r2, r3, #21
 80128fe:	d407      	bmi.n	8012910 <_printf_float+0x1c0>
 8012900:	6923      	ldr	r3, [r4, #16]
 8012902:	4642      	mov	r2, r8
 8012904:	4631      	mov	r1, r6
 8012906:	4628      	mov	r0, r5
 8012908:	47b8      	blx	r7
 801290a:	3001      	adds	r0, #1
 801290c:	d12a      	bne.n	8012964 <_printf_float+0x214>
 801290e:	e76b      	b.n	80127e8 <_printf_float+0x98>
 8012910:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012914:	f240 80e0 	bls.w	8012ad8 <_printf_float+0x388>
 8012918:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801291c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012924:	d133      	bne.n	801298e <_printf_float+0x23e>
 8012926:	4a38      	ldr	r2, [pc, #224]	@ (8012a08 <_printf_float+0x2b8>)
 8012928:	2301      	movs	r3, #1
 801292a:	4631      	mov	r1, r6
 801292c:	4628      	mov	r0, r5
 801292e:	47b8      	blx	r7
 8012930:	3001      	adds	r0, #1
 8012932:	f43f af59 	beq.w	80127e8 <_printf_float+0x98>
 8012936:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801293a:	4543      	cmp	r3, r8
 801293c:	db02      	blt.n	8012944 <_printf_float+0x1f4>
 801293e:	6823      	ldr	r3, [r4, #0]
 8012940:	07d8      	lsls	r0, r3, #31
 8012942:	d50f      	bpl.n	8012964 <_printf_float+0x214>
 8012944:	9b05      	ldr	r3, [sp, #20]
 8012946:	465a      	mov	r2, fp
 8012948:	4631      	mov	r1, r6
 801294a:	4628      	mov	r0, r5
 801294c:	47b8      	blx	r7
 801294e:	3001      	adds	r0, #1
 8012950:	f43f af4a 	beq.w	80127e8 <_printf_float+0x98>
 8012954:	f04f 0900 	mov.w	r9, #0
 8012958:	f108 38ff 	add.w	r8, r8, #4294967295
 801295c:	f104 0a1a 	add.w	sl, r4, #26
 8012960:	45c8      	cmp	r8, r9
 8012962:	dc09      	bgt.n	8012978 <_printf_float+0x228>
 8012964:	6823      	ldr	r3, [r4, #0]
 8012966:	079b      	lsls	r3, r3, #30
 8012968:	f100 8107 	bmi.w	8012b7a <_printf_float+0x42a>
 801296c:	68e0      	ldr	r0, [r4, #12]
 801296e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012970:	4298      	cmp	r0, r3
 8012972:	bfb8      	it	lt
 8012974:	4618      	movlt	r0, r3
 8012976:	e739      	b.n	80127ec <_printf_float+0x9c>
 8012978:	2301      	movs	r3, #1
 801297a:	4652      	mov	r2, sl
 801297c:	4631      	mov	r1, r6
 801297e:	4628      	mov	r0, r5
 8012980:	47b8      	blx	r7
 8012982:	3001      	adds	r0, #1
 8012984:	f43f af30 	beq.w	80127e8 <_printf_float+0x98>
 8012988:	f109 0901 	add.w	r9, r9, #1
 801298c:	e7e8      	b.n	8012960 <_printf_float+0x210>
 801298e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012990:	2b00      	cmp	r3, #0
 8012992:	dc3b      	bgt.n	8012a0c <_printf_float+0x2bc>
 8012994:	4a1c      	ldr	r2, [pc, #112]	@ (8012a08 <_printf_float+0x2b8>)
 8012996:	2301      	movs	r3, #1
 8012998:	4631      	mov	r1, r6
 801299a:	4628      	mov	r0, r5
 801299c:	47b8      	blx	r7
 801299e:	3001      	adds	r0, #1
 80129a0:	f43f af22 	beq.w	80127e8 <_printf_float+0x98>
 80129a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80129a8:	ea59 0303 	orrs.w	r3, r9, r3
 80129ac:	d102      	bne.n	80129b4 <_printf_float+0x264>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	07d9      	lsls	r1, r3, #31
 80129b2:	d5d7      	bpl.n	8012964 <_printf_float+0x214>
 80129b4:	9b05      	ldr	r3, [sp, #20]
 80129b6:	465a      	mov	r2, fp
 80129b8:	4631      	mov	r1, r6
 80129ba:	4628      	mov	r0, r5
 80129bc:	47b8      	blx	r7
 80129be:	3001      	adds	r0, #1
 80129c0:	f43f af12 	beq.w	80127e8 <_printf_float+0x98>
 80129c4:	f04f 0a00 	mov.w	sl, #0
 80129c8:	f104 0b1a 	add.w	fp, r4, #26
 80129cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129ce:	425b      	negs	r3, r3
 80129d0:	4553      	cmp	r3, sl
 80129d2:	dc01      	bgt.n	80129d8 <_printf_float+0x288>
 80129d4:	464b      	mov	r3, r9
 80129d6:	e794      	b.n	8012902 <_printf_float+0x1b2>
 80129d8:	2301      	movs	r3, #1
 80129da:	465a      	mov	r2, fp
 80129dc:	4631      	mov	r1, r6
 80129de:	4628      	mov	r0, r5
 80129e0:	47b8      	blx	r7
 80129e2:	3001      	adds	r0, #1
 80129e4:	f43f af00 	beq.w	80127e8 <_printf_float+0x98>
 80129e8:	f10a 0a01 	add.w	sl, sl, #1
 80129ec:	e7ee      	b.n	80129cc <_printf_float+0x27c>
 80129ee:	bf00      	nop
 80129f0:	ffffffff 	.word	0xffffffff
 80129f4:	7fefffff 	.word	0x7fefffff
 80129f8:	08016150 	.word	0x08016150
 80129fc:	08016154 	.word	0x08016154
 8012a00:	08016158 	.word	0x08016158
 8012a04:	0801615c 	.word	0x0801615c
 8012a08:	08016160 	.word	0x08016160
 8012a0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012a0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a12:	4553      	cmp	r3, sl
 8012a14:	bfa8      	it	ge
 8012a16:	4653      	movge	r3, sl
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	4699      	mov	r9, r3
 8012a1c:	dc37      	bgt.n	8012a8e <_printf_float+0x33e>
 8012a1e:	2300      	movs	r3, #0
 8012a20:	9307      	str	r3, [sp, #28]
 8012a22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a26:	f104 021a 	add.w	r2, r4, #26
 8012a2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012a2c:	9907      	ldr	r1, [sp, #28]
 8012a2e:	9306      	str	r3, [sp, #24]
 8012a30:	eba3 0309 	sub.w	r3, r3, r9
 8012a34:	428b      	cmp	r3, r1
 8012a36:	dc31      	bgt.n	8012a9c <_printf_float+0x34c>
 8012a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a3a:	459a      	cmp	sl, r3
 8012a3c:	dc3b      	bgt.n	8012ab6 <_printf_float+0x366>
 8012a3e:	6823      	ldr	r3, [r4, #0]
 8012a40:	07da      	lsls	r2, r3, #31
 8012a42:	d438      	bmi.n	8012ab6 <_printf_float+0x366>
 8012a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a46:	ebaa 0903 	sub.w	r9, sl, r3
 8012a4a:	9b06      	ldr	r3, [sp, #24]
 8012a4c:	ebaa 0303 	sub.w	r3, sl, r3
 8012a50:	4599      	cmp	r9, r3
 8012a52:	bfa8      	it	ge
 8012a54:	4699      	movge	r9, r3
 8012a56:	f1b9 0f00 	cmp.w	r9, #0
 8012a5a:	dc34      	bgt.n	8012ac6 <_printf_float+0x376>
 8012a5c:	f04f 0800 	mov.w	r8, #0
 8012a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a64:	f104 0b1a 	add.w	fp, r4, #26
 8012a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a6a:	ebaa 0303 	sub.w	r3, sl, r3
 8012a6e:	eba3 0309 	sub.w	r3, r3, r9
 8012a72:	4543      	cmp	r3, r8
 8012a74:	f77f af76 	ble.w	8012964 <_printf_float+0x214>
 8012a78:	2301      	movs	r3, #1
 8012a7a:	465a      	mov	r2, fp
 8012a7c:	4631      	mov	r1, r6
 8012a7e:	4628      	mov	r0, r5
 8012a80:	47b8      	blx	r7
 8012a82:	3001      	adds	r0, #1
 8012a84:	f43f aeb0 	beq.w	80127e8 <_printf_float+0x98>
 8012a88:	f108 0801 	add.w	r8, r8, #1
 8012a8c:	e7ec      	b.n	8012a68 <_printf_float+0x318>
 8012a8e:	4642      	mov	r2, r8
 8012a90:	4631      	mov	r1, r6
 8012a92:	4628      	mov	r0, r5
 8012a94:	47b8      	blx	r7
 8012a96:	3001      	adds	r0, #1
 8012a98:	d1c1      	bne.n	8012a1e <_printf_float+0x2ce>
 8012a9a:	e6a5      	b.n	80127e8 <_printf_float+0x98>
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	4631      	mov	r1, r6
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	9206      	str	r2, [sp, #24]
 8012aa4:	47b8      	blx	r7
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	f43f ae9e 	beq.w	80127e8 <_printf_float+0x98>
 8012aac:	9b07      	ldr	r3, [sp, #28]
 8012aae:	9a06      	ldr	r2, [sp, #24]
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	9307      	str	r3, [sp, #28]
 8012ab4:	e7b9      	b.n	8012a2a <_printf_float+0x2da>
 8012ab6:	9b05      	ldr	r3, [sp, #20]
 8012ab8:	465a      	mov	r2, fp
 8012aba:	4631      	mov	r1, r6
 8012abc:	4628      	mov	r0, r5
 8012abe:	47b8      	blx	r7
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	d1bf      	bne.n	8012a44 <_printf_float+0x2f4>
 8012ac4:	e690      	b.n	80127e8 <_printf_float+0x98>
 8012ac6:	9a06      	ldr	r2, [sp, #24]
 8012ac8:	464b      	mov	r3, r9
 8012aca:	4442      	add	r2, r8
 8012acc:	4631      	mov	r1, r6
 8012ace:	4628      	mov	r0, r5
 8012ad0:	47b8      	blx	r7
 8012ad2:	3001      	adds	r0, #1
 8012ad4:	d1c2      	bne.n	8012a5c <_printf_float+0x30c>
 8012ad6:	e687      	b.n	80127e8 <_printf_float+0x98>
 8012ad8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012adc:	f1b9 0f01 	cmp.w	r9, #1
 8012ae0:	dc01      	bgt.n	8012ae6 <_printf_float+0x396>
 8012ae2:	07db      	lsls	r3, r3, #31
 8012ae4:	d536      	bpl.n	8012b54 <_printf_float+0x404>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	4642      	mov	r2, r8
 8012aea:	4631      	mov	r1, r6
 8012aec:	4628      	mov	r0, r5
 8012aee:	47b8      	blx	r7
 8012af0:	3001      	adds	r0, #1
 8012af2:	f43f ae79 	beq.w	80127e8 <_printf_float+0x98>
 8012af6:	9b05      	ldr	r3, [sp, #20]
 8012af8:	465a      	mov	r2, fp
 8012afa:	4631      	mov	r1, r6
 8012afc:	4628      	mov	r0, r5
 8012afe:	47b8      	blx	r7
 8012b00:	3001      	adds	r0, #1
 8012b02:	f43f ae71 	beq.w	80127e8 <_printf_float+0x98>
 8012b06:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012b0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b12:	f109 39ff 	add.w	r9, r9, #4294967295
 8012b16:	d018      	beq.n	8012b4a <_printf_float+0x3fa>
 8012b18:	464b      	mov	r3, r9
 8012b1a:	f108 0201 	add.w	r2, r8, #1
 8012b1e:	4631      	mov	r1, r6
 8012b20:	4628      	mov	r0, r5
 8012b22:	47b8      	blx	r7
 8012b24:	3001      	adds	r0, #1
 8012b26:	d10c      	bne.n	8012b42 <_printf_float+0x3f2>
 8012b28:	e65e      	b.n	80127e8 <_printf_float+0x98>
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	465a      	mov	r2, fp
 8012b2e:	4631      	mov	r1, r6
 8012b30:	4628      	mov	r0, r5
 8012b32:	47b8      	blx	r7
 8012b34:	3001      	adds	r0, #1
 8012b36:	f43f ae57 	beq.w	80127e8 <_printf_float+0x98>
 8012b3a:	f108 0801 	add.w	r8, r8, #1
 8012b3e:	45c8      	cmp	r8, r9
 8012b40:	dbf3      	blt.n	8012b2a <_printf_float+0x3da>
 8012b42:	4653      	mov	r3, sl
 8012b44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012b48:	e6dc      	b.n	8012904 <_printf_float+0x1b4>
 8012b4a:	f04f 0800 	mov.w	r8, #0
 8012b4e:	f104 0b1a 	add.w	fp, r4, #26
 8012b52:	e7f4      	b.n	8012b3e <_printf_float+0x3ee>
 8012b54:	2301      	movs	r3, #1
 8012b56:	4642      	mov	r2, r8
 8012b58:	e7e1      	b.n	8012b1e <_printf_float+0x3ce>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	464a      	mov	r2, r9
 8012b5e:	4631      	mov	r1, r6
 8012b60:	4628      	mov	r0, r5
 8012b62:	47b8      	blx	r7
 8012b64:	3001      	adds	r0, #1
 8012b66:	f43f ae3f 	beq.w	80127e8 <_printf_float+0x98>
 8012b6a:	f108 0801 	add.w	r8, r8, #1
 8012b6e:	68e3      	ldr	r3, [r4, #12]
 8012b70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b72:	1a5b      	subs	r3, r3, r1
 8012b74:	4543      	cmp	r3, r8
 8012b76:	dcf0      	bgt.n	8012b5a <_printf_float+0x40a>
 8012b78:	e6f8      	b.n	801296c <_printf_float+0x21c>
 8012b7a:	f04f 0800 	mov.w	r8, #0
 8012b7e:	f104 0919 	add.w	r9, r4, #25
 8012b82:	e7f4      	b.n	8012b6e <_printf_float+0x41e>

08012b84 <_printf_common>:
 8012b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b88:	4616      	mov	r6, r2
 8012b8a:	4698      	mov	r8, r3
 8012b8c:	688a      	ldr	r2, [r1, #8]
 8012b8e:	690b      	ldr	r3, [r1, #16]
 8012b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b94:	4293      	cmp	r3, r2
 8012b96:	bfb8      	it	lt
 8012b98:	4613      	movlt	r3, r2
 8012b9a:	6033      	str	r3, [r6, #0]
 8012b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012ba0:	4607      	mov	r7, r0
 8012ba2:	460c      	mov	r4, r1
 8012ba4:	b10a      	cbz	r2, 8012baa <_printf_common+0x26>
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	6033      	str	r3, [r6, #0]
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	0699      	lsls	r1, r3, #26
 8012bae:	bf42      	ittt	mi
 8012bb0:	6833      	ldrmi	r3, [r6, #0]
 8012bb2:	3302      	addmi	r3, #2
 8012bb4:	6033      	strmi	r3, [r6, #0]
 8012bb6:	6825      	ldr	r5, [r4, #0]
 8012bb8:	f015 0506 	ands.w	r5, r5, #6
 8012bbc:	d106      	bne.n	8012bcc <_printf_common+0x48>
 8012bbe:	f104 0a19 	add.w	sl, r4, #25
 8012bc2:	68e3      	ldr	r3, [r4, #12]
 8012bc4:	6832      	ldr	r2, [r6, #0]
 8012bc6:	1a9b      	subs	r3, r3, r2
 8012bc8:	42ab      	cmp	r3, r5
 8012bca:	dc26      	bgt.n	8012c1a <_printf_common+0x96>
 8012bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012bd0:	6822      	ldr	r2, [r4, #0]
 8012bd2:	3b00      	subs	r3, #0
 8012bd4:	bf18      	it	ne
 8012bd6:	2301      	movne	r3, #1
 8012bd8:	0692      	lsls	r2, r2, #26
 8012bda:	d42b      	bmi.n	8012c34 <_printf_common+0xb0>
 8012bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012be0:	4641      	mov	r1, r8
 8012be2:	4638      	mov	r0, r7
 8012be4:	47c8      	blx	r9
 8012be6:	3001      	adds	r0, #1
 8012be8:	d01e      	beq.n	8012c28 <_printf_common+0xa4>
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	6922      	ldr	r2, [r4, #16]
 8012bee:	f003 0306 	and.w	r3, r3, #6
 8012bf2:	2b04      	cmp	r3, #4
 8012bf4:	bf02      	ittt	eq
 8012bf6:	68e5      	ldreq	r5, [r4, #12]
 8012bf8:	6833      	ldreq	r3, [r6, #0]
 8012bfa:	1aed      	subeq	r5, r5, r3
 8012bfc:	68a3      	ldr	r3, [r4, #8]
 8012bfe:	bf0c      	ite	eq
 8012c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c04:	2500      	movne	r5, #0
 8012c06:	4293      	cmp	r3, r2
 8012c08:	bfc4      	itt	gt
 8012c0a:	1a9b      	subgt	r3, r3, r2
 8012c0c:	18ed      	addgt	r5, r5, r3
 8012c0e:	2600      	movs	r6, #0
 8012c10:	341a      	adds	r4, #26
 8012c12:	42b5      	cmp	r5, r6
 8012c14:	d11a      	bne.n	8012c4c <_printf_common+0xc8>
 8012c16:	2000      	movs	r0, #0
 8012c18:	e008      	b.n	8012c2c <_printf_common+0xa8>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	4652      	mov	r2, sl
 8012c1e:	4641      	mov	r1, r8
 8012c20:	4638      	mov	r0, r7
 8012c22:	47c8      	blx	r9
 8012c24:	3001      	adds	r0, #1
 8012c26:	d103      	bne.n	8012c30 <_printf_common+0xac>
 8012c28:	f04f 30ff 	mov.w	r0, #4294967295
 8012c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c30:	3501      	adds	r5, #1
 8012c32:	e7c6      	b.n	8012bc2 <_printf_common+0x3e>
 8012c34:	18e1      	adds	r1, r4, r3
 8012c36:	1c5a      	adds	r2, r3, #1
 8012c38:	2030      	movs	r0, #48	@ 0x30
 8012c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012c3e:	4422      	add	r2, r4
 8012c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012c44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012c48:	3302      	adds	r3, #2
 8012c4a:	e7c7      	b.n	8012bdc <_printf_common+0x58>
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	4622      	mov	r2, r4
 8012c50:	4641      	mov	r1, r8
 8012c52:	4638      	mov	r0, r7
 8012c54:	47c8      	blx	r9
 8012c56:	3001      	adds	r0, #1
 8012c58:	d0e6      	beq.n	8012c28 <_printf_common+0xa4>
 8012c5a:	3601      	adds	r6, #1
 8012c5c:	e7d9      	b.n	8012c12 <_printf_common+0x8e>
	...

08012c60 <_printf_i>:
 8012c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c64:	7e0f      	ldrb	r7, [r1, #24]
 8012c66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012c68:	2f78      	cmp	r7, #120	@ 0x78
 8012c6a:	4691      	mov	r9, r2
 8012c6c:	4680      	mov	r8, r0
 8012c6e:	460c      	mov	r4, r1
 8012c70:	469a      	mov	sl, r3
 8012c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012c76:	d807      	bhi.n	8012c88 <_printf_i+0x28>
 8012c78:	2f62      	cmp	r7, #98	@ 0x62
 8012c7a:	d80a      	bhi.n	8012c92 <_printf_i+0x32>
 8012c7c:	2f00      	cmp	r7, #0
 8012c7e:	f000 80d2 	beq.w	8012e26 <_printf_i+0x1c6>
 8012c82:	2f58      	cmp	r7, #88	@ 0x58
 8012c84:	f000 80b9 	beq.w	8012dfa <_printf_i+0x19a>
 8012c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c90:	e03a      	b.n	8012d08 <_printf_i+0xa8>
 8012c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c96:	2b15      	cmp	r3, #21
 8012c98:	d8f6      	bhi.n	8012c88 <_printf_i+0x28>
 8012c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8012ca0 <_printf_i+0x40>)
 8012c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ca0:	08012cf9 	.word	0x08012cf9
 8012ca4:	08012d0d 	.word	0x08012d0d
 8012ca8:	08012c89 	.word	0x08012c89
 8012cac:	08012c89 	.word	0x08012c89
 8012cb0:	08012c89 	.word	0x08012c89
 8012cb4:	08012c89 	.word	0x08012c89
 8012cb8:	08012d0d 	.word	0x08012d0d
 8012cbc:	08012c89 	.word	0x08012c89
 8012cc0:	08012c89 	.word	0x08012c89
 8012cc4:	08012c89 	.word	0x08012c89
 8012cc8:	08012c89 	.word	0x08012c89
 8012ccc:	08012e0d 	.word	0x08012e0d
 8012cd0:	08012d37 	.word	0x08012d37
 8012cd4:	08012dc7 	.word	0x08012dc7
 8012cd8:	08012c89 	.word	0x08012c89
 8012cdc:	08012c89 	.word	0x08012c89
 8012ce0:	08012e2f 	.word	0x08012e2f
 8012ce4:	08012c89 	.word	0x08012c89
 8012ce8:	08012d37 	.word	0x08012d37
 8012cec:	08012c89 	.word	0x08012c89
 8012cf0:	08012c89 	.word	0x08012c89
 8012cf4:	08012dcf 	.word	0x08012dcf
 8012cf8:	6833      	ldr	r3, [r6, #0]
 8012cfa:	1d1a      	adds	r2, r3, #4
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6032      	str	r2, [r6, #0]
 8012d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d08:	2301      	movs	r3, #1
 8012d0a:	e09d      	b.n	8012e48 <_printf_i+0x1e8>
 8012d0c:	6833      	ldr	r3, [r6, #0]
 8012d0e:	6820      	ldr	r0, [r4, #0]
 8012d10:	1d19      	adds	r1, r3, #4
 8012d12:	6031      	str	r1, [r6, #0]
 8012d14:	0606      	lsls	r6, r0, #24
 8012d16:	d501      	bpl.n	8012d1c <_printf_i+0xbc>
 8012d18:	681d      	ldr	r5, [r3, #0]
 8012d1a:	e003      	b.n	8012d24 <_printf_i+0xc4>
 8012d1c:	0645      	lsls	r5, r0, #25
 8012d1e:	d5fb      	bpl.n	8012d18 <_printf_i+0xb8>
 8012d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d24:	2d00      	cmp	r5, #0
 8012d26:	da03      	bge.n	8012d30 <_printf_i+0xd0>
 8012d28:	232d      	movs	r3, #45	@ 0x2d
 8012d2a:	426d      	negs	r5, r5
 8012d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d30:	4859      	ldr	r0, [pc, #356]	@ (8012e98 <_printf_i+0x238>)
 8012d32:	230a      	movs	r3, #10
 8012d34:	e011      	b.n	8012d5a <_printf_i+0xfa>
 8012d36:	6821      	ldr	r1, [r4, #0]
 8012d38:	6833      	ldr	r3, [r6, #0]
 8012d3a:	0608      	lsls	r0, r1, #24
 8012d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d40:	d402      	bmi.n	8012d48 <_printf_i+0xe8>
 8012d42:	0649      	lsls	r1, r1, #25
 8012d44:	bf48      	it	mi
 8012d46:	b2ad      	uxthmi	r5, r5
 8012d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8012d4a:	4853      	ldr	r0, [pc, #332]	@ (8012e98 <_printf_i+0x238>)
 8012d4c:	6033      	str	r3, [r6, #0]
 8012d4e:	bf14      	ite	ne
 8012d50:	230a      	movne	r3, #10
 8012d52:	2308      	moveq	r3, #8
 8012d54:	2100      	movs	r1, #0
 8012d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012d5a:	6866      	ldr	r6, [r4, #4]
 8012d5c:	60a6      	str	r6, [r4, #8]
 8012d5e:	2e00      	cmp	r6, #0
 8012d60:	bfa2      	ittt	ge
 8012d62:	6821      	ldrge	r1, [r4, #0]
 8012d64:	f021 0104 	bicge.w	r1, r1, #4
 8012d68:	6021      	strge	r1, [r4, #0]
 8012d6a:	b90d      	cbnz	r5, 8012d70 <_printf_i+0x110>
 8012d6c:	2e00      	cmp	r6, #0
 8012d6e:	d04b      	beq.n	8012e08 <_printf_i+0x1a8>
 8012d70:	4616      	mov	r6, r2
 8012d72:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d76:	fb03 5711 	mls	r7, r3, r1, r5
 8012d7a:	5dc7      	ldrb	r7, [r0, r7]
 8012d7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d80:	462f      	mov	r7, r5
 8012d82:	42bb      	cmp	r3, r7
 8012d84:	460d      	mov	r5, r1
 8012d86:	d9f4      	bls.n	8012d72 <_printf_i+0x112>
 8012d88:	2b08      	cmp	r3, #8
 8012d8a:	d10b      	bne.n	8012da4 <_printf_i+0x144>
 8012d8c:	6823      	ldr	r3, [r4, #0]
 8012d8e:	07df      	lsls	r7, r3, #31
 8012d90:	d508      	bpl.n	8012da4 <_printf_i+0x144>
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	6861      	ldr	r1, [r4, #4]
 8012d96:	4299      	cmp	r1, r3
 8012d98:	bfde      	ittt	le
 8012d9a:	2330      	movle	r3, #48	@ 0x30
 8012d9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012da0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012da4:	1b92      	subs	r2, r2, r6
 8012da6:	6122      	str	r2, [r4, #16]
 8012da8:	f8cd a000 	str.w	sl, [sp]
 8012dac:	464b      	mov	r3, r9
 8012dae:	aa03      	add	r2, sp, #12
 8012db0:	4621      	mov	r1, r4
 8012db2:	4640      	mov	r0, r8
 8012db4:	f7ff fee6 	bl	8012b84 <_printf_common>
 8012db8:	3001      	adds	r0, #1
 8012dba:	d14a      	bne.n	8012e52 <_printf_i+0x1f2>
 8012dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc0:	b004      	add	sp, #16
 8012dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dc6:	6823      	ldr	r3, [r4, #0]
 8012dc8:	f043 0320 	orr.w	r3, r3, #32
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	4833      	ldr	r0, [pc, #204]	@ (8012e9c <_printf_i+0x23c>)
 8012dd0:	2778      	movs	r7, #120	@ 0x78
 8012dd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012dd6:	6823      	ldr	r3, [r4, #0]
 8012dd8:	6831      	ldr	r1, [r6, #0]
 8012dda:	061f      	lsls	r7, r3, #24
 8012ddc:	f851 5b04 	ldr.w	r5, [r1], #4
 8012de0:	d402      	bmi.n	8012de8 <_printf_i+0x188>
 8012de2:	065f      	lsls	r7, r3, #25
 8012de4:	bf48      	it	mi
 8012de6:	b2ad      	uxthmi	r5, r5
 8012de8:	6031      	str	r1, [r6, #0]
 8012dea:	07d9      	lsls	r1, r3, #31
 8012dec:	bf44      	itt	mi
 8012dee:	f043 0320 	orrmi.w	r3, r3, #32
 8012df2:	6023      	strmi	r3, [r4, #0]
 8012df4:	b11d      	cbz	r5, 8012dfe <_printf_i+0x19e>
 8012df6:	2310      	movs	r3, #16
 8012df8:	e7ac      	b.n	8012d54 <_printf_i+0xf4>
 8012dfa:	4827      	ldr	r0, [pc, #156]	@ (8012e98 <_printf_i+0x238>)
 8012dfc:	e7e9      	b.n	8012dd2 <_printf_i+0x172>
 8012dfe:	6823      	ldr	r3, [r4, #0]
 8012e00:	f023 0320 	bic.w	r3, r3, #32
 8012e04:	6023      	str	r3, [r4, #0]
 8012e06:	e7f6      	b.n	8012df6 <_printf_i+0x196>
 8012e08:	4616      	mov	r6, r2
 8012e0a:	e7bd      	b.n	8012d88 <_printf_i+0x128>
 8012e0c:	6833      	ldr	r3, [r6, #0]
 8012e0e:	6825      	ldr	r5, [r4, #0]
 8012e10:	6961      	ldr	r1, [r4, #20]
 8012e12:	1d18      	adds	r0, r3, #4
 8012e14:	6030      	str	r0, [r6, #0]
 8012e16:	062e      	lsls	r6, r5, #24
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	d501      	bpl.n	8012e20 <_printf_i+0x1c0>
 8012e1c:	6019      	str	r1, [r3, #0]
 8012e1e:	e002      	b.n	8012e26 <_printf_i+0x1c6>
 8012e20:	0668      	lsls	r0, r5, #25
 8012e22:	d5fb      	bpl.n	8012e1c <_printf_i+0x1bc>
 8012e24:	8019      	strh	r1, [r3, #0]
 8012e26:	2300      	movs	r3, #0
 8012e28:	6123      	str	r3, [r4, #16]
 8012e2a:	4616      	mov	r6, r2
 8012e2c:	e7bc      	b.n	8012da8 <_printf_i+0x148>
 8012e2e:	6833      	ldr	r3, [r6, #0]
 8012e30:	1d1a      	adds	r2, r3, #4
 8012e32:	6032      	str	r2, [r6, #0]
 8012e34:	681e      	ldr	r6, [r3, #0]
 8012e36:	6862      	ldr	r2, [r4, #4]
 8012e38:	2100      	movs	r1, #0
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f7ed fa50 	bl	80002e0 <memchr>
 8012e40:	b108      	cbz	r0, 8012e46 <_printf_i+0x1e6>
 8012e42:	1b80      	subs	r0, r0, r6
 8012e44:	6060      	str	r0, [r4, #4]
 8012e46:	6863      	ldr	r3, [r4, #4]
 8012e48:	6123      	str	r3, [r4, #16]
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e50:	e7aa      	b.n	8012da8 <_printf_i+0x148>
 8012e52:	6923      	ldr	r3, [r4, #16]
 8012e54:	4632      	mov	r2, r6
 8012e56:	4649      	mov	r1, r9
 8012e58:	4640      	mov	r0, r8
 8012e5a:	47d0      	blx	sl
 8012e5c:	3001      	adds	r0, #1
 8012e5e:	d0ad      	beq.n	8012dbc <_printf_i+0x15c>
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	079b      	lsls	r3, r3, #30
 8012e64:	d413      	bmi.n	8012e8e <_printf_i+0x22e>
 8012e66:	68e0      	ldr	r0, [r4, #12]
 8012e68:	9b03      	ldr	r3, [sp, #12]
 8012e6a:	4298      	cmp	r0, r3
 8012e6c:	bfb8      	it	lt
 8012e6e:	4618      	movlt	r0, r3
 8012e70:	e7a6      	b.n	8012dc0 <_printf_i+0x160>
 8012e72:	2301      	movs	r3, #1
 8012e74:	4632      	mov	r2, r6
 8012e76:	4649      	mov	r1, r9
 8012e78:	4640      	mov	r0, r8
 8012e7a:	47d0      	blx	sl
 8012e7c:	3001      	adds	r0, #1
 8012e7e:	d09d      	beq.n	8012dbc <_printf_i+0x15c>
 8012e80:	3501      	adds	r5, #1
 8012e82:	68e3      	ldr	r3, [r4, #12]
 8012e84:	9903      	ldr	r1, [sp, #12]
 8012e86:	1a5b      	subs	r3, r3, r1
 8012e88:	42ab      	cmp	r3, r5
 8012e8a:	dcf2      	bgt.n	8012e72 <_printf_i+0x212>
 8012e8c:	e7eb      	b.n	8012e66 <_printf_i+0x206>
 8012e8e:	2500      	movs	r5, #0
 8012e90:	f104 0619 	add.w	r6, r4, #25
 8012e94:	e7f5      	b.n	8012e82 <_printf_i+0x222>
 8012e96:	bf00      	nop
 8012e98:	08016162 	.word	0x08016162
 8012e9c:	08016173 	.word	0x08016173

08012ea0 <std>:
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	b510      	push	{r4, lr}
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8012eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012eae:	6083      	str	r3, [r0, #8]
 8012eb0:	8181      	strh	r1, [r0, #12]
 8012eb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8012eb4:	81c2      	strh	r2, [r0, #14]
 8012eb6:	6183      	str	r3, [r0, #24]
 8012eb8:	4619      	mov	r1, r3
 8012eba:	2208      	movs	r2, #8
 8012ebc:	305c      	adds	r0, #92	@ 0x5c
 8012ebe:	f000 f914 	bl	80130ea <memset>
 8012ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8012ef8 <std+0x58>)
 8012ec4:	6263      	str	r3, [r4, #36]	@ 0x24
 8012ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8012efc <std+0x5c>)
 8012ec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012eca:	4b0d      	ldr	r3, [pc, #52]	@ (8012f00 <std+0x60>)
 8012ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012ece:	4b0d      	ldr	r3, [pc, #52]	@ (8012f04 <std+0x64>)
 8012ed0:	6323      	str	r3, [r4, #48]	@ 0x30
 8012ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8012f08 <std+0x68>)
 8012ed4:	6224      	str	r4, [r4, #32]
 8012ed6:	429c      	cmp	r4, r3
 8012ed8:	d006      	beq.n	8012ee8 <std+0x48>
 8012eda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012ede:	4294      	cmp	r4, r2
 8012ee0:	d002      	beq.n	8012ee8 <std+0x48>
 8012ee2:	33d0      	adds	r3, #208	@ 0xd0
 8012ee4:	429c      	cmp	r4, r3
 8012ee6:	d105      	bne.n	8012ef4 <std+0x54>
 8012ee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ef0:	f000 b988 	b.w	8013204 <__retarget_lock_init_recursive>
 8012ef4:	bd10      	pop	{r4, pc}
 8012ef6:	bf00      	nop
 8012ef8:	08013065 	.word	0x08013065
 8012efc:	08013087 	.word	0x08013087
 8012f00:	080130bf 	.word	0x080130bf
 8012f04:	080130e3 	.word	0x080130e3
 8012f08:	24002344 	.word	0x24002344

08012f0c <stdio_exit_handler>:
 8012f0c:	4a02      	ldr	r2, [pc, #8]	@ (8012f18 <stdio_exit_handler+0xc>)
 8012f0e:	4903      	ldr	r1, [pc, #12]	@ (8012f1c <stdio_exit_handler+0x10>)
 8012f10:	4803      	ldr	r0, [pc, #12]	@ (8012f20 <stdio_exit_handler+0x14>)
 8012f12:	f000 b869 	b.w	8012fe8 <_fwalk_sglue>
 8012f16:	bf00      	nop
 8012f18:	24000108 	.word	0x24000108
 8012f1c:	0801491d 	.word	0x0801491d
 8012f20:	24000118 	.word	0x24000118

08012f24 <cleanup_stdio>:
 8012f24:	6841      	ldr	r1, [r0, #4]
 8012f26:	4b0c      	ldr	r3, [pc, #48]	@ (8012f58 <cleanup_stdio+0x34>)
 8012f28:	4299      	cmp	r1, r3
 8012f2a:	b510      	push	{r4, lr}
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	d001      	beq.n	8012f34 <cleanup_stdio+0x10>
 8012f30:	f001 fcf4 	bl	801491c <_fflush_r>
 8012f34:	68a1      	ldr	r1, [r4, #8]
 8012f36:	4b09      	ldr	r3, [pc, #36]	@ (8012f5c <cleanup_stdio+0x38>)
 8012f38:	4299      	cmp	r1, r3
 8012f3a:	d002      	beq.n	8012f42 <cleanup_stdio+0x1e>
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f001 fced 	bl	801491c <_fflush_r>
 8012f42:	68e1      	ldr	r1, [r4, #12]
 8012f44:	4b06      	ldr	r3, [pc, #24]	@ (8012f60 <cleanup_stdio+0x3c>)
 8012f46:	4299      	cmp	r1, r3
 8012f48:	d004      	beq.n	8012f54 <cleanup_stdio+0x30>
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f50:	f001 bce4 	b.w	801491c <_fflush_r>
 8012f54:	bd10      	pop	{r4, pc}
 8012f56:	bf00      	nop
 8012f58:	24002344 	.word	0x24002344
 8012f5c:	240023ac 	.word	0x240023ac
 8012f60:	24002414 	.word	0x24002414

08012f64 <global_stdio_init.part.0>:
 8012f64:	b510      	push	{r4, lr}
 8012f66:	4b0b      	ldr	r3, [pc, #44]	@ (8012f94 <global_stdio_init.part.0+0x30>)
 8012f68:	4c0b      	ldr	r4, [pc, #44]	@ (8012f98 <global_stdio_init.part.0+0x34>)
 8012f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8012f9c <global_stdio_init.part.0+0x38>)
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	4620      	mov	r0, r4
 8012f70:	2200      	movs	r2, #0
 8012f72:	2104      	movs	r1, #4
 8012f74:	f7ff ff94 	bl	8012ea0 <std>
 8012f78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	2109      	movs	r1, #9
 8012f80:	f7ff ff8e 	bl	8012ea0 <std>
 8012f84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012f88:	2202      	movs	r2, #2
 8012f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f8e:	2112      	movs	r1, #18
 8012f90:	f7ff bf86 	b.w	8012ea0 <std>
 8012f94:	2400247c 	.word	0x2400247c
 8012f98:	24002344 	.word	0x24002344
 8012f9c:	08012f0d 	.word	0x08012f0d

08012fa0 <__sfp_lock_acquire>:
 8012fa0:	4801      	ldr	r0, [pc, #4]	@ (8012fa8 <__sfp_lock_acquire+0x8>)
 8012fa2:	f000 b930 	b.w	8013206 <__retarget_lock_acquire_recursive>
 8012fa6:	bf00      	nop
 8012fa8:	24002485 	.word	0x24002485

08012fac <__sfp_lock_release>:
 8012fac:	4801      	ldr	r0, [pc, #4]	@ (8012fb4 <__sfp_lock_release+0x8>)
 8012fae:	f000 b92b 	b.w	8013208 <__retarget_lock_release_recursive>
 8012fb2:	bf00      	nop
 8012fb4:	24002485 	.word	0x24002485

08012fb8 <__sinit>:
 8012fb8:	b510      	push	{r4, lr}
 8012fba:	4604      	mov	r4, r0
 8012fbc:	f7ff fff0 	bl	8012fa0 <__sfp_lock_acquire>
 8012fc0:	6a23      	ldr	r3, [r4, #32]
 8012fc2:	b11b      	cbz	r3, 8012fcc <__sinit+0x14>
 8012fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fc8:	f7ff bff0 	b.w	8012fac <__sfp_lock_release>
 8012fcc:	4b04      	ldr	r3, [pc, #16]	@ (8012fe0 <__sinit+0x28>)
 8012fce:	6223      	str	r3, [r4, #32]
 8012fd0:	4b04      	ldr	r3, [pc, #16]	@ (8012fe4 <__sinit+0x2c>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1f5      	bne.n	8012fc4 <__sinit+0xc>
 8012fd8:	f7ff ffc4 	bl	8012f64 <global_stdio_init.part.0>
 8012fdc:	e7f2      	b.n	8012fc4 <__sinit+0xc>
 8012fde:	bf00      	nop
 8012fe0:	08012f25 	.word	0x08012f25
 8012fe4:	2400247c 	.word	0x2400247c

08012fe8 <_fwalk_sglue>:
 8012fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fec:	4607      	mov	r7, r0
 8012fee:	4688      	mov	r8, r1
 8012ff0:	4614      	mov	r4, r2
 8012ff2:	2600      	movs	r6, #0
 8012ff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ff8:	f1b9 0901 	subs.w	r9, r9, #1
 8012ffc:	d505      	bpl.n	801300a <_fwalk_sglue+0x22>
 8012ffe:	6824      	ldr	r4, [r4, #0]
 8013000:	2c00      	cmp	r4, #0
 8013002:	d1f7      	bne.n	8012ff4 <_fwalk_sglue+0xc>
 8013004:	4630      	mov	r0, r6
 8013006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801300a:	89ab      	ldrh	r3, [r5, #12]
 801300c:	2b01      	cmp	r3, #1
 801300e:	d907      	bls.n	8013020 <_fwalk_sglue+0x38>
 8013010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013014:	3301      	adds	r3, #1
 8013016:	d003      	beq.n	8013020 <_fwalk_sglue+0x38>
 8013018:	4629      	mov	r1, r5
 801301a:	4638      	mov	r0, r7
 801301c:	47c0      	blx	r8
 801301e:	4306      	orrs	r6, r0
 8013020:	3568      	adds	r5, #104	@ 0x68
 8013022:	e7e9      	b.n	8012ff8 <_fwalk_sglue+0x10>

08013024 <siprintf>:
 8013024:	b40e      	push	{r1, r2, r3}
 8013026:	b500      	push	{lr}
 8013028:	b09c      	sub	sp, #112	@ 0x70
 801302a:	ab1d      	add	r3, sp, #116	@ 0x74
 801302c:	9002      	str	r0, [sp, #8]
 801302e:	9006      	str	r0, [sp, #24]
 8013030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013034:	4809      	ldr	r0, [pc, #36]	@ (801305c <siprintf+0x38>)
 8013036:	9107      	str	r1, [sp, #28]
 8013038:	9104      	str	r1, [sp, #16]
 801303a:	4909      	ldr	r1, [pc, #36]	@ (8013060 <siprintf+0x3c>)
 801303c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013040:	9105      	str	r1, [sp, #20]
 8013042:	6800      	ldr	r0, [r0, #0]
 8013044:	9301      	str	r3, [sp, #4]
 8013046:	a902      	add	r1, sp, #8
 8013048:	f001 fae8 	bl	801461c <_svfiprintf_r>
 801304c:	9b02      	ldr	r3, [sp, #8]
 801304e:	2200      	movs	r2, #0
 8013050:	701a      	strb	r2, [r3, #0]
 8013052:	b01c      	add	sp, #112	@ 0x70
 8013054:	f85d eb04 	ldr.w	lr, [sp], #4
 8013058:	b003      	add	sp, #12
 801305a:	4770      	bx	lr
 801305c:	24000114 	.word	0x24000114
 8013060:	ffff0208 	.word	0xffff0208

08013064 <__sread>:
 8013064:	b510      	push	{r4, lr}
 8013066:	460c      	mov	r4, r1
 8013068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801306c:	f000 f86c 	bl	8013148 <_read_r>
 8013070:	2800      	cmp	r0, #0
 8013072:	bfab      	itete	ge
 8013074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013076:	89a3      	ldrhlt	r3, [r4, #12]
 8013078:	181b      	addge	r3, r3, r0
 801307a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801307e:	bfac      	ite	ge
 8013080:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013082:	81a3      	strhlt	r3, [r4, #12]
 8013084:	bd10      	pop	{r4, pc}

08013086 <__swrite>:
 8013086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308a:	461f      	mov	r7, r3
 801308c:	898b      	ldrh	r3, [r1, #12]
 801308e:	05db      	lsls	r3, r3, #23
 8013090:	4605      	mov	r5, r0
 8013092:	460c      	mov	r4, r1
 8013094:	4616      	mov	r6, r2
 8013096:	d505      	bpl.n	80130a4 <__swrite+0x1e>
 8013098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801309c:	2302      	movs	r3, #2
 801309e:	2200      	movs	r2, #0
 80130a0:	f000 f840 	bl	8013124 <_lseek_r>
 80130a4:	89a3      	ldrh	r3, [r4, #12]
 80130a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80130ae:	81a3      	strh	r3, [r4, #12]
 80130b0:	4632      	mov	r2, r6
 80130b2:	463b      	mov	r3, r7
 80130b4:	4628      	mov	r0, r5
 80130b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130ba:	f000 b867 	b.w	801318c <_write_r>

080130be <__sseek>:
 80130be:	b510      	push	{r4, lr}
 80130c0:	460c      	mov	r4, r1
 80130c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130c6:	f000 f82d 	bl	8013124 <_lseek_r>
 80130ca:	1c43      	adds	r3, r0, #1
 80130cc:	89a3      	ldrh	r3, [r4, #12]
 80130ce:	bf15      	itete	ne
 80130d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80130d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80130d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80130da:	81a3      	strheq	r3, [r4, #12]
 80130dc:	bf18      	it	ne
 80130de:	81a3      	strhne	r3, [r4, #12]
 80130e0:	bd10      	pop	{r4, pc}

080130e2 <__sclose>:
 80130e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130e6:	f000 b80d 	b.w	8013104 <_close_r>

080130ea <memset>:
 80130ea:	4402      	add	r2, r0
 80130ec:	4603      	mov	r3, r0
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d100      	bne.n	80130f4 <memset+0xa>
 80130f2:	4770      	bx	lr
 80130f4:	f803 1b01 	strb.w	r1, [r3], #1
 80130f8:	e7f9      	b.n	80130ee <memset+0x4>
	...

080130fc <_localeconv_r>:
 80130fc:	4800      	ldr	r0, [pc, #0]	@ (8013100 <_localeconv_r+0x4>)
 80130fe:	4770      	bx	lr
 8013100:	24000254 	.word	0x24000254

08013104 <_close_r>:
 8013104:	b538      	push	{r3, r4, r5, lr}
 8013106:	4d06      	ldr	r5, [pc, #24]	@ (8013120 <_close_r+0x1c>)
 8013108:	2300      	movs	r3, #0
 801310a:	4604      	mov	r4, r0
 801310c:	4608      	mov	r0, r1
 801310e:	602b      	str	r3, [r5, #0]
 8013110:	f7ee fb16 	bl	8001740 <_close>
 8013114:	1c43      	adds	r3, r0, #1
 8013116:	d102      	bne.n	801311e <_close_r+0x1a>
 8013118:	682b      	ldr	r3, [r5, #0]
 801311a:	b103      	cbz	r3, 801311e <_close_r+0x1a>
 801311c:	6023      	str	r3, [r4, #0]
 801311e:	bd38      	pop	{r3, r4, r5, pc}
 8013120:	24002480 	.word	0x24002480

08013124 <_lseek_r>:
 8013124:	b538      	push	{r3, r4, r5, lr}
 8013126:	4d07      	ldr	r5, [pc, #28]	@ (8013144 <_lseek_r+0x20>)
 8013128:	4604      	mov	r4, r0
 801312a:	4608      	mov	r0, r1
 801312c:	4611      	mov	r1, r2
 801312e:	2200      	movs	r2, #0
 8013130:	602a      	str	r2, [r5, #0]
 8013132:	461a      	mov	r2, r3
 8013134:	f7ee fb2b 	bl	800178e <_lseek>
 8013138:	1c43      	adds	r3, r0, #1
 801313a:	d102      	bne.n	8013142 <_lseek_r+0x1e>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	b103      	cbz	r3, 8013142 <_lseek_r+0x1e>
 8013140:	6023      	str	r3, [r4, #0]
 8013142:	bd38      	pop	{r3, r4, r5, pc}
 8013144:	24002480 	.word	0x24002480

08013148 <_read_r>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4d07      	ldr	r5, [pc, #28]	@ (8013168 <_read_r+0x20>)
 801314c:	4604      	mov	r4, r0
 801314e:	4608      	mov	r0, r1
 8013150:	4611      	mov	r1, r2
 8013152:	2200      	movs	r2, #0
 8013154:	602a      	str	r2, [r5, #0]
 8013156:	461a      	mov	r2, r3
 8013158:	f7ee fab9 	bl	80016ce <_read>
 801315c:	1c43      	adds	r3, r0, #1
 801315e:	d102      	bne.n	8013166 <_read_r+0x1e>
 8013160:	682b      	ldr	r3, [r5, #0]
 8013162:	b103      	cbz	r3, 8013166 <_read_r+0x1e>
 8013164:	6023      	str	r3, [r4, #0]
 8013166:	bd38      	pop	{r3, r4, r5, pc}
 8013168:	24002480 	.word	0x24002480

0801316c <_sbrk_r>:
 801316c:	b538      	push	{r3, r4, r5, lr}
 801316e:	4d06      	ldr	r5, [pc, #24]	@ (8013188 <_sbrk_r+0x1c>)
 8013170:	2300      	movs	r3, #0
 8013172:	4604      	mov	r4, r0
 8013174:	4608      	mov	r0, r1
 8013176:	602b      	str	r3, [r5, #0]
 8013178:	f7ee fb16 	bl	80017a8 <_sbrk>
 801317c:	1c43      	adds	r3, r0, #1
 801317e:	d102      	bne.n	8013186 <_sbrk_r+0x1a>
 8013180:	682b      	ldr	r3, [r5, #0]
 8013182:	b103      	cbz	r3, 8013186 <_sbrk_r+0x1a>
 8013184:	6023      	str	r3, [r4, #0]
 8013186:	bd38      	pop	{r3, r4, r5, pc}
 8013188:	24002480 	.word	0x24002480

0801318c <_write_r>:
 801318c:	b538      	push	{r3, r4, r5, lr}
 801318e:	4d07      	ldr	r5, [pc, #28]	@ (80131ac <_write_r+0x20>)
 8013190:	4604      	mov	r4, r0
 8013192:	4608      	mov	r0, r1
 8013194:	4611      	mov	r1, r2
 8013196:	2200      	movs	r2, #0
 8013198:	602a      	str	r2, [r5, #0]
 801319a:	461a      	mov	r2, r3
 801319c:	f7ee fab4 	bl	8001708 <_write>
 80131a0:	1c43      	adds	r3, r0, #1
 80131a2:	d102      	bne.n	80131aa <_write_r+0x1e>
 80131a4:	682b      	ldr	r3, [r5, #0]
 80131a6:	b103      	cbz	r3, 80131aa <_write_r+0x1e>
 80131a8:	6023      	str	r3, [r4, #0]
 80131aa:	bd38      	pop	{r3, r4, r5, pc}
 80131ac:	24002480 	.word	0x24002480

080131b0 <__errno>:
 80131b0:	4b01      	ldr	r3, [pc, #4]	@ (80131b8 <__errno+0x8>)
 80131b2:	6818      	ldr	r0, [r3, #0]
 80131b4:	4770      	bx	lr
 80131b6:	bf00      	nop
 80131b8:	24000114 	.word	0x24000114

080131bc <__libc_init_array>:
 80131bc:	b570      	push	{r4, r5, r6, lr}
 80131be:	4d0d      	ldr	r5, [pc, #52]	@ (80131f4 <__libc_init_array+0x38>)
 80131c0:	4c0d      	ldr	r4, [pc, #52]	@ (80131f8 <__libc_init_array+0x3c>)
 80131c2:	1b64      	subs	r4, r4, r5
 80131c4:	10a4      	asrs	r4, r4, #2
 80131c6:	2600      	movs	r6, #0
 80131c8:	42a6      	cmp	r6, r4
 80131ca:	d109      	bne.n	80131e0 <__libc_init_array+0x24>
 80131cc:	4d0b      	ldr	r5, [pc, #44]	@ (80131fc <__libc_init_array+0x40>)
 80131ce:	4c0c      	ldr	r4, [pc, #48]	@ (8013200 <__libc_init_array+0x44>)
 80131d0:	f002 f862 	bl	8015298 <_init>
 80131d4:	1b64      	subs	r4, r4, r5
 80131d6:	10a4      	asrs	r4, r4, #2
 80131d8:	2600      	movs	r6, #0
 80131da:	42a6      	cmp	r6, r4
 80131dc:	d105      	bne.n	80131ea <__libc_init_array+0x2e>
 80131de:	bd70      	pop	{r4, r5, r6, pc}
 80131e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80131e4:	4798      	blx	r3
 80131e6:	3601      	adds	r6, #1
 80131e8:	e7ee      	b.n	80131c8 <__libc_init_array+0xc>
 80131ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80131ee:	4798      	blx	r3
 80131f0:	3601      	adds	r6, #1
 80131f2:	e7f2      	b.n	80131da <__libc_init_array+0x1e>
 80131f4:	080164d8 	.word	0x080164d8
 80131f8:	080164d8 	.word	0x080164d8
 80131fc:	080164d8 	.word	0x080164d8
 8013200:	080164dc 	.word	0x080164dc

08013204 <__retarget_lock_init_recursive>:
 8013204:	4770      	bx	lr

08013206 <__retarget_lock_acquire_recursive>:
 8013206:	4770      	bx	lr

08013208 <__retarget_lock_release_recursive>:
 8013208:	4770      	bx	lr

0801320a <quorem>:
 801320a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320e:	6903      	ldr	r3, [r0, #16]
 8013210:	690c      	ldr	r4, [r1, #16]
 8013212:	42a3      	cmp	r3, r4
 8013214:	4607      	mov	r7, r0
 8013216:	db7e      	blt.n	8013316 <quorem+0x10c>
 8013218:	3c01      	subs	r4, #1
 801321a:	f101 0814 	add.w	r8, r1, #20
 801321e:	00a3      	lsls	r3, r4, #2
 8013220:	f100 0514 	add.w	r5, r0, #20
 8013224:	9300      	str	r3, [sp, #0]
 8013226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801322a:	9301      	str	r3, [sp, #4]
 801322c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013234:	3301      	adds	r3, #1
 8013236:	429a      	cmp	r2, r3
 8013238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801323c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013240:	d32e      	bcc.n	80132a0 <quorem+0x96>
 8013242:	f04f 0a00 	mov.w	sl, #0
 8013246:	46c4      	mov	ip, r8
 8013248:	46ae      	mov	lr, r5
 801324a:	46d3      	mov	fp, sl
 801324c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013250:	b298      	uxth	r0, r3
 8013252:	fb06 a000 	mla	r0, r6, r0, sl
 8013256:	0c02      	lsrs	r2, r0, #16
 8013258:	0c1b      	lsrs	r3, r3, #16
 801325a:	fb06 2303 	mla	r3, r6, r3, r2
 801325e:	f8de 2000 	ldr.w	r2, [lr]
 8013262:	b280      	uxth	r0, r0
 8013264:	b292      	uxth	r2, r2
 8013266:	1a12      	subs	r2, r2, r0
 8013268:	445a      	add	r2, fp
 801326a:	f8de 0000 	ldr.w	r0, [lr]
 801326e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013272:	b29b      	uxth	r3, r3
 8013274:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013278:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801327c:	b292      	uxth	r2, r2
 801327e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013282:	45e1      	cmp	r9, ip
 8013284:	f84e 2b04 	str.w	r2, [lr], #4
 8013288:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801328c:	d2de      	bcs.n	801324c <quorem+0x42>
 801328e:	9b00      	ldr	r3, [sp, #0]
 8013290:	58eb      	ldr	r3, [r5, r3]
 8013292:	b92b      	cbnz	r3, 80132a0 <quorem+0x96>
 8013294:	9b01      	ldr	r3, [sp, #4]
 8013296:	3b04      	subs	r3, #4
 8013298:	429d      	cmp	r5, r3
 801329a:	461a      	mov	r2, r3
 801329c:	d32f      	bcc.n	80132fe <quorem+0xf4>
 801329e:	613c      	str	r4, [r7, #16]
 80132a0:	4638      	mov	r0, r7
 80132a2:	f001 f857 	bl	8014354 <__mcmp>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	db25      	blt.n	80132f6 <quorem+0xec>
 80132aa:	4629      	mov	r1, r5
 80132ac:	2000      	movs	r0, #0
 80132ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80132b2:	f8d1 c000 	ldr.w	ip, [r1]
 80132b6:	fa1f fe82 	uxth.w	lr, r2
 80132ba:	fa1f f38c 	uxth.w	r3, ip
 80132be:	eba3 030e 	sub.w	r3, r3, lr
 80132c2:	4403      	add	r3, r0
 80132c4:	0c12      	lsrs	r2, r2, #16
 80132c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80132ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80132d4:	45c1      	cmp	r9, r8
 80132d6:	f841 3b04 	str.w	r3, [r1], #4
 80132da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80132de:	d2e6      	bcs.n	80132ae <quorem+0xa4>
 80132e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80132e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80132e8:	b922      	cbnz	r2, 80132f4 <quorem+0xea>
 80132ea:	3b04      	subs	r3, #4
 80132ec:	429d      	cmp	r5, r3
 80132ee:	461a      	mov	r2, r3
 80132f0:	d30b      	bcc.n	801330a <quorem+0x100>
 80132f2:	613c      	str	r4, [r7, #16]
 80132f4:	3601      	adds	r6, #1
 80132f6:	4630      	mov	r0, r6
 80132f8:	b003      	add	sp, #12
 80132fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132fe:	6812      	ldr	r2, [r2, #0]
 8013300:	3b04      	subs	r3, #4
 8013302:	2a00      	cmp	r2, #0
 8013304:	d1cb      	bne.n	801329e <quorem+0x94>
 8013306:	3c01      	subs	r4, #1
 8013308:	e7c6      	b.n	8013298 <quorem+0x8e>
 801330a:	6812      	ldr	r2, [r2, #0]
 801330c:	3b04      	subs	r3, #4
 801330e:	2a00      	cmp	r2, #0
 8013310:	d1ef      	bne.n	80132f2 <quorem+0xe8>
 8013312:	3c01      	subs	r4, #1
 8013314:	e7ea      	b.n	80132ec <quorem+0xe2>
 8013316:	2000      	movs	r0, #0
 8013318:	e7ee      	b.n	80132f8 <quorem+0xee>
 801331a:	0000      	movs	r0, r0
 801331c:	0000      	movs	r0, r0
	...

08013320 <_dtoa_r>:
 8013320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013324:	ed2d 8b02 	vpush	{d8}
 8013328:	69c7      	ldr	r7, [r0, #28]
 801332a:	b091      	sub	sp, #68	@ 0x44
 801332c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013330:	ec55 4b10 	vmov	r4, r5, d0
 8013334:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013336:	9107      	str	r1, [sp, #28]
 8013338:	4681      	mov	r9, r0
 801333a:	9209      	str	r2, [sp, #36]	@ 0x24
 801333c:	930d      	str	r3, [sp, #52]	@ 0x34
 801333e:	b97f      	cbnz	r7, 8013360 <_dtoa_r+0x40>
 8013340:	2010      	movs	r0, #16
 8013342:	f7ff f8bf 	bl	80124c4 <malloc>
 8013346:	4602      	mov	r2, r0
 8013348:	f8c9 001c 	str.w	r0, [r9, #28]
 801334c:	b920      	cbnz	r0, 8013358 <_dtoa_r+0x38>
 801334e:	4ba0      	ldr	r3, [pc, #640]	@ (80135d0 <_dtoa_r+0x2b0>)
 8013350:	21ef      	movs	r1, #239	@ 0xef
 8013352:	48a0      	ldr	r0, [pc, #640]	@ (80135d4 <_dtoa_r+0x2b4>)
 8013354:	f001 fb32 	bl	80149bc <__assert_func>
 8013358:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801335c:	6007      	str	r7, [r0, #0]
 801335e:	60c7      	str	r7, [r0, #12]
 8013360:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013364:	6819      	ldr	r1, [r3, #0]
 8013366:	b159      	cbz	r1, 8013380 <_dtoa_r+0x60>
 8013368:	685a      	ldr	r2, [r3, #4]
 801336a:	604a      	str	r2, [r1, #4]
 801336c:	2301      	movs	r3, #1
 801336e:	4093      	lsls	r3, r2
 8013370:	608b      	str	r3, [r1, #8]
 8013372:	4648      	mov	r0, r9
 8013374:	f000 fdb4 	bl	8013ee0 <_Bfree>
 8013378:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801337c:	2200      	movs	r2, #0
 801337e:	601a      	str	r2, [r3, #0]
 8013380:	1e2b      	subs	r3, r5, #0
 8013382:	bfbb      	ittet	lt
 8013384:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013388:	9303      	strlt	r3, [sp, #12]
 801338a:	2300      	movge	r3, #0
 801338c:	2201      	movlt	r2, #1
 801338e:	bfac      	ite	ge
 8013390:	6033      	strge	r3, [r6, #0]
 8013392:	6032      	strlt	r2, [r6, #0]
 8013394:	4b90      	ldr	r3, [pc, #576]	@ (80135d8 <_dtoa_r+0x2b8>)
 8013396:	9e03      	ldr	r6, [sp, #12]
 8013398:	43b3      	bics	r3, r6
 801339a:	d110      	bne.n	80133be <_dtoa_r+0x9e>
 801339c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801339e:	f242 730f 	movw	r3, #9999	@ 0x270f
 80133a2:	6013      	str	r3, [r2, #0]
 80133a4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80133a8:	4323      	orrs	r3, r4
 80133aa:	f000 84de 	beq.w	8013d6a <_dtoa_r+0xa4a>
 80133ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80133b0:	4f8a      	ldr	r7, [pc, #552]	@ (80135dc <_dtoa_r+0x2bc>)
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f000 84e0 	beq.w	8013d78 <_dtoa_r+0xa58>
 80133b8:	1cfb      	adds	r3, r7, #3
 80133ba:	f000 bcdb 	b.w	8013d74 <_dtoa_r+0xa54>
 80133be:	ed9d 8b02 	vldr	d8, [sp, #8]
 80133c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80133c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ca:	d10a      	bne.n	80133e2 <_dtoa_r+0xc2>
 80133cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80133ce:	2301      	movs	r3, #1
 80133d0:	6013      	str	r3, [r2, #0]
 80133d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80133d4:	b113      	cbz	r3, 80133dc <_dtoa_r+0xbc>
 80133d6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80133d8:	4b81      	ldr	r3, [pc, #516]	@ (80135e0 <_dtoa_r+0x2c0>)
 80133da:	6013      	str	r3, [r2, #0]
 80133dc:	4f81      	ldr	r7, [pc, #516]	@ (80135e4 <_dtoa_r+0x2c4>)
 80133de:	f000 bccb 	b.w	8013d78 <_dtoa_r+0xa58>
 80133e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80133e4:	a90f      	add	r1, sp, #60	@ 0x3c
 80133e6:	4648      	mov	r0, r9
 80133e8:	eeb0 0b48 	vmov.f64	d0, d8
 80133ec:	f001 f862 	bl	80144b4 <__d2b>
 80133f0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80133f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80133f6:	9001      	str	r0, [sp, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d045      	beq.n	8013488 <_dtoa_r+0x168>
 80133fc:	eeb0 7b48 	vmov.f64	d7, d8
 8013400:	ee18 1a90 	vmov	r1, s17
 8013404:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013408:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801340c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013410:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013414:	2500      	movs	r5, #0
 8013416:	ee07 1a90 	vmov	s15, r1
 801341a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801341e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80135b8 <_dtoa_r+0x298>
 8013422:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013426:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80135c0 <_dtoa_r+0x2a0>
 801342a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801342e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80135c8 <_dtoa_r+0x2a8>
 8013432:	ee07 3a90 	vmov	s15, r3
 8013436:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801343a:	eeb0 7b46 	vmov.f64	d7, d6
 801343e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013442:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013446:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344e:	ee16 8a90 	vmov	r8, s13
 8013452:	d508      	bpl.n	8013466 <_dtoa_r+0x146>
 8013454:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013458:	eeb4 6b47 	vcmp.f64	d6, d7
 801345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013460:	bf18      	it	ne
 8013462:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013466:	f1b8 0f16 	cmp.w	r8, #22
 801346a:	d82b      	bhi.n	80134c4 <_dtoa_r+0x1a4>
 801346c:	495e      	ldr	r1, [pc, #376]	@ (80135e8 <_dtoa_r+0x2c8>)
 801346e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013472:	ed91 7b00 	vldr	d7, [r1]
 8013476:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347e:	d501      	bpl.n	8013484 <_dtoa_r+0x164>
 8013480:	f108 38ff 	add.w	r8, r8, #4294967295
 8013484:	2100      	movs	r1, #0
 8013486:	e01e      	b.n	80134c6 <_dtoa_r+0x1a6>
 8013488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801348a:	4413      	add	r3, r2
 801348c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013490:	2920      	cmp	r1, #32
 8013492:	bfc1      	itttt	gt
 8013494:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013498:	408e      	lslgt	r6, r1
 801349a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801349e:	fa24 f101 	lsrgt.w	r1, r4, r1
 80134a2:	bfd6      	itet	le
 80134a4:	f1c1 0120 	rsble	r1, r1, #32
 80134a8:	4331      	orrgt	r1, r6
 80134aa:	fa04 f101 	lslle.w	r1, r4, r1
 80134ae:	ee07 1a90 	vmov	s15, r1
 80134b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80134b6:	3b01      	subs	r3, #1
 80134b8:	ee17 1a90 	vmov	r1, s15
 80134bc:	2501      	movs	r5, #1
 80134be:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80134c2:	e7a8      	b.n	8013416 <_dtoa_r+0xf6>
 80134c4:	2101      	movs	r1, #1
 80134c6:	1ad2      	subs	r2, r2, r3
 80134c8:	1e53      	subs	r3, r2, #1
 80134ca:	9306      	str	r3, [sp, #24]
 80134cc:	bf45      	ittet	mi
 80134ce:	f1c2 0301 	rsbmi	r3, r2, #1
 80134d2:	9305      	strmi	r3, [sp, #20]
 80134d4:	2300      	movpl	r3, #0
 80134d6:	2300      	movmi	r3, #0
 80134d8:	bf4c      	ite	mi
 80134da:	9306      	strmi	r3, [sp, #24]
 80134dc:	9305      	strpl	r3, [sp, #20]
 80134de:	f1b8 0f00 	cmp.w	r8, #0
 80134e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80134e4:	db18      	blt.n	8013518 <_dtoa_r+0x1f8>
 80134e6:	9b06      	ldr	r3, [sp, #24]
 80134e8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80134ec:	4443      	add	r3, r8
 80134ee:	9306      	str	r3, [sp, #24]
 80134f0:	2300      	movs	r3, #0
 80134f2:	9a07      	ldr	r2, [sp, #28]
 80134f4:	2a09      	cmp	r2, #9
 80134f6:	d849      	bhi.n	801358c <_dtoa_r+0x26c>
 80134f8:	2a05      	cmp	r2, #5
 80134fa:	bfc4      	itt	gt
 80134fc:	3a04      	subgt	r2, #4
 80134fe:	9207      	strgt	r2, [sp, #28]
 8013500:	9a07      	ldr	r2, [sp, #28]
 8013502:	f1a2 0202 	sub.w	r2, r2, #2
 8013506:	bfcc      	ite	gt
 8013508:	2400      	movgt	r4, #0
 801350a:	2401      	movle	r4, #1
 801350c:	2a03      	cmp	r2, #3
 801350e:	d848      	bhi.n	80135a2 <_dtoa_r+0x282>
 8013510:	e8df f002 	tbb	[pc, r2]
 8013514:	3a2c2e0b 	.word	0x3a2c2e0b
 8013518:	9b05      	ldr	r3, [sp, #20]
 801351a:	2200      	movs	r2, #0
 801351c:	eba3 0308 	sub.w	r3, r3, r8
 8013520:	9305      	str	r3, [sp, #20]
 8013522:	920a      	str	r2, [sp, #40]	@ 0x28
 8013524:	f1c8 0300 	rsb	r3, r8, #0
 8013528:	e7e3      	b.n	80134f2 <_dtoa_r+0x1d2>
 801352a:	2200      	movs	r2, #0
 801352c:	9208      	str	r2, [sp, #32]
 801352e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013530:	2a00      	cmp	r2, #0
 8013532:	dc39      	bgt.n	80135a8 <_dtoa_r+0x288>
 8013534:	f04f 0b01 	mov.w	fp, #1
 8013538:	46da      	mov	sl, fp
 801353a:	465a      	mov	r2, fp
 801353c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013540:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013544:	2100      	movs	r1, #0
 8013546:	2004      	movs	r0, #4
 8013548:	f100 0614 	add.w	r6, r0, #20
 801354c:	4296      	cmp	r6, r2
 801354e:	d930      	bls.n	80135b2 <_dtoa_r+0x292>
 8013550:	6079      	str	r1, [r7, #4]
 8013552:	4648      	mov	r0, r9
 8013554:	9304      	str	r3, [sp, #16]
 8013556:	f000 fc83 	bl	8013e60 <_Balloc>
 801355a:	9b04      	ldr	r3, [sp, #16]
 801355c:	4607      	mov	r7, r0
 801355e:	2800      	cmp	r0, #0
 8013560:	d146      	bne.n	80135f0 <_dtoa_r+0x2d0>
 8013562:	4b22      	ldr	r3, [pc, #136]	@ (80135ec <_dtoa_r+0x2cc>)
 8013564:	4602      	mov	r2, r0
 8013566:	f240 11af 	movw	r1, #431	@ 0x1af
 801356a:	e6f2      	b.n	8013352 <_dtoa_r+0x32>
 801356c:	2201      	movs	r2, #1
 801356e:	e7dd      	b.n	801352c <_dtoa_r+0x20c>
 8013570:	2200      	movs	r2, #0
 8013572:	9208      	str	r2, [sp, #32]
 8013574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013576:	eb08 0b02 	add.w	fp, r8, r2
 801357a:	f10b 0a01 	add.w	sl, fp, #1
 801357e:	4652      	mov	r2, sl
 8013580:	2a01      	cmp	r2, #1
 8013582:	bfb8      	it	lt
 8013584:	2201      	movlt	r2, #1
 8013586:	e7db      	b.n	8013540 <_dtoa_r+0x220>
 8013588:	2201      	movs	r2, #1
 801358a:	e7f2      	b.n	8013572 <_dtoa_r+0x252>
 801358c:	2401      	movs	r4, #1
 801358e:	2200      	movs	r2, #0
 8013590:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013594:	f04f 3bff 	mov.w	fp, #4294967295
 8013598:	2100      	movs	r1, #0
 801359a:	46da      	mov	sl, fp
 801359c:	2212      	movs	r2, #18
 801359e:	9109      	str	r1, [sp, #36]	@ 0x24
 80135a0:	e7ce      	b.n	8013540 <_dtoa_r+0x220>
 80135a2:	2201      	movs	r2, #1
 80135a4:	9208      	str	r2, [sp, #32]
 80135a6:	e7f5      	b.n	8013594 <_dtoa_r+0x274>
 80135a8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80135ac:	46da      	mov	sl, fp
 80135ae:	465a      	mov	r2, fp
 80135b0:	e7c6      	b.n	8013540 <_dtoa_r+0x220>
 80135b2:	3101      	adds	r1, #1
 80135b4:	0040      	lsls	r0, r0, #1
 80135b6:	e7c7      	b.n	8013548 <_dtoa_r+0x228>
 80135b8:	636f4361 	.word	0x636f4361
 80135bc:	3fd287a7 	.word	0x3fd287a7
 80135c0:	8b60c8b3 	.word	0x8b60c8b3
 80135c4:	3fc68a28 	.word	0x3fc68a28
 80135c8:	509f79fb 	.word	0x509f79fb
 80135cc:	3fd34413 	.word	0x3fd34413
 80135d0:	08016191 	.word	0x08016191
 80135d4:	080161a8 	.word	0x080161a8
 80135d8:	7ff00000 	.word	0x7ff00000
 80135dc:	0801618d 	.word	0x0801618d
 80135e0:	08016161 	.word	0x08016161
 80135e4:	08016160 	.word	0x08016160
 80135e8:	080162a0 	.word	0x080162a0
 80135ec:	08016200 	.word	0x08016200
 80135f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80135f4:	f1ba 0f0e 	cmp.w	sl, #14
 80135f8:	6010      	str	r0, [r2, #0]
 80135fa:	d86f      	bhi.n	80136dc <_dtoa_r+0x3bc>
 80135fc:	2c00      	cmp	r4, #0
 80135fe:	d06d      	beq.n	80136dc <_dtoa_r+0x3bc>
 8013600:	f1b8 0f00 	cmp.w	r8, #0
 8013604:	f340 80c2 	ble.w	801378c <_dtoa_r+0x46c>
 8013608:	4aca      	ldr	r2, [pc, #808]	@ (8013934 <_dtoa_r+0x614>)
 801360a:	f008 010f 	and.w	r1, r8, #15
 801360e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013612:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013616:	ed92 7b00 	vldr	d7, [r2]
 801361a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801361e:	f000 80a9 	beq.w	8013774 <_dtoa_r+0x454>
 8013622:	4ac5      	ldr	r2, [pc, #788]	@ (8013938 <_dtoa_r+0x618>)
 8013624:	ed92 6b08 	vldr	d6, [r2, #32]
 8013628:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801362c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013630:	f001 010f 	and.w	r1, r1, #15
 8013634:	2203      	movs	r2, #3
 8013636:	48c0      	ldr	r0, [pc, #768]	@ (8013938 <_dtoa_r+0x618>)
 8013638:	2900      	cmp	r1, #0
 801363a:	f040 809d 	bne.w	8013778 <_dtoa_r+0x458>
 801363e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013642:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013646:	ed8d 7b02 	vstr	d7, [sp, #8]
 801364a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801364c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013650:	2900      	cmp	r1, #0
 8013652:	f000 80c1 	beq.w	80137d8 <_dtoa_r+0x4b8>
 8013656:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801365a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013662:	f140 80b9 	bpl.w	80137d8 <_dtoa_r+0x4b8>
 8013666:	f1ba 0f00 	cmp.w	sl, #0
 801366a:	f000 80b5 	beq.w	80137d8 <_dtoa_r+0x4b8>
 801366e:	f1bb 0f00 	cmp.w	fp, #0
 8013672:	dd31      	ble.n	80136d8 <_dtoa_r+0x3b8>
 8013674:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013678:	ee27 7b06 	vmul.f64	d7, d7, d6
 801367c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013680:	f108 31ff 	add.w	r1, r8, #4294967295
 8013684:	9104      	str	r1, [sp, #16]
 8013686:	3201      	adds	r2, #1
 8013688:	465c      	mov	r4, fp
 801368a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801368e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013692:	ee07 2a90 	vmov	s15, r2
 8013696:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801369a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801369e:	ee15 2a90 	vmov	r2, s11
 80136a2:	ec51 0b15 	vmov	r0, r1, d5
 80136a6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80136aa:	2c00      	cmp	r4, #0
 80136ac:	f040 8098 	bne.w	80137e0 <_dtoa_r+0x4c0>
 80136b0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80136b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80136b8:	ec41 0b17 	vmov	d7, r0, r1
 80136bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c4:	f300 8261 	bgt.w	8013b8a <_dtoa_r+0x86a>
 80136c8:	eeb1 7b47 	vneg.f64	d7, d7
 80136cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d4:	f100 80f5 	bmi.w	80138c2 <_dtoa_r+0x5a2>
 80136d8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80136dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80136de:	2a00      	cmp	r2, #0
 80136e0:	f2c0 812c 	blt.w	801393c <_dtoa_r+0x61c>
 80136e4:	f1b8 0f0e 	cmp.w	r8, #14
 80136e8:	f300 8128 	bgt.w	801393c <_dtoa_r+0x61c>
 80136ec:	4b91      	ldr	r3, [pc, #580]	@ (8013934 <_dtoa_r+0x614>)
 80136ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80136f2:	ed93 6b00 	vldr	d6, [r3]
 80136f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	da03      	bge.n	8013704 <_dtoa_r+0x3e4>
 80136fc:	f1ba 0f00 	cmp.w	sl, #0
 8013700:	f340 80d2 	ble.w	80138a8 <_dtoa_r+0x588>
 8013704:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013708:	ed9d 7b02 	vldr	d7, [sp, #8]
 801370c:	463e      	mov	r6, r7
 801370e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013712:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013716:	ee15 3a10 	vmov	r3, s10
 801371a:	3330      	adds	r3, #48	@ 0x30
 801371c:	f806 3b01 	strb.w	r3, [r6], #1
 8013720:	1bf3      	subs	r3, r6, r7
 8013722:	459a      	cmp	sl, r3
 8013724:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013728:	eea3 7b46 	vfms.f64	d7, d3, d6
 801372c:	f040 80f8 	bne.w	8013920 <_dtoa_r+0x600>
 8013730:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013734:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801373c:	f300 80dd 	bgt.w	80138fa <_dtoa_r+0x5da>
 8013740:	eeb4 7b46 	vcmp.f64	d7, d6
 8013744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013748:	d104      	bne.n	8013754 <_dtoa_r+0x434>
 801374a:	ee15 3a10 	vmov	r3, s10
 801374e:	07db      	lsls	r3, r3, #31
 8013750:	f100 80d3 	bmi.w	80138fa <_dtoa_r+0x5da>
 8013754:	9901      	ldr	r1, [sp, #4]
 8013756:	4648      	mov	r0, r9
 8013758:	f000 fbc2 	bl	8013ee0 <_Bfree>
 801375c:	2300      	movs	r3, #0
 801375e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013760:	7033      	strb	r3, [r6, #0]
 8013762:	f108 0301 	add.w	r3, r8, #1
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801376a:	2b00      	cmp	r3, #0
 801376c:	f000 8304 	beq.w	8013d78 <_dtoa_r+0xa58>
 8013770:	601e      	str	r6, [r3, #0]
 8013772:	e301      	b.n	8013d78 <_dtoa_r+0xa58>
 8013774:	2202      	movs	r2, #2
 8013776:	e75e      	b.n	8013636 <_dtoa_r+0x316>
 8013778:	07cc      	lsls	r4, r1, #31
 801377a:	d504      	bpl.n	8013786 <_dtoa_r+0x466>
 801377c:	ed90 6b00 	vldr	d6, [r0]
 8013780:	3201      	adds	r2, #1
 8013782:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013786:	1049      	asrs	r1, r1, #1
 8013788:	3008      	adds	r0, #8
 801378a:	e755      	b.n	8013638 <_dtoa_r+0x318>
 801378c:	d022      	beq.n	80137d4 <_dtoa_r+0x4b4>
 801378e:	f1c8 0100 	rsb	r1, r8, #0
 8013792:	4a68      	ldr	r2, [pc, #416]	@ (8013934 <_dtoa_r+0x614>)
 8013794:	f001 000f 	and.w	r0, r1, #15
 8013798:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801379c:	ed92 7b00 	vldr	d7, [r2]
 80137a0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80137a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137a8:	4863      	ldr	r0, [pc, #396]	@ (8013938 <_dtoa_r+0x618>)
 80137aa:	1109      	asrs	r1, r1, #4
 80137ac:	2400      	movs	r4, #0
 80137ae:	2202      	movs	r2, #2
 80137b0:	b929      	cbnz	r1, 80137be <_dtoa_r+0x49e>
 80137b2:	2c00      	cmp	r4, #0
 80137b4:	f43f af49 	beq.w	801364a <_dtoa_r+0x32a>
 80137b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137bc:	e745      	b.n	801364a <_dtoa_r+0x32a>
 80137be:	07ce      	lsls	r6, r1, #31
 80137c0:	d505      	bpl.n	80137ce <_dtoa_r+0x4ae>
 80137c2:	ed90 6b00 	vldr	d6, [r0]
 80137c6:	3201      	adds	r2, #1
 80137c8:	2401      	movs	r4, #1
 80137ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80137ce:	1049      	asrs	r1, r1, #1
 80137d0:	3008      	adds	r0, #8
 80137d2:	e7ed      	b.n	80137b0 <_dtoa_r+0x490>
 80137d4:	2202      	movs	r2, #2
 80137d6:	e738      	b.n	801364a <_dtoa_r+0x32a>
 80137d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80137dc:	4654      	mov	r4, sl
 80137de:	e754      	b.n	801368a <_dtoa_r+0x36a>
 80137e0:	4a54      	ldr	r2, [pc, #336]	@ (8013934 <_dtoa_r+0x614>)
 80137e2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80137e6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80137ea:	9a08      	ldr	r2, [sp, #32]
 80137ec:	ec41 0b17 	vmov	d7, r0, r1
 80137f0:	443c      	add	r4, r7
 80137f2:	b34a      	cbz	r2, 8013848 <_dtoa_r+0x528>
 80137f4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80137f8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80137fc:	463e      	mov	r6, r7
 80137fe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013802:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013806:	ee35 7b47 	vsub.f64	d7, d5, d7
 801380a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801380e:	ee14 2a90 	vmov	r2, s9
 8013812:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013816:	3230      	adds	r2, #48	@ 0x30
 8013818:	ee36 6b45 	vsub.f64	d6, d6, d5
 801381c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013824:	f806 2b01 	strb.w	r2, [r6], #1
 8013828:	d438      	bmi.n	801389c <_dtoa_r+0x57c>
 801382a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801382e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013836:	d462      	bmi.n	80138fe <_dtoa_r+0x5de>
 8013838:	42a6      	cmp	r6, r4
 801383a:	f43f af4d 	beq.w	80136d8 <_dtoa_r+0x3b8>
 801383e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013842:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013846:	e7e0      	b.n	801380a <_dtoa_r+0x4ea>
 8013848:	4621      	mov	r1, r4
 801384a:	463e      	mov	r6, r7
 801384c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013850:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013854:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013858:	ee14 2a90 	vmov	r2, s9
 801385c:	3230      	adds	r2, #48	@ 0x30
 801385e:	f806 2b01 	strb.w	r2, [r6], #1
 8013862:	42a6      	cmp	r6, r4
 8013864:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013868:	ee36 6b45 	vsub.f64	d6, d6, d5
 801386c:	d119      	bne.n	80138a2 <_dtoa_r+0x582>
 801386e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013872:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013876:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801387e:	dc3e      	bgt.n	80138fe <_dtoa_r+0x5de>
 8013880:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013884:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388c:	f57f af24 	bpl.w	80136d8 <_dtoa_r+0x3b8>
 8013890:	460e      	mov	r6, r1
 8013892:	3901      	subs	r1, #1
 8013894:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013898:	2b30      	cmp	r3, #48	@ 0x30
 801389a:	d0f9      	beq.n	8013890 <_dtoa_r+0x570>
 801389c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80138a0:	e758      	b.n	8013754 <_dtoa_r+0x434>
 80138a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80138a6:	e7d5      	b.n	8013854 <_dtoa_r+0x534>
 80138a8:	d10b      	bne.n	80138c2 <_dtoa_r+0x5a2>
 80138aa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80138ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80138b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138be:	f2c0 8161 	blt.w	8013b84 <_dtoa_r+0x864>
 80138c2:	2400      	movs	r4, #0
 80138c4:	4625      	mov	r5, r4
 80138c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138c8:	43db      	mvns	r3, r3
 80138ca:	9304      	str	r3, [sp, #16]
 80138cc:	463e      	mov	r6, r7
 80138ce:	f04f 0800 	mov.w	r8, #0
 80138d2:	4621      	mov	r1, r4
 80138d4:	4648      	mov	r0, r9
 80138d6:	f000 fb03 	bl	8013ee0 <_Bfree>
 80138da:	2d00      	cmp	r5, #0
 80138dc:	d0de      	beq.n	801389c <_dtoa_r+0x57c>
 80138de:	f1b8 0f00 	cmp.w	r8, #0
 80138e2:	d005      	beq.n	80138f0 <_dtoa_r+0x5d0>
 80138e4:	45a8      	cmp	r8, r5
 80138e6:	d003      	beq.n	80138f0 <_dtoa_r+0x5d0>
 80138e8:	4641      	mov	r1, r8
 80138ea:	4648      	mov	r0, r9
 80138ec:	f000 faf8 	bl	8013ee0 <_Bfree>
 80138f0:	4629      	mov	r1, r5
 80138f2:	4648      	mov	r0, r9
 80138f4:	f000 faf4 	bl	8013ee0 <_Bfree>
 80138f8:	e7d0      	b.n	801389c <_dtoa_r+0x57c>
 80138fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80138fe:	4633      	mov	r3, r6
 8013900:	461e      	mov	r6, r3
 8013902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013906:	2a39      	cmp	r2, #57	@ 0x39
 8013908:	d106      	bne.n	8013918 <_dtoa_r+0x5f8>
 801390a:	429f      	cmp	r7, r3
 801390c:	d1f8      	bne.n	8013900 <_dtoa_r+0x5e0>
 801390e:	9a04      	ldr	r2, [sp, #16]
 8013910:	3201      	adds	r2, #1
 8013912:	9204      	str	r2, [sp, #16]
 8013914:	2230      	movs	r2, #48	@ 0x30
 8013916:	703a      	strb	r2, [r7, #0]
 8013918:	781a      	ldrb	r2, [r3, #0]
 801391a:	3201      	adds	r2, #1
 801391c:	701a      	strb	r2, [r3, #0]
 801391e:	e7bd      	b.n	801389c <_dtoa_r+0x57c>
 8013920:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013924:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801392c:	f47f aeef 	bne.w	801370e <_dtoa_r+0x3ee>
 8013930:	e710      	b.n	8013754 <_dtoa_r+0x434>
 8013932:	bf00      	nop
 8013934:	080162a0 	.word	0x080162a0
 8013938:	08016278 	.word	0x08016278
 801393c:	9908      	ldr	r1, [sp, #32]
 801393e:	2900      	cmp	r1, #0
 8013940:	f000 80e3 	beq.w	8013b0a <_dtoa_r+0x7ea>
 8013944:	9907      	ldr	r1, [sp, #28]
 8013946:	2901      	cmp	r1, #1
 8013948:	f300 80c8 	bgt.w	8013adc <_dtoa_r+0x7bc>
 801394c:	2d00      	cmp	r5, #0
 801394e:	f000 80c1 	beq.w	8013ad4 <_dtoa_r+0x7b4>
 8013952:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013956:	9e05      	ldr	r6, [sp, #20]
 8013958:	461c      	mov	r4, r3
 801395a:	9304      	str	r3, [sp, #16]
 801395c:	9b05      	ldr	r3, [sp, #20]
 801395e:	4413      	add	r3, r2
 8013960:	9305      	str	r3, [sp, #20]
 8013962:	9b06      	ldr	r3, [sp, #24]
 8013964:	2101      	movs	r1, #1
 8013966:	4413      	add	r3, r2
 8013968:	4648      	mov	r0, r9
 801396a:	9306      	str	r3, [sp, #24]
 801396c:	f000 fb6c 	bl	8014048 <__i2b>
 8013970:	9b04      	ldr	r3, [sp, #16]
 8013972:	4605      	mov	r5, r0
 8013974:	b166      	cbz	r6, 8013990 <_dtoa_r+0x670>
 8013976:	9a06      	ldr	r2, [sp, #24]
 8013978:	2a00      	cmp	r2, #0
 801397a:	dd09      	ble.n	8013990 <_dtoa_r+0x670>
 801397c:	42b2      	cmp	r2, r6
 801397e:	9905      	ldr	r1, [sp, #20]
 8013980:	bfa8      	it	ge
 8013982:	4632      	movge	r2, r6
 8013984:	1a89      	subs	r1, r1, r2
 8013986:	9105      	str	r1, [sp, #20]
 8013988:	9906      	ldr	r1, [sp, #24]
 801398a:	1ab6      	subs	r6, r6, r2
 801398c:	1a8a      	subs	r2, r1, r2
 801398e:	9206      	str	r2, [sp, #24]
 8013990:	b1fb      	cbz	r3, 80139d2 <_dtoa_r+0x6b2>
 8013992:	9a08      	ldr	r2, [sp, #32]
 8013994:	2a00      	cmp	r2, #0
 8013996:	f000 80bc 	beq.w	8013b12 <_dtoa_r+0x7f2>
 801399a:	b19c      	cbz	r4, 80139c4 <_dtoa_r+0x6a4>
 801399c:	4629      	mov	r1, r5
 801399e:	4622      	mov	r2, r4
 80139a0:	4648      	mov	r0, r9
 80139a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139a4:	f000 fc10 	bl	80141c8 <__pow5mult>
 80139a8:	9a01      	ldr	r2, [sp, #4]
 80139aa:	4601      	mov	r1, r0
 80139ac:	4605      	mov	r5, r0
 80139ae:	4648      	mov	r0, r9
 80139b0:	f000 fb60 	bl	8014074 <__multiply>
 80139b4:	9901      	ldr	r1, [sp, #4]
 80139b6:	9004      	str	r0, [sp, #16]
 80139b8:	4648      	mov	r0, r9
 80139ba:	f000 fa91 	bl	8013ee0 <_Bfree>
 80139be:	9a04      	ldr	r2, [sp, #16]
 80139c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139c2:	9201      	str	r2, [sp, #4]
 80139c4:	1b1a      	subs	r2, r3, r4
 80139c6:	d004      	beq.n	80139d2 <_dtoa_r+0x6b2>
 80139c8:	9901      	ldr	r1, [sp, #4]
 80139ca:	4648      	mov	r0, r9
 80139cc:	f000 fbfc 	bl	80141c8 <__pow5mult>
 80139d0:	9001      	str	r0, [sp, #4]
 80139d2:	2101      	movs	r1, #1
 80139d4:	4648      	mov	r0, r9
 80139d6:	f000 fb37 	bl	8014048 <__i2b>
 80139da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139dc:	4604      	mov	r4, r0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	f000 81d0 	beq.w	8013d84 <_dtoa_r+0xa64>
 80139e4:	461a      	mov	r2, r3
 80139e6:	4601      	mov	r1, r0
 80139e8:	4648      	mov	r0, r9
 80139ea:	f000 fbed 	bl	80141c8 <__pow5mult>
 80139ee:	9b07      	ldr	r3, [sp, #28]
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	4604      	mov	r4, r0
 80139f4:	f300 8095 	bgt.w	8013b22 <_dtoa_r+0x802>
 80139f8:	9b02      	ldr	r3, [sp, #8]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	f040 808b 	bne.w	8013b16 <_dtoa_r+0x7f6>
 8013a00:	9b03      	ldr	r3, [sp, #12]
 8013a02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013a06:	2a00      	cmp	r2, #0
 8013a08:	f040 8087 	bne.w	8013b1a <_dtoa_r+0x7fa>
 8013a0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013a10:	0d12      	lsrs	r2, r2, #20
 8013a12:	0512      	lsls	r2, r2, #20
 8013a14:	2a00      	cmp	r2, #0
 8013a16:	f000 8082 	beq.w	8013b1e <_dtoa_r+0x7fe>
 8013a1a:	9b05      	ldr	r3, [sp, #20]
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	9305      	str	r3, [sp, #20]
 8013a20:	9b06      	ldr	r3, [sp, #24]
 8013a22:	3301      	adds	r3, #1
 8013a24:	9306      	str	r3, [sp, #24]
 8013a26:	2301      	movs	r3, #1
 8013a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	f000 81af 	beq.w	8013d90 <_dtoa_r+0xa70>
 8013a32:	6922      	ldr	r2, [r4, #16]
 8013a34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013a38:	6910      	ldr	r0, [r2, #16]
 8013a3a:	f000 fab9 	bl	8013fb0 <__hi0bits>
 8013a3e:	f1c0 0020 	rsb	r0, r0, #32
 8013a42:	9b06      	ldr	r3, [sp, #24]
 8013a44:	4418      	add	r0, r3
 8013a46:	f010 001f 	ands.w	r0, r0, #31
 8013a4a:	d076      	beq.n	8013b3a <_dtoa_r+0x81a>
 8013a4c:	f1c0 0220 	rsb	r2, r0, #32
 8013a50:	2a04      	cmp	r2, #4
 8013a52:	dd69      	ble.n	8013b28 <_dtoa_r+0x808>
 8013a54:	9b05      	ldr	r3, [sp, #20]
 8013a56:	f1c0 001c 	rsb	r0, r0, #28
 8013a5a:	4403      	add	r3, r0
 8013a5c:	9305      	str	r3, [sp, #20]
 8013a5e:	9b06      	ldr	r3, [sp, #24]
 8013a60:	4406      	add	r6, r0
 8013a62:	4403      	add	r3, r0
 8013a64:	9306      	str	r3, [sp, #24]
 8013a66:	9b05      	ldr	r3, [sp, #20]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	dd05      	ble.n	8013a78 <_dtoa_r+0x758>
 8013a6c:	9901      	ldr	r1, [sp, #4]
 8013a6e:	461a      	mov	r2, r3
 8013a70:	4648      	mov	r0, r9
 8013a72:	f000 fc03 	bl	801427c <__lshift>
 8013a76:	9001      	str	r0, [sp, #4]
 8013a78:	9b06      	ldr	r3, [sp, #24]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	dd05      	ble.n	8013a8a <_dtoa_r+0x76a>
 8013a7e:	4621      	mov	r1, r4
 8013a80:	461a      	mov	r2, r3
 8013a82:	4648      	mov	r0, r9
 8013a84:	f000 fbfa 	bl	801427c <__lshift>
 8013a88:	4604      	mov	r4, r0
 8013a8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d056      	beq.n	8013b3e <_dtoa_r+0x81e>
 8013a90:	9801      	ldr	r0, [sp, #4]
 8013a92:	4621      	mov	r1, r4
 8013a94:	f000 fc5e 	bl	8014354 <__mcmp>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	da50      	bge.n	8013b3e <_dtoa_r+0x81e>
 8013a9c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013aa0:	9304      	str	r3, [sp, #16]
 8013aa2:	9901      	ldr	r1, [sp, #4]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	220a      	movs	r2, #10
 8013aa8:	4648      	mov	r0, r9
 8013aaa:	f000 fa3b 	bl	8013f24 <__multadd>
 8013aae:	9b08      	ldr	r3, [sp, #32]
 8013ab0:	9001      	str	r0, [sp, #4]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	f000 816e 	beq.w	8013d94 <_dtoa_r+0xa74>
 8013ab8:	4629      	mov	r1, r5
 8013aba:	2300      	movs	r3, #0
 8013abc:	220a      	movs	r2, #10
 8013abe:	4648      	mov	r0, r9
 8013ac0:	f000 fa30 	bl	8013f24 <__multadd>
 8013ac4:	f1bb 0f00 	cmp.w	fp, #0
 8013ac8:	4605      	mov	r5, r0
 8013aca:	dc64      	bgt.n	8013b96 <_dtoa_r+0x876>
 8013acc:	9b07      	ldr	r3, [sp, #28]
 8013ace:	2b02      	cmp	r3, #2
 8013ad0:	dc3e      	bgt.n	8013b50 <_dtoa_r+0x830>
 8013ad2:	e060      	b.n	8013b96 <_dtoa_r+0x876>
 8013ad4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ad6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013ada:	e73c      	b.n	8013956 <_dtoa_r+0x636>
 8013adc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013ae0:	42a3      	cmp	r3, r4
 8013ae2:	bfbf      	itttt	lt
 8013ae4:	1ae2      	sublt	r2, r4, r3
 8013ae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013ae8:	189b      	addlt	r3, r3, r2
 8013aea:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013aec:	bfae      	itee	ge
 8013aee:	1b1c      	subge	r4, r3, r4
 8013af0:	4623      	movlt	r3, r4
 8013af2:	2400      	movlt	r4, #0
 8013af4:	f1ba 0f00 	cmp.w	sl, #0
 8013af8:	bfb5      	itete	lt
 8013afa:	9a05      	ldrlt	r2, [sp, #20]
 8013afc:	9e05      	ldrge	r6, [sp, #20]
 8013afe:	eba2 060a 	sublt.w	r6, r2, sl
 8013b02:	4652      	movge	r2, sl
 8013b04:	bfb8      	it	lt
 8013b06:	2200      	movlt	r2, #0
 8013b08:	e727      	b.n	801395a <_dtoa_r+0x63a>
 8013b0a:	9e05      	ldr	r6, [sp, #20]
 8013b0c:	9d08      	ldr	r5, [sp, #32]
 8013b0e:	461c      	mov	r4, r3
 8013b10:	e730      	b.n	8013974 <_dtoa_r+0x654>
 8013b12:	461a      	mov	r2, r3
 8013b14:	e758      	b.n	80139c8 <_dtoa_r+0x6a8>
 8013b16:	2300      	movs	r3, #0
 8013b18:	e786      	b.n	8013a28 <_dtoa_r+0x708>
 8013b1a:	9b02      	ldr	r3, [sp, #8]
 8013b1c:	e784      	b.n	8013a28 <_dtoa_r+0x708>
 8013b1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013b20:	e783      	b.n	8013a2a <_dtoa_r+0x70a>
 8013b22:	2300      	movs	r3, #0
 8013b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b26:	e784      	b.n	8013a32 <_dtoa_r+0x712>
 8013b28:	d09d      	beq.n	8013a66 <_dtoa_r+0x746>
 8013b2a:	9b05      	ldr	r3, [sp, #20]
 8013b2c:	321c      	adds	r2, #28
 8013b2e:	4413      	add	r3, r2
 8013b30:	9305      	str	r3, [sp, #20]
 8013b32:	9b06      	ldr	r3, [sp, #24]
 8013b34:	4416      	add	r6, r2
 8013b36:	4413      	add	r3, r2
 8013b38:	e794      	b.n	8013a64 <_dtoa_r+0x744>
 8013b3a:	4602      	mov	r2, r0
 8013b3c:	e7f5      	b.n	8013b2a <_dtoa_r+0x80a>
 8013b3e:	f1ba 0f00 	cmp.w	sl, #0
 8013b42:	f8cd 8010 	str.w	r8, [sp, #16]
 8013b46:	46d3      	mov	fp, sl
 8013b48:	dc21      	bgt.n	8013b8e <_dtoa_r+0x86e>
 8013b4a:	9b07      	ldr	r3, [sp, #28]
 8013b4c:	2b02      	cmp	r3, #2
 8013b4e:	dd1e      	ble.n	8013b8e <_dtoa_r+0x86e>
 8013b50:	f1bb 0f00 	cmp.w	fp, #0
 8013b54:	f47f aeb7 	bne.w	80138c6 <_dtoa_r+0x5a6>
 8013b58:	4621      	mov	r1, r4
 8013b5a:	465b      	mov	r3, fp
 8013b5c:	2205      	movs	r2, #5
 8013b5e:	4648      	mov	r0, r9
 8013b60:	f000 f9e0 	bl	8013f24 <__multadd>
 8013b64:	4601      	mov	r1, r0
 8013b66:	4604      	mov	r4, r0
 8013b68:	9801      	ldr	r0, [sp, #4]
 8013b6a:	f000 fbf3 	bl	8014354 <__mcmp>
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	f77f aea9 	ble.w	80138c6 <_dtoa_r+0x5a6>
 8013b74:	463e      	mov	r6, r7
 8013b76:	2331      	movs	r3, #49	@ 0x31
 8013b78:	f806 3b01 	strb.w	r3, [r6], #1
 8013b7c:	9b04      	ldr	r3, [sp, #16]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	9304      	str	r3, [sp, #16]
 8013b82:	e6a4      	b.n	80138ce <_dtoa_r+0x5ae>
 8013b84:	f8cd 8010 	str.w	r8, [sp, #16]
 8013b88:	4654      	mov	r4, sl
 8013b8a:	4625      	mov	r5, r4
 8013b8c:	e7f2      	b.n	8013b74 <_dtoa_r+0x854>
 8013b8e:	9b08      	ldr	r3, [sp, #32]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	f000 8103 	beq.w	8013d9c <_dtoa_r+0xa7c>
 8013b96:	2e00      	cmp	r6, #0
 8013b98:	dd05      	ble.n	8013ba6 <_dtoa_r+0x886>
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	4632      	mov	r2, r6
 8013b9e:	4648      	mov	r0, r9
 8013ba0:	f000 fb6c 	bl	801427c <__lshift>
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d058      	beq.n	8013c5e <_dtoa_r+0x93e>
 8013bac:	6869      	ldr	r1, [r5, #4]
 8013bae:	4648      	mov	r0, r9
 8013bb0:	f000 f956 	bl	8013e60 <_Balloc>
 8013bb4:	4606      	mov	r6, r0
 8013bb6:	b928      	cbnz	r0, 8013bc4 <_dtoa_r+0x8a4>
 8013bb8:	4b82      	ldr	r3, [pc, #520]	@ (8013dc4 <_dtoa_r+0xaa4>)
 8013bba:	4602      	mov	r2, r0
 8013bbc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013bc0:	f7ff bbc7 	b.w	8013352 <_dtoa_r+0x32>
 8013bc4:	692a      	ldr	r2, [r5, #16]
 8013bc6:	3202      	adds	r2, #2
 8013bc8:	0092      	lsls	r2, r2, #2
 8013bca:	f105 010c 	add.w	r1, r5, #12
 8013bce:	300c      	adds	r0, #12
 8013bd0:	f000 fee6 	bl	80149a0 <memcpy>
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	4631      	mov	r1, r6
 8013bd8:	4648      	mov	r0, r9
 8013bda:	f000 fb4f 	bl	801427c <__lshift>
 8013bde:	1c7b      	adds	r3, r7, #1
 8013be0:	9305      	str	r3, [sp, #20]
 8013be2:	eb07 030b 	add.w	r3, r7, fp
 8013be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8013be8:	9b02      	ldr	r3, [sp, #8]
 8013bea:	f003 0301 	and.w	r3, r3, #1
 8013bee:	46a8      	mov	r8, r5
 8013bf0:	9308      	str	r3, [sp, #32]
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	9b05      	ldr	r3, [sp, #20]
 8013bf6:	9801      	ldr	r0, [sp, #4]
 8013bf8:	4621      	mov	r1, r4
 8013bfa:	f103 3bff 	add.w	fp, r3, #4294967295
 8013bfe:	f7ff fb04 	bl	801320a <quorem>
 8013c02:	4641      	mov	r1, r8
 8013c04:	9002      	str	r0, [sp, #8]
 8013c06:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013c0a:	9801      	ldr	r0, [sp, #4]
 8013c0c:	f000 fba2 	bl	8014354 <__mcmp>
 8013c10:	462a      	mov	r2, r5
 8013c12:	9006      	str	r0, [sp, #24]
 8013c14:	4621      	mov	r1, r4
 8013c16:	4648      	mov	r0, r9
 8013c18:	f000 fbb8 	bl	801438c <__mdiff>
 8013c1c:	68c2      	ldr	r2, [r0, #12]
 8013c1e:	4606      	mov	r6, r0
 8013c20:	b9fa      	cbnz	r2, 8013c62 <_dtoa_r+0x942>
 8013c22:	4601      	mov	r1, r0
 8013c24:	9801      	ldr	r0, [sp, #4]
 8013c26:	f000 fb95 	bl	8014354 <__mcmp>
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	4631      	mov	r1, r6
 8013c2e:	4648      	mov	r0, r9
 8013c30:	920a      	str	r2, [sp, #40]	@ 0x28
 8013c32:	f000 f955 	bl	8013ee0 <_Bfree>
 8013c36:	9b07      	ldr	r3, [sp, #28]
 8013c38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c3a:	9e05      	ldr	r6, [sp, #20]
 8013c3c:	ea43 0102 	orr.w	r1, r3, r2
 8013c40:	9b08      	ldr	r3, [sp, #32]
 8013c42:	4319      	orrs	r1, r3
 8013c44:	d10f      	bne.n	8013c66 <_dtoa_r+0x946>
 8013c46:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013c4a:	d028      	beq.n	8013c9e <_dtoa_r+0x97e>
 8013c4c:	9b06      	ldr	r3, [sp, #24]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	dd02      	ble.n	8013c58 <_dtoa_r+0x938>
 8013c52:	9b02      	ldr	r3, [sp, #8]
 8013c54:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013c58:	f88b a000 	strb.w	sl, [fp]
 8013c5c:	e639      	b.n	80138d2 <_dtoa_r+0x5b2>
 8013c5e:	4628      	mov	r0, r5
 8013c60:	e7bd      	b.n	8013bde <_dtoa_r+0x8be>
 8013c62:	2201      	movs	r2, #1
 8013c64:	e7e2      	b.n	8013c2c <_dtoa_r+0x90c>
 8013c66:	9b06      	ldr	r3, [sp, #24]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	db04      	blt.n	8013c76 <_dtoa_r+0x956>
 8013c6c:	9907      	ldr	r1, [sp, #28]
 8013c6e:	430b      	orrs	r3, r1
 8013c70:	9908      	ldr	r1, [sp, #32]
 8013c72:	430b      	orrs	r3, r1
 8013c74:	d120      	bne.n	8013cb8 <_dtoa_r+0x998>
 8013c76:	2a00      	cmp	r2, #0
 8013c78:	ddee      	ble.n	8013c58 <_dtoa_r+0x938>
 8013c7a:	9901      	ldr	r1, [sp, #4]
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	4648      	mov	r0, r9
 8013c80:	f000 fafc 	bl	801427c <__lshift>
 8013c84:	4621      	mov	r1, r4
 8013c86:	9001      	str	r0, [sp, #4]
 8013c88:	f000 fb64 	bl	8014354 <__mcmp>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	dc03      	bgt.n	8013c98 <_dtoa_r+0x978>
 8013c90:	d1e2      	bne.n	8013c58 <_dtoa_r+0x938>
 8013c92:	f01a 0f01 	tst.w	sl, #1
 8013c96:	d0df      	beq.n	8013c58 <_dtoa_r+0x938>
 8013c98:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013c9c:	d1d9      	bne.n	8013c52 <_dtoa_r+0x932>
 8013c9e:	2339      	movs	r3, #57	@ 0x39
 8013ca0:	f88b 3000 	strb.w	r3, [fp]
 8013ca4:	4633      	mov	r3, r6
 8013ca6:	461e      	mov	r6, r3
 8013ca8:	3b01      	subs	r3, #1
 8013caa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013cae:	2a39      	cmp	r2, #57	@ 0x39
 8013cb0:	d053      	beq.n	8013d5a <_dtoa_r+0xa3a>
 8013cb2:	3201      	adds	r2, #1
 8013cb4:	701a      	strb	r2, [r3, #0]
 8013cb6:	e60c      	b.n	80138d2 <_dtoa_r+0x5b2>
 8013cb8:	2a00      	cmp	r2, #0
 8013cba:	dd07      	ble.n	8013ccc <_dtoa_r+0x9ac>
 8013cbc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013cc0:	d0ed      	beq.n	8013c9e <_dtoa_r+0x97e>
 8013cc2:	f10a 0301 	add.w	r3, sl, #1
 8013cc6:	f88b 3000 	strb.w	r3, [fp]
 8013cca:	e602      	b.n	80138d2 <_dtoa_r+0x5b2>
 8013ccc:	9b05      	ldr	r3, [sp, #20]
 8013cce:	9a05      	ldr	r2, [sp, #20]
 8013cd0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cd6:	4293      	cmp	r3, r2
 8013cd8:	d029      	beq.n	8013d2e <_dtoa_r+0xa0e>
 8013cda:	9901      	ldr	r1, [sp, #4]
 8013cdc:	2300      	movs	r3, #0
 8013cde:	220a      	movs	r2, #10
 8013ce0:	4648      	mov	r0, r9
 8013ce2:	f000 f91f 	bl	8013f24 <__multadd>
 8013ce6:	45a8      	cmp	r8, r5
 8013ce8:	9001      	str	r0, [sp, #4]
 8013cea:	f04f 0300 	mov.w	r3, #0
 8013cee:	f04f 020a 	mov.w	r2, #10
 8013cf2:	4641      	mov	r1, r8
 8013cf4:	4648      	mov	r0, r9
 8013cf6:	d107      	bne.n	8013d08 <_dtoa_r+0x9e8>
 8013cf8:	f000 f914 	bl	8013f24 <__multadd>
 8013cfc:	4680      	mov	r8, r0
 8013cfe:	4605      	mov	r5, r0
 8013d00:	9b05      	ldr	r3, [sp, #20]
 8013d02:	3301      	adds	r3, #1
 8013d04:	9305      	str	r3, [sp, #20]
 8013d06:	e775      	b.n	8013bf4 <_dtoa_r+0x8d4>
 8013d08:	f000 f90c 	bl	8013f24 <__multadd>
 8013d0c:	4629      	mov	r1, r5
 8013d0e:	4680      	mov	r8, r0
 8013d10:	2300      	movs	r3, #0
 8013d12:	220a      	movs	r2, #10
 8013d14:	4648      	mov	r0, r9
 8013d16:	f000 f905 	bl	8013f24 <__multadd>
 8013d1a:	4605      	mov	r5, r0
 8013d1c:	e7f0      	b.n	8013d00 <_dtoa_r+0x9e0>
 8013d1e:	f1bb 0f00 	cmp.w	fp, #0
 8013d22:	bfcc      	ite	gt
 8013d24:	465e      	movgt	r6, fp
 8013d26:	2601      	movle	r6, #1
 8013d28:	443e      	add	r6, r7
 8013d2a:	f04f 0800 	mov.w	r8, #0
 8013d2e:	9901      	ldr	r1, [sp, #4]
 8013d30:	2201      	movs	r2, #1
 8013d32:	4648      	mov	r0, r9
 8013d34:	f000 faa2 	bl	801427c <__lshift>
 8013d38:	4621      	mov	r1, r4
 8013d3a:	9001      	str	r0, [sp, #4]
 8013d3c:	f000 fb0a 	bl	8014354 <__mcmp>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	dcaf      	bgt.n	8013ca4 <_dtoa_r+0x984>
 8013d44:	d102      	bne.n	8013d4c <_dtoa_r+0xa2c>
 8013d46:	f01a 0f01 	tst.w	sl, #1
 8013d4a:	d1ab      	bne.n	8013ca4 <_dtoa_r+0x984>
 8013d4c:	4633      	mov	r3, r6
 8013d4e:	461e      	mov	r6, r3
 8013d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d54:	2a30      	cmp	r2, #48	@ 0x30
 8013d56:	d0fa      	beq.n	8013d4e <_dtoa_r+0xa2e>
 8013d58:	e5bb      	b.n	80138d2 <_dtoa_r+0x5b2>
 8013d5a:	429f      	cmp	r7, r3
 8013d5c:	d1a3      	bne.n	8013ca6 <_dtoa_r+0x986>
 8013d5e:	9b04      	ldr	r3, [sp, #16]
 8013d60:	3301      	adds	r3, #1
 8013d62:	9304      	str	r3, [sp, #16]
 8013d64:	2331      	movs	r3, #49	@ 0x31
 8013d66:	703b      	strb	r3, [r7, #0]
 8013d68:	e5b3      	b.n	80138d2 <_dtoa_r+0x5b2>
 8013d6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013d6c:	4f16      	ldr	r7, [pc, #88]	@ (8013dc8 <_dtoa_r+0xaa8>)
 8013d6e:	b11b      	cbz	r3, 8013d78 <_dtoa_r+0xa58>
 8013d70:	f107 0308 	add.w	r3, r7, #8
 8013d74:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	4638      	mov	r0, r7
 8013d7a:	b011      	add	sp, #68	@ 0x44
 8013d7c:	ecbd 8b02 	vpop	{d8}
 8013d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d84:	9b07      	ldr	r3, [sp, #28]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	f77f ae36 	ble.w	80139f8 <_dtoa_r+0x6d8>
 8013d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d90:	2001      	movs	r0, #1
 8013d92:	e656      	b.n	8013a42 <_dtoa_r+0x722>
 8013d94:	f1bb 0f00 	cmp.w	fp, #0
 8013d98:	f77f aed7 	ble.w	8013b4a <_dtoa_r+0x82a>
 8013d9c:	463e      	mov	r6, r7
 8013d9e:	9801      	ldr	r0, [sp, #4]
 8013da0:	4621      	mov	r1, r4
 8013da2:	f7ff fa32 	bl	801320a <quorem>
 8013da6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013daa:	f806 ab01 	strb.w	sl, [r6], #1
 8013dae:	1bf2      	subs	r2, r6, r7
 8013db0:	4593      	cmp	fp, r2
 8013db2:	ddb4      	ble.n	8013d1e <_dtoa_r+0x9fe>
 8013db4:	9901      	ldr	r1, [sp, #4]
 8013db6:	2300      	movs	r3, #0
 8013db8:	220a      	movs	r2, #10
 8013dba:	4648      	mov	r0, r9
 8013dbc:	f000 f8b2 	bl	8013f24 <__multadd>
 8013dc0:	9001      	str	r0, [sp, #4]
 8013dc2:	e7ec      	b.n	8013d9e <_dtoa_r+0xa7e>
 8013dc4:	08016200 	.word	0x08016200
 8013dc8:	08016184 	.word	0x08016184

08013dcc <_free_r>:
 8013dcc:	b538      	push	{r3, r4, r5, lr}
 8013dce:	4605      	mov	r5, r0
 8013dd0:	2900      	cmp	r1, #0
 8013dd2:	d041      	beq.n	8013e58 <_free_r+0x8c>
 8013dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dd8:	1f0c      	subs	r4, r1, #4
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	bfb8      	it	lt
 8013dde:	18e4      	addlt	r4, r4, r3
 8013de0:	f7fe fc1a 	bl	8012618 <__malloc_lock>
 8013de4:	4a1d      	ldr	r2, [pc, #116]	@ (8013e5c <_free_r+0x90>)
 8013de6:	6813      	ldr	r3, [r2, #0]
 8013de8:	b933      	cbnz	r3, 8013df8 <_free_r+0x2c>
 8013dea:	6063      	str	r3, [r4, #4]
 8013dec:	6014      	str	r4, [r2, #0]
 8013dee:	4628      	mov	r0, r5
 8013df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013df4:	f7fe bc16 	b.w	8012624 <__malloc_unlock>
 8013df8:	42a3      	cmp	r3, r4
 8013dfa:	d908      	bls.n	8013e0e <_free_r+0x42>
 8013dfc:	6820      	ldr	r0, [r4, #0]
 8013dfe:	1821      	adds	r1, r4, r0
 8013e00:	428b      	cmp	r3, r1
 8013e02:	bf01      	itttt	eq
 8013e04:	6819      	ldreq	r1, [r3, #0]
 8013e06:	685b      	ldreq	r3, [r3, #4]
 8013e08:	1809      	addeq	r1, r1, r0
 8013e0a:	6021      	streq	r1, [r4, #0]
 8013e0c:	e7ed      	b.n	8013dea <_free_r+0x1e>
 8013e0e:	461a      	mov	r2, r3
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	b10b      	cbz	r3, 8013e18 <_free_r+0x4c>
 8013e14:	42a3      	cmp	r3, r4
 8013e16:	d9fa      	bls.n	8013e0e <_free_r+0x42>
 8013e18:	6811      	ldr	r1, [r2, #0]
 8013e1a:	1850      	adds	r0, r2, r1
 8013e1c:	42a0      	cmp	r0, r4
 8013e1e:	d10b      	bne.n	8013e38 <_free_r+0x6c>
 8013e20:	6820      	ldr	r0, [r4, #0]
 8013e22:	4401      	add	r1, r0
 8013e24:	1850      	adds	r0, r2, r1
 8013e26:	4283      	cmp	r3, r0
 8013e28:	6011      	str	r1, [r2, #0]
 8013e2a:	d1e0      	bne.n	8013dee <_free_r+0x22>
 8013e2c:	6818      	ldr	r0, [r3, #0]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	6053      	str	r3, [r2, #4]
 8013e32:	4408      	add	r0, r1
 8013e34:	6010      	str	r0, [r2, #0]
 8013e36:	e7da      	b.n	8013dee <_free_r+0x22>
 8013e38:	d902      	bls.n	8013e40 <_free_r+0x74>
 8013e3a:	230c      	movs	r3, #12
 8013e3c:	602b      	str	r3, [r5, #0]
 8013e3e:	e7d6      	b.n	8013dee <_free_r+0x22>
 8013e40:	6820      	ldr	r0, [r4, #0]
 8013e42:	1821      	adds	r1, r4, r0
 8013e44:	428b      	cmp	r3, r1
 8013e46:	bf04      	itt	eq
 8013e48:	6819      	ldreq	r1, [r3, #0]
 8013e4a:	685b      	ldreq	r3, [r3, #4]
 8013e4c:	6063      	str	r3, [r4, #4]
 8013e4e:	bf04      	itt	eq
 8013e50:	1809      	addeq	r1, r1, r0
 8013e52:	6021      	streq	r1, [r4, #0]
 8013e54:	6054      	str	r4, [r2, #4]
 8013e56:	e7ca      	b.n	8013dee <_free_r+0x22>
 8013e58:	bd38      	pop	{r3, r4, r5, pc}
 8013e5a:	bf00      	nop
 8013e5c:	24002340 	.word	0x24002340

08013e60 <_Balloc>:
 8013e60:	b570      	push	{r4, r5, r6, lr}
 8013e62:	69c6      	ldr	r6, [r0, #28]
 8013e64:	4604      	mov	r4, r0
 8013e66:	460d      	mov	r5, r1
 8013e68:	b976      	cbnz	r6, 8013e88 <_Balloc+0x28>
 8013e6a:	2010      	movs	r0, #16
 8013e6c:	f7fe fb2a 	bl	80124c4 <malloc>
 8013e70:	4602      	mov	r2, r0
 8013e72:	61e0      	str	r0, [r4, #28]
 8013e74:	b920      	cbnz	r0, 8013e80 <_Balloc+0x20>
 8013e76:	4b18      	ldr	r3, [pc, #96]	@ (8013ed8 <_Balloc+0x78>)
 8013e78:	4818      	ldr	r0, [pc, #96]	@ (8013edc <_Balloc+0x7c>)
 8013e7a:	216b      	movs	r1, #107	@ 0x6b
 8013e7c:	f000 fd9e 	bl	80149bc <__assert_func>
 8013e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e84:	6006      	str	r6, [r0, #0]
 8013e86:	60c6      	str	r6, [r0, #12]
 8013e88:	69e6      	ldr	r6, [r4, #28]
 8013e8a:	68f3      	ldr	r3, [r6, #12]
 8013e8c:	b183      	cbz	r3, 8013eb0 <_Balloc+0x50>
 8013e8e:	69e3      	ldr	r3, [r4, #28]
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013e96:	b9b8      	cbnz	r0, 8013ec8 <_Balloc+0x68>
 8013e98:	2101      	movs	r1, #1
 8013e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8013e9e:	1d72      	adds	r2, r6, #5
 8013ea0:	0092      	lsls	r2, r2, #2
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	f000 fda8 	bl	80149f8 <_calloc_r>
 8013ea8:	b160      	cbz	r0, 8013ec4 <_Balloc+0x64>
 8013eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013eae:	e00e      	b.n	8013ece <_Balloc+0x6e>
 8013eb0:	2221      	movs	r2, #33	@ 0x21
 8013eb2:	2104      	movs	r1, #4
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	f000 fd9f 	bl	80149f8 <_calloc_r>
 8013eba:	69e3      	ldr	r3, [r4, #28]
 8013ebc:	60f0      	str	r0, [r6, #12]
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d1e4      	bne.n	8013e8e <_Balloc+0x2e>
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}
 8013ec8:	6802      	ldr	r2, [r0, #0]
 8013eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ece:	2300      	movs	r3, #0
 8013ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ed4:	e7f7      	b.n	8013ec6 <_Balloc+0x66>
 8013ed6:	bf00      	nop
 8013ed8:	08016191 	.word	0x08016191
 8013edc:	08016211 	.word	0x08016211

08013ee0 <_Bfree>:
 8013ee0:	b570      	push	{r4, r5, r6, lr}
 8013ee2:	69c6      	ldr	r6, [r0, #28]
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	460c      	mov	r4, r1
 8013ee8:	b976      	cbnz	r6, 8013f08 <_Bfree+0x28>
 8013eea:	2010      	movs	r0, #16
 8013eec:	f7fe faea 	bl	80124c4 <malloc>
 8013ef0:	4602      	mov	r2, r0
 8013ef2:	61e8      	str	r0, [r5, #28]
 8013ef4:	b920      	cbnz	r0, 8013f00 <_Bfree+0x20>
 8013ef6:	4b09      	ldr	r3, [pc, #36]	@ (8013f1c <_Bfree+0x3c>)
 8013ef8:	4809      	ldr	r0, [pc, #36]	@ (8013f20 <_Bfree+0x40>)
 8013efa:	218f      	movs	r1, #143	@ 0x8f
 8013efc:	f000 fd5e 	bl	80149bc <__assert_func>
 8013f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013f04:	6006      	str	r6, [r0, #0]
 8013f06:	60c6      	str	r6, [r0, #12]
 8013f08:	b13c      	cbz	r4, 8013f1a <_Bfree+0x3a>
 8013f0a:	69eb      	ldr	r3, [r5, #28]
 8013f0c:	6862      	ldr	r2, [r4, #4]
 8013f0e:	68db      	ldr	r3, [r3, #12]
 8013f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013f14:	6021      	str	r1, [r4, #0]
 8013f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013f1a:	bd70      	pop	{r4, r5, r6, pc}
 8013f1c:	08016191 	.word	0x08016191
 8013f20:	08016211 	.word	0x08016211

08013f24 <__multadd>:
 8013f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f28:	690d      	ldr	r5, [r1, #16]
 8013f2a:	4607      	mov	r7, r0
 8013f2c:	460c      	mov	r4, r1
 8013f2e:	461e      	mov	r6, r3
 8013f30:	f101 0c14 	add.w	ip, r1, #20
 8013f34:	2000      	movs	r0, #0
 8013f36:	f8dc 3000 	ldr.w	r3, [ip]
 8013f3a:	b299      	uxth	r1, r3
 8013f3c:	fb02 6101 	mla	r1, r2, r1, r6
 8013f40:	0c1e      	lsrs	r6, r3, #16
 8013f42:	0c0b      	lsrs	r3, r1, #16
 8013f44:	fb02 3306 	mla	r3, r2, r6, r3
 8013f48:	b289      	uxth	r1, r1
 8013f4a:	3001      	adds	r0, #1
 8013f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013f50:	4285      	cmp	r5, r0
 8013f52:	f84c 1b04 	str.w	r1, [ip], #4
 8013f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013f5a:	dcec      	bgt.n	8013f36 <__multadd+0x12>
 8013f5c:	b30e      	cbz	r6, 8013fa2 <__multadd+0x7e>
 8013f5e:	68a3      	ldr	r3, [r4, #8]
 8013f60:	42ab      	cmp	r3, r5
 8013f62:	dc19      	bgt.n	8013f98 <__multadd+0x74>
 8013f64:	6861      	ldr	r1, [r4, #4]
 8013f66:	4638      	mov	r0, r7
 8013f68:	3101      	adds	r1, #1
 8013f6a:	f7ff ff79 	bl	8013e60 <_Balloc>
 8013f6e:	4680      	mov	r8, r0
 8013f70:	b928      	cbnz	r0, 8013f7e <__multadd+0x5a>
 8013f72:	4602      	mov	r2, r0
 8013f74:	4b0c      	ldr	r3, [pc, #48]	@ (8013fa8 <__multadd+0x84>)
 8013f76:	480d      	ldr	r0, [pc, #52]	@ (8013fac <__multadd+0x88>)
 8013f78:	21ba      	movs	r1, #186	@ 0xba
 8013f7a:	f000 fd1f 	bl	80149bc <__assert_func>
 8013f7e:	6922      	ldr	r2, [r4, #16]
 8013f80:	3202      	adds	r2, #2
 8013f82:	f104 010c 	add.w	r1, r4, #12
 8013f86:	0092      	lsls	r2, r2, #2
 8013f88:	300c      	adds	r0, #12
 8013f8a:	f000 fd09 	bl	80149a0 <memcpy>
 8013f8e:	4621      	mov	r1, r4
 8013f90:	4638      	mov	r0, r7
 8013f92:	f7ff ffa5 	bl	8013ee0 <_Bfree>
 8013f96:	4644      	mov	r4, r8
 8013f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f9c:	3501      	adds	r5, #1
 8013f9e:	615e      	str	r6, [r3, #20]
 8013fa0:	6125      	str	r5, [r4, #16]
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fa8:	08016200 	.word	0x08016200
 8013fac:	08016211 	.word	0x08016211

08013fb0 <__hi0bits>:
 8013fb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	bf36      	itet	cc
 8013fb8:	0403      	lslcc	r3, r0, #16
 8013fba:	2000      	movcs	r0, #0
 8013fbc:	2010      	movcc	r0, #16
 8013fbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013fc2:	bf3c      	itt	cc
 8013fc4:	021b      	lslcc	r3, r3, #8
 8013fc6:	3008      	addcc	r0, #8
 8013fc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013fcc:	bf3c      	itt	cc
 8013fce:	011b      	lslcc	r3, r3, #4
 8013fd0:	3004      	addcc	r0, #4
 8013fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013fd6:	bf3c      	itt	cc
 8013fd8:	009b      	lslcc	r3, r3, #2
 8013fda:	3002      	addcc	r0, #2
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	db05      	blt.n	8013fec <__hi0bits+0x3c>
 8013fe0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013fe4:	f100 0001 	add.w	r0, r0, #1
 8013fe8:	bf08      	it	eq
 8013fea:	2020      	moveq	r0, #32
 8013fec:	4770      	bx	lr

08013fee <__lo0bits>:
 8013fee:	6803      	ldr	r3, [r0, #0]
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	f013 0007 	ands.w	r0, r3, #7
 8013ff6:	d00b      	beq.n	8014010 <__lo0bits+0x22>
 8013ff8:	07d9      	lsls	r1, r3, #31
 8013ffa:	d421      	bmi.n	8014040 <__lo0bits+0x52>
 8013ffc:	0798      	lsls	r0, r3, #30
 8013ffe:	bf49      	itett	mi
 8014000:	085b      	lsrmi	r3, r3, #1
 8014002:	089b      	lsrpl	r3, r3, #2
 8014004:	2001      	movmi	r0, #1
 8014006:	6013      	strmi	r3, [r2, #0]
 8014008:	bf5c      	itt	pl
 801400a:	6013      	strpl	r3, [r2, #0]
 801400c:	2002      	movpl	r0, #2
 801400e:	4770      	bx	lr
 8014010:	b299      	uxth	r1, r3
 8014012:	b909      	cbnz	r1, 8014018 <__lo0bits+0x2a>
 8014014:	0c1b      	lsrs	r3, r3, #16
 8014016:	2010      	movs	r0, #16
 8014018:	b2d9      	uxtb	r1, r3
 801401a:	b909      	cbnz	r1, 8014020 <__lo0bits+0x32>
 801401c:	3008      	adds	r0, #8
 801401e:	0a1b      	lsrs	r3, r3, #8
 8014020:	0719      	lsls	r1, r3, #28
 8014022:	bf04      	itt	eq
 8014024:	091b      	lsreq	r3, r3, #4
 8014026:	3004      	addeq	r0, #4
 8014028:	0799      	lsls	r1, r3, #30
 801402a:	bf04      	itt	eq
 801402c:	089b      	lsreq	r3, r3, #2
 801402e:	3002      	addeq	r0, #2
 8014030:	07d9      	lsls	r1, r3, #31
 8014032:	d403      	bmi.n	801403c <__lo0bits+0x4e>
 8014034:	085b      	lsrs	r3, r3, #1
 8014036:	f100 0001 	add.w	r0, r0, #1
 801403a:	d003      	beq.n	8014044 <__lo0bits+0x56>
 801403c:	6013      	str	r3, [r2, #0]
 801403e:	4770      	bx	lr
 8014040:	2000      	movs	r0, #0
 8014042:	4770      	bx	lr
 8014044:	2020      	movs	r0, #32
 8014046:	4770      	bx	lr

08014048 <__i2b>:
 8014048:	b510      	push	{r4, lr}
 801404a:	460c      	mov	r4, r1
 801404c:	2101      	movs	r1, #1
 801404e:	f7ff ff07 	bl	8013e60 <_Balloc>
 8014052:	4602      	mov	r2, r0
 8014054:	b928      	cbnz	r0, 8014062 <__i2b+0x1a>
 8014056:	4b05      	ldr	r3, [pc, #20]	@ (801406c <__i2b+0x24>)
 8014058:	4805      	ldr	r0, [pc, #20]	@ (8014070 <__i2b+0x28>)
 801405a:	f240 1145 	movw	r1, #325	@ 0x145
 801405e:	f000 fcad 	bl	80149bc <__assert_func>
 8014062:	2301      	movs	r3, #1
 8014064:	6144      	str	r4, [r0, #20]
 8014066:	6103      	str	r3, [r0, #16]
 8014068:	bd10      	pop	{r4, pc}
 801406a:	bf00      	nop
 801406c:	08016200 	.word	0x08016200
 8014070:	08016211 	.word	0x08016211

08014074 <__multiply>:
 8014074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014078:	4614      	mov	r4, r2
 801407a:	690a      	ldr	r2, [r1, #16]
 801407c:	6923      	ldr	r3, [r4, #16]
 801407e:	429a      	cmp	r2, r3
 8014080:	bfa8      	it	ge
 8014082:	4623      	movge	r3, r4
 8014084:	460f      	mov	r7, r1
 8014086:	bfa4      	itt	ge
 8014088:	460c      	movge	r4, r1
 801408a:	461f      	movge	r7, r3
 801408c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014090:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014094:	68a3      	ldr	r3, [r4, #8]
 8014096:	6861      	ldr	r1, [r4, #4]
 8014098:	eb0a 0609 	add.w	r6, sl, r9
 801409c:	42b3      	cmp	r3, r6
 801409e:	b085      	sub	sp, #20
 80140a0:	bfb8      	it	lt
 80140a2:	3101      	addlt	r1, #1
 80140a4:	f7ff fedc 	bl	8013e60 <_Balloc>
 80140a8:	b930      	cbnz	r0, 80140b8 <__multiply+0x44>
 80140aa:	4602      	mov	r2, r0
 80140ac:	4b44      	ldr	r3, [pc, #272]	@ (80141c0 <__multiply+0x14c>)
 80140ae:	4845      	ldr	r0, [pc, #276]	@ (80141c4 <__multiply+0x150>)
 80140b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80140b4:	f000 fc82 	bl	80149bc <__assert_func>
 80140b8:	f100 0514 	add.w	r5, r0, #20
 80140bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80140c0:	462b      	mov	r3, r5
 80140c2:	2200      	movs	r2, #0
 80140c4:	4543      	cmp	r3, r8
 80140c6:	d321      	bcc.n	801410c <__multiply+0x98>
 80140c8:	f107 0114 	add.w	r1, r7, #20
 80140cc:	f104 0214 	add.w	r2, r4, #20
 80140d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80140d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80140d8:	9302      	str	r3, [sp, #8]
 80140da:	1b13      	subs	r3, r2, r4
 80140dc:	3b15      	subs	r3, #21
 80140de:	f023 0303 	bic.w	r3, r3, #3
 80140e2:	3304      	adds	r3, #4
 80140e4:	f104 0715 	add.w	r7, r4, #21
 80140e8:	42ba      	cmp	r2, r7
 80140ea:	bf38      	it	cc
 80140ec:	2304      	movcc	r3, #4
 80140ee:	9301      	str	r3, [sp, #4]
 80140f0:	9b02      	ldr	r3, [sp, #8]
 80140f2:	9103      	str	r1, [sp, #12]
 80140f4:	428b      	cmp	r3, r1
 80140f6:	d80c      	bhi.n	8014112 <__multiply+0x9e>
 80140f8:	2e00      	cmp	r6, #0
 80140fa:	dd03      	ble.n	8014104 <__multiply+0x90>
 80140fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014100:	2b00      	cmp	r3, #0
 8014102:	d05b      	beq.n	80141bc <__multiply+0x148>
 8014104:	6106      	str	r6, [r0, #16]
 8014106:	b005      	add	sp, #20
 8014108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801410c:	f843 2b04 	str.w	r2, [r3], #4
 8014110:	e7d8      	b.n	80140c4 <__multiply+0x50>
 8014112:	f8b1 a000 	ldrh.w	sl, [r1]
 8014116:	f1ba 0f00 	cmp.w	sl, #0
 801411a:	d024      	beq.n	8014166 <__multiply+0xf2>
 801411c:	f104 0e14 	add.w	lr, r4, #20
 8014120:	46a9      	mov	r9, r5
 8014122:	f04f 0c00 	mov.w	ip, #0
 8014126:	f85e 7b04 	ldr.w	r7, [lr], #4
 801412a:	f8d9 3000 	ldr.w	r3, [r9]
 801412e:	fa1f fb87 	uxth.w	fp, r7
 8014132:	b29b      	uxth	r3, r3
 8014134:	fb0a 330b 	mla	r3, sl, fp, r3
 8014138:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801413c:	f8d9 7000 	ldr.w	r7, [r9]
 8014140:	4463      	add	r3, ip
 8014142:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014146:	fb0a c70b 	mla	r7, sl, fp, ip
 801414a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801414e:	b29b      	uxth	r3, r3
 8014150:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014154:	4572      	cmp	r2, lr
 8014156:	f849 3b04 	str.w	r3, [r9], #4
 801415a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801415e:	d8e2      	bhi.n	8014126 <__multiply+0xb2>
 8014160:	9b01      	ldr	r3, [sp, #4]
 8014162:	f845 c003 	str.w	ip, [r5, r3]
 8014166:	9b03      	ldr	r3, [sp, #12]
 8014168:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801416c:	3104      	adds	r1, #4
 801416e:	f1b9 0f00 	cmp.w	r9, #0
 8014172:	d021      	beq.n	80141b8 <__multiply+0x144>
 8014174:	682b      	ldr	r3, [r5, #0]
 8014176:	f104 0c14 	add.w	ip, r4, #20
 801417a:	46ae      	mov	lr, r5
 801417c:	f04f 0a00 	mov.w	sl, #0
 8014180:	f8bc b000 	ldrh.w	fp, [ip]
 8014184:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014188:	fb09 770b 	mla	r7, r9, fp, r7
 801418c:	4457      	add	r7, sl
 801418e:	b29b      	uxth	r3, r3
 8014190:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014194:	f84e 3b04 	str.w	r3, [lr], #4
 8014198:	f85c 3b04 	ldr.w	r3, [ip], #4
 801419c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141a0:	f8be 3000 	ldrh.w	r3, [lr]
 80141a4:	fb09 330a 	mla	r3, r9, sl, r3
 80141a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80141ac:	4562      	cmp	r2, ip
 80141ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141b2:	d8e5      	bhi.n	8014180 <__multiply+0x10c>
 80141b4:	9f01      	ldr	r7, [sp, #4]
 80141b6:	51eb      	str	r3, [r5, r7]
 80141b8:	3504      	adds	r5, #4
 80141ba:	e799      	b.n	80140f0 <__multiply+0x7c>
 80141bc:	3e01      	subs	r6, #1
 80141be:	e79b      	b.n	80140f8 <__multiply+0x84>
 80141c0:	08016200 	.word	0x08016200
 80141c4:	08016211 	.word	0x08016211

080141c8 <__pow5mult>:
 80141c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141cc:	4615      	mov	r5, r2
 80141ce:	f012 0203 	ands.w	r2, r2, #3
 80141d2:	4607      	mov	r7, r0
 80141d4:	460e      	mov	r6, r1
 80141d6:	d007      	beq.n	80141e8 <__pow5mult+0x20>
 80141d8:	4c25      	ldr	r4, [pc, #148]	@ (8014270 <__pow5mult+0xa8>)
 80141da:	3a01      	subs	r2, #1
 80141dc:	2300      	movs	r3, #0
 80141de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80141e2:	f7ff fe9f 	bl	8013f24 <__multadd>
 80141e6:	4606      	mov	r6, r0
 80141e8:	10ad      	asrs	r5, r5, #2
 80141ea:	d03d      	beq.n	8014268 <__pow5mult+0xa0>
 80141ec:	69fc      	ldr	r4, [r7, #28]
 80141ee:	b97c      	cbnz	r4, 8014210 <__pow5mult+0x48>
 80141f0:	2010      	movs	r0, #16
 80141f2:	f7fe f967 	bl	80124c4 <malloc>
 80141f6:	4602      	mov	r2, r0
 80141f8:	61f8      	str	r0, [r7, #28]
 80141fa:	b928      	cbnz	r0, 8014208 <__pow5mult+0x40>
 80141fc:	4b1d      	ldr	r3, [pc, #116]	@ (8014274 <__pow5mult+0xac>)
 80141fe:	481e      	ldr	r0, [pc, #120]	@ (8014278 <__pow5mult+0xb0>)
 8014200:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014204:	f000 fbda 	bl	80149bc <__assert_func>
 8014208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801420c:	6004      	str	r4, [r0, #0]
 801420e:	60c4      	str	r4, [r0, #12]
 8014210:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014218:	b94c      	cbnz	r4, 801422e <__pow5mult+0x66>
 801421a:	f240 2171 	movw	r1, #625	@ 0x271
 801421e:	4638      	mov	r0, r7
 8014220:	f7ff ff12 	bl	8014048 <__i2b>
 8014224:	2300      	movs	r3, #0
 8014226:	f8c8 0008 	str.w	r0, [r8, #8]
 801422a:	4604      	mov	r4, r0
 801422c:	6003      	str	r3, [r0, #0]
 801422e:	f04f 0900 	mov.w	r9, #0
 8014232:	07eb      	lsls	r3, r5, #31
 8014234:	d50a      	bpl.n	801424c <__pow5mult+0x84>
 8014236:	4631      	mov	r1, r6
 8014238:	4622      	mov	r2, r4
 801423a:	4638      	mov	r0, r7
 801423c:	f7ff ff1a 	bl	8014074 <__multiply>
 8014240:	4631      	mov	r1, r6
 8014242:	4680      	mov	r8, r0
 8014244:	4638      	mov	r0, r7
 8014246:	f7ff fe4b 	bl	8013ee0 <_Bfree>
 801424a:	4646      	mov	r6, r8
 801424c:	106d      	asrs	r5, r5, #1
 801424e:	d00b      	beq.n	8014268 <__pow5mult+0xa0>
 8014250:	6820      	ldr	r0, [r4, #0]
 8014252:	b938      	cbnz	r0, 8014264 <__pow5mult+0x9c>
 8014254:	4622      	mov	r2, r4
 8014256:	4621      	mov	r1, r4
 8014258:	4638      	mov	r0, r7
 801425a:	f7ff ff0b 	bl	8014074 <__multiply>
 801425e:	6020      	str	r0, [r4, #0]
 8014260:	f8c0 9000 	str.w	r9, [r0]
 8014264:	4604      	mov	r4, r0
 8014266:	e7e4      	b.n	8014232 <__pow5mult+0x6a>
 8014268:	4630      	mov	r0, r6
 801426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801426e:	bf00      	nop
 8014270:	0801626c 	.word	0x0801626c
 8014274:	08016191 	.word	0x08016191
 8014278:	08016211 	.word	0x08016211

0801427c <__lshift>:
 801427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014280:	460c      	mov	r4, r1
 8014282:	6849      	ldr	r1, [r1, #4]
 8014284:	6923      	ldr	r3, [r4, #16]
 8014286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801428a:	68a3      	ldr	r3, [r4, #8]
 801428c:	4607      	mov	r7, r0
 801428e:	4691      	mov	r9, r2
 8014290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014294:	f108 0601 	add.w	r6, r8, #1
 8014298:	42b3      	cmp	r3, r6
 801429a:	db0b      	blt.n	80142b4 <__lshift+0x38>
 801429c:	4638      	mov	r0, r7
 801429e:	f7ff fddf 	bl	8013e60 <_Balloc>
 80142a2:	4605      	mov	r5, r0
 80142a4:	b948      	cbnz	r0, 80142ba <__lshift+0x3e>
 80142a6:	4602      	mov	r2, r0
 80142a8:	4b28      	ldr	r3, [pc, #160]	@ (801434c <__lshift+0xd0>)
 80142aa:	4829      	ldr	r0, [pc, #164]	@ (8014350 <__lshift+0xd4>)
 80142ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80142b0:	f000 fb84 	bl	80149bc <__assert_func>
 80142b4:	3101      	adds	r1, #1
 80142b6:	005b      	lsls	r3, r3, #1
 80142b8:	e7ee      	b.n	8014298 <__lshift+0x1c>
 80142ba:	2300      	movs	r3, #0
 80142bc:	f100 0114 	add.w	r1, r0, #20
 80142c0:	f100 0210 	add.w	r2, r0, #16
 80142c4:	4618      	mov	r0, r3
 80142c6:	4553      	cmp	r3, sl
 80142c8:	db33      	blt.n	8014332 <__lshift+0xb6>
 80142ca:	6920      	ldr	r0, [r4, #16]
 80142cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80142d0:	f104 0314 	add.w	r3, r4, #20
 80142d4:	f019 091f 	ands.w	r9, r9, #31
 80142d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80142dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80142e0:	d02b      	beq.n	801433a <__lshift+0xbe>
 80142e2:	f1c9 0e20 	rsb	lr, r9, #32
 80142e6:	468a      	mov	sl, r1
 80142e8:	2200      	movs	r2, #0
 80142ea:	6818      	ldr	r0, [r3, #0]
 80142ec:	fa00 f009 	lsl.w	r0, r0, r9
 80142f0:	4310      	orrs	r0, r2
 80142f2:	f84a 0b04 	str.w	r0, [sl], #4
 80142f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80142fa:	459c      	cmp	ip, r3
 80142fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8014300:	d8f3      	bhi.n	80142ea <__lshift+0x6e>
 8014302:	ebac 0304 	sub.w	r3, ip, r4
 8014306:	3b15      	subs	r3, #21
 8014308:	f023 0303 	bic.w	r3, r3, #3
 801430c:	3304      	adds	r3, #4
 801430e:	f104 0015 	add.w	r0, r4, #21
 8014312:	4584      	cmp	ip, r0
 8014314:	bf38      	it	cc
 8014316:	2304      	movcc	r3, #4
 8014318:	50ca      	str	r2, [r1, r3]
 801431a:	b10a      	cbz	r2, 8014320 <__lshift+0xa4>
 801431c:	f108 0602 	add.w	r6, r8, #2
 8014320:	3e01      	subs	r6, #1
 8014322:	4638      	mov	r0, r7
 8014324:	612e      	str	r6, [r5, #16]
 8014326:	4621      	mov	r1, r4
 8014328:	f7ff fdda 	bl	8013ee0 <_Bfree>
 801432c:	4628      	mov	r0, r5
 801432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014332:	f842 0f04 	str.w	r0, [r2, #4]!
 8014336:	3301      	adds	r3, #1
 8014338:	e7c5      	b.n	80142c6 <__lshift+0x4a>
 801433a:	3904      	subs	r1, #4
 801433c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014340:	f841 2f04 	str.w	r2, [r1, #4]!
 8014344:	459c      	cmp	ip, r3
 8014346:	d8f9      	bhi.n	801433c <__lshift+0xc0>
 8014348:	e7ea      	b.n	8014320 <__lshift+0xa4>
 801434a:	bf00      	nop
 801434c:	08016200 	.word	0x08016200
 8014350:	08016211 	.word	0x08016211

08014354 <__mcmp>:
 8014354:	690a      	ldr	r2, [r1, #16]
 8014356:	4603      	mov	r3, r0
 8014358:	6900      	ldr	r0, [r0, #16]
 801435a:	1a80      	subs	r0, r0, r2
 801435c:	b530      	push	{r4, r5, lr}
 801435e:	d10e      	bne.n	801437e <__mcmp+0x2a>
 8014360:	3314      	adds	r3, #20
 8014362:	3114      	adds	r1, #20
 8014364:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014368:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801436c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014370:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014374:	4295      	cmp	r5, r2
 8014376:	d003      	beq.n	8014380 <__mcmp+0x2c>
 8014378:	d205      	bcs.n	8014386 <__mcmp+0x32>
 801437a:	f04f 30ff 	mov.w	r0, #4294967295
 801437e:	bd30      	pop	{r4, r5, pc}
 8014380:	42a3      	cmp	r3, r4
 8014382:	d3f3      	bcc.n	801436c <__mcmp+0x18>
 8014384:	e7fb      	b.n	801437e <__mcmp+0x2a>
 8014386:	2001      	movs	r0, #1
 8014388:	e7f9      	b.n	801437e <__mcmp+0x2a>
	...

0801438c <__mdiff>:
 801438c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014390:	4689      	mov	r9, r1
 8014392:	4606      	mov	r6, r0
 8014394:	4611      	mov	r1, r2
 8014396:	4648      	mov	r0, r9
 8014398:	4614      	mov	r4, r2
 801439a:	f7ff ffdb 	bl	8014354 <__mcmp>
 801439e:	1e05      	subs	r5, r0, #0
 80143a0:	d112      	bne.n	80143c8 <__mdiff+0x3c>
 80143a2:	4629      	mov	r1, r5
 80143a4:	4630      	mov	r0, r6
 80143a6:	f7ff fd5b 	bl	8013e60 <_Balloc>
 80143aa:	4602      	mov	r2, r0
 80143ac:	b928      	cbnz	r0, 80143ba <__mdiff+0x2e>
 80143ae:	4b3f      	ldr	r3, [pc, #252]	@ (80144ac <__mdiff+0x120>)
 80143b0:	f240 2137 	movw	r1, #567	@ 0x237
 80143b4:	483e      	ldr	r0, [pc, #248]	@ (80144b0 <__mdiff+0x124>)
 80143b6:	f000 fb01 	bl	80149bc <__assert_func>
 80143ba:	2301      	movs	r3, #1
 80143bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80143c0:	4610      	mov	r0, r2
 80143c2:	b003      	add	sp, #12
 80143c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c8:	bfbc      	itt	lt
 80143ca:	464b      	movlt	r3, r9
 80143cc:	46a1      	movlt	r9, r4
 80143ce:	4630      	mov	r0, r6
 80143d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80143d4:	bfba      	itte	lt
 80143d6:	461c      	movlt	r4, r3
 80143d8:	2501      	movlt	r5, #1
 80143da:	2500      	movge	r5, #0
 80143dc:	f7ff fd40 	bl	8013e60 <_Balloc>
 80143e0:	4602      	mov	r2, r0
 80143e2:	b918      	cbnz	r0, 80143ec <__mdiff+0x60>
 80143e4:	4b31      	ldr	r3, [pc, #196]	@ (80144ac <__mdiff+0x120>)
 80143e6:	f240 2145 	movw	r1, #581	@ 0x245
 80143ea:	e7e3      	b.n	80143b4 <__mdiff+0x28>
 80143ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80143f0:	6926      	ldr	r6, [r4, #16]
 80143f2:	60c5      	str	r5, [r0, #12]
 80143f4:	f109 0310 	add.w	r3, r9, #16
 80143f8:	f109 0514 	add.w	r5, r9, #20
 80143fc:	f104 0e14 	add.w	lr, r4, #20
 8014400:	f100 0b14 	add.w	fp, r0, #20
 8014404:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014408:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801440c:	9301      	str	r3, [sp, #4]
 801440e:	46d9      	mov	r9, fp
 8014410:	f04f 0c00 	mov.w	ip, #0
 8014414:	9b01      	ldr	r3, [sp, #4]
 8014416:	f85e 0b04 	ldr.w	r0, [lr], #4
 801441a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801441e:	9301      	str	r3, [sp, #4]
 8014420:	fa1f f38a 	uxth.w	r3, sl
 8014424:	4619      	mov	r1, r3
 8014426:	b283      	uxth	r3, r0
 8014428:	1acb      	subs	r3, r1, r3
 801442a:	0c00      	lsrs	r0, r0, #16
 801442c:	4463      	add	r3, ip
 801442e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014432:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014436:	b29b      	uxth	r3, r3
 8014438:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801443c:	4576      	cmp	r6, lr
 801443e:	f849 3b04 	str.w	r3, [r9], #4
 8014442:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014446:	d8e5      	bhi.n	8014414 <__mdiff+0x88>
 8014448:	1b33      	subs	r3, r6, r4
 801444a:	3b15      	subs	r3, #21
 801444c:	f023 0303 	bic.w	r3, r3, #3
 8014450:	3415      	adds	r4, #21
 8014452:	3304      	adds	r3, #4
 8014454:	42a6      	cmp	r6, r4
 8014456:	bf38      	it	cc
 8014458:	2304      	movcc	r3, #4
 801445a:	441d      	add	r5, r3
 801445c:	445b      	add	r3, fp
 801445e:	461e      	mov	r6, r3
 8014460:	462c      	mov	r4, r5
 8014462:	4544      	cmp	r4, r8
 8014464:	d30e      	bcc.n	8014484 <__mdiff+0xf8>
 8014466:	f108 0103 	add.w	r1, r8, #3
 801446a:	1b49      	subs	r1, r1, r5
 801446c:	f021 0103 	bic.w	r1, r1, #3
 8014470:	3d03      	subs	r5, #3
 8014472:	45a8      	cmp	r8, r5
 8014474:	bf38      	it	cc
 8014476:	2100      	movcc	r1, #0
 8014478:	440b      	add	r3, r1
 801447a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801447e:	b191      	cbz	r1, 80144a6 <__mdiff+0x11a>
 8014480:	6117      	str	r7, [r2, #16]
 8014482:	e79d      	b.n	80143c0 <__mdiff+0x34>
 8014484:	f854 1b04 	ldr.w	r1, [r4], #4
 8014488:	46e6      	mov	lr, ip
 801448a:	0c08      	lsrs	r0, r1, #16
 801448c:	fa1c fc81 	uxtah	ip, ip, r1
 8014490:	4471      	add	r1, lr
 8014492:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014496:	b289      	uxth	r1, r1
 8014498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801449c:	f846 1b04 	str.w	r1, [r6], #4
 80144a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80144a4:	e7dd      	b.n	8014462 <__mdiff+0xd6>
 80144a6:	3f01      	subs	r7, #1
 80144a8:	e7e7      	b.n	801447a <__mdiff+0xee>
 80144aa:	bf00      	nop
 80144ac:	08016200 	.word	0x08016200
 80144b0:	08016211 	.word	0x08016211

080144b4 <__d2b>:
 80144b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80144b8:	460f      	mov	r7, r1
 80144ba:	2101      	movs	r1, #1
 80144bc:	ec59 8b10 	vmov	r8, r9, d0
 80144c0:	4616      	mov	r6, r2
 80144c2:	f7ff fccd 	bl	8013e60 <_Balloc>
 80144c6:	4604      	mov	r4, r0
 80144c8:	b930      	cbnz	r0, 80144d8 <__d2b+0x24>
 80144ca:	4602      	mov	r2, r0
 80144cc:	4b23      	ldr	r3, [pc, #140]	@ (801455c <__d2b+0xa8>)
 80144ce:	4824      	ldr	r0, [pc, #144]	@ (8014560 <__d2b+0xac>)
 80144d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80144d4:	f000 fa72 	bl	80149bc <__assert_func>
 80144d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80144dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80144e0:	b10d      	cbz	r5, 80144e6 <__d2b+0x32>
 80144e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80144e6:	9301      	str	r3, [sp, #4]
 80144e8:	f1b8 0300 	subs.w	r3, r8, #0
 80144ec:	d023      	beq.n	8014536 <__d2b+0x82>
 80144ee:	4668      	mov	r0, sp
 80144f0:	9300      	str	r3, [sp, #0]
 80144f2:	f7ff fd7c 	bl	8013fee <__lo0bits>
 80144f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80144fa:	b1d0      	cbz	r0, 8014532 <__d2b+0x7e>
 80144fc:	f1c0 0320 	rsb	r3, r0, #32
 8014500:	fa02 f303 	lsl.w	r3, r2, r3
 8014504:	430b      	orrs	r3, r1
 8014506:	40c2      	lsrs	r2, r0
 8014508:	6163      	str	r3, [r4, #20]
 801450a:	9201      	str	r2, [sp, #4]
 801450c:	9b01      	ldr	r3, [sp, #4]
 801450e:	61a3      	str	r3, [r4, #24]
 8014510:	2b00      	cmp	r3, #0
 8014512:	bf0c      	ite	eq
 8014514:	2201      	moveq	r2, #1
 8014516:	2202      	movne	r2, #2
 8014518:	6122      	str	r2, [r4, #16]
 801451a:	b1a5      	cbz	r5, 8014546 <__d2b+0x92>
 801451c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014520:	4405      	add	r5, r0
 8014522:	603d      	str	r5, [r7, #0]
 8014524:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014528:	6030      	str	r0, [r6, #0]
 801452a:	4620      	mov	r0, r4
 801452c:	b003      	add	sp, #12
 801452e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014532:	6161      	str	r1, [r4, #20]
 8014534:	e7ea      	b.n	801450c <__d2b+0x58>
 8014536:	a801      	add	r0, sp, #4
 8014538:	f7ff fd59 	bl	8013fee <__lo0bits>
 801453c:	9b01      	ldr	r3, [sp, #4]
 801453e:	6163      	str	r3, [r4, #20]
 8014540:	3020      	adds	r0, #32
 8014542:	2201      	movs	r2, #1
 8014544:	e7e8      	b.n	8014518 <__d2b+0x64>
 8014546:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801454a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801454e:	6038      	str	r0, [r7, #0]
 8014550:	6918      	ldr	r0, [r3, #16]
 8014552:	f7ff fd2d 	bl	8013fb0 <__hi0bits>
 8014556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801455a:	e7e5      	b.n	8014528 <__d2b+0x74>
 801455c:	08016200 	.word	0x08016200
 8014560:	08016211 	.word	0x08016211

08014564 <__ssputs_r>:
 8014564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014568:	688e      	ldr	r6, [r1, #8]
 801456a:	461f      	mov	r7, r3
 801456c:	42be      	cmp	r6, r7
 801456e:	680b      	ldr	r3, [r1, #0]
 8014570:	4682      	mov	sl, r0
 8014572:	460c      	mov	r4, r1
 8014574:	4690      	mov	r8, r2
 8014576:	d82d      	bhi.n	80145d4 <__ssputs_r+0x70>
 8014578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801457c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014580:	d026      	beq.n	80145d0 <__ssputs_r+0x6c>
 8014582:	6965      	ldr	r5, [r4, #20]
 8014584:	6909      	ldr	r1, [r1, #16]
 8014586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801458a:	eba3 0901 	sub.w	r9, r3, r1
 801458e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014592:	1c7b      	adds	r3, r7, #1
 8014594:	444b      	add	r3, r9
 8014596:	106d      	asrs	r5, r5, #1
 8014598:	429d      	cmp	r5, r3
 801459a:	bf38      	it	cc
 801459c:	461d      	movcc	r5, r3
 801459e:	0553      	lsls	r3, r2, #21
 80145a0:	d527      	bpl.n	80145f2 <__ssputs_r+0x8e>
 80145a2:	4629      	mov	r1, r5
 80145a4:	f7fd ffb8 	bl	8012518 <_malloc_r>
 80145a8:	4606      	mov	r6, r0
 80145aa:	b360      	cbz	r0, 8014606 <__ssputs_r+0xa2>
 80145ac:	6921      	ldr	r1, [r4, #16]
 80145ae:	464a      	mov	r2, r9
 80145b0:	f000 f9f6 	bl	80149a0 <memcpy>
 80145b4:	89a3      	ldrh	r3, [r4, #12]
 80145b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80145ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145be:	81a3      	strh	r3, [r4, #12]
 80145c0:	6126      	str	r6, [r4, #16]
 80145c2:	6165      	str	r5, [r4, #20]
 80145c4:	444e      	add	r6, r9
 80145c6:	eba5 0509 	sub.w	r5, r5, r9
 80145ca:	6026      	str	r6, [r4, #0]
 80145cc:	60a5      	str	r5, [r4, #8]
 80145ce:	463e      	mov	r6, r7
 80145d0:	42be      	cmp	r6, r7
 80145d2:	d900      	bls.n	80145d6 <__ssputs_r+0x72>
 80145d4:	463e      	mov	r6, r7
 80145d6:	6820      	ldr	r0, [r4, #0]
 80145d8:	4632      	mov	r2, r6
 80145da:	4641      	mov	r1, r8
 80145dc:	f000 f9c6 	bl	801496c <memmove>
 80145e0:	68a3      	ldr	r3, [r4, #8]
 80145e2:	1b9b      	subs	r3, r3, r6
 80145e4:	60a3      	str	r3, [r4, #8]
 80145e6:	6823      	ldr	r3, [r4, #0]
 80145e8:	4433      	add	r3, r6
 80145ea:	6023      	str	r3, [r4, #0]
 80145ec:	2000      	movs	r0, #0
 80145ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145f2:	462a      	mov	r2, r5
 80145f4:	f000 fa26 	bl	8014a44 <_realloc_r>
 80145f8:	4606      	mov	r6, r0
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d1e0      	bne.n	80145c0 <__ssputs_r+0x5c>
 80145fe:	6921      	ldr	r1, [r4, #16]
 8014600:	4650      	mov	r0, sl
 8014602:	f7ff fbe3 	bl	8013dcc <_free_r>
 8014606:	230c      	movs	r3, #12
 8014608:	f8ca 3000 	str.w	r3, [sl]
 801460c:	89a3      	ldrh	r3, [r4, #12]
 801460e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014612:	81a3      	strh	r3, [r4, #12]
 8014614:	f04f 30ff 	mov.w	r0, #4294967295
 8014618:	e7e9      	b.n	80145ee <__ssputs_r+0x8a>
	...

0801461c <_svfiprintf_r>:
 801461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014620:	4698      	mov	r8, r3
 8014622:	898b      	ldrh	r3, [r1, #12]
 8014624:	061b      	lsls	r3, r3, #24
 8014626:	b09d      	sub	sp, #116	@ 0x74
 8014628:	4607      	mov	r7, r0
 801462a:	460d      	mov	r5, r1
 801462c:	4614      	mov	r4, r2
 801462e:	d510      	bpl.n	8014652 <_svfiprintf_r+0x36>
 8014630:	690b      	ldr	r3, [r1, #16]
 8014632:	b973      	cbnz	r3, 8014652 <_svfiprintf_r+0x36>
 8014634:	2140      	movs	r1, #64	@ 0x40
 8014636:	f7fd ff6f 	bl	8012518 <_malloc_r>
 801463a:	6028      	str	r0, [r5, #0]
 801463c:	6128      	str	r0, [r5, #16]
 801463e:	b930      	cbnz	r0, 801464e <_svfiprintf_r+0x32>
 8014640:	230c      	movs	r3, #12
 8014642:	603b      	str	r3, [r7, #0]
 8014644:	f04f 30ff 	mov.w	r0, #4294967295
 8014648:	b01d      	add	sp, #116	@ 0x74
 801464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801464e:	2340      	movs	r3, #64	@ 0x40
 8014650:	616b      	str	r3, [r5, #20]
 8014652:	2300      	movs	r3, #0
 8014654:	9309      	str	r3, [sp, #36]	@ 0x24
 8014656:	2320      	movs	r3, #32
 8014658:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801465c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014660:	2330      	movs	r3, #48	@ 0x30
 8014662:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014800 <_svfiprintf_r+0x1e4>
 8014666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801466a:	f04f 0901 	mov.w	r9, #1
 801466e:	4623      	mov	r3, r4
 8014670:	469a      	mov	sl, r3
 8014672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014676:	b10a      	cbz	r2, 801467c <_svfiprintf_r+0x60>
 8014678:	2a25      	cmp	r2, #37	@ 0x25
 801467a:	d1f9      	bne.n	8014670 <_svfiprintf_r+0x54>
 801467c:	ebba 0b04 	subs.w	fp, sl, r4
 8014680:	d00b      	beq.n	801469a <_svfiprintf_r+0x7e>
 8014682:	465b      	mov	r3, fp
 8014684:	4622      	mov	r2, r4
 8014686:	4629      	mov	r1, r5
 8014688:	4638      	mov	r0, r7
 801468a:	f7ff ff6b 	bl	8014564 <__ssputs_r>
 801468e:	3001      	adds	r0, #1
 8014690:	f000 80a7 	beq.w	80147e2 <_svfiprintf_r+0x1c6>
 8014694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014696:	445a      	add	r2, fp
 8014698:	9209      	str	r2, [sp, #36]	@ 0x24
 801469a:	f89a 3000 	ldrb.w	r3, [sl]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	f000 809f 	beq.w	80147e2 <_svfiprintf_r+0x1c6>
 80146a4:	2300      	movs	r3, #0
 80146a6:	f04f 32ff 	mov.w	r2, #4294967295
 80146aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146ae:	f10a 0a01 	add.w	sl, sl, #1
 80146b2:	9304      	str	r3, [sp, #16]
 80146b4:	9307      	str	r3, [sp, #28]
 80146b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80146ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80146bc:	4654      	mov	r4, sl
 80146be:	2205      	movs	r2, #5
 80146c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146c4:	484e      	ldr	r0, [pc, #312]	@ (8014800 <_svfiprintf_r+0x1e4>)
 80146c6:	f7eb fe0b 	bl	80002e0 <memchr>
 80146ca:	9a04      	ldr	r2, [sp, #16]
 80146cc:	b9d8      	cbnz	r0, 8014706 <_svfiprintf_r+0xea>
 80146ce:	06d0      	lsls	r0, r2, #27
 80146d0:	bf44      	itt	mi
 80146d2:	2320      	movmi	r3, #32
 80146d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146d8:	0711      	lsls	r1, r2, #28
 80146da:	bf44      	itt	mi
 80146dc:	232b      	movmi	r3, #43	@ 0x2b
 80146de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146e2:	f89a 3000 	ldrb.w	r3, [sl]
 80146e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80146e8:	d015      	beq.n	8014716 <_svfiprintf_r+0xfa>
 80146ea:	9a07      	ldr	r2, [sp, #28]
 80146ec:	4654      	mov	r4, sl
 80146ee:	2000      	movs	r0, #0
 80146f0:	f04f 0c0a 	mov.w	ip, #10
 80146f4:	4621      	mov	r1, r4
 80146f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146fa:	3b30      	subs	r3, #48	@ 0x30
 80146fc:	2b09      	cmp	r3, #9
 80146fe:	d94b      	bls.n	8014798 <_svfiprintf_r+0x17c>
 8014700:	b1b0      	cbz	r0, 8014730 <_svfiprintf_r+0x114>
 8014702:	9207      	str	r2, [sp, #28]
 8014704:	e014      	b.n	8014730 <_svfiprintf_r+0x114>
 8014706:	eba0 0308 	sub.w	r3, r0, r8
 801470a:	fa09 f303 	lsl.w	r3, r9, r3
 801470e:	4313      	orrs	r3, r2
 8014710:	9304      	str	r3, [sp, #16]
 8014712:	46a2      	mov	sl, r4
 8014714:	e7d2      	b.n	80146bc <_svfiprintf_r+0xa0>
 8014716:	9b03      	ldr	r3, [sp, #12]
 8014718:	1d19      	adds	r1, r3, #4
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	9103      	str	r1, [sp, #12]
 801471e:	2b00      	cmp	r3, #0
 8014720:	bfbb      	ittet	lt
 8014722:	425b      	neglt	r3, r3
 8014724:	f042 0202 	orrlt.w	r2, r2, #2
 8014728:	9307      	strge	r3, [sp, #28]
 801472a:	9307      	strlt	r3, [sp, #28]
 801472c:	bfb8      	it	lt
 801472e:	9204      	strlt	r2, [sp, #16]
 8014730:	7823      	ldrb	r3, [r4, #0]
 8014732:	2b2e      	cmp	r3, #46	@ 0x2e
 8014734:	d10a      	bne.n	801474c <_svfiprintf_r+0x130>
 8014736:	7863      	ldrb	r3, [r4, #1]
 8014738:	2b2a      	cmp	r3, #42	@ 0x2a
 801473a:	d132      	bne.n	80147a2 <_svfiprintf_r+0x186>
 801473c:	9b03      	ldr	r3, [sp, #12]
 801473e:	1d1a      	adds	r2, r3, #4
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	9203      	str	r2, [sp, #12]
 8014744:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014748:	3402      	adds	r4, #2
 801474a:	9305      	str	r3, [sp, #20]
 801474c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014810 <_svfiprintf_r+0x1f4>
 8014750:	7821      	ldrb	r1, [r4, #0]
 8014752:	2203      	movs	r2, #3
 8014754:	4650      	mov	r0, sl
 8014756:	f7eb fdc3 	bl	80002e0 <memchr>
 801475a:	b138      	cbz	r0, 801476c <_svfiprintf_r+0x150>
 801475c:	9b04      	ldr	r3, [sp, #16]
 801475e:	eba0 000a 	sub.w	r0, r0, sl
 8014762:	2240      	movs	r2, #64	@ 0x40
 8014764:	4082      	lsls	r2, r0
 8014766:	4313      	orrs	r3, r2
 8014768:	3401      	adds	r4, #1
 801476a:	9304      	str	r3, [sp, #16]
 801476c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014770:	4824      	ldr	r0, [pc, #144]	@ (8014804 <_svfiprintf_r+0x1e8>)
 8014772:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014776:	2206      	movs	r2, #6
 8014778:	f7eb fdb2 	bl	80002e0 <memchr>
 801477c:	2800      	cmp	r0, #0
 801477e:	d036      	beq.n	80147ee <_svfiprintf_r+0x1d2>
 8014780:	4b21      	ldr	r3, [pc, #132]	@ (8014808 <_svfiprintf_r+0x1ec>)
 8014782:	bb1b      	cbnz	r3, 80147cc <_svfiprintf_r+0x1b0>
 8014784:	9b03      	ldr	r3, [sp, #12]
 8014786:	3307      	adds	r3, #7
 8014788:	f023 0307 	bic.w	r3, r3, #7
 801478c:	3308      	adds	r3, #8
 801478e:	9303      	str	r3, [sp, #12]
 8014790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014792:	4433      	add	r3, r6
 8014794:	9309      	str	r3, [sp, #36]	@ 0x24
 8014796:	e76a      	b.n	801466e <_svfiprintf_r+0x52>
 8014798:	fb0c 3202 	mla	r2, ip, r2, r3
 801479c:	460c      	mov	r4, r1
 801479e:	2001      	movs	r0, #1
 80147a0:	e7a8      	b.n	80146f4 <_svfiprintf_r+0xd8>
 80147a2:	2300      	movs	r3, #0
 80147a4:	3401      	adds	r4, #1
 80147a6:	9305      	str	r3, [sp, #20]
 80147a8:	4619      	mov	r1, r3
 80147aa:	f04f 0c0a 	mov.w	ip, #10
 80147ae:	4620      	mov	r0, r4
 80147b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147b4:	3a30      	subs	r2, #48	@ 0x30
 80147b6:	2a09      	cmp	r2, #9
 80147b8:	d903      	bls.n	80147c2 <_svfiprintf_r+0x1a6>
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d0c6      	beq.n	801474c <_svfiprintf_r+0x130>
 80147be:	9105      	str	r1, [sp, #20]
 80147c0:	e7c4      	b.n	801474c <_svfiprintf_r+0x130>
 80147c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80147c6:	4604      	mov	r4, r0
 80147c8:	2301      	movs	r3, #1
 80147ca:	e7f0      	b.n	80147ae <_svfiprintf_r+0x192>
 80147cc:	ab03      	add	r3, sp, #12
 80147ce:	9300      	str	r3, [sp, #0]
 80147d0:	462a      	mov	r2, r5
 80147d2:	4b0e      	ldr	r3, [pc, #56]	@ (801480c <_svfiprintf_r+0x1f0>)
 80147d4:	a904      	add	r1, sp, #16
 80147d6:	4638      	mov	r0, r7
 80147d8:	f7fd ffba 	bl	8012750 <_printf_float>
 80147dc:	1c42      	adds	r2, r0, #1
 80147de:	4606      	mov	r6, r0
 80147e0:	d1d6      	bne.n	8014790 <_svfiprintf_r+0x174>
 80147e2:	89ab      	ldrh	r3, [r5, #12]
 80147e4:	065b      	lsls	r3, r3, #25
 80147e6:	f53f af2d 	bmi.w	8014644 <_svfiprintf_r+0x28>
 80147ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80147ec:	e72c      	b.n	8014648 <_svfiprintf_r+0x2c>
 80147ee:	ab03      	add	r3, sp, #12
 80147f0:	9300      	str	r3, [sp, #0]
 80147f2:	462a      	mov	r2, r5
 80147f4:	4b05      	ldr	r3, [pc, #20]	@ (801480c <_svfiprintf_r+0x1f0>)
 80147f6:	a904      	add	r1, sp, #16
 80147f8:	4638      	mov	r0, r7
 80147fa:	f7fe fa31 	bl	8012c60 <_printf_i>
 80147fe:	e7ed      	b.n	80147dc <_svfiprintf_r+0x1c0>
 8014800:	08016368 	.word	0x08016368
 8014804:	08016372 	.word	0x08016372
 8014808:	08012751 	.word	0x08012751
 801480c:	08014565 	.word	0x08014565
 8014810:	0801636e 	.word	0x0801636e

08014814 <__sflush_r>:
 8014814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801481c:	0716      	lsls	r6, r2, #28
 801481e:	4605      	mov	r5, r0
 8014820:	460c      	mov	r4, r1
 8014822:	d454      	bmi.n	80148ce <__sflush_r+0xba>
 8014824:	684b      	ldr	r3, [r1, #4]
 8014826:	2b00      	cmp	r3, #0
 8014828:	dc02      	bgt.n	8014830 <__sflush_r+0x1c>
 801482a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801482c:	2b00      	cmp	r3, #0
 801482e:	dd48      	ble.n	80148c2 <__sflush_r+0xae>
 8014830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014832:	2e00      	cmp	r6, #0
 8014834:	d045      	beq.n	80148c2 <__sflush_r+0xae>
 8014836:	2300      	movs	r3, #0
 8014838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801483c:	682f      	ldr	r7, [r5, #0]
 801483e:	6a21      	ldr	r1, [r4, #32]
 8014840:	602b      	str	r3, [r5, #0]
 8014842:	d030      	beq.n	80148a6 <__sflush_r+0x92>
 8014844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014846:	89a3      	ldrh	r3, [r4, #12]
 8014848:	0759      	lsls	r1, r3, #29
 801484a:	d505      	bpl.n	8014858 <__sflush_r+0x44>
 801484c:	6863      	ldr	r3, [r4, #4]
 801484e:	1ad2      	subs	r2, r2, r3
 8014850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014852:	b10b      	cbz	r3, 8014858 <__sflush_r+0x44>
 8014854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014856:	1ad2      	subs	r2, r2, r3
 8014858:	2300      	movs	r3, #0
 801485a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801485c:	6a21      	ldr	r1, [r4, #32]
 801485e:	4628      	mov	r0, r5
 8014860:	47b0      	blx	r6
 8014862:	1c43      	adds	r3, r0, #1
 8014864:	89a3      	ldrh	r3, [r4, #12]
 8014866:	d106      	bne.n	8014876 <__sflush_r+0x62>
 8014868:	6829      	ldr	r1, [r5, #0]
 801486a:	291d      	cmp	r1, #29
 801486c:	d82b      	bhi.n	80148c6 <__sflush_r+0xb2>
 801486e:	4a2a      	ldr	r2, [pc, #168]	@ (8014918 <__sflush_r+0x104>)
 8014870:	410a      	asrs	r2, r1
 8014872:	07d6      	lsls	r6, r2, #31
 8014874:	d427      	bmi.n	80148c6 <__sflush_r+0xb2>
 8014876:	2200      	movs	r2, #0
 8014878:	6062      	str	r2, [r4, #4]
 801487a:	04d9      	lsls	r1, r3, #19
 801487c:	6922      	ldr	r2, [r4, #16]
 801487e:	6022      	str	r2, [r4, #0]
 8014880:	d504      	bpl.n	801488c <__sflush_r+0x78>
 8014882:	1c42      	adds	r2, r0, #1
 8014884:	d101      	bne.n	801488a <__sflush_r+0x76>
 8014886:	682b      	ldr	r3, [r5, #0]
 8014888:	b903      	cbnz	r3, 801488c <__sflush_r+0x78>
 801488a:	6560      	str	r0, [r4, #84]	@ 0x54
 801488c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801488e:	602f      	str	r7, [r5, #0]
 8014890:	b1b9      	cbz	r1, 80148c2 <__sflush_r+0xae>
 8014892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014896:	4299      	cmp	r1, r3
 8014898:	d002      	beq.n	80148a0 <__sflush_r+0x8c>
 801489a:	4628      	mov	r0, r5
 801489c:	f7ff fa96 	bl	8013dcc <_free_r>
 80148a0:	2300      	movs	r3, #0
 80148a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80148a4:	e00d      	b.n	80148c2 <__sflush_r+0xae>
 80148a6:	2301      	movs	r3, #1
 80148a8:	4628      	mov	r0, r5
 80148aa:	47b0      	blx	r6
 80148ac:	4602      	mov	r2, r0
 80148ae:	1c50      	adds	r0, r2, #1
 80148b0:	d1c9      	bne.n	8014846 <__sflush_r+0x32>
 80148b2:	682b      	ldr	r3, [r5, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d0c6      	beq.n	8014846 <__sflush_r+0x32>
 80148b8:	2b1d      	cmp	r3, #29
 80148ba:	d001      	beq.n	80148c0 <__sflush_r+0xac>
 80148bc:	2b16      	cmp	r3, #22
 80148be:	d11e      	bne.n	80148fe <__sflush_r+0xea>
 80148c0:	602f      	str	r7, [r5, #0]
 80148c2:	2000      	movs	r0, #0
 80148c4:	e022      	b.n	801490c <__sflush_r+0xf8>
 80148c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148ca:	b21b      	sxth	r3, r3
 80148cc:	e01b      	b.n	8014906 <__sflush_r+0xf2>
 80148ce:	690f      	ldr	r7, [r1, #16]
 80148d0:	2f00      	cmp	r7, #0
 80148d2:	d0f6      	beq.n	80148c2 <__sflush_r+0xae>
 80148d4:	0793      	lsls	r3, r2, #30
 80148d6:	680e      	ldr	r6, [r1, #0]
 80148d8:	bf08      	it	eq
 80148da:	694b      	ldreq	r3, [r1, #20]
 80148dc:	600f      	str	r7, [r1, #0]
 80148de:	bf18      	it	ne
 80148e0:	2300      	movne	r3, #0
 80148e2:	eba6 0807 	sub.w	r8, r6, r7
 80148e6:	608b      	str	r3, [r1, #8]
 80148e8:	f1b8 0f00 	cmp.w	r8, #0
 80148ec:	dde9      	ble.n	80148c2 <__sflush_r+0xae>
 80148ee:	6a21      	ldr	r1, [r4, #32]
 80148f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80148f2:	4643      	mov	r3, r8
 80148f4:	463a      	mov	r2, r7
 80148f6:	4628      	mov	r0, r5
 80148f8:	47b0      	blx	r6
 80148fa:	2800      	cmp	r0, #0
 80148fc:	dc08      	bgt.n	8014910 <__sflush_r+0xfc>
 80148fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014906:	81a3      	strh	r3, [r4, #12]
 8014908:	f04f 30ff 	mov.w	r0, #4294967295
 801490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014910:	4407      	add	r7, r0
 8014912:	eba8 0800 	sub.w	r8, r8, r0
 8014916:	e7e7      	b.n	80148e8 <__sflush_r+0xd4>
 8014918:	dfbffffe 	.word	0xdfbffffe

0801491c <_fflush_r>:
 801491c:	b538      	push	{r3, r4, r5, lr}
 801491e:	690b      	ldr	r3, [r1, #16]
 8014920:	4605      	mov	r5, r0
 8014922:	460c      	mov	r4, r1
 8014924:	b913      	cbnz	r3, 801492c <_fflush_r+0x10>
 8014926:	2500      	movs	r5, #0
 8014928:	4628      	mov	r0, r5
 801492a:	bd38      	pop	{r3, r4, r5, pc}
 801492c:	b118      	cbz	r0, 8014936 <_fflush_r+0x1a>
 801492e:	6a03      	ldr	r3, [r0, #32]
 8014930:	b90b      	cbnz	r3, 8014936 <_fflush_r+0x1a>
 8014932:	f7fe fb41 	bl	8012fb8 <__sinit>
 8014936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d0f3      	beq.n	8014926 <_fflush_r+0xa>
 801493e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014940:	07d0      	lsls	r0, r2, #31
 8014942:	d404      	bmi.n	801494e <_fflush_r+0x32>
 8014944:	0599      	lsls	r1, r3, #22
 8014946:	d402      	bmi.n	801494e <_fflush_r+0x32>
 8014948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801494a:	f7fe fc5c 	bl	8013206 <__retarget_lock_acquire_recursive>
 801494e:	4628      	mov	r0, r5
 8014950:	4621      	mov	r1, r4
 8014952:	f7ff ff5f 	bl	8014814 <__sflush_r>
 8014956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014958:	07da      	lsls	r2, r3, #31
 801495a:	4605      	mov	r5, r0
 801495c:	d4e4      	bmi.n	8014928 <_fflush_r+0xc>
 801495e:	89a3      	ldrh	r3, [r4, #12]
 8014960:	059b      	lsls	r3, r3, #22
 8014962:	d4e1      	bmi.n	8014928 <_fflush_r+0xc>
 8014964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014966:	f7fe fc4f 	bl	8013208 <__retarget_lock_release_recursive>
 801496a:	e7dd      	b.n	8014928 <_fflush_r+0xc>

0801496c <memmove>:
 801496c:	4288      	cmp	r0, r1
 801496e:	b510      	push	{r4, lr}
 8014970:	eb01 0402 	add.w	r4, r1, r2
 8014974:	d902      	bls.n	801497c <memmove+0x10>
 8014976:	4284      	cmp	r4, r0
 8014978:	4623      	mov	r3, r4
 801497a:	d807      	bhi.n	801498c <memmove+0x20>
 801497c:	1e43      	subs	r3, r0, #1
 801497e:	42a1      	cmp	r1, r4
 8014980:	d008      	beq.n	8014994 <memmove+0x28>
 8014982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014986:	f803 2f01 	strb.w	r2, [r3, #1]!
 801498a:	e7f8      	b.n	801497e <memmove+0x12>
 801498c:	4402      	add	r2, r0
 801498e:	4601      	mov	r1, r0
 8014990:	428a      	cmp	r2, r1
 8014992:	d100      	bne.n	8014996 <memmove+0x2a>
 8014994:	bd10      	pop	{r4, pc}
 8014996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801499a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801499e:	e7f7      	b.n	8014990 <memmove+0x24>

080149a0 <memcpy>:
 80149a0:	440a      	add	r2, r1
 80149a2:	4291      	cmp	r1, r2
 80149a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80149a8:	d100      	bne.n	80149ac <memcpy+0xc>
 80149aa:	4770      	bx	lr
 80149ac:	b510      	push	{r4, lr}
 80149ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149b6:	4291      	cmp	r1, r2
 80149b8:	d1f9      	bne.n	80149ae <memcpy+0xe>
 80149ba:	bd10      	pop	{r4, pc}

080149bc <__assert_func>:
 80149bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80149be:	4614      	mov	r4, r2
 80149c0:	461a      	mov	r2, r3
 80149c2:	4b09      	ldr	r3, [pc, #36]	@ (80149e8 <__assert_func+0x2c>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	4605      	mov	r5, r0
 80149c8:	68d8      	ldr	r0, [r3, #12]
 80149ca:	b954      	cbnz	r4, 80149e2 <__assert_func+0x26>
 80149cc:	4b07      	ldr	r3, [pc, #28]	@ (80149ec <__assert_func+0x30>)
 80149ce:	461c      	mov	r4, r3
 80149d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149d4:	9100      	str	r1, [sp, #0]
 80149d6:	462b      	mov	r3, r5
 80149d8:	4905      	ldr	r1, [pc, #20]	@ (80149f0 <__assert_func+0x34>)
 80149da:	f000 f86f 	bl	8014abc <fiprintf>
 80149de:	f000 f87f 	bl	8014ae0 <abort>
 80149e2:	4b04      	ldr	r3, [pc, #16]	@ (80149f4 <__assert_func+0x38>)
 80149e4:	e7f4      	b.n	80149d0 <__assert_func+0x14>
 80149e6:	bf00      	nop
 80149e8:	24000114 	.word	0x24000114
 80149ec:	080163be 	.word	0x080163be
 80149f0:	08016390 	.word	0x08016390
 80149f4:	08016383 	.word	0x08016383

080149f8 <_calloc_r>:
 80149f8:	b570      	push	{r4, r5, r6, lr}
 80149fa:	fba1 5402 	umull	r5, r4, r1, r2
 80149fe:	b93c      	cbnz	r4, 8014a10 <_calloc_r+0x18>
 8014a00:	4629      	mov	r1, r5
 8014a02:	f7fd fd89 	bl	8012518 <_malloc_r>
 8014a06:	4606      	mov	r6, r0
 8014a08:	b928      	cbnz	r0, 8014a16 <_calloc_r+0x1e>
 8014a0a:	2600      	movs	r6, #0
 8014a0c:	4630      	mov	r0, r6
 8014a0e:	bd70      	pop	{r4, r5, r6, pc}
 8014a10:	220c      	movs	r2, #12
 8014a12:	6002      	str	r2, [r0, #0]
 8014a14:	e7f9      	b.n	8014a0a <_calloc_r+0x12>
 8014a16:	462a      	mov	r2, r5
 8014a18:	4621      	mov	r1, r4
 8014a1a:	f7fe fb66 	bl	80130ea <memset>
 8014a1e:	e7f5      	b.n	8014a0c <_calloc_r+0x14>

08014a20 <__ascii_mbtowc>:
 8014a20:	b082      	sub	sp, #8
 8014a22:	b901      	cbnz	r1, 8014a26 <__ascii_mbtowc+0x6>
 8014a24:	a901      	add	r1, sp, #4
 8014a26:	b142      	cbz	r2, 8014a3a <__ascii_mbtowc+0x1a>
 8014a28:	b14b      	cbz	r3, 8014a3e <__ascii_mbtowc+0x1e>
 8014a2a:	7813      	ldrb	r3, [r2, #0]
 8014a2c:	600b      	str	r3, [r1, #0]
 8014a2e:	7812      	ldrb	r2, [r2, #0]
 8014a30:	1e10      	subs	r0, r2, #0
 8014a32:	bf18      	it	ne
 8014a34:	2001      	movne	r0, #1
 8014a36:	b002      	add	sp, #8
 8014a38:	4770      	bx	lr
 8014a3a:	4610      	mov	r0, r2
 8014a3c:	e7fb      	b.n	8014a36 <__ascii_mbtowc+0x16>
 8014a3e:	f06f 0001 	mvn.w	r0, #1
 8014a42:	e7f8      	b.n	8014a36 <__ascii_mbtowc+0x16>

08014a44 <_realloc_r>:
 8014a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a48:	4680      	mov	r8, r0
 8014a4a:	4615      	mov	r5, r2
 8014a4c:	460c      	mov	r4, r1
 8014a4e:	b921      	cbnz	r1, 8014a5a <_realloc_r+0x16>
 8014a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a54:	4611      	mov	r1, r2
 8014a56:	f7fd bd5f 	b.w	8012518 <_malloc_r>
 8014a5a:	b92a      	cbnz	r2, 8014a68 <_realloc_r+0x24>
 8014a5c:	f7ff f9b6 	bl	8013dcc <_free_r>
 8014a60:	2400      	movs	r4, #0
 8014a62:	4620      	mov	r0, r4
 8014a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a68:	f000 f841 	bl	8014aee <_malloc_usable_size_r>
 8014a6c:	4285      	cmp	r5, r0
 8014a6e:	4606      	mov	r6, r0
 8014a70:	d802      	bhi.n	8014a78 <_realloc_r+0x34>
 8014a72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014a76:	d8f4      	bhi.n	8014a62 <_realloc_r+0x1e>
 8014a78:	4629      	mov	r1, r5
 8014a7a:	4640      	mov	r0, r8
 8014a7c:	f7fd fd4c 	bl	8012518 <_malloc_r>
 8014a80:	4607      	mov	r7, r0
 8014a82:	2800      	cmp	r0, #0
 8014a84:	d0ec      	beq.n	8014a60 <_realloc_r+0x1c>
 8014a86:	42b5      	cmp	r5, r6
 8014a88:	462a      	mov	r2, r5
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	bf28      	it	cs
 8014a8e:	4632      	movcs	r2, r6
 8014a90:	f7ff ff86 	bl	80149a0 <memcpy>
 8014a94:	4621      	mov	r1, r4
 8014a96:	4640      	mov	r0, r8
 8014a98:	f7ff f998 	bl	8013dcc <_free_r>
 8014a9c:	463c      	mov	r4, r7
 8014a9e:	e7e0      	b.n	8014a62 <_realloc_r+0x1e>

08014aa0 <__ascii_wctomb>:
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	4608      	mov	r0, r1
 8014aa4:	b141      	cbz	r1, 8014ab8 <__ascii_wctomb+0x18>
 8014aa6:	2aff      	cmp	r2, #255	@ 0xff
 8014aa8:	d904      	bls.n	8014ab4 <__ascii_wctomb+0x14>
 8014aaa:	228a      	movs	r2, #138	@ 0x8a
 8014aac:	601a      	str	r2, [r3, #0]
 8014aae:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab2:	4770      	bx	lr
 8014ab4:	700a      	strb	r2, [r1, #0]
 8014ab6:	2001      	movs	r0, #1
 8014ab8:	4770      	bx	lr
	...

08014abc <fiprintf>:
 8014abc:	b40e      	push	{r1, r2, r3}
 8014abe:	b503      	push	{r0, r1, lr}
 8014ac0:	4601      	mov	r1, r0
 8014ac2:	ab03      	add	r3, sp, #12
 8014ac4:	4805      	ldr	r0, [pc, #20]	@ (8014adc <fiprintf+0x20>)
 8014ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aca:	6800      	ldr	r0, [r0, #0]
 8014acc:	9301      	str	r3, [sp, #4]
 8014ace:	f000 f83f 	bl	8014b50 <_vfiprintf_r>
 8014ad2:	b002      	add	sp, #8
 8014ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ad8:	b003      	add	sp, #12
 8014ada:	4770      	bx	lr
 8014adc:	24000114 	.word	0x24000114

08014ae0 <abort>:
 8014ae0:	b508      	push	{r3, lr}
 8014ae2:	2006      	movs	r0, #6
 8014ae4:	f000 fa08 	bl	8014ef8 <raise>
 8014ae8:	2001      	movs	r0, #1
 8014aea:	f7ec fde5 	bl	80016b8 <_exit>

08014aee <_malloc_usable_size_r>:
 8014aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014af2:	1f18      	subs	r0, r3, #4
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	bfbc      	itt	lt
 8014af8:	580b      	ldrlt	r3, [r1, r0]
 8014afa:	18c0      	addlt	r0, r0, r3
 8014afc:	4770      	bx	lr

08014afe <__sfputc_r>:
 8014afe:	6893      	ldr	r3, [r2, #8]
 8014b00:	3b01      	subs	r3, #1
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	b410      	push	{r4}
 8014b06:	6093      	str	r3, [r2, #8]
 8014b08:	da08      	bge.n	8014b1c <__sfputc_r+0x1e>
 8014b0a:	6994      	ldr	r4, [r2, #24]
 8014b0c:	42a3      	cmp	r3, r4
 8014b0e:	db01      	blt.n	8014b14 <__sfputc_r+0x16>
 8014b10:	290a      	cmp	r1, #10
 8014b12:	d103      	bne.n	8014b1c <__sfputc_r+0x1e>
 8014b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b18:	f000 b932 	b.w	8014d80 <__swbuf_r>
 8014b1c:	6813      	ldr	r3, [r2, #0]
 8014b1e:	1c58      	adds	r0, r3, #1
 8014b20:	6010      	str	r0, [r2, #0]
 8014b22:	7019      	strb	r1, [r3, #0]
 8014b24:	4608      	mov	r0, r1
 8014b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b2a:	4770      	bx	lr

08014b2c <__sfputs_r>:
 8014b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2e:	4606      	mov	r6, r0
 8014b30:	460f      	mov	r7, r1
 8014b32:	4614      	mov	r4, r2
 8014b34:	18d5      	adds	r5, r2, r3
 8014b36:	42ac      	cmp	r4, r5
 8014b38:	d101      	bne.n	8014b3e <__sfputs_r+0x12>
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	e007      	b.n	8014b4e <__sfputs_r+0x22>
 8014b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b42:	463a      	mov	r2, r7
 8014b44:	4630      	mov	r0, r6
 8014b46:	f7ff ffda 	bl	8014afe <__sfputc_r>
 8014b4a:	1c43      	adds	r3, r0, #1
 8014b4c:	d1f3      	bne.n	8014b36 <__sfputs_r+0xa>
 8014b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014b50 <_vfiprintf_r>:
 8014b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b54:	460d      	mov	r5, r1
 8014b56:	b09d      	sub	sp, #116	@ 0x74
 8014b58:	4614      	mov	r4, r2
 8014b5a:	4698      	mov	r8, r3
 8014b5c:	4606      	mov	r6, r0
 8014b5e:	b118      	cbz	r0, 8014b68 <_vfiprintf_r+0x18>
 8014b60:	6a03      	ldr	r3, [r0, #32]
 8014b62:	b90b      	cbnz	r3, 8014b68 <_vfiprintf_r+0x18>
 8014b64:	f7fe fa28 	bl	8012fb8 <__sinit>
 8014b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b6a:	07d9      	lsls	r1, r3, #31
 8014b6c:	d405      	bmi.n	8014b7a <_vfiprintf_r+0x2a>
 8014b6e:	89ab      	ldrh	r3, [r5, #12]
 8014b70:	059a      	lsls	r2, r3, #22
 8014b72:	d402      	bmi.n	8014b7a <_vfiprintf_r+0x2a>
 8014b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b76:	f7fe fb46 	bl	8013206 <__retarget_lock_acquire_recursive>
 8014b7a:	89ab      	ldrh	r3, [r5, #12]
 8014b7c:	071b      	lsls	r3, r3, #28
 8014b7e:	d501      	bpl.n	8014b84 <_vfiprintf_r+0x34>
 8014b80:	692b      	ldr	r3, [r5, #16]
 8014b82:	b99b      	cbnz	r3, 8014bac <_vfiprintf_r+0x5c>
 8014b84:	4629      	mov	r1, r5
 8014b86:	4630      	mov	r0, r6
 8014b88:	f000 f938 	bl	8014dfc <__swsetup_r>
 8014b8c:	b170      	cbz	r0, 8014bac <_vfiprintf_r+0x5c>
 8014b8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b90:	07dc      	lsls	r4, r3, #31
 8014b92:	d504      	bpl.n	8014b9e <_vfiprintf_r+0x4e>
 8014b94:	f04f 30ff 	mov.w	r0, #4294967295
 8014b98:	b01d      	add	sp, #116	@ 0x74
 8014b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b9e:	89ab      	ldrh	r3, [r5, #12]
 8014ba0:	0598      	lsls	r0, r3, #22
 8014ba2:	d4f7      	bmi.n	8014b94 <_vfiprintf_r+0x44>
 8014ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ba6:	f7fe fb2f 	bl	8013208 <__retarget_lock_release_recursive>
 8014baa:	e7f3      	b.n	8014b94 <_vfiprintf_r+0x44>
 8014bac:	2300      	movs	r3, #0
 8014bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bb0:	2320      	movs	r3, #32
 8014bb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bba:	2330      	movs	r3, #48	@ 0x30
 8014bbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014d6c <_vfiprintf_r+0x21c>
 8014bc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014bc4:	f04f 0901 	mov.w	r9, #1
 8014bc8:	4623      	mov	r3, r4
 8014bca:	469a      	mov	sl, r3
 8014bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bd0:	b10a      	cbz	r2, 8014bd6 <_vfiprintf_r+0x86>
 8014bd2:	2a25      	cmp	r2, #37	@ 0x25
 8014bd4:	d1f9      	bne.n	8014bca <_vfiprintf_r+0x7a>
 8014bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8014bda:	d00b      	beq.n	8014bf4 <_vfiprintf_r+0xa4>
 8014bdc:	465b      	mov	r3, fp
 8014bde:	4622      	mov	r2, r4
 8014be0:	4629      	mov	r1, r5
 8014be2:	4630      	mov	r0, r6
 8014be4:	f7ff ffa2 	bl	8014b2c <__sfputs_r>
 8014be8:	3001      	adds	r0, #1
 8014bea:	f000 80a7 	beq.w	8014d3c <_vfiprintf_r+0x1ec>
 8014bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bf0:	445a      	add	r2, fp
 8014bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f000 809f 	beq.w	8014d3c <_vfiprintf_r+0x1ec>
 8014bfe:	2300      	movs	r3, #0
 8014c00:	f04f 32ff 	mov.w	r2, #4294967295
 8014c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c08:	f10a 0a01 	add.w	sl, sl, #1
 8014c0c:	9304      	str	r3, [sp, #16]
 8014c0e:	9307      	str	r3, [sp, #28]
 8014c10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014c14:	931a      	str	r3, [sp, #104]	@ 0x68
 8014c16:	4654      	mov	r4, sl
 8014c18:	2205      	movs	r2, #5
 8014c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c1e:	4853      	ldr	r0, [pc, #332]	@ (8014d6c <_vfiprintf_r+0x21c>)
 8014c20:	f7eb fb5e 	bl	80002e0 <memchr>
 8014c24:	9a04      	ldr	r2, [sp, #16]
 8014c26:	b9d8      	cbnz	r0, 8014c60 <_vfiprintf_r+0x110>
 8014c28:	06d1      	lsls	r1, r2, #27
 8014c2a:	bf44      	itt	mi
 8014c2c:	2320      	movmi	r3, #32
 8014c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c32:	0713      	lsls	r3, r2, #28
 8014c34:	bf44      	itt	mi
 8014c36:	232b      	movmi	r3, #43	@ 0x2b
 8014c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8014c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c42:	d015      	beq.n	8014c70 <_vfiprintf_r+0x120>
 8014c44:	9a07      	ldr	r2, [sp, #28]
 8014c46:	4654      	mov	r4, sl
 8014c48:	2000      	movs	r0, #0
 8014c4a:	f04f 0c0a 	mov.w	ip, #10
 8014c4e:	4621      	mov	r1, r4
 8014c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c54:	3b30      	subs	r3, #48	@ 0x30
 8014c56:	2b09      	cmp	r3, #9
 8014c58:	d94b      	bls.n	8014cf2 <_vfiprintf_r+0x1a2>
 8014c5a:	b1b0      	cbz	r0, 8014c8a <_vfiprintf_r+0x13a>
 8014c5c:	9207      	str	r2, [sp, #28]
 8014c5e:	e014      	b.n	8014c8a <_vfiprintf_r+0x13a>
 8014c60:	eba0 0308 	sub.w	r3, r0, r8
 8014c64:	fa09 f303 	lsl.w	r3, r9, r3
 8014c68:	4313      	orrs	r3, r2
 8014c6a:	9304      	str	r3, [sp, #16]
 8014c6c:	46a2      	mov	sl, r4
 8014c6e:	e7d2      	b.n	8014c16 <_vfiprintf_r+0xc6>
 8014c70:	9b03      	ldr	r3, [sp, #12]
 8014c72:	1d19      	adds	r1, r3, #4
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	9103      	str	r1, [sp, #12]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	bfbb      	ittet	lt
 8014c7c:	425b      	neglt	r3, r3
 8014c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8014c82:	9307      	strge	r3, [sp, #28]
 8014c84:	9307      	strlt	r3, [sp, #28]
 8014c86:	bfb8      	it	lt
 8014c88:	9204      	strlt	r2, [sp, #16]
 8014c8a:	7823      	ldrb	r3, [r4, #0]
 8014c8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014c8e:	d10a      	bne.n	8014ca6 <_vfiprintf_r+0x156>
 8014c90:	7863      	ldrb	r3, [r4, #1]
 8014c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c94:	d132      	bne.n	8014cfc <_vfiprintf_r+0x1ac>
 8014c96:	9b03      	ldr	r3, [sp, #12]
 8014c98:	1d1a      	adds	r2, r3, #4
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	9203      	str	r2, [sp, #12]
 8014c9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014ca2:	3402      	adds	r4, #2
 8014ca4:	9305      	str	r3, [sp, #20]
 8014ca6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014d7c <_vfiprintf_r+0x22c>
 8014caa:	7821      	ldrb	r1, [r4, #0]
 8014cac:	2203      	movs	r2, #3
 8014cae:	4650      	mov	r0, sl
 8014cb0:	f7eb fb16 	bl	80002e0 <memchr>
 8014cb4:	b138      	cbz	r0, 8014cc6 <_vfiprintf_r+0x176>
 8014cb6:	9b04      	ldr	r3, [sp, #16]
 8014cb8:	eba0 000a 	sub.w	r0, r0, sl
 8014cbc:	2240      	movs	r2, #64	@ 0x40
 8014cbe:	4082      	lsls	r2, r0
 8014cc0:	4313      	orrs	r3, r2
 8014cc2:	3401      	adds	r4, #1
 8014cc4:	9304      	str	r3, [sp, #16]
 8014cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cca:	4829      	ldr	r0, [pc, #164]	@ (8014d70 <_vfiprintf_r+0x220>)
 8014ccc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014cd0:	2206      	movs	r2, #6
 8014cd2:	f7eb fb05 	bl	80002e0 <memchr>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	d03f      	beq.n	8014d5a <_vfiprintf_r+0x20a>
 8014cda:	4b26      	ldr	r3, [pc, #152]	@ (8014d74 <_vfiprintf_r+0x224>)
 8014cdc:	bb1b      	cbnz	r3, 8014d26 <_vfiprintf_r+0x1d6>
 8014cde:	9b03      	ldr	r3, [sp, #12]
 8014ce0:	3307      	adds	r3, #7
 8014ce2:	f023 0307 	bic.w	r3, r3, #7
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	9303      	str	r3, [sp, #12]
 8014cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cec:	443b      	add	r3, r7
 8014cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8014cf0:	e76a      	b.n	8014bc8 <_vfiprintf_r+0x78>
 8014cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014cf6:	460c      	mov	r4, r1
 8014cf8:	2001      	movs	r0, #1
 8014cfa:	e7a8      	b.n	8014c4e <_vfiprintf_r+0xfe>
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	3401      	adds	r4, #1
 8014d00:	9305      	str	r3, [sp, #20]
 8014d02:	4619      	mov	r1, r3
 8014d04:	f04f 0c0a 	mov.w	ip, #10
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d0e:	3a30      	subs	r2, #48	@ 0x30
 8014d10:	2a09      	cmp	r2, #9
 8014d12:	d903      	bls.n	8014d1c <_vfiprintf_r+0x1cc>
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d0c6      	beq.n	8014ca6 <_vfiprintf_r+0x156>
 8014d18:	9105      	str	r1, [sp, #20]
 8014d1a:	e7c4      	b.n	8014ca6 <_vfiprintf_r+0x156>
 8014d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d20:	4604      	mov	r4, r0
 8014d22:	2301      	movs	r3, #1
 8014d24:	e7f0      	b.n	8014d08 <_vfiprintf_r+0x1b8>
 8014d26:	ab03      	add	r3, sp, #12
 8014d28:	9300      	str	r3, [sp, #0]
 8014d2a:	462a      	mov	r2, r5
 8014d2c:	4b12      	ldr	r3, [pc, #72]	@ (8014d78 <_vfiprintf_r+0x228>)
 8014d2e:	a904      	add	r1, sp, #16
 8014d30:	4630      	mov	r0, r6
 8014d32:	f7fd fd0d 	bl	8012750 <_printf_float>
 8014d36:	4607      	mov	r7, r0
 8014d38:	1c78      	adds	r0, r7, #1
 8014d3a:	d1d6      	bne.n	8014cea <_vfiprintf_r+0x19a>
 8014d3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d3e:	07d9      	lsls	r1, r3, #31
 8014d40:	d405      	bmi.n	8014d4e <_vfiprintf_r+0x1fe>
 8014d42:	89ab      	ldrh	r3, [r5, #12]
 8014d44:	059a      	lsls	r2, r3, #22
 8014d46:	d402      	bmi.n	8014d4e <_vfiprintf_r+0x1fe>
 8014d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d4a:	f7fe fa5d 	bl	8013208 <__retarget_lock_release_recursive>
 8014d4e:	89ab      	ldrh	r3, [r5, #12]
 8014d50:	065b      	lsls	r3, r3, #25
 8014d52:	f53f af1f 	bmi.w	8014b94 <_vfiprintf_r+0x44>
 8014d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d58:	e71e      	b.n	8014b98 <_vfiprintf_r+0x48>
 8014d5a:	ab03      	add	r3, sp, #12
 8014d5c:	9300      	str	r3, [sp, #0]
 8014d5e:	462a      	mov	r2, r5
 8014d60:	4b05      	ldr	r3, [pc, #20]	@ (8014d78 <_vfiprintf_r+0x228>)
 8014d62:	a904      	add	r1, sp, #16
 8014d64:	4630      	mov	r0, r6
 8014d66:	f7fd ff7b 	bl	8012c60 <_printf_i>
 8014d6a:	e7e4      	b.n	8014d36 <_vfiprintf_r+0x1e6>
 8014d6c:	08016368 	.word	0x08016368
 8014d70:	08016372 	.word	0x08016372
 8014d74:	08012751 	.word	0x08012751
 8014d78:	08014b2d 	.word	0x08014b2d
 8014d7c:	0801636e 	.word	0x0801636e

08014d80 <__swbuf_r>:
 8014d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d82:	460e      	mov	r6, r1
 8014d84:	4614      	mov	r4, r2
 8014d86:	4605      	mov	r5, r0
 8014d88:	b118      	cbz	r0, 8014d92 <__swbuf_r+0x12>
 8014d8a:	6a03      	ldr	r3, [r0, #32]
 8014d8c:	b90b      	cbnz	r3, 8014d92 <__swbuf_r+0x12>
 8014d8e:	f7fe f913 	bl	8012fb8 <__sinit>
 8014d92:	69a3      	ldr	r3, [r4, #24]
 8014d94:	60a3      	str	r3, [r4, #8]
 8014d96:	89a3      	ldrh	r3, [r4, #12]
 8014d98:	071a      	lsls	r2, r3, #28
 8014d9a:	d501      	bpl.n	8014da0 <__swbuf_r+0x20>
 8014d9c:	6923      	ldr	r3, [r4, #16]
 8014d9e:	b943      	cbnz	r3, 8014db2 <__swbuf_r+0x32>
 8014da0:	4621      	mov	r1, r4
 8014da2:	4628      	mov	r0, r5
 8014da4:	f000 f82a 	bl	8014dfc <__swsetup_r>
 8014da8:	b118      	cbz	r0, 8014db2 <__swbuf_r+0x32>
 8014daa:	f04f 37ff 	mov.w	r7, #4294967295
 8014dae:	4638      	mov	r0, r7
 8014db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014db2:	6823      	ldr	r3, [r4, #0]
 8014db4:	6922      	ldr	r2, [r4, #16]
 8014db6:	1a98      	subs	r0, r3, r2
 8014db8:	6963      	ldr	r3, [r4, #20]
 8014dba:	b2f6      	uxtb	r6, r6
 8014dbc:	4283      	cmp	r3, r0
 8014dbe:	4637      	mov	r7, r6
 8014dc0:	dc05      	bgt.n	8014dce <__swbuf_r+0x4e>
 8014dc2:	4621      	mov	r1, r4
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	f7ff fda9 	bl	801491c <_fflush_r>
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	d1ed      	bne.n	8014daa <__swbuf_r+0x2a>
 8014dce:	68a3      	ldr	r3, [r4, #8]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	60a3      	str	r3, [r4, #8]
 8014dd4:	6823      	ldr	r3, [r4, #0]
 8014dd6:	1c5a      	adds	r2, r3, #1
 8014dd8:	6022      	str	r2, [r4, #0]
 8014dda:	701e      	strb	r6, [r3, #0]
 8014ddc:	6962      	ldr	r2, [r4, #20]
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d004      	beq.n	8014dee <__swbuf_r+0x6e>
 8014de4:	89a3      	ldrh	r3, [r4, #12]
 8014de6:	07db      	lsls	r3, r3, #31
 8014de8:	d5e1      	bpl.n	8014dae <__swbuf_r+0x2e>
 8014dea:	2e0a      	cmp	r6, #10
 8014dec:	d1df      	bne.n	8014dae <__swbuf_r+0x2e>
 8014dee:	4621      	mov	r1, r4
 8014df0:	4628      	mov	r0, r5
 8014df2:	f7ff fd93 	bl	801491c <_fflush_r>
 8014df6:	2800      	cmp	r0, #0
 8014df8:	d0d9      	beq.n	8014dae <__swbuf_r+0x2e>
 8014dfa:	e7d6      	b.n	8014daa <__swbuf_r+0x2a>

08014dfc <__swsetup_r>:
 8014dfc:	b538      	push	{r3, r4, r5, lr}
 8014dfe:	4b29      	ldr	r3, [pc, #164]	@ (8014ea4 <__swsetup_r+0xa8>)
 8014e00:	4605      	mov	r5, r0
 8014e02:	6818      	ldr	r0, [r3, #0]
 8014e04:	460c      	mov	r4, r1
 8014e06:	b118      	cbz	r0, 8014e10 <__swsetup_r+0x14>
 8014e08:	6a03      	ldr	r3, [r0, #32]
 8014e0a:	b90b      	cbnz	r3, 8014e10 <__swsetup_r+0x14>
 8014e0c:	f7fe f8d4 	bl	8012fb8 <__sinit>
 8014e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e14:	0719      	lsls	r1, r3, #28
 8014e16:	d422      	bmi.n	8014e5e <__swsetup_r+0x62>
 8014e18:	06da      	lsls	r2, r3, #27
 8014e1a:	d407      	bmi.n	8014e2c <__swsetup_r+0x30>
 8014e1c:	2209      	movs	r2, #9
 8014e1e:	602a      	str	r2, [r5, #0]
 8014e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e24:	81a3      	strh	r3, [r4, #12]
 8014e26:	f04f 30ff 	mov.w	r0, #4294967295
 8014e2a:	e033      	b.n	8014e94 <__swsetup_r+0x98>
 8014e2c:	0758      	lsls	r0, r3, #29
 8014e2e:	d512      	bpl.n	8014e56 <__swsetup_r+0x5a>
 8014e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e32:	b141      	cbz	r1, 8014e46 <__swsetup_r+0x4a>
 8014e34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e38:	4299      	cmp	r1, r3
 8014e3a:	d002      	beq.n	8014e42 <__swsetup_r+0x46>
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f7fe ffc5 	bl	8013dcc <_free_r>
 8014e42:	2300      	movs	r3, #0
 8014e44:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e46:	89a3      	ldrh	r3, [r4, #12]
 8014e48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014e4c:	81a3      	strh	r3, [r4, #12]
 8014e4e:	2300      	movs	r3, #0
 8014e50:	6063      	str	r3, [r4, #4]
 8014e52:	6923      	ldr	r3, [r4, #16]
 8014e54:	6023      	str	r3, [r4, #0]
 8014e56:	89a3      	ldrh	r3, [r4, #12]
 8014e58:	f043 0308 	orr.w	r3, r3, #8
 8014e5c:	81a3      	strh	r3, [r4, #12]
 8014e5e:	6923      	ldr	r3, [r4, #16]
 8014e60:	b94b      	cbnz	r3, 8014e76 <__swsetup_r+0x7a>
 8014e62:	89a3      	ldrh	r3, [r4, #12]
 8014e64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e6c:	d003      	beq.n	8014e76 <__swsetup_r+0x7a>
 8014e6e:	4621      	mov	r1, r4
 8014e70:	4628      	mov	r0, r5
 8014e72:	f000 f883 	bl	8014f7c <__smakebuf_r>
 8014e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e7a:	f013 0201 	ands.w	r2, r3, #1
 8014e7e:	d00a      	beq.n	8014e96 <__swsetup_r+0x9a>
 8014e80:	2200      	movs	r2, #0
 8014e82:	60a2      	str	r2, [r4, #8]
 8014e84:	6962      	ldr	r2, [r4, #20]
 8014e86:	4252      	negs	r2, r2
 8014e88:	61a2      	str	r2, [r4, #24]
 8014e8a:	6922      	ldr	r2, [r4, #16]
 8014e8c:	b942      	cbnz	r2, 8014ea0 <__swsetup_r+0xa4>
 8014e8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014e92:	d1c5      	bne.n	8014e20 <__swsetup_r+0x24>
 8014e94:	bd38      	pop	{r3, r4, r5, pc}
 8014e96:	0799      	lsls	r1, r3, #30
 8014e98:	bf58      	it	pl
 8014e9a:	6962      	ldrpl	r2, [r4, #20]
 8014e9c:	60a2      	str	r2, [r4, #8]
 8014e9e:	e7f4      	b.n	8014e8a <__swsetup_r+0x8e>
 8014ea0:	2000      	movs	r0, #0
 8014ea2:	e7f7      	b.n	8014e94 <__swsetup_r+0x98>
 8014ea4:	24000114 	.word	0x24000114

08014ea8 <_raise_r>:
 8014ea8:	291f      	cmp	r1, #31
 8014eaa:	b538      	push	{r3, r4, r5, lr}
 8014eac:	4605      	mov	r5, r0
 8014eae:	460c      	mov	r4, r1
 8014eb0:	d904      	bls.n	8014ebc <_raise_r+0x14>
 8014eb2:	2316      	movs	r3, #22
 8014eb4:	6003      	str	r3, [r0, #0]
 8014eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eba:	bd38      	pop	{r3, r4, r5, pc}
 8014ebc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014ebe:	b112      	cbz	r2, 8014ec6 <_raise_r+0x1e>
 8014ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ec4:	b94b      	cbnz	r3, 8014eda <_raise_r+0x32>
 8014ec6:	4628      	mov	r0, r5
 8014ec8:	f000 f830 	bl	8014f2c <_getpid_r>
 8014ecc:	4622      	mov	r2, r4
 8014ece:	4601      	mov	r1, r0
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ed6:	f000 b817 	b.w	8014f08 <_kill_r>
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d00a      	beq.n	8014ef4 <_raise_r+0x4c>
 8014ede:	1c59      	adds	r1, r3, #1
 8014ee0:	d103      	bne.n	8014eea <_raise_r+0x42>
 8014ee2:	2316      	movs	r3, #22
 8014ee4:	6003      	str	r3, [r0, #0]
 8014ee6:	2001      	movs	r0, #1
 8014ee8:	e7e7      	b.n	8014eba <_raise_r+0x12>
 8014eea:	2100      	movs	r1, #0
 8014eec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	4798      	blx	r3
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	e7e0      	b.n	8014eba <_raise_r+0x12>

08014ef8 <raise>:
 8014ef8:	4b02      	ldr	r3, [pc, #8]	@ (8014f04 <raise+0xc>)
 8014efa:	4601      	mov	r1, r0
 8014efc:	6818      	ldr	r0, [r3, #0]
 8014efe:	f7ff bfd3 	b.w	8014ea8 <_raise_r>
 8014f02:	bf00      	nop
 8014f04:	24000114 	.word	0x24000114

08014f08 <_kill_r>:
 8014f08:	b538      	push	{r3, r4, r5, lr}
 8014f0a:	4d07      	ldr	r5, [pc, #28]	@ (8014f28 <_kill_r+0x20>)
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	4604      	mov	r4, r0
 8014f10:	4608      	mov	r0, r1
 8014f12:	4611      	mov	r1, r2
 8014f14:	602b      	str	r3, [r5, #0]
 8014f16:	f7ec fbbf 	bl	8001698 <_kill>
 8014f1a:	1c43      	adds	r3, r0, #1
 8014f1c:	d102      	bne.n	8014f24 <_kill_r+0x1c>
 8014f1e:	682b      	ldr	r3, [r5, #0]
 8014f20:	b103      	cbz	r3, 8014f24 <_kill_r+0x1c>
 8014f22:	6023      	str	r3, [r4, #0]
 8014f24:	bd38      	pop	{r3, r4, r5, pc}
 8014f26:	bf00      	nop
 8014f28:	24002480 	.word	0x24002480

08014f2c <_getpid_r>:
 8014f2c:	f7ec bbac 	b.w	8001688 <_getpid>

08014f30 <__swhatbuf_r>:
 8014f30:	b570      	push	{r4, r5, r6, lr}
 8014f32:	460c      	mov	r4, r1
 8014f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f38:	2900      	cmp	r1, #0
 8014f3a:	b096      	sub	sp, #88	@ 0x58
 8014f3c:	4615      	mov	r5, r2
 8014f3e:	461e      	mov	r6, r3
 8014f40:	da0d      	bge.n	8014f5e <__swhatbuf_r+0x2e>
 8014f42:	89a3      	ldrh	r3, [r4, #12]
 8014f44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014f48:	f04f 0100 	mov.w	r1, #0
 8014f4c:	bf14      	ite	ne
 8014f4e:	2340      	movne	r3, #64	@ 0x40
 8014f50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014f54:	2000      	movs	r0, #0
 8014f56:	6031      	str	r1, [r6, #0]
 8014f58:	602b      	str	r3, [r5, #0]
 8014f5a:	b016      	add	sp, #88	@ 0x58
 8014f5c:	bd70      	pop	{r4, r5, r6, pc}
 8014f5e:	466a      	mov	r2, sp
 8014f60:	f000 f848 	bl	8014ff4 <_fstat_r>
 8014f64:	2800      	cmp	r0, #0
 8014f66:	dbec      	blt.n	8014f42 <__swhatbuf_r+0x12>
 8014f68:	9901      	ldr	r1, [sp, #4]
 8014f6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014f6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014f72:	4259      	negs	r1, r3
 8014f74:	4159      	adcs	r1, r3
 8014f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014f7a:	e7eb      	b.n	8014f54 <__swhatbuf_r+0x24>

08014f7c <__smakebuf_r>:
 8014f7c:	898b      	ldrh	r3, [r1, #12]
 8014f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f80:	079d      	lsls	r5, r3, #30
 8014f82:	4606      	mov	r6, r0
 8014f84:	460c      	mov	r4, r1
 8014f86:	d507      	bpl.n	8014f98 <__smakebuf_r+0x1c>
 8014f88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014f8c:	6023      	str	r3, [r4, #0]
 8014f8e:	6123      	str	r3, [r4, #16]
 8014f90:	2301      	movs	r3, #1
 8014f92:	6163      	str	r3, [r4, #20]
 8014f94:	b003      	add	sp, #12
 8014f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f98:	ab01      	add	r3, sp, #4
 8014f9a:	466a      	mov	r2, sp
 8014f9c:	f7ff ffc8 	bl	8014f30 <__swhatbuf_r>
 8014fa0:	9f00      	ldr	r7, [sp, #0]
 8014fa2:	4605      	mov	r5, r0
 8014fa4:	4639      	mov	r1, r7
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	f7fd fab6 	bl	8012518 <_malloc_r>
 8014fac:	b948      	cbnz	r0, 8014fc2 <__smakebuf_r+0x46>
 8014fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fb2:	059a      	lsls	r2, r3, #22
 8014fb4:	d4ee      	bmi.n	8014f94 <__smakebuf_r+0x18>
 8014fb6:	f023 0303 	bic.w	r3, r3, #3
 8014fba:	f043 0302 	orr.w	r3, r3, #2
 8014fbe:	81a3      	strh	r3, [r4, #12]
 8014fc0:	e7e2      	b.n	8014f88 <__smakebuf_r+0xc>
 8014fc2:	89a3      	ldrh	r3, [r4, #12]
 8014fc4:	6020      	str	r0, [r4, #0]
 8014fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014fca:	81a3      	strh	r3, [r4, #12]
 8014fcc:	9b01      	ldr	r3, [sp, #4]
 8014fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014fd2:	b15b      	cbz	r3, 8014fec <__smakebuf_r+0x70>
 8014fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fd8:	4630      	mov	r0, r6
 8014fda:	f000 f81d 	bl	8015018 <_isatty_r>
 8014fde:	b128      	cbz	r0, 8014fec <__smakebuf_r+0x70>
 8014fe0:	89a3      	ldrh	r3, [r4, #12]
 8014fe2:	f023 0303 	bic.w	r3, r3, #3
 8014fe6:	f043 0301 	orr.w	r3, r3, #1
 8014fea:	81a3      	strh	r3, [r4, #12]
 8014fec:	89a3      	ldrh	r3, [r4, #12]
 8014fee:	431d      	orrs	r5, r3
 8014ff0:	81a5      	strh	r5, [r4, #12]
 8014ff2:	e7cf      	b.n	8014f94 <__smakebuf_r+0x18>

08014ff4 <_fstat_r>:
 8014ff4:	b538      	push	{r3, r4, r5, lr}
 8014ff6:	4d07      	ldr	r5, [pc, #28]	@ (8015014 <_fstat_r+0x20>)
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	4604      	mov	r4, r0
 8014ffc:	4608      	mov	r0, r1
 8014ffe:	4611      	mov	r1, r2
 8015000:	602b      	str	r3, [r5, #0]
 8015002:	f7ec fba9 	bl	8001758 <_fstat>
 8015006:	1c43      	adds	r3, r0, #1
 8015008:	d102      	bne.n	8015010 <_fstat_r+0x1c>
 801500a:	682b      	ldr	r3, [r5, #0]
 801500c:	b103      	cbz	r3, 8015010 <_fstat_r+0x1c>
 801500e:	6023      	str	r3, [r4, #0]
 8015010:	bd38      	pop	{r3, r4, r5, pc}
 8015012:	bf00      	nop
 8015014:	24002480 	.word	0x24002480

08015018 <_isatty_r>:
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	4d06      	ldr	r5, [pc, #24]	@ (8015034 <_isatty_r+0x1c>)
 801501c:	2300      	movs	r3, #0
 801501e:	4604      	mov	r4, r0
 8015020:	4608      	mov	r0, r1
 8015022:	602b      	str	r3, [r5, #0]
 8015024:	f7ec fba8 	bl	8001778 <_isatty>
 8015028:	1c43      	adds	r3, r0, #1
 801502a:	d102      	bne.n	8015032 <_isatty_r+0x1a>
 801502c:	682b      	ldr	r3, [r5, #0]
 801502e:	b103      	cbz	r3, 8015032 <_isatty_r+0x1a>
 8015030:	6023      	str	r3, [r4, #0]
 8015032:	bd38      	pop	{r3, r4, r5, pc}
 8015034:	24002480 	.word	0x24002480

08015038 <fmod>:
 8015038:	b508      	push	{r3, lr}
 801503a:	ed2d 8b04 	vpush	{d8-d9}
 801503e:	eeb0 9b40 	vmov.f64	d9, d0
 8015042:	eeb0 8b41 	vmov.f64	d8, d1
 8015046:	f000 f81b 	bl	8015080 <__ieee754_fmod>
 801504a:	eeb4 9b48 	vcmp.f64	d9, d8
 801504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015052:	d60c      	bvs.n	801506e <fmod+0x36>
 8015054:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8015078 <fmod+0x40>
 8015058:	eeb4 8b49 	vcmp.f64	d8, d9
 801505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015060:	d105      	bne.n	801506e <fmod+0x36>
 8015062:	f7fe f8a5 	bl	80131b0 <__errno>
 8015066:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801506a:	2321      	movs	r3, #33	@ 0x21
 801506c:	6003      	str	r3, [r0, #0]
 801506e:	ecbd 8b04 	vpop	{d8-d9}
 8015072:	bd08      	pop	{r3, pc}
 8015074:	f3af 8000 	nop.w
	...

08015080 <__ieee754_fmod>:
 8015080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015084:	ed8d 1b00 	vstr	d1, [sp]
 8015088:	e9dd 6500 	ldrd	r6, r5, [sp]
 801508c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8015090:	ea56 0307 	orrs.w	r3, r6, r7
 8015094:	46b6      	mov	lr, r6
 8015096:	d00d      	beq.n	80150b4 <__ieee754_fmod+0x34>
 8015098:	ee10 ca90 	vmov	ip, s1
 801509c:	4b78      	ldr	r3, [pc, #480]	@ (8015280 <__ieee754_fmod+0x200>)
 801509e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 80150a2:	4598      	cmp	r8, r3
 80150a4:	d806      	bhi.n	80150b4 <__ieee754_fmod+0x34>
 80150a6:	4273      	negs	r3, r6
 80150a8:	4a76      	ldr	r2, [pc, #472]	@ (8015284 <__ieee754_fmod+0x204>)
 80150aa:	4333      	orrs	r3, r6
 80150ac:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80150b0:	4293      	cmp	r3, r2
 80150b2:	d908      	bls.n	80150c6 <__ieee754_fmod+0x46>
 80150b4:	ed9d 7b00 	vldr	d7, [sp]
 80150b8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80150bc:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80150c0:	b003      	add	sp, #12
 80150c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150c6:	ee10 9a10 	vmov	r9, s0
 80150ca:	45b8      	cmp	r8, r7
 80150cc:	4649      	mov	r1, r9
 80150ce:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 80150d2:	dc09      	bgt.n	80150e8 <__ieee754_fmod+0x68>
 80150d4:	dbf4      	blt.n	80150c0 <__ieee754_fmod+0x40>
 80150d6:	454e      	cmp	r6, r9
 80150d8:	d8f2      	bhi.n	80150c0 <__ieee754_fmod+0x40>
 80150da:	d105      	bne.n	80150e8 <__ieee754_fmod+0x68>
 80150dc:	4b6a      	ldr	r3, [pc, #424]	@ (8015288 <__ieee754_fmod+0x208>)
 80150de:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 80150e2:	ed93 0b00 	vldr	d0, [r3]
 80150e6:	e7eb      	b.n	80150c0 <__ieee754_fmod+0x40>
 80150e8:	4a66      	ldr	r2, [pc, #408]	@ (8015284 <__ieee754_fmod+0x204>)
 80150ea:	ea1c 0f02 	tst.w	ip, r2
 80150ee:	d14a      	bne.n	8015186 <__ieee754_fmod+0x106>
 80150f0:	f1b8 0f00 	cmp.w	r8, #0
 80150f4:	d13f      	bne.n	8015176 <__ieee754_fmod+0xf6>
 80150f6:	4865      	ldr	r0, [pc, #404]	@ (801528c <__ieee754_fmod+0x20c>)
 80150f8:	464b      	mov	r3, r9
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	dc38      	bgt.n	8015170 <__ieee754_fmod+0xf0>
 80150fe:	4215      	tst	r5, r2
 8015100:	d150      	bne.n	80151a4 <__ieee754_fmod+0x124>
 8015102:	2f00      	cmp	r7, #0
 8015104:	d147      	bne.n	8015196 <__ieee754_fmod+0x116>
 8015106:	4a61      	ldr	r2, [pc, #388]	@ (801528c <__ieee754_fmod+0x20c>)
 8015108:	4633      	mov	r3, r6
 801510a:	2b00      	cmp	r3, #0
 801510c:	dc40      	bgt.n	8015190 <__ieee754_fmod+0x110>
 801510e:	4b60      	ldr	r3, [pc, #384]	@ (8015290 <__ieee754_fmod+0x210>)
 8015110:	4298      	cmp	r0, r3
 8015112:	db4b      	blt.n	80151ac <__ieee754_fmod+0x12c>
 8015114:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8015118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801511c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015290 <__ieee754_fmod+0x210>
 8015120:	4562      	cmp	r2, ip
 8015122:	db58      	blt.n	80151d6 <__ieee754_fmod+0x156>
 8015124:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015128:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 801512c:	1a80      	subs	r0, r0, r2
 801512e:	1b5e      	subs	r6, r3, r5
 8015130:	eba1 070e 	sub.w	r7, r1, lr
 8015134:	2800      	cmp	r0, #0
 8015136:	d164      	bne.n	8015202 <__ieee754_fmod+0x182>
 8015138:	4571      	cmp	r1, lr
 801513a:	bf38      	it	cc
 801513c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8015140:	2e00      	cmp	r6, #0
 8015142:	bfa4      	itt	ge
 8015144:	4639      	movge	r1, r7
 8015146:	4633      	movge	r3, r6
 8015148:	ea53 0001 	orrs.w	r0, r3, r1
 801514c:	d0c6      	beq.n	80150dc <__ieee754_fmod+0x5c>
 801514e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015152:	db6b      	blt.n	801522c <__ieee754_fmod+0x1ac>
 8015154:	484e      	ldr	r0, [pc, #312]	@ (8015290 <__ieee754_fmod+0x210>)
 8015156:	4282      	cmp	r2, r0
 8015158:	db6e      	blt.n	8015238 <__ieee754_fmod+0x1b8>
 801515a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801515e:	4323      	orrs	r3, r4
 8015160:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8015164:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015168:	460c      	mov	r4, r1
 801516a:	ec45 4b10 	vmov	d0, r4, r5
 801516e:	e7a7      	b.n	80150c0 <__ieee754_fmod+0x40>
 8015170:	3801      	subs	r0, #1
 8015172:	005b      	lsls	r3, r3, #1
 8015174:	e7c1      	b.n	80150fa <__ieee754_fmod+0x7a>
 8015176:	4846      	ldr	r0, [pc, #280]	@ (8015290 <__ieee754_fmod+0x210>)
 8015178:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801517c:	2b00      	cmp	r3, #0
 801517e:	ddbe      	ble.n	80150fe <__ieee754_fmod+0x7e>
 8015180:	3801      	subs	r0, #1
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	e7fa      	b.n	801517c <__ieee754_fmod+0xfc>
 8015186:	ea4f 5028 	mov.w	r0, r8, asr #20
 801518a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 801518e:	e7b6      	b.n	80150fe <__ieee754_fmod+0x7e>
 8015190:	3a01      	subs	r2, #1
 8015192:	005b      	lsls	r3, r3, #1
 8015194:	e7b9      	b.n	801510a <__ieee754_fmod+0x8a>
 8015196:	4a3e      	ldr	r2, [pc, #248]	@ (8015290 <__ieee754_fmod+0x210>)
 8015198:	02fb      	lsls	r3, r7, #11
 801519a:	2b00      	cmp	r3, #0
 801519c:	ddb7      	ble.n	801510e <__ieee754_fmod+0x8e>
 801519e:	3a01      	subs	r2, #1
 80151a0:	005b      	lsls	r3, r3, #1
 80151a2:	e7fa      	b.n	801519a <__ieee754_fmod+0x11a>
 80151a4:	153a      	asrs	r2, r7, #20
 80151a6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80151aa:	e7b0      	b.n	801510e <__ieee754_fmod+0x8e>
 80151ac:	eba3 0c00 	sub.w	ip, r3, r0
 80151b0:	f1bc 0f1f 	cmp.w	ip, #31
 80151b4:	dc09      	bgt.n	80151ca <__ieee754_fmod+0x14a>
 80151b6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80151ba:	fa08 f10c 	lsl.w	r1, r8, ip
 80151be:	fa29 f303 	lsr.w	r3, r9, r3
 80151c2:	430b      	orrs	r3, r1
 80151c4:	fa09 f10c 	lsl.w	r1, r9, ip
 80151c8:	e7a8      	b.n	801511c <__ieee754_fmod+0x9c>
 80151ca:	4b32      	ldr	r3, [pc, #200]	@ (8015294 <__ieee754_fmod+0x214>)
 80151cc:	1a1b      	subs	r3, r3, r0
 80151ce:	fa09 f303 	lsl.w	r3, r9, r3
 80151d2:	2100      	movs	r1, #0
 80151d4:	e7a2      	b.n	801511c <__ieee754_fmod+0x9c>
 80151d6:	ebac 0c02 	sub.w	ip, ip, r2
 80151da:	f1bc 0f1f 	cmp.w	ip, #31
 80151de:	dc09      	bgt.n	80151f4 <__ieee754_fmod+0x174>
 80151e0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 80151e4:	fa07 f70c 	lsl.w	r7, r7, ip
 80151e8:	fa26 f505 	lsr.w	r5, r6, r5
 80151ec:	433d      	orrs	r5, r7
 80151ee:	fa06 fe0c 	lsl.w	lr, r6, ip
 80151f2:	e79b      	b.n	801512c <__ieee754_fmod+0xac>
 80151f4:	4d27      	ldr	r5, [pc, #156]	@ (8015294 <__ieee754_fmod+0x214>)
 80151f6:	1aad      	subs	r5, r5, r2
 80151f8:	fa06 f505 	lsl.w	r5, r6, r5
 80151fc:	f04f 0e00 	mov.w	lr, #0
 8015200:	e794      	b.n	801512c <__ieee754_fmod+0xac>
 8015202:	4571      	cmp	r1, lr
 8015204:	bf38      	it	cc
 8015206:	f106 36ff 	addcc.w	r6, r6, #4294967295
 801520a:	2e00      	cmp	r6, #0
 801520c:	da05      	bge.n	801521a <__ieee754_fmod+0x19a>
 801520e:	0fce      	lsrs	r6, r1, #31
 8015210:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8015214:	0049      	lsls	r1, r1, #1
 8015216:	3801      	subs	r0, #1
 8015218:	e789      	b.n	801512e <__ieee754_fmod+0xae>
 801521a:	ea56 0307 	orrs.w	r3, r6, r7
 801521e:	f43f af5d 	beq.w	80150dc <__ieee754_fmod+0x5c>
 8015222:	0ffb      	lsrs	r3, r7, #31
 8015224:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015228:	0079      	lsls	r1, r7, #1
 801522a:	e7f4      	b.n	8015216 <__ieee754_fmod+0x196>
 801522c:	0fc8      	lsrs	r0, r1, #31
 801522e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015232:	0049      	lsls	r1, r1, #1
 8015234:	3a01      	subs	r2, #1
 8015236:	e78a      	b.n	801514e <__ieee754_fmod+0xce>
 8015238:	1a80      	subs	r0, r0, r2
 801523a:	2814      	cmp	r0, #20
 801523c:	dc0c      	bgt.n	8015258 <__ieee754_fmod+0x1d8>
 801523e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015242:	fa03 f202 	lsl.w	r2, r3, r2
 8015246:	40c1      	lsrs	r1, r0
 8015248:	430a      	orrs	r2, r1
 801524a:	4103      	asrs	r3, r0
 801524c:	ea43 0104 	orr.w	r1, r3, r4
 8015250:	4610      	mov	r0, r2
 8015252:	ec41 0b10 	vmov	d0, r0, r1
 8015256:	e733      	b.n	80150c0 <__ieee754_fmod+0x40>
 8015258:	281f      	cmp	r0, #31
 801525a:	dc07      	bgt.n	801526c <__ieee754_fmod+0x1ec>
 801525c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015260:	40c1      	lsrs	r1, r0
 8015262:	fa03 f202 	lsl.w	r2, r3, r2
 8015266:	430a      	orrs	r2, r1
 8015268:	4623      	mov	r3, r4
 801526a:	e7ef      	b.n	801524c <__ieee754_fmod+0x1cc>
 801526c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015270:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8015274:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8015278:	32e2      	adds	r2, #226	@ 0xe2
 801527a:	fa43 f202 	asr.w	r2, r3, r2
 801527e:	e7f3      	b.n	8015268 <__ieee754_fmod+0x1e8>
 8015280:	7fefffff 	.word	0x7fefffff
 8015284:	7ff00000 	.word	0x7ff00000
 8015288:	080164c0 	.word	0x080164c0
 801528c:	fffffbed 	.word	0xfffffbed
 8015290:	fffffc02 	.word	0xfffffc02
 8015294:	fffffbe2 	.word	0xfffffbe2

08015298 <_init>:
 8015298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801529a:	bf00      	nop
 801529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801529e:	bc08      	pop	{r3}
 80152a0:	469e      	mov	lr, r3
 80152a2:	4770      	bx	lr

080152a4 <_fini>:
 80152a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a6:	bf00      	nop
 80152a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152aa:	bc08      	pop	{r3}
 80152ac:	469e      	mov	lr, r3
 80152ae:	4770      	bx	lr
