
CL_Single_Phase_AC_Electronic_Load_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118ec  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002428  08011b90  08011b90  00012b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013fb8  08013fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013fc0  08013fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013fc4  08013fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  08013fc8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002584  240002cc  08014294  000152cc  2**2
                  ALLOC
  8 ._user_heap_stack 0000c000  24002850  08014294  00015850  2**0
                  ALLOC
  9 ._D3_Area     00000000  38000000  38000000  00016018  2**0
                  CONTENTS
 10 ._DTCM_Area   00000018  20000000  20000000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ARM.attributes 0000002e  00000000  00000000  00016018  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002bc15  00000000  00000000  00016046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000081  00000000  00000000  00041c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002e24c  00000000  00000000  00041cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006343  00000000  00000000  0006ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001df8  00000000  00000000  00076270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00168b84  00000000  00000000  00078068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001660  00000000  00000000  001e0bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d34b  00000000  00000000  001e224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0021f597  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aac  00000000  00000000  0021f650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000a31  00000000  00000000  002280fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  00228b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002cc 	.word	0x240002cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011b74 	.word	0x08011b74

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d0 	.word	0x240002d0
 80002dc:	08011b74 	.word	0x08011b74

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f00d fb30 	bl	800d9f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003be:	f00f fb33 	bl	800fa28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f00c fd8d 	bl	800cee0 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80003cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80003d0:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 80003d4:	08013fc8 	.word	0x08013fc8
  ldr r2, =_sbss
 80003d8:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 80003dc:	24002850 	.word	0x24002850

080003e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC3_IRQHandler>
	...

080003e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f000 f933 	bl	8000656 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80003f0:	f003 fd46 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 80003f4:	4602      	mov	r2, r0
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_Init+0x68>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	0a1b      	lsrs	r3, r3, #8
 80003fc:	f003 030f 	and.w	r3, r3, #15
 8000400:	4913      	ldr	r1, [pc, #76]	@ (8000450 <HAL_Init+0x6c>)
 8000402:	5ccb      	ldrb	r3, [r1, r3]
 8000404:	f003 031f 	and.w	r3, r3, #31
 8000408:	fa22 f303 	lsr.w	r3, r2, r3
 800040c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_Init+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 030f 	and.w	r3, r3, #15
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_Init+0x6c>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	f003 031f 	and.w	r3, r3, #31
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	fa22 f303 	lsr.w	r3, r2, r3
 8000424:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <HAL_Init+0x70>)
 8000426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000428:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <HAL_Init+0x74>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042e:	200f      	movs	r0, #15
 8000430:	f00d fa16 	bl	800d860 <HAL_InitTick>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800043a:	2301      	movs	r3, #1
 800043c:	e002      	b.n	8000444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800043e:	f00d f9f5 	bl	800d82c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	58024400 	.word	0x58024400
 8000450:	08013420 	.word	0x08013420
 8000454:	24000098 	.word	0x24000098
 8000458:	24000094 	.word	0x24000094

0800045c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_IncTick+0x20>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_IncTick+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <HAL_IncTick+0x24>)
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	24000004 	.word	0x24000004
 8000480:	240002e8 	.word	0x240002e8

08000484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return uwTick;
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <HAL_GetTick+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	240002e8 	.word	0x240002e8

0800049c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a4:	f7ff ffee 	bl	8000484 <HAL_GetTick>
 80004a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	d005      	beq.n	80004c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <HAL_Delay+0x44>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4413      	add	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	bf00      	nop
 80004c4:	f7ff ffde 	bl	8000484 <HAL_GetTick>
 80004c8:	4602      	mov	r2, r0
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d8f7      	bhi.n	80004c4 <HAL_Delay+0x28>
  {
  }
}
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000004 	.word	0x24000004

080004e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80004e8:	4b03      	ldr	r3, [pc, #12]	@ (80004f8 <HAL_GetREVID+0x14>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	0c1b      	lsrs	r3, r3, #16
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	5c001000 	.word	0x5c001000

080004fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800050c:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <__NVIC_SetPriorityGrouping+0x40>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000518:	4013      	ands	r3, r2
 800051a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <__NVIC_SetPriorityGrouping+0x44>)
 8000526:	4313      	orrs	r3, r2
 8000528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800052a:	4a04      	ldr	r2, [pc, #16]	@ (800053c <__NVIC_SetPriorityGrouping+0x40>)
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	60d3      	str	r3, [r2, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00
 8000540:	05fa0000 	.word	0x05fa0000

08000544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000548:	4b04      	ldr	r3, [pc, #16]	@ (800055c <__NVIC_GetPriorityGrouping+0x18>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	0a1b      	lsrs	r3, r3, #8
 800054e:	f003 0307 	and.w	r3, r3, #7
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800056a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db0b      	blt.n	800058a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	f003 021f 	and.w	r2, r3, #31
 8000578:	4907      	ldr	r1, [pc, #28]	@ (8000598 <__NVIC_EnableIRQ+0x38>)
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	095b      	lsrs	r3, r3, #5
 8000580:	2001      	movs	r0, #1
 8000582:	fa00 f202 	lsl.w	r2, r0, r2
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100

0800059c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db0a      	blt.n	80005c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <__NVIC_SetPriority+0x4c>)
 80005b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	440b      	add	r3, r1
 80005c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c4:	e00a      	b.n	80005dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4908      	ldr	r1, [pc, #32]	@ (80005ec <__NVIC_SetPriority+0x50>)
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	f003 030f 	and.w	r3, r3, #15
 80005d2:	3b04      	subs	r3, #4
 80005d4:	0112      	lsls	r2, r2, #4
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	440b      	add	r3, r1
 80005da:	761a      	strb	r2, [r3, #24]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	@ 0x24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	f1c3 0307 	rsb	r3, r3, #7
 800060a:	2b04      	cmp	r3, #4
 800060c:	bf28      	it	cs
 800060e:	2304      	movcs	r3, #4
 8000610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3304      	adds	r3, #4
 8000616:	2b06      	cmp	r3, #6
 8000618:	d902      	bls.n	8000620 <NVIC_EncodePriority+0x30>
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3b03      	subs	r3, #3
 800061e:	e000      	b.n	8000622 <NVIC_EncodePriority+0x32>
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f04f 32ff 	mov.w	r2, #4294967295
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	43da      	mvns	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	401a      	ands	r2, r3
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000638:	f04f 31ff 	mov.w	r1, #4294967295
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43d9      	mvns	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	4313      	orrs	r3, r2
         );
}
 800064a:	4618      	mov	r0, r3
 800064c:	3724      	adds	r7, #36	@ 0x24
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff4c 	bl	80004fc <__NVIC_SetPriorityGrouping>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800067a:	f7ff ff63 	bl	8000544 <__NVIC_GetPriorityGrouping>
 800067e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	6978      	ldr	r0, [r7, #20]
 8000686:	f7ff ffb3 	bl	80005f0 <NVIC_EncodePriority>
 800068a:	4602      	mov	r2, r0
 800068c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff82 	bl	800059c <__NVIC_SetPriority>
}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff56 	bl	8000560 <__NVIC_EnableIRQ>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80006c0:	f3bf 8f5f 	dmb	sy
}
 80006c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <HAL_MPU_Disable+0x28>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <HAL_MPU_Disable+0x28>)
 80006cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80006d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <HAL_MPU_Disable+0x2c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	e000ed90 	.word	0xe000ed90

080006ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80006f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000724 <HAL_MPU_Enable+0x38>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <HAL_MPU_Enable+0x3c>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000702:	4a09      	ldr	r2, [pc, #36]	@ (8000728 <HAL_MPU_Enable+0x3c>)
 8000704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000708:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
}
 800070e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000710:	f3bf 8f6f 	isb	sy
}
 8000714:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed90 	.word	0xe000ed90
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	785a      	ldrb	r2, [r3, #1]
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 800073a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000748:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7b1b      	ldrb	r3, [r3, #12]
 8000754:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7adb      	ldrb	r3, [r3, #11]
 800075a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800075c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7a9b      	ldrb	r3, [r3, #10]
 8000762:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7b5b      	ldrb	r3, [r3, #13]
 800076a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800076c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7b9b      	ldrb	r3, [r3, #14]
 8000772:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7bdb      	ldrb	r3, [r3, #15]
 800077a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800077c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7a5b      	ldrb	r3, [r3, #9]
 8000782:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000784:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800078c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000796:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000798:	6113      	str	r3, [r2, #16]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed90 	.word	0xe000ed90

080007ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e014      	b.n	80007e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d105      	bne.n	80007d4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f00c f878 	bl	800c8c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2202      	movs	r2, #2
 80007d8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d101      	bne.n	8000804 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e046      	b.n	8000892 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	795b      	ldrb	r3, [r3, #5]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d101      	bne.n	8000810 <HAL_DAC_Start+0x20>
 800080c:	2302      	movs	r3, #2
 800080e:	e040      	b.n	8000892 <HAL_DAC_Start+0xa2>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2202      	movs	r2, #2
 800081a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6819      	ldr	r1, [r3, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	2201      	movs	r2, #1
 800082a:	409a      	lsls	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	430a      	orrs	r2, r1
 8000832:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10f      	bne.n	800085a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000844:	2b02      	cmp	r3, #2
 8000846:	d11d      	bne.n	8000884 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f042 0201 	orr.w	r2, r2, #1
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	e014      	b.n	8000884 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	2102      	movs	r1, #2
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	429a      	cmp	r2, r3
 8000872:	d107      	bne.n	8000884 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f042 0202 	orr.w	r2, r2, #2
 8000882:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d01d      	beq.n	80008fc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d018      	beq.n	80008fc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2204      	movs	r2, #4
 80008ce:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	f043 0201 	orr.w	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80008f4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f851 	bl	800099e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01d      	beq.n	8000942 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d018      	beq.n	8000942 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2204      	movs	r2, #4
 8000914:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	f043 0202 	orr.w	r2, r3, #2
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800093a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f97b 	bl	8000c38 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800094a:	b480      	push	{r7}
 800094c:	b087      	sub	sp, #28
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e015      	b.n	8000992 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d105      	bne.n	800097e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	3308      	adds	r3, #8
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e004      	b.n	8000988 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	3314      	adds	r3, #20
 8000986:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	461a      	mov	r2, r3
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	371c      	adds	r7, #28
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <HAL_DAC_ConfigChannel+0x1e>
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e12a      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d101      	bne.n	80009e2 <HAL_DAC_ConfigChannel+0x2e>
 80009de:	2302      	movs	r3, #2
 80009e0:	e124      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2201      	movs	r2, #1
 80009e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2202      	movs	r2, #2
 80009ec:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d17a      	bne.n	8000aec <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80009f6:	f7ff fd45 	bl	8000484 <HAL_GetTick>
 80009fa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d13d      	bne.n	8000a7e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a02:	e018      	b.n	8000a36 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a04:	f7ff fd3e 	bl	8000484 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d911      	bls.n	8000a36 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a18:	4b86      	ldr	r3, [pc, #536]	@ (8000c34 <HAL_DAC_ConfigChannel+0x280>)
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00a      	beq.n	8000a36 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f043 0208 	orr.w	r2, r3, #8
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2203      	movs	r2, #3
 8000a30:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e0fa      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a3c:	4b7d      	ldr	r3, [pc, #500]	@ (8000c34 <HAL_DAC_ConfigChannel+0x280>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1df      	bne.n	8000a04 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	6992      	ldr	r2, [r2, #24]
 8000a4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a4e:	e020      	b.n	8000a92 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000a50:	f7ff fd18 	bl	8000484 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d90f      	bls.n	8000a7e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da0a      	bge.n	8000a7e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	f043 0208 	orr.w	r2, r3, #8
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2203      	movs	r2, #3
 8000a78:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e0d6      	b.n	8000c2c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dbe3      	blt.n	8000a50 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	6992      	ldr	r2, [r2, #24]
 8000a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	ea02 0103 	and.w	r1, r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	21ff      	movs	r1, #255	@ 0xff
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	ea02 0103 	and.w	r1, r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11d      	bne.n	8000b30 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000afa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	221f      	movs	r2, #31
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b36:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	2207      	movs	r2, #7
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d102      	bne.n	8000b5a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b58:	e00f      	b.n	8000b7a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d102      	bne.n	8000b68 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b66:	e008      	b.n	8000b7a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000b70:	2301      	movs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b74:	e001      	b.n	8000b7a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b86:	4313      	orrs	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6819      	ldr	r1, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	22c0      	movs	r2, #192	@ 0xc0
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	400a      	ands	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8000c28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20008000 	.word	0x20008000

08000c38 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c5a:	4b89      	ldr	r3, [pc, #548]	@ (8000e80 <HAL_GPIO_Init+0x234>)
 8000c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c5e:	e194      	b.n	8000f8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	2101      	movs	r1, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 8186 	beq.w	8000f84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d005      	beq.n	8000c90 <HAL_GPIO_Init+0x44>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d130      	bne.n	8000cf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	091b      	lsrs	r3, r3, #4
 8000cdc:	f003 0201 	and.w	r2, r3, #1
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d017      	beq.n	8000d2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d123      	bne.n	8000d82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3208      	adds	r2, #8
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	691a      	ldr	r2, [r3, #16]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	69b9      	ldr	r1, [r7, #24]
 8000d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0203 	and.w	r2, r3, #3
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 80e0 	beq.w	8000f84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <HAL_GPIO_Init+0x238>)
 8000dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dca:	4a2e      	ldr	r2, [pc, #184]	@ (8000e84 <HAL_GPIO_Init+0x238>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <HAL_GPIO_Init+0x238>)
 8000dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de2:	4a29      	ldr	r2, [pc, #164]	@ (8000e88 <HAL_GPIO_Init+0x23c>)
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <HAL_GPIO_Init+0x240>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d052      	beq.n	8000eb4 <HAL_GPIO_Init+0x268>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <HAL_GPIO_Init+0x244>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d031      	beq.n	8000e7a <HAL_GPIO_Init+0x22e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_GPIO_Init+0x248>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d02b      	beq.n	8000e76 <HAL_GPIO_Init+0x22a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <HAL_GPIO_Init+0x24c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d025      	beq.n	8000e72 <HAL_GPIO_Init+0x226>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <HAL_GPIO_Init+0x250>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01f      	beq.n	8000e6e <HAL_GPIO_Init+0x222>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <HAL_GPIO_Init+0x254>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0x21e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea4 <HAL_GPIO_Init+0x258>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x21a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <HAL_GPIO_Init+0x25c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x216>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <HAL_GPIO_Init+0x260>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x212>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <HAL_GPIO_Init+0x264>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e56:	2309      	movs	r3, #9
 8000e58:	e02d      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	e02b      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e5e:	2308      	movs	r3, #8
 8000e60:	e029      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e027      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e025      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e023      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e021      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e01f      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e01d      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e01b      	b.n	8000eb6 <HAL_GPIO_Init+0x26a>
 8000e7e:	bf00      	nop
 8000e80:	58000080 	.word	0x58000080
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58000400 	.word	0x58000400
 8000e8c:	58020000 	.word	0x58020000
 8000e90:	58020400 	.word	0x58020400
 8000e94:	58020800 	.word	0x58020800
 8000e98:	58020c00 	.word	0x58020c00
 8000e9c:	58021000 	.word	0x58021000
 8000ea0:	58021400 	.word	0x58021400
 8000ea4:	58021800 	.word	0x58021800
 8000ea8:	58021c00 	.word	0x58021c00
 8000eac:	58022000 	.word	0x58022000
 8000eb0:	58022400 	.word	0x58022400
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec6:	4938      	ldr	r1, [pc, #224]	@ (8000fa8 <HAL_GPIO_Init+0x35c>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000efa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3301      	adds	r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f47f ae63 	bne.w	8000c60 <HAL_GPIO_Init+0x14>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3724      	adds	r7, #36	@ 0x24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	58000400 	.word	0x58000400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	041a      	lsls	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	619a      	str	r2, [r3, #24]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ff0:	887a      	ldrh	r2, [r7, #2]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	041a      	lsls	r2, r3, #16
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	400b      	ands	r3, r1
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	619a      	str	r2, [r3, #24]
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800101c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001020:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d008      	beq.n	800103e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800102c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4618      	mov	r0, r3
 800103a:	f00c f997 	bl	800d36c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e08b      	b.n	8001172 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d106      	bne.n	8001074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f00b fdb4 	bl	800cbdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2224      	movs	r2, #36	@ 0x24
 8001078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0201 	bic.w	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d107      	bne.n	80010c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	e006      	b.n	80010d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d108      	bne.n	80010ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	e007      	b.n	80010fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6859      	ldr	r1, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <HAL_I2C_Init+0x134>)
 8001106:	430b      	orrs	r3, r1
 8001108:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001118:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69d9      	ldr	r1, [r3, #28]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1a      	ldr	r2, [r3, #32]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2220      	movs	r2, #32
 800115e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	02008000 	.word	0x02008000

08001180 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af02      	add	r7, sp, #8
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	4608      	mov	r0, r1
 800118a:	4611      	mov	r1, r2
 800118c:	461a      	mov	r2, r3
 800118e:	4603      	mov	r3, r0
 8001190:	817b      	strh	r3, [r7, #10]
 8001192:	460b      	mov	r3, r1
 8001194:	813b      	strh	r3, [r7, #8]
 8001196:	4613      	mov	r3, r2
 8001198:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	f040 80f9 	bne.w	800139a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <HAL_I2C_Mem_Write+0x34>
 80011ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0ed      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_I2C_Mem_Write+0x4e>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e0e6      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011d6:	f7ff f955 	bl	8000484 <HAL_GetTick>
 80011da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2319      	movs	r3, #25
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 fac3 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0d1      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2221      	movs	r2, #33	@ 0x21
 80011fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2240      	movs	r2, #64	@ 0x40
 8001204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a3a      	ldr	r2, [r7, #32]
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001220:	88f8      	ldrh	r0, [r7, #6]
 8001222:	893a      	ldrh	r2, [r7, #8]
 8001224:	8979      	ldrh	r1, [r7, #10]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	4603      	mov	r3, r0
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f9d3 	bl	80015dc <I2C_RequestMemoryWrite>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0a9      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800124c:	b29b      	uxth	r3, r3
 800124e:	2bff      	cmp	r3, #255	@ 0xff
 8001250:	d90e      	bls.n	8001270 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	22ff      	movs	r2, #255	@ 0xff
 8001256:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125c:	b2da      	uxtb	r2, r3
 800125e:	8979      	ldrh	r1, [r7, #10]
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 fc47 	bl	8001afc <I2C_TransferConfig>
 800126e:	e00f      	b.n	8001290 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001274:	b29a      	uxth	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800127e:	b2da      	uxtb	r2, r3
 8001280:	8979      	ldrh	r1, [r7, #10]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 fc36 	bl	8001afc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 fac6 	bl	8001826 <I2C_WaitOnTXISFlagUntilTimeout>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e07b      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d034      	beq.n	8001348 <HAL_I2C_Mem_Write+0x1c8>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d130      	bne.n	8001348 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ec:	2200      	movs	r2, #0
 80012ee:	2180      	movs	r1, #128	@ 0x80
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fa3f 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e04d      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001304:	b29b      	uxth	r3, r3
 8001306:	2bff      	cmp	r3, #255	@ 0xff
 8001308:	d90e      	bls.n	8001328 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	22ff      	movs	r2, #255	@ 0xff
 800130e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001314:	b2da      	uxtb	r2, r3
 8001316:	8979      	ldrh	r1, [r7, #10]
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fbeb 	bl	8001afc <I2C_TransferConfig>
 8001326:	e00f      	b.n	8001348 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800132c:	b29a      	uxth	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001336:	b2da      	uxtb	r2, r3
 8001338:	8979      	ldrh	r1, [r7, #10]
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fbda 	bl	8001afc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d19e      	bne.n	8001290 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 faac 	bl	80018b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e01a      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2220      	movs	r2, #32
 800136c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_I2C_Mem_Write+0x224>)
 800137a:	400b      	ands	r3, r1
 800137c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2220      	movs	r2, #32
 8001382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800139a:	2302      	movs	r3, #2
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	fe00e800 	.word	0xfe00e800

080013a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	4608      	mov	r0, r1
 80013b2:	4611      	mov	r1, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	817b      	strh	r3, [r7, #10]
 80013ba:	460b      	mov	r3, r1
 80013bc:	813b      	strh	r3, [r7, #8]
 80013be:	4613      	mov	r3, r2
 80013c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b20      	cmp	r3, #32
 80013cc:	f040 80fd 	bne.w	80015ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <HAL_I2C_Mem_Read+0x34>
 80013d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0f1      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_I2C_Mem_Read+0x4e>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e0ea      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013fe:	f7ff f841 	bl	8000484 <HAL_GetTick>
 8001402:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2319      	movs	r3, #25
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f9af 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0d5      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2222      	movs	r2, #34	@ 0x22
 8001424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2240      	movs	r2, #64	@ 0x40
 800142c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a3a      	ldr	r2, [r7, #32]
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001440:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001448:	88f8      	ldrh	r0, [r7, #6]
 800144a:	893a      	ldrh	r2, [r7, #8]
 800144c:	8979      	ldrh	r1, [r7, #10]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	4603      	mov	r3, r0
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f913 	bl	8001684 <I2C_RequestMemoryRead>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0ad      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2bff      	cmp	r3, #255	@ 0xff
 8001478:	d90e      	bls.n	8001498 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	22ff      	movs	r2, #255	@ 0xff
 800147e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001484:	b2da      	uxtb	r2, r3
 8001486:	8979      	ldrh	r1, [r7, #10]
 8001488:	4b52      	ldr	r3, [pc, #328]	@ (80015d4 <HAL_I2C_Mem_Read+0x22c>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fb33 	bl	8001afc <I2C_TransferConfig>
 8001496:	e00f      	b.n	80014b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	8979      	ldrh	r1, [r7, #10]
 80014aa:	4b4a      	ldr	r3, [pc, #296]	@ (80015d4 <HAL_I2C_Mem_Read+0x22c>)
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fb22 	bl	8001afc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014be:	2200      	movs	r2, #0
 80014c0:	2104      	movs	r1, #4
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f956 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07c      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001508:	b29b      	uxth	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d034      	beq.n	8001578 <HAL_I2C_Mem_Read+0x1d0>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001512:	2b00      	cmp	r3, #0
 8001514:	d130      	bne.n	8001578 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	2200      	movs	r2, #0
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f927 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e04d      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001534:	b29b      	uxth	r3, r3
 8001536:	2bff      	cmp	r3, #255	@ 0xff
 8001538:	d90e      	bls.n	8001558 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	22ff      	movs	r2, #255	@ 0xff
 800153e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001544:	b2da      	uxtb	r2, r3
 8001546:	8979      	ldrh	r1, [r7, #10]
 8001548:	2300      	movs	r3, #0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 fad3 	bl	8001afc <I2C_TransferConfig>
 8001556:	e00f      	b.n	8001578 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001566:	b2da      	uxtb	r2, r3
 8001568:	8979      	ldrh	r1, [r7, #10]
 800156a:	2300      	movs	r3, #0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 fac2 	bl	8001afc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d19a      	bne.n	80014b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f994 	bl	80018b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e01a      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2220      	movs	r2, #32
 800159c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <HAL_I2C_Mem_Read+0x230>)
 80015aa:	400b      	ands	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
  }
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	80002400 	.word	0x80002400
 80015d8:	fe00e800 	.word	0xfe00e800

080015dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	817b      	strh	r3, [r7, #10]
 80015ee:	460b      	mov	r3, r1
 80015f0:	813b      	strh	r3, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	8979      	ldrh	r1, [r7, #10]
 80015fc:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <I2C_RequestMemoryWrite+0xa4>)
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 fa79 	bl	8001afc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	69b9      	ldr	r1, [r7, #24]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 f909 	bl	8001826 <I2C_WaitOnTXISFlagUntilTimeout>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e02c      	b.n	8001678 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001624:	893b      	ldrh	r3, [r7, #8]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
 800162e:	e015      	b.n	800165c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001630:	893b      	ldrh	r3, [r7, #8]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b29b      	uxth	r3, r3
 8001636:	b2da      	uxtb	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	69b9      	ldr	r1, [r7, #24]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f8ef 	bl	8001826 <I2C_WaitOnTXISFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e012      	b.n	8001678 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001652:	893b      	ldrh	r3, [r7, #8]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2200      	movs	r2, #0
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f884 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	80002000 	.word	0x80002000

08001684 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	817b      	strh	r3, [r7, #10]
 8001696:	460b      	mov	r3, r1
 8001698:	813b      	strh	r3, [r7, #8]
 800169a:	4613      	mov	r3, r2
 800169c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	8979      	ldrh	r1, [r7, #10]
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <I2C_RequestMemoryRead+0xa4>)
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fa26 	bl	8001afc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f8b6 	bl	8001826 <I2C_WaitOnTXISFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e02c      	b.n	800171e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d105      	bne.n	80016d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016ca:	893b      	ldrh	r3, [r7, #8]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80016d4:	e015      	b.n	8001702 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016d6:	893b      	ldrh	r3, [r7, #8]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f89c 	bl	8001826 <I2C_WaitOnTXISFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e012      	b.n	800171e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016f8:	893b      	ldrh	r3, [r7, #8]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2200      	movs	r2, #0
 800170a:	2140      	movs	r1, #64	@ 0x40
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 f831 	bl	8001774 <I2C_WaitOnFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	80002000 	.word	0x80002000

0800172c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b02      	cmp	r3, #2
 8001740:	d103      	bne.n	800174a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d007      	beq.n	8001768 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	619a      	str	r2, [r3, #24]
  }
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001784:	e03b      	b.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f8d6 	bl	800193c <I2C_IsErrorOccurred>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e041      	b.n	800181e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	d02d      	beq.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a2:	f7fe fe6f 	bl	8000484 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d302      	bcc.n	80017b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d122      	bne.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4013      	ands	r3, r2
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d113      	bne.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2220      	movs	r2, #32
 80017e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4013      	ands	r3, r2
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	bf0c      	ite	eq
 800180e:	2301      	moveq	r3, #1
 8001810:	2300      	movne	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	429a      	cmp	r2, r3
 800181a:	d0b4      	beq.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001832:	e033      	b.n	800189c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 f87f 	bl	800193c <I2C_IsErrorOccurred>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e031      	b.n	80018ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184e:	d025      	beq.n	800189c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001850:	f7fe fe18 	bl	8000484 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	429a      	cmp	r2, r3
 800185e:	d302      	bcc.n	8001866 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11a      	bne.n	800189c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b02      	cmp	r3, #2
 8001872:	d013      	beq.n	800189c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001878:	f043 0220 	orr.w	r2, r3, #32
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e007      	b.n	80018ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d1c4      	bne.n	8001834 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c0:	e02f      	b.n	8001922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f838 	bl	800193c <I2C_IsErrorOccurred>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e02d      	b.n	8001932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d6:	f7fe fdd5 	bl	8000484 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11a      	bne.n	8001922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d013      	beq.n	8001922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f043 0220 	orr.w	r2, r3, #32
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e007      	b.n	8001932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b20      	cmp	r3, #32
 800192e:	d1c8      	bne.n	80018c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	d068      	beq.n	8001a3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2210      	movs	r2, #16
 800196e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001970:	e049      	b.n	8001a06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d045      	beq.n	8001a06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800197a:	f7fe fd83 	bl	8000484 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	429a      	cmp	r2, r3
 8001988:	d302      	bcc.n	8001990 <I2C_IsErrorOccurred+0x54>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d13a      	bne.n	8001a06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019b2:	d121      	bne.n	80019f8 <I2C_IsErrorOccurred+0xbc>
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019ba:	d01d      	beq.n	80019f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80019bc:	7cfb      	ldrb	r3, [r7, #19]
 80019be:	2b20      	cmp	r3, #32
 80019c0:	d01a      	beq.n	80019f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019d2:	f7fe fd57 	bl	8000484 <HAL_GetTick>
 80019d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019d8:	e00e      	b.n	80019f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019da:	f7fe fd53 	bl	8000484 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b19      	cmp	r3, #25
 80019e6:	d907      	bls.n	80019f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80019f6:	e006      	b.n	8001a06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d1e9      	bne.n	80019da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	d003      	beq.n	8001a1c <I2C_IsErrorOccurred+0xe0>
 8001a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0aa      	beq.n	8001972 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00b      	beq.n	8001a64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01c      	beq.n	8001aea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fe3b 	bl	800172c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <I2C_IsErrorOccurred+0x1bc>)
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001aea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	fe00e800 	.word	0xfe00e800

08001afc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	817b      	strh	r3, [r7, #10]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b14:	7a7b      	ldrb	r3, [r7, #9]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	0d5b      	lsrs	r3, r3, #21
 8001b36:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <I2C_TransferConfig+0x60>)
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	ea02 0103 	and.w	r1, r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	03ff63ff 	.word	0x03ff63ff

08001b60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d138      	bne.n	8001be8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e032      	b.n	8001bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2224      	movs	r2, #36	@ 0x24
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d139      	bne.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e033      	b.n	8001c82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2224      	movs	r2, #36	@ 0x24
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af02      	add	r7, sp, #8
 8001c94:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0fe      	b.n	8001e9e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d106      	bne.n	8001cba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f00c fa6f 	bl	800e198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f006 f9a9 	bl	800801e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7c1a      	ldrb	r2, [r3, #16]
 8001cd4:	f88d 2000 	strb.w	r2, [sp]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cdc:	f006 f87a 	bl	8007dd4 <USB_CoreInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0d5      	b.n	8001e9e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f006 f9a1 	bl	8008040 <USB_SetCurrentMode>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0c6      	b.n	8001e9e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e04a      	b.n	8001dac <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3315      	adds	r3, #21
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3314      	adds	r3, #20
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	b298      	uxth	r0, r3
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	332e      	adds	r3, #46	@ 0x2e
 8001d52:	4602      	mov	r2, r0
 8001d54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3318      	adds	r3, #24
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	331c      	adds	r3, #28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3320      	adds	r3, #32
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3324      	adds	r3, #36	@ 0x24
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3af      	bcc.n	8001d16 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e044      	b.n	8001e46 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	3301      	adds	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	791b      	ldrb	r3, [r3, #4]
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3b5      	bcc.n	8001dbc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7c1a      	ldrb	r2, [r3, #16]
 8001e58:	f88d 2000 	strb.w	r2, [sp]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	f006 f93a 	bl	80080d8 <USB_DevInit>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e013      	b.n	8001e9e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f001 f96d 	bl	800316c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f007 f979 	bl	800918e <USB_DevDisconnect>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Start+0x1c>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e022      	b.n	8001f08 <HAL_PCD_Start+0x62>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 f884 	bl	8007ffc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f007 f927 	bl	800914c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b08d      	sub	sp, #52	@ 0x34
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f007 f9e5 	bl	80092f6 <USB_GetMode>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 84b9 	bne.w	80028a6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f007 f949 	bl	80091d0 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 84af 	beq.w	80028a4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f007 f936 	bl	80091d0 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 0202 	and.w	r2, r2, #2
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f007 f924 	bl	80091d0 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d161      	bne.n	8002056 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0210 	bic.w	r2, r2, #16
 8001fa0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	0c5b      	lsrs	r3, r3, #17
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d124      	bne.n	8002018 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d035      	beq.n	8002046 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a38      	ldr	r0, [r7, #32]
 8001fee:	f006 ff5b 	bl	8008ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffe:	441a      	add	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002010:	441a      	add	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	615a      	str	r2, [r3, #20]
 8002016:	e016      	b.n	8002046 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	0c5b      	lsrs	r3, r3, #17
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	2b06      	cmp	r3, #6
 8002022:	d110      	bne.n	8002046 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800202a:	2208      	movs	r2, #8
 800202c:	4619      	mov	r1, r3
 800202e:	6a38      	ldr	r0, [r7, #32]
 8002030:	f006 ff3a 	bl	8008ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002040:	441a      	add	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0210 	orr.w	r2, r2, #16
 8002054:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f007 f8b8 	bl	80091d0 <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002066:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800206a:	f040 80a7 	bne.w	80021bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f007 f8bd 	bl	80091f6 <USB_ReadDevAllOutEpInterrupt>
 800207c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800207e:	e099      	b.n	80021b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 808e 	beq.w	80021a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f007 f8e1 	bl	800925e <USB_ReadDevOutEPInterrupt>
 800209c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00c      	beq.n	80020c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020b4:	461a      	mov	r2, r3
 80020b6:	2301      	movs	r3, #1
 80020b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fecf 	bl	8002e60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00c      	beq.n	80020e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d8:	461a      	mov	r2, r3
 80020da:	2308      	movs	r3, #8
 80020dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 ffa5 	bl	8003030 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020fc:	461a      	mov	r2, r3
 80020fe:	2310      	movs	r3, #16
 8002100:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d030      	beq.n	800216e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d109      	bne.n	800212c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800212c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	78db      	ldrb	r3, [r3, #3]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f00c f944 	bl	800e3e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	2302      	movs	r3, #2
 800216c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002184:	461a      	mov	r2, r3
 8002186:	2320      	movs	r3, #32
 8002188:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	3301      	adds	r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80021ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80021b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f47f af62 	bne.w	8002080 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f007 f805 	bl	80091d0 <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80021d0:	f040 80db 	bne.w	800238a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f007 f826 	bl	800922a <USB_ReadDevAllInEpInterrupt>
 80021de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80021e4:	e0cd      	b.n	8002382 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80c2 	beq.w	8002376 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f007 f84c 	bl	800929a <USB_ReadDevInEPInterrupt>
 8002202:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d057      	beq.n	80022be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	2201      	movs	r2, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43db      	mvns	r3, r3
 8002228:	69f9      	ldr	r1, [r7, #28]
 800222a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800222e:	4013      	ands	r3, r2
 8002230:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800223e:	461a      	mov	r2, r3
 8002240:	2301      	movs	r3, #1
 8002242:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	799b      	ldrb	r3, [r3, #6]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d132      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3320      	adds	r3, #32
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4403      	add	r3, r0
 800226c:	331c      	adds	r3, #28
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4419      	add	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4403      	add	r3, r0
 8002280:	3320      	adds	r3, #32
 8002282:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	d113      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x3a2>
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3324      	adds	r3, #36	@ 0x24
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d108      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022aa:	461a      	mov	r2, r3
 80022ac:	2101      	movs	r1, #1
 80022ae:	f007 f855 	bl	800935c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	4619      	mov	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f00c f80e 	bl	800e2da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022d4:	461a      	mov	r2, r3
 80022d6:	2308      	movs	r3, #8
 80022d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022f0:	461a      	mov	r2, r3
 80022f2:	2310      	movs	r3, #16
 80022f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800230c:	461a      	mov	r2, r3
 800230e:	2340      	movs	r3, #64	@ 0x40
 8002310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d023      	beq.n	8002364 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800231c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800231e:	6a38      	ldr	r0, [r7, #32]
 8002320:	f006 f838 	bl	8008394 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3310      	adds	r3, #16
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d108      	bne.n	8002352 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2200      	movs	r2, #0
 8002344:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f00c f85b 	bl	800e408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800235e:	461a      	mov	r2, r3
 8002360:	2302      	movs	r3, #2
 8002362:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800236e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fce8 	bl	8002d46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	3301      	adds	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f af2e 	bne.w	80021e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f006 ff1e 	bl	80091d0 <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800239a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800239e:	d122      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023c6:	2100      	movs	r1, #0
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fef3 	bl	80031b4 <HAL_PCDEx_LPM_Callback>
 80023ce:	e002      	b.n	80023d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f00b fff9 	bl	800e3c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80023e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f006 fef0 	bl	80091d0 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023fa:	d112      	bne.n	8002422 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f00b ffb5 	bl	800e37c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002420:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f006 fed2 	bl	80091d0 <USB_ReadInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002436:	d121      	bne.n	800247c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002446:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800244e:	2b00      	cmp	r3, #0
 8002450:	d111      	bne.n	8002476 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800246c:	2101      	movs	r1, #1
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fea0 	bl	80031b4 <HAL_PCDEx_LPM_Callback>
 8002474:	e002      	b.n	800247c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f00b ff80 	bl	800e37c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f006 fea5 	bl	80091d0 <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002490:	f040 80b7 	bne.w	8002602 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2110      	movs	r1, #16
 80024ae:	4618      	mov	r0, r3
 80024b0:	f005 ff70 	bl	8008394 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b8:	e046      	b.n	8002548 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024c6:	461a      	mov	r2, r3
 80024c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024de:	0151      	lsls	r1, r2, #5
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	440a      	add	r2, r1
 80024e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80024e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fa:	461a      	mov	r2, r3
 80024fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002500:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002512:	0151      	lsls	r1, r2, #5
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	440a      	add	r2, r1
 8002518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800251c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002520:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	440a      	add	r2, r1
 8002538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800253c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002540:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002544:	3301      	adds	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	791b      	ldrb	r3, [r3, #4]
 800254c:	461a      	mov	r2, r3
 800254e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002550:	4293      	cmp	r3, r2
 8002552:	d3b2      	bcc.n	80024ba <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002562:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002566:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7bdb      	ldrb	r3, [r3, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002580:	f043 030b 	orr.w	r3, r3, #11
 8002584:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002596:	f043 030b 	orr.w	r3, r3, #11
 800259a:	6453      	str	r3, [r2, #68]	@ 0x44
 800259c:	e015      	b.n	80025ca <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ac:	4619      	mov	r1, r3
 80025ae:	f242 032b 	movw	r3, #8235	@ 0x202b
 80025b2:	4313      	orrs	r3, r2
 80025b4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025c4:	f043 030b 	orr.w	r3, r3, #11
 80025c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025d8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80025dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025ec:	461a      	mov	r2, r3
 80025ee:	f006 feb5 	bl	800935c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f006 fde2 	bl	80091d0 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002616:	d123      	bne.n	8002660 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f006 fe79 	bl	8009314 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f005 ff2d 	bl	8008486 <USB_GetDevSpeed>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	f001 fd9c 	bl	8004174 <HAL_RCC_GetHCLKFreq>
 800263c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002642:	461a      	mov	r2, r3
 8002644:	4620      	mov	r0, r4
 8002646:	f005 fc37 	bl	8007eb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f00b fe6d 	bl	800e32a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f006 fdb3 	bl	80091d0 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b08      	cmp	r3, #8
 8002672:	d10a      	bne.n	800268a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f00b fe4a 	bl	800e30e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 0208 	and.w	r2, r2, #8
 8002688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f006 fd9e 	bl	80091d0 <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269a:	2b80      	cmp	r3, #128	@ 0x80
 800269c:	d123      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026aa:	2301      	movs	r3, #1
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ae:	e014      	b.n	80026da <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fb08 	bl	8002ce4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	3301      	adds	r3, #1
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	791b      	ldrb	r3, [r3, #4]
 80026de:	461a      	mov	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d3e4      	bcc.n	80026b0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f006 fd70 	bl	80091d0 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026fa:	d13c      	bne.n	8002776 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026fc:	2301      	movs	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002700:	e02b      	b.n	800275a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3318      	adds	r3, #24
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d115      	bne.n	8002754 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002728:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800272a:	2b00      	cmp	r3, #0
 800272c:	da12      	bge.n	8002754 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3317      	adds	r3, #23
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fac8 	bl	8002ce4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	3301      	adds	r3, #1
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	791b      	ldrb	r3, [r3, #4]
 800275e:	461a      	mov	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	4293      	cmp	r3, r2
 8002764:	d3cd      	bcc.n	8002702 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f006 fd28 	bl	80091d0 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800278a:	d156      	bne.n	800283a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800278c:	2301      	movs	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002790:	e045      	b.n	800281e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d12e      	bne.n	8002818 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027bc:	2b00      	cmp	r3, #0
 80027be:	da2b      	bge.n	8002818 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80027cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d121      	bne.n	8002818 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002810:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002814:	6053      	str	r3, [r2, #4]
            break;
 8002816:	e008      	b.n	800282a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	3301      	adds	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	4293      	cmp	r3, r2
 8002828:	d3b3      	bcc.n	8002792 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f006 fcc6 	bl	80091d0 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800284e:	d10a      	bne.n	8002866 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f00b fdeb 	bl	800e42c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f006 fcb0 	bl	80091d0 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d115      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f00b fddb 	bl	800e448 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e000      	b.n	80028a6 <HAL_PCD_IRQHandler+0x996>
      return;
 80028a4:	bf00      	nop
    }
  }
}
 80028a6:	3734      	adds	r7, #52	@ 0x34
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}

080028ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_PCD_SetAddress+0x1a>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e012      	b.n	80028ec <HAL_PCD_SetAddress+0x40>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f006 fc0f 	bl	8009100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	70fb      	strb	r3, [r7, #3]
 8002906:	460b      	mov	r3, r1
 8002908:	803b      	strh	r3, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da0f      	bge.n	800293a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	f003 020f 	and.w	r2, r3, #15
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	3310      	adds	r3, #16
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	705a      	strb	r2, [r3, #1]
 8002938:	e00f      	b.n	800295a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002966:	883a      	ldrh	r2, [r7, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	78ba      	ldrb	r2, [r7, #2]
 8002970:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002984:	78bb      	ldrb	r3, [r7, #2]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d102      	bne.n	8002990 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_PCD_EP_Open+0xaa>
 800299a:	2302      	movs	r3, #2
 800299c:	e00e      	b.n	80029bc <HAL_PCD_EP_Open+0xc8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f005 fd8f 	bl	80084d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80029ba:	7afb      	ldrb	r3, [r7, #11]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da0f      	bge.n	80029f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 020f 	and.w	r2, r3, #15
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	3310      	adds	r3, #16
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	705a      	strb	r2, [r3, #1]
 80029f6:	e00f      	b.n	8002a18 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3304      	adds	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_PCD_EP_Close+0x6e>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e00e      	b.n	8002a50 <HAL_PCD_EP_Close+0x8c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f005 fdcd 	bl	80085e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	460b      	mov	r3, r1
 8002a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2200      	movs	r2, #0
 8002a98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	799b      	ldrb	r3, [r3, #6]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	799b      	ldrb	r3, [r3, #6]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	f005 fe6a 	bl	8008798 <USB_EPStartXfer>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002af0:	681b      	ldr	r3, [r3, #0]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	3310      	adds	r3, #16
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	799b      	ldrb	r3, [r3, #6]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d102      	bne.n	8002b58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	799b      	ldrb	r3, [r3, #6]
 8002b60:	461a      	mov	r2, r3
 8002b62:	6979      	ldr	r1, [r7, #20]
 8002b64:	f005 fe18 	bl	8008798 <USB_EPStartXfer>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	7912      	ldrb	r2, [r2, #4]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04f      	b.n	8002c30 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0f      	bge.n	8002bb8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 020f 	and.w	r2, r3, #15
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	3310      	adds	r3, #16
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	705a      	strb	r2, [r3, #1]
 8002bb6:	e00d      	b.n	8002bd4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_EP_SetStall+0x82>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e01d      	b.n	8002c30 <HAL_PCD_EP_SetStall+0xbe>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f006 f9a8 	bl	8008f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7999      	ldrb	r1, [r3, #6]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c20:	461a      	mov	r2, r3
 8002c22:	f006 fb9b 	bl	800935c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	7912      	ldrb	r2, [r2, #4]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e042      	b.n	8002cdc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da0f      	bge.n	8002c7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	3310      	adds	r3, #16
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	3304      	adds	r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	705a      	strb	r2, [r3, #1]
 8002c7c:	e00f      	b.n	8002c9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_PCD_EP_ClrStall+0x86>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e00e      	b.n	8002cdc <HAL_PCD_EP_ClrStall+0xa4>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f006 f9b1 	bl	8009034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	da0c      	bge.n	8002d12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 020f 	and.w	r2, r3, #15
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	3310      	adds	r3, #16
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e00c      	b.n	8002d2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f005 ffd0 	bl	8008cd8 <USB_EPStopXfer>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b08a      	sub	sp, #40	@ 0x28
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	3310      	adds	r3, #16
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d901      	bls.n	8002d7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06b      	b.n	8002e56 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d902      	bls.n	8002d9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002da2:	e02a      	b.n	8002dfa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d902      	bls.n	8002dc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3303      	adds	r3, #3
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f006 f825 	bl	8008e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	441a      	add	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	441a      	add	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d809      	bhi.n	8002e24 <PCD_WriteEmptyTxFifo+0xde>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d203      	bcs.n	8002e24 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1bf      	bne.n	8002da4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d811      	bhi.n	8002e54 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	2201      	movs	r2, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	6939      	ldr	r1, [r7, #16]
 8002e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e50:	4013      	ands	r3, r2
 8002e52:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	333c      	adds	r3, #60	@ 0x3c
 8002e78:	3304      	adds	r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	799b      	ldrb	r3, [r3, #6]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d17b      	bne.n	8002f8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	4a61      	ldr	r2, [pc, #388]	@ (8003028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	f240 80b9 	bls.w	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80b3 	beq.w	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ec8:	6093      	str	r3, [r2, #8]
 8002eca:	e0a7      	b.n	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	6093      	str	r3, [r2, #8]
 8002ee8:	e098      	b.n	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f040 8093 	bne.w	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8003028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d90f      	bls.n	8002f1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f14:	461a      	mov	r2, r3
 8002f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f1a:	6093      	str	r3, [r2, #8]
 8002f1c:	e07e      	b.n	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	0159      	lsls	r1, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	440b      	add	r3, r1
 8002f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	1ad2      	subs	r2, r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d114      	bne.n	8002f80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	f006 f9f6 	bl	800935c <USB_EP0_OutStart>
 8002f70:	e006      	b.n	8002f80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	441a      	add	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f00b f98c 	bl	800e2a4 <HAL_PCD_DataOutStageCallback>
 8002f8c:	e046      	b.n	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	4a26      	ldr	r2, [pc, #152]	@ (800302c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d124      	bne.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fac:	461a      	mov	r2, r3
 8002fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fb2:	6093      	str	r3, [r2, #8]
 8002fb4:	e032      	b.n	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2320      	movs	r3, #32
 8002fd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f00b f963 	bl	800e2a4 <HAL_PCD_DataOutStageCallback>
 8002fde:	e01d      	b.n	800301c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d114      	bne.n	8003010 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003008:	461a      	mov	r2, r3
 800300a:	2100      	movs	r1, #0
 800300c:	f006 f9a6 	bl	800935c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f00b f944 	bl	800e2a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	4f54300a 	.word	0x4f54300a
 800302c:	4f54310a 	.word	0x4f54310a

08003030 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	333c      	adds	r3, #60	@ 0x3c
 8003048:	3304      	adds	r3, #4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a15      	ldr	r2, [pc, #84]	@ (80030b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d90e      	bls.n	8003084 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307c:	461a      	mov	r2, r3
 800307e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003082:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f00b f8fb 	bl	800e280 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d90c      	bls.n	80030ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	799b      	ldrb	r3, [r3, #6]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d108      	bne.n	80030ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030a4:	461a      	mov	r2, r3
 80030a6:	2101      	movs	r1, #1
 80030a8:	f006 f958 	bl	800935c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	4f54300a 	.word	0x4f54300a

080030bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
 80030c8:	4613      	mov	r3, r2
 80030ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030da:	883b      	ldrh	r3, [r7, #0]
 80030dc:	0419      	lsls	r1, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80030e8:	e028      	b.n	800313c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4413      	add	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e00d      	b.n	800311a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	3340      	adds	r3, #64	@ 0x40
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4413      	add	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	3301      	adds	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	3b01      	subs	r3, #1
 8003120:	429a      	cmp	r2, r3
 8003122:	d3ec      	bcc.n	80030fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003124:	883b      	ldrh	r3, [r7, #0]
 8003126:	0418      	lsls	r0, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	3b01      	subs	r3, #1
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	4302      	orrs	r2, r0
 8003134:	3340      	adds	r3, #64	@ 0x40
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800319a:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800319c:	4313      	orrs	r3, r2
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	10000003 	.word	0x10000003

080031b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031d4:	4b19      	ldr	r3, [pc, #100]	@ (800323c <HAL_PWREx_ConfigSupply+0x70>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d00a      	beq.n	80031f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031e0:	4b16      	ldr	r3, [pc, #88]	@ (800323c <HAL_PWREx_ConfigSupply+0x70>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e01f      	b.n	8003232 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e01d      	b.n	8003232 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031f6:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_PWREx_ConfigSupply+0x70>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	490f      	ldr	r1, [pc, #60]	@ (800323c <HAL_PWREx_ConfigSupply+0x70>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4313      	orrs	r3, r2
 8003204:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003206:	f7fd f93d 	bl	8000484 <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800320c:	e009      	b.n	8003222 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800320e:	f7fd f939 	bl	8000484 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800321c:	d901      	bls.n	8003222 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e007      	b.n	8003232 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003222:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_PWREx_ConfigSupply+0x70>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322e:	d1ee      	bne.n	800320e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	58024800 	.word	0x58024800

08003240 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800324a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	58024800 	.word	0x58024800

08003260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	@ 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f000 bc48 	b.w	8003b04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8088 	beq.w	8003392 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003282:	4b99      	ldr	r3, [pc, #612]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800328a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800328c:	4b96      	ldr	r3, [pc, #600]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	2b10      	cmp	r3, #16
 8003296:	d007      	beq.n	80032a8 <HAL_RCC_OscConfig+0x48>
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	2b18      	cmp	r3, #24
 800329c:	d111      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62>
 800329e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	4b8f      	ldr	r3, [pc, #572]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d06d      	beq.n	8003390 <HAL_RCC_OscConfig+0x130>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d169      	bne.n	8003390 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f000 bc21 	b.w	8003b04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x7a>
 80032cc:	4b86      	ldr	r3, [pc, #536]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a85      	ldr	r2, [pc, #532]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e02e      	b.n	8003338 <HAL_RCC_OscConfig+0xd8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x9c>
 80032e2:	4b81      	ldr	r3, [pc, #516]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a80      	ldr	r2, [pc, #512]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b7e      	ldr	r3, [pc, #504]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7d      	ldr	r2, [pc, #500]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xd8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0xc0>
 8003306:	4b78      	ldr	r3, [pc, #480]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a77      	ldr	r2, [pc, #476]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b75      	ldr	r3, [pc, #468]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a74      	ldr	r2, [pc, #464]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xd8>
 8003320:	4b71      	ldr	r3, [pc, #452]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a70      	ldr	r2, [pc, #448]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b6e      	ldr	r3, [pc, #440]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6d      	ldr	r2, [pc, #436]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fd f8a0 	bl	8000484 <HAL_GetTick>
 8003344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fd f89c 	bl	8000484 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	@ 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e3d4      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800335a:	4b63      	ldr	r3, [pc, #396]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xe8>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd f88c 	bl	8000484 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fd f888 	bl	8000484 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	@ 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e3c0      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003382:	4b59      	ldr	r3, [pc, #356]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x110>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80ca 	beq.w	8003534 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a0:	4b51      	ldr	r3, [pc, #324]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033aa:	4b4f      	ldr	r3, [pc, #316]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <HAL_RCC_OscConfig+0x166>
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	2b18      	cmp	r3, #24
 80033ba:	d156      	bne.n	800346a <HAL_RCC_OscConfig+0x20a>
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d151      	bne.n	800346a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c6:	4b48      	ldr	r3, [pc, #288]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x17e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e392      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033de:	4b42      	ldr	r3, [pc, #264]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0219 	bic.w	r2, r3, #25
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	493f      	ldr	r1, [pc, #252]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fd f848 	bl	8000484 <HAL_GetTick>
 80033f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fd f844 	bl	8000484 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e37c      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800340a:	4b37      	ldr	r3, [pc, #220]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	f7fd f865 	bl	80004e4 <HAL_GetREVID>
 800341a:	4603      	mov	r3, r0
 800341c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003420:	4293      	cmp	r3, r2
 8003422:	d817      	bhi.n	8003454 <HAL_RCC_OscConfig+0x1f4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b40      	cmp	r3, #64	@ 0x40
 800342a:	d108      	bne.n	800343e <HAL_RCC_OscConfig+0x1de>
 800342c:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003434:	4a2c      	ldr	r2, [pc, #176]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800343c:	e07a      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b2a      	ldr	r3, [pc, #168]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	031b      	lsls	r3, r3, #12
 800344c:	4926      	ldr	r1, [pc, #152]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003452:	e06f      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	4921      	ldr	r1, [pc, #132]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003468:	e064      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d047      	beq.n	8003502 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003472:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 0219 	bic.w	r2, r3, #25
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	491a      	ldr	r1, [pc, #104]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fc fffe 	bl	8000484 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348c:	f7fc fffa 	bl	8000484 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e332      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800349e:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	f7fd f81b 	bl	80004e4 <HAL_GetREVID>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d819      	bhi.n	80034ec <HAL_RCC_OscConfig+0x28c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b40      	cmp	r3, #64	@ 0x40
 80034be:	d108      	bne.n	80034d2 <HAL_RCC_OscConfig+0x272>
 80034c0:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034c8:	4a07      	ldr	r2, [pc, #28]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ce:	6053      	str	r3, [r2, #4]
 80034d0:	e030      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	031b      	lsls	r3, r3, #12
 80034e0:	4901      	ldr	r1, [pc, #4]	@ (80034e8 <HAL_RCC_OscConfig+0x288>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
 80034e6:	e025      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
 80034e8:	58024400 	.word	0x58024400
 80034ec:	4b9a      	ldr	r3, [pc, #616]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	4997      	ldr	r1, [pc, #604]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b95      	ldr	r3, [pc, #596]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a94      	ldr	r2, [pc, #592]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fc ffb9 	bl	8000484 <HAL_GetTick>
 8003512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fc ffb5 	bl	8000484 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e2ed      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003528:	4b8b      	ldr	r3, [pc, #556]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a9 	beq.w	8003694 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4b85      	ldr	r3, [pc, #532]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800354a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800354c:	4b82      	ldr	r3, [pc, #520]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d007      	beq.n	8003568 <HAL_RCC_OscConfig+0x308>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b18      	cmp	r3, #24
 800355c:	d13a      	bne.n	80035d4 <HAL_RCC_OscConfig+0x374>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d135      	bne.n	80035d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003568:	4b7b      	ldr	r3, [pc, #492]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_OscConfig+0x320>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	2b80      	cmp	r3, #128	@ 0x80
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e2c1      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003580:	f7fc ffb0 	bl	80004e4 <HAL_GetREVID>
 8003584:	4603      	mov	r3, r0
 8003586:	f241 0203 	movw	r2, #4099	@ 0x1003
 800358a:	4293      	cmp	r3, r2
 800358c:	d817      	bhi.n	80035be <HAL_RCC_OscConfig+0x35e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	2b20      	cmp	r3, #32
 8003594:	d108      	bne.n	80035a8 <HAL_RCC_OscConfig+0x348>
 8003596:	4b70      	ldr	r3, [pc, #448]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800359e:	4a6e      	ldr	r2, [pc, #440]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035a6:	e075      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035a8:	4b6b      	ldr	r3, [pc, #428]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	069b      	lsls	r3, r3, #26
 80035b6:	4968      	ldr	r1, [pc, #416]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035bc:	e06a      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035be:	4b66      	ldr	r3, [pc, #408]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	4962      	ldr	r1, [pc, #392]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035d2:	e05f      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d042      	beq.n	8003662 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80035e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fc ff4c 	bl	8000484 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035f0:	f7fc ff48 	bl	8000484 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e280      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003602:	4b55      	ldr	r3, [pc, #340]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800360e:	f7fc ff69 	bl	80004e4 <HAL_GetREVID>
 8003612:	4603      	mov	r3, r0
 8003614:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003618:	4293      	cmp	r3, r2
 800361a:	d817      	bhi.n	800364c <HAL_RCC_OscConfig+0x3ec>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	2b20      	cmp	r3, #32
 8003622:	d108      	bne.n	8003636 <HAL_RCC_OscConfig+0x3d6>
 8003624:	4b4c      	ldr	r3, [pc, #304]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800362c:	4a4a      	ldr	r2, [pc, #296]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800362e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003632:	6053      	str	r3, [r2, #4]
 8003634:	e02e      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
 8003636:	4b48      	ldr	r3, [pc, #288]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	069b      	lsls	r3, r3, #26
 8003644:	4944      	ldr	r1, [pc, #272]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
 800364a:	e023      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
 800364c:	4b42      	ldr	r3, [pc, #264]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	493f      	ldr	r1, [pc, #252]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
 8003660:	e018      	b.n	8003694 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003662:	4b3d      	ldr	r3, [pc, #244]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a3c      	ldr	r2, [pc, #240]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800366c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fc ff09 	bl	8000484 <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003676:	f7fc ff05 	bl	8000484 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e23d      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003688:	4b33      	ldr	r3, [pc, #204]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d036      	beq.n	800370e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d019      	beq.n	80036dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fc fee6 	bl	8000484 <HAL_GetTick>
 80036b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fc fee2 	bl	8000484 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e21a      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ce:	4b22      	ldr	r3, [pc, #136]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x45c>
 80036da:	e018      	b.n	800370e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fc fecc 	bl	8000484 <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fc fec8 	bl	8000484 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e200      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d039      	beq.n	800378e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01c      	beq.n	800375c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a0c      	ldr	r2, [pc, #48]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003728:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800372c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800372e:	f7fc fea9 	bl	8000484 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003736:	f7fc fea5 	bl	8000484 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1dd      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x4d6>
 8003754:	e01b      	b.n	800378e <HAL_RCC_OscConfig+0x52e>
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800375c:	4b9b      	ldr	r3, [pc, #620]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a9a      	ldr	r2, [pc, #616]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003766:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003768:	f7fc fe8c 	bl	8000484 <HAL_GetTick>
 800376c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003770:	f7fc fe88 	bl	8000484 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1c0      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003782:	4b92      	ldr	r3, [pc, #584]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8081 	beq.w	800389e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800379c:	4b8c      	ldr	r3, [pc, #560]	@ (80039d0 <HAL_RCC_OscConfig+0x770>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a8b      	ldr	r2, [pc, #556]	@ (80039d0 <HAL_RCC_OscConfig+0x770>)
 80037a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a8:	f7fc fe6c 	bl	8000484 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b0:	f7fc fe68 	bl	8000484 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1a0      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c2:	4b83      	ldr	r3, [pc, #524]	@ (80039d0 <HAL_RCC_OscConfig+0x770>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x584>
 80037d6:	4b7d      	ldr	r3, [pc, #500]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4a7c      	ldr	r2, [pc, #496]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e2:	e02d      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x5a6>
 80037ec:	4b77      	ldr	r3, [pc, #476]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4a76      	ldr	r2, [pc, #472]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f8:	4b74      	ldr	r3, [pc, #464]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a73      	ldr	r2, [pc, #460]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c8>
 800380e:	4b6f      	ldr	r3, [pc, #444]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	4a6e      	ldr	r2, [pc, #440]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	@ 0x70
 800381a:	4b6c      	ldr	r3, [pc, #432]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381e:	4a6b      	ldr	r2, [pc, #428]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	@ 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x5e0>
 8003828:	4b68      	ldr	r3, [pc, #416]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382c:	4a67      	ldr	r2, [pc, #412]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	@ 0x70
 8003834:	4b65      	ldr	r3, [pc, #404]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003838:	4a64      	ldr	r2, [pc, #400]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fc fe1c 	bl	8000484 <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fc fe18 	bl	8000484 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e14e      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003866:	4b59      	ldr	r3, [pc, #356]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x5f0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fc fe06 	bl	8000484 <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fc fe02 	bl	8000484 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e138      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003892:	4b4e      	ldr	r3, [pc, #312]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 812d 	beq.w	8003b02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80038a8:	4b48      	ldr	r3, [pc, #288]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038b0:	2b18      	cmp	r3, #24
 80038b2:	f000 80bd 	beq.w	8003a30 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	f040 809e 	bne.w	80039fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b42      	ldr	r3, [pc, #264]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a41      	ldr	r2, [pc, #260]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fc fdda 	bl	8000484 <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fc fdd6 	bl	8000484 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e10e      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038e6:	4b39      	ldr	r3, [pc, #228]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f2:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80038f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f6:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <HAL_RCC_OscConfig+0x774>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	430a      	orrs	r2, r1
 8003906:	4931      	ldr	r1, [pc, #196]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	628b      	str	r3, [r1, #40]	@ 0x28
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003910:	3b01      	subs	r3, #1
 8003912:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391a:	3b01      	subs	r3, #1
 800391c:	025b      	lsls	r3, r3, #9
 800391e:	b29b      	uxth	r3, r3
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	3b01      	subs	r3, #1
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800393c:	4923      	ldr	r1, [pc, #140]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003942:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	4a21      	ldr	r2, [pc, #132]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800394e:	4b1f      	ldr	r3, [pc, #124]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003952:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <HAL_RCC_OscConfig+0x778>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800395a:	00d2      	lsls	r2, r2, #3
 800395c:	491b      	ldr	r1, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003962:	4b1a      	ldr	r3, [pc, #104]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	f023 020c 	bic.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	4917      	ldr	r1, [pc, #92]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003974:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	f023 0202 	bic.w	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	4912      	ldr	r1, [pc, #72]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003986:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	4a10      	ldr	r2, [pc, #64]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003990:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80039aa:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	4a07      	ldr	r2, [pc, #28]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a04      	ldr	r2, [pc, #16]	@ (80039cc <HAL_RCC_OscConfig+0x76c>)
 80039bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fc fd5f 	bl	8000484 <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039c8:	e011      	b.n	80039ee <HAL_RCC_OscConfig+0x78e>
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
 80039d0:	58024800 	.word	0x58024800
 80039d4:	fffffc0c 	.word	0xfffffc0c
 80039d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fc fd52 	bl	8000484 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e08a      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ee:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x77c>
 80039fa:	e082      	b.n	8003b02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b43      	ldr	r3, [pc, #268]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a42      	ldr	r2, [pc, #264]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fc fd3c 	bl	8000484 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fc fd38 	bl	8000484 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e070      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a22:	4b3a      	ldr	r3, [pc, #232]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x7b0>
 8003a2e:	e068      	b.n	8003b02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a30:	4b36      	ldr	r3, [pc, #216]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a36:	4b35      	ldr	r3, [pc, #212]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d031      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0203 	and.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d12a      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d122      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11a      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0a5b      	lsrs	r3, r3, #9
 8003a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	0e1b      	lsrs	r3, r3, #24
 8003a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e02b      	b.n	8003b04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003aac:	4b17      	ldr	r3, [pc, #92]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ab6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d01f      	beq.n	8003b02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ac2:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	4a11      	ldr	r2, [pc, #68]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ace:	f7fc fcd9 	bl	8000484 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ad4:	bf00      	nop
 8003ad6:	f7fc fcd5 	bl	8000484 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d0f9      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <HAL_RCC_OscConfig+0x8b0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003aee:	00d2      	lsls	r2, r2, #3
 8003af0:	4906      	ldr	r1, [pc, #24]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003af6:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <HAL_RCC_OscConfig+0x8ac>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3730      	adds	r7, #48	@ 0x30
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	ffff0007 	.word	0xffff0007

08003b14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e19c      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b8a      	ldr	r3, [pc, #552]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b87      	ldr	r3, [pc, #540]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 020f 	bic.w	r2, r3, #15
 8003b3e:	4985      	ldr	r1, [pc, #532]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b83      	ldr	r3, [pc, #524]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e184      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	4b7b      	ldr	r3, [pc, #492]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d908      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b74:	4b78      	ldr	r3, [pc, #480]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	4975      	ldr	r1, [pc, #468]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d010      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	4b70      	ldr	r3, [pc, #448]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d908      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	496a      	ldr	r1, [pc, #424]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d010      	beq.n	8003be2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	4b64      	ldr	r3, [pc, #400]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d908      	bls.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bd0:	4b61      	ldr	r3, [pc, #388]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	495e      	ldr	r1, [pc, #376]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d010      	beq.n	8003c10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	4b59      	ldr	r3, [pc, #356]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d908      	bls.n	8003c10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bfe:	4b56      	ldr	r3, [pc, #344]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4953      	ldr	r1, [pc, #332]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d010      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4b4d      	ldr	r3, [pc, #308]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d908      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f023 020f 	bic.w	r2, r3, #15
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4947      	ldr	r1, [pc, #284]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d055      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c4a:	4b43      	ldr	r3, [pc, #268]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4940      	ldr	r1, [pc, #256]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c64:	4b3c      	ldr	r3, [pc, #240]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d121      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0f6      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c7c:	4b36      	ldr	r3, [pc, #216]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d115      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0ea      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c94:	4b30      	ldr	r3, [pc, #192]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0de      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d6      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cb4:	4b28      	ldr	r3, [pc, #160]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f023 0207 	bic.w	r2, r3, #7
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4925      	ldr	r1, [pc, #148]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc6:	f7fc fbdd 	bl	8000484 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cce:	f7fc fbd9 	bl	8000484 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0be      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d1eb      	bne.n	8003cce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d010      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d208      	bcs.n	8003d24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d12:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f023 020f 	bic.w	r2, r3, #15
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	490e      	ldr	r1, [pc, #56]	@ (8003d58 <HAL_RCC_ClockConfig+0x244>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d214      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b08      	ldr	r3, [pc, #32]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 020f 	bic.w	r2, r3, #15
 8003d3a:	4906      	ldr	r1, [pc, #24]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <HAL_RCC_ClockConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e086      	b.n	8003e62 <HAL_RCC_ClockConfig+0x34e>
 8003d54:	52002000 	.word	0x52002000
 8003d58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d208      	bcs.n	8003d8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d78:	4b3c      	ldr	r3, [pc, #240]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	4939      	ldr	r1, [pc, #228]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d208      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003da6:	4b31      	ldr	r3, [pc, #196]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	492e      	ldr	r1, [pc, #184]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	4b28      	ldr	r3, [pc, #160]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d208      	bcs.n	8003de6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dd4:	4b25      	ldr	r3, [pc, #148]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	4922      	ldr	r1, [pc, #136]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d010      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d208      	bcs.n	8003e14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e02:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4917      	ldr	r1, [pc, #92]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e14:	f000 f834 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	4912      	ldr	r1, [pc, #72]	@ (8003e70 <HAL_RCC_ClockConfig+0x35c>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e32:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <HAL_RCC_ClockConfig+0x358>)
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <HAL_RCC_ClockConfig+0x35c>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <HAL_RCC_ClockConfig+0x360>)
 8003e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <HAL_RCC_ClockConfig+0x364>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e52:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <HAL_RCC_ClockConfig+0x368>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f009 fd02 	bl	800d860 <HAL_InitTick>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	58024400 	.word	0x58024400
 8003e70:	08013420 	.word	0x08013420
 8003e74:	24000098 	.word	0x24000098
 8003e78:	24000094 	.word	0x24000094
 8003e7c:	24000000 	.word	0x24000000

08003e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	@ 0x24
 8003e84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e86:	4bb3      	ldr	r3, [pc, #716]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e8e:	2b18      	cmp	r3, #24
 8003e90:	f200 8155 	bhi.w	800413e <HAL_RCC_GetSysClockFreq+0x2be>
 8003e94:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003f01 	.word	0x08003f01
 8003ea0:	0800413f 	.word	0x0800413f
 8003ea4:	0800413f 	.word	0x0800413f
 8003ea8:	0800413f 	.word	0x0800413f
 8003eac:	0800413f 	.word	0x0800413f
 8003eb0:	0800413f 	.word	0x0800413f
 8003eb4:	0800413f 	.word	0x0800413f
 8003eb8:	0800413f 	.word	0x0800413f
 8003ebc:	08003f27 	.word	0x08003f27
 8003ec0:	0800413f 	.word	0x0800413f
 8003ec4:	0800413f 	.word	0x0800413f
 8003ec8:	0800413f 	.word	0x0800413f
 8003ecc:	0800413f 	.word	0x0800413f
 8003ed0:	0800413f 	.word	0x0800413f
 8003ed4:	0800413f 	.word	0x0800413f
 8003ed8:	0800413f 	.word	0x0800413f
 8003edc:	08003f2d 	.word	0x08003f2d
 8003ee0:	0800413f 	.word	0x0800413f
 8003ee4:	0800413f 	.word	0x0800413f
 8003ee8:	0800413f 	.word	0x0800413f
 8003eec:	0800413f 	.word	0x0800413f
 8003ef0:	0800413f 	.word	0x0800413f
 8003ef4:	0800413f 	.word	0x0800413f
 8003ef8:	0800413f 	.word	0x0800413f
 8003efc:	08003f33 	.word	0x08003f33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f00:	4b94      	ldr	r3, [pc, #592]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d009      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f0c:	4b91      	ldr	r3, [pc, #580]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	4a90      	ldr	r2, [pc, #576]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003f1e:	e111      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f20:	4b8d      	ldr	r3, [pc, #564]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f22:	61bb      	str	r3, [r7, #24]
      break;
 8003f24:	e10e      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f26:	4b8d      	ldr	r3, [pc, #564]	@ (800415c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f28:	61bb      	str	r3, [r7, #24]
      break;
 8003f2a:	e10b      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f2e:	61bb      	str	r3, [r7, #24]
      break;
 8003f30:	e108      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f32:	4b88      	ldr	r3, [pc, #544]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f3c:	4b85      	ldr	r3, [pc, #532]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f48:	4b82      	ldr	r3, [pc, #520]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f52:	4b80      	ldr	r3, [pc, #512]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80e1 	beq.w	8004138 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	f000 8083 	beq.w	8004084 <HAL_RCC_GetSysClockFreq+0x204>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	f200 80a1 	bhi.w	80040c8 <HAL_RCC_GetSysClockFreq+0x248>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x114>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d056      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f92:	e099      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f94:	4b6f      	ldr	r3, [pc, #444]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02d      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	08db      	lsrs	r3, r3, #3
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	4a6b      	ldr	r2, [pc, #428]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fca:	4b62      	ldr	r3, [pc, #392]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fde:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004164 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ffa:	e087      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004006:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004168 <HAL_RCC_GetSysClockFreq+0x2e8>
 800400a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400e:	4b51      	ldr	r3, [pc, #324]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004022:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004164 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800403e:	e065      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800416c <HAL_RCC_GetSysClockFreq+0x2ec>
 800404e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004052:	4b40      	ldr	r3, [pc, #256]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004062:	ed97 6a02 	vldr	s12, [r7, #8]
 8004066:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004164 <HAL_RCC_GetSysClockFreq+0x2e4>
 800406a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004082:	e043      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004170 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004096:	4b2f      	ldr	r3, [pc, #188]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004164 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040c6:	e021      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800416c <HAL_RCC_GetSysClockFreq+0x2ec>
 80040d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004164 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800410a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800410c:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	0a5b      	lsrs	r3, r3, #9
 8004112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004116:	3301      	adds	r3, #1
 8004118:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004124:	edd7 6a07 	vldr	s13, [r7, #28]
 8004128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800412c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004130:	ee17 3a90 	vmov	r3, s15
 8004134:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004136:	e005      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]
      break;
 800413c:	e002      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800413e:	4b07      	ldr	r3, [pc, #28]	@ (800415c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004140:	61bb      	str	r3, [r7, #24]
      break;
 8004142:	bf00      	nop
  }

  return sysclockfreq;
 8004144:	69bb      	ldr	r3, [r7, #24]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3724      	adds	r7, #36	@ 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	58024400 	.word	0x58024400
 8004158:	03d09000 	.word	0x03d09000
 800415c:	003d0900 	.word	0x003d0900
 8004160:	017d7840 	.word	0x017d7840
 8004164:	46000000 	.word	0x46000000
 8004168:	4c742400 	.word	0x4c742400
 800416c:	4a742400 	.word	0x4a742400
 8004170:	4bbebc20 	.word	0x4bbebc20

08004174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800417a:	f7ff fe81 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	490f      	ldr	r1, [pc, #60]	@ (80041c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800418c:	5ccb      	ldrb	r3, [r1, r3]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004198:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a07      	ldr	r2, [pc, #28]	@ (80041cc <HAL_RCC_GetHCLKFreq+0x58>)
 80041b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041b2:	4a07      	ldr	r2, [pc, #28]	@ (80041d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041b8:	4b04      	ldr	r3, [pc, #16]	@ (80041cc <HAL_RCC_GetHCLKFreq+0x58>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58024400 	.word	0x58024400
 80041c8:	08013420 	.word	0x08013420
 80041cc:	24000098 	.word	0x24000098
 80041d0:	24000094 	.word	0x24000094

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041d8:	f7ff ffcc 	bl	8004174 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4904      	ldr	r1, [pc, #16]	@ (80041fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	58024400 	.word	0x58024400
 80041fc:	08013420 	.word	0x08013420

08004200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	223f      	movs	r2, #63	@ 0x3f
 800420e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004210:	4b1a      	ldr	r3, [pc, #104]	@ (800427c <HAL_RCC_GetClockConfig+0x7c>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0207 	and.w	r2, r3, #7
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800421c:	4b17      	ldr	r3, [pc, #92]	@ (800427c <HAL_RCC_GetClockConfig+0x7c>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004228:	4b14      	ldr	r3, [pc, #80]	@ (800427c <HAL_RCC_GetClockConfig+0x7c>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 020f 	and.w	r2, r3, #15
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004234:	4b11      	ldr	r3, [pc, #68]	@ (800427c <HAL_RCC_GetClockConfig+0x7c>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004240:	4b0e      	ldr	r3, [pc, #56]	@ (800427c <HAL_RCC_GetClockConfig+0x7c>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCC_GetClockConfig+0x7c>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004258:	4b08      	ldr	r3, [pc, #32]	@ (800427c <HAL_RCC_GetClockConfig+0x7c>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004264:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <HAL_RCC_GetClockConfig+0x80>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	601a      	str	r2, [r3, #0]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	58024400 	.word	0x58024400
 8004280:	52002000 	.word	0x52002000

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	b0ca      	sub	sp, #296	@ 0x128
 800428a:	af00      	add	r7, sp, #0
 800428c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80042a8:	2500      	movs	r5, #0
 80042aa:	ea54 0305 	orrs.w	r3, r4, r5
 80042ae:	d049      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042ba:	d02f      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80042bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042c0:	d828      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80042c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042c6:	d01a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042cc:	d822      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d6:	d007      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042d8:	e01c      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042da:	4bb8      	ldr	r3, [pc, #736]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	4ab7      	ldr	r2, [pc, #732]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042e6:	e01a      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ec:	3308      	adds	r3, #8
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 f9d1 	bl	8005698 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042fc:	e00f      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fa78 	bl	80057fc <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004312:	e004      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800431c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004326:	4ba5      	ldr	r3, [pc, #660]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004334:	4aa1      	ldr	r2, [pc, #644]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004336:	430b      	orrs	r3, r1
 8004338:	6513      	str	r3, [r2, #80]	@ 0x50
 800433a:	e003      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004350:	f04f 0900 	mov.w	r9, #0
 8004354:	ea58 0309 	orrs.w	r3, r8, r9
 8004358:	d047      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004360:	2b04      	cmp	r3, #4
 8004362:	d82a      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004364:	a201      	add	r2, pc, #4	@ (adr r2, 800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004381 	.word	0x08004381
 8004370:	0800438f 	.word	0x0800438f
 8004374:	080043a5 	.word	0x080043a5
 8004378:	080043c3 	.word	0x080043c3
 800437c:	080043c3 	.word	0x080043c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004380:	4b8e      	ldr	r3, [pc, #568]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	4a8d      	ldr	r2, [pc, #564]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800438c:	e01a      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	3308      	adds	r3, #8
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f97e 	bl	8005698 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043a2:	e00f      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	3328      	adds	r3, #40	@ 0x28
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 fa25 	bl	80057fc <RCCEx_PLL3_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043b8:	e004      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043c0:	e000      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80043c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043cc:	4b7b      	ldr	r3, [pc, #492]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d0:	f023 0107 	bic.w	r1, r3, #7
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	4a78      	ldr	r2, [pc, #480]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6513      	str	r3, [r2, #80]	@ 0x50
 80043e0:	e003      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80043f6:	f04f 0b00 	mov.w	fp, #0
 80043fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80043fe:	d04c      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800440a:	d030      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800440c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004410:	d829      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004412:	2bc0      	cmp	r3, #192	@ 0xc0
 8004414:	d02d      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004416:	2bc0      	cmp	r3, #192	@ 0xc0
 8004418:	d825      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800441a:	2b80      	cmp	r3, #128	@ 0x80
 800441c:	d018      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800441e:	2b80      	cmp	r3, #128	@ 0x80
 8004420:	d821      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	d007      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800442a:	e01c      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4b63      	ldr	r3, [pc, #396]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	4a62      	ldr	r2, [pc, #392]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004438:	e01c      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	3308      	adds	r3, #8
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f928 	bl	8005698 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800444e:	e011      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	3328      	adds	r3, #40	@ 0x28
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f001 f9cf 	bl	80057fc <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004464:	e006      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800446c:	e002      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800447c:	4b4f      	ldr	r3, [pc, #316]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800447e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004480:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	4a4c      	ldr	r2, [pc, #304]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800448c:	430b      	orrs	r3, r1
 800448e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004490:	e003      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80044a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80044b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d053      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044c6:	d035      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80044c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044cc:	d82e      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80044ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044d2:	d031      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80044d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044d8:	d828      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80044da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044de:	d01a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80044e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e4:	d822      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80044ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044ee:	d007      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80044f0:	e01c      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f2:	4b32      	ldr	r3, [pc, #200]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	4a31      	ldr	r2, [pc, #196]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044fe:	e01c      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	3308      	adds	r3, #8
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f8c5 	bl	8005698 <RCCEx_PLL2_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004514:	e011      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	3328      	adds	r3, #40	@ 0x28
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f96c 	bl	80057fc <RCCEx_PLL3_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800452a:	e006      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004532:	e002      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800453a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004542:	4b1e      	ldr	r3, [pc, #120]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004552:	4a1a      	ldr	r2, [pc, #104]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004554:	430b      	orrs	r3, r1
 8004556:	6593      	str	r3, [r2, #88]	@ 0x58
 8004558:	e003      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800456e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004578:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800457c:	460b      	mov	r3, r1
 800457e:	4313      	orrs	r3, r2
 8004580:	d056      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800458a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800458e:	d038      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004594:	d831      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004596:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800459a:	d034      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800459c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045a0:	d82b      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045a6:	d01d      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80045a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ac:	d825      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80045b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045b8:	e01f      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045ba:	bf00      	nop
 80045bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c0:	4ba2      	ldr	r3, [pc, #648]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	4aa1      	ldr	r2, [pc, #644]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045cc:	e01c      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d2:	3308      	adds	r3, #8
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f85e 	bl	8005698 <RCCEx_PLL2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045e2:	e011      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	3328      	adds	r3, #40	@ 0x28
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f905 	bl	80057fc <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004610:	4b8e      	ldr	r3, [pc, #568]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004620:	4a8a      	ldr	r2, [pc, #552]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6593      	str	r3, [r2, #88]	@ 0x58
 8004626:	e003      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800463c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004646:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d03a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004656:	2b30      	cmp	r3, #48	@ 0x30
 8004658:	d01f      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800465a:	2b30      	cmp	r3, #48	@ 0x30
 800465c:	d819      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800465e:	2b20      	cmp	r3, #32
 8004660:	d00c      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004662:	2b20      	cmp	r3, #32
 8004664:	d815      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d019      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800466a:	2b10      	cmp	r3, #16
 800466c:	d111      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466e:	4b77      	ldr	r3, [pc, #476]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	4a76      	ldr	r2, [pc, #472]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800467a:	e011      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004680:	3308      	adds	r3, #8
 8004682:	2102      	movs	r1, #2
 8004684:	4618      	mov	r0, r3
 8004686:	f001 f807 	bl	8005698 <RCCEx_PLL2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004690:	e006      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004698:	e002      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800469e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046a8:	4b68      	ldr	r3, [pc, #416]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b6:	4a65      	ldr	r2, [pc, #404]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80046d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046d6:	2300      	movs	r3, #0
 80046d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d051      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046f0:	d035      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80046f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046f6:	d82e      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80046f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80046fc:	d031      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80046fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004702:	d828      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004708:	d01a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800470e:	d822      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004718:	d007      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800471a:	e01c      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800471c:	4b4b      	ldr	r3, [pc, #300]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	4a4a      	ldr	r2, [pc, #296]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004728:	e01c      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472e:	3308      	adds	r3, #8
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f000 ffb0 	bl	8005698 <RCCEx_PLL2_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	3328      	adds	r3, #40	@ 0x28
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f001 f857 	bl	80057fc <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004754:	e006      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800475c:	e002      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800476c:	4b37      	ldr	r3, [pc, #220]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800476e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004770:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477a:	4a34      	ldr	r2, [pc, #208]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800477c:	430b      	orrs	r3, r1
 800477e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004780:	e003      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800479a:	2300      	movs	r3, #0
 800479c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80047a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80047a4:	460b      	mov	r3, r1
 80047a6:	4313      	orrs	r3, r2
 80047a8:	d056      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047b4:	d033      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80047b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047ba:	d82c      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047c0:	d02f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80047c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047c6:	d826      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047cc:	d02b      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80047ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047d2:	d820      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047d8:	d012      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80047da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047de:	d81a      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d022      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e8:	d115      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	3308      	adds	r3, #8
 80047f0:	2101      	movs	r1, #1
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 ff50 	bl	8005698 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80047fe:	e015      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fff7 	bl	80057fc <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004814:	e00a      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481c:	e006      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800481e:	bf00      	nop
 8004820:	e004      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004822:	bf00      	nop
 8004824:	e002      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004826:	bf00      	nop
 8004828:	e000      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800482a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800482c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10d      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004834:	4b05      	ldr	r3, [pc, #20]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004838:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004842:	4a02      	ldr	r2, [pc, #8]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004844:	430b      	orrs	r3, r1
 8004846:	6513      	str	r3, [r2, #80]	@ 0x50
 8004848:	e006      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800484a:	bf00      	nop
 800484c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800486e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004872:	460b      	mov	r3, r1
 8004874:	4313      	orrs	r3, r2
 8004876:	d055      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004884:	d033      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800488a:	d82c      	bhi.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d02f      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004896:	d826      	bhi.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800489c:	d02b      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800489e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048a2:	d820      	bhi.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a8:	d012      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80048aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ae:	d81a      	bhi.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d022      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80048b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048b8:	d115      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	3308      	adds	r3, #8
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fee8 	bl	8005698 <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048ce:	e015      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	3328      	adds	r3, #40	@ 0x28
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 ff8f 	bl	80057fc <RCCEx_PLL3_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048e4:	e00a      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ec:	e006      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80048ee:	bf00      	nop
 80048f0:	e004      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80048fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004904:	4ba3      	ldr	r3, [pc, #652]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004914:	4a9f      	ldr	r2, [pc, #636]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004916:	430b      	orrs	r3, r1
 8004918:	6593      	str	r3, [r2, #88]	@ 0x58
 800491a:	e003      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800493a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d037      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800494e:	d00e      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004954:	d816      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d018      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800495a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800495e:	d111      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004960:	4b8c      	ldr	r3, [pc, #560]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	4a8b      	ldr	r2, [pc, #556]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800496c:	e00f      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	3308      	adds	r3, #8
 8004974:	2101      	movs	r1, #1
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fe8e 	bl	8005698 <RCCEx_PLL2_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004982:	e004      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800498a:	e000      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800498c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800498e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004996:	4b7f      	ldr	r3, [pc, #508]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a4:	4a7b      	ldr	r2, [pc, #492]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80049aa:	e003      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80049c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80049ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4313      	orrs	r3, r2
 80049d2:	d039      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d81c      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80049de:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	08004a21 	.word	0x08004a21
 80049e8:	080049f5 	.word	0x080049f5
 80049ec:	08004a03 	.word	0x08004a03
 80049f0:	08004a21 	.word	0x08004a21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f4:	4b67      	ldr	r3, [pc, #412]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	4a66      	ldr	r2, [pc, #408]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a00:	e00f      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a06:	3308      	adds	r3, #8
 8004a08:	2102      	movs	r1, #2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fe44 	bl	8005698 <RCCEx_PLL2_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a16:	e004      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a1e:	e000      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2e:	f023 0103 	bic.w	r1, r3, #3
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a38:	4a56      	ldr	r2, [pc, #344]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a3e:	e003      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a62:	460b      	mov	r3, r1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f000 809f 	beq.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a76:	f7fb fd05 	bl	8000484 <HAL_GetTick>
 8004a7a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a80:	f7fb fd00 	bl	8000484 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b64      	cmp	r3, #100	@ 0x64
 8004a8e:	d903      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a96:	e005      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a98:	4b3f      	ldr	r3, [pc, #252]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ed      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d179      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004aac:	4b39      	ldr	r3, [pc, #228]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ab8:	4053      	eors	r3, r2
 8004aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d015      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ac2:	4b34      	ldr	r3, [pc, #208]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad2:	4a30      	ldr	r2, [pc, #192]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ada:	4b2e      	ldr	r3, [pc, #184]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	4a2d      	ldr	r2, [pc, #180]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004afa:	d118      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fb fcc2 	bl	8000484 <HAL_GetTick>
 8004b00:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b04:	e00d      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fb fcbd 	bl	8000484 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004b10:	1ad2      	subs	r2, r2, r3
 8004b12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d903      	bls.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004b20:	e005      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b22:	4b1c      	ldr	r3, [pc, #112]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0eb      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d129      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b46:	d10e      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b58:	091a      	lsrs	r2, r3, #4
 8004b5a:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6113      	str	r3, [r2, #16]
 8004b64:	e005      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b70:	6113      	str	r3, [r2, #16]
 8004b72:	4b08      	ldr	r3, [pc, #32]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b74:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b82:	4a04      	ldr	r2, [pc, #16]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b88:	e00e      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004b92:	e009      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004b94:	58024400 	.word	0x58024400
 8004b98:	58024800 	.word	0x58024800
 8004b9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f002 0301 	and.w	r3, r2, #1
 8004bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f000 8089 	beq.w	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bd0:	2b28      	cmp	r3, #40	@ 0x28
 8004bd2:	d86b      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004cb5 	.word	0x08004cb5
 8004be0:	08004cad 	.word	0x08004cad
 8004be4:	08004cad 	.word	0x08004cad
 8004be8:	08004cad 	.word	0x08004cad
 8004bec:	08004cad 	.word	0x08004cad
 8004bf0:	08004cad 	.word	0x08004cad
 8004bf4:	08004cad 	.word	0x08004cad
 8004bf8:	08004cad 	.word	0x08004cad
 8004bfc:	08004c81 	.word	0x08004c81
 8004c00:	08004cad 	.word	0x08004cad
 8004c04:	08004cad 	.word	0x08004cad
 8004c08:	08004cad 	.word	0x08004cad
 8004c0c:	08004cad 	.word	0x08004cad
 8004c10:	08004cad 	.word	0x08004cad
 8004c14:	08004cad 	.word	0x08004cad
 8004c18:	08004cad 	.word	0x08004cad
 8004c1c:	08004c97 	.word	0x08004c97
 8004c20:	08004cad 	.word	0x08004cad
 8004c24:	08004cad 	.word	0x08004cad
 8004c28:	08004cad 	.word	0x08004cad
 8004c2c:	08004cad 	.word	0x08004cad
 8004c30:	08004cad 	.word	0x08004cad
 8004c34:	08004cad 	.word	0x08004cad
 8004c38:	08004cad 	.word	0x08004cad
 8004c3c:	08004cb5 	.word	0x08004cb5
 8004c40:	08004cad 	.word	0x08004cad
 8004c44:	08004cad 	.word	0x08004cad
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004cad 	.word	0x08004cad
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004cb5 	.word	0x08004cb5
 8004c60:	08004cad 	.word	0x08004cad
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004cb5 	.word	0x08004cb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c84:	3308      	adds	r3, #8
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fd05 	bl	8005698 <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c94:	e00f      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	3328      	adds	r3, #40	@ 0x28
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fdac 	bl	80057fc <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004caa:	e004      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cbe:	4bbf      	ldr	r3, [pc, #764]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ccc:	4abb      	ldr	r2, [pc, #748]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cd2:	e003      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 0302 	and.w	r3, r2, #2
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d041      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d824      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004d06:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d59 	.word	0x08004d59
 8004d10:	08004d25 	.word	0x08004d25
 8004d14:	08004d3b 	.word	0x08004d3b
 8004d18:	08004d59 	.word	0x08004d59
 8004d1c:	08004d59 	.word	0x08004d59
 8004d20:	08004d59 	.word	0x08004d59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d28:	3308      	adds	r3, #8
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fcb3 	bl	8005698 <RCCEx_PLL2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d38:	e00f      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	3328      	adds	r3, #40	@ 0x28
 8004d40:	2101      	movs	r1, #1
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fd5a 	bl	80057fc <RCCEx_PLL3_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d4e:	e004      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d56:	e000      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d62:	4b96      	ldr	r3, [pc, #600]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	f023 0107 	bic.w	r1, r3, #7
 8004d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d70:	4a92      	ldr	r2, [pc, #584]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d76:	e003      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f002 0304 	and.w	r3, r2, #4
 8004d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d044      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d825      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004dac:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004e01 	.word	0x08004e01
 8004db8:	08004dcd 	.word	0x08004dcd
 8004dbc:	08004de3 	.word	0x08004de3
 8004dc0:	08004e01 	.word	0x08004e01
 8004dc4:	08004e01 	.word	0x08004e01
 8004dc8:	08004e01 	.word	0x08004e01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fc5f 	bl	8005698 <RCCEx_PLL2_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004de0:	e00f      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de6:	3328      	adds	r3, #40	@ 0x28
 8004de8:	2101      	movs	r1, #1
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fd06 	bl	80057fc <RCCEx_PLL3_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004df6:	e004      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	f023 0107 	bic.w	r1, r3, #7
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e1a:	4a68      	ldr	r2, [pc, #416]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e20:	e003      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f002 0320 	and.w	r3, r2, #32
 8004e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d055      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e56:	d033      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e5c:	d82c      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d02f      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e68:	d826      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e6e:	d02b      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004e70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e74:	d820      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e7a:	d012      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e80:	d81a      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d022      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004e86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e8a:	d115      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	3308      	adds	r3, #8
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fbff 	bl	8005698 <RCCEx_PLL2_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e015      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	3328      	adds	r3, #40	@ 0x28
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fca6 	bl	80057fc <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e00a      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ebe:	e006      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ec0:	bf00      	nop
 8004ec2:	e004      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ec4:	bf00      	nop
 8004ec6:	e002      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ec8:	bf00      	nop
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee6:	4a35      	ldr	r2, [pc, #212]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6553      	str	r3, [r2, #84]	@ 0x54
 8004eec:	e003      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f06:	2300      	movs	r3, #0
 8004f08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d058      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f22:	d033      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004f24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f28:	d82c      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2e:	d02f      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f34:	d826      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f3a:	d02b      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004f3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f40:	d820      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f46:	d012      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4c:	d81a      	bhi.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d022      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f56:	d115      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fb99 	bl	8005698 <RCCEx_PLL2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f6c:	e015      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f72:	3328      	adds	r3, #40	@ 0x28
 8004f74:	2102      	movs	r1, #2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fc40 	bl	80057fc <RCCEx_PLL3_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f82:	e00a      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f8a:	e006      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e004      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f90:	bf00      	nop
 8004f92:	e002      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fb2:	4a02      	ldr	r2, [pc, #8]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb8:	e006      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	d055      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ff0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ff4:	d033      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004ff6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ffa:	d82c      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005000:	d02f      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005006:	d826      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005008:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800500c:	d02b      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800500e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005012:	d820      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005014:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005018:	d012      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800501a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800501e:	d81a      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d022      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005028:	d115      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502e:	3308      	adds	r3, #8
 8005030:	2100      	movs	r1, #0
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fb30 	bl	8005698 <RCCEx_PLL2_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800503e:	e015      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	3328      	adds	r3, #40	@ 0x28
 8005046:	2102      	movs	r1, #2
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fbd7 	bl	80057fc <RCCEx_PLL3_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005054:	e00a      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800505c:	e006      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800505e:	bf00      	nop
 8005060:	e004      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005062:	bf00      	nop
 8005064:	e002      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005066:	bf00      	nop
 8005068:	e000      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800506a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005074:	4ba1      	ldr	r3, [pc, #644]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005080:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005084:	4a9d      	ldr	r2, [pc, #628]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005086:	430b      	orrs	r3, r1
 8005088:	6593      	str	r3, [r2, #88]	@ 0x58
 800508a:	e003      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 0308 	and.w	r3, r2, #8
 80050a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d01e      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c0:	d10c      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c6:	3328      	adds	r3, #40	@ 0x28
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fb96 	bl	80057fc <RCCEx_PLL3_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050dc:	4b87      	ldr	r3, [pc, #540]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ec:	4a83      	ldr	r2, [pc, #524]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f002 0310 	and.w	r3, r2, #16
 80050fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005108:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800510c:	460b      	mov	r3, r1
 800510e:	4313      	orrs	r3, r2
 8005110:	d01e      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800511a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800511e:	d10c      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005124:	3328      	adds	r3, #40	@ 0x28
 8005126:	2102      	movs	r1, #2
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fb67 	bl	80057fc <RCCEx_PLL3_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800513a:	4b70      	ldr	r3, [pc, #448]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800514a:	4a6c      	ldr	r2, [pc, #432]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800514c:	430b      	orrs	r3, r1
 800514e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800515c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005166:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800516a:	460b      	mov	r3, r1
 800516c:	4313      	orrs	r3, r2
 800516e:	d03e      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800517c:	d022      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800517e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005182:	d81b      	bhi.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518c:	d00b      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800518e:	e015      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	3308      	adds	r3, #8
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fa7d 	bl	8005698 <RCCEx_PLL2_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051a4:	e00f      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051aa:	3328      	adds	r3, #40	@ 0x28
 80051ac:	2102      	movs	r1, #2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fb24 	bl	80057fc <RCCEx_PLL3_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051ba:	e004      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051c2:	e000      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80051c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051ce:	4b4b      	ldr	r3, [pc, #300]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051de:	4a47      	ldr	r2, [pc, #284]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e4:	e003      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80051fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051fc:	2300      	movs	r3, #0
 80051fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005200:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005204:	460b      	mov	r3, r1
 8005206:	4313      	orrs	r3, r2
 8005208:	d03b      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005216:	d01f      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005218:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800521c:	d818      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800521e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005222:	d003      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005224:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005228:	d007      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800522a:	e011      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522c:	4b33      	ldr	r3, [pc, #204]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	4a32      	ldr	r2, [pc, #200]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005238:	e00f      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523e:	3328      	adds	r3, #40	@ 0x28
 8005240:	2101      	movs	r1, #1
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fada 	bl	80057fc <RCCEx_PLL3_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800524e:	e004      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005262:	4b26      	ldr	r3, [pc, #152]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	4a22      	ldr	r2, [pc, #136]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005274:	430b      	orrs	r3, r1
 8005276:	6553      	str	r3, [r2, #84]	@ 0x54
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800527e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800528e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005290:	2300      	movs	r3, #0
 8005292:	677b      	str	r3, [r7, #116]	@ 0x74
 8005294:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005298:	460b      	mov	r3, r1
 800529a:	4313      	orrs	r3, r2
 800529c:	d034      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ac:	d007      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80052ae:	e011      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b0:	4b12      	ldr	r3, [pc, #72]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	4a11      	ldr	r2, [pc, #68]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052bc:	e00e      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c2:	3308      	adds	r3, #8
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f9e6 	bl	8005698 <RCCEx_PLL2_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052d2:	e003      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10d      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f2:	4a02      	ldr	r2, [pc, #8]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052f4:	430b      	orrs	r3, r1
 80052f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052f8:	e006      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005314:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005316:	2300      	movs	r3, #0
 8005318:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800531a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800531e:	460b      	mov	r3, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	d00c      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005328:	3328      	adds	r3, #40	@ 0x28
 800532a:	2102      	movs	r1, #2
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fa65 	bl	80057fc <RCCEx_PLL3_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800534a:	663b      	str	r3, [r7, #96]	@ 0x60
 800534c:	2300      	movs	r3, #0
 800534e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005350:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005354:	460b      	mov	r3, r1
 8005356:	4313      	orrs	r3, r2
 8005358:	d038      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005366:	d018      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800536c:	d811      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800536e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005372:	d014      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005378:	d80b      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d011      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800537e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005382:	d106      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005384:	4bc3      	ldr	r3, [pc, #780]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4ac2      	ldr	r2, [pc, #776]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800538e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005398:	e004      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80053a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ac:	4bb9      	ldr	r3, [pc, #740]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053bc:	4ab5      	ldr	r2, [pc, #724]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053be:	430b      	orrs	r3, r1
 80053c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80053c2:	e003      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80053d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053da:	2300      	movs	r3, #0
 80053dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053e8:	4baa      	ldr	r3, [pc, #680]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f6:	4aa7      	ldr	r2, [pc, #668]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053f8:	430b      	orrs	r3, r1
 80053fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005408:	653b      	str	r3, [r7, #80]	@ 0x50
 800540a:	2300      	movs	r3, #0
 800540c:	657b      	str	r3, [r7, #84]	@ 0x54
 800540e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005418:	4b9e      	ldr	r3, [pc, #632]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005424:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005428:	4a9a      	ldr	r2, [pc, #616]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800542a:	430b      	orrs	r3, r1
 800542c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800542e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800543a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800543c:	2300      	movs	r3, #0
 800543e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005440:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005444:	460b      	mov	r3, r1
 8005446:	4313      	orrs	r3, r2
 8005448:	d009      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800544a:	4b92      	ldr	r3, [pc, #584]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800544c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005458:	4a8e      	ldr	r2, [pc, #568]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800545a:	430b      	orrs	r3, r1
 800545c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800546a:	643b      	str	r3, [r7, #64]	@ 0x40
 800546c:	2300      	movs	r3, #0
 800546e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005470:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005474:	460b      	mov	r3, r1
 8005476:	4313      	orrs	r3, r2
 8005478:	d00e      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800547a:	4b86      	ldr	r3, [pc, #536]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	4a85      	ldr	r2, [pc, #532]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005480:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005484:	6113      	str	r3, [r2, #16]
 8005486:	4b83      	ldr	r3, [pc, #524]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005488:	6919      	ldr	r1, [r3, #16]
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005492:	4a80      	ldr	r2, [pc, #512]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005494:	430b      	orrs	r3, r1
 8005496:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80054a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054a6:	2300      	movs	r3, #0
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054b4:	4b77      	ldr	r3, [pc, #476]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	4a74      	ldr	r2, [pc, #464]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80054d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d6:	2300      	movs	r3, #0
 80054d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054f4:	4a67      	ldr	r2, [pc, #412]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80054fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	2100      	movs	r1, #0
 8005504:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800550c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d011      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	3308      	adds	r3, #8
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f8ba 	bl	8005698 <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800552a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	2100      	movs	r1, #0
 8005544:	6239      	str	r1, [r7, #32]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
 800554c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d011      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	3308      	adds	r3, #8
 800555c:	2101      	movs	r1, #1
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f89a 	bl	8005698 <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800556a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	2100      	movs	r1, #0
 8005584:	61b9      	str	r1, [r7, #24]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005590:	460b      	mov	r3, r1
 8005592:	4313      	orrs	r3, r2
 8005594:	d011      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559a:	3308      	adds	r3, #8
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f87a 	bl	8005698 <RCCEx_PLL2_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	2100      	movs	r1, #0
 80055c4:	6139      	str	r1, [r7, #16]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055d0:	460b      	mov	r3, r1
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d011      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	3328      	adds	r3, #40	@ 0x28
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f90c 	bl	80057fc <RCCEx_PLL3_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80055ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	2100      	movs	r1, #0
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561a:	3328      	adds	r3, #40	@ 0x28
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f8ec 	bl	80057fc <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800562a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	2100      	movs	r1, #0
 8005644:	6039      	str	r1, [r7, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d011      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3328      	adds	r3, #40	@ 0x28
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f8cc 	bl	80057fc <RCCEx_PLL3_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800566a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800567a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
}
 8005688:	4618      	mov	r0, r3
 800568a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800568e:	46bd      	mov	sp, r7
 8005690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005694:	58024400 	.word	0x58024400

08005698 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056a6:	4b53      	ldr	r3, [pc, #332]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d101      	bne.n	80056b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e099      	b.n	80057ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056b6:	4b4f      	ldr	r3, [pc, #316]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a4e      	ldr	r2, [pc, #312]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c2:	f7fa fedf 	bl	8000484 <HAL_GetTick>
 80056c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056c8:	e008      	b.n	80056dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056ca:	f7fa fedb 	bl	8000484 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e086      	b.n	80057ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056dc:	4b45      	ldr	r3, [pc, #276]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f0      	bne.n	80056ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056e8:	4b42      	ldr	r3, [pc, #264]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	031b      	lsls	r3, r3, #12
 80056f6:	493f      	ldr	r1, [pc, #252]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	3b01      	subs	r3, #1
 8005702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	3b01      	subs	r3, #1
 800570c:	025b      	lsls	r3, r3, #9
 800570e:	b29b      	uxth	r3, r3
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	3b01      	subs	r3, #1
 8005726:	061b      	lsls	r3, r3, #24
 8005728:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800572c:	4931      	ldr	r1, [pc, #196]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005732:	4b30      	ldr	r3, [pc, #192]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	492d      	ldr	r1, [pc, #180]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005744:	4b2b      	ldr	r3, [pc, #172]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	f023 0220 	bic.w	r2, r3, #32
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4928      	ldr	r1, [pc, #160]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005756:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575a:	4a26      	ldr	r2, [pc, #152]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800575c:	f023 0310 	bic.w	r3, r3, #16
 8005760:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005762:	4b24      	ldr	r3, [pc, #144]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005766:	4b24      	ldr	r3, [pc, #144]	@ (80057f8 <RCCEx_PLL2_Config+0x160>)
 8005768:	4013      	ands	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	69d2      	ldr	r2, [r2, #28]
 800576e:	00d2      	lsls	r2, r2, #3
 8005770:	4920      	ldr	r1, [pc, #128]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005776:	4b1f      	ldr	r3, [pc, #124]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	4a1e      	ldr	r2, [pc, #120]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800577c:	f043 0310 	orr.w	r3, r3, #16
 8005780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005788:	4b1a      	ldr	r3, [pc, #104]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800578e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005794:	e00f      	b.n	80057b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800579c:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057a8:	e005      	b.n	80057b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057aa:	4b12      	ldr	r3, [pc, #72]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	4a11      	ldr	r2, [pc, #68]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057b6:	4b0f      	ldr	r3, [pc, #60]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a0e      	ldr	r2, [pc, #56]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c2:	f7fa fe5f 	bl	8000484 <HAL_GetTick>
 80057c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057c8:	e008      	b.n	80057dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057ca:	f7fa fe5b 	bl	8000484 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e006      	b.n	80057ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057dc:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <RCCEx_PLL2_Config+0x15c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
 80057f8:	ffff0007 	.word	0xffff0007

080057fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800580a:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d101      	bne.n	800581a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e099      	b.n	800594e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800581a:	4b4f      	ldr	r3, [pc, #316]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a4e      	ldr	r2, [pc, #312]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fa fe2d 	bl	8000484 <HAL_GetTick>
 800582a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800582c:	e008      	b.n	8005840 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800582e:	f7fa fe29 	bl	8000484 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e086      	b.n	800594e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005840:	4b45      	ldr	r3, [pc, #276]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800584c:	4b42      	ldr	r3, [pc, #264]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	493f      	ldr	r1, [pc, #252]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	3b01      	subs	r3, #1
 8005866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	025b      	lsls	r3, r3, #9
 8005872:	b29b      	uxth	r3, r3
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	3b01      	subs	r3, #1
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005890:	4931      	ldr	r1, [pc, #196]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005896:	4b30      	ldr	r3, [pc, #192]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	492d      	ldr	r1, [pc, #180]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	4928      	ldr	r1, [pc, #160]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058ba:	4b27      	ldr	r3, [pc, #156]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4a26      	ldr	r2, [pc, #152]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058c6:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ca:	4b24      	ldr	r3, [pc, #144]	@ (800595c <RCCEx_PLL3_Config+0x160>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	69d2      	ldr	r2, [r2, #28]
 80058d2:	00d2      	lsls	r2, r2, #3
 80058d4:	4920      	ldr	r1, [pc, #128]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058da:	4b1f      	ldr	r3, [pc, #124]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	4a19      	ldr	r2, [pc, #100]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 80058f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058f8:	e00f      	b.n	800591a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005900:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	4a14      	ldr	r2, [pc, #80]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005906:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800590a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800590c:	e005      	b.n	800591a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800590e:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005914:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005918:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0e      	ldr	r2, [pc, #56]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005926:	f7fa fdad 	bl	8000484 <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800592e:	f7fa fda9 	bl	8000484 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <RCCEx_PLL3_Config+0x15c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	58024400 	.word	0x58024400
 800595c:	ffff0007 	.word	0xffff0007

08005960 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e10f      	b.n	8005b92 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a87      	ldr	r2, [pc, #540]	@ (8005b9c <HAL_SPI_Init+0x23c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <HAL_SPI_Init+0x42>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a86      	ldr	r2, [pc, #536]	@ (8005ba0 <HAL_SPI_Init+0x240>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00a      	beq.n	80059a2 <HAL_SPI_Init+0x42>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a84      	ldr	r2, [pc, #528]	@ (8005ba4 <HAL_SPI_Init+0x244>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d005      	beq.n	80059a2 <HAL_SPI_Init+0x42>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b0f      	cmp	r3, #15
 800599c:	d901      	bls.n	80059a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0f7      	b.n	8005b92 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fe2e 	bl	8006604 <SPI_GetPacketSize>
 80059a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a7b      	ldr	r2, [pc, #492]	@ (8005b9c <HAL_SPI_Init+0x23c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00c      	beq.n	80059ce <HAL_SPI_Init+0x6e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a79      	ldr	r2, [pc, #484]	@ (8005ba0 <HAL_SPI_Init+0x240>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <HAL_SPI_Init+0x6e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a78      	ldr	r2, [pc, #480]	@ (8005ba4 <HAL_SPI_Init+0x244>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d002      	beq.n	80059ce <HAL_SPI_Init+0x6e>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d811      	bhi.n	80059f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059d2:	4a72      	ldr	r2, [pc, #456]	@ (8005b9c <HAL_SPI_Init+0x23c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a70      	ldr	r2, [pc, #448]	@ (8005ba0 <HAL_SPI_Init+0x240>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_SPI_Init+0x8c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6f      	ldr	r2, [pc, #444]	@ (8005ba4 <HAL_SPI_Init+0x244>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d104      	bne.n	80059f6 <HAL_SPI_Init+0x96>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d901      	bls.n	80059f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0cd      	b.n	8005b92 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f007 fe8c 	bl	800d728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005a32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a3c:	d119      	bne.n	8005a72 <HAL_SPI_Init+0x112>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a46:	d103      	bne.n	8005a50 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10c      	bne.n	8005a72 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a60:	d107      	bne.n	8005a72 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00f      	beq.n	8005a9e <HAL_SPI_Init+0x13e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d90b      	bls.n	8005a9e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e007      	b.n	8005aae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	ea42 0103 	orr.w	r1, r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0e:	ea42 0103 	orr.w	r1, r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d113      	bne.n	8005b4e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40013000 	.word	0x40013000
 8005ba0:	40003800 	.word	0x40003800
 8005ba4:	40003c00 	.word	0x40003c00

08005ba8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3320      	adds	r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc0:	f7fa fc60 	bl	8000484 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d001      	beq.n	8005bd6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e1d1      	b.n	8005f7a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_Transmit+0x3a>
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e1c9      	b.n	8005f7a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_SPI_Transmit+0x4c>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e1c2      	b.n	8005f7a <HAL_SPI_Transmit+0x3d2>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005c4c:	d108      	bne.n	8005c60 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	e009      	b.n	8005c74 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005c72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	4b96      	ldr	r3, [pc, #600]	@ (8005ed4 <HAL_SPI_Transmit+0x32c>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	88f9      	ldrh	r1, [r7, #6]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ca0:	d107      	bne.n	8005cb2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d947      	bls.n	8005d4a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005cba:	e03f      	b.n	8005d3c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d114      	bne.n	8005cf4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005cf2:	e023      	b.n	8005d3c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf4:	f7fa fbc6 	bl	8000484 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d803      	bhi.n	8005d0c <HAL_SPI_Transmit+0x164>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d102      	bne.n	8005d12 <HAL_SPI_Transmit+0x16a>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d114      	bne.n	8005d3c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fba8 	bl	8006468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e11e      	b.n	8005f7a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1b9      	bne.n	8005cbc <HAL_SPI_Transmit+0x114>
 8005d48:	e0f1      	b.n	8005f2e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b07      	cmp	r3, #7
 8005d50:	f240 80e6 	bls.w	8005f20 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005d54:	e05d      	b.n	8005e12 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d132      	bne.n	8005dca <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d918      	bls.n	8005da2 <HAL_SPI_Transmit+0x1fa>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d014      	beq.n	8005da2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d88:	1d1a      	adds	r2, r3, #4
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b02      	subs	r3, #2
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005da0:	e037      	b.n	8005e12 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da6:	881a      	ldrh	r2, [r3, #0]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005dc8:	e023      	b.n	8005e12 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dca:	f7fa fb5b 	bl	8000484 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d803      	bhi.n	8005de2 <HAL_SPI_Transmit+0x23a>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Transmit+0x240>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d114      	bne.n	8005e12 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fb3d 	bl	8006468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e0b3      	b.n	8005f7a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d19b      	bne.n	8005d56 <HAL_SPI_Transmit+0x1ae>
 8005e1e:	e086      	b.n	8005f2e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d154      	bne.n	8005ed8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d918      	bls.n	8005e6c <HAL_SPI_Transmit+0x2c4>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3e:	2b40      	cmp	r3, #64	@ 0x40
 8005e40:	d914      	bls.n	8005e6c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b04      	subs	r3, #4
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e6a:	e059      	b.n	8005f20 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d917      	bls.n	8005ea8 <HAL_SPI_Transmit+0x300>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d013      	beq.n	8005ea8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e84:	881a      	ldrh	r2, [r3, #0]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8e:	1c9a      	adds	r2, r3, #2
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b02      	subs	r3, #2
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005ea6:	e03b      	b.n	8005f20 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3320      	adds	r3, #32
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005ed2:	e025      	b.n	8005f20 <HAL_SPI_Transmit+0x378>
 8005ed4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed8:	f7fa fad4 	bl	8000484 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d803      	bhi.n	8005ef0 <HAL_SPI_Transmit+0x348>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d102      	bne.n	8005ef6 <HAL_SPI_Transmit+0x34e>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d114      	bne.n	8005f20 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fab6 	bl	8006468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e02c      	b.n	8005f7a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f47f af79 	bne.w	8005e20 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2200      	movs	r2, #0
 8005f36:	2108      	movs	r1, #8
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fb35 	bl	80065a8 <SPI_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fa87 	bl	8006468 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop

08005f84 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3330      	adds	r3, #48	@ 0x30
 8005fa6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa8:	f7fa fa6c 	bl	8000484 <HAL_GetTick>
 8005fac:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d001      	beq.n	8005fbe <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e250      	b.n	8006460 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_SPI_Receive+0x46>
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e248      	b.n	8006460 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_SPI_Receive+0x58>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e241      	b.n	8006460 <HAL_SPI_Receive+0x4dc>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006034:	d108      	bne.n	8006048 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e009      	b.n	800605c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800605a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	4b95      	ldr	r3, [pc, #596]	@ (80062b8 <HAL_SPI_Receive+0x334>)
 8006064:	4013      	ands	r3, r2
 8006066:	88f9      	ldrh	r1, [r7, #6]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	430b      	orrs	r3, r1
 800606e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006088:	d107      	bne.n	800609a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	2b0f      	cmp	r3, #15
 80060a0:	d96c      	bls.n	800617c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80060a2:	e064      	b.n	800616e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d114      	bne.n	80060e4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060ca:	1d1a      	adds	r2, r3, #4
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80060e2:	e044      	b.n	800616e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8bfa      	ldrh	r2, [r7, #30]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d919      	bls.n	8006126 <HAL_SPI_Receive+0x1a2>
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d014      	beq.n	8006126 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006104:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006106:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006124:	e023      	b.n	800616e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006126:	f7fa f9ad 	bl	8000484 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d803      	bhi.n	800613e <HAL_SPI_Receive+0x1ba>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d102      	bne.n	8006144 <HAL_SPI_Receive+0x1c0>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d114      	bne.n	800616e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f98f 	bl	8006468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006150:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e178      	b.n	8006460 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d194      	bne.n	80060a4 <HAL_SPI_Receive+0x120>
 800617a:	e15e      	b.n	800643a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b07      	cmp	r3, #7
 8006182:	f240 8153 	bls.w	800642c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006186:	e08f      	b.n	80062a8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d114      	bne.n	80061c8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	8812      	ldrh	r2, [r2, #0]
 80061a6:	b292      	uxth	r2, r2
 80061a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ae:	1c9a      	adds	r2, r3, #2
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061c6:	e06f      	b.n	80062a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	8bfa      	ldrh	r2, [r7, #30]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d924      	bls.n	8006220 <HAL_SPI_Receive+0x29c>
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01f      	beq.n	8006220 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	b292      	uxth	r2, r2
 80061ea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	8812      	ldrh	r2, [r2, #0]
 80061fe:	b292      	uxth	r2, r2
 8006200:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b02      	subs	r3, #2
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800621e:	e043      	b.n	80062a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d119      	bne.n	8006260 <HAL_SPI_Receive+0x2dc>
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d014      	beq.n	8006260 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	8812      	ldrh	r2, [r2, #0]
 800623e:	b292      	uxth	r2, r2
 8006240:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800625e:	e023      	b.n	80062a8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006260:	f7fa f910 	bl	8000484 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d803      	bhi.n	8006278 <HAL_SPI_Receive+0x2f4>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d102      	bne.n	800627e <HAL_SPI_Receive+0x2fa>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d114      	bne.n	80062a8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f8f2 	bl	8006468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800628a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e0db      	b.n	8006460 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f af69 	bne.w	8006188 <HAL_SPI_Receive+0x204>
 80062b6:	e0c0      	b.n	800643a <HAL_SPI_Receive+0x4b6>
 80062b8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d117      	bne.n	8006302 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006300:	e094      	b.n	800642c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006308:	b29b      	uxth	r3, r3
 800630a:	8bfa      	ldrh	r2, [r7, #30]
 800630c:	429a      	cmp	r2, r3
 800630e:	d946      	bls.n	800639e <HAL_SPI_Receive+0x41a>
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d041      	beq.n	800639e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006326:	7812      	ldrb	r2, [r2, #0]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b04      	subs	r3, #4
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800639c:	e046      	b.n	800642c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d81c      	bhi.n	80063e4 <HAL_SPI_Receive+0x460>
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063c0:	7812      	ldrb	r2, [r2, #0]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80063e2:	e023      	b.n	800642c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e4:	f7fa f84e 	bl	8000484 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d803      	bhi.n	80063fc <HAL_SPI_Receive+0x478>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d102      	bne.n	8006402 <HAL_SPI_Receive+0x47e>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d114      	bne.n	800642c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f830 	bl	8006468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800640e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e019      	b.n	8006460 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	f47f af41 	bne.w	80062bc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f814 	bl	8006468 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800645e:	2300      	movs	r3, #0
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0208 	orr.w	r2, r2, #8
 8006486:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0210 	orr.w	r2, r2, #16
 8006496:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6919      	ldr	r1, [r3, #16]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b3c      	ldr	r3, [pc, #240]	@ (80065a4 <SPI_CloseTransfer+0x13c>)
 80064b4:	400b      	ands	r3, r1
 80064b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80064c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d014      	beq.n	80064fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00f      	beq.n	80064fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0220 	orr.w	r2, r2, #32
 80064fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b03      	cmp	r3, #3
 8006508:	d014      	beq.n	8006534 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00f      	beq.n	8006534 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651a:	f043 0204 	orr.w	r2, r3, #4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006532:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00f      	beq.n	800655e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006544:	f043 0201 	orr.w	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800655c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00f      	beq.n	8006588 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800656e:	f043 0208 	orr.w	r2, r3, #8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006586:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	fffffc90 	.word	0xfffffc90

080065a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80065b8:	e010      	b.n	80065dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ba:	f7f9 ff63 	bl	8000484 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d803      	bhi.n	80065d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d102      	bne.n	80065d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e00f      	b.n	80065fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4013      	ands	r3, r2
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d0df      	beq.n	80065ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	3307      	adds	r3, #7
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	fb02 f303 	mul.w	r3, r2, r3
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e049      	b.n	80066e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f007 fbcf 	bl	800de04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 fd59 	bl	8007130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e054      	b.n	80067aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0201 	orr.w	r2, r2, #1
 8006716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a26      	ldr	r2, [pc, #152]	@ (80067b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d022      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x80>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800672a:	d01d      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x80>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a22      	ldr	r2, [pc, #136]	@ (80067bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d018      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x80>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a21      	ldr	r2, [pc, #132]	@ (80067c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x80>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1f      	ldr	r2, [pc, #124]	@ (80067c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00e      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x80>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1e      	ldr	r2, [pc, #120]	@ (80067c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d009      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x80>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <HAL_TIM_Base_Start_IT+0xe4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x80>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1b      	ldr	r2, [pc, #108]	@ (80067d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d115      	bne.n	8006794 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	4b19      	ldr	r3, [pc, #100]	@ (80067d4 <HAL_TIM_Base_Start_IT+0xec>)
 8006770:	4013      	ands	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b06      	cmp	r3, #6
 8006778:	d015      	beq.n	80067a6 <HAL_TIM_Base_Start_IT+0xbe>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006780:	d011      	beq.n	80067a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006792:	e008      	b.n	80067a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e000      	b.n	80067a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40001800 	.word	0x40001800
 80067d0:	40014000 	.word	0x40014000
 80067d4:	00010007 	.word	0x00010007

080067d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e049      	b.n	800687e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f841 	bl	8006886 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f000 fc8a 	bl	8007130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <HAL_TIM_PWM_Start+0x24>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	e03c      	b.n	800693a <HAL_TIM_PWM_Start+0x9e>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d109      	bne.n	80068da <HAL_TIM_PWM_Start+0x3e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	e02f      	b.n	800693a <HAL_TIM_PWM_Start+0x9e>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d109      	bne.n	80068f4 <HAL_TIM_PWM_Start+0x58>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	e022      	b.n	800693a <HAL_TIM_PWM_Start+0x9e>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b0c      	cmp	r3, #12
 80068f8:	d109      	bne.n	800690e <HAL_TIM_PWM_Start+0x72>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	bf14      	ite	ne
 8006906:	2301      	movne	r3, #1
 8006908:	2300      	moveq	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	e015      	b.n	800693a <HAL_TIM_PWM_Start+0x9e>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b10      	cmp	r3, #16
 8006912:	d109      	bne.n	8006928 <HAL_TIM_PWM_Start+0x8c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e008      	b.n	800693a <HAL_TIM_PWM_Start+0x9e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	bf14      	ite	ne
 8006934:	2301      	movne	r3, #1
 8006936:	2300      	moveq	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e0a1      	b.n	8006a86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <HAL_TIM_PWM_Start+0xb6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006950:	e023      	b.n	800699a <HAL_TIM_PWM_Start+0xfe>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b04      	cmp	r3, #4
 8006956:	d104      	bne.n	8006962 <HAL_TIM_PWM_Start+0xc6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006960:	e01b      	b.n	800699a <HAL_TIM_PWM_Start+0xfe>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d104      	bne.n	8006972 <HAL_TIM_PWM_Start+0xd6>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006970:	e013      	b.n	800699a <HAL_TIM_PWM_Start+0xfe>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b0c      	cmp	r3, #12
 8006976:	d104      	bne.n	8006982 <HAL_TIM_PWM_Start+0xe6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006980:	e00b      	b.n	800699a <HAL_TIM_PWM_Start+0xfe>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b10      	cmp	r3, #16
 8006986:	d104      	bne.n	8006992 <HAL_TIM_PWM_Start+0xf6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006990:	e003      	b.n	800699a <HAL_TIM_PWM_Start+0xfe>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2201      	movs	r2, #1
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 ffde 	bl	8007964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a38      	ldr	r2, [pc, #224]	@ (8006a90 <HAL_TIM_PWM_Start+0x1f4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <HAL_TIM_PWM_Start+0x13e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a37      	ldr	r2, [pc, #220]	@ (8006a94 <HAL_TIM_PWM_Start+0x1f8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00e      	beq.n	80069da <HAL_TIM_PWM_Start+0x13e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a35      	ldr	r2, [pc, #212]	@ (8006a98 <HAL_TIM_PWM_Start+0x1fc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_TIM_PWM_Start+0x13e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a34      	ldr	r2, [pc, #208]	@ (8006a9c <HAL_TIM_PWM_Start+0x200>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_TIM_PWM_Start+0x13e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a32      	ldr	r2, [pc, #200]	@ (8006aa0 <HAL_TIM_PWM_Start+0x204>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d101      	bne.n	80069de <HAL_TIM_PWM_Start+0x142>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <HAL_TIM_PWM_Start+0x144>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a25      	ldr	r2, [pc, #148]	@ (8006a90 <HAL_TIM_PWM_Start+0x1f4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_TIM_PWM_Start+0x1a8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a06:	d01d      	beq.n	8006a44 <HAL_TIM_PWM_Start+0x1a8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a25      	ldr	r2, [pc, #148]	@ (8006aa4 <HAL_TIM_PWM_Start+0x208>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_TIM_PWM_Start+0x1a8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a24      	ldr	r2, [pc, #144]	@ (8006aa8 <HAL_TIM_PWM_Start+0x20c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_TIM_PWM_Start+0x1a8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <HAL_TIM_PWM_Start+0x210>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_TIM_PWM_Start+0x1a8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8006a94 <HAL_TIM_PWM_Start+0x1f8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_TIM_PWM_Start+0x1a8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab0 <HAL_TIM_PWM_Start+0x214>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_PWM_Start+0x1a8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a16      	ldr	r2, [pc, #88]	@ (8006a98 <HAL_TIM_PWM_Start+0x1fc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d115      	bne.n	8006a70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab4 <HAL_TIM_PWM_Start+0x218>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d015      	beq.n	8006a82 <HAL_TIM_PWM_Start+0x1e6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a5c:	d011      	beq.n	8006a82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	e008      	b.n	8006a82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e000      	b.n	8006a84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40010400 	.word	0x40010400
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40001800 	.word	0x40001800
 8006ab4:	00010007 	.word	0x00010007

08006ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d020      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0202 	mvn.w	r2, #2
 8006aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 faf6 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006b08:	e005      	b.n	8006b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fae8 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 faf9 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d020      	beq.n	8006b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0204 	mvn.w	r2, #4
 8006b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fad0 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fac2 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fad3 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0208 	mvn.w	r2, #8
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 faaa 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa9c 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 faad 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d020      	beq.n	8006c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01b      	beq.n	8006c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0210 	mvn.w	r2, #16
 8006bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa84 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006bec:	e005      	b.n	8006bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa76 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fa87 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0201 	mvn.w	r2, #1
 8006c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f006 fc88 	bl	800d534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00c      	beq.n	8006c52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d007      	beq.n	8006c52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f887 	bl	8007d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00c      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f87f 	bl	8007d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fa41 	bl	800711c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00c      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f06f 0220 	mvn.w	r2, #32
 8006cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 f847 	bl	8007d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e0ff      	b.n	8006ee6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b14      	cmp	r3, #20
 8006cf2:	f200 80f0 	bhi.w	8006ed6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d51 	.word	0x08006d51
 8006d00:	08006ed7 	.word	0x08006ed7
 8006d04:	08006ed7 	.word	0x08006ed7
 8006d08:	08006ed7 	.word	0x08006ed7
 8006d0c:	08006d91 	.word	0x08006d91
 8006d10:	08006ed7 	.word	0x08006ed7
 8006d14:	08006ed7 	.word	0x08006ed7
 8006d18:	08006ed7 	.word	0x08006ed7
 8006d1c:	08006dd3 	.word	0x08006dd3
 8006d20:	08006ed7 	.word	0x08006ed7
 8006d24:	08006ed7 	.word	0x08006ed7
 8006d28:	08006ed7 	.word	0x08006ed7
 8006d2c:	08006e13 	.word	0x08006e13
 8006d30:	08006ed7 	.word	0x08006ed7
 8006d34:	08006ed7 	.word	0x08006ed7
 8006d38:	08006ed7 	.word	0x08006ed7
 8006d3c:	08006e55 	.word	0x08006e55
 8006d40:	08006ed7 	.word	0x08006ed7
 8006d44:	08006ed7 	.word	0x08006ed7
 8006d48:	08006ed7 	.word	0x08006ed7
 8006d4c:	08006e95 	.word	0x08006e95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fa90 	bl	800727c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0208 	orr.w	r2, r2, #8
 8006d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0204 	bic.w	r2, r2, #4
 8006d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6999      	ldr	r1, [r3, #24]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	619a      	str	r2, [r3, #24]
      break;
 8006d8e:	e0a5      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fb00 	bl	800739c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6999      	ldr	r1, [r3, #24]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	021a      	lsls	r2, r3, #8
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	619a      	str	r2, [r3, #24]
      break;
 8006dd0:	e084      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fb69 	bl	80074b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0208 	orr.w	r2, r2, #8
 8006dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0204 	bic.w	r2, r2, #4
 8006dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69d9      	ldr	r1, [r3, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	61da      	str	r2, [r3, #28]
      break;
 8006e10:	e064      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fbd1 	bl	80075c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69d9      	ldr	r1, [r3, #28]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	021a      	lsls	r2, r3, #8
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	61da      	str	r2, [r3, #28]
      break;
 8006e52:	e043      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fc1a 	bl	8007694 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0208 	orr.w	r2, r2, #8
 8006e6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0204 	bic.w	r2, r2, #4
 8006e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e92:	e023      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fc5e 	bl	800775c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	021a      	lsls	r2, r3, #8
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ed4:	e002      	b.n	8006edc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop

08006ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e0dc      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x1d6>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	4b6a      	ldr	r3, [pc, #424]	@ (80070d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a64      	ldr	r2, [pc, #400]	@ (80070d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	f000 80a9 	beq.w	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f48:	4a62      	ldr	r2, [pc, #392]	@ (80070d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	f200 80ae 	bhi.w	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006f50:	4a61      	ldr	r2, [pc, #388]	@ (80070d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	f000 80a1 	beq.w	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f58:	4a5f      	ldr	r2, [pc, #380]	@ (80070d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	f200 80a6 	bhi.w	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006f60:	4a5e      	ldr	r2, [pc, #376]	@ (80070dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	f000 8099 	beq.w	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f68:	4a5c      	ldr	r2, [pc, #368]	@ (80070dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	f200 809e 	bhi.w	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006f70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f74:	f000 8091 	beq.w	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f7c:	f200 8096 	bhi.w	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f84:	f000 8089 	beq.w	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f8c:	f200 808e 	bhi.w	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f94:	d03e      	beq.n	8007014 <HAL_TIM_ConfigClockSource+0x124>
 8006f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9a:	f200 8087 	bhi.w	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa2:	f000 8086 	beq.w	80070b2 <HAL_TIM_ConfigClockSource+0x1c2>
 8006fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006faa:	d87f      	bhi.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006fac:	2b70      	cmp	r3, #112	@ 0x70
 8006fae:	d01a      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0xf6>
 8006fb0:	2b70      	cmp	r3, #112	@ 0x70
 8006fb2:	d87b      	bhi.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006fb4:	2b60      	cmp	r3, #96	@ 0x60
 8006fb6:	d050      	beq.n	800705a <HAL_TIM_ConfigClockSource+0x16a>
 8006fb8:	2b60      	cmp	r3, #96	@ 0x60
 8006fba:	d877      	bhi.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006fbc:	2b50      	cmp	r3, #80	@ 0x50
 8006fbe:	d03c      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x14a>
 8006fc0:	2b50      	cmp	r3, #80	@ 0x50
 8006fc2:	d873      	bhi.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006fc4:	2b40      	cmp	r3, #64	@ 0x40
 8006fc6:	d058      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x18a>
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d86f      	bhi.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006fcc:	2b30      	cmp	r3, #48	@ 0x30
 8006fce:	d064      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006fd0:	2b30      	cmp	r3, #48	@ 0x30
 8006fd2:	d86b      	bhi.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006fd4:	2b20      	cmp	r3, #32
 8006fd6:	d060      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d867      	bhi.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d05c      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d05a      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x1aa>
 8006fe4:	e062      	b.n	80070ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ff6:	f000 fc95 	bl	8007924 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	609a      	str	r2, [r3, #8]
      break;
 8007012:	e04f      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007024:	f000 fc7e 	bl	8007924 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007036:	609a      	str	r2, [r3, #8]
      break;
 8007038:	e03c      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007046:	461a      	mov	r2, r3
 8007048:	f000 fbee 	bl	8007828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2150      	movs	r1, #80	@ 0x50
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fc48 	bl	80078e8 <TIM_ITRx_SetConfig>
      break;
 8007058:	e02c      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007066:	461a      	mov	r2, r3
 8007068:	f000 fc0d 	bl	8007886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2160      	movs	r1, #96	@ 0x60
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fc38 	bl	80078e8 <TIM_ITRx_SetConfig>
      break;
 8007078:	e01c      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007086:	461a      	mov	r2, r3
 8007088:	f000 fbce 	bl	8007828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2140      	movs	r1, #64	@ 0x40
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fc28 	bl	80078e8 <TIM_ITRx_SetConfig>
      break;
 8007098:	e00c      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f000 fc1f 	bl	80078e8 <TIM_ITRx_SetConfig>
      break;
 80070aa:	e003      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	73fb      	strb	r3, [r7, #15]
      break;
 80070b0:	e000      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80070b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	ffceff88 	.word	0xffceff88
 80070d4:	00100040 	.word	0x00100040
 80070d8:	00100030 	.word	0x00100030
 80070dc:	00100020 	.word	0x00100020

080070e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a46      	ldr	r2, [pc, #280]	@ (800725c <TIM_Base_SetConfig+0x12c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d013      	beq.n	8007170 <TIM_Base_SetConfig+0x40>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714e:	d00f      	beq.n	8007170 <TIM_Base_SetConfig+0x40>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a43      	ldr	r2, [pc, #268]	@ (8007260 <TIM_Base_SetConfig+0x130>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00b      	beq.n	8007170 <TIM_Base_SetConfig+0x40>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a42      	ldr	r2, [pc, #264]	@ (8007264 <TIM_Base_SetConfig+0x134>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d007      	beq.n	8007170 <TIM_Base_SetConfig+0x40>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a41      	ldr	r2, [pc, #260]	@ (8007268 <TIM_Base_SetConfig+0x138>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d003      	beq.n	8007170 <TIM_Base_SetConfig+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a40      	ldr	r2, [pc, #256]	@ (800726c <TIM_Base_SetConfig+0x13c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d108      	bne.n	8007182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a35      	ldr	r2, [pc, #212]	@ (800725c <TIM_Base_SetConfig+0x12c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d01f      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007190:	d01b      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a32      	ldr	r2, [pc, #200]	@ (8007260 <TIM_Base_SetConfig+0x130>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d017      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a31      	ldr	r2, [pc, #196]	@ (8007264 <TIM_Base_SetConfig+0x134>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d013      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a30      	ldr	r2, [pc, #192]	@ (8007268 <TIM_Base_SetConfig+0x138>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00f      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2f      	ldr	r2, [pc, #188]	@ (800726c <TIM_Base_SetConfig+0x13c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00b      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007270 <TIM_Base_SetConfig+0x140>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d007      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007274 <TIM_Base_SetConfig+0x144>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d003      	beq.n	80071ca <TIM_Base_SetConfig+0x9a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007278 <TIM_Base_SetConfig+0x148>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d108      	bne.n	80071dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a16      	ldr	r2, [pc, #88]	@ (800725c <TIM_Base_SetConfig+0x12c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00f      	beq.n	8007228 <TIM_Base_SetConfig+0xf8>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a18      	ldr	r2, [pc, #96]	@ (800726c <TIM_Base_SetConfig+0x13c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00b      	beq.n	8007228 <TIM_Base_SetConfig+0xf8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a17      	ldr	r2, [pc, #92]	@ (8007270 <TIM_Base_SetConfig+0x140>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d007      	beq.n	8007228 <TIM_Base_SetConfig+0xf8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a16      	ldr	r2, [pc, #88]	@ (8007274 <TIM_Base_SetConfig+0x144>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_Base_SetConfig+0xf8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a15      	ldr	r2, [pc, #84]	@ (8007278 <TIM_Base_SetConfig+0x148>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d103      	bne.n	8007230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d105      	bne.n	800724e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f023 0201 	bic.w	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	611a      	str	r2, [r3, #16]
  }
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40010400 	.word	0x40010400
 8007270:	40014000 	.word	0x40014000
 8007274:	40014400 	.word	0x40014400
 8007278:	40014800 	.word	0x40014800

0800727c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f023 0201 	bic.w	r2, r3, #1
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4b37      	ldr	r3, [pc, #220]	@ (8007384 <TIM_OC1_SetConfig+0x108>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0303 	bic.w	r3, r3, #3
 80072b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 0302 	bic.w	r3, r3, #2
 80072c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007388 <TIM_OC1_SetConfig+0x10c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00f      	beq.n	80072f8 <TIM_OC1_SetConfig+0x7c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2c      	ldr	r2, [pc, #176]	@ (800738c <TIM_OC1_SetConfig+0x110>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00b      	beq.n	80072f8 <TIM_OC1_SetConfig+0x7c>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007390 <TIM_OC1_SetConfig+0x114>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d007      	beq.n	80072f8 <TIM_OC1_SetConfig+0x7c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007394 <TIM_OC1_SetConfig+0x118>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d003      	beq.n	80072f8 <TIM_OC1_SetConfig+0x7c>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a29      	ldr	r2, [pc, #164]	@ (8007398 <TIM_OC1_SetConfig+0x11c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d10c      	bne.n	8007312 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f023 0308 	bic.w	r3, r3, #8
 80072fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f023 0304 	bic.w	r3, r3, #4
 8007310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <TIM_OC1_SetConfig+0x10c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00f      	beq.n	800733a <TIM_OC1_SetConfig+0xbe>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a1b      	ldr	r2, [pc, #108]	@ (800738c <TIM_OC1_SetConfig+0x110>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00b      	beq.n	800733a <TIM_OC1_SetConfig+0xbe>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a1a      	ldr	r2, [pc, #104]	@ (8007390 <TIM_OC1_SetConfig+0x114>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d007      	beq.n	800733a <TIM_OC1_SetConfig+0xbe>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a19      	ldr	r2, [pc, #100]	@ (8007394 <TIM_OC1_SetConfig+0x118>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d003      	beq.n	800733a <TIM_OC1_SetConfig+0xbe>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <TIM_OC1_SetConfig+0x11c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d111      	bne.n	800735e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	621a      	str	r2, [r3, #32]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	fffeff8f 	.word	0xfffeff8f
 8007388:	40010000 	.word	0x40010000
 800738c:	40010400 	.word	0x40010400
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800

0800739c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	f023 0210 	bic.w	r2, r3, #16
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4b34      	ldr	r3, [pc, #208]	@ (8007498 <TIM_OC2_SetConfig+0xfc>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0320 	bic.w	r3, r3, #32
 80073e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a29      	ldr	r2, [pc, #164]	@ (800749c <TIM_OC2_SetConfig+0x100>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_OC2_SetConfig+0x68>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a28      	ldr	r2, [pc, #160]	@ (80074a0 <TIM_OC2_SetConfig+0x104>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d10d      	bne.n	8007420 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800740a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800741e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1e      	ldr	r2, [pc, #120]	@ (800749c <TIM_OC2_SetConfig+0x100>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00f      	beq.n	8007448 <TIM_OC2_SetConfig+0xac>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1d      	ldr	r2, [pc, #116]	@ (80074a0 <TIM_OC2_SetConfig+0x104>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00b      	beq.n	8007448 <TIM_OC2_SetConfig+0xac>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1c      	ldr	r2, [pc, #112]	@ (80074a4 <TIM_OC2_SetConfig+0x108>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d007      	beq.n	8007448 <TIM_OC2_SetConfig+0xac>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a1b      	ldr	r2, [pc, #108]	@ (80074a8 <TIM_OC2_SetConfig+0x10c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <TIM_OC2_SetConfig+0xac>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a1a      	ldr	r2, [pc, #104]	@ (80074ac <TIM_OC2_SetConfig+0x110>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d113      	bne.n	8007470 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800744e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	621a      	str	r2, [r3, #32]
}
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	feff8fff 	.word	0xfeff8fff
 800749c:	40010000 	.word	0x40010000
 80074a0:	40010400 	.word	0x40010400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800

080074b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4b33      	ldr	r3, [pc, #204]	@ (80075a8 <TIM_OC3_SetConfig+0xf8>)
 80074dc:	4013      	ands	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0303 	bic.w	r3, r3, #3
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a28      	ldr	r2, [pc, #160]	@ (80075ac <TIM_OC3_SetConfig+0xfc>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d003      	beq.n	8007516 <TIM_OC3_SetConfig+0x66>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a27      	ldr	r2, [pc, #156]	@ (80075b0 <TIM_OC3_SetConfig+0x100>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d10d      	bne.n	8007532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800751c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a1d      	ldr	r2, [pc, #116]	@ (80075ac <TIM_OC3_SetConfig+0xfc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00f      	beq.n	800755a <TIM_OC3_SetConfig+0xaa>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a1c      	ldr	r2, [pc, #112]	@ (80075b0 <TIM_OC3_SetConfig+0x100>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <TIM_OC3_SetConfig+0xaa>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a1b      	ldr	r2, [pc, #108]	@ (80075b4 <TIM_OC3_SetConfig+0x104>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <TIM_OC3_SetConfig+0xaa>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a1a      	ldr	r2, [pc, #104]	@ (80075b8 <TIM_OC3_SetConfig+0x108>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_OC3_SetConfig+0xaa>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a19      	ldr	r2, [pc, #100]	@ (80075bc <TIM_OC3_SetConfig+0x10c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d113      	bne.n	8007582 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	621a      	str	r2, [r3, #32]
}
 800759c:	bf00      	nop
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	fffeff8f 	.word	0xfffeff8f
 80075ac:	40010000 	.word	0x40010000
 80075b0:	40010400 	.word	0x40010400
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40014400 	.word	0x40014400
 80075bc:	40014800 	.word	0x40014800

080075c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4b24      	ldr	r3, [pc, #144]	@ (800767c <TIM_OC4_SetConfig+0xbc>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800760a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	031b      	lsls	r3, r3, #12
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a19      	ldr	r2, [pc, #100]	@ (8007680 <TIM_OC4_SetConfig+0xc0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00f      	beq.n	8007640 <TIM_OC4_SetConfig+0x80>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a18      	ldr	r2, [pc, #96]	@ (8007684 <TIM_OC4_SetConfig+0xc4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00b      	beq.n	8007640 <TIM_OC4_SetConfig+0x80>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a17      	ldr	r2, [pc, #92]	@ (8007688 <TIM_OC4_SetConfig+0xc8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <TIM_OC4_SetConfig+0x80>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a16      	ldr	r2, [pc, #88]	@ (800768c <TIM_OC4_SetConfig+0xcc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC4_SetConfig+0x80>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a15      	ldr	r2, [pc, #84]	@ (8007690 <TIM_OC4_SetConfig+0xd0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d109      	bne.n	8007654 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	019b      	lsls	r3, r3, #6
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	feff8fff 	.word	0xfeff8fff
 8007680:	40010000 	.word	0x40010000
 8007684:	40010400 	.word	0x40010400
 8007688:	40014000 	.word	0x40014000
 800768c:	40014400 	.word	0x40014400
 8007690:	40014800 	.word	0x40014800

08007694 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4b21      	ldr	r3, [pc, #132]	@ (8007744 <TIM_OC5_SetConfig+0xb0>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80076d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	041b      	lsls	r3, r3, #16
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a18      	ldr	r2, [pc, #96]	@ (8007748 <TIM_OC5_SetConfig+0xb4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00f      	beq.n	800770a <TIM_OC5_SetConfig+0x76>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a17      	ldr	r2, [pc, #92]	@ (800774c <TIM_OC5_SetConfig+0xb8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d00b      	beq.n	800770a <TIM_OC5_SetConfig+0x76>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a16      	ldr	r2, [pc, #88]	@ (8007750 <TIM_OC5_SetConfig+0xbc>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d007      	beq.n	800770a <TIM_OC5_SetConfig+0x76>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a15      	ldr	r2, [pc, #84]	@ (8007754 <TIM_OC5_SetConfig+0xc0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d003      	beq.n	800770a <TIM_OC5_SetConfig+0x76>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a14      	ldr	r2, [pc, #80]	@ (8007758 <TIM_OC5_SetConfig+0xc4>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d109      	bne.n	800771e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	621a      	str	r2, [r3, #32]
}
 8007738:	bf00      	nop
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	fffeff8f 	.word	0xfffeff8f
 8007748:	40010000 	.word	0x40010000
 800774c:	40010400 	.word	0x40010400
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800

0800775c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4b22      	ldr	r3, [pc, #136]	@ (8007810 <TIM_OC6_SetConfig+0xb4>)
 8007788:	4013      	ands	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800779e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a19      	ldr	r2, [pc, #100]	@ (8007814 <TIM_OC6_SetConfig+0xb8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00f      	beq.n	80077d4 <TIM_OC6_SetConfig+0x78>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a18      	ldr	r2, [pc, #96]	@ (8007818 <TIM_OC6_SetConfig+0xbc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00b      	beq.n	80077d4 <TIM_OC6_SetConfig+0x78>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a17      	ldr	r2, [pc, #92]	@ (800781c <TIM_OC6_SetConfig+0xc0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d007      	beq.n	80077d4 <TIM_OC6_SetConfig+0x78>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a16      	ldr	r2, [pc, #88]	@ (8007820 <TIM_OC6_SetConfig+0xc4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_OC6_SetConfig+0x78>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a15      	ldr	r2, [pc, #84]	@ (8007824 <TIM_OC6_SetConfig+0xc8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d109      	bne.n	80077e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	029b      	lsls	r3, r3, #10
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	621a      	str	r2, [r3, #32]
}
 8007802:	bf00      	nop
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	feff8fff 	.word	0xfeff8fff
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400
 800781c:	40014000 	.word	0x40014000
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800

08007828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f023 0201 	bic.w	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f023 030a 	bic.w	r3, r3, #10
 8007864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	621a      	str	r2, [r3, #32]
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007886:	b480      	push	{r7}
 8007888:	b087      	sub	sp, #28
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	f023 0210 	bic.w	r2, r3, #16
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <TIM_ITRx_SetConfig+0x38>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4313      	orrs	r3, r2
 8007906:	f043 0307 	orr.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	609a      	str	r2, [r3, #8]
}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	ffcfff8f 	.word	0xffcfff8f

08007924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800793e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	021a      	lsls	r2, r3, #8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	431a      	orrs	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4313      	orrs	r3, r2
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	609a      	str	r2, [r3, #8]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	2201      	movs	r2, #1
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1a      	ldr	r2, [r3, #32]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	43db      	mvns	r3, r3
 8007986:	401a      	ands	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1a      	ldr	r2, [r3, #32]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	fa01 f303 	lsl.w	r3, r1, r3
 800799c:	431a      	orrs	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	621a      	str	r2, [r3, #32]
}
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d109      	bne.n	80079d4 <HAL_TIMEx_PWMN_Start+0x24>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	bf14      	ite	ne
 80079cc:	2301      	movne	r3, #1
 80079ce:	2300      	moveq	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	e022      	b.n	8007a1a <HAL_TIMEx_PWMN_Start+0x6a>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d109      	bne.n	80079ee <HAL_TIMEx_PWMN_Start+0x3e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	bf14      	ite	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	2300      	moveq	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	e015      	b.n	8007a1a <HAL_TIMEx_PWMN_Start+0x6a>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d109      	bne.n	8007a08 <HAL_TIMEx_PWMN_Start+0x58>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	bf14      	ite	ne
 8007a00:	2301      	movne	r3, #1
 8007a02:	2300      	moveq	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	e008      	b.n	8007a1a <HAL_TIMEx_PWMN_Start+0x6a>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e073      	b.n	8007b0a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <HAL_TIMEx_PWMN_Start+0x82>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a30:	e013      	b.n	8007a5a <HAL_TIMEx_PWMN_Start+0xaa>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d104      	bne.n	8007a42 <HAL_TIMEx_PWMN_Start+0x92>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a40:	e00b      	b.n	8007a5a <HAL_TIMEx_PWMN_Start+0xaa>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d104      	bne.n	8007a52 <HAL_TIMEx_PWMN_Start+0xa2>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a50:	e003      	b.n	8007a5a <HAL_TIMEx_PWMN_Start+0xaa>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2202      	movs	r2, #2
 8007a56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 f990 	bl	8007d88 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a25      	ldr	r2, [pc, #148]	@ (8007b14 <HAL_TIMEx_PWMN_Start+0x164>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d022      	beq.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x118>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8a:	d01d      	beq.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x118>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a21      	ldr	r2, [pc, #132]	@ (8007b18 <HAL_TIMEx_PWMN_Start+0x168>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d018      	beq.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x118>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a20      	ldr	r2, [pc, #128]	@ (8007b1c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x118>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8007b20 <HAL_TIMEx_PWMN_Start+0x170>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00e      	beq.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x118>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1d      	ldr	r2, [pc, #116]	@ (8007b24 <HAL_TIMEx_PWMN_Start+0x174>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d009      	beq.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b28 <HAL_TIMEx_PWMN_Start+0x178>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d004      	beq.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x118>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b2c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d115      	bne.n	8007af4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	4b18      	ldr	r3, [pc, #96]	@ (8007b30 <HAL_TIMEx_PWMN_Start+0x180>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d015      	beq.n	8007b06 <HAL_TIMEx_PWMN_Start+0x156>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae0:	d011      	beq.n	8007b06 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0201 	orr.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af2:	e008      	b.n	8007b06 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	e000      	b.n	8007b08 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40000400 	.word	0x40000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	40010400 	.word	0x40010400
 8007b28:	40001800 	.word	0x40001800
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	00010007 	.word	0x00010007

08007b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e06d      	b.n	8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a30      	ldr	r2, [pc, #192]	@ (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d004      	beq.n	8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d108      	bne.n	8007b92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a20      	ldr	r2, [pc, #128]	@ (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d022      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bbe:	d01d      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d018      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1c      	ldr	r2, [pc, #112]	@ (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a15      	ldr	r2, [pc, #84]	@ (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a16      	ldr	r2, [pc, #88]	@ (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a15      	ldr	r2, [pc, #84]	@ (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d10c      	bne.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40010400 	.word	0x40010400
 8007c3c:	40000400 	.word	0x40000400
 8007c40:	40000800 	.word	0x40000800
 8007c44:	40000c00 	.word	0x40000c00
 8007c48:	40001800 	.word	0x40001800
 8007c4c:	40014000 	.word	0x40014000

08007c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e065      	b.n	8007d38 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	041b      	lsls	r3, r3, #16
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a16      	ldr	r2, [pc, #88]	@ (8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d004      	beq.n	8007cfa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a14      	ldr	r2, [pc, #80]	@ (8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d115      	bne.n	8007d26 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d04:	051b      	lsls	r3, r3, #20
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	40010000 	.word	0x40010000
 8007d48:	40010400 	.word	0x40010400

08007d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1a      	ldr	r2, [r3, #32]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	43db      	mvns	r3, r3
 8007daa:	401a      	ands	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	621a      	str	r2, [r3, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
	...

08007dd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	f107 001c 	add.w	r0, r7, #28
 8007de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007de6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d121      	bne.n	8007e32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8007eb0 <USB_CoreInit+0xdc>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d105      	bne.n	8007e26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 faf6 	bl	8009418 <USB_CoreReset>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]
 8007e30:	e01b      	b.n	8007e6a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 faea 	bl	8009418 <USB_CoreReset>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d106      	bne.n	8007e5e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e5c:	e005      	b.n	8007e6a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e6a:	7fbb      	ldrb	r3, [r7, #30]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d116      	bne.n	8007e9e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <USB_CoreInit+0xe0>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f043 0206 	orr.w	r2, r3, #6
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f043 0220 	orr.w	r2, r3, #32
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eaa:	b004      	add	sp, #16
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	ffbdffbf 	.word	0xffbdffbf
 8007eb4:	03ee0000 	.word	0x03ee0000

08007eb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d165      	bne.n	8007f98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a41      	ldr	r2, [pc, #260]	@ (8007fd4 <USB_SetTurnaroundTime+0x11c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d906      	bls.n	8007ee2 <USB_SetTurnaroundTime+0x2a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4a40      	ldr	r2, [pc, #256]	@ (8007fd8 <USB_SetTurnaroundTime+0x120>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d202      	bcs.n	8007ee2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007edc:	230f      	movs	r3, #15
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e062      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8007fd8 <USB_SetTurnaroundTime+0x120>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d306      	bcc.n	8007ef8 <USB_SetTurnaroundTime+0x40>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4a3b      	ldr	r2, [pc, #236]	@ (8007fdc <USB_SetTurnaroundTime+0x124>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d202      	bcs.n	8007ef8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ef2:	230e      	movs	r3, #14
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e057      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a38      	ldr	r2, [pc, #224]	@ (8007fdc <USB_SetTurnaroundTime+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d306      	bcc.n	8007f0e <USB_SetTurnaroundTime+0x56>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a37      	ldr	r2, [pc, #220]	@ (8007fe0 <USB_SetTurnaroundTime+0x128>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d202      	bcs.n	8007f0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f08:	230d      	movs	r3, #13
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e04c      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4a33      	ldr	r2, [pc, #204]	@ (8007fe0 <USB_SetTurnaroundTime+0x128>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d306      	bcc.n	8007f24 <USB_SetTurnaroundTime+0x6c>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4a32      	ldr	r2, [pc, #200]	@ (8007fe4 <USB_SetTurnaroundTime+0x12c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d802      	bhi.n	8007f24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f1e:	230c      	movs	r3, #12
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	e041      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4a2f      	ldr	r2, [pc, #188]	@ (8007fe4 <USB_SetTurnaroundTime+0x12c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d906      	bls.n	8007f3a <USB_SetTurnaroundTime+0x82>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8007fe8 <USB_SetTurnaroundTime+0x130>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d802      	bhi.n	8007f3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f34:	230b      	movs	r3, #11
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e036      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8007fe8 <USB_SetTurnaroundTime+0x130>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d906      	bls.n	8007f50 <USB_SetTurnaroundTime+0x98>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4a29      	ldr	r2, [pc, #164]	@ (8007fec <USB_SetTurnaroundTime+0x134>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d802      	bhi.n	8007f50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f4a:	230a      	movs	r3, #10
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e02b      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4a26      	ldr	r2, [pc, #152]	@ (8007fec <USB_SetTurnaroundTime+0x134>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d906      	bls.n	8007f66 <USB_SetTurnaroundTime+0xae>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4a25      	ldr	r2, [pc, #148]	@ (8007ff0 <USB_SetTurnaroundTime+0x138>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d202      	bcs.n	8007f66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f60:	2309      	movs	r3, #9
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e020      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	4a21      	ldr	r2, [pc, #132]	@ (8007ff0 <USB_SetTurnaroundTime+0x138>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d306      	bcc.n	8007f7c <USB_SetTurnaroundTime+0xc4>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4a20      	ldr	r2, [pc, #128]	@ (8007ff4 <USB_SetTurnaroundTime+0x13c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d802      	bhi.n	8007f7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f76:	2308      	movs	r3, #8
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e015      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff4 <USB_SetTurnaroundTime+0x13c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d906      	bls.n	8007f92 <USB_SetTurnaroundTime+0xda>
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff8 <USB_SetTurnaroundTime+0x140>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d202      	bcs.n	8007f92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f8c:	2307      	movs	r3, #7
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	e00a      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f92:	2306      	movs	r3, #6
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e007      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d102      	bne.n	8007fa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f9e:	2309      	movs	r3, #9
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e001      	b.n	8007fa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007fa4:	2309      	movs	r3, #9
 8007fa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	029b      	lsls	r3, r3, #10
 8007fbc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	371c      	adds	r7, #28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	00d8acbf 	.word	0x00d8acbf
 8007fd8:	00e4e1c0 	.word	0x00e4e1c0
 8007fdc:	00f42400 	.word	0x00f42400
 8007fe0:	01067380 	.word	0x01067380
 8007fe4:	011a499f 	.word	0x011a499f
 8007fe8:	01312cff 	.word	0x01312cff
 8007fec:	014ca43f 	.word	0x014ca43f
 8007ff0:	016e3600 	.word	0x016e3600
 8007ff4:	01a6ab1f 	.word	0x01a6ab1f
 8007ff8:	01e84800 	.word	0x01e84800

08007ffc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f043 0201 	orr.w	r2, r3, #1
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f023 0201 	bic.w	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d115      	bne.n	800808e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800806e:	200a      	movs	r0, #10
 8008070:	f7f8 fa14 	bl	800049c <HAL_Delay>
      ms += 10U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	330a      	adds	r3, #10
 8008078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 f93b 	bl	80092f6 <USB_GetMode>
 8008080:	4603      	mov	r3, r0
 8008082:	2b01      	cmp	r3, #1
 8008084:	d01e      	beq.n	80080c4 <USB_SetCurrentMode+0x84>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2bc7      	cmp	r3, #199	@ 0xc7
 800808a:	d9f0      	bls.n	800806e <USB_SetCurrentMode+0x2e>
 800808c:	e01a      	b.n	80080c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d115      	bne.n	80080c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80080a0:	200a      	movs	r0, #10
 80080a2:	f7f8 f9fb 	bl	800049c <HAL_Delay>
      ms += 10U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	330a      	adds	r3, #10
 80080aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 f922 	bl	80092f6 <USB_GetMode>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <USB_SetCurrentMode+0x84>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80080bc:	d9f0      	bls.n	80080a0 <USB_SetCurrentMode+0x60>
 80080be:	e001      	b.n	80080c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e005      	b.n	80080d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80080c8:	d101      	bne.n	80080ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080d8:	b084      	sub	sp, #16
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80080e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080f2:	2300      	movs	r3, #0
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	e009      	b.n	800810c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3340      	adds	r3, #64	@ 0x40
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	2200      	movs	r2, #0
 8008104:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3301      	adds	r3, #1
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b0e      	cmp	r3, #14
 8008110:	d9f2      	bls.n	80080f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008112:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008116:	2b00      	cmp	r3, #0
 8008118:	d11c      	bne.n	8008154 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008132:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e005      	b.n	8008160 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008158:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008166:	461a      	mov	r2, r3
 8008168:	2300      	movs	r3, #0
 800816a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800816c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10d      	bne.n	8008190 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800817c:	2100      	movs	r1, #0
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f968 	bl	8008454 <USB_SetDevSpeed>
 8008184:	e008      	b.n	8008198 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008186:	2101      	movs	r1, #1
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f963 	bl	8008454 <USB_SetDevSpeed>
 800818e:	e003      	b.n	8008198 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008190:	2103      	movs	r1, #3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f95e 	bl	8008454 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008198:	2110      	movs	r1, #16
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f8fa 	bl	8008394 <USB_FlushTxFifo>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f924 	bl	80083f8 <USB_FlushRxFifo>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c0:	461a      	mov	r2, r3
 80081c2:	2300      	movs	r3, #0
 80081c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081cc:	461a      	mov	r2, r3
 80081ce:	2300      	movs	r3, #0
 80081d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d8:	461a      	mov	r2, r3
 80081da:	2300      	movs	r3, #0
 80081dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081de:	2300      	movs	r3, #0
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e043      	b.n	800826c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081fa:	d118      	bne.n	800822e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800820e:	461a      	mov	r2, r3
 8008210:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e013      	b.n	8008240 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008224:	461a      	mov	r2, r3
 8008226:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	e008      	b.n	8008240 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823a:	461a      	mov	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	461a      	mov	r2, r3
 8008260:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008264:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3301      	adds	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008270:	461a      	mov	r2, r3
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	4293      	cmp	r3, r2
 8008276:	d3b5      	bcc.n	80081e4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	e043      	b.n	8008306 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008294:	d118      	bne.n	80082c8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082a8:	461a      	mov	r2, r3
 80082aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	e013      	b.n	80082da <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082be:	461a      	mov	r2, r3
 80082c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	e008      	b.n	80082da <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d4:	461a      	mov	r2, r3
 80082d6:	2300      	movs	r3, #0
 80082d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e6:	461a      	mov	r2, r3
 80082e8:	2300      	movs	r3, #0
 80082ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f8:	461a      	mov	r2, r3
 80082fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	3301      	adds	r3, #1
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800830a:	461a      	mov	r2, r3
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	4293      	cmp	r3, r2
 8008310:	d3b5      	bcc.n	800827e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008324:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008332:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008334:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f043 0210 	orr.w	r2, r3, #16
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699a      	ldr	r2, [r3, #24]
 800834c:	4b0f      	ldr	r3, [pc, #60]	@ (800838c <USB_DevInit+0x2b4>)
 800834e:	4313      	orrs	r3, r2
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008354:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	f043 0208 	orr.w	r2, r3, #8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008368:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800836c:	2b01      	cmp	r3, #1
 800836e:	d105      	bne.n	800837c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699a      	ldr	r2, [r3, #24]
 8008374:	4b06      	ldr	r3, [pc, #24]	@ (8008390 <USB_DevInit+0x2b8>)
 8008376:	4313      	orrs	r3, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008388:	b004      	add	sp, #16
 800838a:	4770      	bx	lr
 800838c:	803c3800 	.word	0x803c3800
 8008390:	40000004 	.word	0x40000004

08008394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083ae:	d901      	bls.n	80083b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e01b      	b.n	80083ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	daf2      	bge.n	80083a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	019b      	lsls	r3, r3, #6
 80083c4:	f043 0220 	orr.w	r2, r3, #32
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083d8:	d901      	bls.n	80083de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e006      	b.n	80083ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d0f0      	beq.n	80083cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008410:	d901      	bls.n	8008416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e018      	b.n	8008448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	daf2      	bge.n	8008404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2210      	movs	r2, #16
 8008426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3301      	adds	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008434:	d901      	bls.n	800843a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e006      	b.n	8008448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0310 	and.w	r3, r3, #16
 8008442:	2b10      	cmp	r3, #16
 8008444:	d0f0      	beq.n	8008428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	68f9      	ldr	r1, [r7, #12]
 8008470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008474:	4313      	orrs	r3, r2
 8008476:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008486:	b480      	push	{r7}
 8008488:	b087      	sub	sp, #28
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 0306 	and.w	r3, r3, #6
 800849e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80084a6:	2300      	movs	r3, #0
 80084a8:	75fb      	strb	r3, [r7, #23]
 80084aa:	e00a      	b.n	80084c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d002      	beq.n	80084b8 <USB_GetDevSpeed+0x32>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b06      	cmp	r3, #6
 80084b6:	d102      	bne.n	80084be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80084b8:	2302      	movs	r3, #2
 80084ba:	75fb      	strb	r3, [r7, #23]
 80084bc:	e001      	b.n	80084c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80084be:	230f      	movs	r3, #15
 80084c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	371c      	adds	r7, #28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d139      	bne.n	8008560 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f2:	69da      	ldr	r2, [r3, #28]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	2101      	movs	r1, #1
 80084fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008502:	b29b      	uxth	r3, r3
 8008504:	68f9      	ldr	r1, [r7, #12]
 8008506:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800850a:	4313      	orrs	r3, r2
 800850c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d153      	bne.n	80085cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	791b      	ldrb	r3, [r3, #4]
 800853e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008540:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	059b      	lsls	r3, r3, #22
 8008546:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008548:	431a      	orrs	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	0159      	lsls	r1, r3, #5
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	440b      	add	r3, r1
 8008552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008556:	4619      	mov	r1, r3
 8008558:	4b20      	ldr	r3, [pc, #128]	@ (80085dc <USB_ActivateEndpoint+0x10c>)
 800855a:	4313      	orrs	r3, r2
 800855c:	600b      	str	r3, [r1, #0]
 800855e:	e035      	b.n	80085cc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008566:	69da      	ldr	r2, [r3, #28]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	f003 030f 	and.w	r3, r3, #15
 8008570:	2101      	movs	r1, #1
 8008572:	fa01 f303 	lsl.w	r3, r1, r3
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	68f9      	ldr	r1, [r7, #12]
 800857a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800857e:	4313      	orrs	r3, r2
 8008580:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d119      	bne.n	80085cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	791b      	ldrb	r3, [r3, #4]
 80085b2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085b4:	430b      	orrs	r3, r1
 80085b6:	431a      	orrs	r2, r3
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	0159      	lsls	r1, r3, #5
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	440b      	add	r3, r1
 80085c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c4:	4619      	mov	r1, r3
 80085c6:	4b05      	ldr	r3, [pc, #20]	@ (80085dc <USB_ActivateEndpoint+0x10c>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	10008000 	.word	0x10008000

080085e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d161      	bne.n	80086c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800860e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008612:	d11f      	bne.n	8008654 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	440a      	add	r2, r1
 800862a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800862e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008632:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800864e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008652:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800865a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	2101      	movs	r1, #1
 8008666:	fa01 f303 	lsl.w	r3, r1, r3
 800866a:	b29b      	uxth	r3, r3
 800866c:	43db      	mvns	r3, r3
 800866e:	68f9      	ldr	r1, [r7, #12]
 8008670:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008674:	4013      	ands	r3, r2
 8008676:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800867e:	69da      	ldr	r2, [r3, #28]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	2101      	movs	r1, #1
 800868a:	fa01 f303 	lsl.w	r3, r1, r3
 800868e:	b29b      	uxth	r3, r3
 8008690:	43db      	mvns	r3, r3
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008698:	4013      	ands	r3, r2
 800869a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	0159      	lsls	r1, r3, #5
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	440b      	add	r3, r1
 80086b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b6:	4619      	mov	r1, r3
 80086b8:	4b35      	ldr	r3, [pc, #212]	@ (8008790 <USB_DeactivateEndpoint+0x1b0>)
 80086ba:	4013      	ands	r3, r2
 80086bc:	600b      	str	r3, [r1, #0]
 80086be:	e060      	b.n	8008782 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d6:	d11f      	bne.n	8008718 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	0151      	lsls	r1, r2, #5
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	440a      	add	r2, r1
 80086ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	0151      	lsls	r1, r2, #5
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	440a      	add	r2, r1
 800870e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008712:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008716:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800871e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	2101      	movs	r1, #1
 800872a:	fa01 f303 	lsl.w	r3, r1, r3
 800872e:	041b      	lsls	r3, r3, #16
 8008730:	43db      	mvns	r3, r3
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008738:	4013      	ands	r3, r2
 800873a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008742:	69da      	ldr	r2, [r3, #28]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	2101      	movs	r1, #1
 800874e:	fa01 f303 	lsl.w	r3, r1, r3
 8008752:	041b      	lsls	r3, r3, #16
 8008754:	43db      	mvns	r3, r3
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800875c:	4013      	ands	r3, r2
 800875e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	0159      	lsls	r1, r3, #5
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	440b      	add	r3, r1
 8008776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800877a:	4619      	mov	r1, r3
 800877c:	4b05      	ldr	r3, [pc, #20]	@ (8008794 <USB_DeactivateEndpoint+0x1b4>)
 800877e:	4013      	ands	r3, r2
 8008780:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	ec337800 	.word	0xec337800
 8008794:	eff37800 	.word	0xeff37800

08008798 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	@ 0x28
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	4613      	mov	r3, r2
 80087a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	f040 8181 	bne.w	8008abc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d132      	bne.n	8008828 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	0159      	lsls	r1, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	440b      	add	r3, r1
 80087d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087dc:	4619      	mov	r1, r3
 80087de:	4ba5      	ldr	r3, [pc, #660]	@ (8008a74 <USB_EPStartXfer+0x2dc>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	0159      	lsls	r1, r3, #5
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	440b      	add	r3, r1
 800881a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881e:	4619      	mov	r1, r3
 8008820:	4b95      	ldr	r3, [pc, #596]	@ (8008a78 <USB_EPStartXfer+0x2e0>)
 8008822:	4013      	ands	r3, r2
 8008824:	610b      	str	r3, [r1, #16]
 8008826:	e092      	b.n	800894e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	0159      	lsls	r1, r3, #5
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	440b      	add	r3, r1
 800883e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008842:	4619      	mov	r1, r3
 8008844:	4b8c      	ldr	r3, [pc, #560]	@ (8008a78 <USB_EPStartXfer+0x2e0>)
 8008846:	4013      	ands	r3, r2
 8008848:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	0159      	lsls	r1, r3, #5
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	440b      	add	r3, r1
 8008860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008864:	4619      	mov	r1, r3
 8008866:	4b83      	ldr	r3, [pc, #524]	@ (8008a74 <USB_EPStartXfer+0x2dc>)
 8008868:	4013      	ands	r3, r2
 800886a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d11a      	bne.n	80088a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691a      	ldr	r2, [r3, #16]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	429a      	cmp	r2, r3
 800887c:	d903      	bls.n	8008886 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	440a      	add	r2, r1
 800889c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088a4:	6113      	str	r3, [r2, #16]
 80088a6:	e01b      	b.n	80088e0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6919      	ldr	r1, [r3, #16]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	440b      	add	r3, r1
 80088c0:	1e59      	subs	r1, r3, #1
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80088ca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80088cc:	4b6b      	ldr	r3, [pc, #428]	@ (8008a7c <USB_EPStartXfer+0x2e4>)
 80088ce:	400b      	ands	r3, r1
 80088d0:	69b9      	ldr	r1, [r7, #24]
 80088d2:	0148      	lsls	r0, r1, #5
 80088d4:	69f9      	ldr	r1, [r7, #28]
 80088d6:	4401      	add	r1, r0
 80088d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80088dc:	4313      	orrs	r3, r2
 80088de:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ec:	691a      	ldr	r2, [r3, #16]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f6:	69b9      	ldr	r1, [r7, #24]
 80088f8:	0148      	lsls	r0, r1, #5
 80088fa:	69f9      	ldr	r1, [r7, #28]
 80088fc:	4401      	add	r1, r0
 80088fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008902:	4313      	orrs	r3, r2
 8008904:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	791b      	ldrb	r3, [r3, #4]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d11f      	bne.n	800894e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008928:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800892c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008948:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800894c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d14b      	bne.n	80089ec <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d009      	beq.n	8008970 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008968:	461a      	mov	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	791b      	ldrb	r3, [r3, #4]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d128      	bne.n	80089ca <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008984:	2b00      	cmp	r3, #0
 8008986:	d110      	bne.n	80089aa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	e00f      	b.n	80089ca <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	0151      	lsls	r1, r2, #5
 80089dc:	69fa      	ldr	r2, [r7, #28]
 80089de:	440a      	add	r2, r1
 80089e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	e16a      	b.n	8008cc2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	0151      	lsls	r1, r2, #5
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	440a      	add	r2, r1
 8008a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	791b      	ldrb	r3, [r3, #4]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d015      	beq.n	8008a40 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8152 	beq.w	8008cc2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	2101      	movs	r1, #1
 8008a30:	fa01 f303 	lsl.w	r3, r1, r3
 8008a34:	69f9      	ldr	r1, [r7, #28]
 8008a36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	634b      	str	r3, [r1, #52]	@ 0x34
 8008a3e:	e140      	b.n	8008cc2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d117      	bne.n	8008a80 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	e016      	b.n	8008aa0 <USB_EPStartXfer+0x308>
 8008a72:	bf00      	nop
 8008a74:	e007ffff 	.word	0xe007ffff
 8008a78:	fff80000 	.word	0xfff80000
 8008a7c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a9e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	68d9      	ldr	r1, [r3, #12]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	781a      	ldrb	r2, [r3, #0]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	b298      	uxth	r0, r3
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f9b9 	bl	8008e2c <USB_WritePacket>
 8008aba:	e102      	b.n	8008cc2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac8:	691a      	ldr	r2, [r3, #16]
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	0159      	lsls	r1, r3, #5
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	440b      	add	r3, r1
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4b7c      	ldr	r3, [pc, #496]	@ (8008ccc <USB_EPStartXfer+0x534>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	691a      	ldr	r2, [r3, #16]
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	0159      	lsls	r1, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	440b      	add	r3, r1
 8008af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af8:	4619      	mov	r1, r3
 8008afa:	4b75      	ldr	r3, [pc, #468]	@ (8008cd0 <USB_EPStartXfer+0x538>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d12f      	bne.n	8008b66 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b34:	69b9      	ldr	r1, [r7, #24]
 8008b36:	0148      	lsls	r0, r1, #5
 8008b38:	69f9      	ldr	r1, [r7, #28]
 8008b3a:	4401      	add	r1, r0
 8008b3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b40:	4313      	orrs	r3, r2
 8008b42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b62:	6113      	str	r3, [r2, #16]
 8008b64:	e05f      	b.n	8008c26 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d123      	bne.n	8008bb6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7a:	691a      	ldr	r2, [r3, #16]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b84:	69b9      	ldr	r1, [r7, #24]
 8008b86:	0148      	lsls	r0, r1, #5
 8008b88:	69f9      	ldr	r1, [r7, #28]
 8008b8a:	4401      	add	r1, r0
 8008b8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b90:	4313      	orrs	r3, r2
 8008b92:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bb2:	6113      	str	r3, [r2, #16]
 8008bb4:	e037      	b.n	8008c26 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	691a      	ldr	r2, [r3, #16]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	1e5a      	subs	r2, r3, #1
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bca:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	8afa      	ldrh	r2, [r7, #22]
 8008bd2:	fb03 f202 	mul.w	r2, r3, r2
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be6:	691a      	ldr	r2, [r3, #16]
 8008be8:	8afb      	ldrh	r3, [r7, #22]
 8008bea:	04d9      	lsls	r1, r3, #19
 8008bec:	4b39      	ldr	r3, [pc, #228]	@ (8008cd4 <USB_EPStartXfer+0x53c>)
 8008bee:	400b      	ands	r3, r1
 8008bf0:	69b9      	ldr	r1, [r7, #24]
 8008bf2:	0148      	lsls	r0, r1, #5
 8008bf4:	69f9      	ldr	r1, [r7, #28]
 8008bf6:	4401      	add	r1, r0
 8008bf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0c:	691a      	ldr	r2, [r3, #16]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c16:	69b9      	ldr	r1, [r7, #24]
 8008c18:	0148      	lsls	r0, r1, #5
 8008c1a:	69f9      	ldr	r1, [r7, #28]
 8008c1c:	4401      	add	r1, r0
 8008c1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c22:	4313      	orrs	r3, r2
 8008c24:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d10d      	bne.n	8008c48 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d009      	beq.n	8008c48 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	68d9      	ldr	r1, [r3, #12]
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c44:	460a      	mov	r2, r1
 8008c46:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	791b      	ldrb	r3, [r3, #4]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d128      	bne.n	8008ca2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d110      	bne.n	8008c82 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	e00f      	b.n	8008ca2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ca0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008cc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3720      	adds	r7, #32
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	fff80000 	.word	0xfff80000
 8008cd0:	e007ffff 	.word	0xe007ffff
 8008cd4:	1ff80000 	.word	0x1ff80000

08008cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d14a      	bne.n	8008d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d0e:	f040 8086 	bne.w	8008e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	7812      	ldrb	r2, [r2, #0]
 8008d26:	0151      	lsls	r1, r2, #5
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	440a      	add	r2, r1
 8008d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	7812      	ldrb	r2, [r2, #0]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d902      	bls.n	8008d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d6e:	e056      	b.n	8008e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d88:	d0e7      	beq.n	8008d5a <USB_EPStopXfer+0x82>
 8008d8a:	e048      	b.n	8008e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008da4:	d13b      	bne.n	8008e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	7812      	ldrb	r2, [r2, #0]
 8008dba:	0151      	lsls	r1, r2, #5
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	440a      	add	r2, r1
 8008dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	0151      	lsls	r1, r2, #5
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	440a      	add	r2, r1
 8008de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d902      	bls.n	8008e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	75fb      	strb	r3, [r7, #23]
          break;
 8008e02:	e00c      	b.n	8008e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e1c:	d0e7      	beq.n	8008dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b089      	sub	sp, #36	@ 0x24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4611      	mov	r1, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	71fb      	strb	r3, [r7, #7]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d123      	bne.n	8008e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e52:	88bb      	ldrh	r3, [r7, #4]
 8008e54:	3303      	adds	r3, #3
 8008e56:	089b      	lsrs	r3, r3, #2
 8008e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61bb      	str	r3, [r7, #24]
 8008e5e:	e018      	b.n	8008e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	031a      	lsls	r2, r3, #12
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	3301      	adds	r3, #1
 8008e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3301      	adds	r3, #1
 8008e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d3e2      	bcc.n	8008e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3724      	adds	r7, #36	@ 0x24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b08b      	sub	sp, #44	@ 0x2c
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ebe:	88fb      	ldrh	r3, [r7, #6]
 8008ec0:	089b      	lsrs	r3, r3, #2
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ec6:	88fb      	ldrh	r3, [r7, #6]
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ece:	2300      	movs	r3, #0
 8008ed0:	623b      	str	r3, [r7, #32]
 8008ed2:	e014      	b.n	8008efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	3301      	adds	r3, #1
 8008eea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	3301      	adds	r3, #1
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	3301      	adds	r3, #1
 8008efc:	623b      	str	r3, [r7, #32]
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d3e6      	bcc.n	8008ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008f06:	8bfb      	ldrh	r3, [r7, #30]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01e      	beq.n	8008f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f16:	461a      	mov	r2, r3
 8008f18:	f107 0310 	add.w	r3, r7, #16
 8008f1c:	6812      	ldr	r2, [r2, #0]
 8008f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	701a      	strb	r2, [r3, #0]
      i++;
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	3301      	adds	r3, #1
 8008f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008f3e:	8bfb      	ldrh	r3, [r7, #30]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f44:	8bfb      	ldrh	r3, [r7, #30]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1ea      	bne.n	8008f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	372c      	adds	r7, #44	@ 0x2c
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d12c      	bne.n	8008fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	db12      	blt.n	8008fac <USB_EPSetStall+0x54>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00f      	beq.n	8008fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	0151      	lsls	r1, r2, #5
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	440a      	add	r2, r1
 8008fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	0151      	lsls	r1, r2, #5
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	440a      	add	r2, r1
 8008fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	e02b      	b.n	8009026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	db12      	blt.n	8009006 <USB_EPSetStall+0xae>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00f      	beq.n	8009006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009000:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d128      	bne.n	80090a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	440a      	add	r2, r1
 8009066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800906a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800906e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	791b      	ldrb	r3, [r3, #4]
 8009074:	2b03      	cmp	r3, #3
 8009076:	d003      	beq.n	8009080 <USB_EPClearStall+0x4c>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	791b      	ldrb	r3, [r3, #4]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d138      	bne.n	80090f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	0151      	lsls	r1, r2, #5
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	440a      	add	r2, r1
 8009096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800909a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	e027      	b.n	80090f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80090c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	791b      	ldrb	r3, [r3, #4]
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d003      	beq.n	80090d2 <USB_EPClearStall+0x9e>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	791b      	ldrb	r3, [r3, #4]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d10f      	bne.n	80090f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800911e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	011b      	lsls	r3, r3, #4
 8009130:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009134:	68f9      	ldr	r1, [r7, #12]
 8009136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800913a:	4313      	orrs	r3, r2
 800913c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009166:	f023 0303 	bic.w	r3, r3, #3
 800916a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800917a:	f023 0302 	bic.w	r3, r3, #2
 800917e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091a8:	f023 0303 	bic.w	r3, r3, #3
 80091ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091bc:	f043 0302 	orr.w	r3, r3, #2
 80091c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4013      	ands	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091e8:	68fb      	ldr	r3, [r7, #12]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	4013      	ands	r3, r2
 8009218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	0c1b      	lsrs	r3, r3, #16
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800922a:	b480      	push	{r7}
 800922c:	b085      	sub	sp, #20
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	4013      	ands	r3, r2
 800924c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	b29b      	uxth	r3, r3
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	4013      	ands	r3, r2
 800928a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800928c:	68bb      	ldr	r3, [r7, #8]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800929a:	b480      	push	{r7}
 800929c:	b087      	sub	sp, #28
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ca:	01db      	lsls	r3, r3, #7
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4013      	ands	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092e8:	68bb      	ldr	r3, [r7, #8]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	f003 0301 	and.w	r3, r3, #1
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
	...

08009314 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800932e:	4619      	mov	r1, r3
 8009330:	4b09      	ldr	r3, [pc, #36]	@ (8009358 <USB_ActivateSetup+0x44>)
 8009332:	4013      	ands	r3, r2
 8009334:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	fffff800 	.word	0xfffff800

0800935c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	460b      	mov	r3, r1
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	333c      	adds	r3, #60	@ 0x3c
 8009372:	3304      	adds	r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	4a26      	ldr	r2, [pc, #152]	@ (8009414 <USB_EP0_OutStart+0xb8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d90a      	bls.n	8009396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800938c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009390:	d101      	bne.n	8009396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	e037      	b.n	8009406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939c:	461a      	mov	r2, r3
 800939e:	2300      	movs	r3, #0
 80093a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093c4:	f043 0318 	orr.w	r3, r3, #24
 80093c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80093dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d10f      	bne.n	8009404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ea:	461a      	mov	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	4f54300a 	.word	0x4f54300a

08009418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009430:	d901      	bls.n	8009436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e01b      	b.n	800946e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	daf2      	bge.n	8009424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f043 0201 	orr.w	r2, r3, #1
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800945a:	d901      	bls.n	8009460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e006      	b.n	800946e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	2b01      	cmp	r3, #1
 800946a:	d0f0      	beq.n	800944e <USB_CoreReset+0x36>

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
	...

0800947c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009488:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800948c:	f005 f978 	bl	800e780 <USBD_static_malloc>
 8009490:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d109      	bne.n	80094ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32b0      	adds	r2, #176	@ 0xb0
 80094a2:	2100      	movs	r1, #0
 80094a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80094a8:	2302      	movs	r3, #2
 80094aa:	e0d4      	b.n	8009656 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80094ac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80094b0:	2100      	movs	r1, #0
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f006 fa55 	bl	800f962 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	32b0      	adds	r2, #176	@ 0xb0
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	32b0      	adds	r2, #176	@ 0xb0
 80094d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	7c1b      	ldrb	r3, [r3, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d138      	bne.n	8009556 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094e4:	4b5e      	ldr	r3, [pc, #376]	@ (8009660 <USBD_CDC_Init+0x1e4>)
 80094e6:	7819      	ldrb	r1, [r3, #0]
 80094e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094ec:	2202      	movs	r2, #2
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f005 f823 	bl	800e53a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094f4:	4b5a      	ldr	r3, [pc, #360]	@ (8009660 <USBD_CDC_Init+0x1e4>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	f003 020f 	and.w	r2, r3, #15
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	440b      	add	r3, r1
 8009508:	3324      	adds	r3, #36	@ 0x24
 800950a:	2201      	movs	r2, #1
 800950c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800950e:	4b55      	ldr	r3, [pc, #340]	@ (8009664 <USBD_CDC_Init+0x1e8>)
 8009510:	7819      	ldrb	r1, [r3, #0]
 8009512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009516:	2202      	movs	r2, #2
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f005 f80e 	bl	800e53a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800951e:	4b51      	ldr	r3, [pc, #324]	@ (8009664 <USBD_CDC_Init+0x1e8>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 020f 	and.w	r2, r3, #15
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009536:	2201      	movs	r2, #1
 8009538:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800953a:	4b4b      	ldr	r3, [pc, #300]	@ (8009668 <USBD_CDC_Init+0x1ec>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	f003 020f 	and.w	r2, r3, #15
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	3326      	adds	r3, #38	@ 0x26
 8009550:	2210      	movs	r2, #16
 8009552:	801a      	strh	r2, [r3, #0]
 8009554:	e035      	b.n	80095c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009556:	4b42      	ldr	r3, [pc, #264]	@ (8009660 <USBD_CDC_Init+0x1e4>)
 8009558:	7819      	ldrb	r1, [r3, #0]
 800955a:	2340      	movs	r3, #64	@ 0x40
 800955c:	2202      	movs	r2, #2
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f004 ffeb 	bl	800e53a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009564:	4b3e      	ldr	r3, [pc, #248]	@ (8009660 <USBD_CDC_Init+0x1e4>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f003 020f 	and.w	r2, r3, #15
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	3324      	adds	r3, #36	@ 0x24
 800957a:	2201      	movs	r2, #1
 800957c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800957e:	4b39      	ldr	r3, [pc, #228]	@ (8009664 <USBD_CDC_Init+0x1e8>)
 8009580:	7819      	ldrb	r1, [r3, #0]
 8009582:	2340      	movs	r3, #64	@ 0x40
 8009584:	2202      	movs	r2, #2
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f004 ffd7 	bl	800e53a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800958c:	4b35      	ldr	r3, [pc, #212]	@ (8009664 <USBD_CDC_Init+0x1e8>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 020f 	and.w	r2, r3, #15
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	440b      	add	r3, r1
 80095a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095a4:	2201      	movs	r2, #1
 80095a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80095a8:	4b2f      	ldr	r3, [pc, #188]	@ (8009668 <USBD_CDC_Init+0x1ec>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	f003 020f 	and.w	r2, r3, #15
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	3326      	adds	r3, #38	@ 0x26
 80095be:	2210      	movs	r2, #16
 80095c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095c2:	4b29      	ldr	r3, [pc, #164]	@ (8009668 <USBD_CDC_Init+0x1ec>)
 80095c4:	7819      	ldrb	r1, [r3, #0]
 80095c6:	2308      	movs	r3, #8
 80095c8:	2203      	movs	r2, #3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f004 ffb5 	bl	800e53a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80095d0:	4b25      	ldr	r3, [pc, #148]	@ (8009668 <USBD_CDC_Init+0x1ec>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f003 020f 	and.w	r2, r3, #15
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	440b      	add	r3, r1
 80095e4:	3324      	adds	r3, #36	@ 0x24
 80095e6:	2201      	movs	r2, #1
 80095e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	33b0      	adds	r3, #176	@ 0xb0
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009620:	2302      	movs	r3, #2
 8009622:	e018      	b.n	8009656 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7c1b      	ldrb	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800962c:	4b0d      	ldr	r3, [pc, #52]	@ (8009664 <USBD_CDC_Init+0x1e8>)
 800962e:	7819      	ldrb	r1, [r3, #0]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f005 f86c 	bl	800e718 <USBD_LL_PrepareReceive>
 8009640:	e008      	b.n	8009654 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009642:	4b08      	ldr	r3, [pc, #32]	@ (8009664 <USBD_CDC_Init+0x1e8>)
 8009644:	7819      	ldrb	r1, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800964c:	2340      	movs	r3, #64	@ 0x40
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f005 f862 	bl	800e718 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	2400008f 	.word	0x2400008f
 8009664:	24000090 	.word	0x24000090
 8009668:	24000091 	.word	0x24000091

0800966c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009678:	4b3a      	ldr	r3, [pc, #232]	@ (8009764 <USBD_CDC_DeInit+0xf8>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f004 ff81 	bl	800e586 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009684:	4b37      	ldr	r3, [pc, #220]	@ (8009764 <USBD_CDC_DeInit+0xf8>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 020f 	and.w	r2, r3, #15
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	440b      	add	r3, r1
 8009698:	3324      	adds	r3, #36	@ 0x24
 800969a:	2200      	movs	r2, #0
 800969c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800969e:	4b32      	ldr	r3, [pc, #200]	@ (8009768 <USBD_CDC_DeInit+0xfc>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f004 ff6e 	bl	800e586 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80096aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009768 <USBD_CDC_DeInit+0xfc>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	f003 020f 	and.w	r2, r3, #15
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096c2:	2200      	movs	r2, #0
 80096c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80096c6:	4b29      	ldr	r3, [pc, #164]	@ (800976c <USBD_CDC_DeInit+0x100>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f004 ff5a 	bl	800e586 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80096d2:	4b26      	ldr	r3, [pc, #152]	@ (800976c <USBD_CDC_DeInit+0x100>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 020f 	and.w	r2, r3, #15
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	3324      	adds	r3, #36	@ 0x24
 80096e8:	2200      	movs	r2, #0
 80096ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80096ec:	4b1f      	ldr	r3, [pc, #124]	@ (800976c <USBD_CDC_DeInit+0x100>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f003 020f 	and.w	r2, r3, #15
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	3326      	adds	r3, #38	@ 0x26
 8009702:	2200      	movs	r2, #0
 8009704:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	32b0      	adds	r2, #176	@ 0xb0
 8009710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01f      	beq.n	8009758 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	33b0      	adds	r3, #176	@ 0xb0
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	32b0      	adds	r2, #176	@ 0xb0
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	4618      	mov	r0, r3
 800973c:	f005 f82e 	bl	800e79c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	32b0      	adds	r2, #176	@ 0xb0
 800974a:	2100      	movs	r1, #0
 800974c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	2400008f 	.word	0x2400008f
 8009768:	24000090 	.word	0x24000090
 800976c:	24000091 	.word	0x24000091

08009770 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	32b0      	adds	r2, #176	@ 0xb0
 8009784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009788:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e0bf      	b.n	8009920 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d050      	beq.n	800984e <USBD_CDC_Setup+0xde>
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	f040 80af 	bne.w	8009910 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	88db      	ldrh	r3, [r3, #6]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d03a      	beq.n	8009830 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	da1b      	bge.n	80097fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	33b0      	adds	r3, #176	@ 0xb0
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80097da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	88d2      	ldrh	r2, [r2, #6]
 80097e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	88db      	ldrh	r3, [r3, #6]
 80097e6:	2b07      	cmp	r3, #7
 80097e8:	bf28      	it	cs
 80097ea:	2307      	movcs	r3, #7
 80097ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	89fa      	ldrh	r2, [r7, #14]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 fd7d 	bl	800b2f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80097fa:	e090      	b.n	800991e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	785a      	ldrb	r2, [r3, #1]
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	88db      	ldrh	r3, [r3, #6]
 800980a:	2b3f      	cmp	r3, #63	@ 0x3f
 800980c:	d803      	bhi.n	8009816 <USBD_CDC_Setup+0xa6>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	88db      	ldrh	r3, [r3, #6]
 8009812:	b2da      	uxtb	r2, r3
 8009814:	e000      	b.n	8009818 <USBD_CDC_Setup+0xa8>
 8009816:	2240      	movs	r2, #64	@ 0x40
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800981e:	6939      	ldr	r1, [r7, #16]
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009826:	461a      	mov	r2, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 fd8f 	bl	800b34c <USBD_CtlPrepareRx>
      break;
 800982e:	e076      	b.n	800991e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	33b0      	adds	r3, #176	@ 0xb0
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	7850      	ldrb	r0, [r2, #1]
 8009846:	2200      	movs	r2, #0
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	4798      	blx	r3
      break;
 800984c:	e067      	b.n	800991e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	785b      	ldrb	r3, [r3, #1]
 8009852:	2b0b      	cmp	r3, #11
 8009854:	d851      	bhi.n	80098fa <USBD_CDC_Setup+0x18a>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <USBD_CDC_Setup+0xec>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	0800988d 	.word	0x0800988d
 8009860:	08009909 	.word	0x08009909
 8009864:	080098fb 	.word	0x080098fb
 8009868:	080098fb 	.word	0x080098fb
 800986c:	080098fb 	.word	0x080098fb
 8009870:	080098fb 	.word	0x080098fb
 8009874:	080098fb 	.word	0x080098fb
 8009878:	080098fb 	.word	0x080098fb
 800987c:	080098fb 	.word	0x080098fb
 8009880:	080098fb 	.word	0x080098fb
 8009884:	080098b7 	.word	0x080098b7
 8009888:	080098e1 	.word	0x080098e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b03      	cmp	r3, #3
 8009896:	d107      	bne.n	80098a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009898:	f107 030a 	add.w	r3, r7, #10
 800989c:	2202      	movs	r2, #2
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f001 fd27 	bl	800b2f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098a6:	e032      	b.n	800990e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fca5 	bl	800b1fa <USBD_CtlError>
            ret = USBD_FAIL;
 80098b0:	2303      	movs	r3, #3
 80098b2:	75fb      	strb	r3, [r7, #23]
          break;
 80098b4:	e02b      	b.n	800990e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d107      	bne.n	80098d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098c2:	f107 030d 	add.w	r3, r7, #13
 80098c6:	2201      	movs	r2, #1
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 fd12 	bl	800b2f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098d0:	e01d      	b.n	800990e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 fc90 	bl	800b1fa <USBD_CtlError>
            ret = USBD_FAIL;
 80098da:	2303      	movs	r3, #3
 80098dc:	75fb      	strb	r3, [r7, #23]
          break;
 80098de:	e016      	b.n	800990e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d00f      	beq.n	800990c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 fc83 	bl	800b1fa <USBD_CtlError>
            ret = USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80098f8:	e008      	b.n	800990c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 fc7c 	bl	800b1fa <USBD_CtlError>
          ret = USBD_FAIL;
 8009902:	2303      	movs	r3, #3
 8009904:	75fb      	strb	r3, [r7, #23]
          break;
 8009906:	e002      	b.n	800990e <USBD_CDC_Setup+0x19e>
          break;
 8009908:	bf00      	nop
 800990a:	e008      	b.n	800991e <USBD_CDC_Setup+0x1ae>
          break;
 800990c:	bf00      	nop
      }
      break;
 800990e:	e006      	b.n	800991e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 fc71 	bl	800b1fa <USBD_CtlError>
      ret = USBD_FAIL;
 8009918:	2303      	movs	r3, #3
 800991a:	75fb      	strb	r3, [r7, #23]
      break;
 800991c:	bf00      	nop
  }

  return (uint8_t)ret;
 800991e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800993a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	32b0      	adds	r2, #176	@ 0xb0
 8009946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800994e:	2303      	movs	r3, #3
 8009950:	e065      	b.n	8009a1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	32b0      	adds	r2, #176	@ 0xb0
 800995c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009960:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	f003 020f 	and.w	r2, r3, #15
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	440b      	add	r3, r1
 8009974:	3318      	adds	r3, #24
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d02f      	beq.n	80099dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	f003 020f 	and.w	r2, r3, #15
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	3318      	adds	r3, #24
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	f003 010f 	and.w	r1, r3, #15
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	460b      	mov	r3, r1
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	440b      	add	r3, r1
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4403      	add	r3, r0
 80099a4:	331c      	adds	r3, #28
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d112      	bne.n	80099dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 020f 	and.w	r2, r3, #15
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	3318      	adds	r3, #24
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80099ce:	78f9      	ldrb	r1, [r7, #3]
 80099d0:	2300      	movs	r3, #0
 80099d2:	2200      	movs	r2, #0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f004 fe7e 	bl	800e6d6 <USBD_LL_Transmit>
 80099da:	e01f      	b.n	8009a1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	33b0      	adds	r3, #176	@ 0xb0
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d010      	beq.n	8009a1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	33b0      	adds	r3, #176	@ 0xb0
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	32b0      	adds	r2, #176	@ 0xb0
 8009a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	32b0      	adds	r2, #176	@ 0xb0
 8009a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e01a      	b.n	8009a8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f004 fe7c 	bl	800e75a <USBD_LL_GetRxDataSize>
 8009a62:	4602      	mov	r2, r0
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	33b0      	adds	r3, #176	@ 0xb0
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	32b0      	adds	r2, #176	@ 0xb0
 8009aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e024      	b.n	8009b02 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	33b0      	adds	r3, #176	@ 0xb0
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d019      	beq.n	8009b00 <USBD_CDC_EP0_RxReady+0x6a>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009ad2:	2bff      	cmp	r3, #255	@ 0xff
 8009ad4:	d014      	beq.n	8009b00 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	33b0      	adds	r3, #176	@ 0xb0
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009aee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009af6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	22ff      	movs	r2, #255	@ 0xff
 8009afc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b14:	2182      	movs	r1, #130	@ 0x82
 8009b16:	4818      	ldr	r0, [pc, #96]	@ (8009b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b18:	f000 fd0f 	bl	800a53a <USBD_GetEpDesc>
 8009b1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4815      	ldr	r0, [pc, #84]	@ (8009b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b22:	f000 fd0a 	bl	800a53a <USBD_GetEpDesc>
 8009b26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b28:	2181      	movs	r1, #129	@ 0x81
 8009b2a:	4813      	ldr	r0, [pc, #76]	@ (8009b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b2c:	f000 fd05 	bl	800a53a <USBD_GetEpDesc>
 8009b30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2210      	movs	r2, #16
 8009b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d006      	beq.n	8009b52 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b4c:	711a      	strb	r2, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b60:	711a      	strb	r2, [r3, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2243      	movs	r2, #67	@ 0x43
 8009b6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b6c:	4b02      	ldr	r3, [pc, #8]	@ (8009b78 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	2400004c 	.word	0x2400004c

08009b7c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b84:	2182      	movs	r1, #130	@ 0x82
 8009b86:	4818      	ldr	r0, [pc, #96]	@ (8009be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b88:	f000 fcd7 	bl	800a53a <USBD_GetEpDesc>
 8009b8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4815      	ldr	r0, [pc, #84]	@ (8009be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b92:	f000 fcd2 	bl	800a53a <USBD_GetEpDesc>
 8009b96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b98:	2181      	movs	r1, #129	@ 0x81
 8009b9a:	4813      	ldr	r0, [pc, #76]	@ (8009be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b9c:	f000 fccd 	bl	800a53a <USBD_GetEpDesc>
 8009ba0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2210      	movs	r2, #16
 8009bac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d006      	beq.n	8009bc2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	711a      	strb	r2, [r3, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f042 0202 	orr.w	r2, r2, #2
 8009bc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d006      	beq.n	8009bd6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	711a      	strb	r2, [r3, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f042 0202 	orr.w	r2, r2, #2
 8009bd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2243      	movs	r2, #67	@ 0x43
 8009bda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bdc:	4b02      	ldr	r3, [pc, #8]	@ (8009be8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	2400004c 	.word	0x2400004c

08009bec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bf4:	2182      	movs	r1, #130	@ 0x82
 8009bf6:	4818      	ldr	r0, [pc, #96]	@ (8009c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bf8:	f000 fc9f 	bl	800a53a <USBD_GetEpDesc>
 8009bfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bfe:	2101      	movs	r1, #1
 8009c00:	4815      	ldr	r0, [pc, #84]	@ (8009c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c02:	f000 fc9a 	bl	800a53a <USBD_GetEpDesc>
 8009c06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c08:	2181      	movs	r1, #129	@ 0x81
 8009c0a:	4813      	ldr	r0, [pc, #76]	@ (8009c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c0c:	f000 fc95 	bl	800a53a <USBD_GetEpDesc>
 8009c10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2210      	movs	r2, #16
 8009c1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d006      	beq.n	8009c32 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c2c:	711a      	strb	r2, [r3, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d006      	beq.n	8009c46 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c40:	711a      	strb	r2, [r3, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2243      	movs	r2, #67	@ 0x43
 8009c4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c4c:	4b02      	ldr	r3, [pc, #8]	@ (8009c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	2400004c 	.word	0x2400004c

08009c5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	220a      	movs	r2, #10
 8009c68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c6a:	4b03      	ldr	r3, [pc, #12]	@ (8009c78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	24000008 	.word	0x24000008

08009c7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e009      	b.n	8009ca4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	33b0      	adds	r3, #176	@ 0xb0
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	32b0      	adds	r2, #176	@ 0xb0
 8009cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e008      	b.n	8009ce8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	32b0      	adds	r2, #176	@ 0xb0
 8009d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e004      	b.n	8009d22 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
	...

08009d30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32b0      	adds	r2, #176	@ 0xb0
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	32b0      	adds	r2, #176	@ 0xb0
 8009d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e018      	b.n	8009d90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7c1b      	ldrb	r3, [r3, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d66:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <USBD_CDC_ReceivePacket+0x68>)
 8009d68:	7819      	ldrb	r1, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f004 fccf 	bl	800e718 <USBD_LL_PrepareReceive>
 8009d7a:	e008      	b.n	8009d8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d7c:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <USBD_CDC_ReceivePacket+0x68>)
 8009d7e:	7819      	ldrb	r1, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d86:	2340      	movs	r3, #64	@ 0x40
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f004 fcc5 	bl	800e718 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	24000090 	.word	0x24000090

08009d9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e01f      	b.n	8009df4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	79fa      	ldrb	r2, [r7, #7]
 8009de6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f004 fb3b 	bl	800e464 <USBD_LL_Init>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e025      	b.n	8009e60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32ae      	adds	r2, #174	@ 0xae
 8009e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00f      	beq.n	8009e50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32ae      	adds	r2, #174	@ 0xae
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e40:	f107 020e 	add.w	r2, r7, #14
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	4602      	mov	r2, r0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f004 fb47 	bl	800e504 <USBD_LL_Start>
 8009e76:	4603      	mov	r3, r0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d009      	beq.n	8009ec4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	78fa      	ldrb	r2, [r7, #3]
 8009eba:	4611      	mov	r1, r2
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	4798      	blx	r3
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	78fa      	ldrb	r2, [r7, #3]
 8009ee8:	4611      	mov	r1, r2
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f001 f936 	bl	800b186 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f28:	461a      	mov	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f36:	f003 031f 	and.w	r3, r3, #31
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d01a      	beq.n	8009f74 <USBD_LL_SetupStage+0x72>
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d822      	bhi.n	8009f88 <USBD_LL_SetupStage+0x86>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <USBD_LL_SetupStage+0x4a>
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d00a      	beq.n	8009f60 <USBD_LL_SetupStage+0x5e>
 8009f4a:	e01d      	b.n	8009f88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fb63 	bl	800a620 <USBD_StdDevReq>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5e:	e020      	b.n	8009fa2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fbcb 	bl	800a704 <USBD_StdItfReq>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]
      break;
 8009f72:	e016      	b.n	8009fa2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fc2d 	bl	800a7dc <USBD_StdEPReq>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73fb      	strb	r3, [r7, #15]
      break;
 8009f86:	e00c      	b.n	8009fa2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f004 fb14 	bl	800e5c4 <USBD_LL_StallEP>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa0:	bf00      	nop
  }

  return ret;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d16e      	bne.n	800a0a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009fca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	f040 8098 	bne.w	800a108 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d913      	bls.n	800a00c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	1ad2      	subs	r2, r2, r3
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	bf28      	it	cs
 8009ffe:	4613      	movcs	r3, r2
 800a000:	461a      	mov	r2, r3
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f001 f9be 	bl	800b386 <USBD_CtlContinueRx>
 800a00a:	e07d      	b.n	800a108 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a012:	f003 031f 	and.w	r3, r3, #31
 800a016:	2b02      	cmp	r3, #2
 800a018:	d014      	beq.n	800a044 <USBD_LL_DataOutStage+0x98>
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d81d      	bhi.n	800a05a <USBD_LL_DataOutStage+0xae>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <USBD_LL_DataOutStage+0x7c>
 800a022:	2b01      	cmp	r3, #1
 800a024:	d003      	beq.n	800a02e <USBD_LL_DataOutStage+0x82>
 800a026:	e018      	b.n	800a05a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	75bb      	strb	r3, [r7, #22]
            break;
 800a02c:	e018      	b.n	800a060 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a034:	b2db      	uxtb	r3, r3
 800a036:	4619      	mov	r1, r3
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 fa64 	bl	800a506 <USBD_CoreFindIF>
 800a03e:	4603      	mov	r3, r0
 800a040:	75bb      	strb	r3, [r7, #22]
            break;
 800a042:	e00d      	b.n	800a060 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fa66 	bl	800a520 <USBD_CoreFindEP>
 800a054:	4603      	mov	r3, r0
 800a056:	75bb      	strb	r3, [r7, #22]
            break;
 800a058:	e002      	b.n	800a060 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	75bb      	strb	r3, [r7, #22]
            break;
 800a05e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a060:	7dbb      	ldrb	r3, [r7, #22]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d119      	bne.n	800a09a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d113      	bne.n	800a09a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a072:	7dba      	ldrb	r2, [r7, #22]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	32ae      	adds	r2, #174	@ 0xae
 800a078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a082:	7dba      	ldrb	r2, [r7, #22]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a08a:	7dba      	ldrb	r2, [r7, #22]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	32ae      	adds	r2, #174	@ 0xae
 800a090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f001 f984 	bl	800b3a8 <USBD_CtlSendStatus>
 800a0a0:	e032      	b.n	800a108 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a0a2:	7afb      	ldrb	r3, [r7, #11]
 800a0a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 fa37 	bl	800a520 <USBD_CoreFindEP>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0b6:	7dbb      	ldrb	r3, [r7, #22]
 800a0b8:	2bff      	cmp	r3, #255	@ 0xff
 800a0ba:	d025      	beq.n	800a108 <USBD_LL_DataOutStage+0x15c>
 800a0bc:	7dbb      	ldrb	r3, [r7, #22]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d122      	bne.n	800a108 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d117      	bne.n	800a0fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0ce:	7dba      	ldrb	r2, [r7, #22]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	32ae      	adds	r2, #174	@ 0xae
 800a0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00f      	beq.n	800a0fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0de:	7dba      	ldrb	r2, [r7, #22]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0e6:	7dba      	ldrb	r2, [r7, #22]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	32ae      	adds	r2, #174	@ 0xae
 800a0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	7afa      	ldrb	r2, [r7, #11]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	4798      	blx	r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	e000      	b.n	800a10a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3718      	adds	r7, #24
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b086      	sub	sp, #24
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	460b      	mov	r3, r1
 800a11c:	607a      	str	r2, [r7, #4]
 800a11e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a120:	7afb      	ldrb	r3, [r7, #11]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d16f      	bne.n	800a206 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3314      	adds	r3, #20
 800a12a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a132:	2b02      	cmp	r3, #2
 800a134:	d15a      	bne.n	800a1ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d914      	bls.n	800a16c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	1ad2      	subs	r2, r2, r3
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	461a      	mov	r2, r3
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f001 f8e6 	bl	800b32a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a15e:	2300      	movs	r3, #0
 800a160:	2200      	movs	r2, #0
 800a162:	2100      	movs	r1, #0
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f004 fad7 	bl	800e718 <USBD_LL_PrepareReceive>
 800a16a:	e03f      	b.n	800a1ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	429a      	cmp	r2, r3
 800a176:	d11c      	bne.n	800a1b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a180:	429a      	cmp	r2, r3
 800a182:	d316      	bcc.n	800a1b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a18e:	429a      	cmp	r2, r3
 800a190:	d20f      	bcs.n	800a1b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a192:	2200      	movs	r2, #0
 800a194:	2100      	movs	r1, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f001 f8c7 	bl	800b32a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f004 fab4 	bl	800e718 <USBD_LL_PrepareReceive>
 800a1b0:	e01c      	b.n	800a1ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d10f      	bne.n	800a1de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d009      	beq.n	800a1de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1de:	2180      	movs	r1, #128	@ 0x80
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f004 f9ef 	bl	800e5c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f001 f8f1 	bl	800b3ce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d03a      	beq.n	800a26c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fe42 	bl	8009e80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a204:	e032      	b.n	800a26c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a206:	7afb      	ldrb	r3, [r7, #11]
 800a208:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f985 	bl	800a520 <USBD_CoreFindEP>
 800a216:	4603      	mov	r3, r0
 800a218:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a21a:	7dfb      	ldrb	r3, [r7, #23]
 800a21c:	2bff      	cmp	r3, #255	@ 0xff
 800a21e:	d025      	beq.n	800a26c <USBD_LL_DataInStage+0x15a>
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d122      	bne.n	800a26c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d11c      	bne.n	800a26c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a232:	7dfa      	ldrb	r2, [r7, #23]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	32ae      	adds	r2, #174	@ 0xae
 800a238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d014      	beq.n	800a26c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a242:	7dfa      	ldrb	r2, [r7, #23]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a24a:	7dfa      	ldrb	r2, [r7, #23]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	32ae      	adds	r2, #174	@ 0xae
 800a250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	7afa      	ldrb	r2, [r7, #11]
 800a258:	4611      	mov	r1, r2
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	4798      	blx	r3
 800a25e:	4603      	mov	r3, r0
 800a260:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a262:	7dbb      	ldrb	r3, [r7, #22]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a268:	7dbb      	ldrb	r3, [r7, #22]
 800a26a:	e000      	b.n	800a26e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d014      	beq.n	800a2dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00e      	beq.n	800a2dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	6852      	ldr	r2, [r2, #4]
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	4798      	blx	r3
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2dc:	2340      	movs	r3, #64	@ 0x40
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f004 f929 	bl	800e53a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2240      	movs	r2, #64	@ 0x40
 800a2f4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2f8:	2340      	movs	r3, #64	@ 0x40
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2180      	movs	r1, #128	@ 0x80
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f004 f91b 	bl	800e53a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2240      	movs	r2, #64	@ 0x40
 800a30e:	621a      	str	r2, [r3, #32]

  return ret;
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	d006      	beq.n	800a35c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a354:	b2da      	uxtb	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2204      	movs	r2, #4
 800a360:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a372:	b480      	push	{r7}
 800a374:	b083      	sub	sp, #12
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b04      	cmp	r3, #4
 800a384:	d106      	bne.n	800a394 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d110      	bne.n	800a3d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d2:	69db      	ldr	r3, [r3, #28]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	32ae      	adds	r2, #174	@ 0xae
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a400:	2303      	movs	r3, #3
 800a402:	e01c      	b.n	800a43e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d115      	bne.n	800a43c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	32ae      	adds	r2, #174	@ 0xae
 800a41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	32ae      	adds	r2, #174	@ 0xae
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b082      	sub	sp, #8
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	460b      	mov	r3, r1
 800a450:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	32ae      	adds	r2, #174	@ 0xae
 800a45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a464:	2303      	movs	r3, #3
 800a466:	e01c      	b.n	800a4a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b03      	cmp	r3, #3
 800a472:	d115      	bne.n	800a4a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	32ae      	adds	r2, #174	@ 0xae
 800a47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00b      	beq.n	800a4a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	32ae      	adds	r2, #174	@ 0xae
 800a492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a498:	78fa      	ldrb	r2, [r7, #3]
 800a49a:	4611      	mov	r1, r2
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00e      	beq.n	800a4fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	6852      	ldr	r2, [r2, #4]
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	460b      	mov	r3, r1
 800a510:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a512:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a52c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b086      	sub	sp, #24
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	885b      	ldrh	r3, [r3, #2]
 800a556:	b29b      	uxth	r3, r3
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	7812      	ldrb	r2, [r2, #0]
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d91f      	bls.n	800a5a0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a566:	e013      	b.n	800a590 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a568:	f107 030a 	add.w	r3, r7, #10
 800a56c:	4619      	mov	r1, r3
 800a56e:	6978      	ldr	r0, [r7, #20]
 800a570:	f000 f81b 	bl	800a5aa <USBD_GetNextDesc>
 800a574:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	785b      	ldrb	r3, [r3, #1]
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	d108      	bne.n	800a590 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	789b      	ldrb	r3, [r3, #2]
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d008      	beq.n	800a59e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	885b      	ldrh	r3, [r3, #2]
 800a594:	b29a      	uxth	r2, r3
 800a596:	897b      	ldrh	r3, [r7, #10]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d8e5      	bhi.n	800a568 <USBD_GetEpDesc+0x2e>
 800a59c:	e000      	b.n	800a5a0 <USBD_GetEpDesc+0x66>
          break;
 800a59e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a5a0:	693b      	ldr	r3, [r7, #16]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	7812      	ldrb	r2, [r2, #0]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b087      	sub	sp, #28
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a600:	8a3b      	ldrh	r3, [r7, #16]
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	b21a      	sxth	r2, r3
 800a606:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	b21b      	sxth	r3, r3
 800a60e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a610:	89fb      	ldrh	r3, [r7, #14]
}
 800a612:	4618      	mov	r0, r3
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
	...

0800a620 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a636:	2b40      	cmp	r3, #64	@ 0x40
 800a638:	d005      	beq.n	800a646 <USBD_StdDevReq+0x26>
 800a63a:	2b40      	cmp	r3, #64	@ 0x40
 800a63c:	d857      	bhi.n	800a6ee <USBD_StdDevReq+0xce>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00f      	beq.n	800a662 <USBD_StdDevReq+0x42>
 800a642:	2b20      	cmp	r3, #32
 800a644:	d153      	bne.n	800a6ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	32ae      	adds	r2, #174	@ 0xae
 800a650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	4798      	blx	r3
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	e04a      	b.n	800a6f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	785b      	ldrb	r3, [r3, #1]
 800a666:	2b09      	cmp	r3, #9
 800a668:	d83b      	bhi.n	800a6e2 <USBD_StdDevReq+0xc2>
 800a66a:	a201      	add	r2, pc, #4	@ (adr r2, 800a670 <USBD_StdDevReq+0x50>)
 800a66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a670:	0800a6c5 	.word	0x0800a6c5
 800a674:	0800a6d9 	.word	0x0800a6d9
 800a678:	0800a6e3 	.word	0x0800a6e3
 800a67c:	0800a6cf 	.word	0x0800a6cf
 800a680:	0800a6e3 	.word	0x0800a6e3
 800a684:	0800a6a3 	.word	0x0800a6a3
 800a688:	0800a699 	.word	0x0800a699
 800a68c:	0800a6e3 	.word	0x0800a6e3
 800a690:	0800a6bb 	.word	0x0800a6bb
 800a694:	0800a6ad 	.word	0x0800a6ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa3c 	bl	800ab18 <USBD_GetDescriptor>
          break;
 800a6a0:	e024      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fbcb 	bl	800ae40 <USBD_SetAddress>
          break;
 800a6aa:	e01f      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fc0a 	bl	800aec8 <USBD_SetConfig>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]
          break;
 800a6b8:	e018      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fcad 	bl	800b01c <USBD_GetConfig>
          break;
 800a6c2:	e013      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fcde 	bl	800b088 <USBD_GetStatus>
          break;
 800a6cc:	e00e      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fd0d 	bl	800b0f0 <USBD_SetFeature>
          break;
 800a6d6:	e009      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fd31 	bl	800b142 <USBD_ClrFeature>
          break;
 800a6e0:	e004      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fd88 	bl	800b1fa <USBD_CtlError>
          break;
 800a6ea:	bf00      	nop
      }
      break;
 800a6ec:	e004      	b.n	800a6f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fd82 	bl	800b1fa <USBD_CtlError>
      break;
 800a6f6:	bf00      	nop
  }

  return ret;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop

0800a704 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a71a:	2b40      	cmp	r3, #64	@ 0x40
 800a71c:	d005      	beq.n	800a72a <USBD_StdItfReq+0x26>
 800a71e:	2b40      	cmp	r3, #64	@ 0x40
 800a720:	d852      	bhi.n	800a7c8 <USBD_StdItfReq+0xc4>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <USBD_StdItfReq+0x26>
 800a726:	2b20      	cmp	r3, #32
 800a728:	d14e      	bne.n	800a7c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a730:	b2db      	uxtb	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	2b02      	cmp	r3, #2
 800a736:	d840      	bhi.n	800a7ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	889b      	ldrh	r3, [r3, #4]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d836      	bhi.n	800a7b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	889b      	ldrh	r3, [r3, #4]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff fedb 	bl	800a506 <USBD_CoreFindIF>
 800a750:	4603      	mov	r3, r0
 800a752:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2bff      	cmp	r3, #255	@ 0xff
 800a758:	d01d      	beq.n	800a796 <USBD_StdItfReq+0x92>
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d11a      	bne.n	800a796 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a760:	7bba      	ldrb	r2, [r7, #14]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	32ae      	adds	r2, #174	@ 0xae
 800a766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00f      	beq.n	800a790 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a770:	7bba      	ldrb	r2, [r7, #14]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a778:	7bba      	ldrb	r2, [r7, #14]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	32ae      	adds	r2, #174	@ 0xae
 800a77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a78e:	e004      	b.n	800a79a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a790:	2303      	movs	r3, #3
 800a792:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a794:	e001      	b.n	800a79a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a796:	2303      	movs	r3, #3
 800a798:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	88db      	ldrh	r3, [r3, #6]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d110      	bne.n	800a7c4 <USBD_StdItfReq+0xc0>
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10d      	bne.n	800a7c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fdfd 	bl	800b3a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7ae:	e009      	b.n	800a7c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fd21 	bl	800b1fa <USBD_CtlError>
          break;
 800a7b8:	e004      	b.n	800a7c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fd1c 	bl	800b1fa <USBD_CtlError>
          break;
 800a7c2:	e000      	b.n	800a7c6 <USBD_StdItfReq+0xc2>
          break;
 800a7c4:	bf00      	nop
      }
      break;
 800a7c6:	e004      	b.n	800a7d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fd15 	bl	800b1fa <USBD_CtlError>
      break;
 800a7d0:	bf00      	nop
  }

  return ret;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	889b      	ldrh	r3, [r3, #4]
 800a7ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7f8:	2b40      	cmp	r3, #64	@ 0x40
 800a7fa:	d007      	beq.n	800a80c <USBD_StdEPReq+0x30>
 800a7fc:	2b40      	cmp	r3, #64	@ 0x40
 800a7fe:	f200 817f 	bhi.w	800ab00 <USBD_StdEPReq+0x324>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02a      	beq.n	800a85c <USBD_StdEPReq+0x80>
 800a806:	2b20      	cmp	r3, #32
 800a808:	f040 817a 	bne.w	800ab00 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fe85 	bl	800a520 <USBD_CoreFindEP>
 800a816:	4603      	mov	r3, r0
 800a818:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a81a:	7b7b      	ldrb	r3, [r7, #13]
 800a81c:	2bff      	cmp	r3, #255	@ 0xff
 800a81e:	f000 8174 	beq.w	800ab0a <USBD_StdEPReq+0x32e>
 800a822:	7b7b      	ldrb	r3, [r7, #13]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 8170 	bne.w	800ab0a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a82a:	7b7a      	ldrb	r2, [r7, #13]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a832:	7b7a      	ldrb	r2, [r7, #13]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	32ae      	adds	r2, #174	@ 0xae
 800a838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 8163 	beq.w	800ab0a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a844:	7b7a      	ldrb	r2, [r7, #13]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	32ae      	adds	r2, #174	@ 0xae
 800a84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	4798      	blx	r3
 800a856:	4603      	mov	r3, r0
 800a858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a85a:	e156      	b.n	800ab0a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	2b03      	cmp	r3, #3
 800a862:	d008      	beq.n	800a876 <USBD_StdEPReq+0x9a>
 800a864:	2b03      	cmp	r3, #3
 800a866:	f300 8145 	bgt.w	800aaf4 <USBD_StdEPReq+0x318>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 809b 	beq.w	800a9a6 <USBD_StdEPReq+0x1ca>
 800a870:	2b01      	cmp	r3, #1
 800a872:	d03c      	beq.n	800a8ee <USBD_StdEPReq+0x112>
 800a874:	e13e      	b.n	800aaf4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d002      	beq.n	800a888 <USBD_StdEPReq+0xac>
 800a882:	2b03      	cmp	r3, #3
 800a884:	d016      	beq.n	800a8b4 <USBD_StdEPReq+0xd8>
 800a886:	e02c      	b.n	800a8e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <USBD_StdEPReq+0xce>
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	2b80      	cmp	r3, #128	@ 0x80
 800a892:	d00a      	beq.n	800a8aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f003 fe93 	bl	800e5c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a89e:	2180      	movs	r1, #128	@ 0x80
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f003 fe8f 	bl	800e5c4 <USBD_LL_StallEP>
 800a8a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8a8:	e020      	b.n	800a8ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fca4 	bl	800b1fa <USBD_CtlError>
              break;
 800a8b2:	e01b      	b.n	800a8ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	885b      	ldrh	r3, [r3, #2]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10e      	bne.n	800a8da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00b      	beq.n	800a8da <USBD_StdEPReq+0xfe>
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b80      	cmp	r3, #128	@ 0x80
 800a8c6:	d008      	beq.n	800a8da <USBD_StdEPReq+0xfe>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	88db      	ldrh	r3, [r3, #6]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f003 fe75 	bl	800e5c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fd64 	bl	800b3a8 <USBD_CtlSendStatus>

              break;
 800a8e0:	e004      	b.n	800a8ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fc88 	bl	800b1fa <USBD_CtlError>
              break;
 800a8ea:	bf00      	nop
          }
          break;
 800a8ec:	e107      	b.n	800aafe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d002      	beq.n	800a900 <USBD_StdEPReq+0x124>
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d016      	beq.n	800a92c <USBD_StdEPReq+0x150>
 800a8fe:	e04b      	b.n	800a998 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00d      	beq.n	800a922 <USBD_StdEPReq+0x146>
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b80      	cmp	r3, #128	@ 0x80
 800a90a:	d00a      	beq.n	800a922 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f003 fe57 	bl	800e5c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a916:	2180      	movs	r1, #128	@ 0x80
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f003 fe53 	bl	800e5c4 <USBD_LL_StallEP>
 800a91e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a920:	e040      	b.n	800a9a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fc68 	bl	800b1fa <USBD_CtlError>
              break;
 800a92a:	e03b      	b.n	800a9a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	885b      	ldrh	r3, [r3, #2]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d136      	bne.n	800a9a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f003 fe5d 	bl	800e602 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fd2d 	bl	800b3a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff fde4 	bl	800a520 <USBD_CoreFindEP>
 800a958:	4603      	mov	r3, r0
 800a95a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a95c:	7b7b      	ldrb	r3, [r7, #13]
 800a95e:	2bff      	cmp	r3, #255	@ 0xff
 800a960:	d01f      	beq.n	800a9a2 <USBD_StdEPReq+0x1c6>
 800a962:	7b7b      	ldrb	r3, [r7, #13]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11c      	bne.n	800a9a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a968:	7b7a      	ldrb	r2, [r7, #13]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a970:	7b7a      	ldrb	r2, [r7, #13]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	32ae      	adds	r2, #174	@ 0xae
 800a976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d010      	beq.n	800a9a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a980:	7b7a      	ldrb	r2, [r7, #13]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	32ae      	adds	r2, #174	@ 0xae
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a996:	e004      	b.n	800a9a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fc2d 	bl	800b1fa <USBD_CtlError>
              break;
 800a9a0:	e000      	b.n	800a9a4 <USBD_StdEPReq+0x1c8>
              break;
 800a9a2:	bf00      	nop
          }
          break;
 800a9a4:	e0ab      	b.n	800aafe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d002      	beq.n	800a9b8 <USBD_StdEPReq+0x1dc>
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d032      	beq.n	800aa1c <USBD_StdEPReq+0x240>
 800a9b6:	e097      	b.n	800aae8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d007      	beq.n	800a9ce <USBD_StdEPReq+0x1f2>
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
 800a9c0:	2b80      	cmp	r3, #128	@ 0x80
 800a9c2:	d004      	beq.n	800a9ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fc17 	bl	800b1fa <USBD_CtlError>
                break;
 800a9cc:	e091      	b.n	800aaf2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	da0b      	bge.n	800a9ee <USBD_StdEPReq+0x212>
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	3310      	adds	r3, #16
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	e00b      	b.n	800aa06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	4413      	add	r3, r2
 800aa04:	3304      	adds	r3, #4
 800aa06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2202      	movs	r2, #2
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fc6d 	bl	800b2f4 <USBD_CtlSendData>
              break;
 800aa1a:	e06a      	b.n	800aaf2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	da11      	bge.n	800aa48 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	f003 020f 	and.w	r2, r3, #15
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	3324      	adds	r3, #36	@ 0x24
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d117      	bne.n	800aa6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fbda 	bl	800b1fa <USBD_CtlError>
                  break;
 800aa46:	e054      	b.n	800aaf2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	f003 020f 	and.w	r2, r3, #15
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	4613      	mov	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	440b      	add	r3, r1
 800aa5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d104      	bne.n	800aa6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fbc7 	bl	800b1fa <USBD_CtlError>
                  break;
 800aa6c:	e041      	b.n	800aaf2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	da0b      	bge.n	800aa8e <USBD_StdEPReq+0x2b2>
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
 800aa78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	3310      	adds	r3, #16
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	4413      	add	r3, r2
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	e00b      	b.n	800aaa6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
 800aa90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <USBD_StdEPReq+0x2d8>
 800aaae:	7bbb      	ldrb	r3, [r7, #14]
 800aab0:	2b80      	cmp	r3, #128	@ 0x80
 800aab2:	d103      	bne.n	800aabc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2200      	movs	r2, #0
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	e00e      	b.n	800aada <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f003 fdbd 	bl	800e640 <USBD_LL_IsStallEP>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2201      	movs	r2, #1
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	e002      	b.n	800aada <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2200      	movs	r2, #0
 800aad8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2202      	movs	r2, #2
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fc07 	bl	800b2f4 <USBD_CtlSendData>
              break;
 800aae6:	e004      	b.n	800aaf2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fb85 	bl	800b1fa <USBD_CtlError>
              break;
 800aaf0:	bf00      	nop
          }
          break;
 800aaf2:	e004      	b.n	800aafe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fb7f 	bl	800b1fa <USBD_CtlError>
          break;
 800aafc:	bf00      	nop
      }
      break;
 800aafe:	e005      	b.n	800ab0c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fb79 	bl	800b1fa <USBD_CtlError>
      break;
 800ab08:	e000      	b.n	800ab0c <USBD_StdEPReq+0x330>
      break;
 800ab0a:	bf00      	nop
  }

  return ret;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	885b      	ldrh	r3, [r3, #2]
 800ab32:	0a1b      	lsrs	r3, r3, #8
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2b0e      	cmp	r3, #14
 800ab3a:	f200 8152 	bhi.w	800ade2 <USBD_GetDescriptor+0x2ca>
 800ab3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <USBD_GetDescriptor+0x2c>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800abb5 	.word	0x0800abb5
 800ab48:	0800abcd 	.word	0x0800abcd
 800ab4c:	0800ac0d 	.word	0x0800ac0d
 800ab50:	0800ade3 	.word	0x0800ade3
 800ab54:	0800ade3 	.word	0x0800ade3
 800ab58:	0800ad83 	.word	0x0800ad83
 800ab5c:	0800adaf 	.word	0x0800adaf
 800ab60:	0800ade3 	.word	0x0800ade3
 800ab64:	0800ade3 	.word	0x0800ade3
 800ab68:	0800ade3 	.word	0x0800ade3
 800ab6c:	0800ade3 	.word	0x0800ade3
 800ab70:	0800ade3 	.word	0x0800ade3
 800ab74:	0800ade3 	.word	0x0800ade3
 800ab78:	0800ade3 	.word	0x0800ade3
 800ab7c:	0800ab81 	.word	0x0800ab81
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	7c12      	ldrb	r2, [r2, #16]
 800ab98:	f107 0108 	add.w	r1, r7, #8
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
 800aba0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aba2:	e126      	b.n	800adf2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fb27 	bl	800b1fa <USBD_CtlError>
        err++;
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	3301      	adds	r3, #1
 800abb0:	72fb      	strb	r3, [r7, #11]
      break;
 800abb2:	e11e      	b.n	800adf2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	7c12      	ldrb	r2, [r2, #16]
 800abc0:	f107 0108 	add.w	r1, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
      break;
 800abca:	e112      	b.n	800adf2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	7c1b      	ldrb	r3, [r3, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10d      	bne.n	800abf0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abdc:	f107 0208 	add.w	r2, r7, #8
 800abe0:	4610      	mov	r0, r2
 800abe2:	4798      	blx	r3
 800abe4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3301      	adds	r3, #1
 800abea:	2202      	movs	r2, #2
 800abec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abee:	e100      	b.n	800adf2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf8:	f107 0208 	add.w	r2, r7, #8
 800abfc:	4610      	mov	r0, r2
 800abfe:	4798      	blx	r3
 800ac00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3301      	adds	r3, #1
 800ac06:	2202      	movs	r2, #2
 800ac08:	701a      	strb	r2, [r3, #0]
      break;
 800ac0a:	e0f2      	b.n	800adf2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	885b      	ldrh	r3, [r3, #2]
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b05      	cmp	r3, #5
 800ac14:	f200 80ac 	bhi.w	800ad70 <USBD_GetDescriptor+0x258>
 800ac18:	a201      	add	r2, pc, #4	@ (adr r2, 800ac20 <USBD_GetDescriptor+0x108>)
 800ac1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1e:	bf00      	nop
 800ac20:	0800ac39 	.word	0x0800ac39
 800ac24:	0800ac6d 	.word	0x0800ac6d
 800ac28:	0800aca1 	.word	0x0800aca1
 800ac2c:	0800acd5 	.word	0x0800acd5
 800ac30:	0800ad09 	.word	0x0800ad09
 800ac34:	0800ad3d 	.word	0x0800ad3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	7c12      	ldrb	r2, [r2, #16]
 800ac50:	f107 0108 	add.w	r1, r7, #8
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac5a:	e091      	b.n	800ad80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 facb 	bl	800b1fa <USBD_CtlError>
            err++;
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	3301      	adds	r3, #1
 800ac68:	72fb      	strb	r3, [r7, #11]
          break;
 800ac6a:	e089      	b.n	800ad80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	7c12      	ldrb	r2, [r2, #16]
 800ac84:	f107 0108 	add.w	r1, r7, #8
 800ac88:	4610      	mov	r0, r2
 800ac8a:	4798      	blx	r3
 800ac8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8e:	e077      	b.n	800ad80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fab1 	bl	800b1fa <USBD_CtlError>
            err++;
 800ac98:	7afb      	ldrb	r3, [r7, #11]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9e:	e06f      	b.n	800ad80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00b      	beq.n	800acc4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	7c12      	ldrb	r2, [r2, #16]
 800acb8:	f107 0108 	add.w	r1, r7, #8
 800acbc:	4610      	mov	r0, r2
 800acbe:	4798      	blx	r3
 800acc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acc2:	e05d      	b.n	800ad80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa97 	bl	800b1fa <USBD_CtlError>
            err++;
 800accc:	7afb      	ldrb	r3, [r7, #11]
 800acce:	3301      	adds	r3, #1
 800acd0:	72fb      	strb	r3, [r7, #11]
          break;
 800acd2:	e055      	b.n	800ad80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	7c12      	ldrb	r2, [r2, #16]
 800acec:	f107 0108 	add.w	r1, r7, #8
 800acf0:	4610      	mov	r0, r2
 800acf2:	4798      	blx	r3
 800acf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf6:	e043      	b.n	800ad80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fa7d 	bl	800b1fa <USBD_CtlError>
            err++;
 800ad00:	7afb      	ldrb	r3, [r7, #11]
 800ad02:	3301      	adds	r3, #1
 800ad04:	72fb      	strb	r3, [r7, #11]
          break;
 800ad06:	e03b      	b.n	800ad80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00b      	beq.n	800ad2c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	7c12      	ldrb	r2, [r2, #16]
 800ad20:	f107 0108 	add.w	r1, r7, #8
 800ad24:	4610      	mov	r0, r2
 800ad26:	4798      	blx	r3
 800ad28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad2a:	e029      	b.n	800ad80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fa63 	bl	800b1fa <USBD_CtlError>
            err++;
 800ad34:	7afb      	ldrb	r3, [r7, #11]
 800ad36:	3301      	adds	r3, #1
 800ad38:	72fb      	strb	r3, [r7, #11]
          break;
 800ad3a:	e021      	b.n	800ad80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00b      	beq.n	800ad60 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	7c12      	ldrb	r2, [r2, #16]
 800ad54:	f107 0108 	add.w	r1, r7, #8
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4798      	blx	r3
 800ad5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad5e:	e00f      	b.n	800ad80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fa49 	bl	800b1fa <USBD_CtlError>
            err++;
 800ad68:	7afb      	ldrb	r3, [r7, #11]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad6e:	e007      	b.n	800ad80 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fa41 	bl	800b1fa <USBD_CtlError>
          err++;
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad7e:	bf00      	nop
      }
      break;
 800ad80:	e037      	b.n	800adf2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	7c1b      	ldrb	r3, [r3, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d109      	bne.n	800ad9e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad92:	f107 0208 	add.w	r2, r7, #8
 800ad96:	4610      	mov	r0, r2
 800ad98:	4798      	blx	r3
 800ad9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad9c:	e029      	b.n	800adf2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fa2a 	bl	800b1fa <USBD_CtlError>
        err++;
 800ada6:	7afb      	ldrb	r3, [r7, #11]
 800ada8:	3301      	adds	r3, #1
 800adaa:	72fb      	strb	r3, [r7, #11]
      break;
 800adac:	e021      	b.n	800adf2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7c1b      	ldrb	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10d      	bne.n	800add2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adbe:	f107 0208 	add.w	r2, r7, #8
 800adc2:	4610      	mov	r0, r2
 800adc4:	4798      	blx	r3
 800adc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3301      	adds	r3, #1
 800adcc:	2207      	movs	r2, #7
 800adce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800add0:	e00f      	b.n	800adf2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fa10 	bl	800b1fa <USBD_CtlError>
        err++;
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	3301      	adds	r3, #1
 800adde:	72fb      	strb	r3, [r7, #11]
      break;
 800ade0:	e007      	b.n	800adf2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa08 	bl	800b1fa <USBD_CtlError>
      err++;
 800adea:	7afb      	ldrb	r3, [r7, #11]
 800adec:	3301      	adds	r3, #1
 800adee:	72fb      	strb	r3, [r7, #11]
      break;
 800adf0:	bf00      	nop
  }

  if (err != 0U)
 800adf2:	7afb      	ldrb	r3, [r7, #11]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d11e      	bne.n	800ae36 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	88db      	ldrh	r3, [r3, #6]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d016      	beq.n	800ae2e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae00:	893b      	ldrh	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00e      	beq.n	800ae24 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	88da      	ldrh	r2, [r3, #6]
 800ae0a:	893b      	ldrh	r3, [r7, #8]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	bf28      	it	cs
 800ae10:	4613      	movcs	r3, r2
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae16:	893b      	ldrh	r3, [r7, #8]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	68f9      	ldr	r1, [r7, #12]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fa69 	bl	800b2f4 <USBD_CtlSendData>
 800ae22:	e009      	b.n	800ae38 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f9e7 	bl	800b1fa <USBD_CtlError>
 800ae2c:	e004      	b.n	800ae38 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 faba 	bl	800b3a8 <USBD_CtlSendStatus>
 800ae34:	e000      	b.n	800ae38 <USBD_GetDescriptor+0x320>
    return;
 800ae36:	bf00      	nop
  }
}
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop

0800ae40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	889b      	ldrh	r3, [r3, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d131      	bne.n	800aeb6 <USBD_SetAddress+0x76>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	88db      	ldrh	r3, [r3, #6]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d12d      	bne.n	800aeb6 <USBD_SetAddress+0x76>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	885b      	ldrh	r3, [r3, #2]
 800ae5e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae60:	d829      	bhi.n	800aeb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	885b      	ldrh	r3, [r3, #2]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	d104      	bne.n	800ae84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f9bc 	bl	800b1fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae82:	e01d      	b.n	800aec0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	7bfa      	ldrb	r2, [r7, #15]
 800ae88:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f003 fc01 	bl	800e698 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fa86 	bl	800b3a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d004      	beq.n	800aeac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2202      	movs	r2, #2
 800aea6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeaa:	e009      	b.n	800aec0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb4:	e004      	b.n	800aec0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f99e 	bl	800b1fa <USBD_CtlError>
  }
}
 800aebe:	bf00      	nop
 800aec0:	bf00      	nop
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	885b      	ldrh	r3, [r3, #2]
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	4b4e      	ldr	r3, [pc, #312]	@ (800b018 <USBD_SetConfig+0x150>)
 800aede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aee0:	4b4d      	ldr	r3, [pc, #308]	@ (800b018 <USBD_SetConfig+0x150>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d905      	bls.n	800aef4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f985 	bl	800b1fa <USBD_CtlError>
    return USBD_FAIL;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e08c      	b.n	800b00e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d002      	beq.n	800af06 <USBD_SetConfig+0x3e>
 800af00:	2b03      	cmp	r3, #3
 800af02:	d029      	beq.n	800af58 <USBD_SetConfig+0x90>
 800af04:	e075      	b.n	800aff2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af06:	4b44      	ldr	r3, [pc, #272]	@ (800b018 <USBD_SetConfig+0x150>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d020      	beq.n	800af50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af0e:	4b42      	ldr	r3, [pc, #264]	@ (800b018 <USBD_SetConfig+0x150>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af18:	4b3f      	ldr	r3, [pc, #252]	@ (800b018 <USBD_SetConfig+0x150>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7fe ffb9 	bl	8009e96 <USBD_SetClassConfig>
 800af24:	4603      	mov	r3, r0
 800af26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d008      	beq.n	800af40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f962 	bl	800b1fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2202      	movs	r2, #2
 800af3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af3e:	e065      	b.n	800b00c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fa31 	bl	800b3a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2203      	movs	r2, #3
 800af4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af4e:	e05d      	b.n	800b00c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fa29 	bl	800b3a8 <USBD_CtlSendStatus>
      break;
 800af56:	e059      	b.n	800b00c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af58:	4b2f      	ldr	r3, [pc, #188]	@ (800b018 <USBD_SetConfig+0x150>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d112      	bne.n	800af86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af68:	4b2b      	ldr	r3, [pc, #172]	@ (800b018 <USBD_SetConfig+0x150>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	461a      	mov	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af72:	4b29      	ldr	r3, [pc, #164]	@ (800b018 <USBD_SetConfig+0x150>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7fe ffa8 	bl	8009ece <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa12 	bl	800b3a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af84:	e042      	b.n	800b00c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af86:	4b24      	ldr	r3, [pc, #144]	@ (800b018 <USBD_SetConfig+0x150>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d02a      	beq.n	800afea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7fe ff96 	bl	8009ece <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afa2:	4b1d      	ldr	r3, [pc, #116]	@ (800b018 <USBD_SetConfig+0x150>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afac:	4b1a      	ldr	r3, [pc, #104]	@ (800b018 <USBD_SetConfig+0x150>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7fe ff6f 	bl	8009e96 <USBD_SetClassConfig>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00f      	beq.n	800afe2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f918 	bl	800b1fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7fe ff7b 	bl	8009ece <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2202      	movs	r2, #2
 800afdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800afe0:	e014      	b.n	800b00c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f9e0 	bl	800b3a8 <USBD_CtlSendStatus>
      break;
 800afe8:	e010      	b.n	800b00c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f9dc 	bl	800b3a8 <USBD_CtlSendStatus>
      break;
 800aff0:	e00c      	b.n	800b00c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f900 	bl	800b1fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800affa:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <USBD_SetConfig+0x150>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7fe ff64 	bl	8009ece <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b006:	2303      	movs	r3, #3
 800b008:	73fb      	strb	r3, [r7, #15]
      break;
 800b00a:	bf00      	nop
  }

  return ret;
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	240002ec 	.word	0x240002ec

0800b01c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88db      	ldrh	r3, [r3, #6]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d004      	beq.n	800b038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f8e2 	bl	800b1fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b036:	e023      	b.n	800b080 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b02      	cmp	r3, #2
 800b042:	dc02      	bgt.n	800b04a <USBD_GetConfig+0x2e>
 800b044:	2b00      	cmp	r3, #0
 800b046:	dc03      	bgt.n	800b050 <USBD_GetConfig+0x34>
 800b048:	e015      	b.n	800b076 <USBD_GetConfig+0x5a>
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d00b      	beq.n	800b066 <USBD_GetConfig+0x4a>
 800b04e:	e012      	b.n	800b076 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3308      	adds	r3, #8
 800b05a:	2201      	movs	r2, #1
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f948 	bl	800b2f4 <USBD_CtlSendData>
        break;
 800b064:	e00c      	b.n	800b080 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3304      	adds	r3, #4
 800b06a:	2201      	movs	r2, #1
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f940 	bl	800b2f4 <USBD_CtlSendData>
        break;
 800b074:	e004      	b.n	800b080 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f8be 	bl	800b1fa <USBD_CtlError>
        break;
 800b07e:	bf00      	nop
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	3b01      	subs	r3, #1
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d81e      	bhi.n	800b0de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	88db      	ldrh	r3, [r3, #6]
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d004      	beq.n	800b0b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f8a5 	bl	800b1fa <USBD_CtlError>
        break;
 800b0b0:	e01a      	b.n	800b0e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d005      	beq.n	800b0ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f043 0202 	orr.w	r2, r3, #2
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f90c 	bl	800b2f4 <USBD_CtlSendData>
      break;
 800b0dc:	e004      	b.n	800b0e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f88a 	bl	800b1fa <USBD_CtlError>
      break;
 800b0e6:	bf00      	nop
  }
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	885b      	ldrh	r3, [r3, #2]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d107      	bne.n	800b112 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f94c 	bl	800b3a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b110:	e013      	b.n	800b13a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	885b      	ldrh	r3, [r3, #2]
 800b116:	2b02      	cmp	r3, #2
 800b118:	d10b      	bne.n	800b132 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	889b      	ldrh	r3, [r3, #4]
 800b11e:	0a1b      	lsrs	r3, r3, #8
 800b120:	b29b      	uxth	r3, r3
 800b122:	b2da      	uxtb	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f93c 	bl	800b3a8 <USBD_CtlSendStatus>
}
 800b130:	e003      	b.n	800b13a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f860 	bl	800b1fa <USBD_CtlError>
}
 800b13a:	bf00      	nop
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b082      	sub	sp, #8
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b152:	b2db      	uxtb	r3, r3
 800b154:	3b01      	subs	r3, #1
 800b156:	2b02      	cmp	r3, #2
 800b158:	d80b      	bhi.n	800b172 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	885b      	ldrh	r3, [r3, #2]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d10c      	bne.n	800b17c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f91c 	bl	800b3a8 <USBD_CtlSendStatus>
      }
      break;
 800b170:	e004      	b.n	800b17c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f840 	bl	800b1fa <USBD_CtlError>
      break;
 800b17a:	e000      	b.n	800b17e <USBD_ClrFeature+0x3c>
      break;
 800b17c:	bf00      	nop
  }
}
 800b17e:	bf00      	nop
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	781a      	ldrb	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	781a      	ldrb	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7ff fa16 	bl	800a5e2 <SWAPBYTE>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff fa09 	bl	800a5e2 <SWAPBYTE>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff f9fc 	bl	800a5e2 <SWAPBYTE>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	80da      	strh	r2, [r3, #6]
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b204:	2180      	movs	r1, #128	@ 0x80
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f003 f9dc 	bl	800e5c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b20c:	2100      	movs	r1, #0
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f003 f9d8 	bl	800e5c4 <USBD_LL_StallEP>
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b228:	2300      	movs	r3, #0
 800b22a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d042      	beq.n	800b2b8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b236:	6938      	ldr	r0, [r7, #16]
 800b238:	f000 f842 	bl	800b2c0 <USBD_GetLen>
 800b23c:	4603      	mov	r3, r0
 800b23e:	3301      	adds	r3, #1
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b246:	d808      	bhi.n	800b25a <USBD_GetString+0x3e>
 800b248:	6938      	ldr	r0, [r7, #16]
 800b24a:	f000 f839 	bl	800b2c0 <USBD_GetLen>
 800b24e:	4603      	mov	r3, r0
 800b250:	3301      	adds	r3, #1
 800b252:	b29b      	uxth	r3, r3
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	b29a      	uxth	r2, r3
 800b258:	e001      	b.n	800b25e <USBD_GetString+0x42>
 800b25a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	4413      	add	r3, r2
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	3301      	adds	r3, #1
 800b272:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	4413      	add	r3, r2
 800b27a:	2203      	movs	r2, #3
 800b27c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	3301      	adds	r3, #1
 800b282:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b284:	e013      	b.n	800b2ae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	4413      	add	r3, r2
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	7812      	ldrb	r2, [r2, #0]
 800b290:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	3301      	adds	r3, #1
 800b296:	613b      	str	r3, [r7, #16]
    idx++;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	3301      	adds	r3, #1
 800b29c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e7      	bne.n	800b286 <USBD_GetString+0x6a>
 800b2b6:	e000      	b.n	800b2ba <USBD_GetString+0x9e>
    return;
 800b2b8:	bf00      	nop
  }
}
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2d0:	e005      	b.n	800b2de <USBD_GetLen+0x1e>
  {
    len++;
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1f5      	bne.n	800b2d2 <USBD_GetLen+0x12>
  }

  return len;
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2202      	movs	r2, #2
 800b304:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	2100      	movs	r1, #0
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f003 f9db 	bl	800e6d6 <USBD_LL_Transmit>

  return USBD_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	2100      	movs	r1, #0
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f003 f9ca 	bl	800e6d6 <USBD_LL_Transmit>

  return USBD_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2203      	movs	r2, #3
 800b35c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	2100      	movs	r1, #0
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f003 f9ce 	bl	800e718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	2100      	movs	r1, #0
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f003 f9bd 	bl	800e718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f003 f989 	bl	800e6d6 <USBD_LL_Transmit>

  return USBD_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2205      	movs	r2, #5
 800b3da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3de:	2300      	movs	r3, #0
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f003 f997 	bl	800e718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2108      	movs	r1, #8
 800b3fc:	480a      	ldr	r0, [pc, #40]	@ (800b428 <ad7606_Init+0x34>)
 800b3fe:	f7f5 fdd5 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b402:	2001      	movs	r0, #1
 800b404:	f7f5 f84a 	bl	800049c <HAL_Delay>
    AD7606_RST_SET();
 800b408:	2201      	movs	r2, #1
 800b40a:	2108      	movs	r1, #8
 800b40c:	4806      	ldr	r0, [pc, #24]	@ (800b428 <ad7606_Init+0x34>)
 800b40e:	f7f5 fdcd 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800b412:	2001      	movs	r0, #1
 800b414:	f7f5 f842 	bl	800049c <HAL_Delay>
    AD7606_RST_RESET();
 800b418:	2200      	movs	r2, #0
 800b41a:	2108      	movs	r1, #8
 800b41c:	4802      	ldr	r0, [pc, #8]	@ (800b428 <ad7606_Init+0x34>)
 800b41e:	f7f5 fdc5 	bl	8000fac <HAL_GPIO_WritePin>
}
 800b422:	bf00      	nop
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	58021800 	.word	0x58021800

0800b42c <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800b43a:	2200      	movs	r2, #0
 800b43c:	2180      	movs	r1, #128	@ 0x80
 800b43e:	4809      	ldr	r0, [pc, #36]	@ (800b464 <ad7606_Read+0x38>)
 800b440:	f7f5 fdb4 	bl	8000fac <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800b444:	88fa      	ldrh	r2, [r7, #6]
 800b446:	2364      	movs	r3, #100	@ 0x64
 800b448:	68b9      	ldr	r1, [r7, #8]
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f7fa fd9a 	bl	8005f84 <HAL_SPI_Receive>
    AD7606_CS_SET();
 800b450:	2201      	movs	r2, #1
 800b452:	2180      	movs	r1, #128	@ 0x80
 800b454:	4803      	ldr	r0, [pc, #12]	@ (800b464 <ad7606_Read+0x38>)
 800b456:	f7f5 fda9 	bl	8000fac <HAL_GPIO_WritePin>
}
 800b45a:	bf00      	nop
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	58021800 	.word	0x58021800

0800b468 <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7fb fa11 	bl	800689c <HAL_TIM_PWM_Start>
}
 800b47a:	bf00      	nop
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	460b      	mov	r3, r1
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800b492:	2300      	movs	r3, #0
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	e03d      	b.n	800b514 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	da0f      	bge.n	800b4c8 <ad7606_Convert+0x44>
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	005b      	lsls	r3, r3, #1
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	425b      	negs	r3, r3
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	425b      	negs	r3, r3
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	b21b      	sxth	r3, r3
 800b4c6:	e005      	b.n	800b4d4 <ad7606_Convert+0x50>
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	0052      	lsls	r2, r2, #1
 800b4d8:	68f9      	ldr	r1, [r7, #12]
 800b4da:	440a      	add	r2, r1
 800b4dc:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4f2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800b4f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	4413      	add	r3, r2
 800b502:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800b52c <ad7606_Convert+0xa8>
 800b506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b50a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	3301      	adds	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	897b      	ldrh	r3, [r7, #10]
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	429a      	cmp	r2, r3
 800b51a:	dbbd      	blt.n	800b498 <ad7606_Convert+0x14>
    }
}
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	47000000 	.word	0x47000000

0800b530 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800b530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b534:	b087      	sub	sp, #28
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	460b      	mov	r3, r1
 800b53c:	607a      	str	r2, [r7, #4]
 800b53e:	817b      	strh	r3, [r7, #10]
 800b540:	466b      	mov	r3, sp
 800b542:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800b544:	8979      	ldrh	r1, [r7, #10]
 800b546:	460b      	mov	r3, r1
 800b548:	3b01      	subs	r3, #1
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	b28b      	uxth	r3, r1
 800b54e:	2200      	movs	r2, #0
 800b550:	4698      	mov	r8, r3
 800b552:	4691      	mov	r9, r2
 800b554:	f04f 0200 	mov.w	r2, #0
 800b558:	f04f 0300 	mov.w	r3, #0
 800b55c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800b560:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800b564:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800b568:	b28b      	uxth	r3, r1
 800b56a:	2200      	movs	r2, #0
 800b56c:	461c      	mov	r4, r3
 800b56e:	4615      	mov	r5, r2
 800b570:	f04f 0200 	mov.w	r2, #0
 800b574:	f04f 0300 	mov.w	r3, #0
 800b578:	012b      	lsls	r3, r5, #4
 800b57a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800b57e:	0122      	lsls	r2, r4, #4
 800b580:	460b      	mov	r3, r1
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	3307      	adds	r3, #7
 800b586:	08db      	lsrs	r3, r3, #3
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	ebad 0d03 	sub.w	sp, sp, r3
 800b58e:	466b      	mov	r3, sp
 800b590:	3301      	adds	r3, #1
 800b592:	085b      	lsrs	r3, r3, #1
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800b598:	897b      	ldrh	r3, [r7, #10]
 800b59a:	461a      	mov	r2, r3
 800b59c:	6939      	ldr	r1, [r7, #16]
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7ff ff44 	bl	800b42c <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800b5a4:	897b      	ldrh	r3, [r7, #10]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6938      	ldr	r0, [r7, #16]
 800b5ac:	f7ff ff6a 	bl	800b484 <ad7606_Convert>
 800b5b0:	46b5      	mov	sp, r6
}
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b5bc <ina238_Init>:
 * @brief  INA238初始化
 * @param  hi2c I2C句柄
 * @param  error 误差纠正
 */
void ina238_Init(I2C_HandleTypeDef *hi2c, int8_t error)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af04      	add	r7, sp, #16
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70fb      	strb	r3, [r7, #3]
	uint8_t pData[2];
	pData[0] = 0x00;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x00;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, CONFIG, 1, pData, 2, 100); // 量程选择为163.84mv
 800b5d0:	2364      	movs	r3, #100	@ 0x64
 800b5d2:	9302      	str	r3, [sp, #8]
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	f107 030c 	add.w	r3, r7, #12
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	2301      	movs	r3, #1
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2181      	movs	r1, #129	@ 0x81
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7f5 fdcb 	bl	8001180 <HAL_I2C_Mem_Write>
	pData[0] = 0xf4;
 800b5ea:	23f4      	movs	r3, #244	@ 0xf4
 800b5ec:	733b      	strb	r3, [r7, #12]
	pData[1] = 0x93;
 800b5ee:	2393      	movs	r3, #147	@ 0x93
 800b5f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, ADC_CONFIG, 1, pData, 2, 100); // 转换时间设置为9.6ms
 800b5f2:	2364      	movs	r3, #100	@ 0x64
 800b5f4:	9302      	str	r3, [sp, #8]
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	f107 030c 	add.w	r3, r7, #12
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	2301      	movs	r3, #1
 800b602:	2201      	movs	r2, #1
 800b604:	2181      	movs	r1, #129	@ 0x81
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7f5 fdba 	bl	8001180 <HAL_I2C_Mem_Write>
	pData[0] = 0x0f;
 800b60c:	230f      	movs	r3, #15
 800b60e:	733b      	strb	r3, [r7, #12]
	pData[1] = 0xa0 + error;
 800b610:	78fb      	ldrb	r3, [r7, #3]
 800b612:	3b60      	subs	r3, #96	@ 0x60
 800b614:	b2db      	uxtb	r3, r3
 800b616:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, ADDR_WRITE, SHUNT_CAL, 1, pData, 2, 100); // 设置最大电流为8A，采样电阻为20mΩ
 800b618:	2364      	movs	r3, #100	@ 0x64
 800b61a:	9302      	str	r3, [sp, #8]
 800b61c:	2302      	movs	r3, #2
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	f107 030c 	add.w	r3, r7, #12
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	2301      	movs	r3, #1
 800b628:	2202      	movs	r2, #2
 800b62a:	2181      	movs	r1, #129	@ 0x81
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7f5 fda7 	bl	8001180 <HAL_I2C_Mem_Write>
}
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	0000      	movs	r0, r0
 800b63c:	0000      	movs	r0, r0
	...

0800b640 <ina238_GetVolt>:
 * @brief  INA238读取电压
 * @param  hi2c I2C句柄
 * @retval 电压值
 */
float ina238_GetVolt(I2C_HandleTypeDef *hi2c)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af04      	add	r7, sp, #16
 800b646:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float volt;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, VBUS, 1, pData, 2, 100) == HAL_OK)
 800b648:	2364      	movs	r3, #100	@ 0x64
 800b64a:	9302      	str	r3, [sp, #8]
 800b64c:	2302      	movs	r3, #2
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	f107 0308 	add.w	r3, r7, #8
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	2301      	movs	r3, #1
 800b658:	2205      	movs	r2, #5
 800b65a:	2180      	movs	r1, #128	@ 0x80
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7f5 fea3 	bl	80013a8 <HAL_I2C_Mem_Read>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d137      	bne.n	800b6d8 <ina238_GetVolt+0x98>
	{
		volt = pData[0] * 256 + pData[1];
 800b668:	7a3b      	ldrb	r3, [r7, #8]
 800b66a:	021b      	lsls	r3, r3, #8
 800b66c:	7a7a      	ldrb	r2, [r7, #9]
 800b66e:	4413      	add	r3, r2
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b678:	edc7 7a03 	vstr	s15, [r7, #12]
		if (volt > 32767) // 为负数的情况
 800b67c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b680:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800b6f0 <ina238_GetVolt+0xb0>
 800b684:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b68c:	dd14      	ble.n	800b6b8 <ina238_GetVolt+0x78>
			volt = (volt - 65536) * 3.125 / 1000;
 800b68e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b692:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b6f4 <ina238_GetVolt+0xb4>
 800b696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b69a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b69e:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800b6a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6a6:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800b6e8 <ina238_GetVolt+0xa8>
 800b6aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b6b2:	edc7 7a03 	vstr	s15, [r7, #12]
 800b6b6:	e00f      	b.n	800b6d8 <ina238_GetVolt+0x98>
		else
			volt = volt * 3.125 / 1000;
 800b6b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6c0:	eeb0 6b09 	vmov.f64	d6, #9	@ 0x40480000  3.125
 800b6c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6c8:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 800b6e8 <ina238_GetVolt+0xa8>
 800b6cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b6d4:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return volt;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	ee07 3a90 	vmov	s15, r3
}
 800b6de:	eeb0 0a67 	vmov.f32	s0, s15
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	00000000 	.word	0x00000000
 800b6ec:	408f4000 	.word	0x408f4000
 800b6f0:	46fffe00 	.word	0x46fffe00
 800b6f4:	47800000 	.word	0x47800000

0800b6f8 <ina238_GetCurrent>:
 * @brief  INA238读取电流
 * @param  hi2c I2C句柄
 * @retval 电流值
 */
float ina238_GetCurrent(I2C_HandleTypeDef *hi2c)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af04      	add	r7, sp, #16
 800b6fe:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float current;
	if (HAL_I2C_Mem_Read(hi2c, ADDR_READ, CURRENT, 1, pData, 2, 100) == HAL_OK)
 800b700:	2364      	movs	r3, #100	@ 0x64
 800b702:	9302      	str	r3, [sp, #8]
 800b704:	2302      	movs	r3, #2
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	f107 0308 	add.w	r3, r7, #8
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	2301      	movs	r3, #1
 800b710:	2207      	movs	r2, #7
 800b712:	2180      	movs	r1, #128	@ 0x80
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7f5 fe47 	bl	80013a8 <HAL_I2C_Mem_Read>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d127      	bne.n	800b770 <ina238_GetCurrent+0x78>
	{
		current = pData[0] * 256 + pData[1];
 800b720:	7a3b      	ldrb	r3, [r7, #8]
 800b722:	021b      	lsls	r3, r3, #8
 800b724:	7a7a      	ldrb	r2, [r7, #9]
 800b726:	4413      	add	r3, r2
 800b728:	ee07 3a90 	vmov	s15, r3
 800b72c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b730:	edc7 7a03 	vstr	s15, [r7, #12]
		if (current > 32767)
 800b734:	edd7 7a03 	vldr	s15, [r7, #12]
 800b738:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800b780 <ina238_GetCurrent+0x88>
 800b73c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b744:	dd0c      	ble.n	800b760 <ina238_GetCurrent+0x68>
			current = (current - 65536) * (8 / 32768.0);
 800b746:	edd7 7a03 	vldr	s15, [r7, #12]
 800b74a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800b784 <ina238_GetCurrent+0x8c>
 800b74e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b752:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800b788 <ina238_GetCurrent+0x90>
 800b756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b75a:	edc7 7a03 	vstr	s15, [r7, #12]
 800b75e:	e007      	b.n	800b770 <ina238_GetCurrent+0x78>
		else
			current = current * (8 / 32768.0);
 800b760:	edd7 7a03 	vldr	s15, [r7, #12]
 800b764:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800b788 <ina238_GetCurrent+0x90>
 800b768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b76c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return current;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	ee07 3a90 	vmov	s15, r3
}
 800b776:	eeb0 0a67 	vmov.f32	s0, s15
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	46fffe00 	.word	0x46fffe00
 800b784:	47800000 	.word	0x47800000
 800b788:	39800000 	.word	0x39800000

0800b78c <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	460a      	mov	r2, r1
 800b796:	71fb      	strb	r3, [r7, #7]
 800b798:	4613      	mov	r3, r2
 800b79a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800b79c:	1dfb      	adds	r3, r7, #7
 800b79e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800b7a0:	79bb      	ldrb	r3, [r7, #6]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d005      	beq.n	800b7b2 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	2140      	movs	r1, #64	@ 0x40
 800b7aa:	4811      	ldr	r0, [pc, #68]	@ (800b7f0 <OLED_WR_Byte+0x64>)
 800b7ac:	f7f5 fbfe 	bl	8000fac <HAL_GPIO_WritePin>
 800b7b0:	e004      	b.n	800b7bc <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2140      	movs	r1, #64	@ 0x40
 800b7b6:	480e      	ldr	r0, [pc, #56]	@ (800b7f0 <OLED_WR_Byte+0x64>)
 800b7b8:	f7f5 fbf8 	bl	8000fac <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2102      	movs	r1, #2
 800b7c0:	480c      	ldr	r0, [pc, #48]	@ (800b7f4 <OLED_WR_Byte+0x68>)
 800b7c2:	f7f5 fbf3 	bl	8000fac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800b7c6:	23c8      	movs	r3, #200	@ 0xc8
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	68f9      	ldr	r1, [r7, #12]
 800b7cc:	480a      	ldr	r0, [pc, #40]	@ (800b7f8 <OLED_WR_Byte+0x6c>)
 800b7ce:	f7fa f9eb 	bl	8005ba8 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	2102      	movs	r1, #2
 800b7d6:	4807      	ldr	r0, [pc, #28]	@ (800b7f4 <OLED_WR_Byte+0x68>)
 800b7d8:	f7f5 fbe8 	bl	8000fac <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800b7dc:	2201      	movs	r2, #1
 800b7de:	2140      	movs	r1, #64	@ 0x40
 800b7e0:	4803      	ldr	r0, [pc, #12]	@ (800b7f0 <OLED_WR_Byte+0x64>)
 800b7e2:	f7f5 fbe3 	bl	8000fac <HAL_GPIO_WritePin>
}
 800b7e6:	bf00      	nop
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	58022000 	.word	0x58022000
 800b7f4:	58020400 	.word	0x58020400
 800b7f8:	240008e0 	.word	0x240008e0

0800b7fc <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800b802:	2300      	movs	r3, #0
 800b804:	71fb      	strb	r3, [r7, #7]
 800b806:	e026      	b.n	800b856 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800b808:	79fb      	ldrb	r3, [r7, #7]
 800b80a:	3b50      	subs	r3, #80	@ 0x50
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2100      	movs	r1, #0
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff ffbb 	bl	800b78c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800b816:	2100      	movs	r1, #0
 800b818:	2000      	movs	r0, #0
 800b81a:	f7ff ffb7 	bl	800b78c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800b81e:	2100      	movs	r1, #0
 800b820:	2010      	movs	r0, #16
 800b822:	f7ff ffb3 	bl	800b78c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800b826:	2300      	movs	r3, #0
 800b828:	71bb      	strb	r3, [r7, #6]
 800b82a:	e00d      	b.n	800b848 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800b82c:	79ba      	ldrb	r2, [r7, #6]
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	490d      	ldr	r1, [pc, #52]	@ (800b868 <OLED_Refresh+0x6c>)
 800b832:	00d2      	lsls	r2, r2, #3
 800b834:	440a      	add	r2, r1
 800b836:	4413      	add	r3, r2
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2101      	movs	r1, #1
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff ffa5 	bl	800b78c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800b842:	79bb      	ldrb	r3, [r7, #6]
 800b844:	3301      	adds	r3, #1
 800b846:	71bb      	strb	r3, [r7, #6]
 800b848:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	daed      	bge.n	800b82c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	3301      	adds	r3, #1
 800b854:	71fb      	strb	r3, [r7, #7]
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	2b07      	cmp	r3, #7
 800b85a:	d9d5      	bls.n	800b808 <OLED_Refresh+0xc>
	}
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	240002f0 	.word	0x240002f0

0800b86c <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800b872:	2300      	movs	r3, #0
 800b874:	71fb      	strb	r3, [r7, #7]
 800b876:	e014      	b.n	800b8a2 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800b878:	2300      	movs	r3, #0
 800b87a:	71bb      	strb	r3, [r7, #6]
 800b87c:	e00a      	b.n	800b894 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800b87e:	79ba      	ldrb	r2, [r7, #6]
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	490c      	ldr	r1, [pc, #48]	@ (800b8b4 <OLED_Clear+0x48>)
 800b884:	00d2      	lsls	r2, r2, #3
 800b886:	440a      	add	r2, r1
 800b888:	4413      	add	r3, r2
 800b88a:	2200      	movs	r2, #0
 800b88c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800b88e:	79bb      	ldrb	r3, [r7, #6]
 800b890:	3301      	adds	r3, #1
 800b892:	71bb      	strb	r3, [r7, #6]
 800b894:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	daf0      	bge.n	800b87e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	71fb      	strb	r3, [r7, #7]
 800b8a2:	79fb      	ldrb	r3, [r7, #7]
 800b8a4:	2b07      	cmp	r3, #7
 800b8a6:	d9e7      	bls.n	800b878 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800b8a8:	f7ff ffa8 	bl	800b7fc <OLED_Refresh>
}
 800b8ac:	bf00      	nop
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	240002f0 	.word	0x240002f0

0800b8b8 <OLED_DrawPoint>:

// 画点
// x:0~127
// y:0~63
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	460a      	mov	r2, r1
 800b8c2:	71fb      	strb	r3, [r7, #7]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800b8c8:	79bb      	ldrb	r3, [r7, #6]
 800b8ca:	08db      	lsrs	r3, r3, #3
 800b8cc:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800b8ce:	79bb      	ldrb	r3, [r7, #6]
 800b8d0:	f003 0307 	and.w	r3, r3, #7
 800b8d4:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	fa02 f303 	lsl.w	r3, r2, r3
 800b8de:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800b8e0:	79fa      	ldrb	r2, [r7, #7]
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
 800b8e4:	490a      	ldr	r1, [pc, #40]	@ (800b910 <OLED_DrawPoint+0x58>)
 800b8e6:	00d2      	lsls	r2, r2, #3
 800b8e8:	440a      	add	r2, r1
 800b8ea:	4413      	add	r3, r2
 800b8ec:	7818      	ldrb	r0, [r3, #0]
 800b8ee:	79fa      	ldrb	r2, [r7, #7]
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
 800b8f2:	7b79      	ldrb	r1, [r7, #13]
 800b8f4:	4301      	orrs	r1, r0
 800b8f6:	b2c8      	uxtb	r0, r1
 800b8f8:	4905      	ldr	r1, [pc, #20]	@ (800b910 <OLED_DrawPoint+0x58>)
 800b8fa:	00d2      	lsls	r2, r2, #3
 800b8fc:	440a      	add	r2, r1
 800b8fe:	4413      	add	r3, r2
 800b900:	4602      	mov	r2, r0
 800b902:	701a      	strb	r2, [r3, #0]
}
 800b904:	bf00      	nop
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	240002f0 	.word	0x240002f0

0800b914 <OLED_ClearPoint>:

// 清除一个点
// x:0~127
// y:0~63
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	460a      	mov	r2, r1
 800b91e:	71fb      	strb	r3, [r7, #7]
 800b920:	4613      	mov	r3, r2
 800b922:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800b924:	79bb      	ldrb	r3, [r7, #6]
 800b926:	08db      	lsrs	r3, r3, #3
 800b928:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800b92a:	79bb      	ldrb	r3, [r7, #6]
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	2201      	movs	r2, #1
 800b936:	fa02 f303 	lsl.w	r3, r2, r3
 800b93a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800b93c:	79fa      	ldrb	r2, [r7, #7]
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
 800b940:	491b      	ldr	r1, [pc, #108]	@ (800b9b0 <OLED_ClearPoint+0x9c>)
 800b942:	00d2      	lsls	r2, r2, #3
 800b944:	440a      	add	r2, r1
 800b946:	4413      	add	r3, r2
 800b948:	7819      	ldrb	r1, [r3, #0]
 800b94a:	79fa      	ldrb	r2, [r7, #7]
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	43c9      	mvns	r1, r1
 800b950:	b2c8      	uxtb	r0, r1
 800b952:	4917      	ldr	r1, [pc, #92]	@ (800b9b0 <OLED_ClearPoint+0x9c>)
 800b954:	00d2      	lsls	r2, r2, #3
 800b956:	440a      	add	r2, r1
 800b958:	4413      	add	r3, r2
 800b95a:	4602      	mov	r2, r0
 800b95c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800b95e:	79fa      	ldrb	r2, [r7, #7]
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	4913      	ldr	r1, [pc, #76]	@ (800b9b0 <OLED_ClearPoint+0x9c>)
 800b964:	00d2      	lsls	r2, r2, #3
 800b966:	440a      	add	r2, r1
 800b968:	4413      	add	r3, r2
 800b96a:	7818      	ldrb	r0, [r3, #0]
 800b96c:	79fa      	ldrb	r2, [r7, #7]
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	7b79      	ldrb	r1, [r7, #13]
 800b972:	4301      	orrs	r1, r0
 800b974:	b2c8      	uxtb	r0, r1
 800b976:	490e      	ldr	r1, [pc, #56]	@ (800b9b0 <OLED_ClearPoint+0x9c>)
 800b978:	00d2      	lsls	r2, r2, #3
 800b97a:	440a      	add	r2, r1
 800b97c:	4413      	add	r3, r2
 800b97e:	4602      	mov	r2, r0
 800b980:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800b982:	79fa      	ldrb	r2, [r7, #7]
 800b984:	7bfb      	ldrb	r3, [r7, #15]
 800b986:	490a      	ldr	r1, [pc, #40]	@ (800b9b0 <OLED_ClearPoint+0x9c>)
 800b988:	00d2      	lsls	r2, r2, #3
 800b98a:	440a      	add	r2, r1
 800b98c:	4413      	add	r3, r2
 800b98e:	7819      	ldrb	r1, [r3, #0]
 800b990:	79fa      	ldrb	r2, [r7, #7]
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	43c9      	mvns	r1, r1
 800b996:	b2c8      	uxtb	r0, r1
 800b998:	4905      	ldr	r1, [pc, #20]	@ (800b9b0 <OLED_ClearPoint+0x9c>)
 800b99a:	00d2      	lsls	r2, r2, #3
 800b99c:	440a      	add	r2, r1
 800b99e:	4413      	add	r3, r2
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	701a      	strb	r2, [r3, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	240002f0 	.word	0x240002f0

0800b9b4 <OLED_ShowChar>:
// x:0~127
// y:0~63
// size:选择字体 12/16/24
// 取模方式 逐列式
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800b9b4:	b590      	push	{r4, r7, lr}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4611      	mov	r1, r2
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4623      	mov	r3, r4
 800b9c4:	71fb      	strb	r3, [r7, #7]
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	71bb      	strb	r3, [r7, #6]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	717b      	strb	r3, [r7, #5]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800b9d2:	79bb      	ldrb	r3, [r7, #6]
 800b9d4:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800b9d6:	793b      	ldrb	r3, [r7, #4]
 800b9d8:	08db      	lsrs	r3, r3, #3
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	461a      	mov	r2, r3
 800b9de:	793b      	ldrb	r3, [r7, #4]
 800b9e0:	f003 0307 	and.w	r3, r3, #7
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bf14      	ite	ne
 800b9ea:	2301      	movne	r3, #1
 800b9ec:	2300      	moveq	r3, #0
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	4413      	add	r3, r2
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	793b      	ldrb	r3, [r7, #4]
 800b9f6:	085b      	lsrs	r3, r3, #1
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	fb12 f303 	smulbb	r3, r2, r3
 800b9fe:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800ba00:	797b      	ldrb	r3, [r7, #5]
 800ba02:	3b20      	subs	r3, #32
 800ba04:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]
 800ba0a:	e057      	b.n	800babc <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800ba0c:	793b      	ldrb	r3, [r7, #4]
 800ba0e:	2b0c      	cmp	r3, #12
 800ba10:	d10b      	bne.n	800ba2a <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800ba12:	7aba      	ldrb	r2, [r7, #10]
 800ba14:	7bf9      	ldrb	r1, [r7, #15]
 800ba16:	482e      	ldr	r0, [pc, #184]	@ (800bad0 <OLED_ShowChar+0x11c>)
 800ba18:	4613      	mov	r3, r2
 800ba1a:	005b      	lsls	r3, r3, #1
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4403      	add	r3, r0
 800ba22:	440b      	add	r3, r1
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	737b      	strb	r3, [r7, #13]
 800ba28:	e019      	b.n	800ba5e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800ba2a:	793b      	ldrb	r3, [r7, #4]
 800ba2c:	2b10      	cmp	r3, #16
 800ba2e:	d108      	bne.n	800ba42 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800ba30:	7aba      	ldrb	r2, [r7, #10]
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
 800ba34:	4927      	ldr	r1, [pc, #156]	@ (800bad4 <OLED_ShowChar+0x120>)
 800ba36:	0112      	lsls	r2, r2, #4
 800ba38:	440a      	add	r2, r1
 800ba3a:	4413      	add	r3, r2
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	737b      	strb	r3, [r7, #13]
 800ba40:	e00d      	b.n	800ba5e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800ba42:	793b      	ldrb	r3, [r7, #4]
 800ba44:	2b18      	cmp	r3, #24
 800ba46:	d13e      	bne.n	800bac6 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800ba48:	7aba      	ldrb	r2, [r7, #10]
 800ba4a:	7bf9      	ldrb	r1, [r7, #15]
 800ba4c:	4822      	ldr	r0, [pc, #136]	@ (800bad8 <OLED_ShowChar+0x124>)
 800ba4e:	4613      	mov	r3, r2
 800ba50:	00db      	lsls	r3, r3, #3
 800ba52:	4413      	add	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4403      	add	r3, r0
 800ba58:	440b      	add	r3, r1
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73bb      	strb	r3, [r7, #14]
 800ba62:	e025      	b.n	800bab0 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800ba64:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	da06      	bge.n	800ba7a <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800ba6c:	79ba      	ldrb	r2, [r7, #6]
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff ff20 	bl	800b8b8 <OLED_DrawPoint>
 800ba78:	e005      	b.n	800ba86 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800ba7a:	79ba      	ldrb	r2, [r7, #6]
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff ff47 	bl	800b914 <OLED_ClearPoint>
			temp <<= 1;
 800ba86:	7b7b      	ldrb	r3, [r7, #13]
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	737b      	strb	r3, [r7, #13]
			y++;
 800ba8c:	79bb      	ldrb	r3, [r7, #6]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800ba92:	79ba      	ldrb	r2, [r7, #6]
 800ba94:	7b3b      	ldrb	r3, [r7, #12]
 800ba96:	1ad2      	subs	r2, r2, r3
 800ba98:	793b      	ldrb	r3, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d105      	bne.n	800baaa <OLED_ShowChar+0xf6>
			{
				y = y0;
 800ba9e:	7b3b      	ldrb	r3, [r7, #12]
 800baa0:	71bb      	strb	r3, [r7, #6]
				x++;
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	3301      	adds	r3, #1
 800baa6:	71fb      	strb	r3, [r7, #7]
				break;
 800baa8:	e005      	b.n	800bab6 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	3301      	adds	r3, #1
 800baae:	73bb      	strb	r3, [r7, #14]
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
 800bab2:	2b07      	cmp	r3, #7
 800bab4:	d9d6      	bls.n	800ba64 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
 800bab8:	3301      	adds	r3, #1
 800baba:	73fb      	strb	r3, [r7, #15]
 800babc:	7bfa      	ldrb	r2, [r7, #15]
 800babe:	7afb      	ldrb	r3, [r7, #11]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d3a3      	bcc.n	800ba0c <OLED_ShowChar+0x58>
 800bac4:	e000      	b.n	800bac8 <OLED_ShowChar+0x114>
			return;
 800bac6:	bf00      	nop
			}
		}
	}
}
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd90      	pop	{r4, r7, pc}
 800bace:	bf00      	nop
 800bad0:	08011c60 	.word	0x08011c60
 800bad4:	080120d4 	.word	0x080120d4
 800bad8:	080126c4 	.word	0x080126c4

0800badc <OLED_ShowString>:
// 显示字符串
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	603a      	str	r2, [r7, #0]
 800bae4:	461a      	mov	r2, r3
 800bae6:	4603      	mov	r3, r0
 800bae8:	71fb      	strb	r3, [r7, #7]
 800baea:	460b      	mov	r3, r1
 800baec:	71bb      	strb	r3, [r7, #6]
 800baee:	4613      	mov	r3, r2
 800baf0:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800baf2:	e01b      	b.n	800bb2c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	797b      	ldrb	r3, [r7, #5]
 800bafa:	79b9      	ldrb	r1, [r7, #6]
 800bafc:	79f8      	ldrb	r0, [r7, #7]
 800bafe:	f7ff ff59 	bl	800b9b4 <OLED_ShowChar>
		x += size1 / 2;
 800bb02:	797b      	ldrb	r3, [r7, #5]
 800bb04:	085b      	lsrs	r3, r3, #1
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	79fb      	ldrb	r3, [r7, #7]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800bb0e:	79fa      	ldrb	r2, [r7, #7]
 800bb10:	797b      	ldrb	r3, [r7, #5]
 800bb12:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800bb16:	429a      	cmp	r2, r3
 800bb18:	dd05      	ble.n	800bb26 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800bb1e:	79ba      	ldrb	r2, [r7, #6]
 800bb20:	797b      	ldrb	r3, [r7, #5]
 800bb22:	4413      	add	r3, r2
 800bb24:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2b1f      	cmp	r3, #31
 800bb32:	d903      	bls.n	800bb3c <OLED_ShowString+0x60>
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	2b7e      	cmp	r3, #126	@ 0x7e
 800bb3a:	d9db      	bls.n	800baf4 <OLED_ShowString+0x18>
	}
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2120      	movs	r1, #32
 800bb4c:	483f      	ldr	r0, [pc, #252]	@ (800bc4c <OLED_Init+0x108>)
 800bb4e:	f7f5 fa2d 	bl	8000fac <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800bb52:	20c8      	movs	r0, #200	@ 0xc8
 800bb54:	f7f4 fca2 	bl	800049c <HAL_Delay>
	OLED_RES_Set();
 800bb58:	2201      	movs	r2, #1
 800bb5a:	2120      	movs	r1, #32
 800bb5c:	483b      	ldr	r0, [pc, #236]	@ (800bc4c <OLED_Init+0x108>)
 800bb5e:	f7f5 fa25 	bl	8000fac <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800bb62:	2100      	movs	r1, #0
 800bb64:	20ae      	movs	r0, #174	@ 0xae
 800bb66:	f7ff fe11 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	f7ff fe0d 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800bb72:	2100      	movs	r1, #0
 800bb74:	2010      	movs	r0, #16
 800bb76:	f7ff fe09 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	2040      	movs	r0, #64	@ 0x40
 800bb7e:	f7ff fe05 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800bb82:	2100      	movs	r1, #0
 800bb84:	2081      	movs	r0, #129	@ 0x81
 800bb86:	f7ff fe01 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	20cf      	movs	r0, #207	@ 0xcf
 800bb8e:	f7ff fdfd 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800bb92:	2100      	movs	r1, #0
 800bb94:	20a1      	movs	r0, #161	@ 0xa1
 800bb96:	f7ff fdf9 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	20c8      	movs	r0, #200	@ 0xc8
 800bb9e:	f7ff fdf5 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800bba2:	2100      	movs	r1, #0
 800bba4:	20a6      	movs	r0, #166	@ 0xa6
 800bba6:	f7ff fdf1 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800bbaa:	2100      	movs	r1, #0
 800bbac:	20a8      	movs	r0, #168	@ 0xa8
 800bbae:	f7ff fded 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	203f      	movs	r0, #63	@ 0x3f
 800bbb6:	f7ff fde9 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800bbba:	2100      	movs	r1, #0
 800bbbc:	20d3      	movs	r0, #211	@ 0xd3
 800bbbe:	f7ff fde5 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f7ff fde1 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800bbca:	2100      	movs	r1, #0
 800bbcc:	20d5      	movs	r0, #213	@ 0xd5
 800bbce:	f7ff fddd 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	2080      	movs	r0, #128	@ 0x80
 800bbd6:	f7ff fdd9 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800bbda:	2100      	movs	r1, #0
 800bbdc:	20d9      	movs	r0, #217	@ 0xd9
 800bbde:	f7ff fdd5 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	20f1      	movs	r0, #241	@ 0xf1
 800bbe6:	f7ff fdd1 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800bbea:	2100      	movs	r1, #0
 800bbec:	20da      	movs	r0, #218	@ 0xda
 800bbee:	f7ff fdcd 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	2012      	movs	r0, #18
 800bbf6:	f7ff fdc9 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	20db      	movs	r0, #219	@ 0xdb
 800bbfe:	f7ff fdc5 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800bc02:	2100      	movs	r1, #0
 800bc04:	2040      	movs	r0, #64	@ 0x40
 800bc06:	f7ff fdc1 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	2020      	movs	r0, #32
 800bc0e:	f7ff fdbd 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800bc12:	2100      	movs	r1, #0
 800bc14:	2002      	movs	r0, #2
 800bc16:	f7ff fdb9 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	208d      	movs	r0, #141	@ 0x8d
 800bc1e:	f7ff fdb5 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800bc22:	2100      	movs	r1, #0
 800bc24:	2014      	movs	r0, #20
 800bc26:	f7ff fdb1 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	20a4      	movs	r0, #164	@ 0xa4
 800bc2e:	f7ff fdad 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800bc32:	2100      	movs	r1, #0
 800bc34:	20a6      	movs	r0, #166	@ 0xa6
 800bc36:	f7ff fda9 	bl	800b78c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	20af      	movs	r0, #175	@ 0xaf
 800bc3e:	f7ff fda5 	bl	800b78c <OLED_WR_Byte>
	OLED_Clear();
 800bc42:	f7ff fe13 	bl	800b86c <OLED_Clear>
}
 800bc46:	bf00      	nop
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	58020800 	.word	0x58020800

0800bc50 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6178      	str	r0, [r7, #20]
 800bc58:	ed87 0a04 	vstr	s0, [r7, #16]
 800bc5c:	edc7 0a03 	vstr	s1, [r7, #12]
 800bc60:	ed87 1a02 	vstr	s2, [r7, #8]
 800bc64:	edc7 1a01 	vstr	s3, [r7, #4]
 800bc68:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f04f 0200 	mov.w	r2, #0
 800bc98:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f04f 0200 	mov.w	r2, #0
 800bca0:	615a      	str	r2, [r3, #20]
}
 800bca2:	bf00      	nop
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b085      	sub	sp, #20
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	ed87 0a02 	vstr	s0, [r7, #8]
 800bcba:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800bcbe:	ed97 7a02 	vldr	s14, [r7, #8]
 800bcc2:	edd7 7a01 	vldr	s15, [r7, #4]
 800bcc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	ed93 7a06 	vldr	s14, [r3, #24]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	edd3 6a00 	vldr	s13, [r3]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	ed93 6a03 	vldr	s12, [r3, #12]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	edd3 7a04 	vldr	s15, [r3, #16]
 800bce8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bcec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	ed93 6a01 	vldr	s12, [r3, #4]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	edd3 7a03 	vldr	s15, [r3, #12]
 800bcfc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bd00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	ed93 6a02 	vldr	s12, [r3, #8]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	edd3 5a03 	vldr	s11, [r3, #12]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd1a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	edd3 7a05 	vldr	s15, [r3, #20]
 800bd24:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800bd28:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bd2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	691a      	ldr	r2, [r3, #16]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	68da      	ldr	r2, [r3, #12]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	ed93 7a06 	vldr	s14, [r3, #24]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	edd3 7a07 	vldr	s15, [r3, #28]
 800bd56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5e:	dd04      	ble.n	800bd6a <pid+0xbc>
		pid->out = pid->Max;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	69da      	ldr	r2, [r3, #28]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 800bd68:	e00f      	b.n	800bd8a <pid+0xdc>
	else if (pid->out < pid->Min)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	ed93 7a06 	vldr	s14, [r3, #24]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	edd3 7a08 	vldr	s15, [r3, #32]
 800bd76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	d400      	bmi.n	800bd82 <pid+0xd4>
}
 800bd80:	e003      	b.n	800bd8a <pid+0xdc>
		pid->out = pid->Min;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6a1a      	ldr	r2, [r3, #32]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	619a      	str	r2, [r3, #24]
}
 800bd8a:	bf00      	nop
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
	...

0800bd98 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V *signal, float f, uint16_t F, float Umax)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	ed87 0a02 	vstr	s0, [r7, #8]
 800bda4:	460b      	mov	r3, r1
 800bda6:	edc7 0a00 	vstr	s1, [r7]
 800bdaa:	80fb      	strh	r3, [r7, #6]
    // 初始化赋值
    signal->input[0] = 0.f;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f04f 0200 	mov.w	r2, #0
 800bdb2:	601a      	str	r2, [r3, #0]
    signal->input[1] = 0.f;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f04f 0200 	mov.w	r2, #0
 800bdba:	605a      	str	r2, [r3, #4]
    signal->input[2] = 0.f;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f04f 0200 	mov.w	r2, #0
 800bdc2:	609a      	str	r2, [r3, #8]

    signal->sogi->a[1] = 0.f;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdc8:	f04f 0200 	mov.w	r2, #0
 800bdcc:	605a      	str	r2, [r3, #4]
    signal->sogi->a[2] = 0.f;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdd2:	f04f 0200 	mov.w	r2, #0
 800bdd6:	609a      	str	r2, [r3, #8]
    signal->sogi->b[1] = 0.f;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bddc:	f04f 0200 	mov.w	r2, #0
 800bde0:	611a      	str	r2, [r3, #16]
    signal->sogi->b[2] = 0.f;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	615a      	str	r2, [r3, #20]

    signal->theta = 0.f;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f04f 0200 	mov.w	r2, #0
 800bdf2:	619a      	str	r2, [r3, #24]
    signal->omiga0 = 2 * PI * f; // f典型值50
 800bdf4:	edd7 7a02 	vldr	s15, [r7, #8]
 800bdf8:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800bfd8 <pll_Init_V+0x240>
 800bdfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->Ts = 1.f / F;        // F典型值20000
 800be06:	88fb      	ldrh	r3, [r7, #6]
 800be08:	ee07 3a90 	vmov	s15, r3
 800be0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->phase = 0.f;         // 设定相位差
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f04f 0200 	mov.w	r2, #0
 800be24:	61da      	str	r2, [r3, #28]
    // 初始化pid参数
    float ki = signal->omiga0 * signal->omiga0 / Umax;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	ed93 7a08 	vldr	s14, [r3, #32]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	edd3 7a08 	vldr	s15, [r3, #32]
 800be32:	ee67 6a27 	vmul.f32	s13, s14, s15
 800be36:	ed97 7a00 	vldr	s14, [r7]
 800be3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be3e:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 800be42:	ed97 7a00 	vldr	s14, [r7]
 800be46:	edd7 7a05 	vldr	s15, [r7, #20]
 800be4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be52:	eeb0 0b47 	vmov.f64	d0, d7
 800be56:	f005 fd47 	bl	80118e8 <sqrt>
 800be5a:	eeb0 7b40 	vmov.f64	d7, d0
 800be5e:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 800bfd0 <pll_Init_V+0x238>
 800be62:	ee27 5b06 	vmul.f64	d5, d7, d6
 800be66:	edd7 7a00 	vldr	s15, [r7]
 800be6a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800be6e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800be72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800be76:	edc7 7a04 	vstr	s15, [r7, #16]

    pid_Init(signal->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be7e:	ed9f 2a57 	vldr	s4, [pc, #348]	@ 800bfdc <pll_Init_V+0x244>
 800be82:	eddf 1a57 	vldr	s3, [pc, #348]	@ 800bfe0 <pll_Init_V+0x248>
 800be86:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 800bfe4 <pll_Init_V+0x24c>
 800be8a:	edd7 0a05 	vldr	s1, [r7, #20]
 800be8e:	ed97 0a04 	vldr	s0, [r7, #16]
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fedc 	bl	800bc50 <pid_Init>
    // 计算sogi中间量
    signal->sogi->k = 1.414f;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be9c:	4a52      	ldr	r2, [pc, #328]	@ (800bfe8 <pll_Init_V+0x250>)
 800be9e:	619a      	str	r2, [r3, #24]
    signal->sogi->lamda = 0.5f * signal->omiga0 * signal->Ts;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	edd3 7a08 	vldr	s15, [r3, #32]
 800bea6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800beaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bebc:	edc3 7a07 	vstr	s15, [r3, #28]
    signal->sogi->x = 2.f * signal->sogi->k * signal->omiga0 * signal->Ts;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bec4:	edd3 7a06 	vldr	s15, [r3, #24]
 800bec8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	edd3 7a08 	vldr	s15, [r3, #32]
 800bed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee4:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->sogi->y = signal->omiga0 * signal->Ts * signal->omiga0 * signal->Ts;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	ed93 7a08 	vldr	s14, [r3, #32]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	edd3 7a08 	vldr	s15, [r3, #32]
 800befe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf10:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->sogi->b0 = signal->sogi->x / (signal->sogi->x + signal->sogi->y + 4);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf18:	edd3 6a08 	vldr	s13, [r3, #32]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf20:	ed93 7a08 	vldr	s14, [r3, #32]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf28:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf30:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bf34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf40:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->sogi->a1 = (8 - 2.f * signal->sogi->y) / (signal->sogi->x + signal->sogi->y + 4);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf48:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf50:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800bf54:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf5c:	ed93 7a08 	vldr	s14, [r3, #32]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf64:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf6c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bf70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf7c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->sogi->a2 = (signal->sogi->x - signal->sogi->y - 4) / (signal->sogi->x + signal->sogi->y + 4);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf84:	ed93 7a08 	vldr	s14, [r3, #32]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf8c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bf90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf94:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bf98:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfa0:	ed93 7a08 	vldr	s14, [r3, #32]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfa8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800bfac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfb0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800bfb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfc0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800bfc4:	bf00      	nop
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	f3af 8000 	nop.w
 800bfd0:	667f3bcd 	.word	0x667f3bcd
 800bfd4:	3ff6a09e 	.word	0x3ff6a09e
 800bfd8:	40c90fdb 	.word	0x40c90fdb
 800bfdc:	c27b53d2 	.word	0xc27b53d2
 800bfe0:	431d1463 	.word	0x431d1463
 800bfe4:	00000000 	.word	0x00000000
 800bfe8:	3fb4fdf4 	.word	0x3fb4fdf4

0800bfec <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param kp PR控制器kp参数
 * @param kr PR控制器kr参数
 */
void pll_Init_I(pll_Signal_I *signal, float f, uint16_t F, float pr_kp, float pr_kr, float pi_kp, float pi_ki)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	61f8      	str	r0, [r7, #28]
 800bff4:	ed87 0a06 	vstr	s0, [r7, #24]
 800bff8:	460b      	mov	r3, r1
 800bffa:	edc7 0a04 	vstr	s1, [r7, #16]
 800bffe:	ed87 1a03 	vstr	s2, [r7, #12]
 800c002:	edc7 1a02 	vstr	s3, [r7, #8]
 800c006:	ed87 2a01 	vstr	s4, [r7, #4]
 800c00a:	82fb      	strh	r3, [r7, #22]
    // 初始化赋值
    signal->input[0] = 0.f;
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	601a      	str	r2, [r3, #0]
    signal->input[1] = 0.f;
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f04f 0200 	mov.w	r2, #0
 800c01a:	605a      	str	r2, [r3, #4]
    signal->input[2] = 0.f;
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	609a      	str	r2, [r3, #8]

    signal->sogi->a[1] = 0.f;
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c028:	f04f 0200 	mov.w	r2, #0
 800c02c:	605a      	str	r2, [r3, #4]
    signal->sogi->a[2] = 0.f;
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c032:	f04f 0200 	mov.w	r2, #0
 800c036:	609a      	str	r2, [r3, #8]
    signal->sogi->b[1] = 0.f;
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c03c:	f04f 0200 	mov.w	r2, #0
 800c040:	611a      	str	r2, [r3, #16]
    signal->sogi->b[2] = 0.f;
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c046:	f04f 0200 	mov.w	r2, #0
 800c04a:	615a      	str	r2, [r3, #20]

    signal->omiga0 = 2 * PI * f;   // f典型值50
 800c04c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c050:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 800c388 <pll_Init_I+0x39c>
 800c054:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	edc3 7a06 	vstr	s15, [r3, #24]
    signal->omigaC = 2 * PI * 0.2; // 带宽2*pi*带宽
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	4aca      	ldr	r2, [pc, #808]	@ (800c38c <pll_Init_I+0x3a0>)
 800c062:	61da      	str	r2, [r3, #28]
    signal->Ts = 1.f / F;          // F典型值20000
 800c064:	8afb      	ldrh	r3, [r7, #22]
 800c066:	ee07 3a90 	vmov	s15, r3
 800c06a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c06e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	edc3 7a08 	vstr	s15, [r3, #32]
    // 初始化pr参数
    signal->pr->out[1] = 0.f;
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c080:	f04f 0200 	mov.w	r2, #0
 800c084:	60da      	str	r2, [r3, #12]
    signal->pr->out[2] = 0.f;
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c08a:	f04f 0200 	mov.w	r2, #0
 800c08e:	611a      	str	r2, [r3, #16]
    signal->pr->err[1] = 0.f;
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	619a      	str	r2, [r3, #24]
    signal->pr->err[2] = 0.f;
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c09e:	f04f 0200 	mov.w	r2, #0
 800c0a2:	61da      	str	r2, [r3, #28]
    // 初始化pid参数
    pid_Init(signal->pid, pi_kp, pi_ki, 0, 4.f, 0.f);
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0a8:	ed9f 2ab9 	vldr	s4, [pc, #740]	@ 800c390 <pll_Init_I+0x3a4>
 800c0ac:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 800c0b0:	ed9f 1ab7 	vldr	s2, [pc, #732]	@ 800c390 <pll_Init_I+0x3a4>
 800c0b4:	edd7 0a01 	vldr	s1, [r7, #4]
 800c0b8:	ed97 0a02 	vldr	s0, [r7, #8]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fdc7 	bl	800bc50 <pid_Init>
    // 计算pr中间量
    signal->pr->a0 = 4 * pr_kp / (signal->Ts * signal->Ts) + 4 * signal->omigaC * (pr_kp + pr_kr) / signal->Ts + pr_kp * signal->omiga0 * signal->omiga0;
 800c0c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0c6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c0ca:	ee67 6a87 	vmul.f32	s13, s15, s14
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	ed93 7a08 	vldr	s14, [r3, #32]
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	edd3 7a07 	vldr	s15, [r3, #28]
 800c0e8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c0ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c0f0:	ed97 6a04 	vldr	s12, [r7, #16]
 800c0f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c0fc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	edd3 6a08 	vldr	s13, [r3, #32]
 800c106:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800c10a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	edd3 6a06 	vldr	s13, [r3, #24]
 800c114:	edd7 7a04 	vldr	s15, [r7, #16]
 800c118:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c12a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c12e:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->pr->a1 = -8 * pr_kp / (signal->Ts * signal->Ts) + 2 * pr_kp * signal->omiga0 * signal->omiga0;
 800c132:	edd7 7a04 	vldr	s15, [r7, #16]
 800c136:	eeba 7a00 	vmov.f32	s14, #160	@ 0xc1000000 -8.0
 800c13a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	ed93 7a08 	vldr	s14, [r3, #32]
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	edd3 7a08 	vldr	s15, [r3, #32]
 800c14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c152:	edd7 7a04 	vldr	s15, [r7, #16]
 800c156:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c160:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	edd3 7a06 	vldr	s15, [r3, #24]
 800c16a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c172:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c176:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->pr->a2 = 4 * pr_kp / (signal->Ts * signal->Ts) - 4 * signal->omigaC * (pr_kp + pr_kr) / signal->Ts + pr_kp * signal->omiga0 * signal->omiga0;
 800c17a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c17e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c182:	ee67 6a87 	vmul.f32	s13, s15, s14
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	ed93 7a08 	vldr	s14, [r3, #32]
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	edd3 7a07 	vldr	s15, [r3, #28]
 800c1a0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c1a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c1a8:	ed97 6a04 	vldr	s12, [r7, #16]
 800c1ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1b0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c1b4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	edd3 6a08 	vldr	s13, [r3, #32]
 800c1be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800c1c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	edd3 6a06 	vldr	s13, [r3, #24]
 800c1cc:	edd7 7a04 	vldr	s15, [r7, #16]
 800c1d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c1da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1e6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->pr->b0 = 4 / (signal->Ts * signal->Ts) + 4 * signal->omigaC / signal->Ts + signal->omiga0 * signal->omiga0;
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	ed93 7a08 	vldr	s14, [r3, #32]
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	edd3 7a07 	vldr	s15, [r3, #28]
 800c208:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c20c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	edd3 6a08 	vldr	s13, [r3, #32]
 800c216:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800c21a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	edd3 6a06 	vldr	s13, [r3, #24]
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	edd3 7a06 	vldr	s15, [r3, #24]
 800c22a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c232:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c236:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->pr->b1 = -8 / (signal->Ts * signal->Ts) + 2 * signal->omiga0 * signal->omiga0;
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	ed93 7a08 	vldr	s14, [r3, #32]
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	edd3 7a08 	vldr	s15, [r3, #32]
 800c246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c24a:	eefa 6a00 	vmov.f32	s13, #160	@ 0xc1000000 -8.0
 800c24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	edd3 7a06 	vldr	s15, [r3, #24]
 800c258:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c26a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c26e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    signal->pr->b2 = 4 / (signal->Ts * signal->Ts) - 4 * signal->omigaC / signal->Ts + signal->omiga0 * signal->omiga0;
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	ed93 7a08 	vldr	s14, [r3, #32]
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c282:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	edd3 7a07 	vldr	s15, [r3, #28]
 800c290:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800c294:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	edd3 6a08 	vldr	s13, [r3, #32]
 800c29e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800c2a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	edd3 6a06 	vldr	s13, [r3, #24]
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2be:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    // 计算sogi中间量
    signal->sogi->k = 1.414f; // 阻尼比典型值1.414
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2c6:	4a33      	ldr	r2, [pc, #204]	@ (800c394 <pll_Init_I+0x3a8>)
 800c2c8:	619a      	str	r2, [r3, #24]
    signal->sogi->lamda = 0.5f * signal->omiga0 * signal->Ts;
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c2d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e6:	edc3 7a07 	vstr	s15, [r3, #28]
    signal->sogi->x = 2.f * signal->sogi->k * signal->omiga0 * signal->Ts;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2ee:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	edd3 7a08 	vldr	s15, [r3, #32]
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c30e:	edc3 7a08 	vstr	s15, [r3, #32]
    signal->sogi->y = signal->omiga0 * signal->Ts * signal->omiga0 * signal->Ts;
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	ed93 7a06 	vldr	s14, [r3, #24]
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c31e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	edd3 7a06 	vldr	s15, [r3, #24]
 800c328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    signal->sogi->b0 = signal->sogi->x / (signal->sogi->x + signal->sogi->y + 4);
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c342:	edd3 6a08 	vldr	s13, [r3, #32]
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c34a:	ed93 7a08 	vldr	s14, [r3, #32]
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c352:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c35a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c36a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    signal->sogi->a1 = (8 - 2.f * signal->sogi->y) / (signal->sogi->x + signal->sogi->y + 4);
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c372:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c376:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c37a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800c37e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c386:	e007      	b.n	800c398 <pll_Init_I+0x3ac>
 800c388:	40c90fdb 	.word	0x40c90fdb
 800c38c:	3fa0d97c 	.word	0x3fa0d97c
 800c390:	00000000 	.word	0x00000000
 800c394:	3fb4fdf4 	.word	0x3fb4fdf4
 800c398:	ed93 7a08 	vldr	s14, [r3, #32]
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3a0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c3a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3a8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c3ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3b8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    signal->sogi->a2 = (signal->sogi->x - signal->sogi->y - 4) / (signal->sogi->x + signal->sogi->y + 4);
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c0:	ed93 7a08 	vldr	s14, [r3, #32]
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c3cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3d0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c3d4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3dc:	ed93 7a08 	vldr	s14, [r3, #32]
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3e4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c3e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3ec:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c3f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 800c400:	bf00      	nop
 800c402:	3720      	adds	r7, #32
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40c:	ed2d 8b02 	vpush	{d8}
 800c410:	b088      	sub	sp, #32
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_V->input, signal_V->sogi);
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f000 f99c 	bl	800c75c <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->sogi->a[0], signal_V->sogi->b[0], &signal_V->park_d, &signal_V->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c428:	f8d3 8000 	ldr.w	r8, [r3]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c430:	68de      	ldr	r6, [r3, #12]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f103 0510 	add.w	r5, r3, #16
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f103 0414 	add.w	r4, r3, #20
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	edd3 7a06 	vldr	s15, [r3, #24]
 800c444:	eeb0 0a67 	vmov.f32	s0, s15
 800c448:	f002 fbe8 	bl	800ec1c <arm_sin_f32>
 800c44c:	eeb0 8a40 	vmov.f32	s16, s0
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	edd3 7a06 	vldr	s15, [r3, #24]
 800c456:	eeb0 0a67 	vmov.f32	s0, s15
 800c45a:	f002 fc25 	bl	800eca8 <arm_cos_f32>
 800c45e:	eef0 7a40 	vmov.f32	s15, s0
 800c462:	f8c7 801c 	str.w	r8, [r7, #28]
 800c466:	61be      	str	r6, [r7, #24]
 800c468:	617d      	str	r5, [r7, #20]
 800c46a:	613c      	str	r4, [r7, #16]
 800c46c:	ed87 8a03 	vstr	s16, [r7, #12]
 800c470:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800c474:	ed97 7a07 	vldr	s14, [r7, #28]
 800c478:	edd7 7a02 	vldr	s15, [r7, #8]
 800c47c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c480:	edd7 6a06 	vldr	s13, [r7, #24]
 800c484:	edd7 7a03 	vldr	s15, [r7, #12]
 800c488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c48c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800c496:	edd7 7a07 	vldr	s15, [r7, #28]
 800c49a:	eeb1 7a67 	vneg.f32	s14, s15
 800c49e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4a6:	edd7 6a06 	vldr	s13, [r7, #24]
 800c4aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	edc3 7a00 	vstr	s15, [r3]
  }
 800c4bc:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->park_q, signal_V->phase);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	edd3 7a05 	vldr	s15, [r3, #20]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	ed93 7a07 	vldr	s14, [r3, #28]
 800c4ce:	eef0 0a47 	vmov.f32	s1, s14
 800c4d2:	eeb0 0a67 	vmov.f32	s0, s15
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	f7ff fbe9 	bl	800bcae <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->omiga0) * signal_V->Ts;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	ed93 7a06 	vldr	s14, [r3, #24]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4e6:	edd3 6a06 	vldr	s13, [r3, #24]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	edd3 7a08 	vldr	s15, [r3, #32]
 800c4f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800c4fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	edc3 7a06 	vstr	s15, [r3, #24]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c50e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c512:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 800c540 <pll_Control_V+0x138>
 800c516:	eeb0 0b47 	vmov.f64	d0, d7
 800c51a:	f005 f9c1 	bl	80118a0 <fmod>
 800c51e:	eeb0 7b40 	vmov.f64	d7, d0
 800c522:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800c52c:	bf00      	nop
 800c52e:	3720      	adds	r7, #32
 800c530:	46bd      	mov	sp, r7
 800c532:	ecbd 8b02 	vpop	{d8}
 800c536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c53a:	bf00      	nop
 800c53c:	f3af 8000 	nop.w
 800c540:	60000000 	.word	0x60000000
 800c544:	401921fb 	.word	0x401921fb

0800c548 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Udc 直流测采样电压
 * @param Uset 直流设定电压
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Uset, float Udc)
{
 800c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54c:	ed2d 8b02 	vpush	{d8}
 800c550:	b08a      	sub	sp, #40	@ 0x28
 800c552:	af00      	add	r7, sp, #0
 800c554:	60f8      	str	r0, [r7, #12]
 800c556:	60b9      	str	r1, [r7, #8]
 800c558:	ed87 0a01 	vstr	s0, [r7, #4]
 800c55c:	edc7 0a00 	vstr	s1, [r7]
    // 对信号先进行sogi变换，得到两个相位相差90度的信号
    pll_Sogi(signal_I->input, signal_I->sogi);
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c566:	4619      	mov	r1, r3
 800c568:	4610      	mov	r0, r2
 800c56a:	f000 f8f7 	bl	800c75c <pll_Sogi>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_I->sogi->a[0], signal_I->sogi->b[0], &signal_I->park_d, &signal_I->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c572:	f8d3 8000 	ldr.w	r8, [r3]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57a:	68de      	ldr	r6, [r3, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f103 0510 	add.w	r5, r3, #16
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f103 0414 	add.w	r4, r3, #20
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c58e:	eeb0 0a67 	vmov.f32	s0, s15
 800c592:	f002 fb43 	bl	800ec1c <arm_sin_f32>
 800c596:	eeb0 8a40 	vmov.f32	s16, s0
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c5a0:	eeb0 0a67 	vmov.f32	s0, s15
 800c5a4:	f002 fb80 	bl	800eca8 <arm_cos_f32>
 800c5a8:	eef0 7a40 	vmov.f32	s15, s0
 800c5ac:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 800c5b0:	623e      	str	r6, [r7, #32]
 800c5b2:	61fd      	str	r5, [r7, #28]
 800c5b4:	61bc      	str	r4, [r7, #24]
 800c5b6:	ed87 8a05 	vstr	s16, [r7, #20]
 800c5ba:	edc7 7a04 	vstr	s15, [r7, #16]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800c5be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800c5c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ca:	edd7 6a08 	vldr	s13, [r7, #32]
 800c5ce:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800c5e0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c5e4:	eeb1 7a67 	vneg.f32	s14, s15
 800c5e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5f0:	edd7 6a08 	vldr	s13, [r7, #32]
 800c5f4:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	edc3 7a00 	vstr	s15, [r3]
  }
 800c606:	bf00      	nop
    // 对直流电压进行PI控制
    pid(signal_I->pid, Uset, Udc); // 电压内环
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c60c:	edd7 0a00 	vldr	s1, [r7]
 800c610:	ed97 0a01 	vldr	s0, [r7, #4]
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff fb4a 	bl	800bcae <pid>
    // PR控制
    pll_Pr(signal_I->pr, signal_I->pid->out * arm_cos_f32(signal_V->theta), signal_I->input[0]);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c622:	ed93 8a06 	vldr	s16, [r3, #24]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	edd3 7a06 	vldr	s15, [r3, #24]
 800c62c:	eeb0 0a67 	vmov.f32	s0, s15
 800c630:	f002 fb3a 	bl	800eca8 <arm_cos_f32>
 800c634:	eef0 7a40 	vmov.f32	s15, s0
 800c638:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	ed93 7a00 	vldr	s14, [r3]
 800c642:	eef0 0a47 	vmov.f32	s1, s14
 800c646:	eeb0 0a67 	vmov.f32	s0, s15
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 f808 	bl	800c660 <pll_Pr>
    // pll_Pr(signal_I->pr, 100.f * arm_cos_f32(signal_V->theta), signal_I->input[0]);
}
 800c650:	bf00      	nop
 800c652:	3728      	adds	r7, #40	@ 0x28
 800c654:	46bd      	mov	sp, r7
 800c656:	ecbd 8b02 	vpop	{d8}
 800c65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c660 <pll_Pr>:
 * @brief PR控制器
 * @param signal 信号指针
 * @param config 配置指针
 */
void pll_Pr(PR *pr, float target, float sample)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	ed87 0a02 	vstr	s0, [r7, #8]
 800c66c:	edc7 0a01 	vstr	s1, [r7, #4]
    pr->err[0] = target - sample;
 800c670:	ed97 7a02 	vldr	s14, [r7, #8]
 800c674:	edd7 7a01 	vldr	s15, [r7, #4]
 800c678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	edc3 7a05 	vstr	s15, [r3, #20]
    pr->out[0] = -pr->b1 * pr->out[1] - pr->b2 * pr->out[2] + pr->a0 * pr->err[0] + pr->a1 * pr->err[1] + pr->a2 * pr->err[2];
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800c688:	eeb1 7a67 	vneg.f32	s14, s15
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c692:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c6a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	edd3 6a08 	vldr	s13, [r3, #32]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	edd3 7a05 	vldr	s15, [r3, #20]
 800c6b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c6ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	edd3 7a07 	vldr	s15, [r3, #28]
 800c6de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	edc3 7a02 	vstr	s15, [r3, #8]
    pr->out[0] = pr->out[0] / pr->b0;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	edd3 6a02 	vldr	s13, [r3, #8]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800c6f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	edc3 7a02 	vstr	s15, [r3, #8]
    // 限制调参幅度，防止跑飞
    if (pr->out[0] > COMPARE_MAX)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	edd3 7a02 	vldr	s15, [r3, #8]
 800c708:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800c754 <pll_Pr+0xf4>
 800c70c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c714:	dd03      	ble.n	800c71e <pll_Pr+0xbe>
        pr->out[0] = COMPARE_MAX;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	4a0f      	ldr	r2, [pc, #60]	@ (800c758 <pll_Pr+0xf8>)
 800c71a:	609a      	str	r2, [r3, #8]
 800c71c:	e00b      	b.n	800c736 <pll_Pr+0xd6>
    else if (pr->out[0] < COMPARE_MIN)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	edd3 7a02 	vldr	s15, [r3, #8]
 800c724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72c:	d503      	bpl.n	800c736 <pll_Pr+0xd6>
        pr->out[0] = COMPARE_MIN;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f04f 0200 	mov.w	r2, #0
 800c734:	609a      	str	r2, [r3, #8]

    pr->out[1] = pr->out[0];
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	689a      	ldr	r2, [r3, #8]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	60da      	str	r2, [r3, #12]
    pr->out[2] = pr->out[1];
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	611a      	str	r2, [r3, #16]
}
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	4628c000 	.word	0x4628c000
 800c758:	4628c000 	.word	0x4628c000

0800c75c <pll_Sogi>:
 * @brief Sogi变换
 * @param input 输入信号
 * @param sogi sogi指针
 */
void pll_Sogi(float *input, SOGI *sogi)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
    sogi->a[0] = sogi->b0 * input[0] - sogi->b0 * input[2] + sogi->a1 * sogi->a[1] + sogi->a2 * sogi->a[2];
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	edd3 7a00 	vldr	s15, [r3]
 800c772:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	3308      	adds	r3, #8
 800c780:	edd3 7a00 	vldr	s15, [r3]
 800c784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	edd3 7a01 	vldr	s15, [r3, #4]
 800c798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c79c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	edd3 7a02 	vldr	s15, [r3, #8]
 800c7ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	edc3 7a00 	vstr	s15, [r3]
    sogi->b[0] = sogi->lamda * sogi->b0 * (input[0] + 2 * input[1] + input[2]) + sogi->a1 * sogi->b[1] + sogi->a2 * sogi->b[2];
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	ed93 7a07 	vldr	s14, [r3, #28]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c7c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	edd3 6a00 	vldr	s13, [r3]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	edd3 7a00 	vldr	s15, [r3]
 800c7d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c7dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	edd3 7a00 	vldr	s15, [r3]
 800c7e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	edd3 7a04 	vldr	s15, [r3, #16]
 800c7fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c800:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	edd3 7a05 	vldr	s15, [r3, #20]
 800c810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c814:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	edc3 7a03 	vstr	s15, [r3, #12]

    input[2] = input[1];
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3308      	adds	r3, #8
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	6852      	ldr	r2, [r2, #4]
 800c826:	601a      	str	r2, [r3, #0]
    input[1] = input[0];
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3304      	adds	r3, #4
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	6812      	ldr	r2, [r2, #0]
 800c830:	601a      	str	r2, [r3, #0]
    sogi->a[2] = sogi->a[1];
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	609a      	str	r2, [r3, #8]
    sogi->a[1] = sogi->a[0];
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	605a      	str	r2, [r3, #4]
    sogi->b[2] = sogi->b[1];
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	691a      	ldr	r2, [r3, #16]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	615a      	str	r2, [r3, #20]
    sogi->b[1] = sogi->b[0];
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	68da      	ldr	r2, [r3, #12]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	611a      	str	r2, [r3, #16]
}
 800c852:	bf00      	nop
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
	...

0800c860 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08a      	sub	sp, #40	@ 0x28
 800c864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800c866:	1d3b      	adds	r3, r7, #4
 800c868:	2224      	movs	r2, #36	@ 0x24
 800c86a:	2100      	movs	r1, #0
 800c86c:	4618      	mov	r0, r3
 800c86e:	f003 f878 	bl	800f962 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800c872:	4b12      	ldr	r3, [pc, #72]	@ (800c8bc <MX_DAC1_Init+0x5c>)
 800c874:	4a12      	ldr	r2, [pc, #72]	@ (800c8c0 <MX_DAC1_Init+0x60>)
 800c876:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800c878:	4810      	ldr	r0, [pc, #64]	@ (800c8bc <MX_DAC1_Init+0x5c>)
 800c87a:	f7f3 ff97 	bl	80007ac <HAL_DAC_Init>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800c884:	f000 fe84 	bl	800d590 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800c888:	2300      	movs	r3, #0
 800c88a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800c88c:	2300      	movs	r3, #0
 800c88e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800c890:	2300      	movs	r3, #0
 800c892:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800c894:	2301      	movs	r3, #1
 800c896:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800c898:	2300      	movs	r3, #0
 800c89a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c89c:	1d3b      	adds	r3, r7, #4
 800c89e:	2200      	movs	r2, #0
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4806      	ldr	r0, [pc, #24]	@ (800c8bc <MX_DAC1_Init+0x5c>)
 800c8a4:	f7f4 f886 	bl	80009b4 <HAL_DAC_ConfigChannel>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800c8ae:	f000 fe6f 	bl	800d590 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800c8b2:	bf00      	nop
 800c8b4:	3728      	adds	r7, #40	@ 0x28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	24000770 	.word	0x24000770
 800c8c0:	40007400 	.word	0x40007400

0800c8c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	@ 0x28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8cc:	f107 0314 	add.w	r3, r7, #20
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	605a      	str	r2, [r3, #4]
 800c8d6:	609a      	str	r2, [r3, #8]
 800c8d8:	60da      	str	r2, [r3, #12]
 800c8da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a1c      	ldr	r2, [pc, #112]	@ (800c954 <HAL_DAC_MspInit+0x90>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d131      	bne.n	800c94a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800c8e6:	4b1c      	ldr	r3, [pc, #112]	@ (800c958 <HAL_DAC_MspInit+0x94>)
 800c8e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c8ec:	4a1a      	ldr	r2, [pc, #104]	@ (800c958 <HAL_DAC_MspInit+0x94>)
 800c8ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c8f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c8f6:	4b18      	ldr	r3, [pc, #96]	@ (800c958 <HAL_DAC_MspInit+0x94>)
 800c8f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c8fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c904:	4b14      	ldr	r3, [pc, #80]	@ (800c958 <HAL_DAC_MspInit+0x94>)
 800c906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c90a:	4a13      	ldr	r2, [pc, #76]	@ (800c958 <HAL_DAC_MspInit+0x94>)
 800c90c:	f043 0301 	orr.w	r3, r3, #1
 800c910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c914:	4b10      	ldr	r3, [pc, #64]	@ (800c958 <HAL_DAC_MspInit+0x94>)
 800c916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c922:	2310      	movs	r3, #16
 800c924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c926:	2303      	movs	r3, #3
 800c928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c92e:	f107 0314 	add.w	r3, r7, #20
 800c932:	4619      	mov	r1, r3
 800c934:	4809      	ldr	r0, [pc, #36]	@ (800c95c <HAL_DAC_MspInit+0x98>)
 800c936:	f7f4 f989 	bl	8000c4c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800c93a:	2200      	movs	r2, #0
 800c93c:	210f      	movs	r1, #15
 800c93e:	2036      	movs	r0, #54	@ 0x36
 800c940:	f7f3 fe94 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c944:	2036      	movs	r0, #54	@ 0x36
 800c946:	f7f3 feab 	bl	80006a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800c94a:	bf00      	nop
 800c94c:	3728      	adds	r7, #40	@ 0x28
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	40007400 	.word	0x40007400
 800c958:	58024400 	.word	0x58024400
 800c95c:	58020000 	.word	0x58020000

0800c960 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b08c      	sub	sp, #48	@ 0x30
 800c964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c966:	f107 031c 	add.w	r3, r7, #28
 800c96a:	2200      	movs	r2, #0
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	605a      	str	r2, [r3, #4]
 800c970:	609a      	str	r2, [r3, #8]
 800c972:	60da      	str	r2, [r3, #12]
 800c974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c976:	4b73      	ldr	r3, [pc, #460]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c97c:	4a71      	ldr	r2, [pc, #452]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c97e:	f043 0304 	orr.w	r3, r3, #4
 800c982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c986:	4b6f      	ldr	r3, [pc, #444]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c98c:	f003 0304 	and.w	r3, r3, #4
 800c990:	61bb      	str	r3, [r7, #24]
 800c992:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c994:	4b6b      	ldr	r3, [pc, #428]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c99a:	4a6a      	ldr	r2, [pc, #424]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c99c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c9a4:	4b67      	ldr	r3, [pc, #412]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ae:	617b      	str	r3, [r7, #20]
 800c9b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9b2:	4b64      	ldr	r3, [pc, #400]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9b8:	4a62      	ldr	r2, [pc, #392]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c9c2:	4b60      	ldr	r3, [pc, #384]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9c8:	f003 0301 	and.w	r3, r3, #1
 800c9cc:	613b      	str	r3, [r7, #16]
 800c9ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9d0:	4b5c      	ldr	r3, [pc, #368]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9d6:	4a5b      	ldr	r2, [pc, #364]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9d8:	f043 0302 	orr.w	r3, r3, #2
 800c9dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c9e0:	4b58      	ldr	r3, [pc, #352]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9e6:	f003 0302 	and.w	r3, r3, #2
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c9ee:	4b55      	ldr	r3, [pc, #340]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9f4:	4a53      	ldr	r2, [pc, #332]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800c9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c9fe:	4b51      	ldr	r3, [pc, #324]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800ca00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca08:	60bb      	str	r3, [r7, #8]
 800ca0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800ca0c:	4b4d      	ldr	r3, [pc, #308]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800ca0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca12:	4a4c      	ldr	r2, [pc, #304]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800ca14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ca1c:	4b49      	ldr	r3, [pc, #292]	@ (800cb44 <MX_GPIO_Init+0x1e4>)
 800ca1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca26:	607b      	str	r3, [r7, #4]
 800ca28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2120      	movs	r1, #32
 800ca2e:	4846      	ldr	r0, [pc, #280]	@ (800cb48 <MX_GPIO_Init+0x1e8>)
 800ca30:	f7f4 fabc 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800ca34:	2200      	movs	r2, #0
 800ca36:	2102      	movs	r1, #2
 800ca38:	4844      	ldr	r0, [pc, #272]	@ (800cb4c <MX_GPIO_Init+0x1ec>)
 800ca3a:	f7f4 fab7 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2188      	movs	r1, #136	@ 0x88
 800ca42:	4843      	ldr	r0, [pc, #268]	@ (800cb50 <MX_GPIO_Init+0x1f0>)
 800ca44:	f7f4 fab2 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ca4e:	4841      	ldr	r0, [pc, #260]	@ (800cb54 <MX_GPIO_Init+0x1f4>)
 800ca50:	f7f4 faac 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800ca54:	2201      	movs	r2, #1
 800ca56:	2101      	movs	r1, #1
 800ca58:	483f      	ldr	r0, [pc, #252]	@ (800cb58 <MX_GPIO_Init+0x1f8>)
 800ca5a:	f7f4 faa7 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2140      	movs	r1, #64	@ 0x40
 800ca62:	483d      	ldr	r0, [pc, #244]	@ (800cb58 <MX_GPIO_Init+0x1f8>)
 800ca64:	f7f4 faa2 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800ca68:	2320      	movs	r3, #32
 800ca6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800ca74:	2301      	movs	r3, #1
 800ca76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800ca78:	f107 031c 	add.w	r3, r7, #28
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4832      	ldr	r0, [pc, #200]	@ (800cb48 <MX_GPIO_Init+0x1e8>)
 800ca80:	f7f4 f8e4 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800ca84:	2302      	movs	r3, #2
 800ca86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800ca90:	2301      	movs	r3, #1
 800ca92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800ca94:	f107 031c 	add.w	r3, r7, #28
 800ca98:	4619      	mov	r1, r3
 800ca9a:	482c      	ldr	r0, [pc, #176]	@ (800cb4c <MX_GPIO_Init+0x1ec>)
 800ca9c:	f7f4 f8d6 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 800caa0:	2388      	movs	r3, #136	@ 0x88
 800caa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caa4:	2301      	movs	r3, #1
 800caa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caa8:	2300      	movs	r3, #0
 800caaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800caac:	2300      	movs	r3, #0
 800caae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cab0:	f107 031c 	add.w	r3, r7, #28
 800cab4:	4619      	mov	r1, r3
 800cab6:	4826      	ldr	r0, [pc, #152]	@ (800cb50 <MX_GPIO_Init+0x1f0>)
 800cab8:	f7f4 f8c8 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 800cabc:	2340      	movs	r3, #64	@ 0x40
 800cabe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800cac0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800cac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cac6:	2301      	movs	r3, #1
 800cac8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 800caca:	f107 031c 	add.w	r3, r7, #28
 800cace:	4619      	mov	r1, r3
 800cad0:	481f      	ldr	r0, [pc, #124]	@ (800cb50 <MX_GPIO_Init+0x1f0>)
 800cad2:	f7f4 f8bb 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800cad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cadc:	2301      	movs	r3, #1
 800cade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cae0:	2302      	movs	r3, #2
 800cae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cae4:	2300      	movs	r3, #0
 800cae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cae8:	f107 031c 	add.w	r3, r7, #28
 800caec:	4619      	mov	r1, r3
 800caee:	4819      	ldr	r0, [pc, #100]	@ (800cb54 <MX_GPIO_Init+0x1f4>)
 800caf0:	f7f4 f8ac 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800caf4:	2301      	movs	r3, #1
 800caf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caf8:	2301      	movs	r3, #1
 800cafa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cafc:	2300      	movs	r3, #0
 800cafe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb00:	2300      	movs	r3, #0
 800cb02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cb04:	f107 031c 	add.w	r3, r7, #28
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4813      	ldr	r0, [pc, #76]	@ (800cb58 <MX_GPIO_Init+0x1f8>)
 800cb0c:	f7f4 f89e 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800cb10:	2340      	movs	r3, #64	@ 0x40
 800cb12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb14:	2301      	movs	r3, #1
 800cb16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800cb20:	f107 031c 	add.w	r3, r7, #28
 800cb24:	4619      	mov	r1, r3
 800cb26:	480c      	ldr	r0, [pc, #48]	@ (800cb58 <MX_GPIO_Init+0x1f8>)
 800cb28:	f7f4 f890 	bl	8000c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2100      	movs	r1, #0
 800cb30:	2017      	movs	r0, #23
 800cb32:	f7f3 fd9b 	bl	800066c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800cb36:	2017      	movs	r0, #23
 800cb38:	f7f3 fdb2 	bl	80006a0 <HAL_NVIC_EnableIRQ>

}
 800cb3c:	bf00      	nop
 800cb3e:	3730      	adds	r7, #48	@ 0x30
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	58024400 	.word	0x58024400
 800cb48:	58020800 	.word	0x58020800
 800cb4c:	58020400 	.word	0x58020400
 800cb50:	58021800 	.word	0x58021800
 800cb54:	58020000 	.word	0x58020000
 800cb58:	58022000 	.word	0x58022000

0800cb5c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800cb60:	4b1b      	ldr	r3, [pc, #108]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb62:	4a1c      	ldr	r2, [pc, #112]	@ (800cbd4 <MX_I2C3_Init+0x78>)
 800cb64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 800cb66:	4b1a      	ldr	r3, [pc, #104]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb68:	4a1b      	ldr	r2, [pc, #108]	@ (800cbd8 <MX_I2C3_Init+0x7c>)
 800cb6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800cb6c:	4b18      	ldr	r3, [pc, #96]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cb72:	4b17      	ldr	r3, [pc, #92]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb74:	2201      	movs	r2, #1
 800cb76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cb78:	4b15      	ldr	r3, [pc, #84]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800cb7e:	4b14      	ldr	r3, [pc, #80]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800cb84:	4b12      	ldr	r3, [pc, #72]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cb8a:	4b11      	ldr	r3, [pc, #68]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cb90:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800cb96:	480e      	ldr	r0, [pc, #56]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cb98:	f7f4 fa56 	bl	8001048 <HAL_I2C_Init>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d001      	beq.n	800cba6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800cba2:	f000 fcf5 	bl	800d590 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800cba6:	2100      	movs	r1, #0
 800cba8:	4809      	ldr	r0, [pc, #36]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cbaa:	f7f4 ffd9 	bl	8001b60 <HAL_I2CEx_ConfigAnalogFilter>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d001      	beq.n	800cbb8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800cbb4:	f000 fcec 	bl	800d590 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800cbb8:	2100      	movs	r1, #0
 800cbba:	4805      	ldr	r0, [pc, #20]	@ (800cbd0 <MX_I2C3_Init+0x74>)
 800cbbc:	f7f5 f81b 	bl	8001bf6 <HAL_I2CEx_ConfigDigitalFilter>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d001      	beq.n	800cbca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800cbc6:	f000 fce3 	bl	800d590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800cbca:	bf00      	nop
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	24000784 	.word	0x24000784
 800cbd4:	40005c00 	.word	0x40005c00
 800cbd8:	30a175ab 	.word	0x30a175ab

0800cbdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b0ba      	sub	sp, #232	@ 0xe8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbe4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800cbe8:	2200      	movs	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	605a      	str	r2, [r3, #4]
 800cbee:	609a      	str	r2, [r3, #8]
 800cbf0:	60da      	str	r2, [r3, #12]
 800cbf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cbf4:	f107 0310 	add.w	r3, r7, #16
 800cbf8:	22c0      	movs	r2, #192	@ 0xc0
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f002 feb0 	bl	800f962 <memset>
  if(i2cHandle->Instance==I2C3)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a27      	ldr	r2, [pc, #156]	@ (800cca4 <HAL_I2C_MspInit+0xc8>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d146      	bne.n	800cc9a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800cc0c:	f04f 0208 	mov.w	r2, #8
 800cc10:	f04f 0300 	mov.w	r3, #0
 800cc14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cc1e:	f107 0310 	add.w	r3, r7, #16
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7f7 fb2e 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d001      	beq.n	800cc32 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800cc2e:	f000 fcaf 	bl	800d590 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800cc32:	4b1d      	ldr	r3, [pc, #116]	@ (800cca8 <HAL_I2C_MspInit+0xcc>)
 800cc34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc38:	4a1b      	ldr	r2, [pc, #108]	@ (800cca8 <HAL_I2C_MspInit+0xcc>)
 800cc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cc42:	4b19      	ldr	r3, [pc, #100]	@ (800cca8 <HAL_I2C_MspInit+0xcc>)
 800cc44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800cc50:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800cc54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cc58:	2312      	movs	r3, #18
 800cc5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc64:	2303      	movs	r3, #3
 800cc66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800cc6a:	2304      	movs	r3, #4
 800cc6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cc70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800cc74:	4619      	mov	r1, r3
 800cc76:	480d      	ldr	r0, [pc, #52]	@ (800ccac <HAL_I2C_MspInit+0xd0>)
 800cc78:	f7f3 ffe8 	bl	8000c4c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800cc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cca8 <HAL_I2C_MspInit+0xcc>)
 800cc7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc82:	4a09      	ldr	r2, [pc, #36]	@ (800cca8 <HAL_I2C_MspInit+0xcc>)
 800cc84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cc88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800cc8c:	4b06      	ldr	r3, [pc, #24]	@ (800cca8 <HAL_I2C_MspInit+0xcc>)
 800cc8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc96:	60bb      	str	r3, [r7, #8]
 800cc98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800cc9a:	bf00      	nop
 800cc9c:	37e8      	adds	r7, #232	@ 0xe8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	40005c00 	.word	0x40005c00
 800cca8:	58024400 	.word	0x58024400
 800ccac:	58021c00 	.word	0x58021c00

0800ccb0 <_close>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// IDE版本错误临时修复
__attribute__((weak)) void _close(void) {}
 800ccb0:	b480      	push	{r7}
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	bf00      	nop
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <_lseek>:
__attribute__((weak)) void _lseek(void) {}
 800ccbe:	b480      	push	{r7}
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	bf00      	nop
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <_read>:
__attribute__((weak)) void _read(void) {}
 800cccc:	b480      	push	{r7}
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	bf00      	nop
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <_write>:
__attribute__((weak)) void _write(void) {}
 800ccda:	b480      	push	{r7}
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	bf00      	nop
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <_fstat>:
__attribute__((weak)) void _fstat(void) {}
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	bf00      	nop
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <_getpid>:
__attribute__((weak)) void _getpid(void) {}
 800ccf6:	b480      	push	{r7}
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	bf00      	nop
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <_isatty>:
__attribute__((weak)) void _isatty(void) {}
 800cd04:	b480      	push	{r7}
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	bf00      	nop
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <_kill>:
__attribute__((weak)) void _kill(void) {}
 800cd12:	b480      	push	{r7}
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	bf00      	nop
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <oled_Show>:
float dcVolt = 0.f;
float dcCurrent = 0.f;
// 显示函数
uint8_t textBuf[256] = {0};
void oled_Show(void)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af02      	add	r7, sp, #8
#if !USER_DEBUG
  // IN:  输入
  sprintf((char *)textBuf, "IN : %5.2fV %5.2fA", signal_V->rms * iirScale_20Hz / 1.4f, signal_I->rms * iirScale_20Hz / 1.414f);
 800cd26:	4b51      	ldr	r3, [pc, #324]	@ (800ce6c <oled_Show+0x14c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	ed93 7a03 	vldr	s14, [r3, #12]
 800cd2e:	4b50      	ldr	r3, [pc, #320]	@ (800ce70 <oled_Show+0x150>)
 800cd30:	edd3 7a00 	vldr	s15, [r3]
 800cd34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd38:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ce74 <oled_Show+0x154>
 800cd3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800cd44:	4b4c      	ldr	r3, [pc, #304]	@ (800ce78 <oled_Show+0x158>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	ed93 7a03 	vldr	s14, [r3, #12]
 800cd4c:	4b48      	ldr	r3, [pc, #288]	@ (800ce70 <oled_Show+0x150>)
 800cd4e:	edd3 7a00 	vldr	s15, [r3]
 800cd52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd56:	eddf 6a49 	vldr	s13, [pc, #292]	@ 800ce7c <oled_Show+0x15c>
 800cd5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cd62:	ed8d 7b00 	vstr	d7, [sp]
 800cd66:	ec53 2b15 	vmov	r2, r3, d5
 800cd6a:	4945      	ldr	r1, [pc, #276]	@ (800ce80 <oled_Show+0x160>)
 800cd6c:	4845      	ldr	r0, [pc, #276]	@ (800ce84 <oled_Show+0x164>)
 800cd6e:	f002 fd95 	bl	800f89c <siprintf>
  OLED_ShowString(0, 0, textBuf, 12);
 800cd72:	230c      	movs	r3, #12
 800cd74:	4a43      	ldr	r2, [pc, #268]	@ (800ce84 <oled_Show+0x164>)
 800cd76:	2100      	movs	r1, #0
 800cd78:	2000      	movs	r0, #0
 800cd7a:	f7fe feaf 	bl	800badc <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // DC:  直流
  sprintf((char *)textBuf, "DC : %5.2fV %5.2fA", dcVolt, dcCurrent);
 800cd7e:	4b42      	ldr	r3, [pc, #264]	@ (800ce88 <oled_Show+0x168>)
 800cd80:	edd3 7a00 	vldr	s15, [r3]
 800cd84:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800cd88:	4b40      	ldr	r3, [pc, #256]	@ (800ce8c <oled_Show+0x16c>)
 800cd8a:	edd3 7a00 	vldr	s15, [r3]
 800cd8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cd92:	ed8d 7b00 	vstr	d7, [sp]
 800cd96:	ec53 2b16 	vmov	r2, r3, d6
 800cd9a:	493d      	ldr	r1, [pc, #244]	@ (800ce90 <oled_Show+0x170>)
 800cd9c:	4839      	ldr	r0, [pc, #228]	@ (800ce84 <oled_Show+0x164>)
 800cd9e:	f002 fd7d 	bl	800f89c <siprintf>
  OLED_ShowString(0, 12, textBuf, 12);
 800cda2:	230c      	movs	r3, #12
 800cda4:	4a37      	ldr	r2, [pc, #220]	@ (800ce84 <oled_Show+0x164>)
 800cda6:	210c      	movs	r1, #12
 800cda8:	2000      	movs	r0, #0
 800cdaa:	f7fe fe97 	bl	800badc <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // OUT: 输出
  sprintf((char *)textBuf, "OUT: %5.2fV %5.2fA", signal_V->input[0], signal_I->input[0]);
 800cdae:	4b2f      	ldr	r3, [pc, #188]	@ (800ce6c <oled_Show+0x14c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	edd3 7a00 	vldr	s15, [r3]
 800cdb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800cdba:	4b2f      	ldr	r3, [pc, #188]	@ (800ce78 <oled_Show+0x158>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	edd3 7a00 	vldr	s15, [r3]
 800cdc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cdc6:	ed8d 7b00 	vstr	d7, [sp]
 800cdca:	ec53 2b16 	vmov	r2, r3, d6
 800cdce:	4931      	ldr	r1, [pc, #196]	@ (800ce94 <oled_Show+0x174>)
 800cdd0:	482c      	ldr	r0, [pc, #176]	@ (800ce84 <oled_Show+0x164>)
 800cdd2:	f002 fd63 	bl	800f89c <siprintf>
  OLED_ShowString(0, 24, textBuf, 12);
 800cdd6:	230c      	movs	r3, #12
 800cdd8:	4a2a      	ldr	r2, [pc, #168]	@ (800ce84 <oled_Show+0x164>)
 800cdda:	2118      	movs	r1, #24
 800cddc:	2000      	movs	r0, #0
 800cdde:	f7fe fe7d 	bl	800badc <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // FAC: 功率因数
  sprintf((char *)textBuf, "FAC: %4.2f %5ld", arm_cos_f32(0), __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_1));
 800cde2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800ce98 <oled_Show+0x178>
 800cde6:	f001 ff5f 	bl	800eca8 <arm_cos_f32>
 800cdea:	eef0 7a40 	vmov.f32	s15, s0
 800cdee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cdf2:	4b2a      	ldr	r3, [pc, #168]	@ (800ce9c <oled_Show+0x17c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	ec53 2b17 	vmov	r2, r3, d7
 800cdfe:	4928      	ldr	r1, [pc, #160]	@ (800cea0 <oled_Show+0x180>)
 800ce00:	4820      	ldr	r0, [pc, #128]	@ (800ce84 <oled_Show+0x164>)
 800ce02:	f002 fd4b 	bl	800f89c <siprintf>
  // sprintf((char *)textBuf, "FAC: %4.2f %.2f", arm_cos_f32(0), signal_I->pid->out);
  OLED_ShowString(0, 36, textBuf, 12);
 800ce06:	230c      	movs	r3, #12
 800ce08:	4a1e      	ldr	r2, [pc, #120]	@ (800ce84 <oled_Show+0x164>)
 800ce0a:	2124      	movs	r1, #36	@ 0x24
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	f7fe fe65 	bl	800badc <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));

  // EFF: 效率
  sprintf((char *)textBuf, "EFF: %5.2f%%", (signal_V->input[0] * signal_I->input[0]) / (signal_V->input[0] * signal_I->input[0]) * 100.f);
 800ce12:	4b16      	ldr	r3, [pc, #88]	@ (800ce6c <oled_Show+0x14c>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	ed93 7a00 	vldr	s14, [r3]
 800ce1a:	4b17      	ldr	r3, [pc, #92]	@ (800ce78 <oled_Show+0x158>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	edd3 7a00 	vldr	s15, [r3]
 800ce22:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ce26:	4b11      	ldr	r3, [pc, #68]	@ (800ce6c <oled_Show+0x14c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	ed93 7a00 	vldr	s14, [r3]
 800ce2e:	4b12      	ldr	r3, [pc, #72]	@ (800ce78 <oled_Show+0x158>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	edd3 7a00 	vldr	s15, [r3]
 800ce36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce3e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cea4 <oled_Show+0x184>
 800ce42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce4a:	ec53 2b17 	vmov	r2, r3, d7
 800ce4e:	4916      	ldr	r1, [pc, #88]	@ (800cea8 <oled_Show+0x188>)
 800ce50:	480c      	ldr	r0, [pc, #48]	@ (800ce84 <oled_Show+0x164>)
 800ce52:	f002 fd23 	bl	800f89c <siprintf>
  OLED_ShowString(0, 48, textBuf, 12);
 800ce56:	230c      	movs	r3, #12
 800ce58:	4a0a      	ldr	r2, [pc, #40]	@ (800ce84 <oled_Show+0x164>)
 800ce5a:	2130      	movs	r1, #48	@ 0x30
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	f7fe fe3d 	bl	800badc <OLED_ShowString>
  // CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
  OLED_Refresh();
 800ce62:	f7fe fccb 	bl	800b7fc <OLED_Refresh>
  // 串口调试
  //  sprintf((char *)textBuf, "x=0,V=%.2f,I=%.2f,park_Iq=%.2f,park_Id=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,sogi_Ia=%.2f,sogi_Ib=%.2f,\n", signal_V->input[0], signal_I->input[0], signal_I->park_q, signal_I->park_d, signal_V->park_d, signal_V->park_q, signal_V->sogi->a[0], signal_V->sogi->b[0], signal_I->sogi->a[0], signal_I->sogi->b[0]);
  sprintf((char *)textBuf, "x=0,V=%.2f,park_Vd=%.2f,park_Vq=%.2f,sogi_Va=%.2f,sogi_Vb=%.2f,\n", signal_V->input[0], signal_V->park_d, signal_V->park_q, signal_V->sogi->a[0], signal_V->sogi->b[0]);
  CDC_Transmit_FS((uint8_t *)textBuf, sizeof(textBuf));
#endif
}
 800ce66:	bf00      	nop
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20000000 	.word	0x20000000
 800ce70:	08011c5c 	.word	0x08011c5c
 800ce74:	3fb33333 	.word	0x3fb33333
 800ce78:	20000004 	.word	0x20000004
 800ce7c:	3fb4fdf4 	.word	0x3fb4fdf4
 800ce80:	08011b90 	.word	0x08011b90
 800ce84:	240007e0 	.word	0x240007e0
 800ce88:	240007d8 	.word	0x240007d8
 800ce8c:	240007dc 	.word	0x240007dc
 800ce90:	08011ba4 	.word	0x08011ba4
 800ce94:	08011bb8 	.word	0x08011bb8
 800ce98:	00000000 	.word	0x00000000
 800ce9c:	24000ad4 	.word	0x24000ad4
 800cea0:	08011bcc 	.word	0x08011bcc
 800cea4:	42c80000 	.word	0x42c80000
 800cea8:	08011bdc 	.word	0x08011bdc

0800ceac <circuit_Connect>:
// 连接电路
void circuit_Connect(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ceb6:	4802      	ldr	r0, [pc, #8]	@ (800cec0 <circuit_Connect+0x14>)
 800ceb8:	f7f4 f878 	bl	8000fac <HAL_GPIO_WritePin>
}
 800cebc:	bf00      	nop
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	58020000 	.word	0x58020000

0800cec4 <circuit_Disconnect>:
void circuit_Disconnect(void)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800cec8:	2200      	movs	r2, #0
 800ceca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cece:	4802      	ldr	r0, [pc, #8]	@ (800ced8 <circuit_Disconnect+0x14>)
 800ced0:	f7f4 f86c 	bl	8000fac <HAL_GPIO_WritePin>
}
 800ced4:	bf00      	nop
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	58020000 	.word	0x58020000
 800cedc:	00000000 	.word	0x00000000

0800cee0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800cee0:	b590      	push	{r4, r7, lr}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800cee6:	f000 fadd 	bl	800d4a4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ceea:	4b9d      	ldr	r3, [pc, #628]	@ (800d160 <main+0x280>)
 800ceec:	695b      	ldr	r3, [r3, #20]
 800ceee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d11b      	bne.n	800cf2e <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800cef6:	f3bf 8f4f 	dsb	sy
}
 800cefa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cefc:	f3bf 8f6f 	isb	sy
}
 800cf00:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cf02:	4b97      	ldr	r3, [pc, #604]	@ (800d160 <main+0x280>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800cf0a:	f3bf 8f4f 	dsb	sy
}
 800cf0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf10:	f3bf 8f6f 	isb	sy
}
 800cf14:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cf16:	4b92      	ldr	r3, [pc, #584]	@ (800d160 <main+0x280>)
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	4a91      	ldr	r2, [pc, #580]	@ (800d160 <main+0x280>)
 800cf1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf20:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cf22:	f3bf 8f4f 	dsb	sy
}
 800cf26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf28:	f3bf 8f6f 	isb	sy
}
 800cf2c:	e000      	b.n	800cf30 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800cf2e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800cf30:	4b8b      	ldr	r3, [pc, #556]	@ (800d160 <main+0x280>)
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d138      	bne.n	800cfae <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800cf3c:	4b88      	ldr	r3, [pc, #544]	@ (800d160 <main+0x280>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cf44:	f3bf 8f4f 	dsb	sy
}
 800cf48:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800cf4a:	4b85      	ldr	r3, [pc, #532]	@ (800d160 <main+0x280>)
 800cf4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf50:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	0b5b      	lsrs	r3, r3, #13
 800cf56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cf5a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	08db      	lsrs	r3, r3, #3
 800cf60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf64:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	015a      	lsls	r2, r3, #5
 800cf6a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800cf6e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cf74:	497a      	ldr	r1, [pc, #488]	@ (800d160 <main+0x280>)
 800cf76:	4313      	orrs	r3, r2
 800cf78:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	1e5a      	subs	r2, r3, #1
 800cf80:	607a      	str	r2, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1ef      	bne.n	800cf66 <main+0x86>
    } while(sets-- != 0U);
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	1e5a      	subs	r2, r3, #1
 800cf8a:	60ba      	str	r2, [r7, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e5      	bne.n	800cf5c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800cf90:	f3bf 8f4f 	dsb	sy
}
 800cf94:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cf96:	4b72      	ldr	r3, [pc, #456]	@ (800d160 <main+0x280>)
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	4a71      	ldr	r2, [pc, #452]	@ (800d160 <main+0x280>)
 800cf9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cfa0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cfa2:	f3bf 8f4f 	dsb	sy
}
 800cfa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cfa8:	f3bf 8f6f 	isb	sy
}
 800cfac:	e000      	b.n	800cfb0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800cfae:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cfb0:	f7f3 fa18 	bl	80003e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cfb4:	f000 f8fc 	bl	800d1b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800cfb8:	f000 f9a8 	bl	800d30c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cfbc:	f7ff fcd0 	bl	800c960 <MX_GPIO_Init>
  MX_DAC1_Init();
 800cfc0:	f7ff fc4e 	bl	800c860 <MX_DAC1_Init>
  MX_SPI1_Init();
 800cfc4:	f000 fb02 	bl	800d5cc <MX_SPI1_Init>
  MX_SPI2_Init();
 800cfc8:	f000 fb56 	bl	800d678 <MX_SPI2_Init>
  MX_TIM2_Init();
 800cfcc:	f000 fd9c 	bl	800db08 <MX_TIM2_Init>
  MX_TIM8_Init();
 800cfd0:	f000 fe60 	bl	800dc94 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 800cfd4:	f001 f80e 	bl	800dff4 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 800cfd8:	f7ff fdc0 	bl	800cb5c <MX_I2C3_Init>
  MX_TIM3_Init();
 800cfdc:	f000 fe0c 	bl	800dbf8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // 给变量分配存储空间
  signal_V = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800cfe0:	2050      	movs	r0, #80	@ 0x50
 800cfe2:	f001 feab 	bl	800ed3c <malloc>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	461a      	mov	r2, r3
 800cfea:	4b5e      	ldr	r3, [pc, #376]	@ (800d164 <main+0x284>)
 800cfec:	601a      	str	r2, [r3, #0]
  signal_I = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800cfee:	2050      	movs	r0, #80	@ 0x50
 800cff0:	f001 fea4 	bl	800ed3c <malloc>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	4b5b      	ldr	r3, [pc, #364]	@ (800d168 <main+0x288>)
 800cffa:	601a      	str	r2, [r3, #0]
  signal_V->pid = (PID *)malloc(sizeof(PID));
 800cffc:	4b59      	ldr	r3, [pc, #356]	@ (800d164 <main+0x284>)
 800cffe:	681c      	ldr	r4, [r3, #0]
 800d000:	2024      	movs	r0, #36	@ 0x24
 800d002:	f001 fe9b 	bl	800ed3c <malloc>
 800d006:	4603      	mov	r3, r0
 800d008:	64e3      	str	r3, [r4, #76]	@ 0x4c
  signal_I->pid = (PID *)malloc(sizeof(PID));
 800d00a:	4b57      	ldr	r3, [pc, #348]	@ (800d168 <main+0x288>)
 800d00c:	681c      	ldr	r4, [r3, #0]
 800d00e:	2024      	movs	r0, #36	@ 0x24
 800d010:	f001 fe94 	bl	800ed3c <malloc>
 800d014:	4603      	mov	r3, r0
 800d016:	64a3      	str	r3, [r4, #72]	@ 0x48
  signal_V->sogi = (SOGI *)malloc(sizeof(SOGI));
 800d018:	4b52      	ldr	r3, [pc, #328]	@ (800d164 <main+0x284>)
 800d01a:	681c      	ldr	r4, [r3, #0]
 800d01c:	2034      	movs	r0, #52	@ 0x34
 800d01e:	f001 fe8d 	bl	800ed3c <malloc>
 800d022:	4603      	mov	r3, r0
 800d024:	64a3      	str	r3, [r4, #72]	@ 0x48
  signal_I->sogi = (SOGI *)malloc(sizeof(SOGI));
 800d026:	4b50      	ldr	r3, [pc, #320]	@ (800d168 <main+0x288>)
 800d028:	681c      	ldr	r4, [r3, #0]
 800d02a:	2034      	movs	r0, #52	@ 0x34
 800d02c:	f001 fe86 	bl	800ed3c <malloc>
 800d030:	4603      	mov	r3, r0
 800d032:	6463      	str	r3, [r4, #68]	@ 0x44
  signal_I->pr = (PR *)malloc(sizeof(PR));
 800d034:	4b4c      	ldr	r3, [pc, #304]	@ (800d168 <main+0x288>)
 800d036:	681c      	ldr	r4, [r3, #0]
 800d038:	2038      	movs	r0, #56	@ 0x38
 800d03a:	f001 fe7f 	bl	800ed3c <malloc>
 800d03e:	4603      	mov	r3, r0
 800d040:	64e3      	str	r3, [r4, #76]	@ 0x4c
  // 芯片温度
  // uint16_t temprature = 0;
  // float temp_result = 0;
  // 锁相环初始化
  pll_Init_V(signal_V, 50, 20000, 10 * 1.414);                     // 电压环
 800d042:	4b48      	ldr	r3, [pc, #288]	@ (800d164 <main+0x284>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	eddf 0a49 	vldr	s1, [pc, #292]	@ 800d16c <main+0x28c>
 800d04a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800d04e:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800d170 <main+0x290>
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe fea0 	bl	800bd98 <pll_Init_V>
  pll_Init_I(signal_I, 50, 20000, 10000.f, 1000000.f, 0.01f, 100.f); // 电流环
 800d058:	4b43      	ldr	r3, [pc, #268]	@ (800d168 <main+0x288>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	ed9f 2a45 	vldr	s4, [pc, #276]	@ 800d174 <main+0x294>
 800d060:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800d178 <main+0x298>
 800d064:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 800d17c <main+0x29c>
 800d068:	eddf 0a45 	vldr	s1, [pc, #276]	@ 800d180 <main+0x2a0>
 800d06c:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800d070:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800d170 <main+0x290>
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe ffb9 	bl	800bfec <pll_Init_I>
  // DAC模拟输出初始化
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 800d07a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d07e:	2200      	movs	r2, #0
 800d080:	2100      	movs	r1, #0
 800d082:	4840      	ldr	r0, [pc, #256]	@ (800d184 <main+0x2a4>)
 800d084:	f7f3 fc61 	bl	800094a <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800d088:	2100      	movs	r1, #0
 800d08a:	483e      	ldr	r0, [pc, #248]	@ (800d184 <main+0x2a4>)
 800d08c:	f7f3 fbb0 	bl	80007f0 <HAL_DAC_Start>
  // 初始化AD7606
  ad7606_Init();
 800d090:	f7fe f9b0 	bl	800b3f4 <ad7606_Init>
  // 打开PWM波
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800d094:	2100      	movs	r1, #0
 800d096:	483c      	ldr	r0, [pc, #240]	@ (800d188 <main+0x2a8>)
 800d098:	f7f9 fc00 	bl	800689c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800d09c:	2100      	movs	r1, #0
 800d09e:	483a      	ldr	r0, [pc, #232]	@ (800d188 <main+0x2a8>)
 800d0a0:	f7fa fc86 	bl	80079b0 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800d0a4:	2104      	movs	r1, #4
 800d0a6:	4838      	ldr	r0, [pc, #224]	@ (800d188 <main+0x2a8>)
 800d0a8:	f7f9 fbf8 	bl	800689c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800d0ac:	2104      	movs	r1, #4
 800d0ae:	4836      	ldr	r0, [pc, #216]	@ (800d188 <main+0x2a8>)
 800d0b0:	f7fa fc7e 	bl	80079b0 <HAL_TIMEx_PWMN_Start>
  // OLED初始化
  OLED_Init();
 800d0b4:	f7fe fd46 	bl	800bb44 <OLED_Init>
  // INA238初始化
  ina238_Init(&hi2c3, 0);
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	4834      	ldr	r0, [pc, #208]	@ (800d18c <main+0x2ac>)
 800d0bc:	f7fe fa7e 	bl	800b5bc <ina238_Init>
  // iir滤波器初始化
  iir_V = (arm_biquad_casd_df1_inst_f32 *)malloc(sizeof(arm_biquad_casd_df1_inst_f32));
 800d0c0:	200c      	movs	r0, #12
 800d0c2:	f001 fe3b 	bl	800ed3c <malloc>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	4b31      	ldr	r3, [pc, #196]	@ (800d190 <main+0x2b0>)
 800d0cc:	601a      	str	r2, [r3, #0]
  iir_I = (arm_biquad_casd_df1_inst_f32 *)malloc(sizeof(arm_biquad_casd_df1_inst_f32));
 800d0ce:	200c      	movs	r0, #12
 800d0d0:	f001 fe34 	bl	800ed3c <malloc>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	4b2e      	ldr	r3, [pc, #184]	@ (800d194 <main+0x2b4>)
 800d0da:	601a      	str	r2, [r3, #0]
  arm_biquad_cascade_df1_init_f32(iir_V, iirNumStages, iirCoeffs_20Hz, signal_V->iirState);
 800d0dc:	4b2c      	ldr	r3, [pc, #176]	@ (800d190 <main+0x2b0>)
 800d0de:	6818      	ldr	r0, [r3, #0]
 800d0e0:	4b20      	ldr	r3, [pc, #128]	@ (800d164 <main+0x284>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	3328      	adds	r3, #40	@ 0x28
 800d0e6:	4a2c      	ldr	r2, [pc, #176]	@ (800d198 <main+0x2b8>)
 800d0e8:	2102      	movs	r1, #2
 800d0ea:	f001 fc8d 	bl	800ea08 <arm_biquad_cascade_df1_init_f32>
  arm_biquad_cascade_df1_init_f32(iir_I, iirNumStages, iirCoeffs_20Hz, signal_I->iirState);
 800d0ee:	4b29      	ldr	r3, [pc, #164]	@ (800d194 <main+0x2b4>)
 800d0f0:	6818      	ldr	r0, [r3, #0]
 800d0f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d168 <main+0x288>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3324      	adds	r3, #36	@ 0x24
 800d0f8:	4a27      	ldr	r2, [pc, #156]	@ (800d198 <main+0x2b8>)
 800d0fa:	2102      	movs	r1, #2
 800d0fc:	f001 fc84 	bl	800ea08 <arm_biquad_cascade_df1_init_f32>
  // 开启中断
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 800d100:	2100      	movs	r1, #0
 800d102:	4826      	ldr	r0, [pc, #152]	@ (800d19c <main+0x2bc>)
 800d104:	f7fe f9b0 	bl	800b468 <ad7606_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800d108:	4825      	ldr	r0, [pc, #148]	@ (800d1a0 <main+0x2c0>)
 800d10a:	f7f9 faed 	bl	80066e8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (signal_I->rms * iirScale_20Hz / 1.414f > 0.2)
 800d10e:	4b16      	ldr	r3, [pc, #88]	@ (800d168 <main+0x288>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	ed93 7a03 	vldr	s14, [r3, #12]
 800d116:	4b23      	ldr	r3, [pc, #140]	@ (800d1a4 <main+0x2c4>)
 800d118:	edd3 7a00 	vldr	s15, [r3]
 800d11c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d120:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800d1a8 <main+0x2c8>
 800d124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d12c:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 800d158 <main+0x278>
 800d130:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d138:	dd02      	ble.n	800d140 <main+0x260>
      circuit_Connect();
 800d13a:	f7ff feb7 	bl	800ceac <circuit_Connect>
 800d13e:	e001      	b.n	800d144 <main+0x264>
    else
      circuit_Disconnect();
 800d140:	f7ff fec0 	bl	800cec4 <circuit_Disconnect>
    oled_Show();
 800d144:	f7ff fdec 	bl	800cd20 <oled_Show>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d148:	2101      	movs	r1, #1
 800d14a:	4818      	ldr	r0, [pc, #96]	@ (800d1ac <main+0x2cc>)
 800d14c:	f7f3 ff47 	bl	8000fde <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800d150:	2064      	movs	r0, #100	@ 0x64
 800d152:	f7f3 f9a3 	bl	800049c <HAL_Delay>
    if (signal_I->rms * iirScale_20Hz / 1.414f > 0.2)
 800d156:	e7da      	b.n	800d10e <main+0x22e>
 800d158:	9999999a 	.word	0x9999999a
 800d15c:	3fc99999 	.word	0x3fc99999
 800d160:	e000ed00 	.word	0xe000ed00
 800d164:	20000000 	.word	0x20000000
 800d168:	20000004 	.word	0x20000004
 800d16c:	41623d71 	.word	0x41623d71
 800d170:	42480000 	.word	0x42480000
 800d174:	42c80000 	.word	0x42c80000
 800d178:	3c23d70a 	.word	0x3c23d70a
 800d17c:	49742400 	.word	0x49742400
 800d180:	461c4000 	.word	0x461c4000
 800d184:	24000770 	.word	0x24000770
 800d188:	24000ad4 	.word	0x24000ad4
 800d18c:	24000784 	.word	0x24000784
 800d190:	20000008 	.word	0x20000008
 800d194:	2000000c 	.word	0x2000000c
 800d198:	08011c34 	.word	0x08011c34
 800d19c:	24000a3c 	.word	0x24000a3c
 800d1a0:	24000a88 	.word	0x24000a88
 800d1a4:	08011c5c 	.word	0x08011c5c
 800d1a8:	3fb4fdf4 	.word	0x3fb4fdf4
 800d1ac:	58022000 	.word	0x58022000

0800d1b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b09e      	sub	sp, #120	@ 0x78
 800d1b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d1b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d1ba:	224c      	movs	r2, #76	@ 0x4c
 800d1bc:	2100      	movs	r1, #0
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f002 fbcf 	bl	800f962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d1c4:	f107 030c 	add.w	r3, r7, #12
 800d1c8:	2220      	movs	r2, #32
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f002 fbc8 	bl	800f962 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800d1d2:	2002      	movs	r0, #2
 800d1d4:	f7f5 fffa 	bl	80031cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d1d8:	2300      	movs	r3, #0
 800d1da:	60bb      	str	r3, [r7, #8]
 800d1dc:	4b48      	ldr	r3, [pc, #288]	@ (800d300 <SystemClock_Config+0x150>)
 800d1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e0:	4a47      	ldr	r2, [pc, #284]	@ (800d300 <SystemClock_Config+0x150>)
 800d1e2:	f023 0301 	bic.w	r3, r3, #1
 800d1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d1e8:	4b45      	ldr	r3, [pc, #276]	@ (800d300 <SystemClock_Config+0x150>)
 800d1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	60bb      	str	r3, [r7, #8]
 800d1f2:	4b44      	ldr	r3, [pc, #272]	@ (800d304 <SystemClock_Config+0x154>)
 800d1f4:	699b      	ldr	r3, [r3, #24]
 800d1f6:	4a43      	ldr	r2, [pc, #268]	@ (800d304 <SystemClock_Config+0x154>)
 800d1f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d1fc:	6193      	str	r3, [r2, #24]
 800d1fe:	4b41      	ldr	r3, [pc, #260]	@ (800d304 <SystemClock_Config+0x154>)
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d206:	60bb      	str	r3, [r7, #8]
 800d208:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800d20a:	bf00      	nop
 800d20c:	4b3d      	ldr	r3, [pc, #244]	@ (800d304 <SystemClock_Config+0x154>)
 800d20e:	699b      	ldr	r3, [r3, #24]
 800d210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d218:	d1f8      	bne.n	800d20c <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d21a:	4b3b      	ldr	r3, [pc, #236]	@ (800d308 <SystemClock_Config+0x158>)
 800d21c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d220:	4a39      	ldr	r2, [pc, #228]	@ (800d308 <SystemClock_Config+0x158>)
 800d222:	f043 0302 	orr.w	r3, r3, #2
 800d226:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d22a:	4b37      	ldr	r3, [pc, #220]	@ (800d308 <SystemClock_Config+0x158>)
 800d22c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d230:	f003 0302 	and.w	r3, r3, #2
 800d234:	607b      	str	r3, [r7, #4]
 800d236:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800d238:	2300      	movs	r3, #0
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	4b31      	ldr	r3, [pc, #196]	@ (800d304 <SystemClock_Config+0x154>)
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	4a30      	ldr	r2, [pc, #192]	@ (800d304 <SystemClock_Config+0x154>)
 800d242:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d246:	6193      	str	r3, [r2, #24]
 800d248:	4b2e      	ldr	r3, [pc, #184]	@ (800d304 <SystemClock_Config+0x154>)
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d250:	603b      	str	r3, [r7, #0]
 800d252:	4b2b      	ldr	r3, [pc, #172]	@ (800d300 <SystemClock_Config+0x150>)
 800d254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d256:	4a2a      	ldr	r2, [pc, #168]	@ (800d300 <SystemClock_Config+0x150>)
 800d258:	f043 0301 	orr.w	r3, r3, #1
 800d25c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d25e:	4b28      	ldr	r3, [pc, #160]	@ (800d300 <SystemClock_Config+0x150>)
 800d260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800d26a:	bf00      	nop
 800d26c:	4b25      	ldr	r3, [pc, #148]	@ (800d304 <SystemClock_Config+0x154>)
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d278:	d1f8      	bne.n	800d26c <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d27a:	2301      	movs	r3, #1
 800d27c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d27e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d284:	2302      	movs	r3, #2
 800d286:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d288:	2302      	movs	r3, #2
 800d28a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800d28c:	2305      	movs	r3, #5
 800d28e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800d290:	23c0      	movs	r3, #192	@ 0xc0
 800d292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800d294:	2302      	movs	r3, #2
 800d296:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800d298:	2314      	movs	r3, #20
 800d29a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d29c:	2302      	movs	r3, #2
 800d29e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800d2a0:	2308      	movs	r3, #8
 800d2a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d2ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7f5 ffd5 	bl	8003260 <HAL_RCC_OscConfig>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800d2bc:	f000 f968 	bl	800d590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 800d2c0:	233f      	movs	r3, #63	@ 0x3f
 800d2c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d2c4:	2303      	movs	r3, #3
 800d2c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800d2cc:	2308      	movs	r3, #8
 800d2ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800d2d0:	2340      	movs	r3, #64	@ 0x40
 800d2d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800d2d4:	2340      	movs	r3, #64	@ 0x40
 800d2d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800d2d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800d2de:	2340      	movs	r3, #64	@ 0x40
 800d2e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800d2e2:	f107 030c 	add.w	r3, r7, #12
 800d2e6:	2104      	movs	r1, #4
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7f6 fc13 	bl	8003b14 <HAL_RCC_ClockConfig>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800d2f4:	f000 f94c 	bl	800d590 <Error_Handler>
  }
}
 800d2f8:	bf00      	nop
 800d2fa:	3778      	adds	r7, #120	@ 0x78
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	58000400 	.word	0x58000400
 800d304:	58024800 	.word	0x58024800
 800d308:	58024400 	.word	0x58024400

0800d30c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b0b0      	sub	sp, #192	@ 0xc0
 800d310:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d312:	463b      	mov	r3, r7
 800d314:	22c0      	movs	r2, #192	@ 0xc0
 800d316:	2100      	movs	r1, #0
 800d318:	4618      	mov	r0, r3
 800d31a:	f002 fb22 	bl	800f962 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 800d31e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d322:	f04f 0300 	mov.w	r3, #0
 800d326:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 800d32a:	2319      	movs	r3, #25
 800d32c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 800d32e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800d332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800d334:	2302      	movs	r3, #2
 800d336:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800d338:	2302      	movs	r3, #2
 800d33a:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800d33c:	2302      	movs	r3, #2
 800d33e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800d340:	2300      	movs	r3, #0
 800d342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800d344:	2300      	movs	r3, #0
 800d346:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800d348:	2300      	movs	r3, #0
 800d34a:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800d34c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d350:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d352:	463b      	mov	r3, r7
 800d354:	4618      	mov	r0, r3
 800d356:	f7f6 ff95 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800d360:	f000 f916 	bl	800d590 <Error_Handler>
  }
}
 800d364:	bf00      	nop
 800d366:	37c0      	adds	r7, #192	@ 0xc0
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief 外部中断触发示例
 * @param GPIO_Pin 中断引脚
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	4603      	mov	r3, r0
 800d374:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == AD7606_BUSY_Pin)
 800d376:	88fb      	ldrh	r3, [r7, #6]
 800d378:	2b40      	cmp	r3, #64	@ 0x40
 800d37a:	d173      	bne.n	800d464 <HAL_GPIO_EXTI_Callback+0xf8>
  {
    ad7606_GetValue(&hspi2, 3, adcBuf);
 800d37c:	4a3b      	ldr	r2, [pc, #236]	@ (800d46c <HAL_GPIO_EXTI_Callback+0x100>)
 800d37e:	2103      	movs	r1, #3
 800d380:	483b      	ldr	r0, [pc, #236]	@ (800d470 <HAL_GPIO_EXTI_Callback+0x104>)
 800d382:	f7fe f8d5 	bl	800b530 <ad7606_GetValue>
    // 缓存adcBuf
    signal_V->input[0] = adcBuf[1] * 100.f / 2.4f;
 800d386:	4b39      	ldr	r3, [pc, #228]	@ (800d46c <HAL_GPIO_EXTI_Callback+0x100>)
 800d388:	edd3 7a01 	vldr	s15, [r3, #4]
 800d38c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800d474 <HAL_GPIO_EXTI_Callback+0x108>
 800d390:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d394:	4b38      	ldr	r3, [pc, #224]	@ (800d478 <HAL_GPIO_EXTI_Callback+0x10c>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d47c <HAL_GPIO_EXTI_Callback+0x110>
 800d39c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d3a0:	edc3 7a00 	vstr	s15, [r3]
    signal_I->input[0] = adcBuf[2] * 2.5487179f;
 800d3a4:	4b31      	ldr	r3, [pc, #196]	@ (800d46c <HAL_GPIO_EXTI_Callback+0x100>)
 800d3a6:	edd3 7a02 	vldr	s15, [r3, #8]
 800d3aa:	4b35      	ldr	r3, [pc, #212]	@ (800d480 <HAL_GPIO_EXTI_Callback+0x114>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800d484 <HAL_GPIO_EXTI_Callback+0x118>
 800d3b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3b6:	edc3 7a00 	vstr	s15, [r3]
    // 锁相控制
    pll_Control_V(signal_V);                        // 电压环
 800d3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800d478 <HAL_GPIO_EXTI_Callback+0x10c>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7ff f822 	bl	800c408 <pll_Control_V>
    pll_Control_I(signal_I, signal_V, 6.f, dcVolt); // 电流环
 800d3c4:	4b2e      	ldr	r3, [pc, #184]	@ (800d480 <HAL_GPIO_EXTI_Callback+0x114>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a2b      	ldr	r2, [pc, #172]	@ (800d478 <HAL_GPIO_EXTI_Callback+0x10c>)
 800d3ca:	6812      	ldr	r2, [r2, #0]
 800d3cc:	492e      	ldr	r1, [pc, #184]	@ (800d488 <HAL_GPIO_EXTI_Callback+0x11c>)
 800d3ce:	edd1 7a00 	vldr	s15, [r1]
 800d3d2:	eef0 0a67 	vmov.f32	s1, s15
 800d3d6:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff f8b3 	bl	800c548 <pll_Control_I>
    // 调节SPWM占空比
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, signal_I->pr->out[0]);
 800d3e2:	4b27      	ldr	r3, [pc, #156]	@ (800d480 <HAL_GPIO_EXTI_Callback+0x114>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3e8:	edd3 7a02 	vldr	s15, [r3, #8]
 800d3ec:	4b27      	ldr	r3, [pc, #156]	@ (800d48c <HAL_GPIO_EXTI_Callback+0x120>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3f4:	ee17 2a90 	vmov	r2, s15
 800d3f8:	635a      	str	r2, [r3, #52]	@ 0x34
    // 输出有效值滤波
    arm_biquad_cascade_df1_f32(iir_V, &signal_V->park_d, &signal_V->rms, iirBlockSize);
 800d3fa:	4b25      	ldr	r3, [pc, #148]	@ (800d490 <HAL_GPIO_EXTI_Callback+0x124>)
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d478 <HAL_GPIO_EXTI_Callback+0x10c>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f103 0110 	add.w	r1, r3, #16
 800d406:	4b1c      	ldr	r3, [pc, #112]	@ (800d478 <HAL_GPIO_EXTI_Callback+0x10c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f103 020c 	add.w	r2, r3, #12
 800d40e:	2301      	movs	r3, #1
 800d410:	f001 fb06 	bl	800ea20 <arm_biquad_cascade_df1_f32>
    arm_biquad_cascade_df1_f32(iir_I, &signal_I->park_d, &signal_I->rms, iirBlockSize);
 800d414:	4b1f      	ldr	r3, [pc, #124]	@ (800d494 <HAL_GPIO_EXTI_Callback+0x128>)
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	4b19      	ldr	r3, [pc, #100]	@ (800d480 <HAL_GPIO_EXTI_Callback+0x114>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f103 0110 	add.w	r1, r3, #16
 800d420:	4b17      	ldr	r3, [pc, #92]	@ (800d480 <HAL_GPIO_EXTI_Callback+0x114>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f103 020c 	add.w	r2, r3, #12
 800d428:	2301      	movs	r3, #1
 800d42a:	f001 faf9 	bl	800ea20 <arm_biquad_cascade_df1_f32>
    // 调试输出
#if USER_DEBUG
    oled_Show();
#endif
    // DAC模拟输出，便于调试，不需要时可关闭
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000.f * arm_cos_f32(signal_V->theta) + 2048.f);
 800d42e:	4b12      	ldr	r3, [pc, #72]	@ (800d478 <HAL_GPIO_EXTI_Callback+0x10c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	edd3 7a06 	vldr	s15, [r3, #24]
 800d436:	eeb0 0a67 	vmov.f32	s0, s15
 800d43a:	f001 fc35 	bl	800eca8 <arm_cos_f32>
 800d43e:	eef0 7a40 	vmov.f32	s15, s0
 800d442:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800d498 <HAL_GPIO_EXTI_Callback+0x12c>
 800d446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d44a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800d49c <HAL_GPIO_EXTI_Callback+0x130>
 800d44e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d456:	ee17 3a90 	vmov	r3, s15
 800d45a:	2200      	movs	r2, #0
 800d45c:	2100      	movs	r1, #0
 800d45e:	4810      	ldr	r0, [pc, #64]	@ (800d4a0 <HAL_GPIO_EXTI_Callback+0x134>)
 800d460:	f7f3 fa73 	bl	800094a <HAL_DAC_SetValue>
  }
}
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20000010 	.word	0x20000010
 800d470:	24000968 	.word	0x24000968
 800d474:	42c80000 	.word	0x42c80000
 800d478:	20000000 	.word	0x20000000
 800d47c:	4019999a 	.word	0x4019999a
 800d480:	20000004 	.word	0x20000004
 800d484:	40231e32 	.word	0x40231e32
 800d488:	240007d8 	.word	0x240007d8
 800d48c:	24000ad4 	.word	0x24000ad4
 800d490:	20000008 	.word	0x20000008
 800d494:	2000000c 	.word	0x2000000c
 800d498:	44fa0000 	.word	0x44fa0000
 800d49c:	45000000 	.word	0x45000000
 800d4a0:	24000770 	.word	0x24000770

0800d4a4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	605a      	str	r2, [r3, #4]
 800d4b2:	609a      	str	r2, [r3, #8]
 800d4b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800d4b6:	f7f3 f901 	bl	80006bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800d4c2:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800d4c6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800d4c8:	2312      	movs	r3, #18
 800d4ca:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d4e8:	463b      	mov	r3, r7
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7f3 f91e 	bl	800072c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800d4f4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800d4f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800d4fa:	230f      	movs	r3, #15
 800d4fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800d502:	2300      	movs	r3, #0
 800d504:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d506:	463b      	mov	r3, r7
 800d508:	4618      	mov	r0, r3
 800d50a:	f7f3 f90f 	bl	800072c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800d50e:	2302      	movs	r3, #2
 800d510:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 800d512:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d516:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800d518:	2310      	movs	r3, #16
 800d51a:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d51c:	463b      	mov	r3, r7
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f3 f904 	bl	800072c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800d524:	2004      	movs	r0, #4
 800d526:	f7f3 f8e1 	bl	80006ec <HAL_MPU_Enable>
}
 800d52a:	bf00      	nop
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
	...

0800d534 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a0e      	ldr	r2, [pc, #56]	@ (800d57c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d101      	bne.n	800d54a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800d546:	f7f2 ff89 	bl	800045c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) // 100Hz
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a0c      	ldr	r2, [pc, #48]	@ (800d580 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d10f      	bne.n	800d574 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
    // 控制中间直流电压
    dcVolt = ina238_GetVolt(&hi2c3);
 800d554:	480b      	ldr	r0, [pc, #44]	@ (800d584 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800d556:	f7fe f873 	bl	800b640 <ina238_GetVolt>
 800d55a:	eef0 7a40 	vmov.f32	s15, s0
 800d55e:	4b0a      	ldr	r3, [pc, #40]	@ (800d588 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800d560:	edc3 7a00 	vstr	s15, [r3]
    dcCurrent = ina238_GetCurrent(&hi2c3);
 800d564:	4807      	ldr	r0, [pc, #28]	@ (800d584 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800d566:	f7fe f8c7 	bl	800b6f8 <ina238_GetCurrent>
 800d56a:	eef0 7a40 	vmov.f32	s15, s0
 800d56e:	4b07      	ldr	r3, [pc, #28]	@ (800d58c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800d570:	edc3 7a00 	vstr	s15, [r3]
  }
  /* USER CODE END Callback 1 */
}
 800d574:	bf00      	nop
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	40001000 	.word	0x40001000
 800d580:	40000400 	.word	0x40000400
 800d584:	24000784 	.word	0x24000784
 800d588:	240007d8 	.word	0x240007d8
 800d58c:	240007dc 	.word	0x240007dc

0800d590 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d594:	b672      	cpsid	i
}
 800d596:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    // 闪烁灯
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d598:	2101      	movs	r1, #1
 800d59a:	480b      	ldr	r0, [pc, #44]	@ (800d5c8 <Error_Handler+0x38>)
 800d59c:	f7f3 fd1f 	bl	8000fde <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800d5a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d5a4:	f7f2 ff7a 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	4807      	ldr	r0, [pc, #28]	@ (800d5c8 <Error_Handler+0x38>)
 800d5ac:	f7f3 fd17 	bl	8000fde <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800d5b0:	2064      	movs	r0, #100	@ 0x64
 800d5b2:	f7f2 ff73 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	4803      	ldr	r0, [pc, #12]	@ (800d5c8 <Error_Handler+0x38>)
 800d5ba:	f7f3 fd10 	bl	8000fde <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800d5be:	2064      	movs	r0, #100	@ 0x64
 800d5c0:	f7f2 ff6c 	bl	800049c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800d5c4:	bf00      	nop
 800d5c6:	e7e7      	b.n	800d598 <Error_Handler+0x8>
 800d5c8:	58022000 	.word	0x58022000

0800d5cc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800d5d0:	4b27      	ldr	r3, [pc, #156]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d5d2:	4a28      	ldr	r2, [pc, #160]	@ (800d674 <MX_SPI1_Init+0xa8>)
 800d5d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d5d6:	4b26      	ldr	r3, [pc, #152]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d5d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800d5dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800d5de:	4b24      	ldr	r3, [pc, #144]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d5e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d5e4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d5e6:	4b22      	ldr	r3, [pc, #136]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d5e8:	2207      	movs	r2, #7
 800d5ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5ec:	4b20      	ldr	r3, [pc, #128]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d5f2:	4b1f      	ldr	r3, [pc, #124]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d5f8:	4b1d      	ldr	r3, [pc, #116]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d5fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d5fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d600:	4b1b      	ldr	r3, [pc, #108]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d602:	2200      	movs	r2, #0
 800d604:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d606:	4b1a      	ldr	r3, [pc, #104]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d608:	2200      	movs	r2, #0
 800d60a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d60c:	4b18      	ldr	r3, [pc, #96]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d60e:	2200      	movs	r2, #0
 800d610:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d612:	4b17      	ldr	r3, [pc, #92]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d614:	2200      	movs	r2, #0
 800d616:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800d618:	4b15      	ldr	r3, [pc, #84]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d61e:	4b14      	ldr	r3, [pc, #80]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d620:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d624:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d626:	4b12      	ldr	r3, [pc, #72]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d628:	2200      	movs	r2, #0
 800d62a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d62c:	4b10      	ldr	r3, [pc, #64]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d62e:	2200      	movs	r2, #0
 800d630:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d632:	4b0f      	ldr	r3, [pc, #60]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d634:	2200      	movs	r2, #0
 800d636:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d638:	4b0d      	ldr	r3, [pc, #52]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d63e:	4b0c      	ldr	r3, [pc, #48]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d640:	2200      	movs	r2, #0
 800d642:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d644:	4b0a      	ldr	r3, [pc, #40]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d646:	2200      	movs	r2, #0
 800d648:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d64a:	4b09      	ldr	r3, [pc, #36]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d650:	4b07      	ldr	r3, [pc, #28]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d652:	2200      	movs	r2, #0
 800d654:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d656:	4b06      	ldr	r3, [pc, #24]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d658:	2200      	movs	r2, #0
 800d65a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d65c:	4804      	ldr	r0, [pc, #16]	@ (800d670 <MX_SPI1_Init+0xa4>)
 800d65e:	f7f8 f97f 	bl	8005960 <HAL_SPI_Init>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800d668:	f7ff ff92 	bl	800d590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d66c:	bf00      	nop
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	240008e0 	.word	0x240008e0
 800d674:	40013000 	.word	0x40013000

0800d678 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800d67c:	4b28      	ldr	r3, [pc, #160]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d67e:	4a29      	ldr	r2, [pc, #164]	@ (800d724 <MX_SPI2_Init+0xac>)
 800d680:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d682:	4b27      	ldr	r3, [pc, #156]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d684:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800d688:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800d68a:	4b25      	ldr	r3, [pc, #148]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d68c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d690:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800d692:	4b23      	ldr	r3, [pc, #140]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d694:	220f      	movs	r2, #15
 800d696:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d698:	4b21      	ldr	r3, [pc, #132]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d69a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d69e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d6a0:	4b1f      	ldr	r3, [pc, #124]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d6a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d6ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800d6ae:	4b1c      	ldr	r3, [pc, #112]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6b0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d6b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d6b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d6bc:	4b18      	ldr	r3, [pc, #96]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6c2:	4b17      	ldr	r3, [pc, #92]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800d6c8:	4b15      	ldr	r3, [pc, #84]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d6ce:	4b14      	ldr	r3, [pc, #80]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d6d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800d6d6:	4b12      	ldr	r3, [pc, #72]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800d6dc:	4b10      	ldr	r3, [pc, #64]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800d6e8:	4b0d      	ldr	r3, [pc, #52]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800d6ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800d6fa:	4b09      	ldr	r3, [pc, #36]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800d700:	4b07      	ldr	r3, [pc, #28]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d702:	2200      	movs	r2, #0
 800d704:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800d706:	4b06      	ldr	r3, [pc, #24]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d708:	2200      	movs	r2, #0
 800d70a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d70c:	4804      	ldr	r0, [pc, #16]	@ (800d720 <MX_SPI2_Init+0xa8>)
 800d70e:	f7f8 f927 	bl	8005960 <HAL_SPI_Init>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d001      	beq.n	800d71c <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 800d718:	f7ff ff3a 	bl	800d590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d71c:	bf00      	nop
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	24000968 	.word	0x24000968
 800d724:	40003800 	.word	0x40003800

0800d728 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08c      	sub	sp, #48	@ 0x30
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d730:	f107 031c 	add.w	r3, r7, #28
 800d734:	2200      	movs	r2, #0
 800d736:	601a      	str	r2, [r3, #0]
 800d738:	605a      	str	r2, [r3, #4]
 800d73a:	609a      	str	r2, [r3, #8]
 800d73c:	60da      	str	r2, [r3, #12]
 800d73e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a34      	ldr	r2, [pc, #208]	@ (800d818 <HAL_SPI_MspInit+0xf0>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d12e      	bne.n	800d7a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d74a:	4b34      	ldr	r3, [pc, #208]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d74c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d750:	4a32      	ldr	r2, [pc, #200]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d752:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d756:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d75a:	4b30      	ldr	r3, [pc, #192]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d75c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d764:	61bb      	str	r3, [r7, #24]
 800d766:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d768:	4b2c      	ldr	r3, [pc, #176]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d76a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d76e:	4a2b      	ldr	r2, [pc, #172]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d770:	f043 0301 	orr.w	r3, r3, #1
 800d774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d778:	4b28      	ldr	r3, [pc, #160]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d77a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d77e:	f003 0301 	and.w	r3, r3, #1
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800d786:	23a0      	movs	r3, #160	@ 0xa0
 800d788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d78a:	2302      	movs	r3, #2
 800d78c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d78e:	2300      	movs	r3, #0
 800d790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800d792:	2301      	movs	r3, #1
 800d794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d796:	2305      	movs	r3, #5
 800d798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d79a:	f107 031c 	add.w	r3, r7, #28
 800d79e:	4619      	mov	r1, r3
 800d7a0:	481f      	ldr	r0, [pc, #124]	@ (800d820 <HAL_SPI_MspInit+0xf8>)
 800d7a2:	f7f3 fa53 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800d7a6:	e032      	b.n	800d80e <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a1d      	ldr	r2, [pc, #116]	@ (800d824 <HAL_SPI_MspInit+0xfc>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d12d      	bne.n	800d80e <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d7b2:	4b1a      	ldr	r3, [pc, #104]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d7b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d7b8:	4a18      	ldr	r2, [pc, #96]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d7ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d7be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d7c2:	4b16      	ldr	r3, [pc, #88]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d7c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d7c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d7d0:	4b12      	ldr	r3, [pc, #72]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d7d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7d6:	4a11      	ldr	r2, [pc, #68]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d7d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d7e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d81c <HAL_SPI_MspInit+0xf4>)
 800d7e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800d7ee:	2306      	movs	r3, #6
 800d7f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d7fe:	2305      	movs	r3, #5
 800d800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d802:	f107 031c 	add.w	r3, r7, #28
 800d806:	4619      	mov	r1, r3
 800d808:	4807      	ldr	r0, [pc, #28]	@ (800d828 <HAL_SPI_MspInit+0x100>)
 800d80a:	f7f3 fa1f 	bl	8000c4c <HAL_GPIO_Init>
}
 800d80e:	bf00      	nop
 800d810:	3730      	adds	r7, #48	@ 0x30
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	40013000 	.word	0x40013000
 800d81c:	58024400 	.word	0x58024400
 800d820:	58020000 	.word	0x58020000
 800d824:	40003800 	.word	0x40003800
 800d828:	58022000 	.word	0x58022000

0800d82c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d832:	4b0a      	ldr	r3, [pc, #40]	@ (800d85c <HAL_MspInit+0x30>)
 800d834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d838:	4a08      	ldr	r2, [pc, #32]	@ (800d85c <HAL_MspInit+0x30>)
 800d83a:	f043 0302 	orr.w	r3, r3, #2
 800d83e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d842:	4b06      	ldr	r3, [pc, #24]	@ (800d85c <HAL_MspInit+0x30>)
 800d844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d848:	f003 0302 	and.w	r3, r3, #2
 800d84c:	607b      	str	r3, [r7, #4]
 800d84e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	58024400 	.word	0x58024400

0800d860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b090      	sub	sp, #64	@ 0x40
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b0f      	cmp	r3, #15
 800d86c:	d827      	bhi.n	800d8be <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800d86e:	2200      	movs	r2, #0
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	2036      	movs	r0, #54	@ 0x36
 800d874:	f7f2 fefa 	bl	800066c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d878:	2036      	movs	r0, #54	@ 0x36
 800d87a:	f7f2 ff11 	bl	80006a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800d87e:	4a29      	ldr	r2, [pc, #164]	@ (800d924 <HAL_InitTick+0xc4>)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800d884:	4b28      	ldr	r3, [pc, #160]	@ (800d928 <HAL_InitTick+0xc8>)
 800d886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d88a:	4a27      	ldr	r2, [pc, #156]	@ (800d928 <HAL_InitTick+0xc8>)
 800d88c:	f043 0310 	orr.w	r3, r3, #16
 800d890:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d894:	4b24      	ldr	r3, [pc, #144]	@ (800d928 <HAL_InitTick+0xc8>)
 800d896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d89a:	f003 0310 	and.w	r3, r3, #16
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d8a2:	f107 0210 	add.w	r2, r7, #16
 800d8a6:	f107 0314 	add.w	r3, r7, #20
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7f6 fca7 	bl	8004200 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800d8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800d8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d106      	bne.n	800d8ca <HAL_InitTick+0x6a>
 800d8bc:	e001      	b.n	800d8c2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e02b      	b.n	800d91a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d8c2:	f7f6 fc87 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 800d8c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d8c8:	e004      	b.n	800d8d4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d8ca:	f7f6 fc83 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8d6:	4a15      	ldr	r2, [pc, #84]	@ (800d92c <HAL_InitTick+0xcc>)
 800d8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d8dc:	0c9b      	lsrs	r3, r3, #18
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800d8e2:	4b13      	ldr	r3, [pc, #76]	@ (800d930 <HAL_InitTick+0xd0>)
 800d8e4:	4a13      	ldr	r2, [pc, #76]	@ (800d934 <HAL_InitTick+0xd4>)
 800d8e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800d8e8:	4b11      	ldr	r3, [pc, #68]	@ (800d930 <HAL_InitTick+0xd0>)
 800d8ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800d8ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800d8f0:	4a0f      	ldr	r2, [pc, #60]	@ (800d930 <HAL_InitTick+0xd0>)
 800d8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800d8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d930 <HAL_InitTick+0xd0>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d930 <HAL_InitTick+0xd0>)
 800d8fe:	2200      	movs	r2, #0
 800d900:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800d902:	480b      	ldr	r0, [pc, #44]	@ (800d930 <HAL_InitTick+0xd0>)
 800d904:	f7f8 fe99 	bl	800663a <HAL_TIM_Base_Init>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d104      	bne.n	800d918 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800d90e:	4808      	ldr	r0, [pc, #32]	@ (800d930 <HAL_InitTick+0xd0>)
 800d910:	f7f8 feea 	bl	80066e8 <HAL_TIM_Base_Start_IT>
 800d914:	4603      	mov	r3, r0
 800d916:	e000      	b.n	800d91a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800d918:	2301      	movs	r3, #1
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3740      	adds	r7, #64	@ 0x40
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	24000000 	.word	0x24000000
 800d928:	58024400 	.word	0x58024400
 800d92c:	431bde83 	.word	0x431bde83
 800d930:	240009f0 	.word	0x240009f0
 800d934:	40001000 	.word	0x40001000

0800d938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d938:	b480      	push	{r7}
 800d93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d93c:	bf00      	nop
 800d93e:	e7fd      	b.n	800d93c <NMI_Handler+0x4>

0800d940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d944:	bf00      	nop
 800d946:	e7fd      	b.n	800d944 <HardFault_Handler+0x4>

0800d948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d948:	b480      	push	{r7}
 800d94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d94c:	bf00      	nop
 800d94e:	e7fd      	b.n	800d94c <MemManage_Handler+0x4>

0800d950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d950:	b480      	push	{r7}
 800d952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d954:	bf00      	nop
 800d956:	e7fd      	b.n	800d954 <BusFault_Handler+0x4>

0800d958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d958:	b480      	push	{r7}
 800d95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d95c:	bf00      	nop
 800d95e:	e7fd      	b.n	800d95c <UsageFault_Handler+0x4>

0800d960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d960:	b480      	push	{r7}
 800d962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d964:	bf00      	nop
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d96e:	b480      	push	{r7}
 800d970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d972:	bf00      	nop
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d980:	bf00      	nop
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d98a:	b480      	push	{r7}
 800d98c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d98e:	bf00      	nop
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800d99c:	2040      	movs	r0, #64	@ 0x40
 800d99e:	f7f3 fb38 	bl	8001012 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d9a2:	bf00      	nop
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d9ac:	4802      	ldr	r0, [pc, #8]	@ (800d9b8 <TIM3_IRQHandler+0x10>)
 800d9ae:	f7f9 f883 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d9b2:	bf00      	nop
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	24000a88 	.word	0x24000a88

0800d9bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800d9c0:	4b06      	ldr	r3, [pc, #24]	@ (800d9dc <TIM6_DAC_IRQHandler+0x20>)
 800d9c2:	791b      	ldrb	r3, [r3, #4]
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d002      	beq.n	800d9d0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800d9ca:	4804      	ldr	r0, [pc, #16]	@ (800d9dc <TIM6_DAC_IRQHandler+0x20>)
 800d9cc:	f7f2 ff67 	bl	800089e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800d9d0:	4803      	ldr	r0, [pc, #12]	@ (800d9e0 <TIM6_DAC_IRQHandler+0x24>)
 800d9d2:	f7f9 f871 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d9d6:	bf00      	nop
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	24000770 	.word	0x24000770
 800d9e0:	240009f0 	.word	0x240009f0

0800d9e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800d9e8:	4802      	ldr	r0, [pc, #8]	@ (800d9f4 <OTG_FS_IRQHandler+0x10>)
 800d9ea:	f7f4 fa91 	bl	8001f10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800d9ee:	bf00      	nop
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	24001dfc 	.word	0x24001dfc

0800d9f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d9fc:	4b37      	ldr	r3, [pc, #220]	@ (800dadc <SystemInit+0xe4>)
 800d9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da02:	4a36      	ldr	r2, [pc, #216]	@ (800dadc <SystemInit+0xe4>)
 800da04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800da08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800da0c:	4b34      	ldr	r3, [pc, #208]	@ (800dae0 <SystemInit+0xe8>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f003 030f 	and.w	r3, r3, #15
 800da14:	2b06      	cmp	r3, #6
 800da16:	d807      	bhi.n	800da28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800da18:	4b31      	ldr	r3, [pc, #196]	@ (800dae0 <SystemInit+0xe8>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f023 030f 	bic.w	r3, r3, #15
 800da20:	4a2f      	ldr	r2, [pc, #188]	@ (800dae0 <SystemInit+0xe8>)
 800da22:	f043 0307 	orr.w	r3, r3, #7
 800da26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800da28:	4b2e      	ldr	r3, [pc, #184]	@ (800dae4 <SystemInit+0xec>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a2d      	ldr	r2, [pc, #180]	@ (800dae4 <SystemInit+0xec>)
 800da2e:	f043 0301 	orr.w	r3, r3, #1
 800da32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800da34:	4b2b      	ldr	r3, [pc, #172]	@ (800dae4 <SystemInit+0xec>)
 800da36:	2200      	movs	r2, #0
 800da38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800da3a:	4b2a      	ldr	r3, [pc, #168]	@ (800dae4 <SystemInit+0xec>)
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	4929      	ldr	r1, [pc, #164]	@ (800dae4 <SystemInit+0xec>)
 800da40:	4b29      	ldr	r3, [pc, #164]	@ (800dae8 <SystemInit+0xf0>)
 800da42:	4013      	ands	r3, r2
 800da44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800da46:	4b26      	ldr	r3, [pc, #152]	@ (800dae0 <SystemInit+0xe8>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f003 0308 	and.w	r3, r3, #8
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d007      	beq.n	800da62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800da52:	4b23      	ldr	r3, [pc, #140]	@ (800dae0 <SystemInit+0xe8>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f023 030f 	bic.w	r3, r3, #15
 800da5a:	4a21      	ldr	r2, [pc, #132]	@ (800dae0 <SystemInit+0xe8>)
 800da5c:	f043 0307 	orr.w	r3, r3, #7
 800da60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800da62:	4b20      	ldr	r3, [pc, #128]	@ (800dae4 <SystemInit+0xec>)
 800da64:	2200      	movs	r2, #0
 800da66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800da68:	4b1e      	ldr	r3, [pc, #120]	@ (800dae4 <SystemInit+0xec>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800da6e:	4b1d      	ldr	r3, [pc, #116]	@ (800dae4 <SystemInit+0xec>)
 800da70:	2200      	movs	r2, #0
 800da72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800da74:	4b1b      	ldr	r3, [pc, #108]	@ (800dae4 <SystemInit+0xec>)
 800da76:	4a1d      	ldr	r2, [pc, #116]	@ (800daec <SystemInit+0xf4>)
 800da78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800da7a:	4b1a      	ldr	r3, [pc, #104]	@ (800dae4 <SystemInit+0xec>)
 800da7c:	4a1c      	ldr	r2, [pc, #112]	@ (800daf0 <SystemInit+0xf8>)
 800da7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800da80:	4b18      	ldr	r3, [pc, #96]	@ (800dae4 <SystemInit+0xec>)
 800da82:	4a1c      	ldr	r2, [pc, #112]	@ (800daf4 <SystemInit+0xfc>)
 800da84:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800da86:	4b17      	ldr	r3, [pc, #92]	@ (800dae4 <SystemInit+0xec>)
 800da88:	2200      	movs	r2, #0
 800da8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800da8c:	4b15      	ldr	r3, [pc, #84]	@ (800dae4 <SystemInit+0xec>)
 800da8e:	4a19      	ldr	r2, [pc, #100]	@ (800daf4 <SystemInit+0xfc>)
 800da90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800da92:	4b14      	ldr	r3, [pc, #80]	@ (800dae4 <SystemInit+0xec>)
 800da94:	2200      	movs	r2, #0
 800da96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800da98:	4b12      	ldr	r3, [pc, #72]	@ (800dae4 <SystemInit+0xec>)
 800da9a:	4a16      	ldr	r2, [pc, #88]	@ (800daf4 <SystemInit+0xfc>)
 800da9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800da9e:	4b11      	ldr	r3, [pc, #68]	@ (800dae4 <SystemInit+0xec>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800daa4:	4b0f      	ldr	r3, [pc, #60]	@ (800dae4 <SystemInit+0xec>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a0e      	ldr	r2, [pc, #56]	@ (800dae4 <SystemInit+0xec>)
 800daaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800daae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800dab0:	4b0c      	ldr	r3, [pc, #48]	@ (800dae4 <SystemInit+0xec>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800dab6:	4b10      	ldr	r3, [pc, #64]	@ (800daf8 <SystemInit+0x100>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4b10      	ldr	r3, [pc, #64]	@ (800dafc <SystemInit+0x104>)
 800dabc:	4013      	ands	r3, r2
 800dabe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dac2:	d202      	bcs.n	800daca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800dac4:	4b0e      	ldr	r3, [pc, #56]	@ (800db00 <SystemInit+0x108>)
 800dac6:	2201      	movs	r2, #1
 800dac8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800daca:	4b0e      	ldr	r3, [pc, #56]	@ (800db04 <SystemInit+0x10c>)
 800dacc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800dad0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800dad2:	bf00      	nop
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr
 800dadc:	e000ed00 	.word	0xe000ed00
 800dae0:	52002000 	.word	0x52002000
 800dae4:	58024400 	.word	0x58024400
 800dae8:	eaf6ed7f 	.word	0xeaf6ed7f
 800daec:	02020200 	.word	0x02020200
 800daf0:	01ff0000 	.word	0x01ff0000
 800daf4:	01010280 	.word	0x01010280
 800daf8:	5c001000 	.word	0x5c001000
 800dafc:	ffff0000 	.word	0xffff0000
 800db00:	51008108 	.word	0x51008108
 800db04:	52004000 	.word	0x52004000

0800db08 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b08e      	sub	sp, #56	@ 0x38
 800db0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800db0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	605a      	str	r2, [r3, #4]
 800db18:	609a      	str	r2, [r3, #8]
 800db1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db1c:	f107 031c 	add.w	r3, r7, #28
 800db20:	2200      	movs	r2, #0
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	605a      	str	r2, [r3, #4]
 800db26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800db28:	463b      	mov	r3, r7
 800db2a:	2200      	movs	r2, #0
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	605a      	str	r2, [r3, #4]
 800db30:	609a      	str	r2, [r3, #8]
 800db32:	60da      	str	r2, [r3, #12]
 800db34:	611a      	str	r2, [r3, #16]
 800db36:	615a      	str	r2, [r3, #20]
 800db38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800db3a:	4b2e      	ldr	r3, [pc, #184]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800db40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800db42:	4b2c      	ldr	r3, [pc, #176]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db44:	2200      	movs	r2, #0
 800db46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db48:	4b2a      	ldr	r3, [pc, #168]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800db4e:	4b29      	ldr	r3, [pc, #164]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db50:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800db54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db56:	4b27      	ldr	r3, [pc, #156]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db58:	2200      	movs	r2, #0
 800db5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db5c:	4b25      	ldr	r3, [pc, #148]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db5e:	2200      	movs	r2, #0
 800db60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800db62:	4824      	ldr	r0, [pc, #144]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db64:	f7f8 fd69 	bl	800663a <HAL_TIM_Base_Init>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800db6e:	f7ff fd0f 	bl	800d590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db76:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800db78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800db7c:	4619      	mov	r1, r3
 800db7e:	481d      	ldr	r0, [pc, #116]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db80:	f7f9 f9b6 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800db8a:	f7ff fd01 	bl	800d590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800db8e:	4819      	ldr	r0, [pc, #100]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800db90:	f7f8 fe22 	bl	80067d8 <HAL_TIM_PWM_Init>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800db9a:	f7ff fcf9 	bl	800d590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800db9e:	2300      	movs	r3, #0
 800dba0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dba2:	2300      	movs	r3, #0
 800dba4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dba6:	f107 031c 	add.w	r3, r7, #28
 800dbaa:	4619      	mov	r1, r3
 800dbac:	4811      	ldr	r0, [pc, #68]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800dbae:	f7f9 ffc1 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800dbb8:	f7ff fcea 	bl	800d590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dbbc:	2360      	movs	r3, #96	@ 0x60
 800dbbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 800dbc0:	f242 3327 	movw	r3, #8999	@ 0x2327
 800dbc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dbce:	463b      	mov	r3, r7
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4807      	ldr	r0, [pc, #28]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800dbd6:	f7f9 f877 	bl	8006cc8 <HAL_TIM_PWM_ConfigChannel>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800dbe0:	f7ff fcd6 	bl	800d590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dbe4:	4803      	ldr	r0, [pc, #12]	@ (800dbf4 <MX_TIM2_Init+0xec>)
 800dbe6:	f000 f961 	bl	800deac <HAL_TIM_MspPostInit>

}
 800dbea:	bf00      	nop
 800dbec:	3738      	adds	r7, #56	@ 0x38
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	24000a3c 	.word	0x24000a3c

0800dbf8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b088      	sub	sp, #32
 800dbfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dbfe:	f107 0310 	add.w	r3, r7, #16
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	605a      	str	r2, [r3, #4]
 800dc08:	609a      	str	r2, [r3, #8]
 800dc0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc0c:	1d3b      	adds	r3, r7, #4
 800dc0e:	2200      	movs	r2, #0
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	605a      	str	r2, [r3, #4]
 800dc14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dc16:	4b1d      	ldr	r3, [pc, #116]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc18:	4a1d      	ldr	r2, [pc, #116]	@ (800dc90 <MX_TIM3_Init+0x98>)
 800dc1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800dc1c:	4b1b      	ldr	r3, [pc, #108]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc1e:	2263      	movs	r2, #99	@ 0x63
 800dc20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc22:	4b1a      	ldr	r3, [pc, #104]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24000-1;
 800dc28:	4b18      	ldr	r3, [pc, #96]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc2a:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800dc2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc30:	4b16      	ldr	r3, [pc, #88]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc36:	4b15      	ldr	r3, [pc, #84]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800dc3c:	4813      	ldr	r0, [pc, #76]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc3e:	f7f8 fcfc 	bl	800663a <HAL_TIM_Base_Init>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800dc48:	f7ff fca2 	bl	800d590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800dc52:	f107 0310 	add.w	r3, r7, #16
 800dc56:	4619      	mov	r1, r3
 800dc58:	480c      	ldr	r0, [pc, #48]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc5a:	f7f9 f949 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800dc64:	f7ff fc94 	bl	800d590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dc70:	1d3b      	adds	r3, r7, #4
 800dc72:	4619      	mov	r1, r3
 800dc74:	4805      	ldr	r0, [pc, #20]	@ (800dc8c <MX_TIM3_Init+0x94>)
 800dc76:	f7f9 ff5d 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d001      	beq.n	800dc84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800dc80:	f7ff fc86 	bl	800d590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800dc84:	bf00      	nop
 800dc86:	3720      	adds	r7, #32
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	24000a88 	.word	0x24000a88
 800dc90:	40000400 	.word	0x40000400

0800dc94 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b09a      	sub	sp, #104	@ 0x68
 800dc98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc9a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dc9e:	2200      	movs	r2, #0
 800dca0:	601a      	str	r2, [r3, #0]
 800dca2:	605a      	str	r2, [r3, #4]
 800dca4:	609a      	str	r2, [r3, #8]
 800dca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dca8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dcac:	2200      	movs	r2, #0
 800dcae:	601a      	str	r2, [r3, #0]
 800dcb0:	605a      	str	r2, [r3, #4]
 800dcb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dcb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dcb8:	2200      	movs	r2, #0
 800dcba:	601a      	str	r2, [r3, #0]
 800dcbc:	605a      	str	r2, [r3, #4]
 800dcbe:	609a      	str	r2, [r3, #8]
 800dcc0:	60da      	str	r2, [r3, #12]
 800dcc2:	611a      	str	r2, [r3, #16]
 800dcc4:	615a      	str	r2, [r3, #20]
 800dcc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dcc8:	1d3b      	adds	r3, r7, #4
 800dcca:	222c      	movs	r2, #44	@ 0x2c
 800dccc:	2100      	movs	r1, #0
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f001 fe47 	bl	800f962 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800dcd4:	4b49      	ldr	r3, [pc, #292]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dcd6:	4a4a      	ldr	r2, [pc, #296]	@ (800de00 <MX_TIM8_Init+0x16c>)
 800dcd8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800dcda:	4b48      	ldr	r3, [pc, #288]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dce0:	4b46      	ldr	r3, [pc, #280]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 12000-1;
 800dce6:	4b45      	ldr	r3, [pc, #276]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dce8:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800dcec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dcee:	4b43      	ldr	r3, [pc, #268]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800dcf4:	4b41      	ldr	r3, [pc, #260]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcfa:	4b40      	ldr	r3, [pc, #256]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800dd00:	483e      	ldr	r0, [pc, #248]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dd02:	f7f8 fc9a 	bl	800663a <HAL_TIM_Base_Init>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800dd0c:	f7ff fc40 	bl	800d590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd14:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800dd16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4837      	ldr	r0, [pc, #220]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dd1e:	f7f9 f8e7 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d001      	beq.n	800dd2c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800dd28:	f7ff fc32 	bl	800d590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800dd2c:	4833      	ldr	r0, [pc, #204]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dd2e:	f7f8 fd53 	bl	80067d8 <HAL_TIM_PWM_Init>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800dd38:	f7ff fc2a 	bl	800d590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800dd40:	2300      	movs	r3, #0
 800dd42:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd44:	2300      	movs	r3, #0
 800dd46:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dd48:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	482b      	ldr	r0, [pc, #172]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dd50:	f7f9 fef0 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800dd5a:	f7ff fc19 	bl	800d590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd5e:	2360      	movs	r3, #96	@ 0x60
 800dd60:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd66:	2300      	movs	r3, #0
 800dd68:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800dd72:	2300      	movs	r3, #0
 800dd74:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800dd76:	2300      	movs	r3, #0
 800dd78:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dd7e:	2200      	movs	r2, #0
 800dd80:	4619      	mov	r1, r3
 800dd82:	481e      	ldr	r0, [pc, #120]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dd84:	f7f8 ffa0 	bl	8006cc8 <HAL_TIM_PWM_ConfigChannel>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800dd8e:	f7ff fbff 	bl	800d590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dd92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dd96:	2204      	movs	r2, #4
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4818      	ldr	r0, [pc, #96]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dd9c:	f7f8 ff94 	bl	8006cc8 <HAL_TIM_PWM_ConfigChannel>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800dda6:	f7ff fbf3 	bl	800d590 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ddbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ddc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800ddcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ddd0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ddda:	1d3b      	adds	r3, r7, #4
 800dddc:	4619      	mov	r1, r3
 800ddde:	4807      	ldr	r0, [pc, #28]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800dde0:	f7f9 ff36 	bl	8007c50 <HAL_TIMEx_ConfigBreakDeadTime>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800ddea:	f7ff fbd1 	bl	800d590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800ddee:	4803      	ldr	r0, [pc, #12]	@ (800ddfc <MX_TIM8_Init+0x168>)
 800ddf0:	f000 f85c 	bl	800deac <HAL_TIM_MspPostInit>

}
 800ddf4:	bf00      	nop
 800ddf6:	3768      	adds	r7, #104	@ 0x68
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	24000ad4 	.word	0x24000ad4
 800de00:	40010400 	.word	0x40010400

0800de04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de14:	d10f      	bne.n	800de36 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800de16:	4b22      	ldr	r3, [pc, #136]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de1c:	4a20      	ldr	r2, [pc, #128]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de1e:	f043 0301 	orr.w	r3, r3, #1
 800de22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800de26:	4b1e      	ldr	r3, [pc, #120]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de2c:	f003 0301 	and.w	r3, r3, #1
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800de34:	e030      	b.n	800de98 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM3)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a1a      	ldr	r2, [pc, #104]	@ (800dea4 <HAL_TIM_Base_MspInit+0xa0>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d117      	bne.n	800de70 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800de40:	4b17      	ldr	r3, [pc, #92]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de46:	4a16      	ldr	r2, [pc, #88]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de48:	f043 0302 	orr.w	r3, r3, #2
 800de4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800de50:	4b13      	ldr	r3, [pc, #76]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de56:	f003 0302 	and.w	r3, r3, #2
 800de5a:	613b      	str	r3, [r7, #16]
 800de5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800de5e:	2200      	movs	r2, #0
 800de60:	2101      	movs	r1, #1
 800de62:	201d      	movs	r0, #29
 800de64:	f7f2 fc02 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800de68:	201d      	movs	r0, #29
 800de6a:	f7f2 fc19 	bl	80006a0 <HAL_NVIC_EnableIRQ>
}
 800de6e:	e013      	b.n	800de98 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM8)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4a0c      	ldr	r2, [pc, #48]	@ (800dea8 <HAL_TIM_Base_MspInit+0xa4>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d10e      	bne.n	800de98 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800de7a:	4b09      	ldr	r3, [pc, #36]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de80:	4a07      	ldr	r2, [pc, #28]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de82:	f043 0302 	orr.w	r3, r3, #2
 800de86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800de8a:	4b05      	ldr	r3, [pc, #20]	@ (800dea0 <HAL_TIM_Base_MspInit+0x9c>)
 800de8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de90:	f003 0302 	and.w	r3, r3, #2
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	68fb      	ldr	r3, [r7, #12]
}
 800de98:	bf00      	nop
 800de9a:	3718      	adds	r7, #24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	58024400 	.word	0x58024400
 800dea4:	40000400 	.word	0x40000400
 800dea8:	40010400 	.word	0x40010400

0800deac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b08c      	sub	sp, #48	@ 0x30
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800deb4:	f107 031c 	add.w	r3, r7, #28
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	605a      	str	r2, [r3, #4]
 800debe:	609a      	str	r2, [r3, #8]
 800dec0:	60da      	str	r2, [r3, #12]
 800dec2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800decc:	d11f      	bne.n	800df0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dece:	4b43      	ldr	r3, [pc, #268]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800ded0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ded4:	4a41      	ldr	r2, [pc, #260]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800ded6:	f043 0301 	orr.w	r3, r3, #1
 800deda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800dede:	4b3f      	ldr	r3, [pc, #252]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800dee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800deec:	2301      	movs	r3, #1
 800deee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800def0:	2302      	movs	r3, #2
 800def2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800def4:	2300      	movs	r3, #0
 800def6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800def8:	2303      	movs	r3, #3
 800defa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800defc:	2301      	movs	r3, #1
 800defe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df00:	f107 031c 	add.w	r3, r7, #28
 800df04:	4619      	mov	r1, r3
 800df06:	4836      	ldr	r0, [pc, #216]	@ (800dfe0 <HAL_TIM_MspPostInit+0x134>)
 800df08:	f7f2 fea0 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800df0c:	e062      	b.n	800dfd4 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM8)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a34      	ldr	r2, [pc, #208]	@ (800dfe4 <HAL_TIM_MspPostInit+0x138>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d15d      	bne.n	800dfd4 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df18:	4b30      	ldr	r3, [pc, #192]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df1e:	4a2f      	ldr	r2, [pc, #188]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df20:	f043 0302 	orr.w	r3, r3, #2
 800df24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800df28:	4b2c      	ldr	r3, [pc, #176]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df2e:	f003 0302 	and.w	r3, r3, #2
 800df32:	617b      	str	r3, [r7, #20]
 800df34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df36:	4b29      	ldr	r3, [pc, #164]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df3c:	4a27      	ldr	r2, [pc, #156]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df3e:	f043 0304 	orr.w	r3, r3, #4
 800df42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800df46:	4b25      	ldr	r3, [pc, #148]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	613b      	str	r3, [r7, #16]
 800df52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800df54:	4b21      	ldr	r3, [pc, #132]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df5a:	4a20      	ldr	r2, [pc, #128]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800df64:	4b1d      	ldr	r3, [pc, #116]	@ (800dfdc <HAL_TIM_MspPostInit+0x130>)
 800df66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800df72:	2301      	movs	r3, #1
 800df74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df76:	2302      	movs	r3, #2
 800df78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df7e:	2300      	movs	r3, #0
 800df80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800df82:	2303      	movs	r3, #3
 800df84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df86:	f107 031c 	add.w	r3, r7, #28
 800df8a:	4619      	mov	r1, r3
 800df8c:	4816      	ldr	r0, [pc, #88]	@ (800dfe8 <HAL_TIM_MspPostInit+0x13c>)
 800df8e:	f7f2 fe5d 	bl	8000c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800df92:	23c0      	movs	r3, #192	@ 0xc0
 800df94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df96:	2302      	movs	r3, #2
 800df98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df9a:	2300      	movs	r3, #0
 800df9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dfa6:	f107 031c 	add.w	r3, r7, #28
 800dfaa:	4619      	mov	r1, r3
 800dfac:	480f      	ldr	r0, [pc, #60]	@ (800dfec <HAL_TIM_MspPostInit+0x140>)
 800dfae:	f7f2 fe4d 	bl	8000c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800dfb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dfb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfb8:	2302      	movs	r3, #2
 800dfba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800dfc8:	f107 031c 	add.w	r3, r7, #28
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4808      	ldr	r0, [pc, #32]	@ (800dff0 <HAL_TIM_MspPostInit+0x144>)
 800dfd0:	f7f2 fe3c 	bl	8000c4c <HAL_GPIO_Init>
}
 800dfd4:	bf00      	nop
 800dfd6:	3730      	adds	r7, #48	@ 0x30
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	58024400 	.word	0x58024400
 800dfe0:	58020000 	.word	0x58020000
 800dfe4:	40010400 	.word	0x40010400
 800dfe8:	58020400 	.word	0x58020400
 800dfec:	58020800 	.word	0x58020800
 800dff0:	58021c00 	.word	0x58021c00

0800dff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dff8:	2200      	movs	r2, #0
 800dffa:	4913      	ldr	r1, [pc, #76]	@ (800e048 <MX_USB_DEVICE_Init+0x54>)
 800dffc:	4813      	ldr	r0, [pc, #76]	@ (800e04c <MX_USB_DEVICE_Init+0x58>)
 800dffe:	f7fb fecd 	bl	8009d9c <USBD_Init>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e008:	f7ff fac2 	bl	800d590 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e00c:	4910      	ldr	r1, [pc, #64]	@ (800e050 <MX_USB_DEVICE_Init+0x5c>)
 800e00e:	480f      	ldr	r0, [pc, #60]	@ (800e04c <MX_USB_DEVICE_Init+0x58>)
 800e010:	f7fb fef4 	bl	8009dfc <USBD_RegisterClass>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e01a:	f7ff fab9 	bl	800d590 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e01e:	490d      	ldr	r1, [pc, #52]	@ (800e054 <MX_USB_DEVICE_Init+0x60>)
 800e020:	480a      	ldr	r0, [pc, #40]	@ (800e04c <MX_USB_DEVICE_Init+0x58>)
 800e022:	f7fb fe2b 	bl	8009c7c <USBD_CDC_RegisterInterface>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e02c:	f7ff fab0 	bl	800d590 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e030:	4806      	ldr	r0, [pc, #24]	@ (800e04c <MX_USB_DEVICE_Init+0x58>)
 800e032:	f7fb ff19 	bl	8009e68 <USBD_Start>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e03c:	f7ff faa8 	bl	800d590 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e040:	f7f5 f8fe 	bl	8003240 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e044:	bf00      	nop
 800e046:	bd80      	pop	{r7, pc}
 800e048:	240000b0 	.word	0x240000b0
 800e04c:	24000b20 	.word	0x24000b20
 800e050:	24000014 	.word	0x24000014
 800e054:	2400009c 	.word	0x2400009c

0800e058 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e05c:	2200      	movs	r2, #0
 800e05e:	4905      	ldr	r1, [pc, #20]	@ (800e074 <CDC_Init_FS+0x1c>)
 800e060:	4805      	ldr	r0, [pc, #20]	@ (800e078 <CDC_Init_FS+0x20>)
 800e062:	f7fb fe25 	bl	8009cb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e066:	4905      	ldr	r1, [pc, #20]	@ (800e07c <CDC_Init_FS+0x24>)
 800e068:	4803      	ldr	r0, [pc, #12]	@ (800e078 <CDC_Init_FS+0x20>)
 800e06a:	f7fb fe43 	bl	8009cf4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e06e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e070:	4618      	mov	r0, r3
 800e072:	bd80      	pop	{r7, pc}
 800e074:	240015fc 	.word	0x240015fc
 800e078:	24000b20 	.word	0x24000b20
 800e07c:	24000dfc 	.word	0x24000dfc

0800e080 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e080:	b480      	push	{r7}
 800e082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e084:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e086:	4618      	mov	r0, r3
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	6039      	str	r1, [r7, #0]
 800e09a:	71fb      	strb	r3, [r7, #7]
 800e09c:	4613      	mov	r3, r2
 800e09e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e0a0:	79fb      	ldrb	r3, [r7, #7]
 800e0a2:	2b23      	cmp	r3, #35	@ 0x23
 800e0a4:	d84a      	bhi.n	800e13c <CDC_Control_FS+0xac>
 800e0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e0ac <CDC_Control_FS+0x1c>)
 800e0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ac:	0800e13d 	.word	0x0800e13d
 800e0b0:	0800e13d 	.word	0x0800e13d
 800e0b4:	0800e13d 	.word	0x0800e13d
 800e0b8:	0800e13d 	.word	0x0800e13d
 800e0bc:	0800e13d 	.word	0x0800e13d
 800e0c0:	0800e13d 	.word	0x0800e13d
 800e0c4:	0800e13d 	.word	0x0800e13d
 800e0c8:	0800e13d 	.word	0x0800e13d
 800e0cc:	0800e13d 	.word	0x0800e13d
 800e0d0:	0800e13d 	.word	0x0800e13d
 800e0d4:	0800e13d 	.word	0x0800e13d
 800e0d8:	0800e13d 	.word	0x0800e13d
 800e0dc:	0800e13d 	.word	0x0800e13d
 800e0e0:	0800e13d 	.word	0x0800e13d
 800e0e4:	0800e13d 	.word	0x0800e13d
 800e0e8:	0800e13d 	.word	0x0800e13d
 800e0ec:	0800e13d 	.word	0x0800e13d
 800e0f0:	0800e13d 	.word	0x0800e13d
 800e0f4:	0800e13d 	.word	0x0800e13d
 800e0f8:	0800e13d 	.word	0x0800e13d
 800e0fc:	0800e13d 	.word	0x0800e13d
 800e100:	0800e13d 	.word	0x0800e13d
 800e104:	0800e13d 	.word	0x0800e13d
 800e108:	0800e13d 	.word	0x0800e13d
 800e10c:	0800e13d 	.word	0x0800e13d
 800e110:	0800e13d 	.word	0x0800e13d
 800e114:	0800e13d 	.word	0x0800e13d
 800e118:	0800e13d 	.word	0x0800e13d
 800e11c:	0800e13d 	.word	0x0800e13d
 800e120:	0800e13d 	.word	0x0800e13d
 800e124:	0800e13d 	.word	0x0800e13d
 800e128:	0800e13d 	.word	0x0800e13d
 800e12c:	0800e13d 	.word	0x0800e13d
 800e130:	0800e13d 	.word	0x0800e13d
 800e134:	0800e13d 	.word	0x0800e13d
 800e138:	0800e13d 	.word	0x0800e13d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e13c:	bf00      	nop
  }

  return (USBD_OK);
 800e13e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e140:	4618      	mov	r0, r3
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e156:	6879      	ldr	r1, [r7, #4]
 800e158:	4805      	ldr	r0, [pc, #20]	@ (800e170 <CDC_Receive_FS+0x24>)
 800e15a:	f7fb fdcb 	bl	8009cf4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e15e:	4804      	ldr	r0, [pc, #16]	@ (800e170 <CDC_Receive_FS+0x24>)
 800e160:	f7fb fde6 	bl	8009d30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e164:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e166:	4618      	mov	r0, r3
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	24000b20 	.word	0x24000b20

0800e174 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e174:	b480      	push	{r7}
 800e176:	b087      	sub	sp, #28
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	4613      	mov	r3, r2
 800e180:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	371c      	adds	r7, #28
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr
	...

0800e198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b0ba      	sub	sp, #232	@ 0xe8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	605a      	str	r2, [r3, #4]
 800e1aa:	609a      	str	r2, [r3, #8]
 800e1ac:	60da      	str	r2, [r3, #12]
 800e1ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e1b0:	f107 0310 	add.w	r3, r7, #16
 800e1b4:	22c0      	movs	r2, #192	@ 0xc0
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f001 fbd2 	bl	800f962 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e274 <HAL_PCD_MspInit+0xdc>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d151      	bne.n	800e26c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e1c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e1cc:	f04f 0300 	mov.w	r3, #0
 800e1d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800e1d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e1d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e1dc:	f107 0310 	add.w	r3, r7, #16
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f6 f84f 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d001      	beq.n	800e1f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800e1ec:	f7ff f9d0 	bl	800d590 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e1f0:	f7f5 f826 	bl	8003240 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1f4:	4b20      	ldr	r3, [pc, #128]	@ (800e278 <HAL_PCD_MspInit+0xe0>)
 800e1f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e1fa:	4a1f      	ldr	r2, [pc, #124]	@ (800e278 <HAL_PCD_MspInit+0xe0>)
 800e1fc:	f043 0301 	orr.w	r3, r3, #1
 800e200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e204:	4b1c      	ldr	r3, [pc, #112]	@ (800e278 <HAL_PCD_MspInit+0xe0>)
 800e206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	60fb      	str	r3, [r7, #12]
 800e210:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e212:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e21a:	2302      	movs	r3, #2
 800e21c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e220:	2300      	movs	r3, #0
 800e222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e226:	2300      	movs	r3, #0
 800e228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e22c:	230a      	movs	r3, #10
 800e22e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e232:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e236:	4619      	mov	r1, r3
 800e238:	4810      	ldr	r0, [pc, #64]	@ (800e27c <HAL_PCD_MspInit+0xe4>)
 800e23a:	f7f2 fd07 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e23e:	4b0e      	ldr	r3, [pc, #56]	@ (800e278 <HAL_PCD_MspInit+0xe0>)
 800e240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e244:	4a0c      	ldr	r2, [pc, #48]	@ (800e278 <HAL_PCD_MspInit+0xe0>)
 800e246:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e24a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e24e:	4b0a      	ldr	r3, [pc, #40]	@ (800e278 <HAL_PCD_MspInit+0xe0>)
 800e250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e258:	60bb      	str	r3, [r7, #8]
 800e25a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e25c:	2200      	movs	r2, #0
 800e25e:	2100      	movs	r1, #0
 800e260:	2065      	movs	r0, #101	@ 0x65
 800e262:	f7f2 fa03 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e266:	2065      	movs	r0, #101	@ 0x65
 800e268:	f7f2 fa1a 	bl	80006a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e26c:	bf00      	nop
 800e26e:	37e8      	adds	r7, #232	@ 0xe8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	40080000 	.word	0x40080000
 800e278:	58024400 	.word	0x58024400
 800e27c:	58020000 	.word	0x58020000

0800e280 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f7fb fe33 	bl	8009f02 <USBD_LL_SetupStage>
}
 800e29c:	bf00      	nop
 800e29e:	3708      	adds	r7, #8
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e2b6:	78fa      	ldrb	r2, [r7, #3]
 800e2b8:	6879      	ldr	r1, [r7, #4]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	00db      	lsls	r3, r3, #3
 800e2be:	4413      	add	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	440b      	add	r3, r1
 800e2c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	78fb      	ldrb	r3, [r7, #3]
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	f7fb fe6d 	bl	8009fac <USBD_LL_DataOutStage>
}
 800e2d2:	bf00      	nop
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b082      	sub	sp, #8
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e2ec:	78fa      	ldrb	r2, [r7, #3]
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	4413      	add	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	440b      	add	r3, r1
 800e2fa:	3320      	adds	r3, #32
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	78fb      	ldrb	r3, [r7, #3]
 800e300:	4619      	mov	r1, r3
 800e302:	f7fb ff06 	bl	800a112 <USBD_LL_DataInStage>
}
 800e306:	bf00      	nop
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b082      	sub	sp, #8
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fc f840 	bl	800a3a2 <USBD_LL_SOF>
}
 800e322:	bf00      	nop
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b084      	sub	sp, #16
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e332:	2301      	movs	r3, #1
 800e334:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	79db      	ldrb	r3, [r3, #7]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d102      	bne.n	800e344 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e33e:	2300      	movs	r3, #0
 800e340:	73fb      	strb	r3, [r7, #15]
 800e342:	e008      	b.n	800e356 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	79db      	ldrb	r3, [r3, #7]
 800e348:	2b02      	cmp	r3, #2
 800e34a:	d102      	bne.n	800e352 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e34c:	2301      	movs	r3, #1
 800e34e:	73fb      	strb	r3, [r7, #15]
 800e350:	e001      	b.n	800e356 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e352:	f7ff f91d 	bl	800d590 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e35c:	7bfa      	ldrb	r2, [r7, #15]
 800e35e:	4611      	mov	r1, r2
 800e360:	4618      	mov	r0, r3
 800e362:	f7fb ffda 	bl	800a31a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fb ff82 	bl	800a276 <USBD_LL_Reset>
}
 800e372:	bf00      	nop
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
	...

0800e37c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fb ffd5 	bl	800a33a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	6812      	ldr	r2, [r2, #0]
 800e39e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e3a2:	f043 0301 	orr.w	r3, r3, #1
 800e3a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	7adb      	ldrb	r3, [r3, #11]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d005      	beq.n	800e3bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e3b0:	4b04      	ldr	r3, [pc, #16]	@ (800e3c4 <HAL_PCD_SuspendCallback+0x48>)
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	4a03      	ldr	r2, [pc, #12]	@ (800e3c4 <HAL_PCD_SuspendCallback+0x48>)
 800e3b6:	f043 0306 	orr.w	r3, r3, #6
 800e3ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e3bc:	bf00      	nop
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	e000ed00 	.word	0xe000ed00

0800e3c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fb ffcb 	bl	800a372 <USBD_LL_Resume>
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3f6:	78fa      	ldrb	r2, [r7, #3]
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fc f823 	bl	800a446 <USBD_LL_IsoOUTIncomplete>
}
 800e400:	bf00      	nop
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	460b      	mov	r3, r1
 800e412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e41a:	78fa      	ldrb	r2, [r7, #3]
 800e41c:	4611      	mov	r1, r2
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fb ffdf 	bl	800a3e2 <USBD_LL_IsoINIncomplete>
}
 800e424:	bf00      	nop
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fc f835 	bl	800a4aa <USBD_LL_DevConnected>
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e456:	4618      	mov	r0, r3
 800e458:	f7fc f832 	bl	800a4c0 <USBD_LL_DevDisconnected>
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d13e      	bne.n	800e4f2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e474:	4a21      	ldr	r2, [pc, #132]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a1f      	ldr	r2, [pc, #124]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e480:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e484:	4b1d      	ldr	r3, [pc, #116]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e486:	4a1e      	ldr	r2, [pc, #120]	@ (800e500 <USBD_LL_Init+0x9c>)
 800e488:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e48a:	4b1c      	ldr	r3, [pc, #112]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e48c:	2209      	movs	r2, #9
 800e48e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e490:	4b1a      	ldr	r3, [pc, #104]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e492:	2202      	movs	r2, #2
 800e494:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e496:	4b19      	ldr	r3, [pc, #100]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e498:	2200      	movs	r2, #0
 800e49a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e49c:	4b17      	ldr	r3, [pc, #92]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e49e:	2202      	movs	r2, #2
 800e4a0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e4a2:	4b16      	ldr	r3, [pc, #88]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e4a8:	4b14      	ldr	r3, [pc, #80]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e4ae:	4b13      	ldr	r3, [pc, #76]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e4b4:	4b11      	ldr	r3, [pc, #68]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e4ba:	4b10      	ldr	r3, [pc, #64]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e4c0:	4b0e      	ldr	r3, [pc, #56]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e4c6:	480d      	ldr	r0, [pc, #52]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4c8:	f7f3 fbe1 	bl	8001c8e <HAL_PCD_Init>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d001      	beq.n	800e4d6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e4d2:	f7ff f85d 	bl	800d590 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e4d6:	2180      	movs	r1, #128	@ 0x80
 800e4d8:	4808      	ldr	r0, [pc, #32]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4da:	f7f4 fe36 	bl	800314a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e4de:	2240      	movs	r2, #64	@ 0x40
 800e4e0:	2100      	movs	r1, #0
 800e4e2:	4806      	ldr	r0, [pc, #24]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4e4:	f7f4 fdea 	bl	80030bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e4e8:	2280      	movs	r2, #128	@ 0x80
 800e4ea:	2101      	movs	r1, #1
 800e4ec:	4803      	ldr	r0, [pc, #12]	@ (800e4fc <USBD_LL_Init+0x98>)
 800e4ee:	f7f4 fde5 	bl	80030bc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	24001dfc 	.word	0x24001dfc
 800e500:	40080000 	.word	0x40080000

0800e504 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e50c:	2300      	movs	r3, #0
 800e50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e510:	2300      	movs	r3, #0
 800e512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7f3 fcc3 	bl	8001ea6 <HAL_PCD_Start>
 800e520:	4603      	mov	r3, r0
 800e522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e524:	7bfb      	ldrb	r3, [r7, #15]
 800e526:	4618      	mov	r0, r3
 800e528:	f000 f942 	bl	800e7b0 <USBD_Get_USB_Status>
 800e52c:	4603      	mov	r3, r0
 800e52e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e530:	7bbb      	ldrb	r3, [r7, #14]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	4608      	mov	r0, r1
 800e544:	4611      	mov	r1, r2
 800e546:	461a      	mov	r2, r3
 800e548:	4603      	mov	r3, r0
 800e54a:	70fb      	strb	r3, [r7, #3]
 800e54c:	460b      	mov	r3, r1
 800e54e:	70bb      	strb	r3, [r7, #2]
 800e550:	4613      	mov	r3, r2
 800e552:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e554:	2300      	movs	r3, #0
 800e556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e562:	78bb      	ldrb	r3, [r7, #2]
 800e564:	883a      	ldrh	r2, [r7, #0]
 800e566:	78f9      	ldrb	r1, [r7, #3]
 800e568:	f7f4 f9c4 	bl	80028f4 <HAL_PCD_EP_Open>
 800e56c:	4603      	mov	r3, r0
 800e56e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e570:	7bfb      	ldrb	r3, [r7, #15]
 800e572:	4618      	mov	r0, r3
 800e574:	f000 f91c 	bl	800e7b0 <USBD_Get_USB_Status>
 800e578:	4603      	mov	r3, r0
 800e57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e57c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b084      	sub	sp, #16
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	460b      	mov	r3, r1
 800e590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5a0:	78fa      	ldrb	r2, [r7, #3]
 800e5a2:	4611      	mov	r1, r2
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7f4 fa0d 	bl	80029c4 <HAL_PCD_EP_Close>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f000 f8fd 	bl	800e7b0 <USBD_Get_USB_Status>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5de:	78fa      	ldrb	r2, [r7, #3]
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7f4 fac5 	bl	8002b72 <HAL_PCD_EP_SetStall>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5ec:	7bfb      	ldrb	r3, [r7, #15]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f000 f8de 	bl	800e7b0 <USBD_Get_USB_Status>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e602:	b580      	push	{r7, lr}
 800e604:	b084      	sub	sp, #16
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
 800e60a:	460b      	mov	r3, r1
 800e60c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e60e:	2300      	movs	r3, #0
 800e610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e612:	2300      	movs	r3, #0
 800e614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e61c:	78fa      	ldrb	r2, [r7, #3]
 800e61e:	4611      	mov	r1, r2
 800e620:	4618      	mov	r0, r3
 800e622:	f7f4 fb09 	bl	8002c38 <HAL_PCD_EP_ClrStall>
 800e626:	4603      	mov	r3, r0
 800e628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e62a:	7bfb      	ldrb	r3, [r7, #15]
 800e62c:	4618      	mov	r0, r3
 800e62e:	f000 f8bf 	bl	800e7b0 <USBD_Get_USB_Status>
 800e632:	4603      	mov	r3, r0
 800e634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e636:	7bbb      	ldrb	r3, [r7, #14]
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3710      	adds	r7, #16
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	460b      	mov	r3, r1
 800e64a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e652:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	da0b      	bge.n	800e674 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e65c:	78fb      	ldrb	r3, [r7, #3]
 800e65e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e662:	68f9      	ldr	r1, [r7, #12]
 800e664:	4613      	mov	r3, r2
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	440b      	add	r3, r1
 800e66e:	3316      	adds	r3, #22
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	e00b      	b.n	800e68c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e674:	78fb      	ldrb	r3, [r7, #3]
 800e676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e67a:	68f9      	ldr	r1, [r7, #12]
 800e67c:	4613      	mov	r3, r2
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	4413      	add	r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	440b      	add	r3, r1
 800e686:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e68a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6b2:	78fa      	ldrb	r2, [r7, #3]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f4 f8f8 	bl	80028ac <HAL_PCD_SetAddress>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 f874 	bl	800e7b0 <USBD_Get_USB_Status>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b086      	sub	sp, #24
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	60f8      	str	r0, [r7, #12]
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	603b      	str	r3, [r7, #0]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6f4:	7af9      	ldrb	r1, [r7, #11]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	f7f4 fa00 	bl	8002afe <HAL_PCD_EP_Transmit>
 800e6fe:	4603      	mov	r3, r0
 800e700:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e702:	7dfb      	ldrb	r3, [r7, #23]
 800e704:	4618      	mov	r0, r3
 800e706:	f000 f853 	bl	800e7b0 <USBD_Get_USB_Status>
 800e70a:	4603      	mov	r3, r0
 800e70c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e70e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3718      	adds	r7, #24
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	607a      	str	r2, [r7, #4]
 800e722:	603b      	str	r3, [r7, #0]
 800e724:	460b      	mov	r3, r1
 800e726:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e736:	7af9      	ldrb	r1, [r7, #11]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	f7f4 f98c 	bl	8002a58 <HAL_PCD_EP_Receive>
 800e740:	4603      	mov	r3, r0
 800e742:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e744:	7dfb      	ldrb	r3, [r7, #23]
 800e746:	4618      	mov	r0, r3
 800e748:	f000 f832 	bl	800e7b0 <USBD_Get_USB_Status>
 800e74c:	4603      	mov	r3, r0
 800e74e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e750:	7dbb      	ldrb	r3, [r7, #22]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	460b      	mov	r3, r1
 800e764:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e76c:	78fa      	ldrb	r2, [r7, #3]
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7f4 f9ac 	bl	8002ace <HAL_PCD_EP_GetRxCount>
 800e776:	4603      	mov	r3, r0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e788:	4b03      	ldr	r3, [pc, #12]	@ (800e798 <USBD_static_malloc+0x18>)
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop
 800e798:	240022e0 	.word	0x240022e0

0800e79c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d817      	bhi.n	800e7f4 <USBD_Get_USB_Status+0x44>
 800e7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e7cc <USBD_Get_USB_Status+0x1c>)
 800e7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ca:	bf00      	nop
 800e7cc:	0800e7dd 	.word	0x0800e7dd
 800e7d0:	0800e7e3 	.word	0x0800e7e3
 800e7d4:	0800e7e9 	.word	0x0800e7e9
 800e7d8:	0800e7ef 	.word	0x0800e7ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	73fb      	strb	r3, [r7, #15]
    break;
 800e7e0:	e00b      	b.n	800e7fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e7e6:	e008      	b.n	800e7fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ec:	e005      	b.n	800e7fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e7f2:	e002      	b.n	800e7fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e7f4:	2303      	movs	r3, #3
 800e7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7f8:	bf00      	nop
  }
  return usb_status;
 800e7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	6039      	str	r1, [r7, #0]
 800e812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	2212      	movs	r2, #18
 800e818:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e81a:	4b03      	ldr	r3, [pc, #12]	@ (800e828 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	240000d0 	.word	0x240000d0

0800e82c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	4603      	mov	r3, r0
 800e834:	6039      	str	r1, [r7, #0]
 800e836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	2204      	movs	r2, #4
 800e83c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e83e:	4b03      	ldr	r3, [pc, #12]	@ (800e84c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e840:	4618      	mov	r0, r3
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	240000e4 	.word	0x240000e4

0800e850 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	4603      	mov	r3, r0
 800e858:	6039      	str	r1, [r7, #0]
 800e85a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e85c:	79fb      	ldrb	r3, [r7, #7]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d105      	bne.n	800e86e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	4907      	ldr	r1, [pc, #28]	@ (800e884 <USBD_FS_ProductStrDescriptor+0x34>)
 800e866:	4808      	ldr	r0, [pc, #32]	@ (800e888 <USBD_FS_ProductStrDescriptor+0x38>)
 800e868:	f7fc fcd8 	bl	800b21c <USBD_GetString>
 800e86c:	e004      	b.n	800e878 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e86e:	683a      	ldr	r2, [r7, #0]
 800e870:	4904      	ldr	r1, [pc, #16]	@ (800e884 <USBD_FS_ProductStrDescriptor+0x34>)
 800e872:	4805      	ldr	r0, [pc, #20]	@ (800e888 <USBD_FS_ProductStrDescriptor+0x38>)
 800e874:	f7fc fcd2 	bl	800b21c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e878:	4b02      	ldr	r3, [pc, #8]	@ (800e884 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	24002500 	.word	0x24002500
 800e888:	08011bec 	.word	0x08011bec

0800e88c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	6039      	str	r1, [r7, #0]
 800e896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	4904      	ldr	r1, [pc, #16]	@ (800e8ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e89c:	4804      	ldr	r0, [pc, #16]	@ (800e8b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e89e:	f7fc fcbd 	bl	800b21c <USBD_GetString>
  return USBD_StrDesc;
 800e8a2:	4b02      	ldr	r3, [pc, #8]	@ (800e8ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	24002500 	.word	0x24002500
 800e8b0:	08011c04 	.word	0x08011c04

0800e8b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	6039      	str	r1, [r7, #0]
 800e8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	221a      	movs	r2, #26
 800e8c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e8c6:	f000 f843 	bl	800e950 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e8ca:	4b02      	ldr	r3, [pc, #8]	@ (800e8d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	240000e8 	.word	0x240000e8

0800e8d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	6039      	str	r1, [r7, #0]
 800e8e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e8e4:	79fb      	ldrb	r3, [r7, #7]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d105      	bne.n	800e8f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e8ea:	683a      	ldr	r2, [r7, #0]
 800e8ec:	4907      	ldr	r1, [pc, #28]	@ (800e90c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e8ee:	4808      	ldr	r0, [pc, #32]	@ (800e910 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e8f0:	f7fc fc94 	bl	800b21c <USBD_GetString>
 800e8f4:	e004      	b.n	800e900 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	4904      	ldr	r1, [pc, #16]	@ (800e90c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e8fa:	4805      	ldr	r0, [pc, #20]	@ (800e910 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e8fc:	f7fc fc8e 	bl	800b21c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e900:	4b02      	ldr	r3, [pc, #8]	@ (800e90c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	24002500 	.word	0x24002500
 800e910:	08011c18 	.word	0x08011c18

0800e914 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	4603      	mov	r3, r0
 800e91c:	6039      	str	r1, [r7, #0]
 800e91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e920:	79fb      	ldrb	r3, [r7, #7]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d105      	bne.n	800e932 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e926:	683a      	ldr	r2, [r7, #0]
 800e928:	4907      	ldr	r1, [pc, #28]	@ (800e948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e92a:	4808      	ldr	r0, [pc, #32]	@ (800e94c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e92c:	f7fc fc76 	bl	800b21c <USBD_GetString>
 800e930:	e004      	b.n	800e93c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	4904      	ldr	r1, [pc, #16]	@ (800e948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e936:	4805      	ldr	r0, [pc, #20]	@ (800e94c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e938:	f7fc fc70 	bl	800b21c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e93c:	4b02      	ldr	r3, [pc, #8]	@ (800e948 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	24002500 	.word	0x24002500
 800e94c:	08011c24 	.word	0x08011c24

0800e950 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4413      	add	r3, r2
 800e95c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d009      	beq.n	800e978 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e964:	2208      	movs	r2, #8
 800e966:	4906      	ldr	r1, [pc, #24]	@ (800e980 <Get_SerialNum+0x30>)
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f000 f80d 	bl	800e988 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e96e:	2204      	movs	r2, #4
 800e970:	4904      	ldr	r1, [pc, #16]	@ (800e984 <Get_SerialNum+0x34>)
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f808 	bl	800e988 <IntToUnicode>
  }
}
 800e978:	bf00      	nop
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	240000ea 	.word	0x240000ea
 800e984:	240000fa 	.word	0x240000fa

0800e988 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e988:	b480      	push	{r7}
 800e98a:	b087      	sub	sp, #28
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	4613      	mov	r3, r2
 800e994:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e996:	2300      	movs	r3, #0
 800e998:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e99a:	2300      	movs	r3, #0
 800e99c:	75fb      	strb	r3, [r7, #23]
 800e99e:	e027      	b.n	800e9f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	0f1b      	lsrs	r3, r3, #28
 800e9a4:	2b09      	cmp	r3, #9
 800e9a6:	d80b      	bhi.n	800e9c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	0f1b      	lsrs	r3, r3, #28
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	440b      	add	r3, r1
 800e9b8:	3230      	adds	r2, #48	@ 0x30
 800e9ba:	b2d2      	uxtb	r2, r2
 800e9bc:	701a      	strb	r2, [r3, #0]
 800e9be:	e00a      	b.n	800e9d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	0f1b      	lsrs	r3, r3, #28
 800e9c4:	b2da      	uxtb	r2, r3
 800e9c6:	7dfb      	ldrb	r3, [r7, #23]
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	440b      	add	r3, r1
 800e9d0:	3237      	adds	r2, #55	@ 0x37
 800e9d2:	b2d2      	uxtb	r2, r2
 800e9d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	011b      	lsls	r3, r3, #4
 800e9da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e9dc:	7dfb      	ldrb	r3, [r7, #23]
 800e9de:	005b      	lsls	r3, r3, #1
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e9ea:	7dfb      	ldrb	r3, [r7, #23]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	75fb      	strb	r3, [r7, #23]
 800e9f0:	7dfa      	ldrb	r2, [r7, #23]
 800e9f2:	79fb      	ldrb	r3, [r7, #7]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d3d3      	bcc.n	800e9a0 <IntToUnicode+0x18>
  }
}
 800e9f8:	bf00      	nop
 800e9fa:	bf00      	nop
 800e9fc:	371c      	adds	r7, #28
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr
	...

0800ea08 <arm_biquad_cascade_df1_init_f32>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	4608      	mov	r0, r1
 800ea0e:	2100      	movs	r1, #0
 800ea10:	60a2      	str	r2, [r4, #8]
 800ea12:	0102      	lsls	r2, r0, #4
 800ea14:	6020      	str	r0, [r4, #0]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f000 ffa3 	bl	800f962 <memset>
 800ea1c:	6060      	str	r0, [r4, #4]
 800ea1e:	bd10      	pop	{r4, pc}

0800ea20 <arm_biquad_cascade_df1_f32>:
 800ea20:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800ea24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea28:	f003 0e03 	and.w	lr, r3, #3
 800ea2c:	6886      	ldr	r6, [r0, #8]
 800ea2e:	ea4f 190c 	mov.w	r9, ip, lsl #4
 800ea32:	6845      	ldr	r5, [r0, #4]
 800ea34:	f10e 38ff 	add.w	r8, lr, #4294967295
 800ea38:	3614      	adds	r6, #20
 800ea3a:	eb02 0a09 	add.w	sl, r2, r9
 800ea3e:	3510      	adds	r5, #16
 800ea40:	6807      	ldr	r7, [r0, #0]
 800ea42:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 800ea46:	ed56 1a04 	vldr	s3, [r6, #-16]
 800ea4a:	ed16 2a03 	vldr	s4, [r6, #-12]
 800ea4e:	ed56 2a02 	vldr	s5, [r6, #-8]
 800ea52:	ed16 3a01 	vldr	s6, [r6, #-4]
 800ea56:	ed15 4a04 	vldr	s8, [r5, #-16]
 800ea5a:	ed15 5a03 	vldr	s10, [r5, #-12]
 800ea5e:	ed15 7a02 	vldr	s14, [r5, #-8]
 800ea62:	ed55 7a01 	vldr	s15, [r5, #-4]
 800ea66:	f1bc 0f00 	cmp.w	ip, #0
 800ea6a:	f000 80d4 	beq.w	800ec16 <arm_biquad_cascade_df1_f32+0x1f6>
 800ea6e:	f101 0010 	add.w	r0, r1, #16
 800ea72:	f102 0310 	add.w	r3, r2, #16
 800ea76:	4664      	mov	r4, ip
 800ea78:	ed50 5a04 	vldr	s11, [r0, #-16]
 800ea7c:	ee61 4a84 	vmul.f32	s9, s3, s8
 800ea80:	ee22 5a05 	vmul.f32	s10, s4, s10
 800ea84:	3c01      	subs	r4, #1
 800ea86:	ee63 6aa5 	vmul.f32	s13, s7, s11
 800ea8a:	f100 0010 	add.w	r0, r0, #16
 800ea8e:	ee22 6a87 	vmul.f32	s12, s5, s14
 800ea92:	f103 0310 	add.w	r3, r3, #16
 800ea96:	ee63 7a27 	vmul.f32	s15, s6, s15
 800ea9a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ea9e:	ee21 0aa5 	vmul.f32	s0, s3, s11
 800eaa2:	ee22 1a04 	vmul.f32	s2, s4, s8
 800eaa6:	ee76 6a85 	vadd.f32	s13, s13, s10
 800eaaa:	ee23 5a07 	vmul.f32	s10, s6, s14
 800eaae:	ee22 4a25 	vmul.f32	s8, s4, s11
 800eab2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800eab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eaba:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800eabe:	ee62 5aa7 	vmul.f32	s11, s5, s15
 800eac2:	ed10 6a07 	vldr	s12, [r0, #-28]	@ 0xffffffe4
 800eac6:	ee63 7a27 	vmul.f32	s15, s6, s15
 800eaca:	ee63 6a86 	vmul.f32	s13, s7, s12
 800eace:	ee61 0a86 	vmul.f32	s1, s3, s12
 800ead2:	ee62 4a06 	vmul.f32	s9, s4, s12
 800ead6:	ee36 7a80 	vadd.f32	s14, s13, s0
 800eada:	ee37 7a01 	vadd.f32	s14, s14, s2
 800eade:	ee37 7a25 	vadd.f32	s14, s14, s11
 800eae2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800eae6:	ed03 7a07 	vstr	s14, [r3, #-28]	@ 0xffffffe4
 800eaea:	ee62 6a87 	vmul.f32	s13, s5, s14
 800eaee:	ed10 5a06 	vldr	s10, [r0, #-24]	@ 0xffffffe8
 800eaf2:	ee23 7a07 	vmul.f32	s14, s6, s14
 800eaf6:	ee63 5a85 	vmul.f32	s11, s7, s10
 800eafa:	ee21 1a85 	vmul.f32	s2, s3, s10
 800eafe:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800eb02:	ee75 5a84 	vadd.f32	s11, s11, s8
 800eb06:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800eb0a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800eb0e:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800eb12:	ee62 6aa7 	vmul.f32	s13, s5, s15
 800eb16:	ed10 4a05 	vldr	s8, [r0, #-20]	@ 0xffffffec
 800eb1a:	ee23 6a84 	vmul.f32	s12, s7, s8
 800eb1e:	ee36 6a01 	vadd.f32	s12, s12, s2
 800eb22:	ee36 6a24 	vadd.f32	s12, s12, s9
 800eb26:	ee36 6a26 	vadd.f32	s12, s12, s13
 800eb2a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800eb2e:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800eb32:	d1a1      	bne.n	800ea78 <arm_biquad_cascade_df1_f32+0x58>
 800eb34:	4449      	add	r1, r9
 800eb36:	4653      	mov	r3, sl
 800eb38:	f1be 0f00 	cmp.w	lr, #0
 800eb3c:	d047      	beq.n	800ebce <arm_biquad_cascade_df1_f32+0x1ae>
 800eb3e:	edd1 6a00 	vldr	s13, [r1]
 800eb42:	ee61 5a84 	vmul.f32	s11, s3, s8
 800eb46:	ee22 5a05 	vmul.f32	s10, s4, s10
 800eb4a:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800eb4e:	ee22 6a87 	vmul.f32	s12, s5, s14
 800eb52:	ee63 7a27 	vmul.f32	s15, s6, s15
 800eb56:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800eb5a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800eb5e:	ee35 6a06 	vadd.f32	s12, s10, s12
 800eb62:	ee36 6a27 	vadd.f32	s12, s12, s15
 800eb66:	ed83 6a00 	vstr	s12, [r3]
 800eb6a:	f1b8 0f00 	cmp.w	r8, #0
 800eb6e:	d040      	beq.n	800ebf2 <arm_biquad_cascade_df1_f32+0x1d2>
 800eb70:	ed91 5a01 	vldr	s10, [r1, #4]
 800eb74:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800eb78:	ee22 4a04 	vmul.f32	s8, s4, s8
 800eb7c:	f1b8 0f01 	cmp.w	r8, #1
 800eb80:	ee65 4a23 	vmul.f32	s9, s10, s7
 800eb84:	ee62 7a86 	vmul.f32	s15, s5, s12
 800eb88:	ee23 7a07 	vmul.f32	s14, s6, s14
 800eb8c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800eb90:	ee35 4a84 	vadd.f32	s8, s11, s8
 800eb94:	ee74 7a27 	vadd.f32	s15, s8, s15
 800eb98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb9c:	edc3 7a01 	vstr	s15, [r3, #4]
 800eba0:	d030      	beq.n	800ec04 <arm_biquad_cascade_df1_f32+0x1e4>
 800eba2:	ed91 4a02 	vldr	s8, [r1, #8]
 800eba6:	ee22 2a26 	vmul.f32	s4, s4, s13
 800ebaa:	ee65 1a21 	vmul.f32	s3, s10, s3
 800ebae:	ee63 6a84 	vmul.f32	s13, s7, s8
 800ebb2:	ee67 2aa2 	vmul.f32	s5, s15, s5
 800ebb6:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ebba:	ee76 6aa1 	vadd.f32	s13, s13, s3
 800ebbe:	ee76 6a82 	vadd.f32	s13, s13, s4
 800ebc2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800ebc6:	ee36 7a83 	vadd.f32	s14, s13, s6
 800ebca:	ed83 7a02 	vstr	s14, [r3, #8]
 800ebce:	3f01      	subs	r7, #1
 800ebd0:	ed05 4a04 	vstr	s8, [r5, #-16]
 800ebd4:	ed05 5a03 	vstr	s10, [r5, #-12]
 800ebd8:	f106 0614 	add.w	r6, r6, #20
 800ebdc:	ed05 7a02 	vstr	s14, [r5, #-8]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ebe6:	f105 0510 	add.w	r5, r5, #16
 800ebea:	f47f af2a 	bne.w	800ea42 <arm_biquad_cascade_df1_f32+0x22>
 800ebee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf2:	eef0 7a47 	vmov.f32	s15, s14
 800ebf6:	eeb0 5a44 	vmov.f32	s10, s8
 800ebfa:	eeb0 7a46 	vmov.f32	s14, s12
 800ebfe:	eeb0 4a66 	vmov.f32	s8, s13
 800ec02:	e7e4      	b.n	800ebce <arm_biquad_cascade_df1_f32+0x1ae>
 800ec04:	eeb0 7a67 	vmov.f32	s14, s15
 800ec08:	eeb0 4a45 	vmov.f32	s8, s10
 800ec0c:	eef0 7a46 	vmov.f32	s15, s12
 800ec10:	eeb0 5a66 	vmov.f32	s10, s13
 800ec14:	e7db      	b.n	800ebce <arm_biquad_cascade_df1_f32+0x1ae>
 800ec16:	4613      	mov	r3, r2
 800ec18:	e78e      	b.n	800eb38 <arm_biquad_cascade_df1_f32+0x118>
 800ec1a:	bf00      	nop

0800ec1c <arm_sin_f32>:
 800ec1c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800ec9c <arm_sin_f32+0x80>
 800ec20:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ec24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ec28:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ec2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec30:	d504      	bpl.n	800ec3c <arm_sin_f32+0x20>
 800ec32:	ee17 3a90 	vmov	r3, s15
 800ec36:	3b01      	subs	r3, #1
 800ec38:	ee07 3a90 	vmov	s15, r3
 800ec3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec40:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800eca0 <arm_sin_f32+0x84>
 800ec44:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ec48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ec4c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ec50:	ee17 3a10 	vmov	r3, s14
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec5a:	d21a      	bcs.n	800ec92 <arm_sin_f32+0x76>
 800ec5c:	ee07 3a10 	vmov	s14, r3
 800ec60:	1c59      	adds	r1, r3, #1
 800ec62:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ec66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ec6a:	4a0e      	ldr	r2, [pc, #56]	@ (800eca4 <arm_sin_f32+0x88>)
 800ec6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ec70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec78:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec7c:	edd3 6a00 	vldr	s13, [r3]
 800ec80:	ed92 7a00 	vldr	s14, [r2]
 800ec84:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ec88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec90:	4770      	bx	lr
 800ec92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec96:	2101      	movs	r1, #1
 800ec98:	2300      	movs	r3, #0
 800ec9a:	e7e6      	b.n	800ec6a <arm_sin_f32+0x4e>
 800ec9c:	3e22f983 	.word	0x3e22f983
 800eca0:	44000000 	.word	0x44000000
 800eca4:	08013430 	.word	0x08013430

0800eca8 <arm_cos_f32>:
 800eca8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800ed30 <arm_cos_f32+0x88>
 800ecac:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800ecb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ecb4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ecb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ecbc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	d504      	bpl.n	800ecd0 <arm_cos_f32+0x28>
 800ecc6:	ee17 3a90 	vmov	r3, s15
 800ecca:	3b01      	subs	r3, #1
 800eccc:	ee07 3a90 	vmov	s15, r3
 800ecd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecd4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ed34 <arm_cos_f32+0x8c>
 800ecd8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ecdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ece0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ece4:	ee17 3a10 	vmov	r3, s14
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecee:	d21a      	bcs.n	800ed26 <arm_cos_f32+0x7e>
 800ecf0:	ee07 3a10 	vmov	s14, r3
 800ecf4:	1c59      	adds	r1, r3, #1
 800ecf6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800ecfa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ecfe:	4a0e      	ldr	r2, [pc, #56]	@ (800ed38 <arm_cos_f32+0x90>)
 800ed00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ed04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ed0c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed10:	edd3 6a00 	vldr	s13, [r3]
 800ed14:	ed92 7a00 	vldr	s14, [r2]
 800ed18:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ed1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed20:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed24:	4770      	bx	lr
 800ed26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ed2a:	2101      	movs	r1, #1
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e7e6      	b.n	800ecfe <arm_cos_f32+0x56>
 800ed30:	3e22f983 	.word	0x3e22f983
 800ed34:	44000000 	.word	0x44000000
 800ed38:	08013430 	.word	0x08013430

0800ed3c <malloc>:
 800ed3c:	4b02      	ldr	r3, [pc, #8]	@ (800ed48 <malloc+0xc>)
 800ed3e:	4601      	mov	r1, r0
 800ed40:	6818      	ldr	r0, [r3, #0]
 800ed42:	f000 b825 	b.w	800ed90 <_malloc_r>
 800ed46:	bf00      	nop
 800ed48:	24000110 	.word	0x24000110

0800ed4c <sbrk_aligned>:
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ed8c <sbrk_aligned+0x40>)
 800ed50:	460c      	mov	r4, r1
 800ed52:	6831      	ldr	r1, [r6, #0]
 800ed54:	4605      	mov	r5, r0
 800ed56:	b911      	cbnz	r1, 800ed5e <sbrk_aligned+0x12>
 800ed58:	f000 fe44 	bl	800f9e4 <_sbrk_r>
 800ed5c:	6030      	str	r0, [r6, #0]
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4628      	mov	r0, r5
 800ed62:	f000 fe3f 	bl	800f9e4 <_sbrk_r>
 800ed66:	1c43      	adds	r3, r0, #1
 800ed68:	d103      	bne.n	800ed72 <sbrk_aligned+0x26>
 800ed6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ed6e:	4620      	mov	r0, r4
 800ed70:	bd70      	pop	{r4, r5, r6, pc}
 800ed72:	1cc4      	adds	r4, r0, #3
 800ed74:	f024 0403 	bic.w	r4, r4, #3
 800ed78:	42a0      	cmp	r0, r4
 800ed7a:	d0f8      	beq.n	800ed6e <sbrk_aligned+0x22>
 800ed7c:	1a21      	subs	r1, r4, r0
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f000 fe30 	bl	800f9e4 <_sbrk_r>
 800ed84:	3001      	adds	r0, #1
 800ed86:	d1f2      	bne.n	800ed6e <sbrk_aligned+0x22>
 800ed88:	e7ef      	b.n	800ed6a <sbrk_aligned+0x1e>
 800ed8a:	bf00      	nop
 800ed8c:	24002700 	.word	0x24002700

0800ed90 <_malloc_r>:
 800ed90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed94:	1ccd      	adds	r5, r1, #3
 800ed96:	f025 0503 	bic.w	r5, r5, #3
 800ed9a:	3508      	adds	r5, #8
 800ed9c:	2d0c      	cmp	r5, #12
 800ed9e:	bf38      	it	cc
 800eda0:	250c      	movcc	r5, #12
 800eda2:	2d00      	cmp	r5, #0
 800eda4:	4606      	mov	r6, r0
 800eda6:	db01      	blt.n	800edac <_malloc_r+0x1c>
 800eda8:	42a9      	cmp	r1, r5
 800edaa:	d904      	bls.n	800edb6 <_malloc_r+0x26>
 800edac:	230c      	movs	r3, #12
 800edae:	6033      	str	r3, [r6, #0]
 800edb0:	2000      	movs	r0, #0
 800edb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee8c <_malloc_r+0xfc>
 800edba:	f000 f869 	bl	800ee90 <__malloc_lock>
 800edbe:	f8d8 3000 	ldr.w	r3, [r8]
 800edc2:	461c      	mov	r4, r3
 800edc4:	bb44      	cbnz	r4, 800ee18 <_malloc_r+0x88>
 800edc6:	4629      	mov	r1, r5
 800edc8:	4630      	mov	r0, r6
 800edca:	f7ff ffbf 	bl	800ed4c <sbrk_aligned>
 800edce:	1c43      	adds	r3, r0, #1
 800edd0:	4604      	mov	r4, r0
 800edd2:	d158      	bne.n	800ee86 <_malloc_r+0xf6>
 800edd4:	f8d8 4000 	ldr.w	r4, [r8]
 800edd8:	4627      	mov	r7, r4
 800edda:	2f00      	cmp	r7, #0
 800eddc:	d143      	bne.n	800ee66 <_malloc_r+0xd6>
 800edde:	2c00      	cmp	r4, #0
 800ede0:	d04b      	beq.n	800ee7a <_malloc_r+0xea>
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	4639      	mov	r1, r7
 800ede6:	4630      	mov	r0, r6
 800ede8:	eb04 0903 	add.w	r9, r4, r3
 800edec:	f000 fdfa 	bl	800f9e4 <_sbrk_r>
 800edf0:	4581      	cmp	r9, r0
 800edf2:	d142      	bne.n	800ee7a <_malloc_r+0xea>
 800edf4:	6821      	ldr	r1, [r4, #0]
 800edf6:	1a6d      	subs	r5, r5, r1
 800edf8:	4629      	mov	r1, r5
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7ff ffa6 	bl	800ed4c <sbrk_aligned>
 800ee00:	3001      	adds	r0, #1
 800ee02:	d03a      	beq.n	800ee7a <_malloc_r+0xea>
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	442b      	add	r3, r5
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee0e:	685a      	ldr	r2, [r3, #4]
 800ee10:	bb62      	cbnz	r2, 800ee6c <_malloc_r+0xdc>
 800ee12:	f8c8 7000 	str.w	r7, [r8]
 800ee16:	e00f      	b.n	800ee38 <_malloc_r+0xa8>
 800ee18:	6822      	ldr	r2, [r4, #0]
 800ee1a:	1b52      	subs	r2, r2, r5
 800ee1c:	d420      	bmi.n	800ee60 <_malloc_r+0xd0>
 800ee1e:	2a0b      	cmp	r2, #11
 800ee20:	d917      	bls.n	800ee52 <_malloc_r+0xc2>
 800ee22:	1961      	adds	r1, r4, r5
 800ee24:	42a3      	cmp	r3, r4
 800ee26:	6025      	str	r5, [r4, #0]
 800ee28:	bf18      	it	ne
 800ee2a:	6059      	strne	r1, [r3, #4]
 800ee2c:	6863      	ldr	r3, [r4, #4]
 800ee2e:	bf08      	it	eq
 800ee30:	f8c8 1000 	streq.w	r1, [r8]
 800ee34:	5162      	str	r2, [r4, r5]
 800ee36:	604b      	str	r3, [r1, #4]
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f000 f82f 	bl	800ee9c <__malloc_unlock>
 800ee3e:	f104 000b 	add.w	r0, r4, #11
 800ee42:	1d23      	adds	r3, r4, #4
 800ee44:	f020 0007 	bic.w	r0, r0, #7
 800ee48:	1ac2      	subs	r2, r0, r3
 800ee4a:	bf1c      	itt	ne
 800ee4c:	1a1b      	subne	r3, r3, r0
 800ee4e:	50a3      	strne	r3, [r4, r2]
 800ee50:	e7af      	b.n	800edb2 <_malloc_r+0x22>
 800ee52:	6862      	ldr	r2, [r4, #4]
 800ee54:	42a3      	cmp	r3, r4
 800ee56:	bf0c      	ite	eq
 800ee58:	f8c8 2000 	streq.w	r2, [r8]
 800ee5c:	605a      	strne	r2, [r3, #4]
 800ee5e:	e7eb      	b.n	800ee38 <_malloc_r+0xa8>
 800ee60:	4623      	mov	r3, r4
 800ee62:	6864      	ldr	r4, [r4, #4]
 800ee64:	e7ae      	b.n	800edc4 <_malloc_r+0x34>
 800ee66:	463c      	mov	r4, r7
 800ee68:	687f      	ldr	r7, [r7, #4]
 800ee6a:	e7b6      	b.n	800edda <_malloc_r+0x4a>
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	42a3      	cmp	r3, r4
 800ee72:	d1fb      	bne.n	800ee6c <_malloc_r+0xdc>
 800ee74:	2300      	movs	r3, #0
 800ee76:	6053      	str	r3, [r2, #4]
 800ee78:	e7de      	b.n	800ee38 <_malloc_r+0xa8>
 800ee7a:	230c      	movs	r3, #12
 800ee7c:	6033      	str	r3, [r6, #0]
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f000 f80c 	bl	800ee9c <__malloc_unlock>
 800ee84:	e794      	b.n	800edb0 <_malloc_r+0x20>
 800ee86:	6005      	str	r5, [r0, #0]
 800ee88:	e7d6      	b.n	800ee38 <_malloc_r+0xa8>
 800ee8a:	bf00      	nop
 800ee8c:	24002704 	.word	0x24002704

0800ee90 <__malloc_lock>:
 800ee90:	4801      	ldr	r0, [pc, #4]	@ (800ee98 <__malloc_lock+0x8>)
 800ee92:	f000 bdee 	b.w	800fa72 <__retarget_lock_acquire_recursive>
 800ee96:	bf00      	nop
 800ee98:	24002848 	.word	0x24002848

0800ee9c <__malloc_unlock>:
 800ee9c:	4801      	ldr	r0, [pc, #4]	@ (800eea4 <__malloc_unlock+0x8>)
 800ee9e:	f000 bde9 	b.w	800fa74 <__retarget_lock_release_recursive>
 800eea2:	bf00      	nop
 800eea4:	24002848 	.word	0x24002848

0800eea8 <__cvt>:
 800eea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeaa:	ed2d 8b02 	vpush	{d8}
 800eeae:	eeb0 8b40 	vmov.f64	d8, d0
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	4617      	mov	r7, r2
 800eeb6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800eeb8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eeba:	ee18 2a90 	vmov	r2, s17
 800eebe:	f025 0520 	bic.w	r5, r5, #32
 800eec2:	2a00      	cmp	r2, #0
 800eec4:	bfb6      	itet	lt
 800eec6:	222d      	movlt	r2, #45	@ 0x2d
 800eec8:	2200      	movge	r2, #0
 800eeca:	eeb1 8b40 	vneglt.f64	d8, d0
 800eece:	2d46      	cmp	r5, #70	@ 0x46
 800eed0:	460c      	mov	r4, r1
 800eed2:	701a      	strb	r2, [r3, #0]
 800eed4:	d004      	beq.n	800eee0 <__cvt+0x38>
 800eed6:	2d45      	cmp	r5, #69	@ 0x45
 800eed8:	d100      	bne.n	800eedc <__cvt+0x34>
 800eeda:	3401      	adds	r4, #1
 800eedc:	2102      	movs	r1, #2
 800eede:	e000      	b.n	800eee2 <__cvt+0x3a>
 800eee0:	2103      	movs	r1, #3
 800eee2:	ab03      	add	r3, sp, #12
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	ab02      	add	r3, sp, #8
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	4622      	mov	r2, r4
 800eeec:	4633      	mov	r3, r6
 800eeee:	eeb0 0b48 	vmov.f64	d0, d8
 800eef2:	f000 fe49 	bl	800fb88 <_dtoa_r>
 800eef6:	2d47      	cmp	r5, #71	@ 0x47
 800eef8:	d114      	bne.n	800ef24 <__cvt+0x7c>
 800eefa:	07fb      	lsls	r3, r7, #31
 800eefc:	d50a      	bpl.n	800ef14 <__cvt+0x6c>
 800eefe:	1902      	adds	r2, r0, r4
 800ef00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef08:	bf08      	it	eq
 800ef0a:	9203      	streq	r2, [sp, #12]
 800ef0c:	2130      	movs	r1, #48	@ 0x30
 800ef0e:	9b03      	ldr	r3, [sp, #12]
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d319      	bcc.n	800ef48 <__cvt+0xa0>
 800ef14:	9b03      	ldr	r3, [sp, #12]
 800ef16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef18:	1a1b      	subs	r3, r3, r0
 800ef1a:	6013      	str	r3, [r2, #0]
 800ef1c:	b005      	add	sp, #20
 800ef1e:	ecbd 8b02 	vpop	{d8}
 800ef22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef24:	2d46      	cmp	r5, #70	@ 0x46
 800ef26:	eb00 0204 	add.w	r2, r0, r4
 800ef2a:	d1e9      	bne.n	800ef00 <__cvt+0x58>
 800ef2c:	7803      	ldrb	r3, [r0, #0]
 800ef2e:	2b30      	cmp	r3, #48	@ 0x30
 800ef30:	d107      	bne.n	800ef42 <__cvt+0x9a>
 800ef32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef3a:	bf1c      	itt	ne
 800ef3c:	f1c4 0401 	rsbne	r4, r4, #1
 800ef40:	6034      	strne	r4, [r6, #0]
 800ef42:	6833      	ldr	r3, [r6, #0]
 800ef44:	441a      	add	r2, r3
 800ef46:	e7db      	b.n	800ef00 <__cvt+0x58>
 800ef48:	1c5c      	adds	r4, r3, #1
 800ef4a:	9403      	str	r4, [sp, #12]
 800ef4c:	7019      	strb	r1, [r3, #0]
 800ef4e:	e7de      	b.n	800ef0e <__cvt+0x66>

0800ef50 <__exponent>:
 800ef50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef52:	2900      	cmp	r1, #0
 800ef54:	bfba      	itte	lt
 800ef56:	4249      	neglt	r1, r1
 800ef58:	232d      	movlt	r3, #45	@ 0x2d
 800ef5a:	232b      	movge	r3, #43	@ 0x2b
 800ef5c:	2909      	cmp	r1, #9
 800ef5e:	7002      	strb	r2, [r0, #0]
 800ef60:	7043      	strb	r3, [r0, #1]
 800ef62:	dd29      	ble.n	800efb8 <__exponent+0x68>
 800ef64:	f10d 0307 	add.w	r3, sp, #7
 800ef68:	461d      	mov	r5, r3
 800ef6a:	270a      	movs	r7, #10
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef72:	fb07 1416 	mls	r4, r7, r6, r1
 800ef76:	3430      	adds	r4, #48	@ 0x30
 800ef78:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	2c63      	cmp	r4, #99	@ 0x63
 800ef80:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef84:	4631      	mov	r1, r6
 800ef86:	dcf1      	bgt.n	800ef6c <__exponent+0x1c>
 800ef88:	3130      	adds	r1, #48	@ 0x30
 800ef8a:	1e94      	subs	r4, r2, #2
 800ef8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ef90:	1c41      	adds	r1, r0, #1
 800ef92:	4623      	mov	r3, r4
 800ef94:	42ab      	cmp	r3, r5
 800ef96:	d30a      	bcc.n	800efae <__exponent+0x5e>
 800ef98:	f10d 0309 	add.w	r3, sp, #9
 800ef9c:	1a9b      	subs	r3, r3, r2
 800ef9e:	42ac      	cmp	r4, r5
 800efa0:	bf88      	it	hi
 800efa2:	2300      	movhi	r3, #0
 800efa4:	3302      	adds	r3, #2
 800efa6:	4403      	add	r3, r0
 800efa8:	1a18      	subs	r0, r3, r0
 800efaa:	b003      	add	sp, #12
 800efac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efae:	f813 6b01 	ldrb.w	r6, [r3], #1
 800efb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800efb6:	e7ed      	b.n	800ef94 <__exponent+0x44>
 800efb8:	2330      	movs	r3, #48	@ 0x30
 800efba:	3130      	adds	r1, #48	@ 0x30
 800efbc:	7083      	strb	r3, [r0, #2]
 800efbe:	70c1      	strb	r1, [r0, #3]
 800efc0:	1d03      	adds	r3, r0, #4
 800efc2:	e7f1      	b.n	800efa8 <__exponent+0x58>
 800efc4:	0000      	movs	r0, r0
	...

0800efc8 <_printf_float>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	b08d      	sub	sp, #52	@ 0x34
 800efce:	460c      	mov	r4, r1
 800efd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800efd4:	4616      	mov	r6, r2
 800efd6:	461f      	mov	r7, r3
 800efd8:	4605      	mov	r5, r0
 800efda:	f000 fccb 	bl	800f974 <_localeconv_r>
 800efde:	f8d0 b000 	ldr.w	fp, [r0]
 800efe2:	4658      	mov	r0, fp
 800efe4:	f7f1 f9cc 	bl	8000380 <strlen>
 800efe8:	2300      	movs	r3, #0
 800efea:	930a      	str	r3, [sp, #40]	@ 0x28
 800efec:	f8d8 3000 	ldr.w	r3, [r8]
 800eff0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800eff4:	6822      	ldr	r2, [r4, #0]
 800eff6:	9005      	str	r0, [sp, #20]
 800eff8:	3307      	adds	r3, #7
 800effa:	f023 0307 	bic.w	r3, r3, #7
 800effe:	f103 0108 	add.w	r1, r3, #8
 800f002:	f8c8 1000 	str.w	r1, [r8]
 800f006:	ed93 0b00 	vldr	d0, [r3]
 800f00a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f268 <_printf_float+0x2a0>
 800f00e:	eeb0 7bc0 	vabs.f64	d7, d0
 800f012:	eeb4 7b46 	vcmp.f64	d7, d6
 800f016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f01e:	dd24      	ble.n	800f06a <_printf_float+0xa2>
 800f020:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f028:	d502      	bpl.n	800f030 <_printf_float+0x68>
 800f02a:	232d      	movs	r3, #45	@ 0x2d
 800f02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f030:	498f      	ldr	r1, [pc, #572]	@ (800f270 <_printf_float+0x2a8>)
 800f032:	4b90      	ldr	r3, [pc, #576]	@ (800f274 <_printf_float+0x2ac>)
 800f034:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f038:	bf94      	ite	ls
 800f03a:	4688      	movls	r8, r1
 800f03c:	4698      	movhi	r8, r3
 800f03e:	f022 0204 	bic.w	r2, r2, #4
 800f042:	2303      	movs	r3, #3
 800f044:	6123      	str	r3, [r4, #16]
 800f046:	6022      	str	r2, [r4, #0]
 800f048:	f04f 0a00 	mov.w	sl, #0
 800f04c:	9700      	str	r7, [sp, #0]
 800f04e:	4633      	mov	r3, r6
 800f050:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f052:	4621      	mov	r1, r4
 800f054:	4628      	mov	r0, r5
 800f056:	f000 f9d1 	bl	800f3fc <_printf_common>
 800f05a:	3001      	adds	r0, #1
 800f05c:	f040 8089 	bne.w	800f172 <_printf_float+0x1aa>
 800f060:	f04f 30ff 	mov.w	r0, #4294967295
 800f064:	b00d      	add	sp, #52	@ 0x34
 800f066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06a:	eeb4 0b40 	vcmp.f64	d0, d0
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	d709      	bvc.n	800f088 <_printf_float+0xc0>
 800f074:	ee10 3a90 	vmov	r3, s1
 800f078:	2b00      	cmp	r3, #0
 800f07a:	bfbc      	itt	lt
 800f07c:	232d      	movlt	r3, #45	@ 0x2d
 800f07e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f082:	497d      	ldr	r1, [pc, #500]	@ (800f278 <_printf_float+0x2b0>)
 800f084:	4b7d      	ldr	r3, [pc, #500]	@ (800f27c <_printf_float+0x2b4>)
 800f086:	e7d5      	b.n	800f034 <_printf_float+0x6c>
 800f088:	6863      	ldr	r3, [r4, #4]
 800f08a:	1c59      	adds	r1, r3, #1
 800f08c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f090:	d139      	bne.n	800f106 <_printf_float+0x13e>
 800f092:	2306      	movs	r3, #6
 800f094:	6063      	str	r3, [r4, #4]
 800f096:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f09a:	2300      	movs	r3, #0
 800f09c:	6022      	str	r2, [r4, #0]
 800f09e:	9303      	str	r3, [sp, #12]
 800f0a0:	ab0a      	add	r3, sp, #40	@ 0x28
 800f0a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f0a6:	ab09      	add	r3, sp, #36	@ 0x24
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	6861      	ldr	r1, [r4, #4]
 800f0ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	f7ff fef9 	bl	800eea8 <__cvt>
 800f0b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f0ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0bc:	4680      	mov	r8, r0
 800f0be:	d129      	bne.n	800f114 <_printf_float+0x14c>
 800f0c0:	1cc8      	adds	r0, r1, #3
 800f0c2:	db02      	blt.n	800f0ca <_printf_float+0x102>
 800f0c4:	6863      	ldr	r3, [r4, #4]
 800f0c6:	4299      	cmp	r1, r3
 800f0c8:	dd41      	ble.n	800f14e <_printf_float+0x186>
 800f0ca:	f1a9 0902 	sub.w	r9, r9, #2
 800f0ce:	fa5f f989 	uxtb.w	r9, r9
 800f0d2:	3901      	subs	r1, #1
 800f0d4:	464a      	mov	r2, r9
 800f0d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f0da:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0dc:	f7ff ff38 	bl	800ef50 <__exponent>
 800f0e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0e2:	1813      	adds	r3, r2, r0
 800f0e4:	2a01      	cmp	r2, #1
 800f0e6:	4682      	mov	sl, r0
 800f0e8:	6123      	str	r3, [r4, #16]
 800f0ea:	dc02      	bgt.n	800f0f2 <_printf_float+0x12a>
 800f0ec:	6822      	ldr	r2, [r4, #0]
 800f0ee:	07d2      	lsls	r2, r2, #31
 800f0f0:	d501      	bpl.n	800f0f6 <_printf_float+0x12e>
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	6123      	str	r3, [r4, #16]
 800f0f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d0a6      	beq.n	800f04c <_printf_float+0x84>
 800f0fe:	232d      	movs	r3, #45	@ 0x2d
 800f100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f104:	e7a2      	b.n	800f04c <_printf_float+0x84>
 800f106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f10a:	d1c4      	bne.n	800f096 <_printf_float+0xce>
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1c2      	bne.n	800f096 <_printf_float+0xce>
 800f110:	2301      	movs	r3, #1
 800f112:	e7bf      	b.n	800f094 <_printf_float+0xcc>
 800f114:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f118:	d9db      	bls.n	800f0d2 <_printf_float+0x10a>
 800f11a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f11e:	d118      	bne.n	800f152 <_printf_float+0x18a>
 800f120:	2900      	cmp	r1, #0
 800f122:	6863      	ldr	r3, [r4, #4]
 800f124:	dd0b      	ble.n	800f13e <_printf_float+0x176>
 800f126:	6121      	str	r1, [r4, #16]
 800f128:	b913      	cbnz	r3, 800f130 <_printf_float+0x168>
 800f12a:	6822      	ldr	r2, [r4, #0]
 800f12c:	07d0      	lsls	r0, r2, #31
 800f12e:	d502      	bpl.n	800f136 <_printf_float+0x16e>
 800f130:	3301      	adds	r3, #1
 800f132:	440b      	add	r3, r1
 800f134:	6123      	str	r3, [r4, #16]
 800f136:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f138:	f04f 0a00 	mov.w	sl, #0
 800f13c:	e7db      	b.n	800f0f6 <_printf_float+0x12e>
 800f13e:	b913      	cbnz	r3, 800f146 <_printf_float+0x17e>
 800f140:	6822      	ldr	r2, [r4, #0]
 800f142:	07d2      	lsls	r2, r2, #31
 800f144:	d501      	bpl.n	800f14a <_printf_float+0x182>
 800f146:	3302      	adds	r3, #2
 800f148:	e7f4      	b.n	800f134 <_printf_float+0x16c>
 800f14a:	2301      	movs	r3, #1
 800f14c:	e7f2      	b.n	800f134 <_printf_float+0x16c>
 800f14e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f154:	4299      	cmp	r1, r3
 800f156:	db05      	blt.n	800f164 <_printf_float+0x19c>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	6121      	str	r1, [r4, #16]
 800f15c:	07d8      	lsls	r0, r3, #31
 800f15e:	d5ea      	bpl.n	800f136 <_printf_float+0x16e>
 800f160:	1c4b      	adds	r3, r1, #1
 800f162:	e7e7      	b.n	800f134 <_printf_float+0x16c>
 800f164:	2900      	cmp	r1, #0
 800f166:	bfd4      	ite	le
 800f168:	f1c1 0202 	rsble	r2, r1, #2
 800f16c:	2201      	movgt	r2, #1
 800f16e:	4413      	add	r3, r2
 800f170:	e7e0      	b.n	800f134 <_printf_float+0x16c>
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	055a      	lsls	r2, r3, #21
 800f176:	d407      	bmi.n	800f188 <_printf_float+0x1c0>
 800f178:	6923      	ldr	r3, [r4, #16]
 800f17a:	4642      	mov	r2, r8
 800f17c:	4631      	mov	r1, r6
 800f17e:	4628      	mov	r0, r5
 800f180:	47b8      	blx	r7
 800f182:	3001      	adds	r0, #1
 800f184:	d12a      	bne.n	800f1dc <_printf_float+0x214>
 800f186:	e76b      	b.n	800f060 <_printf_float+0x98>
 800f188:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f18c:	f240 80e0 	bls.w	800f350 <_printf_float+0x388>
 800f190:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f194:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19c:	d133      	bne.n	800f206 <_printf_float+0x23e>
 800f19e:	4a38      	ldr	r2, [pc, #224]	@ (800f280 <_printf_float+0x2b8>)
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	4631      	mov	r1, r6
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	47b8      	blx	r7
 800f1a8:	3001      	adds	r0, #1
 800f1aa:	f43f af59 	beq.w	800f060 <_printf_float+0x98>
 800f1ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f1b2:	4543      	cmp	r3, r8
 800f1b4:	db02      	blt.n	800f1bc <_printf_float+0x1f4>
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	07d8      	lsls	r0, r3, #31
 800f1ba:	d50f      	bpl.n	800f1dc <_printf_float+0x214>
 800f1bc:	9b05      	ldr	r3, [sp, #20]
 800f1be:	465a      	mov	r2, fp
 800f1c0:	4631      	mov	r1, r6
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	47b8      	blx	r7
 800f1c6:	3001      	adds	r0, #1
 800f1c8:	f43f af4a 	beq.w	800f060 <_printf_float+0x98>
 800f1cc:	f04f 0900 	mov.w	r9, #0
 800f1d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1d4:	f104 0a1a 	add.w	sl, r4, #26
 800f1d8:	45c8      	cmp	r8, r9
 800f1da:	dc09      	bgt.n	800f1f0 <_printf_float+0x228>
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	079b      	lsls	r3, r3, #30
 800f1e0:	f100 8107 	bmi.w	800f3f2 <_printf_float+0x42a>
 800f1e4:	68e0      	ldr	r0, [r4, #12]
 800f1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1e8:	4298      	cmp	r0, r3
 800f1ea:	bfb8      	it	lt
 800f1ec:	4618      	movlt	r0, r3
 800f1ee:	e739      	b.n	800f064 <_printf_float+0x9c>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	4652      	mov	r2, sl
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	47b8      	blx	r7
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	f43f af30 	beq.w	800f060 <_printf_float+0x98>
 800f200:	f109 0901 	add.w	r9, r9, #1
 800f204:	e7e8      	b.n	800f1d8 <_printf_float+0x210>
 800f206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f208:	2b00      	cmp	r3, #0
 800f20a:	dc3b      	bgt.n	800f284 <_printf_float+0x2bc>
 800f20c:	4a1c      	ldr	r2, [pc, #112]	@ (800f280 <_printf_float+0x2b8>)
 800f20e:	2301      	movs	r3, #1
 800f210:	4631      	mov	r1, r6
 800f212:	4628      	mov	r0, r5
 800f214:	47b8      	blx	r7
 800f216:	3001      	adds	r0, #1
 800f218:	f43f af22 	beq.w	800f060 <_printf_float+0x98>
 800f21c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f220:	ea59 0303 	orrs.w	r3, r9, r3
 800f224:	d102      	bne.n	800f22c <_printf_float+0x264>
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	07d9      	lsls	r1, r3, #31
 800f22a:	d5d7      	bpl.n	800f1dc <_printf_float+0x214>
 800f22c:	9b05      	ldr	r3, [sp, #20]
 800f22e:	465a      	mov	r2, fp
 800f230:	4631      	mov	r1, r6
 800f232:	4628      	mov	r0, r5
 800f234:	47b8      	blx	r7
 800f236:	3001      	adds	r0, #1
 800f238:	f43f af12 	beq.w	800f060 <_printf_float+0x98>
 800f23c:	f04f 0a00 	mov.w	sl, #0
 800f240:	f104 0b1a 	add.w	fp, r4, #26
 800f244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f246:	425b      	negs	r3, r3
 800f248:	4553      	cmp	r3, sl
 800f24a:	dc01      	bgt.n	800f250 <_printf_float+0x288>
 800f24c:	464b      	mov	r3, r9
 800f24e:	e794      	b.n	800f17a <_printf_float+0x1b2>
 800f250:	2301      	movs	r3, #1
 800f252:	465a      	mov	r2, fp
 800f254:	4631      	mov	r1, r6
 800f256:	4628      	mov	r0, r5
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	f43f af00 	beq.w	800f060 <_printf_float+0x98>
 800f260:	f10a 0a01 	add.w	sl, sl, #1
 800f264:	e7ee      	b.n	800f244 <_printf_float+0x27c>
 800f266:	bf00      	nop
 800f268:	ffffffff 	.word	0xffffffff
 800f26c:	7fefffff 	.word	0x7fefffff
 800f270:	08013c34 	.word	0x08013c34
 800f274:	08013c38 	.word	0x08013c38
 800f278:	08013c3c 	.word	0x08013c3c
 800f27c:	08013c40 	.word	0x08013c40
 800f280:	08013c44 	.word	0x08013c44
 800f284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f28a:	4553      	cmp	r3, sl
 800f28c:	bfa8      	it	ge
 800f28e:	4653      	movge	r3, sl
 800f290:	2b00      	cmp	r3, #0
 800f292:	4699      	mov	r9, r3
 800f294:	dc37      	bgt.n	800f306 <_printf_float+0x33e>
 800f296:	2300      	movs	r3, #0
 800f298:	9307      	str	r3, [sp, #28]
 800f29a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f29e:	f104 021a 	add.w	r2, r4, #26
 800f2a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2a4:	9907      	ldr	r1, [sp, #28]
 800f2a6:	9306      	str	r3, [sp, #24]
 800f2a8:	eba3 0309 	sub.w	r3, r3, r9
 800f2ac:	428b      	cmp	r3, r1
 800f2ae:	dc31      	bgt.n	800f314 <_printf_float+0x34c>
 800f2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b2:	459a      	cmp	sl, r3
 800f2b4:	dc3b      	bgt.n	800f32e <_printf_float+0x366>
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	07da      	lsls	r2, r3, #31
 800f2ba:	d438      	bmi.n	800f32e <_printf_float+0x366>
 800f2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2be:	ebaa 0903 	sub.w	r9, sl, r3
 800f2c2:	9b06      	ldr	r3, [sp, #24]
 800f2c4:	ebaa 0303 	sub.w	r3, sl, r3
 800f2c8:	4599      	cmp	r9, r3
 800f2ca:	bfa8      	it	ge
 800f2cc:	4699      	movge	r9, r3
 800f2ce:	f1b9 0f00 	cmp.w	r9, #0
 800f2d2:	dc34      	bgt.n	800f33e <_printf_float+0x376>
 800f2d4:	f04f 0800 	mov.w	r8, #0
 800f2d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2dc:	f104 0b1a 	add.w	fp, r4, #26
 800f2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2e2:	ebaa 0303 	sub.w	r3, sl, r3
 800f2e6:	eba3 0309 	sub.w	r3, r3, r9
 800f2ea:	4543      	cmp	r3, r8
 800f2ec:	f77f af76 	ble.w	800f1dc <_printf_float+0x214>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	465a      	mov	r2, fp
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	47b8      	blx	r7
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	f43f aeb0 	beq.w	800f060 <_printf_float+0x98>
 800f300:	f108 0801 	add.w	r8, r8, #1
 800f304:	e7ec      	b.n	800f2e0 <_printf_float+0x318>
 800f306:	4642      	mov	r2, r8
 800f308:	4631      	mov	r1, r6
 800f30a:	4628      	mov	r0, r5
 800f30c:	47b8      	blx	r7
 800f30e:	3001      	adds	r0, #1
 800f310:	d1c1      	bne.n	800f296 <_printf_float+0x2ce>
 800f312:	e6a5      	b.n	800f060 <_printf_float+0x98>
 800f314:	2301      	movs	r3, #1
 800f316:	4631      	mov	r1, r6
 800f318:	4628      	mov	r0, r5
 800f31a:	9206      	str	r2, [sp, #24]
 800f31c:	47b8      	blx	r7
 800f31e:	3001      	adds	r0, #1
 800f320:	f43f ae9e 	beq.w	800f060 <_printf_float+0x98>
 800f324:	9b07      	ldr	r3, [sp, #28]
 800f326:	9a06      	ldr	r2, [sp, #24]
 800f328:	3301      	adds	r3, #1
 800f32a:	9307      	str	r3, [sp, #28]
 800f32c:	e7b9      	b.n	800f2a2 <_printf_float+0x2da>
 800f32e:	9b05      	ldr	r3, [sp, #20]
 800f330:	465a      	mov	r2, fp
 800f332:	4631      	mov	r1, r6
 800f334:	4628      	mov	r0, r5
 800f336:	47b8      	blx	r7
 800f338:	3001      	adds	r0, #1
 800f33a:	d1bf      	bne.n	800f2bc <_printf_float+0x2f4>
 800f33c:	e690      	b.n	800f060 <_printf_float+0x98>
 800f33e:	9a06      	ldr	r2, [sp, #24]
 800f340:	464b      	mov	r3, r9
 800f342:	4442      	add	r2, r8
 800f344:	4631      	mov	r1, r6
 800f346:	4628      	mov	r0, r5
 800f348:	47b8      	blx	r7
 800f34a:	3001      	adds	r0, #1
 800f34c:	d1c2      	bne.n	800f2d4 <_printf_float+0x30c>
 800f34e:	e687      	b.n	800f060 <_printf_float+0x98>
 800f350:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f354:	f1b9 0f01 	cmp.w	r9, #1
 800f358:	dc01      	bgt.n	800f35e <_printf_float+0x396>
 800f35a:	07db      	lsls	r3, r3, #31
 800f35c:	d536      	bpl.n	800f3cc <_printf_float+0x404>
 800f35e:	2301      	movs	r3, #1
 800f360:	4642      	mov	r2, r8
 800f362:	4631      	mov	r1, r6
 800f364:	4628      	mov	r0, r5
 800f366:	47b8      	blx	r7
 800f368:	3001      	adds	r0, #1
 800f36a:	f43f ae79 	beq.w	800f060 <_printf_float+0x98>
 800f36e:	9b05      	ldr	r3, [sp, #20]
 800f370:	465a      	mov	r2, fp
 800f372:	4631      	mov	r1, r6
 800f374:	4628      	mov	r0, r5
 800f376:	47b8      	blx	r7
 800f378:	3001      	adds	r0, #1
 800f37a:	f43f ae71 	beq.w	800f060 <_printf_float+0x98>
 800f37e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f382:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f38e:	d018      	beq.n	800f3c2 <_printf_float+0x3fa>
 800f390:	464b      	mov	r3, r9
 800f392:	f108 0201 	add.w	r2, r8, #1
 800f396:	4631      	mov	r1, r6
 800f398:	4628      	mov	r0, r5
 800f39a:	47b8      	blx	r7
 800f39c:	3001      	adds	r0, #1
 800f39e:	d10c      	bne.n	800f3ba <_printf_float+0x3f2>
 800f3a0:	e65e      	b.n	800f060 <_printf_float+0x98>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	465a      	mov	r2, fp
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	47b8      	blx	r7
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	f43f ae57 	beq.w	800f060 <_printf_float+0x98>
 800f3b2:	f108 0801 	add.w	r8, r8, #1
 800f3b6:	45c8      	cmp	r8, r9
 800f3b8:	dbf3      	blt.n	800f3a2 <_printf_float+0x3da>
 800f3ba:	4653      	mov	r3, sl
 800f3bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f3c0:	e6dc      	b.n	800f17c <_printf_float+0x1b4>
 800f3c2:	f04f 0800 	mov.w	r8, #0
 800f3c6:	f104 0b1a 	add.w	fp, r4, #26
 800f3ca:	e7f4      	b.n	800f3b6 <_printf_float+0x3ee>
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	4642      	mov	r2, r8
 800f3d0:	e7e1      	b.n	800f396 <_printf_float+0x3ce>
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	464a      	mov	r2, r9
 800f3d6:	4631      	mov	r1, r6
 800f3d8:	4628      	mov	r0, r5
 800f3da:	47b8      	blx	r7
 800f3dc:	3001      	adds	r0, #1
 800f3de:	f43f ae3f 	beq.w	800f060 <_printf_float+0x98>
 800f3e2:	f108 0801 	add.w	r8, r8, #1
 800f3e6:	68e3      	ldr	r3, [r4, #12]
 800f3e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3ea:	1a5b      	subs	r3, r3, r1
 800f3ec:	4543      	cmp	r3, r8
 800f3ee:	dcf0      	bgt.n	800f3d2 <_printf_float+0x40a>
 800f3f0:	e6f8      	b.n	800f1e4 <_printf_float+0x21c>
 800f3f2:	f04f 0800 	mov.w	r8, #0
 800f3f6:	f104 0919 	add.w	r9, r4, #25
 800f3fa:	e7f4      	b.n	800f3e6 <_printf_float+0x41e>

0800f3fc <_printf_common>:
 800f3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	4616      	mov	r6, r2
 800f402:	4698      	mov	r8, r3
 800f404:	688a      	ldr	r2, [r1, #8]
 800f406:	690b      	ldr	r3, [r1, #16]
 800f408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f40c:	4293      	cmp	r3, r2
 800f40e:	bfb8      	it	lt
 800f410:	4613      	movlt	r3, r2
 800f412:	6033      	str	r3, [r6, #0]
 800f414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f418:	4607      	mov	r7, r0
 800f41a:	460c      	mov	r4, r1
 800f41c:	b10a      	cbz	r2, 800f422 <_printf_common+0x26>
 800f41e:	3301      	adds	r3, #1
 800f420:	6033      	str	r3, [r6, #0]
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	0699      	lsls	r1, r3, #26
 800f426:	bf42      	ittt	mi
 800f428:	6833      	ldrmi	r3, [r6, #0]
 800f42a:	3302      	addmi	r3, #2
 800f42c:	6033      	strmi	r3, [r6, #0]
 800f42e:	6825      	ldr	r5, [r4, #0]
 800f430:	f015 0506 	ands.w	r5, r5, #6
 800f434:	d106      	bne.n	800f444 <_printf_common+0x48>
 800f436:	f104 0a19 	add.w	sl, r4, #25
 800f43a:	68e3      	ldr	r3, [r4, #12]
 800f43c:	6832      	ldr	r2, [r6, #0]
 800f43e:	1a9b      	subs	r3, r3, r2
 800f440:	42ab      	cmp	r3, r5
 800f442:	dc26      	bgt.n	800f492 <_printf_common+0x96>
 800f444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f448:	6822      	ldr	r2, [r4, #0]
 800f44a:	3b00      	subs	r3, #0
 800f44c:	bf18      	it	ne
 800f44e:	2301      	movne	r3, #1
 800f450:	0692      	lsls	r2, r2, #26
 800f452:	d42b      	bmi.n	800f4ac <_printf_common+0xb0>
 800f454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f458:	4641      	mov	r1, r8
 800f45a:	4638      	mov	r0, r7
 800f45c:	47c8      	blx	r9
 800f45e:	3001      	adds	r0, #1
 800f460:	d01e      	beq.n	800f4a0 <_printf_common+0xa4>
 800f462:	6823      	ldr	r3, [r4, #0]
 800f464:	6922      	ldr	r2, [r4, #16]
 800f466:	f003 0306 	and.w	r3, r3, #6
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	bf02      	ittt	eq
 800f46e:	68e5      	ldreq	r5, [r4, #12]
 800f470:	6833      	ldreq	r3, [r6, #0]
 800f472:	1aed      	subeq	r5, r5, r3
 800f474:	68a3      	ldr	r3, [r4, #8]
 800f476:	bf0c      	ite	eq
 800f478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f47c:	2500      	movne	r5, #0
 800f47e:	4293      	cmp	r3, r2
 800f480:	bfc4      	itt	gt
 800f482:	1a9b      	subgt	r3, r3, r2
 800f484:	18ed      	addgt	r5, r5, r3
 800f486:	2600      	movs	r6, #0
 800f488:	341a      	adds	r4, #26
 800f48a:	42b5      	cmp	r5, r6
 800f48c:	d11a      	bne.n	800f4c4 <_printf_common+0xc8>
 800f48e:	2000      	movs	r0, #0
 800f490:	e008      	b.n	800f4a4 <_printf_common+0xa8>
 800f492:	2301      	movs	r3, #1
 800f494:	4652      	mov	r2, sl
 800f496:	4641      	mov	r1, r8
 800f498:	4638      	mov	r0, r7
 800f49a:	47c8      	blx	r9
 800f49c:	3001      	adds	r0, #1
 800f49e:	d103      	bne.n	800f4a8 <_printf_common+0xac>
 800f4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a8:	3501      	adds	r5, #1
 800f4aa:	e7c6      	b.n	800f43a <_printf_common+0x3e>
 800f4ac:	18e1      	adds	r1, r4, r3
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	2030      	movs	r0, #48	@ 0x30
 800f4b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f4b6:	4422      	add	r2, r4
 800f4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f4bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f4c0:	3302      	adds	r3, #2
 800f4c2:	e7c7      	b.n	800f454 <_printf_common+0x58>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	4641      	mov	r1, r8
 800f4ca:	4638      	mov	r0, r7
 800f4cc:	47c8      	blx	r9
 800f4ce:	3001      	adds	r0, #1
 800f4d0:	d0e6      	beq.n	800f4a0 <_printf_common+0xa4>
 800f4d2:	3601      	adds	r6, #1
 800f4d4:	e7d9      	b.n	800f48a <_printf_common+0x8e>
	...

0800f4d8 <_printf_i>:
 800f4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4dc:	7e0f      	ldrb	r7, [r1, #24]
 800f4de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f4e0:	2f78      	cmp	r7, #120	@ 0x78
 800f4e2:	4691      	mov	r9, r2
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	460c      	mov	r4, r1
 800f4e8:	469a      	mov	sl, r3
 800f4ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4ee:	d807      	bhi.n	800f500 <_printf_i+0x28>
 800f4f0:	2f62      	cmp	r7, #98	@ 0x62
 800f4f2:	d80a      	bhi.n	800f50a <_printf_i+0x32>
 800f4f4:	2f00      	cmp	r7, #0
 800f4f6:	f000 80d2 	beq.w	800f69e <_printf_i+0x1c6>
 800f4fa:	2f58      	cmp	r7, #88	@ 0x58
 800f4fc:	f000 80b9 	beq.w	800f672 <_printf_i+0x19a>
 800f500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f508:	e03a      	b.n	800f580 <_printf_i+0xa8>
 800f50a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f50e:	2b15      	cmp	r3, #21
 800f510:	d8f6      	bhi.n	800f500 <_printf_i+0x28>
 800f512:	a101      	add	r1, pc, #4	@ (adr r1, 800f518 <_printf_i+0x40>)
 800f514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f518:	0800f571 	.word	0x0800f571
 800f51c:	0800f585 	.word	0x0800f585
 800f520:	0800f501 	.word	0x0800f501
 800f524:	0800f501 	.word	0x0800f501
 800f528:	0800f501 	.word	0x0800f501
 800f52c:	0800f501 	.word	0x0800f501
 800f530:	0800f585 	.word	0x0800f585
 800f534:	0800f501 	.word	0x0800f501
 800f538:	0800f501 	.word	0x0800f501
 800f53c:	0800f501 	.word	0x0800f501
 800f540:	0800f501 	.word	0x0800f501
 800f544:	0800f685 	.word	0x0800f685
 800f548:	0800f5af 	.word	0x0800f5af
 800f54c:	0800f63f 	.word	0x0800f63f
 800f550:	0800f501 	.word	0x0800f501
 800f554:	0800f501 	.word	0x0800f501
 800f558:	0800f6a7 	.word	0x0800f6a7
 800f55c:	0800f501 	.word	0x0800f501
 800f560:	0800f5af 	.word	0x0800f5af
 800f564:	0800f501 	.word	0x0800f501
 800f568:	0800f501 	.word	0x0800f501
 800f56c:	0800f647 	.word	0x0800f647
 800f570:	6833      	ldr	r3, [r6, #0]
 800f572:	1d1a      	adds	r2, r3, #4
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	6032      	str	r2, [r6, #0]
 800f578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f57c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f580:	2301      	movs	r3, #1
 800f582:	e09d      	b.n	800f6c0 <_printf_i+0x1e8>
 800f584:	6833      	ldr	r3, [r6, #0]
 800f586:	6820      	ldr	r0, [r4, #0]
 800f588:	1d19      	adds	r1, r3, #4
 800f58a:	6031      	str	r1, [r6, #0]
 800f58c:	0606      	lsls	r6, r0, #24
 800f58e:	d501      	bpl.n	800f594 <_printf_i+0xbc>
 800f590:	681d      	ldr	r5, [r3, #0]
 800f592:	e003      	b.n	800f59c <_printf_i+0xc4>
 800f594:	0645      	lsls	r5, r0, #25
 800f596:	d5fb      	bpl.n	800f590 <_printf_i+0xb8>
 800f598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f59c:	2d00      	cmp	r5, #0
 800f59e:	da03      	bge.n	800f5a8 <_printf_i+0xd0>
 800f5a0:	232d      	movs	r3, #45	@ 0x2d
 800f5a2:	426d      	negs	r5, r5
 800f5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5a8:	4859      	ldr	r0, [pc, #356]	@ (800f710 <_printf_i+0x238>)
 800f5aa:	230a      	movs	r3, #10
 800f5ac:	e011      	b.n	800f5d2 <_printf_i+0xfa>
 800f5ae:	6821      	ldr	r1, [r4, #0]
 800f5b0:	6833      	ldr	r3, [r6, #0]
 800f5b2:	0608      	lsls	r0, r1, #24
 800f5b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f5b8:	d402      	bmi.n	800f5c0 <_printf_i+0xe8>
 800f5ba:	0649      	lsls	r1, r1, #25
 800f5bc:	bf48      	it	mi
 800f5be:	b2ad      	uxthmi	r5, r5
 800f5c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f5c2:	4853      	ldr	r0, [pc, #332]	@ (800f710 <_printf_i+0x238>)
 800f5c4:	6033      	str	r3, [r6, #0]
 800f5c6:	bf14      	ite	ne
 800f5c8:	230a      	movne	r3, #10
 800f5ca:	2308      	moveq	r3, #8
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f5d2:	6866      	ldr	r6, [r4, #4]
 800f5d4:	60a6      	str	r6, [r4, #8]
 800f5d6:	2e00      	cmp	r6, #0
 800f5d8:	bfa2      	ittt	ge
 800f5da:	6821      	ldrge	r1, [r4, #0]
 800f5dc:	f021 0104 	bicge.w	r1, r1, #4
 800f5e0:	6021      	strge	r1, [r4, #0]
 800f5e2:	b90d      	cbnz	r5, 800f5e8 <_printf_i+0x110>
 800f5e4:	2e00      	cmp	r6, #0
 800f5e6:	d04b      	beq.n	800f680 <_printf_i+0x1a8>
 800f5e8:	4616      	mov	r6, r2
 800f5ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5ee:	fb03 5711 	mls	r7, r3, r1, r5
 800f5f2:	5dc7      	ldrb	r7, [r0, r7]
 800f5f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5f8:	462f      	mov	r7, r5
 800f5fa:	42bb      	cmp	r3, r7
 800f5fc:	460d      	mov	r5, r1
 800f5fe:	d9f4      	bls.n	800f5ea <_printf_i+0x112>
 800f600:	2b08      	cmp	r3, #8
 800f602:	d10b      	bne.n	800f61c <_printf_i+0x144>
 800f604:	6823      	ldr	r3, [r4, #0]
 800f606:	07df      	lsls	r7, r3, #31
 800f608:	d508      	bpl.n	800f61c <_printf_i+0x144>
 800f60a:	6923      	ldr	r3, [r4, #16]
 800f60c:	6861      	ldr	r1, [r4, #4]
 800f60e:	4299      	cmp	r1, r3
 800f610:	bfde      	ittt	le
 800f612:	2330      	movle	r3, #48	@ 0x30
 800f614:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f618:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f61c:	1b92      	subs	r2, r2, r6
 800f61e:	6122      	str	r2, [r4, #16]
 800f620:	f8cd a000 	str.w	sl, [sp]
 800f624:	464b      	mov	r3, r9
 800f626:	aa03      	add	r2, sp, #12
 800f628:	4621      	mov	r1, r4
 800f62a:	4640      	mov	r0, r8
 800f62c:	f7ff fee6 	bl	800f3fc <_printf_common>
 800f630:	3001      	adds	r0, #1
 800f632:	d14a      	bne.n	800f6ca <_printf_i+0x1f2>
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	b004      	add	sp, #16
 800f63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	f043 0320 	orr.w	r3, r3, #32
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	4833      	ldr	r0, [pc, #204]	@ (800f714 <_printf_i+0x23c>)
 800f648:	2778      	movs	r7, #120	@ 0x78
 800f64a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	6831      	ldr	r1, [r6, #0]
 800f652:	061f      	lsls	r7, r3, #24
 800f654:	f851 5b04 	ldr.w	r5, [r1], #4
 800f658:	d402      	bmi.n	800f660 <_printf_i+0x188>
 800f65a:	065f      	lsls	r7, r3, #25
 800f65c:	bf48      	it	mi
 800f65e:	b2ad      	uxthmi	r5, r5
 800f660:	6031      	str	r1, [r6, #0]
 800f662:	07d9      	lsls	r1, r3, #31
 800f664:	bf44      	itt	mi
 800f666:	f043 0320 	orrmi.w	r3, r3, #32
 800f66a:	6023      	strmi	r3, [r4, #0]
 800f66c:	b11d      	cbz	r5, 800f676 <_printf_i+0x19e>
 800f66e:	2310      	movs	r3, #16
 800f670:	e7ac      	b.n	800f5cc <_printf_i+0xf4>
 800f672:	4827      	ldr	r0, [pc, #156]	@ (800f710 <_printf_i+0x238>)
 800f674:	e7e9      	b.n	800f64a <_printf_i+0x172>
 800f676:	6823      	ldr	r3, [r4, #0]
 800f678:	f023 0320 	bic.w	r3, r3, #32
 800f67c:	6023      	str	r3, [r4, #0]
 800f67e:	e7f6      	b.n	800f66e <_printf_i+0x196>
 800f680:	4616      	mov	r6, r2
 800f682:	e7bd      	b.n	800f600 <_printf_i+0x128>
 800f684:	6833      	ldr	r3, [r6, #0]
 800f686:	6825      	ldr	r5, [r4, #0]
 800f688:	6961      	ldr	r1, [r4, #20]
 800f68a:	1d18      	adds	r0, r3, #4
 800f68c:	6030      	str	r0, [r6, #0]
 800f68e:	062e      	lsls	r6, r5, #24
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	d501      	bpl.n	800f698 <_printf_i+0x1c0>
 800f694:	6019      	str	r1, [r3, #0]
 800f696:	e002      	b.n	800f69e <_printf_i+0x1c6>
 800f698:	0668      	lsls	r0, r5, #25
 800f69a:	d5fb      	bpl.n	800f694 <_printf_i+0x1bc>
 800f69c:	8019      	strh	r1, [r3, #0]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	6123      	str	r3, [r4, #16]
 800f6a2:	4616      	mov	r6, r2
 800f6a4:	e7bc      	b.n	800f620 <_printf_i+0x148>
 800f6a6:	6833      	ldr	r3, [r6, #0]
 800f6a8:	1d1a      	adds	r2, r3, #4
 800f6aa:	6032      	str	r2, [r6, #0]
 800f6ac:	681e      	ldr	r6, [r3, #0]
 800f6ae:	6862      	ldr	r2, [r4, #4]
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f7f0 fe14 	bl	80002e0 <memchr>
 800f6b8:	b108      	cbz	r0, 800f6be <_printf_i+0x1e6>
 800f6ba:	1b80      	subs	r0, r0, r6
 800f6bc:	6060      	str	r0, [r4, #4]
 800f6be:	6863      	ldr	r3, [r4, #4]
 800f6c0:	6123      	str	r3, [r4, #16]
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6c8:	e7aa      	b.n	800f620 <_printf_i+0x148>
 800f6ca:	6923      	ldr	r3, [r4, #16]
 800f6cc:	4632      	mov	r2, r6
 800f6ce:	4649      	mov	r1, r9
 800f6d0:	4640      	mov	r0, r8
 800f6d2:	47d0      	blx	sl
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	d0ad      	beq.n	800f634 <_printf_i+0x15c>
 800f6d8:	6823      	ldr	r3, [r4, #0]
 800f6da:	079b      	lsls	r3, r3, #30
 800f6dc:	d413      	bmi.n	800f706 <_printf_i+0x22e>
 800f6de:	68e0      	ldr	r0, [r4, #12]
 800f6e0:	9b03      	ldr	r3, [sp, #12]
 800f6e2:	4298      	cmp	r0, r3
 800f6e4:	bfb8      	it	lt
 800f6e6:	4618      	movlt	r0, r3
 800f6e8:	e7a6      	b.n	800f638 <_printf_i+0x160>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	4632      	mov	r2, r6
 800f6ee:	4649      	mov	r1, r9
 800f6f0:	4640      	mov	r0, r8
 800f6f2:	47d0      	blx	sl
 800f6f4:	3001      	adds	r0, #1
 800f6f6:	d09d      	beq.n	800f634 <_printf_i+0x15c>
 800f6f8:	3501      	adds	r5, #1
 800f6fa:	68e3      	ldr	r3, [r4, #12]
 800f6fc:	9903      	ldr	r1, [sp, #12]
 800f6fe:	1a5b      	subs	r3, r3, r1
 800f700:	42ab      	cmp	r3, r5
 800f702:	dcf2      	bgt.n	800f6ea <_printf_i+0x212>
 800f704:	e7eb      	b.n	800f6de <_printf_i+0x206>
 800f706:	2500      	movs	r5, #0
 800f708:	f104 0619 	add.w	r6, r4, #25
 800f70c:	e7f5      	b.n	800f6fa <_printf_i+0x222>
 800f70e:	bf00      	nop
 800f710:	08013c46 	.word	0x08013c46
 800f714:	08013c57 	.word	0x08013c57

0800f718 <std>:
 800f718:	2300      	movs	r3, #0
 800f71a:	b510      	push	{r4, lr}
 800f71c:	4604      	mov	r4, r0
 800f71e:	e9c0 3300 	strd	r3, r3, [r0]
 800f722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f726:	6083      	str	r3, [r0, #8]
 800f728:	8181      	strh	r1, [r0, #12]
 800f72a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f72c:	81c2      	strh	r2, [r0, #14]
 800f72e:	6183      	str	r3, [r0, #24]
 800f730:	4619      	mov	r1, r3
 800f732:	2208      	movs	r2, #8
 800f734:	305c      	adds	r0, #92	@ 0x5c
 800f736:	f000 f914 	bl	800f962 <memset>
 800f73a:	4b0d      	ldr	r3, [pc, #52]	@ (800f770 <std+0x58>)
 800f73c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f73e:	4b0d      	ldr	r3, [pc, #52]	@ (800f774 <std+0x5c>)
 800f740:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f742:	4b0d      	ldr	r3, [pc, #52]	@ (800f778 <std+0x60>)
 800f744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f746:	4b0d      	ldr	r3, [pc, #52]	@ (800f77c <std+0x64>)
 800f748:	6323      	str	r3, [r4, #48]	@ 0x30
 800f74a:	4b0d      	ldr	r3, [pc, #52]	@ (800f780 <std+0x68>)
 800f74c:	6224      	str	r4, [r4, #32]
 800f74e:	429c      	cmp	r4, r3
 800f750:	d006      	beq.n	800f760 <std+0x48>
 800f752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f756:	4294      	cmp	r4, r2
 800f758:	d002      	beq.n	800f760 <std+0x48>
 800f75a:	33d0      	adds	r3, #208	@ 0xd0
 800f75c:	429c      	cmp	r4, r3
 800f75e:	d105      	bne.n	800f76c <std+0x54>
 800f760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f768:	f000 b982 	b.w	800fa70 <__retarget_lock_init_recursive>
 800f76c:	bd10      	pop	{r4, pc}
 800f76e:	bf00      	nop
 800f770:	0800f8dd 	.word	0x0800f8dd
 800f774:	0800f8ff 	.word	0x0800f8ff
 800f778:	0800f937 	.word	0x0800f937
 800f77c:	0800f95b 	.word	0x0800f95b
 800f780:	24002708 	.word	0x24002708

0800f784 <stdio_exit_handler>:
 800f784:	4a02      	ldr	r2, [pc, #8]	@ (800f790 <stdio_exit_handler+0xc>)
 800f786:	4903      	ldr	r1, [pc, #12]	@ (800f794 <stdio_exit_handler+0x10>)
 800f788:	4803      	ldr	r0, [pc, #12]	@ (800f798 <stdio_exit_handler+0x14>)
 800f78a:	f000 b869 	b.w	800f860 <_fwalk_sglue>
 800f78e:	bf00      	nop
 800f790:	24000104 	.word	0x24000104
 800f794:	08011185 	.word	0x08011185
 800f798:	24000114 	.word	0x24000114

0800f79c <cleanup_stdio>:
 800f79c:	6841      	ldr	r1, [r0, #4]
 800f79e:	4b0c      	ldr	r3, [pc, #48]	@ (800f7d0 <cleanup_stdio+0x34>)
 800f7a0:	4299      	cmp	r1, r3
 800f7a2:	b510      	push	{r4, lr}
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	d001      	beq.n	800f7ac <cleanup_stdio+0x10>
 800f7a8:	f001 fcec 	bl	8011184 <_fflush_r>
 800f7ac:	68a1      	ldr	r1, [r4, #8]
 800f7ae:	4b09      	ldr	r3, [pc, #36]	@ (800f7d4 <cleanup_stdio+0x38>)
 800f7b0:	4299      	cmp	r1, r3
 800f7b2:	d002      	beq.n	800f7ba <cleanup_stdio+0x1e>
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f001 fce5 	bl	8011184 <_fflush_r>
 800f7ba:	68e1      	ldr	r1, [r4, #12]
 800f7bc:	4b06      	ldr	r3, [pc, #24]	@ (800f7d8 <cleanup_stdio+0x3c>)
 800f7be:	4299      	cmp	r1, r3
 800f7c0:	d004      	beq.n	800f7cc <cleanup_stdio+0x30>
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7c8:	f001 bcdc 	b.w	8011184 <_fflush_r>
 800f7cc:	bd10      	pop	{r4, pc}
 800f7ce:	bf00      	nop
 800f7d0:	24002708 	.word	0x24002708
 800f7d4:	24002770 	.word	0x24002770
 800f7d8:	240027d8 	.word	0x240027d8

0800f7dc <global_stdio_init.part.0>:
 800f7dc:	b510      	push	{r4, lr}
 800f7de:	4b0b      	ldr	r3, [pc, #44]	@ (800f80c <global_stdio_init.part.0+0x30>)
 800f7e0:	4c0b      	ldr	r4, [pc, #44]	@ (800f810 <global_stdio_init.part.0+0x34>)
 800f7e2:	4a0c      	ldr	r2, [pc, #48]	@ (800f814 <global_stdio_init.part.0+0x38>)
 800f7e4:	601a      	str	r2, [r3, #0]
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	2104      	movs	r1, #4
 800f7ec:	f7ff ff94 	bl	800f718 <std>
 800f7f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	2109      	movs	r1, #9
 800f7f8:	f7ff ff8e 	bl	800f718 <std>
 800f7fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f800:	2202      	movs	r2, #2
 800f802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f806:	2112      	movs	r1, #18
 800f808:	f7ff bf86 	b.w	800f718 <std>
 800f80c:	24002840 	.word	0x24002840
 800f810:	24002708 	.word	0x24002708
 800f814:	0800f785 	.word	0x0800f785

0800f818 <__sfp_lock_acquire>:
 800f818:	4801      	ldr	r0, [pc, #4]	@ (800f820 <__sfp_lock_acquire+0x8>)
 800f81a:	f000 b92a 	b.w	800fa72 <__retarget_lock_acquire_recursive>
 800f81e:	bf00      	nop
 800f820:	24002849 	.word	0x24002849

0800f824 <__sfp_lock_release>:
 800f824:	4801      	ldr	r0, [pc, #4]	@ (800f82c <__sfp_lock_release+0x8>)
 800f826:	f000 b925 	b.w	800fa74 <__retarget_lock_release_recursive>
 800f82a:	bf00      	nop
 800f82c:	24002849 	.word	0x24002849

0800f830 <__sinit>:
 800f830:	b510      	push	{r4, lr}
 800f832:	4604      	mov	r4, r0
 800f834:	f7ff fff0 	bl	800f818 <__sfp_lock_acquire>
 800f838:	6a23      	ldr	r3, [r4, #32]
 800f83a:	b11b      	cbz	r3, 800f844 <__sinit+0x14>
 800f83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f840:	f7ff bff0 	b.w	800f824 <__sfp_lock_release>
 800f844:	4b04      	ldr	r3, [pc, #16]	@ (800f858 <__sinit+0x28>)
 800f846:	6223      	str	r3, [r4, #32]
 800f848:	4b04      	ldr	r3, [pc, #16]	@ (800f85c <__sinit+0x2c>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1f5      	bne.n	800f83c <__sinit+0xc>
 800f850:	f7ff ffc4 	bl	800f7dc <global_stdio_init.part.0>
 800f854:	e7f2      	b.n	800f83c <__sinit+0xc>
 800f856:	bf00      	nop
 800f858:	0800f79d 	.word	0x0800f79d
 800f85c:	24002840 	.word	0x24002840

0800f860 <_fwalk_sglue>:
 800f860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f864:	4607      	mov	r7, r0
 800f866:	4688      	mov	r8, r1
 800f868:	4614      	mov	r4, r2
 800f86a:	2600      	movs	r6, #0
 800f86c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f870:	f1b9 0901 	subs.w	r9, r9, #1
 800f874:	d505      	bpl.n	800f882 <_fwalk_sglue+0x22>
 800f876:	6824      	ldr	r4, [r4, #0]
 800f878:	2c00      	cmp	r4, #0
 800f87a:	d1f7      	bne.n	800f86c <_fwalk_sglue+0xc>
 800f87c:	4630      	mov	r0, r6
 800f87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f882:	89ab      	ldrh	r3, [r5, #12]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d907      	bls.n	800f898 <_fwalk_sglue+0x38>
 800f888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f88c:	3301      	adds	r3, #1
 800f88e:	d003      	beq.n	800f898 <_fwalk_sglue+0x38>
 800f890:	4629      	mov	r1, r5
 800f892:	4638      	mov	r0, r7
 800f894:	47c0      	blx	r8
 800f896:	4306      	orrs	r6, r0
 800f898:	3568      	adds	r5, #104	@ 0x68
 800f89a:	e7e9      	b.n	800f870 <_fwalk_sglue+0x10>

0800f89c <siprintf>:
 800f89c:	b40e      	push	{r1, r2, r3}
 800f89e:	b500      	push	{lr}
 800f8a0:	b09c      	sub	sp, #112	@ 0x70
 800f8a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800f8a4:	9002      	str	r0, [sp, #8]
 800f8a6:	9006      	str	r0, [sp, #24]
 800f8a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f8ac:	4809      	ldr	r0, [pc, #36]	@ (800f8d4 <siprintf+0x38>)
 800f8ae:	9107      	str	r1, [sp, #28]
 800f8b0:	9104      	str	r1, [sp, #16]
 800f8b2:	4909      	ldr	r1, [pc, #36]	@ (800f8d8 <siprintf+0x3c>)
 800f8b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b8:	9105      	str	r1, [sp, #20]
 800f8ba:	6800      	ldr	r0, [r0, #0]
 800f8bc:	9301      	str	r3, [sp, #4]
 800f8be:	a902      	add	r1, sp, #8
 800f8c0:	f001 fae0 	bl	8010e84 <_svfiprintf_r>
 800f8c4:	9b02      	ldr	r3, [sp, #8]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	701a      	strb	r2, [r3, #0]
 800f8ca:	b01c      	add	sp, #112	@ 0x70
 800f8cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8d0:	b003      	add	sp, #12
 800f8d2:	4770      	bx	lr
 800f8d4:	24000110 	.word	0x24000110
 800f8d8:	ffff0208 	.word	0xffff0208

0800f8dc <__sread>:
 800f8dc:	b510      	push	{r4, lr}
 800f8de:	460c      	mov	r4, r1
 800f8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8e4:	f000 f86c 	bl	800f9c0 <_read_r>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	bfab      	itete	ge
 800f8ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f8ee:	89a3      	ldrhlt	r3, [r4, #12]
 800f8f0:	181b      	addge	r3, r3, r0
 800f8f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f8f6:	bfac      	ite	ge
 800f8f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f8fa:	81a3      	strhlt	r3, [r4, #12]
 800f8fc:	bd10      	pop	{r4, pc}

0800f8fe <__swrite>:
 800f8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f902:	461f      	mov	r7, r3
 800f904:	898b      	ldrh	r3, [r1, #12]
 800f906:	05db      	lsls	r3, r3, #23
 800f908:	4605      	mov	r5, r0
 800f90a:	460c      	mov	r4, r1
 800f90c:	4616      	mov	r6, r2
 800f90e:	d505      	bpl.n	800f91c <__swrite+0x1e>
 800f910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f914:	2302      	movs	r3, #2
 800f916:	2200      	movs	r2, #0
 800f918:	f000 f840 	bl	800f99c <_lseek_r>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f926:	81a3      	strh	r3, [r4, #12]
 800f928:	4632      	mov	r2, r6
 800f92a:	463b      	mov	r3, r7
 800f92c:	4628      	mov	r0, r5
 800f92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f932:	f000 b867 	b.w	800fa04 <_write_r>

0800f936 <__sseek>:
 800f936:	b510      	push	{r4, lr}
 800f938:	460c      	mov	r4, r1
 800f93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f93e:	f000 f82d 	bl	800f99c <_lseek_r>
 800f942:	1c43      	adds	r3, r0, #1
 800f944:	89a3      	ldrh	r3, [r4, #12]
 800f946:	bf15      	itete	ne
 800f948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f94a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f94e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f952:	81a3      	strheq	r3, [r4, #12]
 800f954:	bf18      	it	ne
 800f956:	81a3      	strhne	r3, [r4, #12]
 800f958:	bd10      	pop	{r4, pc}

0800f95a <__sclose>:
 800f95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f95e:	f000 b80d 	b.w	800f97c <_close_r>

0800f962 <memset>:
 800f962:	4402      	add	r2, r0
 800f964:	4603      	mov	r3, r0
 800f966:	4293      	cmp	r3, r2
 800f968:	d100      	bne.n	800f96c <memset+0xa>
 800f96a:	4770      	bx	lr
 800f96c:	f803 1b01 	strb.w	r1, [r3], #1
 800f970:	e7f9      	b.n	800f966 <memset+0x4>
	...

0800f974 <_localeconv_r>:
 800f974:	4800      	ldr	r0, [pc, #0]	@ (800f978 <_localeconv_r+0x4>)
 800f976:	4770      	bx	lr
 800f978:	24000250 	.word	0x24000250

0800f97c <_close_r>:
 800f97c:	b538      	push	{r3, r4, r5, lr}
 800f97e:	4d06      	ldr	r5, [pc, #24]	@ (800f998 <_close_r+0x1c>)
 800f980:	2300      	movs	r3, #0
 800f982:	4604      	mov	r4, r0
 800f984:	4608      	mov	r0, r1
 800f986:	602b      	str	r3, [r5, #0]
 800f988:	f7fd f992 	bl	800ccb0 <_close>
 800f98c:	1c43      	adds	r3, r0, #1
 800f98e:	d102      	bne.n	800f996 <_close_r+0x1a>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	b103      	cbz	r3, 800f996 <_close_r+0x1a>
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	bd38      	pop	{r3, r4, r5, pc}
 800f998:	24002844 	.word	0x24002844

0800f99c <_lseek_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4d07      	ldr	r5, [pc, #28]	@ (800f9bc <_lseek_r+0x20>)
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	4608      	mov	r0, r1
 800f9a4:	4611      	mov	r1, r2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	602a      	str	r2, [r5, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f7fd f987 	bl	800ccbe <_lseek>
 800f9b0:	1c43      	adds	r3, r0, #1
 800f9b2:	d102      	bne.n	800f9ba <_lseek_r+0x1e>
 800f9b4:	682b      	ldr	r3, [r5, #0]
 800f9b6:	b103      	cbz	r3, 800f9ba <_lseek_r+0x1e>
 800f9b8:	6023      	str	r3, [r4, #0]
 800f9ba:	bd38      	pop	{r3, r4, r5, pc}
 800f9bc:	24002844 	.word	0x24002844

0800f9c0 <_read_r>:
 800f9c0:	b538      	push	{r3, r4, r5, lr}
 800f9c2:	4d07      	ldr	r5, [pc, #28]	@ (800f9e0 <_read_r+0x20>)
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	4608      	mov	r0, r1
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	602a      	str	r2, [r5, #0]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	f7fd f97c 	bl	800cccc <_read>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	d102      	bne.n	800f9de <_read_r+0x1e>
 800f9d8:	682b      	ldr	r3, [r5, #0]
 800f9da:	b103      	cbz	r3, 800f9de <_read_r+0x1e>
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	bd38      	pop	{r3, r4, r5, pc}
 800f9e0:	24002844 	.word	0x24002844

0800f9e4 <_sbrk_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d06      	ldr	r5, [pc, #24]	@ (800fa00 <_sbrk_r+0x1c>)
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	602b      	str	r3, [r5, #0]
 800f9f0:	f002 f8b0 	bl	8011b54 <_sbrk>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_sbrk_r+0x1a>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_sbrk_r+0x1a>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	24002844 	.word	0x24002844

0800fa04 <_write_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d07      	ldr	r5, [pc, #28]	@ (800fa24 <_write_r+0x20>)
 800fa08:	4604      	mov	r4, r0
 800fa0a:	4608      	mov	r0, r1
 800fa0c:	4611      	mov	r1, r2
 800fa0e:	2200      	movs	r2, #0
 800fa10:	602a      	str	r2, [r5, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	f7fd f961 	bl	800ccda <_write>
 800fa18:	1c43      	adds	r3, r0, #1
 800fa1a:	d102      	bne.n	800fa22 <_write_r+0x1e>
 800fa1c:	682b      	ldr	r3, [r5, #0]
 800fa1e:	b103      	cbz	r3, 800fa22 <_write_r+0x1e>
 800fa20:	6023      	str	r3, [r4, #0]
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	24002844 	.word	0x24002844

0800fa28 <__libc_init_array>:
 800fa28:	b570      	push	{r4, r5, r6, lr}
 800fa2a:	4d0d      	ldr	r5, [pc, #52]	@ (800fa60 <__libc_init_array+0x38>)
 800fa2c:	4c0d      	ldr	r4, [pc, #52]	@ (800fa64 <__libc_init_array+0x3c>)
 800fa2e:	1b64      	subs	r4, r4, r5
 800fa30:	10a4      	asrs	r4, r4, #2
 800fa32:	2600      	movs	r6, #0
 800fa34:	42a6      	cmp	r6, r4
 800fa36:	d109      	bne.n	800fa4c <__libc_init_array+0x24>
 800fa38:	4d0b      	ldr	r5, [pc, #44]	@ (800fa68 <__libc_init_array+0x40>)
 800fa3a:	4c0c      	ldr	r4, [pc, #48]	@ (800fa6c <__libc_init_array+0x44>)
 800fa3c:	f002 f89a 	bl	8011b74 <_init>
 800fa40:	1b64      	subs	r4, r4, r5
 800fa42:	10a4      	asrs	r4, r4, #2
 800fa44:	2600      	movs	r6, #0
 800fa46:	42a6      	cmp	r6, r4
 800fa48:	d105      	bne.n	800fa56 <__libc_init_array+0x2e>
 800fa4a:	bd70      	pop	{r4, r5, r6, pc}
 800fa4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa50:	4798      	blx	r3
 800fa52:	3601      	adds	r6, #1
 800fa54:	e7ee      	b.n	800fa34 <__libc_init_array+0xc>
 800fa56:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa5a:	4798      	blx	r3
 800fa5c:	3601      	adds	r6, #1
 800fa5e:	e7f2      	b.n	800fa46 <__libc_init_array+0x1e>
 800fa60:	08013fc0 	.word	0x08013fc0
 800fa64:	08013fc0 	.word	0x08013fc0
 800fa68:	08013fc0 	.word	0x08013fc0
 800fa6c:	08013fc4 	.word	0x08013fc4

0800fa70 <__retarget_lock_init_recursive>:
 800fa70:	4770      	bx	lr

0800fa72 <__retarget_lock_acquire_recursive>:
 800fa72:	4770      	bx	lr

0800fa74 <__retarget_lock_release_recursive>:
 800fa74:	4770      	bx	lr

0800fa76 <quorem>:
 800fa76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7a:	6903      	ldr	r3, [r0, #16]
 800fa7c:	690c      	ldr	r4, [r1, #16]
 800fa7e:	42a3      	cmp	r3, r4
 800fa80:	4607      	mov	r7, r0
 800fa82:	db7e      	blt.n	800fb82 <quorem+0x10c>
 800fa84:	3c01      	subs	r4, #1
 800fa86:	f101 0814 	add.w	r8, r1, #20
 800fa8a:	00a3      	lsls	r3, r4, #2
 800fa8c:	f100 0514 	add.w	r5, r0, #20
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa96:	9301      	str	r3, [sp, #4]
 800fa98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faa0:	3301      	adds	r3, #1
 800faa2:	429a      	cmp	r2, r3
 800faa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800faa8:	fbb2 f6f3 	udiv	r6, r2, r3
 800faac:	d32e      	bcc.n	800fb0c <quorem+0x96>
 800faae:	f04f 0a00 	mov.w	sl, #0
 800fab2:	46c4      	mov	ip, r8
 800fab4:	46ae      	mov	lr, r5
 800fab6:	46d3      	mov	fp, sl
 800fab8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fabc:	b298      	uxth	r0, r3
 800fabe:	fb06 a000 	mla	r0, r6, r0, sl
 800fac2:	0c02      	lsrs	r2, r0, #16
 800fac4:	0c1b      	lsrs	r3, r3, #16
 800fac6:	fb06 2303 	mla	r3, r6, r3, r2
 800faca:	f8de 2000 	ldr.w	r2, [lr]
 800face:	b280      	uxth	r0, r0
 800fad0:	b292      	uxth	r2, r2
 800fad2:	1a12      	subs	r2, r2, r0
 800fad4:	445a      	add	r2, fp
 800fad6:	f8de 0000 	ldr.w	r0, [lr]
 800fada:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fade:	b29b      	uxth	r3, r3
 800fae0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fae4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fae8:	b292      	uxth	r2, r2
 800faea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800faee:	45e1      	cmp	r9, ip
 800faf0:	f84e 2b04 	str.w	r2, [lr], #4
 800faf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800faf8:	d2de      	bcs.n	800fab8 <quorem+0x42>
 800fafa:	9b00      	ldr	r3, [sp, #0]
 800fafc:	58eb      	ldr	r3, [r5, r3]
 800fafe:	b92b      	cbnz	r3, 800fb0c <quorem+0x96>
 800fb00:	9b01      	ldr	r3, [sp, #4]
 800fb02:	3b04      	subs	r3, #4
 800fb04:	429d      	cmp	r5, r3
 800fb06:	461a      	mov	r2, r3
 800fb08:	d32f      	bcc.n	800fb6a <quorem+0xf4>
 800fb0a:	613c      	str	r4, [r7, #16]
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	f001 f855 	bl	8010bbc <__mcmp>
 800fb12:	2800      	cmp	r0, #0
 800fb14:	db25      	blt.n	800fb62 <quorem+0xec>
 800fb16:	4629      	mov	r1, r5
 800fb18:	2000      	movs	r0, #0
 800fb1a:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb1e:	f8d1 c000 	ldr.w	ip, [r1]
 800fb22:	fa1f fe82 	uxth.w	lr, r2
 800fb26:	fa1f f38c 	uxth.w	r3, ip
 800fb2a:	eba3 030e 	sub.w	r3, r3, lr
 800fb2e:	4403      	add	r3, r0
 800fb30:	0c12      	lsrs	r2, r2, #16
 800fb32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fb36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb40:	45c1      	cmp	r9, r8
 800fb42:	f841 3b04 	str.w	r3, [r1], #4
 800fb46:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fb4a:	d2e6      	bcs.n	800fb1a <quorem+0xa4>
 800fb4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb54:	b922      	cbnz	r2, 800fb60 <quorem+0xea>
 800fb56:	3b04      	subs	r3, #4
 800fb58:	429d      	cmp	r5, r3
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	d30b      	bcc.n	800fb76 <quorem+0x100>
 800fb5e:	613c      	str	r4, [r7, #16]
 800fb60:	3601      	adds	r6, #1
 800fb62:	4630      	mov	r0, r6
 800fb64:	b003      	add	sp, #12
 800fb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6a:	6812      	ldr	r2, [r2, #0]
 800fb6c:	3b04      	subs	r3, #4
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	d1cb      	bne.n	800fb0a <quorem+0x94>
 800fb72:	3c01      	subs	r4, #1
 800fb74:	e7c6      	b.n	800fb04 <quorem+0x8e>
 800fb76:	6812      	ldr	r2, [r2, #0]
 800fb78:	3b04      	subs	r3, #4
 800fb7a:	2a00      	cmp	r2, #0
 800fb7c:	d1ef      	bne.n	800fb5e <quorem+0xe8>
 800fb7e:	3c01      	subs	r4, #1
 800fb80:	e7ea      	b.n	800fb58 <quorem+0xe2>
 800fb82:	2000      	movs	r0, #0
 800fb84:	e7ee      	b.n	800fb64 <quorem+0xee>
	...

0800fb88 <_dtoa_r>:
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	ed2d 8b02 	vpush	{d8}
 800fb90:	69c7      	ldr	r7, [r0, #28]
 800fb92:	b091      	sub	sp, #68	@ 0x44
 800fb94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb98:	ec55 4b10 	vmov	r4, r5, d0
 800fb9c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fb9e:	9107      	str	r1, [sp, #28]
 800fba0:	4681      	mov	r9, r0
 800fba2:	9209      	str	r2, [sp, #36]	@ 0x24
 800fba4:	930d      	str	r3, [sp, #52]	@ 0x34
 800fba6:	b97f      	cbnz	r7, 800fbc8 <_dtoa_r+0x40>
 800fba8:	2010      	movs	r0, #16
 800fbaa:	f7ff f8c7 	bl	800ed3c <malloc>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	f8c9 001c 	str.w	r0, [r9, #28]
 800fbb4:	b920      	cbnz	r0, 800fbc0 <_dtoa_r+0x38>
 800fbb6:	4ba0      	ldr	r3, [pc, #640]	@ (800fe38 <_dtoa_r+0x2b0>)
 800fbb8:	21ef      	movs	r1, #239	@ 0xef
 800fbba:	48a0      	ldr	r0, [pc, #640]	@ (800fe3c <_dtoa_r+0x2b4>)
 800fbbc:	f001 fb32 	bl	8011224 <__assert_func>
 800fbc0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fbc4:	6007      	str	r7, [r0, #0]
 800fbc6:	60c7      	str	r7, [r0, #12]
 800fbc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fbcc:	6819      	ldr	r1, [r3, #0]
 800fbce:	b159      	cbz	r1, 800fbe8 <_dtoa_r+0x60>
 800fbd0:	685a      	ldr	r2, [r3, #4]
 800fbd2:	604a      	str	r2, [r1, #4]
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	4093      	lsls	r3, r2
 800fbd8:	608b      	str	r3, [r1, #8]
 800fbda:	4648      	mov	r0, r9
 800fbdc:	f000 fdb4 	bl	8010748 <_Bfree>
 800fbe0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	601a      	str	r2, [r3, #0]
 800fbe8:	1e2b      	subs	r3, r5, #0
 800fbea:	bfbb      	ittet	lt
 800fbec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fbf0:	9303      	strlt	r3, [sp, #12]
 800fbf2:	2300      	movge	r3, #0
 800fbf4:	2201      	movlt	r2, #1
 800fbf6:	bfac      	ite	ge
 800fbf8:	6033      	strge	r3, [r6, #0]
 800fbfa:	6032      	strlt	r2, [r6, #0]
 800fbfc:	4b90      	ldr	r3, [pc, #576]	@ (800fe40 <_dtoa_r+0x2b8>)
 800fbfe:	9e03      	ldr	r6, [sp, #12]
 800fc00:	43b3      	bics	r3, r6
 800fc02:	d110      	bne.n	800fc26 <_dtoa_r+0x9e>
 800fc04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc06:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc0a:	6013      	str	r3, [r2, #0]
 800fc0c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fc10:	4323      	orrs	r3, r4
 800fc12:	f000 84de 	beq.w	80105d2 <_dtoa_r+0xa4a>
 800fc16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc18:	4f8a      	ldr	r7, [pc, #552]	@ (800fe44 <_dtoa_r+0x2bc>)
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f000 84e0 	beq.w	80105e0 <_dtoa_r+0xa58>
 800fc20:	1cfb      	adds	r3, r7, #3
 800fc22:	f000 bcdb 	b.w	80105dc <_dtoa_r+0xa54>
 800fc26:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fc2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc32:	d10a      	bne.n	800fc4a <_dtoa_r+0xc2>
 800fc34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc36:	2301      	movs	r3, #1
 800fc38:	6013      	str	r3, [r2, #0]
 800fc3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc3c:	b113      	cbz	r3, 800fc44 <_dtoa_r+0xbc>
 800fc3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fc40:	4b81      	ldr	r3, [pc, #516]	@ (800fe48 <_dtoa_r+0x2c0>)
 800fc42:	6013      	str	r3, [r2, #0]
 800fc44:	4f81      	ldr	r7, [pc, #516]	@ (800fe4c <_dtoa_r+0x2c4>)
 800fc46:	f000 bccb 	b.w	80105e0 <_dtoa_r+0xa58>
 800fc4a:	aa0e      	add	r2, sp, #56	@ 0x38
 800fc4c:	a90f      	add	r1, sp, #60	@ 0x3c
 800fc4e:	4648      	mov	r0, r9
 800fc50:	eeb0 0b48 	vmov.f64	d0, d8
 800fc54:	f001 f862 	bl	8010d1c <__d2b>
 800fc58:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fc5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc5e:	9001      	str	r0, [sp, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d045      	beq.n	800fcf0 <_dtoa_r+0x168>
 800fc64:	eeb0 7b48 	vmov.f64	d7, d8
 800fc68:	ee18 1a90 	vmov	r1, s17
 800fc6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fc70:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fc74:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fc78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fc7c:	2500      	movs	r5, #0
 800fc7e:	ee07 1a90 	vmov	s15, r1
 800fc82:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fc86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fe20 <_dtoa_r+0x298>
 800fc8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc8e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fe28 <_dtoa_r+0x2a0>
 800fc92:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fc96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fe30 <_dtoa_r+0x2a8>
 800fc9a:	ee07 3a90 	vmov	s15, r3
 800fc9e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fca2:	eeb0 7b46 	vmov.f64	d7, d6
 800fca6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fcaa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fcae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb6:	ee16 8a90 	vmov	r8, s13
 800fcba:	d508      	bpl.n	800fcce <_dtoa_r+0x146>
 800fcbc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fcc0:	eeb4 6b47 	vcmp.f64	d6, d7
 800fcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc8:	bf18      	it	ne
 800fcca:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fcce:	f1b8 0f16 	cmp.w	r8, #22
 800fcd2:	d82b      	bhi.n	800fd2c <_dtoa_r+0x1a4>
 800fcd4:	495e      	ldr	r1, [pc, #376]	@ (800fe50 <_dtoa_r+0x2c8>)
 800fcd6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fcda:	ed91 7b00 	vldr	d7, [r1]
 800fcde:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce6:	d501      	bpl.n	800fcec <_dtoa_r+0x164>
 800fce8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fcec:	2100      	movs	r1, #0
 800fcee:	e01e      	b.n	800fd2e <_dtoa_r+0x1a6>
 800fcf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcf2:	4413      	add	r3, r2
 800fcf4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fcf8:	2920      	cmp	r1, #32
 800fcfa:	bfc1      	itttt	gt
 800fcfc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fd00:	408e      	lslgt	r6, r1
 800fd02:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fd06:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fd0a:	bfd6      	itet	le
 800fd0c:	f1c1 0120 	rsble	r1, r1, #32
 800fd10:	4331      	orrgt	r1, r6
 800fd12:	fa04 f101 	lslle.w	r1, r4, r1
 800fd16:	ee07 1a90 	vmov	s15, r1
 800fd1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	ee17 1a90 	vmov	r1, s15
 800fd24:	2501      	movs	r5, #1
 800fd26:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fd2a:	e7a8      	b.n	800fc7e <_dtoa_r+0xf6>
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	1ad2      	subs	r2, r2, r3
 800fd30:	1e53      	subs	r3, r2, #1
 800fd32:	9306      	str	r3, [sp, #24]
 800fd34:	bf45      	ittet	mi
 800fd36:	f1c2 0301 	rsbmi	r3, r2, #1
 800fd3a:	9305      	strmi	r3, [sp, #20]
 800fd3c:	2300      	movpl	r3, #0
 800fd3e:	2300      	movmi	r3, #0
 800fd40:	bf4c      	ite	mi
 800fd42:	9306      	strmi	r3, [sp, #24]
 800fd44:	9305      	strpl	r3, [sp, #20]
 800fd46:	f1b8 0f00 	cmp.w	r8, #0
 800fd4a:	910c      	str	r1, [sp, #48]	@ 0x30
 800fd4c:	db18      	blt.n	800fd80 <_dtoa_r+0x1f8>
 800fd4e:	9b06      	ldr	r3, [sp, #24]
 800fd50:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fd54:	4443      	add	r3, r8
 800fd56:	9306      	str	r3, [sp, #24]
 800fd58:	2300      	movs	r3, #0
 800fd5a:	9a07      	ldr	r2, [sp, #28]
 800fd5c:	2a09      	cmp	r2, #9
 800fd5e:	d849      	bhi.n	800fdf4 <_dtoa_r+0x26c>
 800fd60:	2a05      	cmp	r2, #5
 800fd62:	bfc4      	itt	gt
 800fd64:	3a04      	subgt	r2, #4
 800fd66:	9207      	strgt	r2, [sp, #28]
 800fd68:	9a07      	ldr	r2, [sp, #28]
 800fd6a:	f1a2 0202 	sub.w	r2, r2, #2
 800fd6e:	bfcc      	ite	gt
 800fd70:	2400      	movgt	r4, #0
 800fd72:	2401      	movle	r4, #1
 800fd74:	2a03      	cmp	r2, #3
 800fd76:	d848      	bhi.n	800fe0a <_dtoa_r+0x282>
 800fd78:	e8df f002 	tbb	[pc, r2]
 800fd7c:	3a2c2e0b 	.word	0x3a2c2e0b
 800fd80:	9b05      	ldr	r3, [sp, #20]
 800fd82:	2200      	movs	r2, #0
 800fd84:	eba3 0308 	sub.w	r3, r3, r8
 800fd88:	9305      	str	r3, [sp, #20]
 800fd8a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fd8c:	f1c8 0300 	rsb	r3, r8, #0
 800fd90:	e7e3      	b.n	800fd5a <_dtoa_r+0x1d2>
 800fd92:	2200      	movs	r2, #0
 800fd94:	9208      	str	r2, [sp, #32]
 800fd96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd98:	2a00      	cmp	r2, #0
 800fd9a:	dc39      	bgt.n	800fe10 <_dtoa_r+0x288>
 800fd9c:	f04f 0b01 	mov.w	fp, #1
 800fda0:	46da      	mov	sl, fp
 800fda2:	465a      	mov	r2, fp
 800fda4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fda8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fdac:	2100      	movs	r1, #0
 800fdae:	2004      	movs	r0, #4
 800fdb0:	f100 0614 	add.w	r6, r0, #20
 800fdb4:	4296      	cmp	r6, r2
 800fdb6:	d930      	bls.n	800fe1a <_dtoa_r+0x292>
 800fdb8:	6079      	str	r1, [r7, #4]
 800fdba:	4648      	mov	r0, r9
 800fdbc:	9304      	str	r3, [sp, #16]
 800fdbe:	f000 fc83 	bl	80106c8 <_Balloc>
 800fdc2:	9b04      	ldr	r3, [sp, #16]
 800fdc4:	4607      	mov	r7, r0
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d146      	bne.n	800fe58 <_dtoa_r+0x2d0>
 800fdca:	4b22      	ldr	r3, [pc, #136]	@ (800fe54 <_dtoa_r+0x2cc>)
 800fdcc:	4602      	mov	r2, r0
 800fdce:	f240 11af 	movw	r1, #431	@ 0x1af
 800fdd2:	e6f2      	b.n	800fbba <_dtoa_r+0x32>
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	e7dd      	b.n	800fd94 <_dtoa_r+0x20c>
 800fdd8:	2200      	movs	r2, #0
 800fdda:	9208      	str	r2, [sp, #32]
 800fddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdde:	eb08 0b02 	add.w	fp, r8, r2
 800fde2:	f10b 0a01 	add.w	sl, fp, #1
 800fde6:	4652      	mov	r2, sl
 800fde8:	2a01      	cmp	r2, #1
 800fdea:	bfb8      	it	lt
 800fdec:	2201      	movlt	r2, #1
 800fdee:	e7db      	b.n	800fda8 <_dtoa_r+0x220>
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	e7f2      	b.n	800fdda <_dtoa_r+0x252>
 800fdf4:	2401      	movs	r4, #1
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fdfc:	f04f 3bff 	mov.w	fp, #4294967295
 800fe00:	2100      	movs	r1, #0
 800fe02:	46da      	mov	sl, fp
 800fe04:	2212      	movs	r2, #18
 800fe06:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe08:	e7ce      	b.n	800fda8 <_dtoa_r+0x220>
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	9208      	str	r2, [sp, #32]
 800fe0e:	e7f5      	b.n	800fdfc <_dtoa_r+0x274>
 800fe10:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fe14:	46da      	mov	sl, fp
 800fe16:	465a      	mov	r2, fp
 800fe18:	e7c6      	b.n	800fda8 <_dtoa_r+0x220>
 800fe1a:	3101      	adds	r1, #1
 800fe1c:	0040      	lsls	r0, r0, #1
 800fe1e:	e7c7      	b.n	800fdb0 <_dtoa_r+0x228>
 800fe20:	636f4361 	.word	0x636f4361
 800fe24:	3fd287a7 	.word	0x3fd287a7
 800fe28:	8b60c8b3 	.word	0x8b60c8b3
 800fe2c:	3fc68a28 	.word	0x3fc68a28
 800fe30:	509f79fb 	.word	0x509f79fb
 800fe34:	3fd34413 	.word	0x3fd34413
 800fe38:	08013c75 	.word	0x08013c75
 800fe3c:	08013c8c 	.word	0x08013c8c
 800fe40:	7ff00000 	.word	0x7ff00000
 800fe44:	08013c71 	.word	0x08013c71
 800fe48:	08013c45 	.word	0x08013c45
 800fe4c:	08013c44 	.word	0x08013c44
 800fe50:	08013d88 	.word	0x08013d88
 800fe54:	08013ce4 	.word	0x08013ce4
 800fe58:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fe5c:	f1ba 0f0e 	cmp.w	sl, #14
 800fe60:	6010      	str	r0, [r2, #0]
 800fe62:	d86f      	bhi.n	800ff44 <_dtoa_r+0x3bc>
 800fe64:	2c00      	cmp	r4, #0
 800fe66:	d06d      	beq.n	800ff44 <_dtoa_r+0x3bc>
 800fe68:	f1b8 0f00 	cmp.w	r8, #0
 800fe6c:	f340 80c2 	ble.w	800fff4 <_dtoa_r+0x46c>
 800fe70:	4aca      	ldr	r2, [pc, #808]	@ (801019c <_dtoa_r+0x614>)
 800fe72:	f008 010f 	and.w	r1, r8, #15
 800fe76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fe7a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fe7e:	ed92 7b00 	vldr	d7, [r2]
 800fe82:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fe86:	f000 80a9 	beq.w	800ffdc <_dtoa_r+0x454>
 800fe8a:	4ac5      	ldr	r2, [pc, #788]	@ (80101a0 <_dtoa_r+0x618>)
 800fe8c:	ed92 6b08 	vldr	d6, [r2, #32]
 800fe90:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fe94:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fe98:	f001 010f 	and.w	r1, r1, #15
 800fe9c:	2203      	movs	r2, #3
 800fe9e:	48c0      	ldr	r0, [pc, #768]	@ (80101a0 <_dtoa_r+0x618>)
 800fea0:	2900      	cmp	r1, #0
 800fea2:	f040 809d 	bne.w	800ffe0 <_dtoa_r+0x458>
 800fea6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800feaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800feae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800feb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800feb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800feb8:	2900      	cmp	r1, #0
 800feba:	f000 80c1 	beq.w	8010040 <_dtoa_r+0x4b8>
 800febe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fec2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feca:	f140 80b9 	bpl.w	8010040 <_dtoa_r+0x4b8>
 800fece:	f1ba 0f00 	cmp.w	sl, #0
 800fed2:	f000 80b5 	beq.w	8010040 <_dtoa_r+0x4b8>
 800fed6:	f1bb 0f00 	cmp.w	fp, #0
 800feda:	dd31      	ble.n	800ff40 <_dtoa_r+0x3b8>
 800fedc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fee8:	f108 31ff 	add.w	r1, r8, #4294967295
 800feec:	9104      	str	r1, [sp, #16]
 800feee:	3201      	adds	r2, #1
 800fef0:	465c      	mov	r4, fp
 800fef2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fef6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800fefa:	ee07 2a90 	vmov	s15, r2
 800fefe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ff02:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ff06:	ee15 2a90 	vmov	r2, s11
 800ff0a:	ec51 0b15 	vmov	r0, r1, d5
 800ff0e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ff12:	2c00      	cmp	r4, #0
 800ff14:	f040 8098 	bne.w	8010048 <_dtoa_r+0x4c0>
 800ff18:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff20:	ec41 0b17 	vmov	d7, r0, r1
 800ff24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff2c:	f300 8261 	bgt.w	80103f2 <_dtoa_r+0x86a>
 800ff30:	eeb1 7b47 	vneg.f64	d7, d7
 800ff34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff3c:	f100 80f5 	bmi.w	801012a <_dtoa_r+0x5a2>
 800ff40:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ff44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ff46:	2a00      	cmp	r2, #0
 800ff48:	f2c0 812c 	blt.w	80101a4 <_dtoa_r+0x61c>
 800ff4c:	f1b8 0f0e 	cmp.w	r8, #14
 800ff50:	f300 8128 	bgt.w	80101a4 <_dtoa_r+0x61c>
 800ff54:	4b91      	ldr	r3, [pc, #580]	@ (801019c <_dtoa_r+0x614>)
 800ff56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ff5a:	ed93 6b00 	vldr	d6, [r3]
 800ff5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	da03      	bge.n	800ff6c <_dtoa_r+0x3e4>
 800ff64:	f1ba 0f00 	cmp.w	sl, #0
 800ff68:	f340 80d2 	ble.w	8010110 <_dtoa_r+0x588>
 800ff6c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ff70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff74:	463e      	mov	r6, r7
 800ff76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ff7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ff7e:	ee15 3a10 	vmov	r3, s10
 800ff82:	3330      	adds	r3, #48	@ 0x30
 800ff84:	f806 3b01 	strb.w	r3, [r6], #1
 800ff88:	1bf3      	subs	r3, r6, r7
 800ff8a:	459a      	cmp	sl, r3
 800ff8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ff90:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ff94:	f040 80f8 	bne.w	8010188 <_dtoa_r+0x600>
 800ff98:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ff9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ffa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa4:	f300 80dd 	bgt.w	8010162 <_dtoa_r+0x5da>
 800ffa8:	eeb4 7b46 	vcmp.f64	d7, d6
 800ffac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb0:	d104      	bne.n	800ffbc <_dtoa_r+0x434>
 800ffb2:	ee15 3a10 	vmov	r3, s10
 800ffb6:	07db      	lsls	r3, r3, #31
 800ffb8:	f100 80d3 	bmi.w	8010162 <_dtoa_r+0x5da>
 800ffbc:	9901      	ldr	r1, [sp, #4]
 800ffbe:	4648      	mov	r0, r9
 800ffc0:	f000 fbc2 	bl	8010748 <_Bfree>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ffc8:	7033      	strb	r3, [r6, #0]
 800ffca:	f108 0301 	add.w	r3, r8, #1
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f000 8304 	beq.w	80105e0 <_dtoa_r+0xa58>
 800ffd8:	601e      	str	r6, [r3, #0]
 800ffda:	e301      	b.n	80105e0 <_dtoa_r+0xa58>
 800ffdc:	2202      	movs	r2, #2
 800ffde:	e75e      	b.n	800fe9e <_dtoa_r+0x316>
 800ffe0:	07cc      	lsls	r4, r1, #31
 800ffe2:	d504      	bpl.n	800ffee <_dtoa_r+0x466>
 800ffe4:	ed90 6b00 	vldr	d6, [r0]
 800ffe8:	3201      	adds	r2, #1
 800ffea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ffee:	1049      	asrs	r1, r1, #1
 800fff0:	3008      	adds	r0, #8
 800fff2:	e755      	b.n	800fea0 <_dtoa_r+0x318>
 800fff4:	d022      	beq.n	801003c <_dtoa_r+0x4b4>
 800fff6:	f1c8 0100 	rsb	r1, r8, #0
 800fffa:	4a68      	ldr	r2, [pc, #416]	@ (801019c <_dtoa_r+0x614>)
 800fffc:	f001 000f 	and.w	r0, r1, #15
 8010000:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010004:	ed92 7b00 	vldr	d7, [r2]
 8010008:	ee28 7b07 	vmul.f64	d7, d8, d7
 801000c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010010:	4863      	ldr	r0, [pc, #396]	@ (80101a0 <_dtoa_r+0x618>)
 8010012:	1109      	asrs	r1, r1, #4
 8010014:	2400      	movs	r4, #0
 8010016:	2202      	movs	r2, #2
 8010018:	b929      	cbnz	r1, 8010026 <_dtoa_r+0x49e>
 801001a:	2c00      	cmp	r4, #0
 801001c:	f43f af49 	beq.w	800feb2 <_dtoa_r+0x32a>
 8010020:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010024:	e745      	b.n	800feb2 <_dtoa_r+0x32a>
 8010026:	07ce      	lsls	r6, r1, #31
 8010028:	d505      	bpl.n	8010036 <_dtoa_r+0x4ae>
 801002a:	ed90 6b00 	vldr	d6, [r0]
 801002e:	3201      	adds	r2, #1
 8010030:	2401      	movs	r4, #1
 8010032:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010036:	1049      	asrs	r1, r1, #1
 8010038:	3008      	adds	r0, #8
 801003a:	e7ed      	b.n	8010018 <_dtoa_r+0x490>
 801003c:	2202      	movs	r2, #2
 801003e:	e738      	b.n	800feb2 <_dtoa_r+0x32a>
 8010040:	f8cd 8010 	str.w	r8, [sp, #16]
 8010044:	4654      	mov	r4, sl
 8010046:	e754      	b.n	800fef2 <_dtoa_r+0x36a>
 8010048:	4a54      	ldr	r2, [pc, #336]	@ (801019c <_dtoa_r+0x614>)
 801004a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801004e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010052:	9a08      	ldr	r2, [sp, #32]
 8010054:	ec41 0b17 	vmov	d7, r0, r1
 8010058:	443c      	add	r4, r7
 801005a:	b34a      	cbz	r2, 80100b0 <_dtoa_r+0x528>
 801005c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010060:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010064:	463e      	mov	r6, r7
 8010066:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801006a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801006e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010072:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010076:	ee14 2a90 	vmov	r2, s9
 801007a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801007e:	3230      	adds	r2, #48	@ 0x30
 8010080:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010084:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008c:	f806 2b01 	strb.w	r2, [r6], #1
 8010090:	d438      	bmi.n	8010104 <_dtoa_r+0x57c>
 8010092:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010096:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801009a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801009e:	d462      	bmi.n	8010166 <_dtoa_r+0x5de>
 80100a0:	42a6      	cmp	r6, r4
 80100a2:	f43f af4d 	beq.w	800ff40 <_dtoa_r+0x3b8>
 80100a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80100aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80100ae:	e7e0      	b.n	8010072 <_dtoa_r+0x4ea>
 80100b0:	4621      	mov	r1, r4
 80100b2:	463e      	mov	r6, r7
 80100b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80100b8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80100bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80100c0:	ee14 2a90 	vmov	r2, s9
 80100c4:	3230      	adds	r2, #48	@ 0x30
 80100c6:	f806 2b01 	strb.w	r2, [r6], #1
 80100ca:	42a6      	cmp	r6, r4
 80100cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80100d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80100d4:	d119      	bne.n	801010a <_dtoa_r+0x582>
 80100d6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80100da:	ee37 4b05 	vadd.f64	d4, d7, d5
 80100de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80100e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e6:	dc3e      	bgt.n	8010166 <_dtoa_r+0x5de>
 80100e8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80100ec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80100f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f4:	f57f af24 	bpl.w	800ff40 <_dtoa_r+0x3b8>
 80100f8:	460e      	mov	r6, r1
 80100fa:	3901      	subs	r1, #1
 80100fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010100:	2b30      	cmp	r3, #48	@ 0x30
 8010102:	d0f9      	beq.n	80100f8 <_dtoa_r+0x570>
 8010104:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010108:	e758      	b.n	800ffbc <_dtoa_r+0x434>
 801010a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801010e:	e7d5      	b.n	80100bc <_dtoa_r+0x534>
 8010110:	d10b      	bne.n	801012a <_dtoa_r+0x5a2>
 8010112:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010116:	ee26 6b07 	vmul.f64	d6, d6, d7
 801011a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801011e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010126:	f2c0 8161 	blt.w	80103ec <_dtoa_r+0x864>
 801012a:	2400      	movs	r4, #0
 801012c:	4625      	mov	r5, r4
 801012e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010130:	43db      	mvns	r3, r3
 8010132:	9304      	str	r3, [sp, #16]
 8010134:	463e      	mov	r6, r7
 8010136:	f04f 0800 	mov.w	r8, #0
 801013a:	4621      	mov	r1, r4
 801013c:	4648      	mov	r0, r9
 801013e:	f000 fb03 	bl	8010748 <_Bfree>
 8010142:	2d00      	cmp	r5, #0
 8010144:	d0de      	beq.n	8010104 <_dtoa_r+0x57c>
 8010146:	f1b8 0f00 	cmp.w	r8, #0
 801014a:	d005      	beq.n	8010158 <_dtoa_r+0x5d0>
 801014c:	45a8      	cmp	r8, r5
 801014e:	d003      	beq.n	8010158 <_dtoa_r+0x5d0>
 8010150:	4641      	mov	r1, r8
 8010152:	4648      	mov	r0, r9
 8010154:	f000 faf8 	bl	8010748 <_Bfree>
 8010158:	4629      	mov	r1, r5
 801015a:	4648      	mov	r0, r9
 801015c:	f000 faf4 	bl	8010748 <_Bfree>
 8010160:	e7d0      	b.n	8010104 <_dtoa_r+0x57c>
 8010162:	f8cd 8010 	str.w	r8, [sp, #16]
 8010166:	4633      	mov	r3, r6
 8010168:	461e      	mov	r6, r3
 801016a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801016e:	2a39      	cmp	r2, #57	@ 0x39
 8010170:	d106      	bne.n	8010180 <_dtoa_r+0x5f8>
 8010172:	429f      	cmp	r7, r3
 8010174:	d1f8      	bne.n	8010168 <_dtoa_r+0x5e0>
 8010176:	9a04      	ldr	r2, [sp, #16]
 8010178:	3201      	adds	r2, #1
 801017a:	9204      	str	r2, [sp, #16]
 801017c:	2230      	movs	r2, #48	@ 0x30
 801017e:	703a      	strb	r2, [r7, #0]
 8010180:	781a      	ldrb	r2, [r3, #0]
 8010182:	3201      	adds	r2, #1
 8010184:	701a      	strb	r2, [r3, #0]
 8010186:	e7bd      	b.n	8010104 <_dtoa_r+0x57c>
 8010188:	ee27 7b04 	vmul.f64	d7, d7, d4
 801018c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010194:	f47f aeef 	bne.w	800ff76 <_dtoa_r+0x3ee>
 8010198:	e710      	b.n	800ffbc <_dtoa_r+0x434>
 801019a:	bf00      	nop
 801019c:	08013d88 	.word	0x08013d88
 80101a0:	08013d60 	.word	0x08013d60
 80101a4:	9908      	ldr	r1, [sp, #32]
 80101a6:	2900      	cmp	r1, #0
 80101a8:	f000 80e3 	beq.w	8010372 <_dtoa_r+0x7ea>
 80101ac:	9907      	ldr	r1, [sp, #28]
 80101ae:	2901      	cmp	r1, #1
 80101b0:	f300 80c8 	bgt.w	8010344 <_dtoa_r+0x7bc>
 80101b4:	2d00      	cmp	r5, #0
 80101b6:	f000 80c1 	beq.w	801033c <_dtoa_r+0x7b4>
 80101ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80101be:	9e05      	ldr	r6, [sp, #20]
 80101c0:	461c      	mov	r4, r3
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	9b05      	ldr	r3, [sp, #20]
 80101c6:	4413      	add	r3, r2
 80101c8:	9305      	str	r3, [sp, #20]
 80101ca:	9b06      	ldr	r3, [sp, #24]
 80101cc:	2101      	movs	r1, #1
 80101ce:	4413      	add	r3, r2
 80101d0:	4648      	mov	r0, r9
 80101d2:	9306      	str	r3, [sp, #24]
 80101d4:	f000 fb6c 	bl	80108b0 <__i2b>
 80101d8:	9b04      	ldr	r3, [sp, #16]
 80101da:	4605      	mov	r5, r0
 80101dc:	b166      	cbz	r6, 80101f8 <_dtoa_r+0x670>
 80101de:	9a06      	ldr	r2, [sp, #24]
 80101e0:	2a00      	cmp	r2, #0
 80101e2:	dd09      	ble.n	80101f8 <_dtoa_r+0x670>
 80101e4:	42b2      	cmp	r2, r6
 80101e6:	9905      	ldr	r1, [sp, #20]
 80101e8:	bfa8      	it	ge
 80101ea:	4632      	movge	r2, r6
 80101ec:	1a89      	subs	r1, r1, r2
 80101ee:	9105      	str	r1, [sp, #20]
 80101f0:	9906      	ldr	r1, [sp, #24]
 80101f2:	1ab6      	subs	r6, r6, r2
 80101f4:	1a8a      	subs	r2, r1, r2
 80101f6:	9206      	str	r2, [sp, #24]
 80101f8:	b1fb      	cbz	r3, 801023a <_dtoa_r+0x6b2>
 80101fa:	9a08      	ldr	r2, [sp, #32]
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	f000 80bc 	beq.w	801037a <_dtoa_r+0x7f2>
 8010202:	b19c      	cbz	r4, 801022c <_dtoa_r+0x6a4>
 8010204:	4629      	mov	r1, r5
 8010206:	4622      	mov	r2, r4
 8010208:	4648      	mov	r0, r9
 801020a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801020c:	f000 fc10 	bl	8010a30 <__pow5mult>
 8010210:	9a01      	ldr	r2, [sp, #4]
 8010212:	4601      	mov	r1, r0
 8010214:	4605      	mov	r5, r0
 8010216:	4648      	mov	r0, r9
 8010218:	f000 fb60 	bl	80108dc <__multiply>
 801021c:	9901      	ldr	r1, [sp, #4]
 801021e:	9004      	str	r0, [sp, #16]
 8010220:	4648      	mov	r0, r9
 8010222:	f000 fa91 	bl	8010748 <_Bfree>
 8010226:	9a04      	ldr	r2, [sp, #16]
 8010228:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801022a:	9201      	str	r2, [sp, #4]
 801022c:	1b1a      	subs	r2, r3, r4
 801022e:	d004      	beq.n	801023a <_dtoa_r+0x6b2>
 8010230:	9901      	ldr	r1, [sp, #4]
 8010232:	4648      	mov	r0, r9
 8010234:	f000 fbfc 	bl	8010a30 <__pow5mult>
 8010238:	9001      	str	r0, [sp, #4]
 801023a:	2101      	movs	r1, #1
 801023c:	4648      	mov	r0, r9
 801023e:	f000 fb37 	bl	80108b0 <__i2b>
 8010242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010244:	4604      	mov	r4, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 81d0 	beq.w	80105ec <_dtoa_r+0xa64>
 801024c:	461a      	mov	r2, r3
 801024e:	4601      	mov	r1, r0
 8010250:	4648      	mov	r0, r9
 8010252:	f000 fbed 	bl	8010a30 <__pow5mult>
 8010256:	9b07      	ldr	r3, [sp, #28]
 8010258:	2b01      	cmp	r3, #1
 801025a:	4604      	mov	r4, r0
 801025c:	f300 8095 	bgt.w	801038a <_dtoa_r+0x802>
 8010260:	9b02      	ldr	r3, [sp, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	f040 808b 	bne.w	801037e <_dtoa_r+0x7f6>
 8010268:	9b03      	ldr	r3, [sp, #12]
 801026a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801026e:	2a00      	cmp	r2, #0
 8010270:	f040 8087 	bne.w	8010382 <_dtoa_r+0x7fa>
 8010274:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010278:	0d12      	lsrs	r2, r2, #20
 801027a:	0512      	lsls	r2, r2, #20
 801027c:	2a00      	cmp	r2, #0
 801027e:	f000 8082 	beq.w	8010386 <_dtoa_r+0x7fe>
 8010282:	9b05      	ldr	r3, [sp, #20]
 8010284:	3301      	adds	r3, #1
 8010286:	9305      	str	r3, [sp, #20]
 8010288:	9b06      	ldr	r3, [sp, #24]
 801028a:	3301      	adds	r3, #1
 801028c:	9306      	str	r3, [sp, #24]
 801028e:	2301      	movs	r3, #1
 8010290:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010294:	2b00      	cmp	r3, #0
 8010296:	f000 81af 	beq.w	80105f8 <_dtoa_r+0xa70>
 801029a:	6922      	ldr	r2, [r4, #16]
 801029c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80102a0:	6910      	ldr	r0, [r2, #16]
 80102a2:	f000 fab9 	bl	8010818 <__hi0bits>
 80102a6:	f1c0 0020 	rsb	r0, r0, #32
 80102aa:	9b06      	ldr	r3, [sp, #24]
 80102ac:	4418      	add	r0, r3
 80102ae:	f010 001f 	ands.w	r0, r0, #31
 80102b2:	d076      	beq.n	80103a2 <_dtoa_r+0x81a>
 80102b4:	f1c0 0220 	rsb	r2, r0, #32
 80102b8:	2a04      	cmp	r2, #4
 80102ba:	dd69      	ble.n	8010390 <_dtoa_r+0x808>
 80102bc:	9b05      	ldr	r3, [sp, #20]
 80102be:	f1c0 001c 	rsb	r0, r0, #28
 80102c2:	4403      	add	r3, r0
 80102c4:	9305      	str	r3, [sp, #20]
 80102c6:	9b06      	ldr	r3, [sp, #24]
 80102c8:	4406      	add	r6, r0
 80102ca:	4403      	add	r3, r0
 80102cc:	9306      	str	r3, [sp, #24]
 80102ce:	9b05      	ldr	r3, [sp, #20]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	dd05      	ble.n	80102e0 <_dtoa_r+0x758>
 80102d4:	9901      	ldr	r1, [sp, #4]
 80102d6:	461a      	mov	r2, r3
 80102d8:	4648      	mov	r0, r9
 80102da:	f000 fc03 	bl	8010ae4 <__lshift>
 80102de:	9001      	str	r0, [sp, #4]
 80102e0:	9b06      	ldr	r3, [sp, #24]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	dd05      	ble.n	80102f2 <_dtoa_r+0x76a>
 80102e6:	4621      	mov	r1, r4
 80102e8:	461a      	mov	r2, r3
 80102ea:	4648      	mov	r0, r9
 80102ec:	f000 fbfa 	bl	8010ae4 <__lshift>
 80102f0:	4604      	mov	r4, r0
 80102f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d056      	beq.n	80103a6 <_dtoa_r+0x81e>
 80102f8:	9801      	ldr	r0, [sp, #4]
 80102fa:	4621      	mov	r1, r4
 80102fc:	f000 fc5e 	bl	8010bbc <__mcmp>
 8010300:	2800      	cmp	r0, #0
 8010302:	da50      	bge.n	80103a6 <_dtoa_r+0x81e>
 8010304:	f108 33ff 	add.w	r3, r8, #4294967295
 8010308:	9304      	str	r3, [sp, #16]
 801030a:	9901      	ldr	r1, [sp, #4]
 801030c:	2300      	movs	r3, #0
 801030e:	220a      	movs	r2, #10
 8010310:	4648      	mov	r0, r9
 8010312:	f000 fa3b 	bl	801078c <__multadd>
 8010316:	9b08      	ldr	r3, [sp, #32]
 8010318:	9001      	str	r0, [sp, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 816e 	beq.w	80105fc <_dtoa_r+0xa74>
 8010320:	4629      	mov	r1, r5
 8010322:	2300      	movs	r3, #0
 8010324:	220a      	movs	r2, #10
 8010326:	4648      	mov	r0, r9
 8010328:	f000 fa30 	bl	801078c <__multadd>
 801032c:	f1bb 0f00 	cmp.w	fp, #0
 8010330:	4605      	mov	r5, r0
 8010332:	dc64      	bgt.n	80103fe <_dtoa_r+0x876>
 8010334:	9b07      	ldr	r3, [sp, #28]
 8010336:	2b02      	cmp	r3, #2
 8010338:	dc3e      	bgt.n	80103b8 <_dtoa_r+0x830>
 801033a:	e060      	b.n	80103fe <_dtoa_r+0x876>
 801033c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801033e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010342:	e73c      	b.n	80101be <_dtoa_r+0x636>
 8010344:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010348:	42a3      	cmp	r3, r4
 801034a:	bfbf      	itttt	lt
 801034c:	1ae2      	sublt	r2, r4, r3
 801034e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010350:	189b      	addlt	r3, r3, r2
 8010352:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010354:	bfae      	itee	ge
 8010356:	1b1c      	subge	r4, r3, r4
 8010358:	4623      	movlt	r3, r4
 801035a:	2400      	movlt	r4, #0
 801035c:	f1ba 0f00 	cmp.w	sl, #0
 8010360:	bfb5      	itete	lt
 8010362:	9a05      	ldrlt	r2, [sp, #20]
 8010364:	9e05      	ldrge	r6, [sp, #20]
 8010366:	eba2 060a 	sublt.w	r6, r2, sl
 801036a:	4652      	movge	r2, sl
 801036c:	bfb8      	it	lt
 801036e:	2200      	movlt	r2, #0
 8010370:	e727      	b.n	80101c2 <_dtoa_r+0x63a>
 8010372:	9e05      	ldr	r6, [sp, #20]
 8010374:	9d08      	ldr	r5, [sp, #32]
 8010376:	461c      	mov	r4, r3
 8010378:	e730      	b.n	80101dc <_dtoa_r+0x654>
 801037a:	461a      	mov	r2, r3
 801037c:	e758      	b.n	8010230 <_dtoa_r+0x6a8>
 801037e:	2300      	movs	r3, #0
 8010380:	e786      	b.n	8010290 <_dtoa_r+0x708>
 8010382:	9b02      	ldr	r3, [sp, #8]
 8010384:	e784      	b.n	8010290 <_dtoa_r+0x708>
 8010386:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010388:	e783      	b.n	8010292 <_dtoa_r+0x70a>
 801038a:	2300      	movs	r3, #0
 801038c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801038e:	e784      	b.n	801029a <_dtoa_r+0x712>
 8010390:	d09d      	beq.n	80102ce <_dtoa_r+0x746>
 8010392:	9b05      	ldr	r3, [sp, #20]
 8010394:	321c      	adds	r2, #28
 8010396:	4413      	add	r3, r2
 8010398:	9305      	str	r3, [sp, #20]
 801039a:	9b06      	ldr	r3, [sp, #24]
 801039c:	4416      	add	r6, r2
 801039e:	4413      	add	r3, r2
 80103a0:	e794      	b.n	80102cc <_dtoa_r+0x744>
 80103a2:	4602      	mov	r2, r0
 80103a4:	e7f5      	b.n	8010392 <_dtoa_r+0x80a>
 80103a6:	f1ba 0f00 	cmp.w	sl, #0
 80103aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80103ae:	46d3      	mov	fp, sl
 80103b0:	dc21      	bgt.n	80103f6 <_dtoa_r+0x86e>
 80103b2:	9b07      	ldr	r3, [sp, #28]
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	dd1e      	ble.n	80103f6 <_dtoa_r+0x86e>
 80103b8:	f1bb 0f00 	cmp.w	fp, #0
 80103bc:	f47f aeb7 	bne.w	801012e <_dtoa_r+0x5a6>
 80103c0:	4621      	mov	r1, r4
 80103c2:	465b      	mov	r3, fp
 80103c4:	2205      	movs	r2, #5
 80103c6:	4648      	mov	r0, r9
 80103c8:	f000 f9e0 	bl	801078c <__multadd>
 80103cc:	4601      	mov	r1, r0
 80103ce:	4604      	mov	r4, r0
 80103d0:	9801      	ldr	r0, [sp, #4]
 80103d2:	f000 fbf3 	bl	8010bbc <__mcmp>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	f77f aea9 	ble.w	801012e <_dtoa_r+0x5a6>
 80103dc:	463e      	mov	r6, r7
 80103de:	2331      	movs	r3, #49	@ 0x31
 80103e0:	f806 3b01 	strb.w	r3, [r6], #1
 80103e4:	9b04      	ldr	r3, [sp, #16]
 80103e6:	3301      	adds	r3, #1
 80103e8:	9304      	str	r3, [sp, #16]
 80103ea:	e6a4      	b.n	8010136 <_dtoa_r+0x5ae>
 80103ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80103f0:	4654      	mov	r4, sl
 80103f2:	4625      	mov	r5, r4
 80103f4:	e7f2      	b.n	80103dc <_dtoa_r+0x854>
 80103f6:	9b08      	ldr	r3, [sp, #32]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f000 8103 	beq.w	8010604 <_dtoa_r+0xa7c>
 80103fe:	2e00      	cmp	r6, #0
 8010400:	dd05      	ble.n	801040e <_dtoa_r+0x886>
 8010402:	4629      	mov	r1, r5
 8010404:	4632      	mov	r2, r6
 8010406:	4648      	mov	r0, r9
 8010408:	f000 fb6c 	bl	8010ae4 <__lshift>
 801040c:	4605      	mov	r5, r0
 801040e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010410:	2b00      	cmp	r3, #0
 8010412:	d058      	beq.n	80104c6 <_dtoa_r+0x93e>
 8010414:	6869      	ldr	r1, [r5, #4]
 8010416:	4648      	mov	r0, r9
 8010418:	f000 f956 	bl	80106c8 <_Balloc>
 801041c:	4606      	mov	r6, r0
 801041e:	b928      	cbnz	r0, 801042c <_dtoa_r+0x8a4>
 8010420:	4b82      	ldr	r3, [pc, #520]	@ (801062c <_dtoa_r+0xaa4>)
 8010422:	4602      	mov	r2, r0
 8010424:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010428:	f7ff bbc7 	b.w	800fbba <_dtoa_r+0x32>
 801042c:	692a      	ldr	r2, [r5, #16]
 801042e:	3202      	adds	r2, #2
 8010430:	0092      	lsls	r2, r2, #2
 8010432:	f105 010c 	add.w	r1, r5, #12
 8010436:	300c      	adds	r0, #12
 8010438:	f000 fee6 	bl	8011208 <memcpy>
 801043c:	2201      	movs	r2, #1
 801043e:	4631      	mov	r1, r6
 8010440:	4648      	mov	r0, r9
 8010442:	f000 fb4f 	bl	8010ae4 <__lshift>
 8010446:	1c7b      	adds	r3, r7, #1
 8010448:	9305      	str	r3, [sp, #20]
 801044a:	eb07 030b 	add.w	r3, r7, fp
 801044e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010450:	9b02      	ldr	r3, [sp, #8]
 8010452:	f003 0301 	and.w	r3, r3, #1
 8010456:	46a8      	mov	r8, r5
 8010458:	9308      	str	r3, [sp, #32]
 801045a:	4605      	mov	r5, r0
 801045c:	9b05      	ldr	r3, [sp, #20]
 801045e:	9801      	ldr	r0, [sp, #4]
 8010460:	4621      	mov	r1, r4
 8010462:	f103 3bff 	add.w	fp, r3, #4294967295
 8010466:	f7ff fb06 	bl	800fa76 <quorem>
 801046a:	4641      	mov	r1, r8
 801046c:	9002      	str	r0, [sp, #8]
 801046e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010472:	9801      	ldr	r0, [sp, #4]
 8010474:	f000 fba2 	bl	8010bbc <__mcmp>
 8010478:	462a      	mov	r2, r5
 801047a:	9006      	str	r0, [sp, #24]
 801047c:	4621      	mov	r1, r4
 801047e:	4648      	mov	r0, r9
 8010480:	f000 fbb8 	bl	8010bf4 <__mdiff>
 8010484:	68c2      	ldr	r2, [r0, #12]
 8010486:	4606      	mov	r6, r0
 8010488:	b9fa      	cbnz	r2, 80104ca <_dtoa_r+0x942>
 801048a:	4601      	mov	r1, r0
 801048c:	9801      	ldr	r0, [sp, #4]
 801048e:	f000 fb95 	bl	8010bbc <__mcmp>
 8010492:	4602      	mov	r2, r0
 8010494:	4631      	mov	r1, r6
 8010496:	4648      	mov	r0, r9
 8010498:	920a      	str	r2, [sp, #40]	@ 0x28
 801049a:	f000 f955 	bl	8010748 <_Bfree>
 801049e:	9b07      	ldr	r3, [sp, #28]
 80104a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104a2:	9e05      	ldr	r6, [sp, #20]
 80104a4:	ea43 0102 	orr.w	r1, r3, r2
 80104a8:	9b08      	ldr	r3, [sp, #32]
 80104aa:	4319      	orrs	r1, r3
 80104ac:	d10f      	bne.n	80104ce <_dtoa_r+0x946>
 80104ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80104b2:	d028      	beq.n	8010506 <_dtoa_r+0x97e>
 80104b4:	9b06      	ldr	r3, [sp, #24]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	dd02      	ble.n	80104c0 <_dtoa_r+0x938>
 80104ba:	9b02      	ldr	r3, [sp, #8]
 80104bc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80104c0:	f88b a000 	strb.w	sl, [fp]
 80104c4:	e639      	b.n	801013a <_dtoa_r+0x5b2>
 80104c6:	4628      	mov	r0, r5
 80104c8:	e7bd      	b.n	8010446 <_dtoa_r+0x8be>
 80104ca:	2201      	movs	r2, #1
 80104cc:	e7e2      	b.n	8010494 <_dtoa_r+0x90c>
 80104ce:	9b06      	ldr	r3, [sp, #24]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	db04      	blt.n	80104de <_dtoa_r+0x956>
 80104d4:	9907      	ldr	r1, [sp, #28]
 80104d6:	430b      	orrs	r3, r1
 80104d8:	9908      	ldr	r1, [sp, #32]
 80104da:	430b      	orrs	r3, r1
 80104dc:	d120      	bne.n	8010520 <_dtoa_r+0x998>
 80104de:	2a00      	cmp	r2, #0
 80104e0:	ddee      	ble.n	80104c0 <_dtoa_r+0x938>
 80104e2:	9901      	ldr	r1, [sp, #4]
 80104e4:	2201      	movs	r2, #1
 80104e6:	4648      	mov	r0, r9
 80104e8:	f000 fafc 	bl	8010ae4 <__lshift>
 80104ec:	4621      	mov	r1, r4
 80104ee:	9001      	str	r0, [sp, #4]
 80104f0:	f000 fb64 	bl	8010bbc <__mcmp>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	dc03      	bgt.n	8010500 <_dtoa_r+0x978>
 80104f8:	d1e2      	bne.n	80104c0 <_dtoa_r+0x938>
 80104fa:	f01a 0f01 	tst.w	sl, #1
 80104fe:	d0df      	beq.n	80104c0 <_dtoa_r+0x938>
 8010500:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010504:	d1d9      	bne.n	80104ba <_dtoa_r+0x932>
 8010506:	2339      	movs	r3, #57	@ 0x39
 8010508:	f88b 3000 	strb.w	r3, [fp]
 801050c:	4633      	mov	r3, r6
 801050e:	461e      	mov	r6, r3
 8010510:	3b01      	subs	r3, #1
 8010512:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010516:	2a39      	cmp	r2, #57	@ 0x39
 8010518:	d053      	beq.n	80105c2 <_dtoa_r+0xa3a>
 801051a:	3201      	adds	r2, #1
 801051c:	701a      	strb	r2, [r3, #0]
 801051e:	e60c      	b.n	801013a <_dtoa_r+0x5b2>
 8010520:	2a00      	cmp	r2, #0
 8010522:	dd07      	ble.n	8010534 <_dtoa_r+0x9ac>
 8010524:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010528:	d0ed      	beq.n	8010506 <_dtoa_r+0x97e>
 801052a:	f10a 0301 	add.w	r3, sl, #1
 801052e:	f88b 3000 	strb.w	r3, [fp]
 8010532:	e602      	b.n	801013a <_dtoa_r+0x5b2>
 8010534:	9b05      	ldr	r3, [sp, #20]
 8010536:	9a05      	ldr	r2, [sp, #20]
 8010538:	f803 ac01 	strb.w	sl, [r3, #-1]
 801053c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801053e:	4293      	cmp	r3, r2
 8010540:	d029      	beq.n	8010596 <_dtoa_r+0xa0e>
 8010542:	9901      	ldr	r1, [sp, #4]
 8010544:	2300      	movs	r3, #0
 8010546:	220a      	movs	r2, #10
 8010548:	4648      	mov	r0, r9
 801054a:	f000 f91f 	bl	801078c <__multadd>
 801054e:	45a8      	cmp	r8, r5
 8010550:	9001      	str	r0, [sp, #4]
 8010552:	f04f 0300 	mov.w	r3, #0
 8010556:	f04f 020a 	mov.w	r2, #10
 801055a:	4641      	mov	r1, r8
 801055c:	4648      	mov	r0, r9
 801055e:	d107      	bne.n	8010570 <_dtoa_r+0x9e8>
 8010560:	f000 f914 	bl	801078c <__multadd>
 8010564:	4680      	mov	r8, r0
 8010566:	4605      	mov	r5, r0
 8010568:	9b05      	ldr	r3, [sp, #20]
 801056a:	3301      	adds	r3, #1
 801056c:	9305      	str	r3, [sp, #20]
 801056e:	e775      	b.n	801045c <_dtoa_r+0x8d4>
 8010570:	f000 f90c 	bl	801078c <__multadd>
 8010574:	4629      	mov	r1, r5
 8010576:	4680      	mov	r8, r0
 8010578:	2300      	movs	r3, #0
 801057a:	220a      	movs	r2, #10
 801057c:	4648      	mov	r0, r9
 801057e:	f000 f905 	bl	801078c <__multadd>
 8010582:	4605      	mov	r5, r0
 8010584:	e7f0      	b.n	8010568 <_dtoa_r+0x9e0>
 8010586:	f1bb 0f00 	cmp.w	fp, #0
 801058a:	bfcc      	ite	gt
 801058c:	465e      	movgt	r6, fp
 801058e:	2601      	movle	r6, #1
 8010590:	443e      	add	r6, r7
 8010592:	f04f 0800 	mov.w	r8, #0
 8010596:	9901      	ldr	r1, [sp, #4]
 8010598:	2201      	movs	r2, #1
 801059a:	4648      	mov	r0, r9
 801059c:	f000 faa2 	bl	8010ae4 <__lshift>
 80105a0:	4621      	mov	r1, r4
 80105a2:	9001      	str	r0, [sp, #4]
 80105a4:	f000 fb0a 	bl	8010bbc <__mcmp>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	dcaf      	bgt.n	801050c <_dtoa_r+0x984>
 80105ac:	d102      	bne.n	80105b4 <_dtoa_r+0xa2c>
 80105ae:	f01a 0f01 	tst.w	sl, #1
 80105b2:	d1ab      	bne.n	801050c <_dtoa_r+0x984>
 80105b4:	4633      	mov	r3, r6
 80105b6:	461e      	mov	r6, r3
 80105b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105bc:	2a30      	cmp	r2, #48	@ 0x30
 80105be:	d0fa      	beq.n	80105b6 <_dtoa_r+0xa2e>
 80105c0:	e5bb      	b.n	801013a <_dtoa_r+0x5b2>
 80105c2:	429f      	cmp	r7, r3
 80105c4:	d1a3      	bne.n	801050e <_dtoa_r+0x986>
 80105c6:	9b04      	ldr	r3, [sp, #16]
 80105c8:	3301      	adds	r3, #1
 80105ca:	9304      	str	r3, [sp, #16]
 80105cc:	2331      	movs	r3, #49	@ 0x31
 80105ce:	703b      	strb	r3, [r7, #0]
 80105d0:	e5b3      	b.n	801013a <_dtoa_r+0x5b2>
 80105d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80105d4:	4f16      	ldr	r7, [pc, #88]	@ (8010630 <_dtoa_r+0xaa8>)
 80105d6:	b11b      	cbz	r3, 80105e0 <_dtoa_r+0xa58>
 80105d8:	f107 0308 	add.w	r3, r7, #8
 80105dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	4638      	mov	r0, r7
 80105e2:	b011      	add	sp, #68	@ 0x44
 80105e4:	ecbd 8b02 	vpop	{d8}
 80105e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ec:	9b07      	ldr	r3, [sp, #28]
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	f77f ae36 	ble.w	8010260 <_dtoa_r+0x6d8>
 80105f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80105f8:	2001      	movs	r0, #1
 80105fa:	e656      	b.n	80102aa <_dtoa_r+0x722>
 80105fc:	f1bb 0f00 	cmp.w	fp, #0
 8010600:	f77f aed7 	ble.w	80103b2 <_dtoa_r+0x82a>
 8010604:	463e      	mov	r6, r7
 8010606:	9801      	ldr	r0, [sp, #4]
 8010608:	4621      	mov	r1, r4
 801060a:	f7ff fa34 	bl	800fa76 <quorem>
 801060e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010612:	f806 ab01 	strb.w	sl, [r6], #1
 8010616:	1bf2      	subs	r2, r6, r7
 8010618:	4593      	cmp	fp, r2
 801061a:	ddb4      	ble.n	8010586 <_dtoa_r+0x9fe>
 801061c:	9901      	ldr	r1, [sp, #4]
 801061e:	2300      	movs	r3, #0
 8010620:	220a      	movs	r2, #10
 8010622:	4648      	mov	r0, r9
 8010624:	f000 f8b2 	bl	801078c <__multadd>
 8010628:	9001      	str	r0, [sp, #4]
 801062a:	e7ec      	b.n	8010606 <_dtoa_r+0xa7e>
 801062c:	08013ce4 	.word	0x08013ce4
 8010630:	08013c68 	.word	0x08013c68

08010634 <_free_r>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	4605      	mov	r5, r0
 8010638:	2900      	cmp	r1, #0
 801063a:	d041      	beq.n	80106c0 <_free_r+0x8c>
 801063c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010640:	1f0c      	subs	r4, r1, #4
 8010642:	2b00      	cmp	r3, #0
 8010644:	bfb8      	it	lt
 8010646:	18e4      	addlt	r4, r4, r3
 8010648:	f7fe fc22 	bl	800ee90 <__malloc_lock>
 801064c:	4a1d      	ldr	r2, [pc, #116]	@ (80106c4 <_free_r+0x90>)
 801064e:	6813      	ldr	r3, [r2, #0]
 8010650:	b933      	cbnz	r3, 8010660 <_free_r+0x2c>
 8010652:	6063      	str	r3, [r4, #4]
 8010654:	6014      	str	r4, [r2, #0]
 8010656:	4628      	mov	r0, r5
 8010658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801065c:	f7fe bc1e 	b.w	800ee9c <__malloc_unlock>
 8010660:	42a3      	cmp	r3, r4
 8010662:	d908      	bls.n	8010676 <_free_r+0x42>
 8010664:	6820      	ldr	r0, [r4, #0]
 8010666:	1821      	adds	r1, r4, r0
 8010668:	428b      	cmp	r3, r1
 801066a:	bf01      	itttt	eq
 801066c:	6819      	ldreq	r1, [r3, #0]
 801066e:	685b      	ldreq	r3, [r3, #4]
 8010670:	1809      	addeq	r1, r1, r0
 8010672:	6021      	streq	r1, [r4, #0]
 8010674:	e7ed      	b.n	8010652 <_free_r+0x1e>
 8010676:	461a      	mov	r2, r3
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	b10b      	cbz	r3, 8010680 <_free_r+0x4c>
 801067c:	42a3      	cmp	r3, r4
 801067e:	d9fa      	bls.n	8010676 <_free_r+0x42>
 8010680:	6811      	ldr	r1, [r2, #0]
 8010682:	1850      	adds	r0, r2, r1
 8010684:	42a0      	cmp	r0, r4
 8010686:	d10b      	bne.n	80106a0 <_free_r+0x6c>
 8010688:	6820      	ldr	r0, [r4, #0]
 801068a:	4401      	add	r1, r0
 801068c:	1850      	adds	r0, r2, r1
 801068e:	4283      	cmp	r3, r0
 8010690:	6011      	str	r1, [r2, #0]
 8010692:	d1e0      	bne.n	8010656 <_free_r+0x22>
 8010694:	6818      	ldr	r0, [r3, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	6053      	str	r3, [r2, #4]
 801069a:	4408      	add	r0, r1
 801069c:	6010      	str	r0, [r2, #0]
 801069e:	e7da      	b.n	8010656 <_free_r+0x22>
 80106a0:	d902      	bls.n	80106a8 <_free_r+0x74>
 80106a2:	230c      	movs	r3, #12
 80106a4:	602b      	str	r3, [r5, #0]
 80106a6:	e7d6      	b.n	8010656 <_free_r+0x22>
 80106a8:	6820      	ldr	r0, [r4, #0]
 80106aa:	1821      	adds	r1, r4, r0
 80106ac:	428b      	cmp	r3, r1
 80106ae:	bf04      	itt	eq
 80106b0:	6819      	ldreq	r1, [r3, #0]
 80106b2:	685b      	ldreq	r3, [r3, #4]
 80106b4:	6063      	str	r3, [r4, #4]
 80106b6:	bf04      	itt	eq
 80106b8:	1809      	addeq	r1, r1, r0
 80106ba:	6021      	streq	r1, [r4, #0]
 80106bc:	6054      	str	r4, [r2, #4]
 80106be:	e7ca      	b.n	8010656 <_free_r+0x22>
 80106c0:	bd38      	pop	{r3, r4, r5, pc}
 80106c2:	bf00      	nop
 80106c4:	24002704 	.word	0x24002704

080106c8 <_Balloc>:
 80106c8:	b570      	push	{r4, r5, r6, lr}
 80106ca:	69c6      	ldr	r6, [r0, #28]
 80106cc:	4604      	mov	r4, r0
 80106ce:	460d      	mov	r5, r1
 80106d0:	b976      	cbnz	r6, 80106f0 <_Balloc+0x28>
 80106d2:	2010      	movs	r0, #16
 80106d4:	f7fe fb32 	bl	800ed3c <malloc>
 80106d8:	4602      	mov	r2, r0
 80106da:	61e0      	str	r0, [r4, #28]
 80106dc:	b920      	cbnz	r0, 80106e8 <_Balloc+0x20>
 80106de:	4b18      	ldr	r3, [pc, #96]	@ (8010740 <_Balloc+0x78>)
 80106e0:	4818      	ldr	r0, [pc, #96]	@ (8010744 <_Balloc+0x7c>)
 80106e2:	216b      	movs	r1, #107	@ 0x6b
 80106e4:	f000 fd9e 	bl	8011224 <__assert_func>
 80106e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106ec:	6006      	str	r6, [r0, #0]
 80106ee:	60c6      	str	r6, [r0, #12]
 80106f0:	69e6      	ldr	r6, [r4, #28]
 80106f2:	68f3      	ldr	r3, [r6, #12]
 80106f4:	b183      	cbz	r3, 8010718 <_Balloc+0x50>
 80106f6:	69e3      	ldr	r3, [r4, #28]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106fe:	b9b8      	cbnz	r0, 8010730 <_Balloc+0x68>
 8010700:	2101      	movs	r1, #1
 8010702:	fa01 f605 	lsl.w	r6, r1, r5
 8010706:	1d72      	adds	r2, r6, #5
 8010708:	0092      	lsls	r2, r2, #2
 801070a:	4620      	mov	r0, r4
 801070c:	f000 fda8 	bl	8011260 <_calloc_r>
 8010710:	b160      	cbz	r0, 801072c <_Balloc+0x64>
 8010712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010716:	e00e      	b.n	8010736 <_Balloc+0x6e>
 8010718:	2221      	movs	r2, #33	@ 0x21
 801071a:	2104      	movs	r1, #4
 801071c:	4620      	mov	r0, r4
 801071e:	f000 fd9f 	bl	8011260 <_calloc_r>
 8010722:	69e3      	ldr	r3, [r4, #28]
 8010724:	60f0      	str	r0, [r6, #12]
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1e4      	bne.n	80106f6 <_Balloc+0x2e>
 801072c:	2000      	movs	r0, #0
 801072e:	bd70      	pop	{r4, r5, r6, pc}
 8010730:	6802      	ldr	r2, [r0, #0]
 8010732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010736:	2300      	movs	r3, #0
 8010738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801073c:	e7f7      	b.n	801072e <_Balloc+0x66>
 801073e:	bf00      	nop
 8010740:	08013c75 	.word	0x08013c75
 8010744:	08013cf5 	.word	0x08013cf5

08010748 <_Bfree>:
 8010748:	b570      	push	{r4, r5, r6, lr}
 801074a:	69c6      	ldr	r6, [r0, #28]
 801074c:	4605      	mov	r5, r0
 801074e:	460c      	mov	r4, r1
 8010750:	b976      	cbnz	r6, 8010770 <_Bfree+0x28>
 8010752:	2010      	movs	r0, #16
 8010754:	f7fe faf2 	bl	800ed3c <malloc>
 8010758:	4602      	mov	r2, r0
 801075a:	61e8      	str	r0, [r5, #28]
 801075c:	b920      	cbnz	r0, 8010768 <_Bfree+0x20>
 801075e:	4b09      	ldr	r3, [pc, #36]	@ (8010784 <_Bfree+0x3c>)
 8010760:	4809      	ldr	r0, [pc, #36]	@ (8010788 <_Bfree+0x40>)
 8010762:	218f      	movs	r1, #143	@ 0x8f
 8010764:	f000 fd5e 	bl	8011224 <__assert_func>
 8010768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801076c:	6006      	str	r6, [r0, #0]
 801076e:	60c6      	str	r6, [r0, #12]
 8010770:	b13c      	cbz	r4, 8010782 <_Bfree+0x3a>
 8010772:	69eb      	ldr	r3, [r5, #28]
 8010774:	6862      	ldr	r2, [r4, #4]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801077c:	6021      	str	r1, [r4, #0]
 801077e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010782:	bd70      	pop	{r4, r5, r6, pc}
 8010784:	08013c75 	.word	0x08013c75
 8010788:	08013cf5 	.word	0x08013cf5

0801078c <__multadd>:
 801078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010790:	690d      	ldr	r5, [r1, #16]
 8010792:	4607      	mov	r7, r0
 8010794:	460c      	mov	r4, r1
 8010796:	461e      	mov	r6, r3
 8010798:	f101 0c14 	add.w	ip, r1, #20
 801079c:	2000      	movs	r0, #0
 801079e:	f8dc 3000 	ldr.w	r3, [ip]
 80107a2:	b299      	uxth	r1, r3
 80107a4:	fb02 6101 	mla	r1, r2, r1, r6
 80107a8:	0c1e      	lsrs	r6, r3, #16
 80107aa:	0c0b      	lsrs	r3, r1, #16
 80107ac:	fb02 3306 	mla	r3, r2, r6, r3
 80107b0:	b289      	uxth	r1, r1
 80107b2:	3001      	adds	r0, #1
 80107b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107b8:	4285      	cmp	r5, r0
 80107ba:	f84c 1b04 	str.w	r1, [ip], #4
 80107be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107c2:	dcec      	bgt.n	801079e <__multadd+0x12>
 80107c4:	b30e      	cbz	r6, 801080a <__multadd+0x7e>
 80107c6:	68a3      	ldr	r3, [r4, #8]
 80107c8:	42ab      	cmp	r3, r5
 80107ca:	dc19      	bgt.n	8010800 <__multadd+0x74>
 80107cc:	6861      	ldr	r1, [r4, #4]
 80107ce:	4638      	mov	r0, r7
 80107d0:	3101      	adds	r1, #1
 80107d2:	f7ff ff79 	bl	80106c8 <_Balloc>
 80107d6:	4680      	mov	r8, r0
 80107d8:	b928      	cbnz	r0, 80107e6 <__multadd+0x5a>
 80107da:	4602      	mov	r2, r0
 80107dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010810 <__multadd+0x84>)
 80107de:	480d      	ldr	r0, [pc, #52]	@ (8010814 <__multadd+0x88>)
 80107e0:	21ba      	movs	r1, #186	@ 0xba
 80107e2:	f000 fd1f 	bl	8011224 <__assert_func>
 80107e6:	6922      	ldr	r2, [r4, #16]
 80107e8:	3202      	adds	r2, #2
 80107ea:	f104 010c 	add.w	r1, r4, #12
 80107ee:	0092      	lsls	r2, r2, #2
 80107f0:	300c      	adds	r0, #12
 80107f2:	f000 fd09 	bl	8011208 <memcpy>
 80107f6:	4621      	mov	r1, r4
 80107f8:	4638      	mov	r0, r7
 80107fa:	f7ff ffa5 	bl	8010748 <_Bfree>
 80107fe:	4644      	mov	r4, r8
 8010800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010804:	3501      	adds	r5, #1
 8010806:	615e      	str	r6, [r3, #20]
 8010808:	6125      	str	r5, [r4, #16]
 801080a:	4620      	mov	r0, r4
 801080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010810:	08013ce4 	.word	0x08013ce4
 8010814:	08013cf5 	.word	0x08013cf5

08010818 <__hi0bits>:
 8010818:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801081c:	4603      	mov	r3, r0
 801081e:	bf36      	itet	cc
 8010820:	0403      	lslcc	r3, r0, #16
 8010822:	2000      	movcs	r0, #0
 8010824:	2010      	movcc	r0, #16
 8010826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801082a:	bf3c      	itt	cc
 801082c:	021b      	lslcc	r3, r3, #8
 801082e:	3008      	addcc	r0, #8
 8010830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010834:	bf3c      	itt	cc
 8010836:	011b      	lslcc	r3, r3, #4
 8010838:	3004      	addcc	r0, #4
 801083a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801083e:	bf3c      	itt	cc
 8010840:	009b      	lslcc	r3, r3, #2
 8010842:	3002      	addcc	r0, #2
 8010844:	2b00      	cmp	r3, #0
 8010846:	db05      	blt.n	8010854 <__hi0bits+0x3c>
 8010848:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801084c:	f100 0001 	add.w	r0, r0, #1
 8010850:	bf08      	it	eq
 8010852:	2020      	moveq	r0, #32
 8010854:	4770      	bx	lr

08010856 <__lo0bits>:
 8010856:	6803      	ldr	r3, [r0, #0]
 8010858:	4602      	mov	r2, r0
 801085a:	f013 0007 	ands.w	r0, r3, #7
 801085e:	d00b      	beq.n	8010878 <__lo0bits+0x22>
 8010860:	07d9      	lsls	r1, r3, #31
 8010862:	d421      	bmi.n	80108a8 <__lo0bits+0x52>
 8010864:	0798      	lsls	r0, r3, #30
 8010866:	bf49      	itett	mi
 8010868:	085b      	lsrmi	r3, r3, #1
 801086a:	089b      	lsrpl	r3, r3, #2
 801086c:	2001      	movmi	r0, #1
 801086e:	6013      	strmi	r3, [r2, #0]
 8010870:	bf5c      	itt	pl
 8010872:	6013      	strpl	r3, [r2, #0]
 8010874:	2002      	movpl	r0, #2
 8010876:	4770      	bx	lr
 8010878:	b299      	uxth	r1, r3
 801087a:	b909      	cbnz	r1, 8010880 <__lo0bits+0x2a>
 801087c:	0c1b      	lsrs	r3, r3, #16
 801087e:	2010      	movs	r0, #16
 8010880:	b2d9      	uxtb	r1, r3
 8010882:	b909      	cbnz	r1, 8010888 <__lo0bits+0x32>
 8010884:	3008      	adds	r0, #8
 8010886:	0a1b      	lsrs	r3, r3, #8
 8010888:	0719      	lsls	r1, r3, #28
 801088a:	bf04      	itt	eq
 801088c:	091b      	lsreq	r3, r3, #4
 801088e:	3004      	addeq	r0, #4
 8010890:	0799      	lsls	r1, r3, #30
 8010892:	bf04      	itt	eq
 8010894:	089b      	lsreq	r3, r3, #2
 8010896:	3002      	addeq	r0, #2
 8010898:	07d9      	lsls	r1, r3, #31
 801089a:	d403      	bmi.n	80108a4 <__lo0bits+0x4e>
 801089c:	085b      	lsrs	r3, r3, #1
 801089e:	f100 0001 	add.w	r0, r0, #1
 80108a2:	d003      	beq.n	80108ac <__lo0bits+0x56>
 80108a4:	6013      	str	r3, [r2, #0]
 80108a6:	4770      	bx	lr
 80108a8:	2000      	movs	r0, #0
 80108aa:	4770      	bx	lr
 80108ac:	2020      	movs	r0, #32
 80108ae:	4770      	bx	lr

080108b0 <__i2b>:
 80108b0:	b510      	push	{r4, lr}
 80108b2:	460c      	mov	r4, r1
 80108b4:	2101      	movs	r1, #1
 80108b6:	f7ff ff07 	bl	80106c8 <_Balloc>
 80108ba:	4602      	mov	r2, r0
 80108bc:	b928      	cbnz	r0, 80108ca <__i2b+0x1a>
 80108be:	4b05      	ldr	r3, [pc, #20]	@ (80108d4 <__i2b+0x24>)
 80108c0:	4805      	ldr	r0, [pc, #20]	@ (80108d8 <__i2b+0x28>)
 80108c2:	f240 1145 	movw	r1, #325	@ 0x145
 80108c6:	f000 fcad 	bl	8011224 <__assert_func>
 80108ca:	2301      	movs	r3, #1
 80108cc:	6144      	str	r4, [r0, #20]
 80108ce:	6103      	str	r3, [r0, #16]
 80108d0:	bd10      	pop	{r4, pc}
 80108d2:	bf00      	nop
 80108d4:	08013ce4 	.word	0x08013ce4
 80108d8:	08013cf5 	.word	0x08013cf5

080108dc <__multiply>:
 80108dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e0:	4614      	mov	r4, r2
 80108e2:	690a      	ldr	r2, [r1, #16]
 80108e4:	6923      	ldr	r3, [r4, #16]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	bfa8      	it	ge
 80108ea:	4623      	movge	r3, r4
 80108ec:	460f      	mov	r7, r1
 80108ee:	bfa4      	itt	ge
 80108f0:	460c      	movge	r4, r1
 80108f2:	461f      	movge	r7, r3
 80108f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80108f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80108fc:	68a3      	ldr	r3, [r4, #8]
 80108fe:	6861      	ldr	r1, [r4, #4]
 8010900:	eb0a 0609 	add.w	r6, sl, r9
 8010904:	42b3      	cmp	r3, r6
 8010906:	b085      	sub	sp, #20
 8010908:	bfb8      	it	lt
 801090a:	3101      	addlt	r1, #1
 801090c:	f7ff fedc 	bl	80106c8 <_Balloc>
 8010910:	b930      	cbnz	r0, 8010920 <__multiply+0x44>
 8010912:	4602      	mov	r2, r0
 8010914:	4b44      	ldr	r3, [pc, #272]	@ (8010a28 <__multiply+0x14c>)
 8010916:	4845      	ldr	r0, [pc, #276]	@ (8010a2c <__multiply+0x150>)
 8010918:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801091c:	f000 fc82 	bl	8011224 <__assert_func>
 8010920:	f100 0514 	add.w	r5, r0, #20
 8010924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010928:	462b      	mov	r3, r5
 801092a:	2200      	movs	r2, #0
 801092c:	4543      	cmp	r3, r8
 801092e:	d321      	bcc.n	8010974 <__multiply+0x98>
 8010930:	f107 0114 	add.w	r1, r7, #20
 8010934:	f104 0214 	add.w	r2, r4, #20
 8010938:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801093c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010940:	9302      	str	r3, [sp, #8]
 8010942:	1b13      	subs	r3, r2, r4
 8010944:	3b15      	subs	r3, #21
 8010946:	f023 0303 	bic.w	r3, r3, #3
 801094a:	3304      	adds	r3, #4
 801094c:	f104 0715 	add.w	r7, r4, #21
 8010950:	42ba      	cmp	r2, r7
 8010952:	bf38      	it	cc
 8010954:	2304      	movcc	r3, #4
 8010956:	9301      	str	r3, [sp, #4]
 8010958:	9b02      	ldr	r3, [sp, #8]
 801095a:	9103      	str	r1, [sp, #12]
 801095c:	428b      	cmp	r3, r1
 801095e:	d80c      	bhi.n	801097a <__multiply+0x9e>
 8010960:	2e00      	cmp	r6, #0
 8010962:	dd03      	ble.n	801096c <__multiply+0x90>
 8010964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010968:	2b00      	cmp	r3, #0
 801096a:	d05b      	beq.n	8010a24 <__multiply+0x148>
 801096c:	6106      	str	r6, [r0, #16]
 801096e:	b005      	add	sp, #20
 8010970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010974:	f843 2b04 	str.w	r2, [r3], #4
 8010978:	e7d8      	b.n	801092c <__multiply+0x50>
 801097a:	f8b1 a000 	ldrh.w	sl, [r1]
 801097e:	f1ba 0f00 	cmp.w	sl, #0
 8010982:	d024      	beq.n	80109ce <__multiply+0xf2>
 8010984:	f104 0e14 	add.w	lr, r4, #20
 8010988:	46a9      	mov	r9, r5
 801098a:	f04f 0c00 	mov.w	ip, #0
 801098e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010992:	f8d9 3000 	ldr.w	r3, [r9]
 8010996:	fa1f fb87 	uxth.w	fp, r7
 801099a:	b29b      	uxth	r3, r3
 801099c:	fb0a 330b 	mla	r3, sl, fp, r3
 80109a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80109a4:	f8d9 7000 	ldr.w	r7, [r9]
 80109a8:	4463      	add	r3, ip
 80109aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80109ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80109b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80109bc:	4572      	cmp	r2, lr
 80109be:	f849 3b04 	str.w	r3, [r9], #4
 80109c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80109c6:	d8e2      	bhi.n	801098e <__multiply+0xb2>
 80109c8:	9b01      	ldr	r3, [sp, #4]
 80109ca:	f845 c003 	str.w	ip, [r5, r3]
 80109ce:	9b03      	ldr	r3, [sp, #12]
 80109d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80109d4:	3104      	adds	r1, #4
 80109d6:	f1b9 0f00 	cmp.w	r9, #0
 80109da:	d021      	beq.n	8010a20 <__multiply+0x144>
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	f104 0c14 	add.w	ip, r4, #20
 80109e2:	46ae      	mov	lr, r5
 80109e4:	f04f 0a00 	mov.w	sl, #0
 80109e8:	f8bc b000 	ldrh.w	fp, [ip]
 80109ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80109f0:	fb09 770b 	mla	r7, r9, fp, r7
 80109f4:	4457      	add	r7, sl
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80109fc:	f84e 3b04 	str.w	r3, [lr], #4
 8010a00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010a04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a08:	f8be 3000 	ldrh.w	r3, [lr]
 8010a0c:	fb09 330a 	mla	r3, r9, sl, r3
 8010a10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010a14:	4562      	cmp	r2, ip
 8010a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a1a:	d8e5      	bhi.n	80109e8 <__multiply+0x10c>
 8010a1c:	9f01      	ldr	r7, [sp, #4]
 8010a1e:	51eb      	str	r3, [r5, r7]
 8010a20:	3504      	adds	r5, #4
 8010a22:	e799      	b.n	8010958 <__multiply+0x7c>
 8010a24:	3e01      	subs	r6, #1
 8010a26:	e79b      	b.n	8010960 <__multiply+0x84>
 8010a28:	08013ce4 	.word	0x08013ce4
 8010a2c:	08013cf5 	.word	0x08013cf5

08010a30 <__pow5mult>:
 8010a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a34:	4615      	mov	r5, r2
 8010a36:	f012 0203 	ands.w	r2, r2, #3
 8010a3a:	4607      	mov	r7, r0
 8010a3c:	460e      	mov	r6, r1
 8010a3e:	d007      	beq.n	8010a50 <__pow5mult+0x20>
 8010a40:	4c25      	ldr	r4, [pc, #148]	@ (8010ad8 <__pow5mult+0xa8>)
 8010a42:	3a01      	subs	r2, #1
 8010a44:	2300      	movs	r3, #0
 8010a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a4a:	f7ff fe9f 	bl	801078c <__multadd>
 8010a4e:	4606      	mov	r6, r0
 8010a50:	10ad      	asrs	r5, r5, #2
 8010a52:	d03d      	beq.n	8010ad0 <__pow5mult+0xa0>
 8010a54:	69fc      	ldr	r4, [r7, #28]
 8010a56:	b97c      	cbnz	r4, 8010a78 <__pow5mult+0x48>
 8010a58:	2010      	movs	r0, #16
 8010a5a:	f7fe f96f 	bl	800ed3c <malloc>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	61f8      	str	r0, [r7, #28]
 8010a62:	b928      	cbnz	r0, 8010a70 <__pow5mult+0x40>
 8010a64:	4b1d      	ldr	r3, [pc, #116]	@ (8010adc <__pow5mult+0xac>)
 8010a66:	481e      	ldr	r0, [pc, #120]	@ (8010ae0 <__pow5mult+0xb0>)
 8010a68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010a6c:	f000 fbda 	bl	8011224 <__assert_func>
 8010a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a74:	6004      	str	r4, [r0, #0]
 8010a76:	60c4      	str	r4, [r0, #12]
 8010a78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a80:	b94c      	cbnz	r4, 8010a96 <__pow5mult+0x66>
 8010a82:	f240 2171 	movw	r1, #625	@ 0x271
 8010a86:	4638      	mov	r0, r7
 8010a88:	f7ff ff12 	bl	80108b0 <__i2b>
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a92:	4604      	mov	r4, r0
 8010a94:	6003      	str	r3, [r0, #0]
 8010a96:	f04f 0900 	mov.w	r9, #0
 8010a9a:	07eb      	lsls	r3, r5, #31
 8010a9c:	d50a      	bpl.n	8010ab4 <__pow5mult+0x84>
 8010a9e:	4631      	mov	r1, r6
 8010aa0:	4622      	mov	r2, r4
 8010aa2:	4638      	mov	r0, r7
 8010aa4:	f7ff ff1a 	bl	80108dc <__multiply>
 8010aa8:	4631      	mov	r1, r6
 8010aaa:	4680      	mov	r8, r0
 8010aac:	4638      	mov	r0, r7
 8010aae:	f7ff fe4b 	bl	8010748 <_Bfree>
 8010ab2:	4646      	mov	r6, r8
 8010ab4:	106d      	asrs	r5, r5, #1
 8010ab6:	d00b      	beq.n	8010ad0 <__pow5mult+0xa0>
 8010ab8:	6820      	ldr	r0, [r4, #0]
 8010aba:	b938      	cbnz	r0, 8010acc <__pow5mult+0x9c>
 8010abc:	4622      	mov	r2, r4
 8010abe:	4621      	mov	r1, r4
 8010ac0:	4638      	mov	r0, r7
 8010ac2:	f7ff ff0b 	bl	80108dc <__multiply>
 8010ac6:	6020      	str	r0, [r4, #0]
 8010ac8:	f8c0 9000 	str.w	r9, [r0]
 8010acc:	4604      	mov	r4, r0
 8010ace:	e7e4      	b.n	8010a9a <__pow5mult+0x6a>
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ad6:	bf00      	nop
 8010ad8:	08013d50 	.word	0x08013d50
 8010adc:	08013c75 	.word	0x08013c75
 8010ae0:	08013cf5 	.word	0x08013cf5

08010ae4 <__lshift>:
 8010ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ae8:	460c      	mov	r4, r1
 8010aea:	6849      	ldr	r1, [r1, #4]
 8010aec:	6923      	ldr	r3, [r4, #16]
 8010aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010af2:	68a3      	ldr	r3, [r4, #8]
 8010af4:	4607      	mov	r7, r0
 8010af6:	4691      	mov	r9, r2
 8010af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010afc:	f108 0601 	add.w	r6, r8, #1
 8010b00:	42b3      	cmp	r3, r6
 8010b02:	db0b      	blt.n	8010b1c <__lshift+0x38>
 8010b04:	4638      	mov	r0, r7
 8010b06:	f7ff fddf 	bl	80106c8 <_Balloc>
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	b948      	cbnz	r0, 8010b22 <__lshift+0x3e>
 8010b0e:	4602      	mov	r2, r0
 8010b10:	4b28      	ldr	r3, [pc, #160]	@ (8010bb4 <__lshift+0xd0>)
 8010b12:	4829      	ldr	r0, [pc, #164]	@ (8010bb8 <__lshift+0xd4>)
 8010b14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010b18:	f000 fb84 	bl	8011224 <__assert_func>
 8010b1c:	3101      	adds	r1, #1
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	e7ee      	b.n	8010b00 <__lshift+0x1c>
 8010b22:	2300      	movs	r3, #0
 8010b24:	f100 0114 	add.w	r1, r0, #20
 8010b28:	f100 0210 	add.w	r2, r0, #16
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	4553      	cmp	r3, sl
 8010b30:	db33      	blt.n	8010b9a <__lshift+0xb6>
 8010b32:	6920      	ldr	r0, [r4, #16]
 8010b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b38:	f104 0314 	add.w	r3, r4, #20
 8010b3c:	f019 091f 	ands.w	r9, r9, #31
 8010b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b48:	d02b      	beq.n	8010ba2 <__lshift+0xbe>
 8010b4a:	f1c9 0e20 	rsb	lr, r9, #32
 8010b4e:	468a      	mov	sl, r1
 8010b50:	2200      	movs	r2, #0
 8010b52:	6818      	ldr	r0, [r3, #0]
 8010b54:	fa00 f009 	lsl.w	r0, r0, r9
 8010b58:	4310      	orrs	r0, r2
 8010b5a:	f84a 0b04 	str.w	r0, [sl], #4
 8010b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b62:	459c      	cmp	ip, r3
 8010b64:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b68:	d8f3      	bhi.n	8010b52 <__lshift+0x6e>
 8010b6a:	ebac 0304 	sub.w	r3, ip, r4
 8010b6e:	3b15      	subs	r3, #21
 8010b70:	f023 0303 	bic.w	r3, r3, #3
 8010b74:	3304      	adds	r3, #4
 8010b76:	f104 0015 	add.w	r0, r4, #21
 8010b7a:	4584      	cmp	ip, r0
 8010b7c:	bf38      	it	cc
 8010b7e:	2304      	movcc	r3, #4
 8010b80:	50ca      	str	r2, [r1, r3]
 8010b82:	b10a      	cbz	r2, 8010b88 <__lshift+0xa4>
 8010b84:	f108 0602 	add.w	r6, r8, #2
 8010b88:	3e01      	subs	r6, #1
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	612e      	str	r6, [r5, #16]
 8010b8e:	4621      	mov	r1, r4
 8010b90:	f7ff fdda 	bl	8010748 <_Bfree>
 8010b94:	4628      	mov	r0, r5
 8010b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	e7c5      	b.n	8010b2e <__lshift+0x4a>
 8010ba2:	3904      	subs	r1, #4
 8010ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ba8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bac:	459c      	cmp	ip, r3
 8010bae:	d8f9      	bhi.n	8010ba4 <__lshift+0xc0>
 8010bb0:	e7ea      	b.n	8010b88 <__lshift+0xa4>
 8010bb2:	bf00      	nop
 8010bb4:	08013ce4 	.word	0x08013ce4
 8010bb8:	08013cf5 	.word	0x08013cf5

08010bbc <__mcmp>:
 8010bbc:	690a      	ldr	r2, [r1, #16]
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	6900      	ldr	r0, [r0, #16]
 8010bc2:	1a80      	subs	r0, r0, r2
 8010bc4:	b530      	push	{r4, r5, lr}
 8010bc6:	d10e      	bne.n	8010be6 <__mcmp+0x2a>
 8010bc8:	3314      	adds	r3, #20
 8010bca:	3114      	adds	r1, #20
 8010bcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010bd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010bdc:	4295      	cmp	r5, r2
 8010bde:	d003      	beq.n	8010be8 <__mcmp+0x2c>
 8010be0:	d205      	bcs.n	8010bee <__mcmp+0x32>
 8010be2:	f04f 30ff 	mov.w	r0, #4294967295
 8010be6:	bd30      	pop	{r4, r5, pc}
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	d3f3      	bcc.n	8010bd4 <__mcmp+0x18>
 8010bec:	e7fb      	b.n	8010be6 <__mcmp+0x2a>
 8010bee:	2001      	movs	r0, #1
 8010bf0:	e7f9      	b.n	8010be6 <__mcmp+0x2a>
	...

08010bf4 <__mdiff>:
 8010bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf8:	4689      	mov	r9, r1
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	4611      	mov	r1, r2
 8010bfe:	4648      	mov	r0, r9
 8010c00:	4614      	mov	r4, r2
 8010c02:	f7ff ffdb 	bl	8010bbc <__mcmp>
 8010c06:	1e05      	subs	r5, r0, #0
 8010c08:	d112      	bne.n	8010c30 <__mdiff+0x3c>
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f7ff fd5b 	bl	80106c8 <_Balloc>
 8010c12:	4602      	mov	r2, r0
 8010c14:	b928      	cbnz	r0, 8010c22 <__mdiff+0x2e>
 8010c16:	4b3f      	ldr	r3, [pc, #252]	@ (8010d14 <__mdiff+0x120>)
 8010c18:	f240 2137 	movw	r1, #567	@ 0x237
 8010c1c:	483e      	ldr	r0, [pc, #248]	@ (8010d18 <__mdiff+0x124>)
 8010c1e:	f000 fb01 	bl	8011224 <__assert_func>
 8010c22:	2301      	movs	r3, #1
 8010c24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c28:	4610      	mov	r0, r2
 8010c2a:	b003      	add	sp, #12
 8010c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c30:	bfbc      	itt	lt
 8010c32:	464b      	movlt	r3, r9
 8010c34:	46a1      	movlt	r9, r4
 8010c36:	4630      	mov	r0, r6
 8010c38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c3c:	bfba      	itte	lt
 8010c3e:	461c      	movlt	r4, r3
 8010c40:	2501      	movlt	r5, #1
 8010c42:	2500      	movge	r5, #0
 8010c44:	f7ff fd40 	bl	80106c8 <_Balloc>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	b918      	cbnz	r0, 8010c54 <__mdiff+0x60>
 8010c4c:	4b31      	ldr	r3, [pc, #196]	@ (8010d14 <__mdiff+0x120>)
 8010c4e:	f240 2145 	movw	r1, #581	@ 0x245
 8010c52:	e7e3      	b.n	8010c1c <__mdiff+0x28>
 8010c54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010c58:	6926      	ldr	r6, [r4, #16]
 8010c5a:	60c5      	str	r5, [r0, #12]
 8010c5c:	f109 0310 	add.w	r3, r9, #16
 8010c60:	f109 0514 	add.w	r5, r9, #20
 8010c64:	f104 0e14 	add.w	lr, r4, #20
 8010c68:	f100 0b14 	add.w	fp, r0, #20
 8010c6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010c70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010c74:	9301      	str	r3, [sp, #4]
 8010c76:	46d9      	mov	r9, fp
 8010c78:	f04f 0c00 	mov.w	ip, #0
 8010c7c:	9b01      	ldr	r3, [sp, #4]
 8010c7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010c82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010c86:	9301      	str	r3, [sp, #4]
 8010c88:	fa1f f38a 	uxth.w	r3, sl
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	b283      	uxth	r3, r0
 8010c90:	1acb      	subs	r3, r1, r3
 8010c92:	0c00      	lsrs	r0, r0, #16
 8010c94:	4463      	add	r3, ip
 8010c96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010c9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010ca4:	4576      	cmp	r6, lr
 8010ca6:	f849 3b04 	str.w	r3, [r9], #4
 8010caa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010cae:	d8e5      	bhi.n	8010c7c <__mdiff+0x88>
 8010cb0:	1b33      	subs	r3, r6, r4
 8010cb2:	3b15      	subs	r3, #21
 8010cb4:	f023 0303 	bic.w	r3, r3, #3
 8010cb8:	3415      	adds	r4, #21
 8010cba:	3304      	adds	r3, #4
 8010cbc:	42a6      	cmp	r6, r4
 8010cbe:	bf38      	it	cc
 8010cc0:	2304      	movcc	r3, #4
 8010cc2:	441d      	add	r5, r3
 8010cc4:	445b      	add	r3, fp
 8010cc6:	461e      	mov	r6, r3
 8010cc8:	462c      	mov	r4, r5
 8010cca:	4544      	cmp	r4, r8
 8010ccc:	d30e      	bcc.n	8010cec <__mdiff+0xf8>
 8010cce:	f108 0103 	add.w	r1, r8, #3
 8010cd2:	1b49      	subs	r1, r1, r5
 8010cd4:	f021 0103 	bic.w	r1, r1, #3
 8010cd8:	3d03      	subs	r5, #3
 8010cda:	45a8      	cmp	r8, r5
 8010cdc:	bf38      	it	cc
 8010cde:	2100      	movcc	r1, #0
 8010ce0:	440b      	add	r3, r1
 8010ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ce6:	b191      	cbz	r1, 8010d0e <__mdiff+0x11a>
 8010ce8:	6117      	str	r7, [r2, #16]
 8010cea:	e79d      	b.n	8010c28 <__mdiff+0x34>
 8010cec:	f854 1b04 	ldr.w	r1, [r4], #4
 8010cf0:	46e6      	mov	lr, ip
 8010cf2:	0c08      	lsrs	r0, r1, #16
 8010cf4:	fa1c fc81 	uxtah	ip, ip, r1
 8010cf8:	4471      	add	r1, lr
 8010cfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010cfe:	b289      	uxth	r1, r1
 8010d00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010d04:	f846 1b04 	str.w	r1, [r6], #4
 8010d08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d0c:	e7dd      	b.n	8010cca <__mdiff+0xd6>
 8010d0e:	3f01      	subs	r7, #1
 8010d10:	e7e7      	b.n	8010ce2 <__mdiff+0xee>
 8010d12:	bf00      	nop
 8010d14:	08013ce4 	.word	0x08013ce4
 8010d18:	08013cf5 	.word	0x08013cf5

08010d1c <__d2b>:
 8010d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d20:	460f      	mov	r7, r1
 8010d22:	2101      	movs	r1, #1
 8010d24:	ec59 8b10 	vmov	r8, r9, d0
 8010d28:	4616      	mov	r6, r2
 8010d2a:	f7ff fccd 	bl	80106c8 <_Balloc>
 8010d2e:	4604      	mov	r4, r0
 8010d30:	b930      	cbnz	r0, 8010d40 <__d2b+0x24>
 8010d32:	4602      	mov	r2, r0
 8010d34:	4b23      	ldr	r3, [pc, #140]	@ (8010dc4 <__d2b+0xa8>)
 8010d36:	4824      	ldr	r0, [pc, #144]	@ (8010dc8 <__d2b+0xac>)
 8010d38:	f240 310f 	movw	r1, #783	@ 0x30f
 8010d3c:	f000 fa72 	bl	8011224 <__assert_func>
 8010d40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d48:	b10d      	cbz	r5, 8010d4e <__d2b+0x32>
 8010d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d4e:	9301      	str	r3, [sp, #4]
 8010d50:	f1b8 0300 	subs.w	r3, r8, #0
 8010d54:	d023      	beq.n	8010d9e <__d2b+0x82>
 8010d56:	4668      	mov	r0, sp
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	f7ff fd7c 	bl	8010856 <__lo0bits>
 8010d5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d62:	b1d0      	cbz	r0, 8010d9a <__d2b+0x7e>
 8010d64:	f1c0 0320 	rsb	r3, r0, #32
 8010d68:	fa02 f303 	lsl.w	r3, r2, r3
 8010d6c:	430b      	orrs	r3, r1
 8010d6e:	40c2      	lsrs	r2, r0
 8010d70:	6163      	str	r3, [r4, #20]
 8010d72:	9201      	str	r2, [sp, #4]
 8010d74:	9b01      	ldr	r3, [sp, #4]
 8010d76:	61a3      	str	r3, [r4, #24]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	bf0c      	ite	eq
 8010d7c:	2201      	moveq	r2, #1
 8010d7e:	2202      	movne	r2, #2
 8010d80:	6122      	str	r2, [r4, #16]
 8010d82:	b1a5      	cbz	r5, 8010dae <__d2b+0x92>
 8010d84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010d88:	4405      	add	r5, r0
 8010d8a:	603d      	str	r5, [r7, #0]
 8010d8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010d90:	6030      	str	r0, [r6, #0]
 8010d92:	4620      	mov	r0, r4
 8010d94:	b003      	add	sp, #12
 8010d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d9a:	6161      	str	r1, [r4, #20]
 8010d9c:	e7ea      	b.n	8010d74 <__d2b+0x58>
 8010d9e:	a801      	add	r0, sp, #4
 8010da0:	f7ff fd59 	bl	8010856 <__lo0bits>
 8010da4:	9b01      	ldr	r3, [sp, #4]
 8010da6:	6163      	str	r3, [r4, #20]
 8010da8:	3020      	adds	r0, #32
 8010daa:	2201      	movs	r2, #1
 8010dac:	e7e8      	b.n	8010d80 <__d2b+0x64>
 8010dae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010db2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010db6:	6038      	str	r0, [r7, #0]
 8010db8:	6918      	ldr	r0, [r3, #16]
 8010dba:	f7ff fd2d 	bl	8010818 <__hi0bits>
 8010dbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010dc2:	e7e5      	b.n	8010d90 <__d2b+0x74>
 8010dc4:	08013ce4 	.word	0x08013ce4
 8010dc8:	08013cf5 	.word	0x08013cf5

08010dcc <__ssputs_r>:
 8010dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd0:	688e      	ldr	r6, [r1, #8]
 8010dd2:	461f      	mov	r7, r3
 8010dd4:	42be      	cmp	r6, r7
 8010dd6:	680b      	ldr	r3, [r1, #0]
 8010dd8:	4682      	mov	sl, r0
 8010dda:	460c      	mov	r4, r1
 8010ddc:	4690      	mov	r8, r2
 8010dde:	d82d      	bhi.n	8010e3c <__ssputs_r+0x70>
 8010de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010de4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010de8:	d026      	beq.n	8010e38 <__ssputs_r+0x6c>
 8010dea:	6965      	ldr	r5, [r4, #20]
 8010dec:	6909      	ldr	r1, [r1, #16]
 8010dee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010df2:	eba3 0901 	sub.w	r9, r3, r1
 8010df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010dfa:	1c7b      	adds	r3, r7, #1
 8010dfc:	444b      	add	r3, r9
 8010dfe:	106d      	asrs	r5, r5, #1
 8010e00:	429d      	cmp	r5, r3
 8010e02:	bf38      	it	cc
 8010e04:	461d      	movcc	r5, r3
 8010e06:	0553      	lsls	r3, r2, #21
 8010e08:	d527      	bpl.n	8010e5a <__ssputs_r+0x8e>
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	f7fd ffc0 	bl	800ed90 <_malloc_r>
 8010e10:	4606      	mov	r6, r0
 8010e12:	b360      	cbz	r0, 8010e6e <__ssputs_r+0xa2>
 8010e14:	6921      	ldr	r1, [r4, #16]
 8010e16:	464a      	mov	r2, r9
 8010e18:	f000 f9f6 	bl	8011208 <memcpy>
 8010e1c:	89a3      	ldrh	r3, [r4, #12]
 8010e1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e26:	81a3      	strh	r3, [r4, #12]
 8010e28:	6126      	str	r6, [r4, #16]
 8010e2a:	6165      	str	r5, [r4, #20]
 8010e2c:	444e      	add	r6, r9
 8010e2e:	eba5 0509 	sub.w	r5, r5, r9
 8010e32:	6026      	str	r6, [r4, #0]
 8010e34:	60a5      	str	r5, [r4, #8]
 8010e36:	463e      	mov	r6, r7
 8010e38:	42be      	cmp	r6, r7
 8010e3a:	d900      	bls.n	8010e3e <__ssputs_r+0x72>
 8010e3c:	463e      	mov	r6, r7
 8010e3e:	6820      	ldr	r0, [r4, #0]
 8010e40:	4632      	mov	r2, r6
 8010e42:	4641      	mov	r1, r8
 8010e44:	f000 f9c6 	bl	80111d4 <memmove>
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	1b9b      	subs	r3, r3, r6
 8010e4c:	60a3      	str	r3, [r4, #8]
 8010e4e:	6823      	ldr	r3, [r4, #0]
 8010e50:	4433      	add	r3, r6
 8010e52:	6023      	str	r3, [r4, #0]
 8010e54:	2000      	movs	r0, #0
 8010e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e5a:	462a      	mov	r2, r5
 8010e5c:	f000 fa26 	bl	80112ac <_realloc_r>
 8010e60:	4606      	mov	r6, r0
 8010e62:	2800      	cmp	r0, #0
 8010e64:	d1e0      	bne.n	8010e28 <__ssputs_r+0x5c>
 8010e66:	6921      	ldr	r1, [r4, #16]
 8010e68:	4650      	mov	r0, sl
 8010e6a:	f7ff fbe3 	bl	8010634 <_free_r>
 8010e6e:	230c      	movs	r3, #12
 8010e70:	f8ca 3000 	str.w	r3, [sl]
 8010e74:	89a3      	ldrh	r3, [r4, #12]
 8010e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e7a:	81a3      	strh	r3, [r4, #12]
 8010e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e80:	e7e9      	b.n	8010e56 <__ssputs_r+0x8a>
	...

08010e84 <_svfiprintf_r>:
 8010e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e88:	4698      	mov	r8, r3
 8010e8a:	898b      	ldrh	r3, [r1, #12]
 8010e8c:	061b      	lsls	r3, r3, #24
 8010e8e:	b09d      	sub	sp, #116	@ 0x74
 8010e90:	4607      	mov	r7, r0
 8010e92:	460d      	mov	r5, r1
 8010e94:	4614      	mov	r4, r2
 8010e96:	d510      	bpl.n	8010eba <_svfiprintf_r+0x36>
 8010e98:	690b      	ldr	r3, [r1, #16]
 8010e9a:	b973      	cbnz	r3, 8010eba <_svfiprintf_r+0x36>
 8010e9c:	2140      	movs	r1, #64	@ 0x40
 8010e9e:	f7fd ff77 	bl	800ed90 <_malloc_r>
 8010ea2:	6028      	str	r0, [r5, #0]
 8010ea4:	6128      	str	r0, [r5, #16]
 8010ea6:	b930      	cbnz	r0, 8010eb6 <_svfiprintf_r+0x32>
 8010ea8:	230c      	movs	r3, #12
 8010eaa:	603b      	str	r3, [r7, #0]
 8010eac:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb0:	b01d      	add	sp, #116	@ 0x74
 8010eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb6:	2340      	movs	r3, #64	@ 0x40
 8010eb8:	616b      	str	r3, [r5, #20]
 8010eba:	2300      	movs	r3, #0
 8010ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ebe:	2320      	movs	r3, #32
 8010ec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ec8:	2330      	movs	r3, #48	@ 0x30
 8010eca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011068 <_svfiprintf_r+0x1e4>
 8010ece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ed2:	f04f 0901 	mov.w	r9, #1
 8010ed6:	4623      	mov	r3, r4
 8010ed8:	469a      	mov	sl, r3
 8010eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ede:	b10a      	cbz	r2, 8010ee4 <_svfiprintf_r+0x60>
 8010ee0:	2a25      	cmp	r2, #37	@ 0x25
 8010ee2:	d1f9      	bne.n	8010ed8 <_svfiprintf_r+0x54>
 8010ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ee8:	d00b      	beq.n	8010f02 <_svfiprintf_r+0x7e>
 8010eea:	465b      	mov	r3, fp
 8010eec:	4622      	mov	r2, r4
 8010eee:	4629      	mov	r1, r5
 8010ef0:	4638      	mov	r0, r7
 8010ef2:	f7ff ff6b 	bl	8010dcc <__ssputs_r>
 8010ef6:	3001      	adds	r0, #1
 8010ef8:	f000 80a7 	beq.w	801104a <_svfiprintf_r+0x1c6>
 8010efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010efe:	445a      	add	r2, fp
 8010f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f02:	f89a 3000 	ldrb.w	r3, [sl]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	f000 809f 	beq.w	801104a <_svfiprintf_r+0x1c6>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f16:	f10a 0a01 	add.w	sl, sl, #1
 8010f1a:	9304      	str	r3, [sp, #16]
 8010f1c:	9307      	str	r3, [sp, #28]
 8010f1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f22:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f24:	4654      	mov	r4, sl
 8010f26:	2205      	movs	r2, #5
 8010f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f2c:	484e      	ldr	r0, [pc, #312]	@ (8011068 <_svfiprintf_r+0x1e4>)
 8010f2e:	f7ef f9d7 	bl	80002e0 <memchr>
 8010f32:	9a04      	ldr	r2, [sp, #16]
 8010f34:	b9d8      	cbnz	r0, 8010f6e <_svfiprintf_r+0xea>
 8010f36:	06d0      	lsls	r0, r2, #27
 8010f38:	bf44      	itt	mi
 8010f3a:	2320      	movmi	r3, #32
 8010f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f40:	0711      	lsls	r1, r2, #28
 8010f42:	bf44      	itt	mi
 8010f44:	232b      	movmi	r3, #43	@ 0x2b
 8010f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f50:	d015      	beq.n	8010f7e <_svfiprintf_r+0xfa>
 8010f52:	9a07      	ldr	r2, [sp, #28]
 8010f54:	4654      	mov	r4, sl
 8010f56:	2000      	movs	r0, #0
 8010f58:	f04f 0c0a 	mov.w	ip, #10
 8010f5c:	4621      	mov	r1, r4
 8010f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f62:	3b30      	subs	r3, #48	@ 0x30
 8010f64:	2b09      	cmp	r3, #9
 8010f66:	d94b      	bls.n	8011000 <_svfiprintf_r+0x17c>
 8010f68:	b1b0      	cbz	r0, 8010f98 <_svfiprintf_r+0x114>
 8010f6a:	9207      	str	r2, [sp, #28]
 8010f6c:	e014      	b.n	8010f98 <_svfiprintf_r+0x114>
 8010f6e:	eba0 0308 	sub.w	r3, r0, r8
 8010f72:	fa09 f303 	lsl.w	r3, r9, r3
 8010f76:	4313      	orrs	r3, r2
 8010f78:	9304      	str	r3, [sp, #16]
 8010f7a:	46a2      	mov	sl, r4
 8010f7c:	e7d2      	b.n	8010f24 <_svfiprintf_r+0xa0>
 8010f7e:	9b03      	ldr	r3, [sp, #12]
 8010f80:	1d19      	adds	r1, r3, #4
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	9103      	str	r1, [sp, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	bfbb      	ittet	lt
 8010f8a:	425b      	neglt	r3, r3
 8010f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8010f90:	9307      	strge	r3, [sp, #28]
 8010f92:	9307      	strlt	r3, [sp, #28]
 8010f94:	bfb8      	it	lt
 8010f96:	9204      	strlt	r2, [sp, #16]
 8010f98:	7823      	ldrb	r3, [r4, #0]
 8010f9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f9c:	d10a      	bne.n	8010fb4 <_svfiprintf_r+0x130>
 8010f9e:	7863      	ldrb	r3, [r4, #1]
 8010fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fa2:	d132      	bne.n	801100a <_svfiprintf_r+0x186>
 8010fa4:	9b03      	ldr	r3, [sp, #12]
 8010fa6:	1d1a      	adds	r2, r3, #4
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	9203      	str	r2, [sp, #12]
 8010fac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010fb0:	3402      	adds	r4, #2
 8010fb2:	9305      	str	r3, [sp, #20]
 8010fb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011078 <_svfiprintf_r+0x1f4>
 8010fb8:	7821      	ldrb	r1, [r4, #0]
 8010fba:	2203      	movs	r2, #3
 8010fbc:	4650      	mov	r0, sl
 8010fbe:	f7ef f98f 	bl	80002e0 <memchr>
 8010fc2:	b138      	cbz	r0, 8010fd4 <_svfiprintf_r+0x150>
 8010fc4:	9b04      	ldr	r3, [sp, #16]
 8010fc6:	eba0 000a 	sub.w	r0, r0, sl
 8010fca:	2240      	movs	r2, #64	@ 0x40
 8010fcc:	4082      	lsls	r2, r0
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	3401      	adds	r4, #1
 8010fd2:	9304      	str	r3, [sp, #16]
 8010fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fd8:	4824      	ldr	r0, [pc, #144]	@ (801106c <_svfiprintf_r+0x1e8>)
 8010fda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fde:	2206      	movs	r2, #6
 8010fe0:	f7ef f97e 	bl	80002e0 <memchr>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d036      	beq.n	8011056 <_svfiprintf_r+0x1d2>
 8010fe8:	4b21      	ldr	r3, [pc, #132]	@ (8011070 <_svfiprintf_r+0x1ec>)
 8010fea:	bb1b      	cbnz	r3, 8011034 <_svfiprintf_r+0x1b0>
 8010fec:	9b03      	ldr	r3, [sp, #12]
 8010fee:	3307      	adds	r3, #7
 8010ff0:	f023 0307 	bic.w	r3, r3, #7
 8010ff4:	3308      	adds	r3, #8
 8010ff6:	9303      	str	r3, [sp, #12]
 8010ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ffa:	4433      	add	r3, r6
 8010ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ffe:	e76a      	b.n	8010ed6 <_svfiprintf_r+0x52>
 8011000:	fb0c 3202 	mla	r2, ip, r2, r3
 8011004:	460c      	mov	r4, r1
 8011006:	2001      	movs	r0, #1
 8011008:	e7a8      	b.n	8010f5c <_svfiprintf_r+0xd8>
 801100a:	2300      	movs	r3, #0
 801100c:	3401      	adds	r4, #1
 801100e:	9305      	str	r3, [sp, #20]
 8011010:	4619      	mov	r1, r3
 8011012:	f04f 0c0a 	mov.w	ip, #10
 8011016:	4620      	mov	r0, r4
 8011018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801101c:	3a30      	subs	r2, #48	@ 0x30
 801101e:	2a09      	cmp	r2, #9
 8011020:	d903      	bls.n	801102a <_svfiprintf_r+0x1a6>
 8011022:	2b00      	cmp	r3, #0
 8011024:	d0c6      	beq.n	8010fb4 <_svfiprintf_r+0x130>
 8011026:	9105      	str	r1, [sp, #20]
 8011028:	e7c4      	b.n	8010fb4 <_svfiprintf_r+0x130>
 801102a:	fb0c 2101 	mla	r1, ip, r1, r2
 801102e:	4604      	mov	r4, r0
 8011030:	2301      	movs	r3, #1
 8011032:	e7f0      	b.n	8011016 <_svfiprintf_r+0x192>
 8011034:	ab03      	add	r3, sp, #12
 8011036:	9300      	str	r3, [sp, #0]
 8011038:	462a      	mov	r2, r5
 801103a:	4b0e      	ldr	r3, [pc, #56]	@ (8011074 <_svfiprintf_r+0x1f0>)
 801103c:	a904      	add	r1, sp, #16
 801103e:	4638      	mov	r0, r7
 8011040:	f7fd ffc2 	bl	800efc8 <_printf_float>
 8011044:	1c42      	adds	r2, r0, #1
 8011046:	4606      	mov	r6, r0
 8011048:	d1d6      	bne.n	8010ff8 <_svfiprintf_r+0x174>
 801104a:	89ab      	ldrh	r3, [r5, #12]
 801104c:	065b      	lsls	r3, r3, #25
 801104e:	f53f af2d 	bmi.w	8010eac <_svfiprintf_r+0x28>
 8011052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011054:	e72c      	b.n	8010eb0 <_svfiprintf_r+0x2c>
 8011056:	ab03      	add	r3, sp, #12
 8011058:	9300      	str	r3, [sp, #0]
 801105a:	462a      	mov	r2, r5
 801105c:	4b05      	ldr	r3, [pc, #20]	@ (8011074 <_svfiprintf_r+0x1f0>)
 801105e:	a904      	add	r1, sp, #16
 8011060:	4638      	mov	r0, r7
 8011062:	f7fe fa39 	bl	800f4d8 <_printf_i>
 8011066:	e7ed      	b.n	8011044 <_svfiprintf_r+0x1c0>
 8011068:	08013e50 	.word	0x08013e50
 801106c:	08013e5a 	.word	0x08013e5a
 8011070:	0800efc9 	.word	0x0800efc9
 8011074:	08010dcd 	.word	0x08010dcd
 8011078:	08013e56 	.word	0x08013e56

0801107c <__sflush_r>:
 801107c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011084:	0716      	lsls	r6, r2, #28
 8011086:	4605      	mov	r5, r0
 8011088:	460c      	mov	r4, r1
 801108a:	d454      	bmi.n	8011136 <__sflush_r+0xba>
 801108c:	684b      	ldr	r3, [r1, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	dc02      	bgt.n	8011098 <__sflush_r+0x1c>
 8011092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011094:	2b00      	cmp	r3, #0
 8011096:	dd48      	ble.n	801112a <__sflush_r+0xae>
 8011098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801109a:	2e00      	cmp	r6, #0
 801109c:	d045      	beq.n	801112a <__sflush_r+0xae>
 801109e:	2300      	movs	r3, #0
 80110a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110a4:	682f      	ldr	r7, [r5, #0]
 80110a6:	6a21      	ldr	r1, [r4, #32]
 80110a8:	602b      	str	r3, [r5, #0]
 80110aa:	d030      	beq.n	801110e <__sflush_r+0x92>
 80110ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110ae:	89a3      	ldrh	r3, [r4, #12]
 80110b0:	0759      	lsls	r1, r3, #29
 80110b2:	d505      	bpl.n	80110c0 <__sflush_r+0x44>
 80110b4:	6863      	ldr	r3, [r4, #4]
 80110b6:	1ad2      	subs	r2, r2, r3
 80110b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110ba:	b10b      	cbz	r3, 80110c0 <__sflush_r+0x44>
 80110bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80110be:	1ad2      	subs	r2, r2, r3
 80110c0:	2300      	movs	r3, #0
 80110c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110c4:	6a21      	ldr	r1, [r4, #32]
 80110c6:	4628      	mov	r0, r5
 80110c8:	47b0      	blx	r6
 80110ca:	1c43      	adds	r3, r0, #1
 80110cc:	89a3      	ldrh	r3, [r4, #12]
 80110ce:	d106      	bne.n	80110de <__sflush_r+0x62>
 80110d0:	6829      	ldr	r1, [r5, #0]
 80110d2:	291d      	cmp	r1, #29
 80110d4:	d82b      	bhi.n	801112e <__sflush_r+0xb2>
 80110d6:	4a2a      	ldr	r2, [pc, #168]	@ (8011180 <__sflush_r+0x104>)
 80110d8:	410a      	asrs	r2, r1
 80110da:	07d6      	lsls	r6, r2, #31
 80110dc:	d427      	bmi.n	801112e <__sflush_r+0xb2>
 80110de:	2200      	movs	r2, #0
 80110e0:	6062      	str	r2, [r4, #4]
 80110e2:	04d9      	lsls	r1, r3, #19
 80110e4:	6922      	ldr	r2, [r4, #16]
 80110e6:	6022      	str	r2, [r4, #0]
 80110e8:	d504      	bpl.n	80110f4 <__sflush_r+0x78>
 80110ea:	1c42      	adds	r2, r0, #1
 80110ec:	d101      	bne.n	80110f2 <__sflush_r+0x76>
 80110ee:	682b      	ldr	r3, [r5, #0]
 80110f0:	b903      	cbnz	r3, 80110f4 <__sflush_r+0x78>
 80110f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80110f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110f6:	602f      	str	r7, [r5, #0]
 80110f8:	b1b9      	cbz	r1, 801112a <__sflush_r+0xae>
 80110fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110fe:	4299      	cmp	r1, r3
 8011100:	d002      	beq.n	8011108 <__sflush_r+0x8c>
 8011102:	4628      	mov	r0, r5
 8011104:	f7ff fa96 	bl	8010634 <_free_r>
 8011108:	2300      	movs	r3, #0
 801110a:	6363      	str	r3, [r4, #52]	@ 0x34
 801110c:	e00d      	b.n	801112a <__sflush_r+0xae>
 801110e:	2301      	movs	r3, #1
 8011110:	4628      	mov	r0, r5
 8011112:	47b0      	blx	r6
 8011114:	4602      	mov	r2, r0
 8011116:	1c50      	adds	r0, r2, #1
 8011118:	d1c9      	bne.n	80110ae <__sflush_r+0x32>
 801111a:	682b      	ldr	r3, [r5, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d0c6      	beq.n	80110ae <__sflush_r+0x32>
 8011120:	2b1d      	cmp	r3, #29
 8011122:	d001      	beq.n	8011128 <__sflush_r+0xac>
 8011124:	2b16      	cmp	r3, #22
 8011126:	d11e      	bne.n	8011166 <__sflush_r+0xea>
 8011128:	602f      	str	r7, [r5, #0]
 801112a:	2000      	movs	r0, #0
 801112c:	e022      	b.n	8011174 <__sflush_r+0xf8>
 801112e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011132:	b21b      	sxth	r3, r3
 8011134:	e01b      	b.n	801116e <__sflush_r+0xf2>
 8011136:	690f      	ldr	r7, [r1, #16]
 8011138:	2f00      	cmp	r7, #0
 801113a:	d0f6      	beq.n	801112a <__sflush_r+0xae>
 801113c:	0793      	lsls	r3, r2, #30
 801113e:	680e      	ldr	r6, [r1, #0]
 8011140:	bf08      	it	eq
 8011142:	694b      	ldreq	r3, [r1, #20]
 8011144:	600f      	str	r7, [r1, #0]
 8011146:	bf18      	it	ne
 8011148:	2300      	movne	r3, #0
 801114a:	eba6 0807 	sub.w	r8, r6, r7
 801114e:	608b      	str	r3, [r1, #8]
 8011150:	f1b8 0f00 	cmp.w	r8, #0
 8011154:	dde9      	ble.n	801112a <__sflush_r+0xae>
 8011156:	6a21      	ldr	r1, [r4, #32]
 8011158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801115a:	4643      	mov	r3, r8
 801115c:	463a      	mov	r2, r7
 801115e:	4628      	mov	r0, r5
 8011160:	47b0      	blx	r6
 8011162:	2800      	cmp	r0, #0
 8011164:	dc08      	bgt.n	8011178 <__sflush_r+0xfc>
 8011166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801116a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801116e:	81a3      	strh	r3, [r4, #12]
 8011170:	f04f 30ff 	mov.w	r0, #4294967295
 8011174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011178:	4407      	add	r7, r0
 801117a:	eba8 0800 	sub.w	r8, r8, r0
 801117e:	e7e7      	b.n	8011150 <__sflush_r+0xd4>
 8011180:	dfbffffe 	.word	0xdfbffffe

08011184 <_fflush_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	690b      	ldr	r3, [r1, #16]
 8011188:	4605      	mov	r5, r0
 801118a:	460c      	mov	r4, r1
 801118c:	b913      	cbnz	r3, 8011194 <_fflush_r+0x10>
 801118e:	2500      	movs	r5, #0
 8011190:	4628      	mov	r0, r5
 8011192:	bd38      	pop	{r3, r4, r5, pc}
 8011194:	b118      	cbz	r0, 801119e <_fflush_r+0x1a>
 8011196:	6a03      	ldr	r3, [r0, #32]
 8011198:	b90b      	cbnz	r3, 801119e <_fflush_r+0x1a>
 801119a:	f7fe fb49 	bl	800f830 <__sinit>
 801119e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0f3      	beq.n	801118e <_fflush_r+0xa>
 80111a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111a8:	07d0      	lsls	r0, r2, #31
 80111aa:	d404      	bmi.n	80111b6 <_fflush_r+0x32>
 80111ac:	0599      	lsls	r1, r3, #22
 80111ae:	d402      	bmi.n	80111b6 <_fflush_r+0x32>
 80111b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111b2:	f7fe fc5e 	bl	800fa72 <__retarget_lock_acquire_recursive>
 80111b6:	4628      	mov	r0, r5
 80111b8:	4621      	mov	r1, r4
 80111ba:	f7ff ff5f 	bl	801107c <__sflush_r>
 80111be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111c0:	07da      	lsls	r2, r3, #31
 80111c2:	4605      	mov	r5, r0
 80111c4:	d4e4      	bmi.n	8011190 <_fflush_r+0xc>
 80111c6:	89a3      	ldrh	r3, [r4, #12]
 80111c8:	059b      	lsls	r3, r3, #22
 80111ca:	d4e1      	bmi.n	8011190 <_fflush_r+0xc>
 80111cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111ce:	f7fe fc51 	bl	800fa74 <__retarget_lock_release_recursive>
 80111d2:	e7dd      	b.n	8011190 <_fflush_r+0xc>

080111d4 <memmove>:
 80111d4:	4288      	cmp	r0, r1
 80111d6:	b510      	push	{r4, lr}
 80111d8:	eb01 0402 	add.w	r4, r1, r2
 80111dc:	d902      	bls.n	80111e4 <memmove+0x10>
 80111de:	4284      	cmp	r4, r0
 80111e0:	4623      	mov	r3, r4
 80111e2:	d807      	bhi.n	80111f4 <memmove+0x20>
 80111e4:	1e43      	subs	r3, r0, #1
 80111e6:	42a1      	cmp	r1, r4
 80111e8:	d008      	beq.n	80111fc <memmove+0x28>
 80111ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111f2:	e7f8      	b.n	80111e6 <memmove+0x12>
 80111f4:	4402      	add	r2, r0
 80111f6:	4601      	mov	r1, r0
 80111f8:	428a      	cmp	r2, r1
 80111fa:	d100      	bne.n	80111fe <memmove+0x2a>
 80111fc:	bd10      	pop	{r4, pc}
 80111fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011206:	e7f7      	b.n	80111f8 <memmove+0x24>

08011208 <memcpy>:
 8011208:	440a      	add	r2, r1
 801120a:	4291      	cmp	r1, r2
 801120c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011210:	d100      	bne.n	8011214 <memcpy+0xc>
 8011212:	4770      	bx	lr
 8011214:	b510      	push	{r4, lr}
 8011216:	f811 4b01 	ldrb.w	r4, [r1], #1
 801121a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801121e:	4291      	cmp	r1, r2
 8011220:	d1f9      	bne.n	8011216 <memcpy+0xe>
 8011222:	bd10      	pop	{r4, pc}

08011224 <__assert_func>:
 8011224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011226:	4614      	mov	r4, r2
 8011228:	461a      	mov	r2, r3
 801122a:	4b09      	ldr	r3, [pc, #36]	@ (8011250 <__assert_func+0x2c>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	4605      	mov	r5, r0
 8011230:	68d8      	ldr	r0, [r3, #12]
 8011232:	b954      	cbnz	r4, 801124a <__assert_func+0x26>
 8011234:	4b07      	ldr	r3, [pc, #28]	@ (8011254 <__assert_func+0x30>)
 8011236:	461c      	mov	r4, r3
 8011238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801123c:	9100      	str	r1, [sp, #0]
 801123e:	462b      	mov	r3, r5
 8011240:	4905      	ldr	r1, [pc, #20]	@ (8011258 <__assert_func+0x34>)
 8011242:	f000 f86f 	bl	8011324 <fiprintf>
 8011246:	f000 f87f 	bl	8011348 <abort>
 801124a:	4b04      	ldr	r3, [pc, #16]	@ (801125c <__assert_func+0x38>)
 801124c:	e7f4      	b.n	8011238 <__assert_func+0x14>
 801124e:	bf00      	nop
 8011250:	24000110 	.word	0x24000110
 8011254:	08013ea6 	.word	0x08013ea6
 8011258:	08013e78 	.word	0x08013e78
 801125c:	08013e6b 	.word	0x08013e6b

08011260 <_calloc_r>:
 8011260:	b570      	push	{r4, r5, r6, lr}
 8011262:	fba1 5402 	umull	r5, r4, r1, r2
 8011266:	b93c      	cbnz	r4, 8011278 <_calloc_r+0x18>
 8011268:	4629      	mov	r1, r5
 801126a:	f7fd fd91 	bl	800ed90 <_malloc_r>
 801126e:	4606      	mov	r6, r0
 8011270:	b928      	cbnz	r0, 801127e <_calloc_r+0x1e>
 8011272:	2600      	movs	r6, #0
 8011274:	4630      	mov	r0, r6
 8011276:	bd70      	pop	{r4, r5, r6, pc}
 8011278:	220c      	movs	r2, #12
 801127a:	6002      	str	r2, [r0, #0]
 801127c:	e7f9      	b.n	8011272 <_calloc_r+0x12>
 801127e:	462a      	mov	r2, r5
 8011280:	4621      	mov	r1, r4
 8011282:	f7fe fb6e 	bl	800f962 <memset>
 8011286:	e7f5      	b.n	8011274 <_calloc_r+0x14>

08011288 <__ascii_mbtowc>:
 8011288:	b082      	sub	sp, #8
 801128a:	b901      	cbnz	r1, 801128e <__ascii_mbtowc+0x6>
 801128c:	a901      	add	r1, sp, #4
 801128e:	b142      	cbz	r2, 80112a2 <__ascii_mbtowc+0x1a>
 8011290:	b14b      	cbz	r3, 80112a6 <__ascii_mbtowc+0x1e>
 8011292:	7813      	ldrb	r3, [r2, #0]
 8011294:	600b      	str	r3, [r1, #0]
 8011296:	7812      	ldrb	r2, [r2, #0]
 8011298:	1e10      	subs	r0, r2, #0
 801129a:	bf18      	it	ne
 801129c:	2001      	movne	r0, #1
 801129e:	b002      	add	sp, #8
 80112a0:	4770      	bx	lr
 80112a2:	4610      	mov	r0, r2
 80112a4:	e7fb      	b.n	801129e <__ascii_mbtowc+0x16>
 80112a6:	f06f 0001 	mvn.w	r0, #1
 80112aa:	e7f8      	b.n	801129e <__ascii_mbtowc+0x16>

080112ac <_realloc_r>:
 80112ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112b0:	4680      	mov	r8, r0
 80112b2:	4615      	mov	r5, r2
 80112b4:	460c      	mov	r4, r1
 80112b6:	b921      	cbnz	r1, 80112c2 <_realloc_r+0x16>
 80112b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112bc:	4611      	mov	r1, r2
 80112be:	f7fd bd67 	b.w	800ed90 <_malloc_r>
 80112c2:	b92a      	cbnz	r2, 80112d0 <_realloc_r+0x24>
 80112c4:	f7ff f9b6 	bl	8010634 <_free_r>
 80112c8:	2400      	movs	r4, #0
 80112ca:	4620      	mov	r0, r4
 80112cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d0:	f000 f841 	bl	8011356 <_malloc_usable_size_r>
 80112d4:	4285      	cmp	r5, r0
 80112d6:	4606      	mov	r6, r0
 80112d8:	d802      	bhi.n	80112e0 <_realloc_r+0x34>
 80112da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80112de:	d8f4      	bhi.n	80112ca <_realloc_r+0x1e>
 80112e0:	4629      	mov	r1, r5
 80112e2:	4640      	mov	r0, r8
 80112e4:	f7fd fd54 	bl	800ed90 <_malloc_r>
 80112e8:	4607      	mov	r7, r0
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d0ec      	beq.n	80112c8 <_realloc_r+0x1c>
 80112ee:	42b5      	cmp	r5, r6
 80112f0:	462a      	mov	r2, r5
 80112f2:	4621      	mov	r1, r4
 80112f4:	bf28      	it	cs
 80112f6:	4632      	movcs	r2, r6
 80112f8:	f7ff ff86 	bl	8011208 <memcpy>
 80112fc:	4621      	mov	r1, r4
 80112fe:	4640      	mov	r0, r8
 8011300:	f7ff f998 	bl	8010634 <_free_r>
 8011304:	463c      	mov	r4, r7
 8011306:	e7e0      	b.n	80112ca <_realloc_r+0x1e>

08011308 <__ascii_wctomb>:
 8011308:	4603      	mov	r3, r0
 801130a:	4608      	mov	r0, r1
 801130c:	b141      	cbz	r1, 8011320 <__ascii_wctomb+0x18>
 801130e:	2aff      	cmp	r2, #255	@ 0xff
 8011310:	d904      	bls.n	801131c <__ascii_wctomb+0x14>
 8011312:	228a      	movs	r2, #138	@ 0x8a
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	f04f 30ff 	mov.w	r0, #4294967295
 801131a:	4770      	bx	lr
 801131c:	700a      	strb	r2, [r1, #0]
 801131e:	2001      	movs	r0, #1
 8011320:	4770      	bx	lr
	...

08011324 <fiprintf>:
 8011324:	b40e      	push	{r1, r2, r3}
 8011326:	b503      	push	{r0, r1, lr}
 8011328:	4601      	mov	r1, r0
 801132a:	ab03      	add	r3, sp, #12
 801132c:	4805      	ldr	r0, [pc, #20]	@ (8011344 <fiprintf+0x20>)
 801132e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011332:	6800      	ldr	r0, [r0, #0]
 8011334:	9301      	str	r3, [sp, #4]
 8011336:	f000 f83f 	bl	80113b8 <_vfiprintf_r>
 801133a:	b002      	add	sp, #8
 801133c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011340:	b003      	add	sp, #12
 8011342:	4770      	bx	lr
 8011344:	24000110 	.word	0x24000110

08011348 <abort>:
 8011348:	b508      	push	{r3, lr}
 801134a:	2006      	movs	r0, #6
 801134c:	f000 fa08 	bl	8011760 <raise>
 8011350:	2001      	movs	r0, #1
 8011352:	f000 fc0d 	bl	8011b70 <_exit>

08011356 <_malloc_usable_size_r>:
 8011356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801135a:	1f18      	subs	r0, r3, #4
 801135c:	2b00      	cmp	r3, #0
 801135e:	bfbc      	itt	lt
 8011360:	580b      	ldrlt	r3, [r1, r0]
 8011362:	18c0      	addlt	r0, r0, r3
 8011364:	4770      	bx	lr

08011366 <__sfputc_r>:
 8011366:	6893      	ldr	r3, [r2, #8]
 8011368:	3b01      	subs	r3, #1
 801136a:	2b00      	cmp	r3, #0
 801136c:	b410      	push	{r4}
 801136e:	6093      	str	r3, [r2, #8]
 8011370:	da08      	bge.n	8011384 <__sfputc_r+0x1e>
 8011372:	6994      	ldr	r4, [r2, #24]
 8011374:	42a3      	cmp	r3, r4
 8011376:	db01      	blt.n	801137c <__sfputc_r+0x16>
 8011378:	290a      	cmp	r1, #10
 801137a:	d103      	bne.n	8011384 <__sfputc_r+0x1e>
 801137c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011380:	f000 b932 	b.w	80115e8 <__swbuf_r>
 8011384:	6813      	ldr	r3, [r2, #0]
 8011386:	1c58      	adds	r0, r3, #1
 8011388:	6010      	str	r0, [r2, #0]
 801138a:	7019      	strb	r1, [r3, #0]
 801138c:	4608      	mov	r0, r1
 801138e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011392:	4770      	bx	lr

08011394 <__sfputs_r>:
 8011394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011396:	4606      	mov	r6, r0
 8011398:	460f      	mov	r7, r1
 801139a:	4614      	mov	r4, r2
 801139c:	18d5      	adds	r5, r2, r3
 801139e:	42ac      	cmp	r4, r5
 80113a0:	d101      	bne.n	80113a6 <__sfputs_r+0x12>
 80113a2:	2000      	movs	r0, #0
 80113a4:	e007      	b.n	80113b6 <__sfputs_r+0x22>
 80113a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113aa:	463a      	mov	r2, r7
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7ff ffda 	bl	8011366 <__sfputc_r>
 80113b2:	1c43      	adds	r3, r0, #1
 80113b4:	d1f3      	bne.n	801139e <__sfputs_r+0xa>
 80113b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113b8 <_vfiprintf_r>:
 80113b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113bc:	460d      	mov	r5, r1
 80113be:	b09d      	sub	sp, #116	@ 0x74
 80113c0:	4614      	mov	r4, r2
 80113c2:	4698      	mov	r8, r3
 80113c4:	4606      	mov	r6, r0
 80113c6:	b118      	cbz	r0, 80113d0 <_vfiprintf_r+0x18>
 80113c8:	6a03      	ldr	r3, [r0, #32]
 80113ca:	b90b      	cbnz	r3, 80113d0 <_vfiprintf_r+0x18>
 80113cc:	f7fe fa30 	bl	800f830 <__sinit>
 80113d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113d2:	07d9      	lsls	r1, r3, #31
 80113d4:	d405      	bmi.n	80113e2 <_vfiprintf_r+0x2a>
 80113d6:	89ab      	ldrh	r3, [r5, #12]
 80113d8:	059a      	lsls	r2, r3, #22
 80113da:	d402      	bmi.n	80113e2 <_vfiprintf_r+0x2a>
 80113dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113de:	f7fe fb48 	bl	800fa72 <__retarget_lock_acquire_recursive>
 80113e2:	89ab      	ldrh	r3, [r5, #12]
 80113e4:	071b      	lsls	r3, r3, #28
 80113e6:	d501      	bpl.n	80113ec <_vfiprintf_r+0x34>
 80113e8:	692b      	ldr	r3, [r5, #16]
 80113ea:	b99b      	cbnz	r3, 8011414 <_vfiprintf_r+0x5c>
 80113ec:	4629      	mov	r1, r5
 80113ee:	4630      	mov	r0, r6
 80113f0:	f000 f938 	bl	8011664 <__swsetup_r>
 80113f4:	b170      	cbz	r0, 8011414 <_vfiprintf_r+0x5c>
 80113f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113f8:	07dc      	lsls	r4, r3, #31
 80113fa:	d504      	bpl.n	8011406 <_vfiprintf_r+0x4e>
 80113fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011400:	b01d      	add	sp, #116	@ 0x74
 8011402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011406:	89ab      	ldrh	r3, [r5, #12]
 8011408:	0598      	lsls	r0, r3, #22
 801140a:	d4f7      	bmi.n	80113fc <_vfiprintf_r+0x44>
 801140c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801140e:	f7fe fb31 	bl	800fa74 <__retarget_lock_release_recursive>
 8011412:	e7f3      	b.n	80113fc <_vfiprintf_r+0x44>
 8011414:	2300      	movs	r3, #0
 8011416:	9309      	str	r3, [sp, #36]	@ 0x24
 8011418:	2320      	movs	r3, #32
 801141a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801141e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011422:	2330      	movs	r3, #48	@ 0x30
 8011424:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80115d4 <_vfiprintf_r+0x21c>
 8011428:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801142c:	f04f 0901 	mov.w	r9, #1
 8011430:	4623      	mov	r3, r4
 8011432:	469a      	mov	sl, r3
 8011434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011438:	b10a      	cbz	r2, 801143e <_vfiprintf_r+0x86>
 801143a:	2a25      	cmp	r2, #37	@ 0x25
 801143c:	d1f9      	bne.n	8011432 <_vfiprintf_r+0x7a>
 801143e:	ebba 0b04 	subs.w	fp, sl, r4
 8011442:	d00b      	beq.n	801145c <_vfiprintf_r+0xa4>
 8011444:	465b      	mov	r3, fp
 8011446:	4622      	mov	r2, r4
 8011448:	4629      	mov	r1, r5
 801144a:	4630      	mov	r0, r6
 801144c:	f7ff ffa2 	bl	8011394 <__sfputs_r>
 8011450:	3001      	adds	r0, #1
 8011452:	f000 80a7 	beq.w	80115a4 <_vfiprintf_r+0x1ec>
 8011456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011458:	445a      	add	r2, fp
 801145a:	9209      	str	r2, [sp, #36]	@ 0x24
 801145c:	f89a 3000 	ldrb.w	r3, [sl]
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 809f 	beq.w	80115a4 <_vfiprintf_r+0x1ec>
 8011466:	2300      	movs	r3, #0
 8011468:	f04f 32ff 	mov.w	r2, #4294967295
 801146c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011470:	f10a 0a01 	add.w	sl, sl, #1
 8011474:	9304      	str	r3, [sp, #16]
 8011476:	9307      	str	r3, [sp, #28]
 8011478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801147c:	931a      	str	r3, [sp, #104]	@ 0x68
 801147e:	4654      	mov	r4, sl
 8011480:	2205      	movs	r2, #5
 8011482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011486:	4853      	ldr	r0, [pc, #332]	@ (80115d4 <_vfiprintf_r+0x21c>)
 8011488:	f7ee ff2a 	bl	80002e0 <memchr>
 801148c:	9a04      	ldr	r2, [sp, #16]
 801148e:	b9d8      	cbnz	r0, 80114c8 <_vfiprintf_r+0x110>
 8011490:	06d1      	lsls	r1, r2, #27
 8011492:	bf44      	itt	mi
 8011494:	2320      	movmi	r3, #32
 8011496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801149a:	0713      	lsls	r3, r2, #28
 801149c:	bf44      	itt	mi
 801149e:	232b      	movmi	r3, #43	@ 0x2b
 80114a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114a4:	f89a 3000 	ldrb.w	r3, [sl]
 80114a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80114aa:	d015      	beq.n	80114d8 <_vfiprintf_r+0x120>
 80114ac:	9a07      	ldr	r2, [sp, #28]
 80114ae:	4654      	mov	r4, sl
 80114b0:	2000      	movs	r0, #0
 80114b2:	f04f 0c0a 	mov.w	ip, #10
 80114b6:	4621      	mov	r1, r4
 80114b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114bc:	3b30      	subs	r3, #48	@ 0x30
 80114be:	2b09      	cmp	r3, #9
 80114c0:	d94b      	bls.n	801155a <_vfiprintf_r+0x1a2>
 80114c2:	b1b0      	cbz	r0, 80114f2 <_vfiprintf_r+0x13a>
 80114c4:	9207      	str	r2, [sp, #28]
 80114c6:	e014      	b.n	80114f2 <_vfiprintf_r+0x13a>
 80114c8:	eba0 0308 	sub.w	r3, r0, r8
 80114cc:	fa09 f303 	lsl.w	r3, r9, r3
 80114d0:	4313      	orrs	r3, r2
 80114d2:	9304      	str	r3, [sp, #16]
 80114d4:	46a2      	mov	sl, r4
 80114d6:	e7d2      	b.n	801147e <_vfiprintf_r+0xc6>
 80114d8:	9b03      	ldr	r3, [sp, #12]
 80114da:	1d19      	adds	r1, r3, #4
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	9103      	str	r1, [sp, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	bfbb      	ittet	lt
 80114e4:	425b      	neglt	r3, r3
 80114e6:	f042 0202 	orrlt.w	r2, r2, #2
 80114ea:	9307      	strge	r3, [sp, #28]
 80114ec:	9307      	strlt	r3, [sp, #28]
 80114ee:	bfb8      	it	lt
 80114f0:	9204      	strlt	r2, [sp, #16]
 80114f2:	7823      	ldrb	r3, [r4, #0]
 80114f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80114f6:	d10a      	bne.n	801150e <_vfiprintf_r+0x156>
 80114f8:	7863      	ldrb	r3, [r4, #1]
 80114fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80114fc:	d132      	bne.n	8011564 <_vfiprintf_r+0x1ac>
 80114fe:	9b03      	ldr	r3, [sp, #12]
 8011500:	1d1a      	adds	r2, r3, #4
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	9203      	str	r2, [sp, #12]
 8011506:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801150a:	3402      	adds	r4, #2
 801150c:	9305      	str	r3, [sp, #20]
 801150e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80115e4 <_vfiprintf_r+0x22c>
 8011512:	7821      	ldrb	r1, [r4, #0]
 8011514:	2203      	movs	r2, #3
 8011516:	4650      	mov	r0, sl
 8011518:	f7ee fee2 	bl	80002e0 <memchr>
 801151c:	b138      	cbz	r0, 801152e <_vfiprintf_r+0x176>
 801151e:	9b04      	ldr	r3, [sp, #16]
 8011520:	eba0 000a 	sub.w	r0, r0, sl
 8011524:	2240      	movs	r2, #64	@ 0x40
 8011526:	4082      	lsls	r2, r0
 8011528:	4313      	orrs	r3, r2
 801152a:	3401      	adds	r4, #1
 801152c:	9304      	str	r3, [sp, #16]
 801152e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011532:	4829      	ldr	r0, [pc, #164]	@ (80115d8 <_vfiprintf_r+0x220>)
 8011534:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011538:	2206      	movs	r2, #6
 801153a:	f7ee fed1 	bl	80002e0 <memchr>
 801153e:	2800      	cmp	r0, #0
 8011540:	d03f      	beq.n	80115c2 <_vfiprintf_r+0x20a>
 8011542:	4b26      	ldr	r3, [pc, #152]	@ (80115dc <_vfiprintf_r+0x224>)
 8011544:	bb1b      	cbnz	r3, 801158e <_vfiprintf_r+0x1d6>
 8011546:	9b03      	ldr	r3, [sp, #12]
 8011548:	3307      	adds	r3, #7
 801154a:	f023 0307 	bic.w	r3, r3, #7
 801154e:	3308      	adds	r3, #8
 8011550:	9303      	str	r3, [sp, #12]
 8011552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011554:	443b      	add	r3, r7
 8011556:	9309      	str	r3, [sp, #36]	@ 0x24
 8011558:	e76a      	b.n	8011430 <_vfiprintf_r+0x78>
 801155a:	fb0c 3202 	mla	r2, ip, r2, r3
 801155e:	460c      	mov	r4, r1
 8011560:	2001      	movs	r0, #1
 8011562:	e7a8      	b.n	80114b6 <_vfiprintf_r+0xfe>
 8011564:	2300      	movs	r3, #0
 8011566:	3401      	adds	r4, #1
 8011568:	9305      	str	r3, [sp, #20]
 801156a:	4619      	mov	r1, r3
 801156c:	f04f 0c0a 	mov.w	ip, #10
 8011570:	4620      	mov	r0, r4
 8011572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011576:	3a30      	subs	r2, #48	@ 0x30
 8011578:	2a09      	cmp	r2, #9
 801157a:	d903      	bls.n	8011584 <_vfiprintf_r+0x1cc>
 801157c:	2b00      	cmp	r3, #0
 801157e:	d0c6      	beq.n	801150e <_vfiprintf_r+0x156>
 8011580:	9105      	str	r1, [sp, #20]
 8011582:	e7c4      	b.n	801150e <_vfiprintf_r+0x156>
 8011584:	fb0c 2101 	mla	r1, ip, r1, r2
 8011588:	4604      	mov	r4, r0
 801158a:	2301      	movs	r3, #1
 801158c:	e7f0      	b.n	8011570 <_vfiprintf_r+0x1b8>
 801158e:	ab03      	add	r3, sp, #12
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	462a      	mov	r2, r5
 8011594:	4b12      	ldr	r3, [pc, #72]	@ (80115e0 <_vfiprintf_r+0x228>)
 8011596:	a904      	add	r1, sp, #16
 8011598:	4630      	mov	r0, r6
 801159a:	f7fd fd15 	bl	800efc8 <_printf_float>
 801159e:	4607      	mov	r7, r0
 80115a0:	1c78      	adds	r0, r7, #1
 80115a2:	d1d6      	bne.n	8011552 <_vfiprintf_r+0x19a>
 80115a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80115a6:	07d9      	lsls	r1, r3, #31
 80115a8:	d405      	bmi.n	80115b6 <_vfiprintf_r+0x1fe>
 80115aa:	89ab      	ldrh	r3, [r5, #12]
 80115ac:	059a      	lsls	r2, r3, #22
 80115ae:	d402      	bmi.n	80115b6 <_vfiprintf_r+0x1fe>
 80115b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80115b2:	f7fe fa5f 	bl	800fa74 <__retarget_lock_release_recursive>
 80115b6:	89ab      	ldrh	r3, [r5, #12]
 80115b8:	065b      	lsls	r3, r3, #25
 80115ba:	f53f af1f 	bmi.w	80113fc <_vfiprintf_r+0x44>
 80115be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115c0:	e71e      	b.n	8011400 <_vfiprintf_r+0x48>
 80115c2:	ab03      	add	r3, sp, #12
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	462a      	mov	r2, r5
 80115c8:	4b05      	ldr	r3, [pc, #20]	@ (80115e0 <_vfiprintf_r+0x228>)
 80115ca:	a904      	add	r1, sp, #16
 80115cc:	4630      	mov	r0, r6
 80115ce:	f7fd ff83 	bl	800f4d8 <_printf_i>
 80115d2:	e7e4      	b.n	801159e <_vfiprintf_r+0x1e6>
 80115d4:	08013e50 	.word	0x08013e50
 80115d8:	08013e5a 	.word	0x08013e5a
 80115dc:	0800efc9 	.word	0x0800efc9
 80115e0:	08011395 	.word	0x08011395
 80115e4:	08013e56 	.word	0x08013e56

080115e8 <__swbuf_r>:
 80115e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ea:	460e      	mov	r6, r1
 80115ec:	4614      	mov	r4, r2
 80115ee:	4605      	mov	r5, r0
 80115f0:	b118      	cbz	r0, 80115fa <__swbuf_r+0x12>
 80115f2:	6a03      	ldr	r3, [r0, #32]
 80115f4:	b90b      	cbnz	r3, 80115fa <__swbuf_r+0x12>
 80115f6:	f7fe f91b 	bl	800f830 <__sinit>
 80115fa:	69a3      	ldr	r3, [r4, #24]
 80115fc:	60a3      	str	r3, [r4, #8]
 80115fe:	89a3      	ldrh	r3, [r4, #12]
 8011600:	071a      	lsls	r2, r3, #28
 8011602:	d501      	bpl.n	8011608 <__swbuf_r+0x20>
 8011604:	6923      	ldr	r3, [r4, #16]
 8011606:	b943      	cbnz	r3, 801161a <__swbuf_r+0x32>
 8011608:	4621      	mov	r1, r4
 801160a:	4628      	mov	r0, r5
 801160c:	f000 f82a 	bl	8011664 <__swsetup_r>
 8011610:	b118      	cbz	r0, 801161a <__swbuf_r+0x32>
 8011612:	f04f 37ff 	mov.w	r7, #4294967295
 8011616:	4638      	mov	r0, r7
 8011618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161a:	6823      	ldr	r3, [r4, #0]
 801161c:	6922      	ldr	r2, [r4, #16]
 801161e:	1a98      	subs	r0, r3, r2
 8011620:	6963      	ldr	r3, [r4, #20]
 8011622:	b2f6      	uxtb	r6, r6
 8011624:	4283      	cmp	r3, r0
 8011626:	4637      	mov	r7, r6
 8011628:	dc05      	bgt.n	8011636 <__swbuf_r+0x4e>
 801162a:	4621      	mov	r1, r4
 801162c:	4628      	mov	r0, r5
 801162e:	f7ff fda9 	bl	8011184 <_fflush_r>
 8011632:	2800      	cmp	r0, #0
 8011634:	d1ed      	bne.n	8011612 <__swbuf_r+0x2a>
 8011636:	68a3      	ldr	r3, [r4, #8]
 8011638:	3b01      	subs	r3, #1
 801163a:	60a3      	str	r3, [r4, #8]
 801163c:	6823      	ldr	r3, [r4, #0]
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	6022      	str	r2, [r4, #0]
 8011642:	701e      	strb	r6, [r3, #0]
 8011644:	6962      	ldr	r2, [r4, #20]
 8011646:	1c43      	adds	r3, r0, #1
 8011648:	429a      	cmp	r2, r3
 801164a:	d004      	beq.n	8011656 <__swbuf_r+0x6e>
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	07db      	lsls	r3, r3, #31
 8011650:	d5e1      	bpl.n	8011616 <__swbuf_r+0x2e>
 8011652:	2e0a      	cmp	r6, #10
 8011654:	d1df      	bne.n	8011616 <__swbuf_r+0x2e>
 8011656:	4621      	mov	r1, r4
 8011658:	4628      	mov	r0, r5
 801165a:	f7ff fd93 	bl	8011184 <_fflush_r>
 801165e:	2800      	cmp	r0, #0
 8011660:	d0d9      	beq.n	8011616 <__swbuf_r+0x2e>
 8011662:	e7d6      	b.n	8011612 <__swbuf_r+0x2a>

08011664 <__swsetup_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4b29      	ldr	r3, [pc, #164]	@ (801170c <__swsetup_r+0xa8>)
 8011668:	4605      	mov	r5, r0
 801166a:	6818      	ldr	r0, [r3, #0]
 801166c:	460c      	mov	r4, r1
 801166e:	b118      	cbz	r0, 8011678 <__swsetup_r+0x14>
 8011670:	6a03      	ldr	r3, [r0, #32]
 8011672:	b90b      	cbnz	r3, 8011678 <__swsetup_r+0x14>
 8011674:	f7fe f8dc 	bl	800f830 <__sinit>
 8011678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801167c:	0719      	lsls	r1, r3, #28
 801167e:	d422      	bmi.n	80116c6 <__swsetup_r+0x62>
 8011680:	06da      	lsls	r2, r3, #27
 8011682:	d407      	bmi.n	8011694 <__swsetup_r+0x30>
 8011684:	2209      	movs	r2, #9
 8011686:	602a      	str	r2, [r5, #0]
 8011688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801168c:	81a3      	strh	r3, [r4, #12]
 801168e:	f04f 30ff 	mov.w	r0, #4294967295
 8011692:	e033      	b.n	80116fc <__swsetup_r+0x98>
 8011694:	0758      	lsls	r0, r3, #29
 8011696:	d512      	bpl.n	80116be <__swsetup_r+0x5a>
 8011698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801169a:	b141      	cbz	r1, 80116ae <__swsetup_r+0x4a>
 801169c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116a0:	4299      	cmp	r1, r3
 80116a2:	d002      	beq.n	80116aa <__swsetup_r+0x46>
 80116a4:	4628      	mov	r0, r5
 80116a6:	f7fe ffc5 	bl	8010634 <_free_r>
 80116aa:	2300      	movs	r3, #0
 80116ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80116ae:	89a3      	ldrh	r3, [r4, #12]
 80116b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80116b4:	81a3      	strh	r3, [r4, #12]
 80116b6:	2300      	movs	r3, #0
 80116b8:	6063      	str	r3, [r4, #4]
 80116ba:	6923      	ldr	r3, [r4, #16]
 80116bc:	6023      	str	r3, [r4, #0]
 80116be:	89a3      	ldrh	r3, [r4, #12]
 80116c0:	f043 0308 	orr.w	r3, r3, #8
 80116c4:	81a3      	strh	r3, [r4, #12]
 80116c6:	6923      	ldr	r3, [r4, #16]
 80116c8:	b94b      	cbnz	r3, 80116de <__swsetup_r+0x7a>
 80116ca:	89a3      	ldrh	r3, [r4, #12]
 80116cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80116d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116d4:	d003      	beq.n	80116de <__swsetup_r+0x7a>
 80116d6:	4621      	mov	r1, r4
 80116d8:	4628      	mov	r0, r5
 80116da:	f000 f883 	bl	80117e4 <__smakebuf_r>
 80116de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116e2:	f013 0201 	ands.w	r2, r3, #1
 80116e6:	d00a      	beq.n	80116fe <__swsetup_r+0x9a>
 80116e8:	2200      	movs	r2, #0
 80116ea:	60a2      	str	r2, [r4, #8]
 80116ec:	6962      	ldr	r2, [r4, #20]
 80116ee:	4252      	negs	r2, r2
 80116f0:	61a2      	str	r2, [r4, #24]
 80116f2:	6922      	ldr	r2, [r4, #16]
 80116f4:	b942      	cbnz	r2, 8011708 <__swsetup_r+0xa4>
 80116f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80116fa:	d1c5      	bne.n	8011688 <__swsetup_r+0x24>
 80116fc:	bd38      	pop	{r3, r4, r5, pc}
 80116fe:	0799      	lsls	r1, r3, #30
 8011700:	bf58      	it	pl
 8011702:	6962      	ldrpl	r2, [r4, #20]
 8011704:	60a2      	str	r2, [r4, #8]
 8011706:	e7f4      	b.n	80116f2 <__swsetup_r+0x8e>
 8011708:	2000      	movs	r0, #0
 801170a:	e7f7      	b.n	80116fc <__swsetup_r+0x98>
 801170c:	24000110 	.word	0x24000110

08011710 <_raise_r>:
 8011710:	291f      	cmp	r1, #31
 8011712:	b538      	push	{r3, r4, r5, lr}
 8011714:	4605      	mov	r5, r0
 8011716:	460c      	mov	r4, r1
 8011718:	d904      	bls.n	8011724 <_raise_r+0x14>
 801171a:	2316      	movs	r3, #22
 801171c:	6003      	str	r3, [r0, #0]
 801171e:	f04f 30ff 	mov.w	r0, #4294967295
 8011722:	bd38      	pop	{r3, r4, r5, pc}
 8011724:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011726:	b112      	cbz	r2, 801172e <_raise_r+0x1e>
 8011728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801172c:	b94b      	cbnz	r3, 8011742 <_raise_r+0x32>
 801172e:	4628      	mov	r0, r5
 8011730:	f000 f830 	bl	8011794 <_getpid_r>
 8011734:	4622      	mov	r2, r4
 8011736:	4601      	mov	r1, r0
 8011738:	4628      	mov	r0, r5
 801173a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801173e:	f000 b817 	b.w	8011770 <_kill_r>
 8011742:	2b01      	cmp	r3, #1
 8011744:	d00a      	beq.n	801175c <_raise_r+0x4c>
 8011746:	1c59      	adds	r1, r3, #1
 8011748:	d103      	bne.n	8011752 <_raise_r+0x42>
 801174a:	2316      	movs	r3, #22
 801174c:	6003      	str	r3, [r0, #0]
 801174e:	2001      	movs	r0, #1
 8011750:	e7e7      	b.n	8011722 <_raise_r+0x12>
 8011752:	2100      	movs	r1, #0
 8011754:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011758:	4620      	mov	r0, r4
 801175a:	4798      	blx	r3
 801175c:	2000      	movs	r0, #0
 801175e:	e7e0      	b.n	8011722 <_raise_r+0x12>

08011760 <raise>:
 8011760:	4b02      	ldr	r3, [pc, #8]	@ (801176c <raise+0xc>)
 8011762:	4601      	mov	r1, r0
 8011764:	6818      	ldr	r0, [r3, #0]
 8011766:	f7ff bfd3 	b.w	8011710 <_raise_r>
 801176a:	bf00      	nop
 801176c:	24000110 	.word	0x24000110

08011770 <_kill_r>:
 8011770:	b538      	push	{r3, r4, r5, lr}
 8011772:	4d07      	ldr	r5, [pc, #28]	@ (8011790 <_kill_r+0x20>)
 8011774:	2300      	movs	r3, #0
 8011776:	4604      	mov	r4, r0
 8011778:	4608      	mov	r0, r1
 801177a:	4611      	mov	r1, r2
 801177c:	602b      	str	r3, [r5, #0]
 801177e:	f7fb fac8 	bl	800cd12 <_kill>
 8011782:	1c43      	adds	r3, r0, #1
 8011784:	d102      	bne.n	801178c <_kill_r+0x1c>
 8011786:	682b      	ldr	r3, [r5, #0]
 8011788:	b103      	cbz	r3, 801178c <_kill_r+0x1c>
 801178a:	6023      	str	r3, [r4, #0]
 801178c:	bd38      	pop	{r3, r4, r5, pc}
 801178e:	bf00      	nop
 8011790:	24002844 	.word	0x24002844

08011794 <_getpid_r>:
 8011794:	f7fb baaf 	b.w	800ccf6 <_getpid>

08011798 <__swhatbuf_r>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	460c      	mov	r4, r1
 801179c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a0:	2900      	cmp	r1, #0
 80117a2:	b096      	sub	sp, #88	@ 0x58
 80117a4:	4615      	mov	r5, r2
 80117a6:	461e      	mov	r6, r3
 80117a8:	da0d      	bge.n	80117c6 <__swhatbuf_r+0x2e>
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80117b0:	f04f 0100 	mov.w	r1, #0
 80117b4:	bf14      	ite	ne
 80117b6:	2340      	movne	r3, #64	@ 0x40
 80117b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80117bc:	2000      	movs	r0, #0
 80117be:	6031      	str	r1, [r6, #0]
 80117c0:	602b      	str	r3, [r5, #0]
 80117c2:	b016      	add	sp, #88	@ 0x58
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	466a      	mov	r2, sp
 80117c8:	f000 f848 	bl	801185c <_fstat_r>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	dbec      	blt.n	80117aa <__swhatbuf_r+0x12>
 80117d0:	9901      	ldr	r1, [sp, #4]
 80117d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80117d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80117da:	4259      	negs	r1, r3
 80117dc:	4159      	adcs	r1, r3
 80117de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80117e2:	e7eb      	b.n	80117bc <__swhatbuf_r+0x24>

080117e4 <__smakebuf_r>:
 80117e4:	898b      	ldrh	r3, [r1, #12]
 80117e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117e8:	079d      	lsls	r5, r3, #30
 80117ea:	4606      	mov	r6, r0
 80117ec:	460c      	mov	r4, r1
 80117ee:	d507      	bpl.n	8011800 <__smakebuf_r+0x1c>
 80117f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80117f4:	6023      	str	r3, [r4, #0]
 80117f6:	6123      	str	r3, [r4, #16]
 80117f8:	2301      	movs	r3, #1
 80117fa:	6163      	str	r3, [r4, #20]
 80117fc:	b003      	add	sp, #12
 80117fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011800:	ab01      	add	r3, sp, #4
 8011802:	466a      	mov	r2, sp
 8011804:	f7ff ffc8 	bl	8011798 <__swhatbuf_r>
 8011808:	9f00      	ldr	r7, [sp, #0]
 801180a:	4605      	mov	r5, r0
 801180c:	4639      	mov	r1, r7
 801180e:	4630      	mov	r0, r6
 8011810:	f7fd fabe 	bl	800ed90 <_malloc_r>
 8011814:	b948      	cbnz	r0, 801182a <__smakebuf_r+0x46>
 8011816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801181a:	059a      	lsls	r2, r3, #22
 801181c:	d4ee      	bmi.n	80117fc <__smakebuf_r+0x18>
 801181e:	f023 0303 	bic.w	r3, r3, #3
 8011822:	f043 0302 	orr.w	r3, r3, #2
 8011826:	81a3      	strh	r3, [r4, #12]
 8011828:	e7e2      	b.n	80117f0 <__smakebuf_r+0xc>
 801182a:	89a3      	ldrh	r3, [r4, #12]
 801182c:	6020      	str	r0, [r4, #0]
 801182e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011832:	81a3      	strh	r3, [r4, #12]
 8011834:	9b01      	ldr	r3, [sp, #4]
 8011836:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801183a:	b15b      	cbz	r3, 8011854 <__smakebuf_r+0x70>
 801183c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011840:	4630      	mov	r0, r6
 8011842:	f000 f81d 	bl	8011880 <_isatty_r>
 8011846:	b128      	cbz	r0, 8011854 <__smakebuf_r+0x70>
 8011848:	89a3      	ldrh	r3, [r4, #12]
 801184a:	f023 0303 	bic.w	r3, r3, #3
 801184e:	f043 0301 	orr.w	r3, r3, #1
 8011852:	81a3      	strh	r3, [r4, #12]
 8011854:	89a3      	ldrh	r3, [r4, #12]
 8011856:	431d      	orrs	r5, r3
 8011858:	81a5      	strh	r5, [r4, #12]
 801185a:	e7cf      	b.n	80117fc <__smakebuf_r+0x18>

0801185c <_fstat_r>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	4d07      	ldr	r5, [pc, #28]	@ (801187c <_fstat_r+0x20>)
 8011860:	2300      	movs	r3, #0
 8011862:	4604      	mov	r4, r0
 8011864:	4608      	mov	r0, r1
 8011866:	4611      	mov	r1, r2
 8011868:	602b      	str	r3, [r5, #0]
 801186a:	f7fb fa3d 	bl	800cce8 <_fstat>
 801186e:	1c43      	adds	r3, r0, #1
 8011870:	d102      	bne.n	8011878 <_fstat_r+0x1c>
 8011872:	682b      	ldr	r3, [r5, #0]
 8011874:	b103      	cbz	r3, 8011878 <_fstat_r+0x1c>
 8011876:	6023      	str	r3, [r4, #0]
 8011878:	bd38      	pop	{r3, r4, r5, pc}
 801187a:	bf00      	nop
 801187c:	24002844 	.word	0x24002844

08011880 <_isatty_r>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4d06      	ldr	r5, [pc, #24]	@ (801189c <_isatty_r+0x1c>)
 8011884:	2300      	movs	r3, #0
 8011886:	4604      	mov	r4, r0
 8011888:	4608      	mov	r0, r1
 801188a:	602b      	str	r3, [r5, #0]
 801188c:	f7fb fa3a 	bl	800cd04 <_isatty>
 8011890:	1c43      	adds	r3, r0, #1
 8011892:	d102      	bne.n	801189a <_isatty_r+0x1a>
 8011894:	682b      	ldr	r3, [r5, #0]
 8011896:	b103      	cbz	r3, 801189a <_isatty_r+0x1a>
 8011898:	6023      	str	r3, [r4, #0]
 801189a:	bd38      	pop	{r3, r4, r5, pc}
 801189c:	24002844 	.word	0x24002844

080118a0 <fmod>:
 80118a0:	b508      	push	{r3, lr}
 80118a2:	ed2d 8b04 	vpush	{d8-d9}
 80118a6:	eeb0 9b40 	vmov.f64	d9, d0
 80118aa:	eeb0 8b41 	vmov.f64	d8, d1
 80118ae:	f000 f83f 	bl	8011930 <__ieee754_fmod>
 80118b2:	eeb4 9b48 	vcmp.f64	d9, d8
 80118b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ba:	d60c      	bvs.n	80118d6 <fmod+0x36>
 80118bc:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 80118e0 <fmod+0x40>
 80118c0:	eeb4 8b49 	vcmp.f64	d8, d9
 80118c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c8:	d105      	bne.n	80118d6 <fmod+0x36>
 80118ca:	f000 f93d 	bl	8011b48 <__errno>
 80118ce:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80118d2:	2321      	movs	r3, #33	@ 0x21
 80118d4:	6003      	str	r3, [r0, #0]
 80118d6:	ecbd 8b04 	vpop	{d8-d9}
 80118da:	bd08      	pop	{r3, pc}
 80118dc:	f3af 8000 	nop.w
	...

080118e8 <sqrt>:
 80118e8:	b508      	push	{r3, lr}
 80118ea:	ed2d 8b04 	vpush	{d8-d9}
 80118ee:	eeb0 8b40 	vmov.f64	d8, d0
 80118f2:	f000 f819 	bl	8011928 <__ieee754_sqrt>
 80118f6:	eeb4 8b48 	vcmp.f64	d8, d8
 80118fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fe:	d60c      	bvs.n	801191a <sqrt+0x32>
 8011900:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8011920 <sqrt+0x38>
 8011904:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190c:	d505      	bpl.n	801191a <sqrt+0x32>
 801190e:	f000 f91b 	bl	8011b48 <__errno>
 8011912:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011916:	2321      	movs	r3, #33	@ 0x21
 8011918:	6003      	str	r3, [r0, #0]
 801191a:	ecbd 8b04 	vpop	{d8-d9}
 801191e:	bd08      	pop	{r3, pc}
	...

08011928 <__ieee754_sqrt>:
 8011928:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801192c:	4770      	bx	lr
	...

08011930 <__ieee754_fmod>:
 8011930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011934:	ed8d 1b00 	vstr	d1, [sp]
 8011938:	e9dd 6500 	ldrd	r6, r5, [sp]
 801193c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8011940:	ea56 0307 	orrs.w	r3, r6, r7
 8011944:	46b6      	mov	lr, r6
 8011946:	d00d      	beq.n	8011964 <__ieee754_fmod+0x34>
 8011948:	ee10 ca90 	vmov	ip, s1
 801194c:	4b78      	ldr	r3, [pc, #480]	@ (8011b30 <__ieee754_fmod+0x200>)
 801194e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8011952:	4598      	cmp	r8, r3
 8011954:	d806      	bhi.n	8011964 <__ieee754_fmod+0x34>
 8011956:	4273      	negs	r3, r6
 8011958:	4a76      	ldr	r2, [pc, #472]	@ (8011b34 <__ieee754_fmod+0x204>)
 801195a:	4333      	orrs	r3, r6
 801195c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8011960:	4293      	cmp	r3, r2
 8011962:	d908      	bls.n	8011976 <__ieee754_fmod+0x46>
 8011964:	ed9d 7b00 	vldr	d7, [sp]
 8011968:	ee20 7b07 	vmul.f64	d7, d0, d7
 801196c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011970:	b003      	add	sp, #12
 8011972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011976:	ee10 9a10 	vmov	r9, s0
 801197a:	45b8      	cmp	r8, r7
 801197c:	4649      	mov	r1, r9
 801197e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8011982:	dc09      	bgt.n	8011998 <__ieee754_fmod+0x68>
 8011984:	dbf4      	blt.n	8011970 <__ieee754_fmod+0x40>
 8011986:	454e      	cmp	r6, r9
 8011988:	d8f2      	bhi.n	8011970 <__ieee754_fmod+0x40>
 801198a:	d105      	bne.n	8011998 <__ieee754_fmod+0x68>
 801198c:	4b6a      	ldr	r3, [pc, #424]	@ (8011b38 <__ieee754_fmod+0x208>)
 801198e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8011992:	ed93 0b00 	vldr	d0, [r3]
 8011996:	e7eb      	b.n	8011970 <__ieee754_fmod+0x40>
 8011998:	4a66      	ldr	r2, [pc, #408]	@ (8011b34 <__ieee754_fmod+0x204>)
 801199a:	ea1c 0f02 	tst.w	ip, r2
 801199e:	d14a      	bne.n	8011a36 <__ieee754_fmod+0x106>
 80119a0:	f1b8 0f00 	cmp.w	r8, #0
 80119a4:	d13f      	bne.n	8011a26 <__ieee754_fmod+0xf6>
 80119a6:	4865      	ldr	r0, [pc, #404]	@ (8011b3c <__ieee754_fmod+0x20c>)
 80119a8:	464b      	mov	r3, r9
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	dc38      	bgt.n	8011a20 <__ieee754_fmod+0xf0>
 80119ae:	4215      	tst	r5, r2
 80119b0:	d150      	bne.n	8011a54 <__ieee754_fmod+0x124>
 80119b2:	2f00      	cmp	r7, #0
 80119b4:	d147      	bne.n	8011a46 <__ieee754_fmod+0x116>
 80119b6:	4a61      	ldr	r2, [pc, #388]	@ (8011b3c <__ieee754_fmod+0x20c>)
 80119b8:	4633      	mov	r3, r6
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	dc40      	bgt.n	8011a40 <__ieee754_fmod+0x110>
 80119be:	4b60      	ldr	r3, [pc, #384]	@ (8011b40 <__ieee754_fmod+0x210>)
 80119c0:	4298      	cmp	r0, r3
 80119c2:	db4b      	blt.n	8011a5c <__ieee754_fmod+0x12c>
 80119c4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 80119c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80119cc:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8011b40 <__ieee754_fmod+0x210>
 80119d0:	4562      	cmp	r2, ip
 80119d2:	db58      	blt.n	8011a86 <__ieee754_fmod+0x156>
 80119d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80119d8:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 80119dc:	1a80      	subs	r0, r0, r2
 80119de:	1b5e      	subs	r6, r3, r5
 80119e0:	eba1 070e 	sub.w	r7, r1, lr
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d164      	bne.n	8011ab2 <__ieee754_fmod+0x182>
 80119e8:	4571      	cmp	r1, lr
 80119ea:	bf38      	it	cc
 80119ec:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80119f0:	2e00      	cmp	r6, #0
 80119f2:	bfa4      	itt	ge
 80119f4:	4639      	movge	r1, r7
 80119f6:	4633      	movge	r3, r6
 80119f8:	ea53 0001 	orrs.w	r0, r3, r1
 80119fc:	d0c6      	beq.n	801198c <__ieee754_fmod+0x5c>
 80119fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011a02:	db6b      	blt.n	8011adc <__ieee754_fmod+0x1ac>
 8011a04:	484e      	ldr	r0, [pc, #312]	@ (8011b40 <__ieee754_fmod+0x210>)
 8011a06:	4282      	cmp	r2, r0
 8011a08:	db6e      	blt.n	8011ae8 <__ieee754_fmod+0x1b8>
 8011a0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011a0e:	4323      	orrs	r3, r4
 8011a10:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8011a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011a18:	460c      	mov	r4, r1
 8011a1a:	ec45 4b10 	vmov	d0, r4, r5
 8011a1e:	e7a7      	b.n	8011970 <__ieee754_fmod+0x40>
 8011a20:	3801      	subs	r0, #1
 8011a22:	005b      	lsls	r3, r3, #1
 8011a24:	e7c1      	b.n	80119aa <__ieee754_fmod+0x7a>
 8011a26:	4846      	ldr	r0, [pc, #280]	@ (8011b40 <__ieee754_fmod+0x210>)
 8011a28:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	ddbe      	ble.n	80119ae <__ieee754_fmod+0x7e>
 8011a30:	3801      	subs	r0, #1
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	e7fa      	b.n	8011a2c <__ieee754_fmod+0xfc>
 8011a36:	ea4f 5028 	mov.w	r0, r8, asr #20
 8011a3a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8011a3e:	e7b6      	b.n	80119ae <__ieee754_fmod+0x7e>
 8011a40:	3a01      	subs	r2, #1
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	e7b9      	b.n	80119ba <__ieee754_fmod+0x8a>
 8011a46:	4a3e      	ldr	r2, [pc, #248]	@ (8011b40 <__ieee754_fmod+0x210>)
 8011a48:	02fb      	lsls	r3, r7, #11
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	ddb7      	ble.n	80119be <__ieee754_fmod+0x8e>
 8011a4e:	3a01      	subs	r2, #1
 8011a50:	005b      	lsls	r3, r3, #1
 8011a52:	e7fa      	b.n	8011a4a <__ieee754_fmod+0x11a>
 8011a54:	153a      	asrs	r2, r7, #20
 8011a56:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011a5a:	e7b0      	b.n	80119be <__ieee754_fmod+0x8e>
 8011a5c:	eba3 0c00 	sub.w	ip, r3, r0
 8011a60:	f1bc 0f1f 	cmp.w	ip, #31
 8011a64:	dc09      	bgt.n	8011a7a <__ieee754_fmod+0x14a>
 8011a66:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8011a6a:	fa08 f10c 	lsl.w	r1, r8, ip
 8011a6e:	fa29 f303 	lsr.w	r3, r9, r3
 8011a72:	430b      	orrs	r3, r1
 8011a74:	fa09 f10c 	lsl.w	r1, r9, ip
 8011a78:	e7a8      	b.n	80119cc <__ieee754_fmod+0x9c>
 8011a7a:	4b32      	ldr	r3, [pc, #200]	@ (8011b44 <__ieee754_fmod+0x214>)
 8011a7c:	1a1b      	subs	r3, r3, r0
 8011a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8011a82:	2100      	movs	r1, #0
 8011a84:	e7a2      	b.n	80119cc <__ieee754_fmod+0x9c>
 8011a86:	ebac 0c02 	sub.w	ip, ip, r2
 8011a8a:	f1bc 0f1f 	cmp.w	ip, #31
 8011a8e:	dc09      	bgt.n	8011aa4 <__ieee754_fmod+0x174>
 8011a90:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8011a94:	fa07 f70c 	lsl.w	r7, r7, ip
 8011a98:	fa26 f505 	lsr.w	r5, r6, r5
 8011a9c:	433d      	orrs	r5, r7
 8011a9e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8011aa2:	e79b      	b.n	80119dc <__ieee754_fmod+0xac>
 8011aa4:	4d27      	ldr	r5, [pc, #156]	@ (8011b44 <__ieee754_fmod+0x214>)
 8011aa6:	1aad      	subs	r5, r5, r2
 8011aa8:	fa06 f505 	lsl.w	r5, r6, r5
 8011aac:	f04f 0e00 	mov.w	lr, #0
 8011ab0:	e794      	b.n	80119dc <__ieee754_fmod+0xac>
 8011ab2:	4571      	cmp	r1, lr
 8011ab4:	bf38      	it	cc
 8011ab6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8011aba:	2e00      	cmp	r6, #0
 8011abc:	da05      	bge.n	8011aca <__ieee754_fmod+0x19a>
 8011abe:	0fce      	lsrs	r6, r1, #31
 8011ac0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8011ac4:	0049      	lsls	r1, r1, #1
 8011ac6:	3801      	subs	r0, #1
 8011ac8:	e789      	b.n	80119de <__ieee754_fmod+0xae>
 8011aca:	ea56 0307 	orrs.w	r3, r6, r7
 8011ace:	f43f af5d 	beq.w	801198c <__ieee754_fmod+0x5c>
 8011ad2:	0ffb      	lsrs	r3, r7, #31
 8011ad4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8011ad8:	0079      	lsls	r1, r7, #1
 8011ada:	e7f4      	b.n	8011ac6 <__ieee754_fmod+0x196>
 8011adc:	0fc8      	lsrs	r0, r1, #31
 8011ade:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011ae2:	0049      	lsls	r1, r1, #1
 8011ae4:	3a01      	subs	r2, #1
 8011ae6:	e78a      	b.n	80119fe <__ieee754_fmod+0xce>
 8011ae8:	1a80      	subs	r0, r0, r2
 8011aea:	2814      	cmp	r0, #20
 8011aec:	dc0c      	bgt.n	8011b08 <__ieee754_fmod+0x1d8>
 8011aee:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011af2:	fa03 f202 	lsl.w	r2, r3, r2
 8011af6:	40c1      	lsrs	r1, r0
 8011af8:	430a      	orrs	r2, r1
 8011afa:	4103      	asrs	r3, r0
 8011afc:	ea43 0104 	orr.w	r1, r3, r4
 8011b00:	4610      	mov	r0, r2
 8011b02:	ec41 0b10 	vmov	d0, r0, r1
 8011b06:	e733      	b.n	8011970 <__ieee754_fmod+0x40>
 8011b08:	281f      	cmp	r0, #31
 8011b0a:	dc07      	bgt.n	8011b1c <__ieee754_fmod+0x1ec>
 8011b0c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8011b10:	40c1      	lsrs	r1, r0
 8011b12:	fa03 f202 	lsl.w	r2, r3, r2
 8011b16:	430a      	orrs	r2, r1
 8011b18:	4623      	mov	r3, r4
 8011b1a:	e7ef      	b.n	8011afc <__ieee754_fmod+0x1cc>
 8011b1c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8011b20:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011b24:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8011b28:	32e2      	adds	r2, #226	@ 0xe2
 8011b2a:	fa43 f202 	asr.w	r2, r3, r2
 8011b2e:	e7f3      	b.n	8011b18 <__ieee754_fmod+0x1e8>
 8011b30:	7fefffff 	.word	0x7fefffff
 8011b34:	7ff00000 	.word	0x7ff00000
 8011b38:	08013fa8 	.word	0x08013fa8
 8011b3c:	fffffbed 	.word	0xfffffbed
 8011b40:	fffffc02 	.word	0xfffffc02
 8011b44:	fffffbe2 	.word	0xfffffbe2

08011b48 <__errno>:
 8011b48:	4b01      	ldr	r3, [pc, #4]	@ (8011b50 <__errno+0x8>)
 8011b4a:	6818      	ldr	r0, [r3, #0]
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop
 8011b50:	24000110 	.word	0x24000110

08011b54 <_sbrk>:
 8011b54:	4a04      	ldr	r2, [pc, #16]	@ (8011b68 <_sbrk+0x14>)
 8011b56:	6811      	ldr	r1, [r2, #0]
 8011b58:	4603      	mov	r3, r0
 8011b5a:	b909      	cbnz	r1, 8011b60 <_sbrk+0xc>
 8011b5c:	4903      	ldr	r1, [pc, #12]	@ (8011b6c <_sbrk+0x18>)
 8011b5e:	6011      	str	r1, [r2, #0]
 8011b60:	6810      	ldr	r0, [r2, #0]
 8011b62:	4403      	add	r3, r0
 8011b64:	6013      	str	r3, [r2, #0]
 8011b66:	4770      	bx	lr
 8011b68:	2400284c 	.word	0x2400284c
 8011b6c:	24002850 	.word	0x24002850

08011b70 <_exit>:
 8011b70:	e7fe      	b.n	8011b70 <_exit>
	...

08011b74 <_init>:
 8011b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b76:	bf00      	nop
 8011b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b7a:	bc08      	pop	{r3}
 8011b7c:	469e      	mov	lr, r3
 8011b7e:	4770      	bx	lr

08011b80 <_fini>:
 8011b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b82:	bf00      	nop
 8011b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b86:	bc08      	pop	{r3}
 8011b88:	469e      	mov	lr, r3
 8011b8a:	4770      	bx	lr
