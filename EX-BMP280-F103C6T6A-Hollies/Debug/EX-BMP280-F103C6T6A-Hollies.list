
EX-BMP280-F103C6T6A-Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c0  080029c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029c0  080029c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c0  080029c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080029d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080029d4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ab2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001691  00000000  00000000  00028ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e0c  00000000  00000000  0002b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaec  00000000  00000000  00042184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082e53  00000000  00000000  0004cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025bc  00000000  00000000  000cfb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002980 	.word	0x08002980

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002980 	.word	0x08002980

0800014c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fa0b 	bl	800056c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f819 	bl	800018c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f8b5 	bl	80002c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800015e:	f000 f85b 	bl	8000218 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000162:	f000 f887 	bl	8000274 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	bmp280_init_default_params(&params); //BMP280模块配置参数。
 8000166:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800016a:	4618      	mov	r0, r3
 800016c:	f002 f9b6 	bl	80024dc <bmp280_init_default_params>
	bmp280_dev.addr = BMP280_I2C_ADDRESS_0;
 8000170:	2376      	movs	r3, #118	; 0x76
 8000172:	853b      	strh	r3, [r7, #40]	; 0x28
	bmp280_dev.i2c = &hi2c1;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <main+0x3c>)
 8000176:	62fb      	str	r3, [r7, #44]	; 0x2c
	bmp280_init(&bmp280_dev, &params);
 8000178:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	4611      	mov	r1, r2
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fb24 	bl	80027ce <bmp280_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000186:	e7fe      	b.n	8000186 <main+0x3a>
 8000188:	20000028 	.word	0x20000028

0800018c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	; 0x40
 8000190:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f002 fbe8 	bl	8002970 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ae:	2301      	movs	r3, #1
 80001b0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c0:	2302      	movs	r3, #2
 80001c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d0:	f107 0318 	add.w	r3, r7, #24
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fc8b 	bl	8001af0 <HAL_RCC_OscConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80001e0:	f000 f8ac 	bl	800033c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80001e4:	230f      	movs	r3, #15
 80001e6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e8:	2302      	movs	r3, #2
 80001ea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2102      	movs	r1, #2
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fef8 	bl	8001ff4 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x82>
	{
		Error_Handler();
 800020a:	f000 f897 	bl	800033c <Error_Handler>
	}
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	; 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <MX_I2C1_Init+0x50>)
 800021e:	4a13      	ldr	r2, [pc, #76]	; (800026c <MX_I2C1_Init+0x54>)
 8000220:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <MX_I2C1_Init+0x50>)
 8000224:	4a12      	ldr	r2, [pc, #72]	; (8000270 <MX_I2C1_Init+0x58>)
 8000226:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <MX_I2C1_Init+0x50>)
 800022a:	2200      	movs	r2, #0
 800022c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <MX_I2C1_Init+0x50>)
 8000230:	2200      	movs	r2, #0
 8000232:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_I2C1_Init+0x50>)
 8000236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800023a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <MX_I2C1_Init+0x50>)
 800023e:	2200      	movs	r2, #0
 8000240:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_I2C1_Init+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <MX_I2C1_Init+0x50>)
 800024a:	2200      	movs	r2, #0
 800024c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_I2C1_Init+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <MX_I2C1_Init+0x50>)
 8000256:	f000 fc4b 	bl	8000af0 <HAL_I2C_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000260:	f000 f86c 	bl	800033c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000028 	.word	0x20000028
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 800027a:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <MX_USART1_UART_Init+0x50>)
 800027c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000284:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 800029a:	220c      	movs	r2, #12
 800029c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80002aa:	4805      	ldr	r0, [pc, #20]	; (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002ac:	f002 f83a 	bl	8002324 <HAL_UART_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80002b6:	f000 f841 	bl	800033c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000007c 	.word	0x2000007c
 80002c4:	40013800 	.word	0x40013800

080002c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <MX_GPIO_Init+0x70>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a19      	ldr	r2, [pc, #100]	; (8000338 <MX_GPIO_Init+0x70>)
 80002d4:	f043 0310 	orr.w	r3, r3, #16
 80002d8:	6193      	str	r3, [r2, #24]
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_GPIO_Init+0x70>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	f003 0310 	and.w	r3, r3, #16
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_GPIO_Init+0x70>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a13      	ldr	r2, [pc, #76]	; (8000338 <MX_GPIO_Init+0x70>)
 80002ec:	f043 0320 	orr.w	r3, r3, #32
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_GPIO_Init+0x70>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0320 	and.w	r3, r3, #32
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_GPIO_Init+0x70>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <MX_GPIO_Init+0x70>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_GPIO_Init+0x70>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0304 	and.w	r3, r3, #4
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_GPIO_Init+0x70>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <MX_GPIO_Init+0x70>)
 800031c:	f043 0308 	orr.w	r3, r3, #8
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <MX_GPIO_Init+0x70>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0308 	and.w	r3, r3, #8
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000344:	e7fe      	b.n	8000344 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <HAL_MspInit+0x5c>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_MspInit+0x5c>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_MspInit+0x5c>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_MspInit+0x5c>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <HAL_MspInit+0x60>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_MspInit+0x60>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010000 	.word	0x40010000

080003ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <HAL_I2C_MspInit+0x74>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d125      	bne.n	8000418 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_I2C_MspInit+0x78>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_I2C_MspInit+0x78>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_I2C_MspInit+0x78>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003e4:	23c0      	movs	r3, #192	; 0xc0
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003e8:	2312      	movs	r3, #18
 80003ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f0:	2303      	movs	r3, #3
 80003f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <HAL_I2C_MspInit+0x7c>)
 80003fc:	f000 f9fc 	bl	80007f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <HAL_I2C_MspInit+0x78>)
 8000402:	69db      	ldr	r3, [r3, #28]
 8000404:	4a07      	ldr	r2, [pc, #28]	; (8000424 <HAL_I2C_MspInit+0x78>)
 8000406:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800040a:	61d3      	str	r3, [r2, #28]
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <HAL_I2C_MspInit+0x78>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40005400 	.word	0x40005400
 8000424:	40021000 	.word	0x40021000
 8000428:	40010c00 	.word	0x40010c00

0800042c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <HAL_UART_MspInit+0x8c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d131      	bne.n	80004b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <HAL_UART_MspInit+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <HAL_UART_MspInit+0x90>)
 8000452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <HAL_UART_MspInit+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_UART_MspInit+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_UART_MspInit+0x90>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_UART_MspInit+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800047c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000482:	2302      	movs	r3, #2
 8000484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <HAL_UART_MspInit+0x94>)
 8000492:	f000 f9b1 	bl	80007f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <HAL_UART_MspInit+0x94>)
 80004ac:	f000 f9a4 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40013800 	.word	0x40013800
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050a:	f000 f875 	bl	80005f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}

08000512 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f7ff ffe4 	bl	8000512 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f002 f9ed 	bl	8002928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fdfd 	bl	800014c <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800055c:	080029c8 	.word	0x080029c8
  ldr r2, =_sbss
 8000560:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000564:	200000c4 	.word	0x200000c4

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f907 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f000 f808 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff fede 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_InitTick+0x54>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_InitTick+0x58>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f911 	bl	80007de <HAL_SYSTICK_Config>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e00e      	b.n	80005e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d80a      	bhi.n	80005e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005cc:	2200      	movs	r2, #0
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295
 80005d4:	f000 f8e7 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_InitTick+0x5c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	e000      	b.n	80005e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x1c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_IncTick+0x20>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <HAL_IncTick+0x20>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	20000008 	.word	0x20000008
 8000618:	200000c0 	.word	0x200000c0

0800061c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTick;
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <HAL_GetTick+0x10>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	200000c0 	.word	0x200000c0

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff90 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff49 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff5e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff90 	bl	80006e8 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5f 	bl	8000694 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb0 	bl	800074c <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b08b      	sub	sp, #44	; 0x2c
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e161      	b.n	8000ad0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800080c:	2201      	movs	r2, #1
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	4013      	ands	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	429a      	cmp	r2, r3
 8000826:	f040 8150 	bne.w	8000aca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4a97      	ldr	r2, [pc, #604]	; (8000a8c <HAL_GPIO_Init+0x294>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d05e      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000834:	4a95      	ldr	r2, [pc, #596]	; (8000a8c <HAL_GPIO_Init+0x294>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d875      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800083a:	4a95      	ldr	r2, [pc, #596]	; (8000a90 <HAL_GPIO_Init+0x298>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d058      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000840:	4a93      	ldr	r2, [pc, #588]	; (8000a90 <HAL_GPIO_Init+0x298>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d86f      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000846:	4a93      	ldr	r2, [pc, #588]	; (8000a94 <HAL_GPIO_Init+0x29c>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d052      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 800084c:	4a91      	ldr	r2, [pc, #580]	; (8000a94 <HAL_GPIO_Init+0x29c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d869      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000852:	4a91      	ldr	r2, [pc, #580]	; (8000a98 <HAL_GPIO_Init+0x2a0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d04c      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000858:	4a8f      	ldr	r2, [pc, #572]	; (8000a98 <HAL_GPIO_Init+0x2a0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d863      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800085e:	4a8f      	ldr	r2, [pc, #572]	; (8000a9c <HAL_GPIO_Init+0x2a4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d046      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
 8000864:	4a8d      	ldr	r2, [pc, #564]	; (8000a9c <HAL_GPIO_Init+0x2a4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d85d      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 800086a:	2b12      	cmp	r3, #18
 800086c:	d82a      	bhi.n	80008c4 <HAL_GPIO_Init+0xcc>
 800086e:	2b12      	cmp	r3, #18
 8000870:	d859      	bhi.n	8000926 <HAL_GPIO_Init+0x12e>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <HAL_GPIO_Init+0x80>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	080008f3 	.word	0x080008f3
 800087c:	080008cd 	.word	0x080008cd
 8000880:	080008df 	.word	0x080008df
 8000884:	08000921 	.word	0x08000921
 8000888:	08000927 	.word	0x08000927
 800088c:	08000927 	.word	0x08000927
 8000890:	08000927 	.word	0x08000927
 8000894:	08000927 	.word	0x08000927
 8000898:	08000927 	.word	0x08000927
 800089c:	08000927 	.word	0x08000927
 80008a0:	08000927 	.word	0x08000927
 80008a4:	08000927 	.word	0x08000927
 80008a8:	08000927 	.word	0x08000927
 80008ac:	08000927 	.word	0x08000927
 80008b0:	08000927 	.word	0x08000927
 80008b4:	08000927 	.word	0x08000927
 80008b8:	08000927 	.word	0x08000927
 80008bc:	080008d5 	.word	0x080008d5
 80008c0:	080008e9 	.word	0x080008e9
 80008c4:	4a76      	ldr	r2, [pc, #472]	; (8000aa0 <HAL_GPIO_Init+0x2a8>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d013      	beq.n	80008f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ca:	e02c      	b.n	8000926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e029      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	3304      	adds	r3, #4
 80008da:	623b      	str	r3, [r7, #32]
          break;
 80008dc:	e024      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	3308      	adds	r3, #8
 80008e4:	623b      	str	r3, [r7, #32]
          break;
 80008e6:	e01f      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	330c      	adds	r3, #12
 80008ee:	623b      	str	r3, [r7, #32]
          break;
 80008f0:	e01a      	b.n	8000928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fa:	2304      	movs	r3, #4
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e013      	b.n	8000928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d105      	bne.n	8000914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	611a      	str	r2, [r3, #16]
          break;
 8000912:	e009      	b.n	8000928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	615a      	str	r2, [r3, #20]
          break;
 800091e:	e003      	b.n	8000928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	e000      	b.n	8000928 <HAL_GPIO_Init+0x130>
          break;
 8000926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	2bff      	cmp	r3, #255	; 0xff
 800092c:	d801      	bhi.n	8000932 <HAL_GPIO_Init+0x13a>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	e001      	b.n	8000936 <HAL_GPIO_Init+0x13e>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	d802      	bhi.n	8000944 <HAL_GPIO_Init+0x14c>
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	e002      	b.n	800094a <HAL_GPIO_Init+0x152>
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	3b08      	subs	r3, #8
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	210f      	movs	r1, #15
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	401a      	ands	r2, r3
 800095c:	6a39      	ldr	r1, [r7, #32]
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	431a      	orrs	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 80a9 	beq.w	8000aca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000978:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <HAL_GPIO_Init+0x2ac>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a49      	ldr	r2, [pc, #292]	; (8000aa4 <HAL_GPIO_Init+0x2ac>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <HAL_GPIO_Init+0x2ac>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000990:	4a45      	ldr	r2, [pc, #276]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	3302      	adds	r3, #2
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a3d      	ldr	r2, [pc, #244]	; (8000aac <HAL_GPIO_Init+0x2b4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d00d      	beq.n	80009d8 <HAL_GPIO_Init+0x1e0>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a3c      	ldr	r2, [pc, #240]	; (8000ab0 <HAL_GPIO_Init+0x2b8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d007      	beq.n	80009d4 <HAL_GPIO_Init+0x1dc>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <HAL_GPIO_Init+0x2bc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d101      	bne.n	80009d0 <HAL_GPIO_Init+0x1d8>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e004      	b.n	80009da <HAL_GPIO_Init+0x1e2>
 80009d0:	2303      	movs	r3, #3
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0x1e2>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <HAL_GPIO_Init+0x1e2>
 80009d8:	2300      	movs	r3, #0
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	f002 0203 	and.w	r2, r2, #3
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ea:	492f      	ldr	r1, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	492b      	ldr	r1, [pc, #172]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	600b      	str	r3, [r1, #0]
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	4927      	ldr	r1, [pc, #156]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	4921      	ldr	r1, [pc, #132]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	604b      	str	r3, [r1, #4]
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d006      	beq.n	8000a62 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	4917      	ldr	r1, [pc, #92]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
 8000a60:	e006      	b.n	8000a70 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d01f      	beq.n	8000abc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <HAL_GPIO_Init+0x2c0>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
 8000a88:	e01f      	b.n	8000aca <HAL_GPIO_Init+0x2d2>
 8000a8a:	bf00      	nop
 8000a8c:	10320000 	.word	0x10320000
 8000a90:	10310000 	.word	0x10310000
 8000a94:	10220000 	.word	0x10220000
 8000a98:	10210000 	.word	0x10210000
 8000a9c:	10120000 	.word	0x10120000
 8000aa0:	10110000 	.word	0x10110000
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_GPIO_Init+0x2f4>)
 8000abe:	68da      	ldr	r2, [r3, #12]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	4909      	ldr	r1, [pc, #36]	; (8000aec <HAL_GPIO_Init+0x2f4>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	3301      	adds	r3, #1
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f47f ae96 	bne.w	800080c <HAL_GPIO_Init+0x14>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	372c      	adds	r7, #44	; 0x2c
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40010400 	.word	0x40010400

08000af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e12b      	b.n	8000d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d106      	bne.n	8000b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fc48 	bl	80003ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2224      	movs	r2, #36	; 0x24
 8000b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 0201 	bic.w	r2, r2, #1
 8000b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b54:	f001 fba0 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8000b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	4a81      	ldr	r2, [pc, #516]	; (8000d64 <HAL_I2C_Init+0x274>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d807      	bhi.n	8000b74 <HAL_I2C_Init+0x84>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4a80      	ldr	r2, [pc, #512]	; (8000d68 <HAL_I2C_Init+0x278>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	bf94      	ite	ls
 8000b6c:	2301      	movls	r3, #1
 8000b6e:	2300      	movhi	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	e006      	b.n	8000b82 <HAL_I2C_Init+0x92>
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4a7d      	ldr	r2, [pc, #500]	; (8000d6c <HAL_I2C_Init+0x27c>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	bf94      	ite	ls
 8000b7c:	2301      	movls	r3, #1
 8000b7e:	2300      	movhi	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e0e7      	b.n	8000d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4a78      	ldr	r2, [pc, #480]	; (8000d70 <HAL_I2C_Init+0x280>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a6a      	ldr	r2, [pc, #424]	; (8000d64 <HAL_I2C_Init+0x274>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d802      	bhi.n	8000bc4 <HAL_I2C_Init+0xd4>
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	e009      	b.n	8000bd8 <HAL_I2C_Init+0xe8>
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	4a69      	ldr	r2, [pc, #420]	; (8000d74 <HAL_I2C_Init+0x284>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	099b      	lsrs	r3, r3, #6
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	495c      	ldr	r1, [pc, #368]	; (8000d64 <HAL_I2C_Init+0x274>)
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d819      	bhi.n	8000c2c <HAL_I2C_Init+0x13c>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	1e59      	subs	r1, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c06:	1c59      	adds	r1, r3, #1
 8000c08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00a      	beq.n	8000c28 <HAL_I2C_Init+0x138>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1e59      	subs	r1, r3, #1
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c20:	3301      	adds	r3, #1
 8000c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c26:	e051      	b.n	8000ccc <HAL_I2C_Init+0x1dc>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	e04f      	b.n	8000ccc <HAL_I2C_Init+0x1dc>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d111      	bne.n	8000c58 <HAL_I2C_Init+0x168>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	1e58      	subs	r0, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6859      	ldr	r1, [r3, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	440b      	add	r3, r1
 8000c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	e012      	b.n	8000c7e <HAL_I2C_Init+0x18e>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	1e58      	subs	r0, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6859      	ldr	r1, [r3, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	0099      	lsls	r1, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf0c      	ite	eq
 8000c78:	2301      	moveq	r3, #1
 8000c7a:	2300      	movne	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_I2C_Init+0x196>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e022      	b.n	8000ccc <HAL_I2C_Init+0x1dc>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10e      	bne.n	8000cac <HAL_I2C_Init+0x1bc>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6859      	ldr	r1, [r3, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	440b      	add	r3, r1
 8000c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000caa:	e00f      	b.n	8000ccc <HAL_I2C_Init+0x1dc>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	1e58      	subs	r0, r3, #1
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6859      	ldr	r1, [r3, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	0099      	lsls	r1, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	6809      	ldr	r1, [r1, #0]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69da      	ldr	r2, [r3, #28]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6911      	ldr	r1, [r2, #16]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68d2      	ldr	r2, [r2, #12]
 8000d06:	4311      	orrs	r1, r2
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0201 	orr.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2220      	movs	r2, #32
 8000d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	000186a0 	.word	0x000186a0
 8000d68:	001e847f 	.word	0x001e847f
 8000d6c:	003d08ff 	.word	0x003d08ff
 8000d70:	431bde83 	.word	0x431bde83
 8000d74:	10624dd3 	.word	0x10624dd3

08000d78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	817b      	strh	r3, [r7, #10]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	813b      	strh	r3, [r7, #8]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000d92:	f7ff fc43 	bl	800061c <HAL_GetTick>
 8000d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b20      	cmp	r3, #32
 8000da2:	f040 80d9 	bne.w	8000f58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2319      	movs	r3, #25
 8000dac:	2201      	movs	r2, #1
 8000dae:	496d      	ldr	r1, [pc, #436]	; (8000f64 <HAL_I2C_Mem_Write+0x1ec>)
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 fcc1 	bl	8001738 <I2C_WaitOnFlagUntilTimeout>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e0cc      	b.n	8000f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <HAL_I2C_Mem_Write+0x56>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e0c5      	b.n	8000f5a <HAL_I2C_Mem_Write+0x1e2>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d007      	beq.n	8000df4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2221      	movs	r2, #33	; 0x21
 8000e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2240      	movs	r2, #64	; 0x40
 8000e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6a3a      	ldr	r2, [r7, #32]
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4a4d      	ldr	r2, [pc, #308]	; (8000f68 <HAL_I2C_Mem_Write+0x1f0>)
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e36:	88f8      	ldrh	r0, [r7, #6]
 8000e38:	893a      	ldrh	r2, [r7, #8]
 8000e3a:	8979      	ldrh	r1, [r7, #10]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4603      	mov	r3, r0
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 faf8 	bl	800143c <I2C_RequestMemoryWrite>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d052      	beq.n	8000ef8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e081      	b.n	8000f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 fd42 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00d      	beq.n	8000e82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d107      	bne.n	8000e7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e06b      	b.n	8000f5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d11b      	bne.n	8000ef8 <HAL_I2C_Mem_Write+0x180>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d017      	beq.n	8000ef8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1aa      	bne.n	8000e56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 fd2e 	bl	8001966 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00d      	beq.n	8000f2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d107      	bne.n	8000f28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e016      	b.n	8000f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e000      	b.n	8000f5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8000f58:	2302      	movs	r3, #2
  }
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	00100002 	.word	0x00100002
 8000f68:	ffff0000 	.word	0xffff0000

08000f6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	817b      	strh	r3, [r7, #10]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	813b      	strh	r3, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f8a:	f7ff fb47 	bl	800061c <HAL_GetTick>
 8000f8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	f040 8244 	bne.w	8001426 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2319      	movs	r3, #25
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4982      	ldr	r1, [pc, #520]	; (80011b0 <HAL_I2C_Mem_Read+0x244>)
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 fbc5 	bl	8001738 <I2C_WaitOnFlagUntilTimeout>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e237      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_I2C_Mem_Read+0x5a>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e230      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d007      	beq.n	8000fec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2222      	movs	r2, #34	; 0x22
 8001000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800101c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001022:	b29a      	uxth	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <HAL_I2C_Mem_Read+0x248>)
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800102e:	88f8      	ldrh	r0, [r7, #6]
 8001030:	893a      	ldrh	r2, [r7, #8]
 8001032:	8979      	ldrh	r1, [r7, #10]
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4603      	mov	r3, r0
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 fa92 	bl	8001568 <I2C_RequestMemoryRead>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e1ec      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001052:	2b00      	cmp	r3, #0
 8001054:	d113      	bne.n	800107e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e1c0      	b.n	8001400 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001082:	2b01      	cmp	r3, #1
 8001084:	d11e      	bne.n	80010c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001094:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001096:	b672      	cpsid	i
}
 8001098:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010c0:	b662      	cpsie	i
}
 80010c2:	e035      	b.n	8001130 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d11e      	bne.n	800110a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001104:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001106:	b662      	cpsie	i
}
 8001108:	e012      	b.n	8001130 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001118:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001130:	e166      	b.n	8001400 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001136:	2b03      	cmp	r3, #3
 8001138:	f200 811f 	bhi.w	800137a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001140:	2b01      	cmp	r3, #1
 8001142:	d123      	bne.n	800118c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 fc4d 	bl	80019e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e167      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001174:	3b01      	subs	r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	855a      	strh	r2, [r3, #42]	; 0x2a
 800118a:	e139      	b.n	8001400 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001190:	2b02      	cmp	r3, #2
 8001192:	d152      	bne.n	800123a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800119a:	2200      	movs	r2, #0
 800119c:	4906      	ldr	r1, [pc, #24]	; (80011b8 <HAL_I2C_Mem_Read+0x24c>)
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 faca 	bl	8001738 <I2C_WaitOnFlagUntilTimeout>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d008      	beq.n	80011bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e13c      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
 80011ae:	bf00      	nop
 80011b0:	00100002 	.word	0x00100002
 80011b4:	ffff0000 	.word	0xffff0000
 80011b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001202:	b662      	cpsie	i
}
 8001204:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001222:	3b01      	subs	r3, #1
 8001224:	b29a      	uxth	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122e:	b29b      	uxth	r3, r3
 8001230:	3b01      	subs	r3, #1
 8001232:	b29a      	uxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001238:	e0e2      	b.n	8001400 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001240:	2200      	movs	r2, #0
 8001242:	497b      	ldr	r1, [pc, #492]	; (8001430 <HAL_I2C_Mem_Read+0x4c4>)
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 fa77 	bl	8001738 <I2C_WaitOnFlagUntilTimeout>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0e9      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001290:	b29b      	uxth	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800129a:	4b66      	ldr	r3, [pc, #408]	; (8001434 <HAL_I2C_Mem_Read+0x4c8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	4a65      	ldr	r2, [pc, #404]	; (8001438 <HAL_I2C_Mem_Read+0x4cc>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0a1a      	lsrs	r2, r3, #8
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00da      	lsls	r2, r3, #3
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d118      	bne.n	80012f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f043 0220 	orr.w	r2, r3, #32
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80012e2:	b662      	cpsie	i
}
 80012e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e09a      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d1d9      	bne.n	80012b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132c:	3b01      	subs	r3, #1
 800132e:	b29a      	uxth	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001342:	b662      	cpsie	i
}
 8001344:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001362:	3b01      	subs	r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136e:	b29b      	uxth	r3, r3
 8001370:	3b01      	subs	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001378:	e042      	b.n	8001400 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fb32 	bl	80019e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e04c      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d118      	bne.n	8001400 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	2b00      	cmp	r3, #0
 8001406:	f47f ae94 	bne.w	8001132 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2220      	movs	r2, #32
 800140e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001426:	2302      	movs	r3, #2
  }
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	00010004 	.word	0x00010004
 8001434:	20000000 	.word	0x20000000
 8001438:	14f8b589 	.word	0x14f8b589

0800143c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4603      	mov	r3, r0
 800144c:	817b      	strh	r3, [r7, #10]
 800144e:	460b      	mov	r3, r1
 8001450:	813b      	strh	r3, [r7, #8]
 8001452:	4613      	mov	r3, r2
 8001454:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001464:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	2200      	movs	r2, #0
 800146e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f960 	bl	8001738 <I2C_WaitOnFlagUntilTimeout>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800148c:	d103      	bne.n	8001496 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e05f      	b.n	800155a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800149a:	897b      	ldrh	r3, [r7, #10]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	6a3a      	ldr	r2, [r7, #32]
 80014ae:	492d      	ldr	r1, [pc, #180]	; (8001564 <I2C_RequestMemoryWrite+0x128>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f998 	bl	80017e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e04c      	b.n	800155a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d8:	6a39      	ldr	r1, [r7, #32]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 fa02 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00d      	beq.n	8001502 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d107      	bne.n	80014fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e02b      	b.n	800155a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	e021      	b.n	8001558 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	6a39      	ldr	r1, [r7, #32]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f9dc 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00d      	beq.n	800154e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	2b04      	cmp	r3, #4
 8001538:	d107      	bne.n	800154a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001548:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e005      	b.n	800155a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800154e:	893b      	ldrh	r3, [r7, #8]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	00010002 	.word	0x00010002

08001568 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	817b      	strh	r3, [r7, #10]
 800157a:	460b      	mov	r3, r1
 800157c:	813b      	strh	r3, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001590:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f8c2 	bl	8001738 <I2C_WaitOnFlagUntilTimeout>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00d      	beq.n	80015d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c8:	d103      	bne.n	80015d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0aa      	b.n	800172c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015d6:	897b      	ldrh	r3, [r7, #10]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80015e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	4952      	ldr	r1, [pc, #328]	; (8001734 <I2C_RequestMemoryRead+0x1cc>)
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f8fa 	bl	80017e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e097      	b.n	800172c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	6a39      	ldr	r1, [r7, #32]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 f964 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00d      	beq.n	800163e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2b04      	cmp	r3, #4
 8001628:	d107      	bne.n	800163a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e076      	b.n	800172c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001644:	893b      	ldrh	r3, [r7, #8]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	e021      	b.n	8001694 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001650:	893b      	ldrh	r3, [r7, #8]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f93e 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b04      	cmp	r3, #4
 8001674:	d107      	bne.n	8001686 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001684:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e050      	b.n	800172c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800168a:	893b      	ldrh	r3, [r7, #8]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001696:	6a39      	ldr	r1, [r7, #32]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f923 	bl	80018e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00d      	beq.n	80016c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d107      	bne.n	80016bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e035      	b.n	800172c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f82b 	bl	8001738 <I2C_WaitOnFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00d      	beq.n	8001704 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f6:	d103      	bne.n	8001700 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e013      	b.n	800172c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001704:	897b      	ldrh	r3, [r7, #10]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	6a3a      	ldr	r2, [r7, #32]
 8001718:	4906      	ldr	r1, [pc, #24]	; (8001734 <I2C_RequestMemoryRead+0x1cc>)
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f863 	bl	80017e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	00010002 	.word	0x00010002

08001738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001748:	e025      	b.n	8001796 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d021      	beq.n	8001796 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001752:	f7fe ff63 	bl	800061c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d302      	bcc.n	8001768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d116      	bne.n	8001796 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f043 0220 	orr.w	r2, r3, #32
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e023      	b.n	80017de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10d      	bne.n	80017bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4013      	ands	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	e00c      	b.n	80017d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4013      	ands	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf0c      	ite	eq
 80017ce:	2301      	moveq	r3, #1
 80017d0:	2300      	movne	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d0b6      	beq.n	800174a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017f4:	e051      	b.n	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001804:	d123      	bne.n	800184e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001814:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800181e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f043 0204 	orr.w	r2, r3, #4
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e046      	b.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d021      	beq.n	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001856:	f7fe fee1 	bl	800061c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d302      	bcc.n	800186c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d116      	bne.n	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f043 0220 	orr.w	r2, r3, #32
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e020      	b.n	80018dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	0c1b      	lsrs	r3, r3, #16
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10c      	bne.n	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4013      	ands	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	e00b      	b.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	43da      	mvns	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	4013      	ands	r3, r2
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d18d      	bne.n	80017f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f0:	e02d      	b.n	800194e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f8ce 	bl	8001a94 <I2C_IsAcknowledgeFailed>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e02d      	b.n	800195e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d021      	beq.n	800194e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800190a:	f7fe fe87 	bl	800061c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d302      	bcc.n	8001920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d116      	bne.n	800194e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f043 0220 	orr.w	r2, r3, #32
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b80      	cmp	r3, #128	; 0x80
 800195a:	d1ca      	bne.n	80018f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001972:	e02d      	b.n	80019d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f88d 	bl	8001a94 <I2C_IsAcknowledgeFailed>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e02d      	b.n	80019e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198a:	d021      	beq.n	80019d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198c:	f7fe fe46 	bl	800061c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	429a      	cmp	r2, r3
 800199a:	d302      	bcc.n	80019a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f043 0220 	orr.w	r2, r3, #32
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e007      	b.n	80019e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d1ca      	bne.n	8001974 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019f4:	e042      	b.n	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	d119      	bne.n	8001a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0210 	mvn.w	r2, #16
 8001a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e029      	b.n	8001a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a38:	f7fe fdf0 	bl	800061c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d302      	bcc.n	8001a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e007      	b.n	8001a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d1b5      	bne.n	80019f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	d11b      	bne.n	8001ae4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ab4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f043 0204 	orr.w	r2, r3, #4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e272      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8087 	beq.w	8001c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b10:	4b92      	ldr	r3, [pc, #584]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d00c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1c:	4b8f      	ldr	r3, [pc, #572]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
 8001b28:	4b8c      	ldr	r3, [pc, #560]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d10b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d06c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x12c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d168      	bne.n	8001c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e24c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x76>
 8001b58:	4b80      	ldr	r3, [pc, #512]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a7f      	ldr	r2, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e02e      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7a      	ldr	r2, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b78      	ldr	r3, [pc, #480]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a77      	ldr	r2, [pc, #476]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e01d      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0xbc>
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a71      	ldr	r2, [pc, #452]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001bac:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6a      	ldr	r2, [pc, #424]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a67      	ldr	r2, [pc, #412]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fd26 	bl	800061c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7fe fd22 	bl	800061c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e200      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xe4>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe fd12 	bl	800061c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7fe fd0e 	bl	800061c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1ec      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x10c>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d11c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d116      	bne.n	8001c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1c0      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4939      	ldr	r1, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fcc7 	bl	800061c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c92:	f7fe fcc3 	bl	800061c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1a1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4927      	ldr	r1, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
 8001cc4:	e015      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fca6 	bl	800061c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7fe fca2 	bl	800061c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e180      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d019      	beq.n	8001d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7fe fc86 	bl	800061c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7fe fc82 	bl	800061c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e160      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 fad8 	bl	80022e8 <RCC_Delay>
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe fc6c 	bl	800061c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7fe fc68 	bl	800061c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e146      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	42420000 	.word	0x42420000
 8001d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e9      	bne.n	8001d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a6 	beq.w	8001ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a87      	ldr	r2, [pc, #540]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d118      	bne.n	8001dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe fc29 	bl	800061c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7fe fc25 	bl	800061c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e103      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4c8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x312>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e02d      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x334>
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a69      	ldr	r2, [pc, #420]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a66      	ldr	r2, [pc, #408]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	e01c      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d10c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x356>
 8001e2c:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e00b      	b.n	8001e5e <HAL_RCC_OscConfig+0x36e>
 8001e46:	4b5b      	ldr	r3, [pc, #364]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a5a      	ldr	r2, [pc, #360]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d015      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7fe fbd9 	bl	800061c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fbd5 	bl	800061c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0b1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ee      	beq.n	8001e6e <HAL_RCC_OscConfig+0x37e>
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7fe fbc3 	bl	800061c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7fe fbbf 	bl	800061c <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e09b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ee      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a3b      	ldr	r2, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d061      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d146      	bne.n	8001f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fb93 	bl	800061c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe fb8f 	bl	800061c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e06d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d108      	bne.n	8001f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4921      	ldr	r1, [pc, #132]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a19      	ldr	r1, [r3, #32]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	430b      	orrs	r3, r1
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fb63 	bl	800061c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe fb5f 	bl	800061c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46a>
 8001f78:	e035      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fb4c 	bl	800061c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe fb48 	bl	800061c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e026      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x498>
 8001fa6:	e01e      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e019      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x500>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0d0      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4965      	ldr	r1, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800205a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d040      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e073      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fa9a 	bl	800061c <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7fe fa96 	bl	800061c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e053      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d210      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	4922      	ldr	r1, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	490a      	ldr	r1, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1cc>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9f8 	bl	8000598 <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080029a8 	.word	0x080029a8
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b490      	push	{r4, r7}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_GetSysClockFreq+0xac>)
 80021d0:	1d3c      	adds	r4, r7, #4
 80021d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021d8:	f240 2301 	movw	r3, #513	; 0x201
 80021dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x40>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x46>
 8002206:	e02b      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	e02b      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3328      	adds	r3, #40	; 0x28
 8002218:	443b      	add	r3, r7
 800221a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800221e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_RCC_GetSysClockFreq+0xb0>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0c5b      	lsrs	r3, r3, #17
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	3328      	adds	r3, #40	; 0x28
 8002236:	443b      	add	r3, r7
 8002238:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800223c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002242:	fb03 f202 	mul.w	r2, r3, r2
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e004      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	623b      	str	r3, [r7, #32]
      break;
 800225e:	e002      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002262:	623b      	str	r3, [r7, #32]
      break;
 8002264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002266:	6a3b      	ldr	r3, [r7, #32]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bc90      	pop	{r4, r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	08002998 	.word	0x08002998
 8002278:	40021000 	.word	0x40021000
 800227c:	007a1200 	.word	0x007a1200
 8002280:	003d0900 	.word	0x003d0900

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <HAL_RCC_GetHCLKFreq+0x10>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800229c:	f7ff fff2 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	080029b8 	.word	0x080029b8

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c4:	f7ff ffde 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0adb      	lsrs	r3, r3, #11
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	080029b8 	.word	0x080029b8

080022e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <RCC_Delay+0x34>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <RCC_Delay+0x38>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a5b      	lsrs	r3, r3, #9
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002304:	bf00      	nop
  }
  while (Delay --);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <RCC_Delay+0x1c>
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000000 	.word	0x20000000
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e03f      	b.n	80023b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe f86e 	bl	800042c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f829 	bl	80023c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800237c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800238c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800239c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023fa:	f023 030c 	bic.w	r3, r3, #12
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	430b      	orrs	r3, r1
 8002406:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <UART_SetConfig+0x114>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002428:	f7ff ff4a 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	e002      	b.n	8002436 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002430:	f7ff ff32 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <UART_SetConfig+0x118>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	0119      	lsls	r1, r3, #4
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fbb2 f2f3 	udiv	r2, r2, r3
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <UART_SetConfig+0x118>)
 800246e:	fba3 0302 	umull	r0, r3, r3, r2
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	3332      	adds	r3, #50	; 0x32
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <UART_SetConfig+0x118>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	4419      	add	r1, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <UART_SetConfig+0x118>)
 80024a6:	fba3 0302 	umull	r0, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2064      	movs	r0, #100	; 0x64
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <UART_SetConfig+0x118>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	440a      	add	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013800 	.word	0x40013800
 80024d8:	51eb851f 	.word	0x51eb851f

080024dc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    params->mode = BMP280_MODE_NORMAL;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2203      	movs	r2, #3
 80024e8:	701a      	strb	r2, [r3, #0]
    params->filter = BMP280_FILTER_OFF;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	705a      	strb	r2, [r3, #1]
    params->oversampling_pressure = BMP280_STANDARD;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	709a      	strb	r2, [r3, #2]
    params->oversampling_temperature = BMP280_STANDARD;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2203      	movs	r2, #3
 80024fa:	70da      	strb	r2, [r3, #3]
    params->oversampling_humidity = BMP280_STANDARD;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	711a      	strb	r2, [r3, #4]
    params->standby = BMP280_STANDBY_250;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	715a      	strb	r2, [r3, #5]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8002512:	b580      	push	{r7, lr}
 8002514:	b08a      	sub	sp, #40	; 0x28
 8002516:	af04      	add	r7, sp, #16
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	460b      	mov	r3, r1
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	72fb      	strb	r3, [r7, #11]
    uint16_t tx_buff;
    uint8_t rx_buff[2];
    tx_buff = (dev->addr << 1);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	82fb      	strh	r3, [r7, #22]

    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800252c:	7afb      	ldrb	r3, [r7, #11]
 800252e:	b29a      	uxth	r2, r3
 8002530:	8af9      	ldrh	r1, [r7, #22]
 8002532:	f241 3388 	movw	r3, #5000	; 0x1388
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	2302      	movs	r3, #2
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2301      	movs	r3, #1
 8002544:	f7fe fd12 	bl	8000f6c <HAL_I2C_Mem_Read>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10b      	bne.n	8002566 <read_register16+0x54>
            == HAL_OK) {
        *value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800254e:	7d7b      	ldrb	r3, [r7, #21]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	b21a      	sxth	r2, r3
 8002554:	7d3b      	ldrb	r3, [r7, #20]
 8002556:	b21b      	sxth	r3, r3
 8002558:	4313      	orrs	r3, r2
 800255a:	b21b      	sxth	r3, r3
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	801a      	strh	r2, [r3, #0]
        return true;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <read_register16+0x56>
    } else
        return false;
 8002566:	2300      	movs	r3, #0

}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
        uint8_t len) {
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b08b      	sub	sp, #44	; 0x2c
 8002574:	af04      	add	r7, sp, #16
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	460b      	mov	r3, r1
 800257e:	72fb      	strb	r3, [r7, #11]
 8002580:	4613      	mov	r3, r2
 8002582:	72bb      	strb	r3, [r7, #10]
    uint16_t tx_buff;
    tx_buff = (dev->addr << 1);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	82fb      	strh	r3, [r7, #22]
//IIC的配置信息结构体    七位地址  内部内存地址 内部内存地址大小 指向数据缓冲区的指针 发送的数据量 超时时间
    if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	b29a      	uxth	r2, r3
 8002594:	7abb      	ldrb	r3, [r7, #10]
 8002596:	b29b      	uxth	r3, r3
 8002598:	8af9      	ldrh	r1, [r7, #22]
 800259a:	f241 3488 	movw	r4, #5000	; 0x1388
 800259e:	9402      	str	r4, [sp, #8]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2301      	movs	r3, #1
 80025a8:	f7fe fce0 	bl	8000f6c <HAL_I2C_Mem_Read>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <read_data+0x46>
        return 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <read_data+0x48>
    else
        return 1;
 80025b6:	2301      	movs	r3, #1

}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

    if (read_register16(dev, 0x88, &dev->dig_T1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	2188      	movs	r1, #136	; 0x88
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff9f 	bl	8002512 <read_register16>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d06f      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3302      	adds	r3, #2
 80025de:	461a      	mov	r2, r3
 80025e0:	218a      	movs	r1, #138	; 0x8a
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff95 	bl	8002512 <read_register16>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d065      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	461a      	mov	r2, r3
 80025f4:	218c      	movs	r1, #140	; 0x8c
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff8b 	bl	8002512 <read_register16>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d05b      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x8e, &dev->dig_P1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3306      	adds	r3, #6
 8002606:	461a      	mov	r2, r3
 8002608:	218e      	movs	r1, #142	; 0x8e
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ff81 	bl	8002512 <read_register16>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d051      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3308      	adds	r3, #8
 800261a:	461a      	mov	r2, r3
 800261c:	2190      	movs	r1, #144	; 0x90
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff77 	bl	8002512 <read_register16>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d047      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	330a      	adds	r3, #10
 800262e:	461a      	mov	r2, r3
 8002630:	2192      	movs	r1, #146	; 0x92
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff6d 	bl	8002512 <read_register16>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03d      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	330c      	adds	r3, #12
 8002642:	461a      	mov	r2, r3
 8002644:	2194      	movs	r1, #148	; 0x94
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff63 	bl	8002512 <read_register16>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d033      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	330e      	adds	r3, #14
 8002656:	461a      	mov	r2, r3
 8002658:	2196      	movs	r1, #150	; 0x96
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff59 	bl	8002512 <read_register16>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d029      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3310      	adds	r3, #16
 800266a:	461a      	mov	r2, r3
 800266c:	2198      	movs	r1, #152	; 0x98
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff4f 	bl	8002512 <read_register16>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01f      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3312      	adds	r3, #18
 800267e:	461a      	mov	r2, r3
 8002680:	219a      	movs	r1, #154	; 0x9a
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff45 	bl	8002512 <read_register16>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d015      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3314      	adds	r3, #20
 8002692:	461a      	mov	r2, r3
 8002694:	219c      	movs	r1, #156	; 0x9c
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff3b 	bl	8002512 <read_register16>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <read_calibration_data+0xfa>
            && read_register16(dev, 0x9e,
                    (uint16_t *) &dev->dig_P9)) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3316      	adds	r3, #22
            && read_register16(dev, 0x9e,
 80026a6:	461a      	mov	r2, r3
 80026a8:	219e      	movs	r1, #158	; 0x9e
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff31 	bl	8002512 <read_register16>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <read_calibration_data+0xfa>

        return true;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <read_calibration_data+0xfc>
    }

    return false;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    uint16_t h4, h5;

    if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f103 0218 	add.w	r2, r3, #24
 80026d2:	2301      	movs	r3, #1
 80026d4:	21a1      	movs	r1, #161	; 0xa1
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff4a 	bl	8002570 <read_data>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d14b      	bne.n	800277a <read_hum_calibration_data+0xb6>
            && read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	331a      	adds	r3, #26
 80026e6:	461a      	mov	r2, r3
 80026e8:	21e1      	movs	r1, #225	; 0xe1
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff11 	bl	8002512 <read_register16>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d041      	beq.n	800277a <read_hum_calibration_data+0xb6>
            && !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f103 021c 	add.w	r2, r3, #28
 80026fc:	2301      	movs	r3, #1
 80026fe:	21e3      	movs	r1, #227	; 0xe3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff35 	bl	8002570 <read_data>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d136      	bne.n	800277a <read_hum_calibration_data+0xb6>
            && read_register16(dev, 0xe4, &h4)
 800270c:	f107 030e 	add.w	r3, r7, #14
 8002710:	461a      	mov	r2, r3
 8002712:	21e4      	movs	r1, #228	; 0xe4
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fefc 	bl	8002512 <read_register16>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02c      	beq.n	800277a <read_hum_calibration_data+0xb6>
            && read_register16(dev, 0xe5, &h5)
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	461a      	mov	r2, r3
 8002726:	21e5      	movs	r1, #229	; 0xe5
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff fef2 	bl	8002512 <read_register16>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d022      	beq.n	800277a <read_hum_calibration_data+0xb6>
            && !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800273a:	2301      	movs	r3, #1
 800273c:	21e7      	movs	r1, #231	; 0xe7
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff16 	bl	8002570 <read_data>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d117      	bne.n	800277a <read_hum_calibration_data+0xb6>
        dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	b21b      	sxth	r3, r3
 8002750:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002754:	b21a      	sxth	r2, r3
 8002756:	89fb      	ldrh	r3, [r7, #14]
 8002758:	121b      	asrs	r3, r3, #8
 800275a:	b21b      	sxth	r3, r3
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	b21b      	sxth	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b21a      	sxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	83da      	strh	r2, [r3, #30]
        dev->dig_H5 = h5 >> 4;
 800276a:	89bb      	ldrh	r3, [r7, #12]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	b29b      	uxth	r3, r3
 8002770:	b21a      	sxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	841a      	strh	r2, [r3, #32]

        return true;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <read_hum_calibration_data+0xb8>
    }

    return false;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af04      	add	r7, sp, #16
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
 8002790:	4613      	mov	r3, r2
 8002792:	70bb      	strb	r3, [r7, #2]
    uint16_t tx_buff;

    tx_buff = (dev->addr << 1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	81fb      	strh	r3, [r7, #14]

    if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	89f9      	ldrh	r1, [r7, #14]
 80027a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	2301      	movs	r3, #1
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	1cbb      	adds	r3, r7, #2
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2301      	movs	r3, #1
 80027b6:	f7fe fadf 	bl	8000d78 <HAL_I2C_Mem_Write>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <write_register8+0x40>

        return false;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <write_register8+0x42>
    else
        return true;
 80027c4:	2301      	movs	r3, #1
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]

    if (dev->addr != BMP280_I2C_ADDRESS_0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027dc:	2b76      	cmp	r3, #118	; 0x76
 80027de:	d005      	beq.n	80027ec <bmp280_init+0x1e>
            && dev->addr != BMP280_I2C_ADDRESS_1) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027e4:	2b77      	cmp	r3, #119	; 0x77
 80027e6:	d001      	beq.n	80027ec <bmp280_init+0x1e>
        return false;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e099      	b.n	8002920 <bmp280_init+0x152>
    }

    if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027f2:	2301      	movs	r3, #1
 80027f4:	21d0      	movs	r1, #208	; 0xd0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff feba 	bl	8002570 <read_data>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <bmp280_init+0x38>
        return false;
 8002802:	2300      	movs	r3, #0
 8002804:	e08c      	b.n	8002920 <bmp280_init+0x152>
    }

    if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800280c:	2b58      	cmp	r3, #88	; 0x58
 800280e:	d006      	beq.n	800281e <bmp280_init+0x50>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002816:	2b60      	cmp	r3, #96	; 0x60
 8002818:	d001      	beq.n	800281e <bmp280_init+0x50>
        return false;
 800281a:	2300      	movs	r3, #0
 800281c:	e080      	b.n	8002920 <bmp280_init+0x152>
    }

    // Soft reset.
    if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800281e:	22b6      	movs	r2, #182	; 0xb6
 8002820:	21e0      	movs	r1, #224	; 0xe0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffae 	bl	8002784 <write_register8>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <bmp280_init+0x64>
        return false;
 800282e:	2300      	movs	r3, #0
 8002830:	e076      	b.n	8002920 <bmp280_init+0x152>
    }

    // Wait until finished copying over the NVP data.
    while (1) {
        uint8_t status;
        if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002832:	f107 020c 	add.w	r2, r7, #12
 8002836:	2301      	movs	r3, #1
 8002838:	21f3      	movs	r1, #243	; 0xf3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fe98 	bl	8002570 <read_data>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f5      	bne.n	8002832 <bmp280_init+0x64>
                && (status & 1) == 0)
 8002846:	7b3b      	ldrb	r3, [r7, #12]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <bmp280_init+0x64>
            break;
    }

    if (!read_calibration_data(dev)) {
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff feb5 	bl	80025c0 <read_calibration_data>
 8002856:	4603      	mov	r3, r0
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d100      	bne.n	8002864 <bmp280_init+0x96>
 8002862:	e001      	b.n	8002868 <bmp280_init+0x9a>
        return false;
 8002864:	2300      	movs	r3, #0
 8002866:	e05b      	b.n	8002920 <bmp280_init+0x152>
    }

    if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800286e:	2b60      	cmp	r3, #96	; 0x60
 8002870:	d10a      	bne.n	8002888 <bmp280_init+0xba>
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ff26 	bl	80026c4 <read_hum_calibration_data>
 8002878:	4603      	mov	r3, r0
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <bmp280_init+0xba>
        return false;
 8002884:	2300      	movs	r3, #0
 8002886:	e04b      	b.n	8002920 <bmp280_init+0x152>
    }

    uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	795b      	ldrb	r3, [r3, #5]
 800288c:	015b      	lsls	r3, r3, #5
 800288e:	b25a      	sxtb	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	b25b      	sxtb	r3, r3
 8002898:	4313      	orrs	r3, r2
 800289a:	b25b      	sxtb	r3, r3
 800289c:	73fb      	strb	r3, [r7, #15]
    if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	461a      	mov	r2, r3
 80028a2:	21f5      	movs	r1, #245	; 0xf5
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff6d 	bl	8002784 <write_register8>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <bmp280_init+0xe6>
        return false;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e035      	b.n	8002920 <bmp280_init+0x152>
    }

    if (params->mode == BMP280_MODE_FORCED) {
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <bmp280_init+0xf4>
        params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
    }

    uint8_t ctrl = (params->oversampling_temperature << 5)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	78db      	ldrb	r3, [r3, #3]
 80028c6:	015b      	lsls	r3, r3, #5
            | (params->oversampling_pressure << 2) | (params->mode);
 80028c8:	b25a      	sxtb	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	789b      	ldrb	r3, [r3, #2]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b25a      	sxtb	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b25b      	sxtb	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	b25b      	sxtb	r3, r3
    uint8_t ctrl = (params->oversampling_temperature << 5)
 80028e0:	73bb      	strb	r3, [r7, #14]

    if (dev->id == BME280_CHIP_ID) {
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80028e8:	2b60      	cmp	r3, #96	; 0x60
 80028ea:	d10d      	bne.n	8002908 <bmp280_init+0x13a>
        // Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
        uint8_t ctrl_hum = params->oversampling_humidity;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	737b      	strb	r3, [r7, #13]
        if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80028f2:	7b7b      	ldrb	r3, [r7, #13]
 80028f4:	461a      	mov	r2, r3
 80028f6:	21f2      	movs	r1, #242	; 0xf2
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff43 	bl	8002784 <write_register8>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <bmp280_init+0x13a>
            return false;
 8002904:	2300      	movs	r3, #0
 8002906:	e00b      	b.n	8002920 <bmp280_init+0x152>
        }
    }

    if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002908:	7bbb      	ldrb	r3, [r7, #14]
 800290a:	461a      	mov	r2, r3
 800290c:	21f4      	movs	r1, #244	; 0xf4
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff38 	bl	8002784 <write_register8>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <bmp280_init+0x150>
        return false;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <bmp280_init+0x152>
    }

    return true;
 800291e:	2301      	movs	r3, #1
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <__libc_init_array>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	2600      	movs	r6, #0
 800292c:	4d0c      	ldr	r5, [pc, #48]	; (8002960 <__libc_init_array+0x38>)
 800292e:	4c0d      	ldr	r4, [pc, #52]	; (8002964 <__libc_init_array+0x3c>)
 8002930:	1b64      	subs	r4, r4, r5
 8002932:	10a4      	asrs	r4, r4, #2
 8002934:	42a6      	cmp	r6, r4
 8002936:	d109      	bne.n	800294c <__libc_init_array+0x24>
 8002938:	f000 f822 	bl	8002980 <_init>
 800293c:	2600      	movs	r6, #0
 800293e:	4d0a      	ldr	r5, [pc, #40]	; (8002968 <__libc_init_array+0x40>)
 8002940:	4c0a      	ldr	r4, [pc, #40]	; (800296c <__libc_init_array+0x44>)
 8002942:	1b64      	subs	r4, r4, r5
 8002944:	10a4      	asrs	r4, r4, #2
 8002946:	42a6      	cmp	r6, r4
 8002948:	d105      	bne.n	8002956 <__libc_init_array+0x2e>
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002950:	4798      	blx	r3
 8002952:	3601      	adds	r6, #1
 8002954:	e7ee      	b.n	8002934 <__libc_init_array+0xc>
 8002956:	f855 3b04 	ldr.w	r3, [r5], #4
 800295a:	4798      	blx	r3
 800295c:	3601      	adds	r6, #1
 800295e:	e7f2      	b.n	8002946 <__libc_init_array+0x1e>
 8002960:	080029c0 	.word	0x080029c0
 8002964:	080029c0 	.word	0x080029c0
 8002968:	080029c0 	.word	0x080029c0
 800296c:	080029c4 	.word	0x080029c4

08002970 <memset>:
 8002970:	4603      	mov	r3, r0
 8002972:	4402      	add	r2, r0
 8002974:	4293      	cmp	r3, r2
 8002976:	d100      	bne.n	800297a <memset+0xa>
 8002978:	4770      	bx	lr
 800297a:	f803 1b01 	strb.w	r1, [r3], #1
 800297e:	e7f9      	b.n	8002974 <memset+0x4>

08002980 <_init>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr

0800298c <_fini>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	bf00      	nop
 8002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002992:	bc08      	pop	{r3}
 8002994:	469e      	mov	lr, r3
 8002996:	4770      	bx	lr
