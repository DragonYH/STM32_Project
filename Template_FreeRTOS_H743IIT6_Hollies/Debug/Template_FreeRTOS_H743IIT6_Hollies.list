
Template_FreeRTOS_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc18  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c08  0800beb8  0800beb8  0000ceb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dac0  0800dac0  0000eac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dac8  0800dac8  0000eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dacc  0800dacc  0000eacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800dad0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005130  240001dc  0800dcac  0000f1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400530c  0800dcac  0000f30c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fdca  00000000  00000000  0000f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004582  00000000  00000000  0002efd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001920  00000000  00000000  00033558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001326  00000000  00000000  00034e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ae85  00000000  00000000  0003619e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f4f4  00000000  00000000  00071023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c3ef  00000000  00000000  00090517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fc906  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007718  00000000  00000000  001fc94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  00204064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bea0 	.word	0x0800bea0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800bea0 	.word	0x0800bea0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 8000394:	f008 ff48 	bl	8009228 <OLED_Init>
  ad7606_Init();
 8000398:	f008 fc86 	bl	8008ca8 <ad7606_Init>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 800039c:	2100      	movs	r1, #0
 800039e:	480a      	ldr	r0, [pc, #40]	@ (80003c8 <MX_FREERTOS_Init+0x38>)
 80003a0:	f008 fcbc 	bl	8008d1c <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 80003a4:	4a09      	ldr	r2, [pc, #36]	@ (80003cc <MX_FREERTOS_Init+0x3c>)
 80003a6:	2100      	movs	r1, #0
 80003a8:	4809      	ldr	r0, [pc, #36]	@ (80003d0 <MX_FREERTOS_Init+0x40>)
 80003aa:	f005 ff11 	bl	80061d0 <osThreadNew>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4a08      	ldr	r2, [pc, #32]	@ (80003d4 <MX_FREERTOS_Init+0x44>)
 80003b2:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 80003b4:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <MX_FREERTOS_Init+0x48>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	4808      	ldr	r0, [pc, #32]	@ (80003dc <MX_FREERTOS_Init+0x4c>)
 80003ba:	f005 ff09 	bl	80061d0 <osThreadNew>
 80003be:	4603      	mov	r3, r0
 80003c0:	4a07      	ldr	r2, [pc, #28]	@ (80003e0 <MX_FREERTOS_Init+0x50>)
 80003c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	24000380 	.word	0x24000380
 80003cc:	0800bf38 	.word	0x0800bf38
 80003d0:	080003e5 	.word	0x080003e5
 80003d4:	24000218 	.word	0x24000218
 80003d8:	0800bf5c 	.word	0x0800bf5c
 80003dc:	0800042d 	.word	0x0800042d
 80003e0:	2400021c 	.word	0x2400021c

080003e4 <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80003ec:	2101      	movs	r1, #1
 80003ee:	480e      	ldr	r0, [pc, #56]	@ (8000428 <StartStateLED+0x44>)
 80003f0:	f001 fb33 	bl	8001a5a <HAL_GPIO_TogglePin>
    osDelay(100);
 80003f4:	2064      	movs	r0, #100	@ 0x64
 80003f6:	f005 ff7d 	bl	80062f4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80003fa:	2101      	movs	r1, #1
 80003fc:	480a      	ldr	r0, [pc, #40]	@ (8000428 <StartStateLED+0x44>)
 80003fe:	f001 fb2c 	bl	8001a5a <HAL_GPIO_TogglePin>
    osDelay(100);
 8000402:	2064      	movs	r0, #100	@ 0x64
 8000404:	f005 ff76 	bl	80062f4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000408:	2101      	movs	r1, #1
 800040a:	4807      	ldr	r0, [pc, #28]	@ (8000428 <StartStateLED+0x44>)
 800040c:	f001 fb25 	bl	8001a5a <HAL_GPIO_TogglePin>
    osDelay(250);
 8000410:	20fa      	movs	r0, #250	@ 0xfa
 8000412:	f005 ff6f 	bl	80062f4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000416:	2101      	movs	r1, #1
 8000418:	4803      	ldr	r0, [pc, #12]	@ (8000428 <StartStateLED+0x44>)
 800041a:	f001 fb1e 	bl	8001a5a <HAL_GPIO_TogglePin>
    osDelay(250);
 800041e:	20fa      	movs	r0, #250	@ 0xfa
 8000420:	f005 ff68 	bl	80062f4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000424:	bf00      	nop
 8000426:	e7e1      	b.n	80003ec <StartStateLED+0x8>
 8000428:	58022000 	.word	0x58022000

0800042c <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */

  /* Infinite loop */
  for (;;)
  {
    sprintf((char *)text, "0: %.3f", adcValue[0]);
 8000434:	4b4e      	ldr	r3, [pc, #312]	@ (8000570 <StartOledShow+0x144>)
 8000436:	edd3 7a00 	vldr	s15, [r3]
 800043a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800043e:	ec53 2b17 	vmov	r2, r3, d7
 8000442:	494c      	ldr	r1, [pc, #304]	@ (8000574 <StartOledShow+0x148>)
 8000444:	484c      	ldr	r0, [pc, #304]	@ (8000578 <StartOledShow+0x14c>)
 8000446:	f009 fc6d 	bl	8009d24 <siprintf>
    OLED_ShowString(0, 0, text, 12);
 800044a:	230c      	movs	r3, #12
 800044c:	4a4a      	ldr	r2, [pc, #296]	@ (8000578 <StartOledShow+0x14c>)
 800044e:	2100      	movs	r1, #0
 8000450:	2000      	movs	r0, #0
 8000452:	f008 feb5 	bl	80091c0 <OLED_ShowString>
    sprintf((char *)text, "1: %.3f", adcValue[1]);
 8000456:	4b46      	ldr	r3, [pc, #280]	@ (8000570 <StartOledShow+0x144>)
 8000458:	edd3 7a01 	vldr	s15, [r3, #4]
 800045c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000460:	ec53 2b17 	vmov	r2, r3, d7
 8000464:	4945      	ldr	r1, [pc, #276]	@ (800057c <StartOledShow+0x150>)
 8000466:	4844      	ldr	r0, [pc, #272]	@ (8000578 <StartOledShow+0x14c>)
 8000468:	f009 fc5c 	bl	8009d24 <siprintf>
    OLED_ShowString(64, 0, text, 12);
 800046c:	230c      	movs	r3, #12
 800046e:	4a42      	ldr	r2, [pc, #264]	@ (8000578 <StartOledShow+0x14c>)
 8000470:	2100      	movs	r1, #0
 8000472:	2040      	movs	r0, #64	@ 0x40
 8000474:	f008 fea4 	bl	80091c0 <OLED_ShowString>
    sprintf((char *)text, "2: %.3f", adcValue[2]);
 8000478:	4b3d      	ldr	r3, [pc, #244]	@ (8000570 <StartOledShow+0x144>)
 800047a:	edd3 7a02 	vldr	s15, [r3, #8]
 800047e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000482:	ec53 2b17 	vmov	r2, r3, d7
 8000486:	493e      	ldr	r1, [pc, #248]	@ (8000580 <StartOledShow+0x154>)
 8000488:	483b      	ldr	r0, [pc, #236]	@ (8000578 <StartOledShow+0x14c>)
 800048a:	f009 fc4b 	bl	8009d24 <siprintf>
    OLED_ShowString(0, 12, text, 12);
 800048e:	230c      	movs	r3, #12
 8000490:	4a39      	ldr	r2, [pc, #228]	@ (8000578 <StartOledShow+0x14c>)
 8000492:	210c      	movs	r1, #12
 8000494:	2000      	movs	r0, #0
 8000496:	f008 fe93 	bl	80091c0 <OLED_ShowString>
    sprintf((char *)text, "3: %.3f", adcValue[3]);
 800049a:	4b35      	ldr	r3, [pc, #212]	@ (8000570 <StartOledShow+0x144>)
 800049c:	edd3 7a03 	vldr	s15, [r3, #12]
 80004a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004a4:	ec53 2b17 	vmov	r2, r3, d7
 80004a8:	4936      	ldr	r1, [pc, #216]	@ (8000584 <StartOledShow+0x158>)
 80004aa:	4833      	ldr	r0, [pc, #204]	@ (8000578 <StartOledShow+0x14c>)
 80004ac:	f009 fc3a 	bl	8009d24 <siprintf>
    OLED_ShowString(64, 12, text, 12);
 80004b0:	230c      	movs	r3, #12
 80004b2:	4a31      	ldr	r2, [pc, #196]	@ (8000578 <StartOledShow+0x14c>)
 80004b4:	210c      	movs	r1, #12
 80004b6:	2040      	movs	r0, #64	@ 0x40
 80004b8:	f008 fe82 	bl	80091c0 <OLED_ShowString>
    sprintf((char *)text, "4: %.3f", adcValue[4]);
 80004bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <StartOledShow+0x144>)
 80004be:	edd3 7a04 	vldr	s15, [r3, #16]
 80004c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004c6:	ec53 2b17 	vmov	r2, r3, d7
 80004ca:	492f      	ldr	r1, [pc, #188]	@ (8000588 <StartOledShow+0x15c>)
 80004cc:	482a      	ldr	r0, [pc, #168]	@ (8000578 <StartOledShow+0x14c>)
 80004ce:	f009 fc29 	bl	8009d24 <siprintf>
    OLED_ShowString(0, 24, text, 12);
 80004d2:	230c      	movs	r3, #12
 80004d4:	4a28      	ldr	r2, [pc, #160]	@ (8000578 <StartOledShow+0x14c>)
 80004d6:	2118      	movs	r1, #24
 80004d8:	2000      	movs	r0, #0
 80004da:	f008 fe71 	bl	80091c0 <OLED_ShowString>
    sprintf((char *)text, "5: %.3f", adcValue[5]);
 80004de:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <StartOledShow+0x144>)
 80004e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80004e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004e8:	ec53 2b17 	vmov	r2, r3, d7
 80004ec:	4927      	ldr	r1, [pc, #156]	@ (800058c <StartOledShow+0x160>)
 80004ee:	4822      	ldr	r0, [pc, #136]	@ (8000578 <StartOledShow+0x14c>)
 80004f0:	f009 fc18 	bl	8009d24 <siprintf>
    OLED_ShowString(64, 24, text, 12);
 80004f4:	230c      	movs	r3, #12
 80004f6:	4a20      	ldr	r2, [pc, #128]	@ (8000578 <StartOledShow+0x14c>)
 80004f8:	2118      	movs	r1, #24
 80004fa:	2040      	movs	r0, #64	@ 0x40
 80004fc:	f008 fe60 	bl	80091c0 <OLED_ShowString>
    sprintf((char *)text, "6: %.3f", adcValue[6]);
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <StartOledShow+0x144>)
 8000502:	edd3 7a06 	vldr	s15, [r3, #24]
 8000506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800050a:	ec53 2b17 	vmov	r2, r3, d7
 800050e:	4920      	ldr	r1, [pc, #128]	@ (8000590 <StartOledShow+0x164>)
 8000510:	4819      	ldr	r0, [pc, #100]	@ (8000578 <StartOledShow+0x14c>)
 8000512:	f009 fc07 	bl	8009d24 <siprintf>
    OLED_ShowString(0, 36, text, 12);
 8000516:	230c      	movs	r3, #12
 8000518:	4a17      	ldr	r2, [pc, #92]	@ (8000578 <StartOledShow+0x14c>)
 800051a:	2124      	movs	r1, #36	@ 0x24
 800051c:	2000      	movs	r0, #0
 800051e:	f008 fe4f 	bl	80091c0 <OLED_ShowString>
    sprintf((char *)text, "7: %.3f", adcValue[7]);
 8000522:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <StartOledShow+0x144>)
 8000524:	edd3 7a07 	vldr	s15, [r3, #28]
 8000528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800052c:	ec53 2b17 	vmov	r2, r3, d7
 8000530:	4918      	ldr	r1, [pc, #96]	@ (8000594 <StartOledShow+0x168>)
 8000532:	4811      	ldr	r0, [pc, #68]	@ (8000578 <StartOledShow+0x14c>)
 8000534:	f009 fbf6 	bl	8009d24 <siprintf>
    OLED_ShowString(64, 36, text, 12);
 8000538:	230c      	movs	r3, #12
 800053a:	4a0f      	ldr	r2, [pc, #60]	@ (8000578 <StartOledShow+0x14c>)
 800053c:	2124      	movs	r1, #36	@ 0x24
 800053e:	2040      	movs	r0, #64	@ 0x40
 8000540:	f008 fe3e 	bl	80091c0 <OLED_ShowString>
    // 获取当前堆栈剩余空间
    sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
 8000544:	2000      	movs	r0, #0
 8000546:	f007 fac9 	bl	8007adc <uxTaskGetStackHighWaterMark>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	4912      	ldr	r1, [pc, #72]	@ (8000598 <StartOledShow+0x16c>)
 8000550:	4809      	ldr	r0, [pc, #36]	@ (8000578 <StartOledShow+0x14c>)
 8000552:	f009 fbe7 	bl	8009d24 <siprintf>
    OLED_ShowString(0, 48, text, 12);
 8000556:	230c      	movs	r3, #12
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <StartOledShow+0x14c>)
 800055a:	2130      	movs	r1, #48	@ 0x30
 800055c:	2000      	movs	r0, #0
 800055e:	f008 fe2f 	bl	80091c0 <OLED_ShowString>
    OLED_Refresh();
 8000562:	f008 fcbd 	bl	8008ee0 <OLED_Refresh>
    osDelay(100);
 8000566:	2064      	movs	r0, #100	@ 0x64
 8000568:	f005 fec4 	bl	80062f4 <osDelay>
    sprintf((char *)text, "0: %.3f", adcValue[0]);
 800056c:	bf00      	nop
 800056e:	e761      	b.n	8000434 <StartOledShow+0x8>
 8000570:	240051a0 	.word	0x240051a0
 8000574:	0800bed0 	.word	0x0800bed0
 8000578:	240001f8 	.word	0x240001f8
 800057c:	0800bed8 	.word	0x0800bed8
 8000580:	0800bee0 	.word	0x0800bee0
 8000584:	0800bee8 	.word	0x0800bee8
 8000588:	0800bef0 	.word	0x0800bef0
 800058c:	0800bef8 	.word	0x0800bef8
 8000590:	0800bf00 	.word	0x0800bf00
 8000594:	0800bf08 	.word	0x0800bf08
 8000598:	0800bf10 	.word	0x0800bf10

0800059c <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// GPIO触发中断
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == AD7606_BUSY_Pin)
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	2b40      	cmp	r3, #64	@ 0x40
 80005aa:	d104      	bne.n	80005b6 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    ad7606_GetValue(&hspi2, 8, adcValue);
 80005ac:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <HAL_GPIO_EXTI_Callback+0x24>)
 80005ae:	2108      	movs	r1, #8
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <HAL_GPIO_EXTI_Callback+0x28>)
 80005b2:	f008 fc17 	bl	8008de4 <ad7606_GetValue>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	240051a0 	.word	0x240051a0
 80005c4:	240002a8 	.word	0x240002a8

080005c8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b69      	ldr	r3, [pc, #420]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4a67      	ldr	r2, [pc, #412]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4b65      	ldr	r3, [pc, #404]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fc:	4b61      	ldr	r3, [pc, #388]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a60      	ldr	r2, [pc, #384]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b5d      	ldr	r3, [pc, #372]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b5a      	ldr	r3, [pc, #360]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a58      	ldr	r2, [pc, #352]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b56      	ldr	r3, [pc, #344]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b52      	ldr	r3, [pc, #328]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	4a51      	ldr	r2, [pc, #324]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000648:	4b4e      	ldr	r3, [pc, #312]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	4b4b      	ldr	r3, [pc, #300]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065c:	4a49      	ldr	r2, [pc, #292]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 800065e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000666:	4b47      	ldr	r3, [pc, #284]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000674:	4b43      	ldr	r3, [pc, #268]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800067a:	4a42      	ldr	r2, [pc, #264]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000684:	4b3f      	ldr	r3, [pc, #252]	@ (8000784 <MX_GPIO_Init+0x1bc>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	483c      	ldr	r0, [pc, #240]	@ (8000788 <MX_GPIO_Init+0x1c0>)
 8000698:	f001 f9c6 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2102      	movs	r1, #2
 80006a0:	483a      	ldr	r0, [pc, #232]	@ (800078c <MX_GPIO_Init+0x1c4>)
 80006a2:	f001 f9c1 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2188      	movs	r1, #136	@ 0x88
 80006aa:	4839      	ldr	r0, [pc, #228]	@ (8000790 <MX_GPIO_Init+0x1c8>)
 80006ac:	f001 f9bc 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	4837      	ldr	r0, [pc, #220]	@ (8000794 <MX_GPIO_Init+0x1cc>)
 80006b6:	f001 f9b7 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2140      	movs	r1, #64	@ 0x40
 80006be:	4835      	ldr	r0, [pc, #212]	@ (8000794 <MX_GPIO_Init+0x1cc>)
 80006c0:	f001 f9b2 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80006c4:	2320      	movs	r3, #32
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	482b      	ldr	r0, [pc, #172]	@ (8000788 <MX_GPIO_Init+0x1c0>)
 80006dc:	f000 fff4 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4825      	ldr	r0, [pc, #148]	@ (800078c <MX_GPIO_Init+0x1c4>)
 80006f8:	f000 ffe6 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 80006fc:	2388      	movs	r3, #136	@ 0x88
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	481f      	ldr	r0, [pc, #124]	@ (8000790 <MX_GPIO_Init+0x1c8>)
 8000714:	f000 ffd8 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000718:	2340      	movs	r3, #64	@ 0x40
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000722:	2301      	movs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4818      	ldr	r0, [pc, #96]	@ (8000790 <MX_GPIO_Init+0x1c8>)
 800072e:	f000 ffcb 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4812      	ldr	r0, [pc, #72]	@ (8000794 <MX_GPIO_Init+0x1cc>)
 800074a:	f000 ffbd 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800074e:	2340      	movs	r3, #64	@ 0x40
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <MX_GPIO_Init+0x1cc>)
 8000766:	f000 ffaf 	bl	80016c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2017      	movs	r0, #23
 8000770:	f000 ff0a 	bl	8001588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000774:	2017      	movs	r0, #23
 8000776:	f000 ff21 	bl	80015bc <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3730      	adds	r7, #48	@ 0x30
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58020800 	.word	0x58020800
 800078c:	58020400 	.word	0x58020400
 8000790:	58021800 	.word	0x58021800
 8000794:	58022000 	.word	0x58022000

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800079e:	f000 f959 	bl	8000a54 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <main+0xfc>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d11b      	bne.n	80007e6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007ae:	f3bf 8f4f 	dsb	sy
}
 80007b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b4:	f3bf 8f6f 	isb	sy
}
 80007b8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ba:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <main+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007c2:	f3bf 8f4f 	dsb	sy
}
 80007c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c8:	f3bf 8f6f 	isb	sy
}
 80007cc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007ce:	4b31      	ldr	r3, [pc, #196]	@ (8000894 <main+0xfc>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a30      	ldr	r2, [pc, #192]	@ (8000894 <main+0xfc>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007da:	f3bf 8f4f 	dsb	sy
}
 80007de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e0:	f3bf 8f6f 	isb	sy
}
 80007e4:	e000      	b.n	80007e8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007e6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <main+0xfc>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d138      	bne.n	8000866 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <main+0xfc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007fc:	f3bf 8f4f 	dsb	sy
}
 8000800:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <main+0xfc>)
 8000804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000808:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	0b5b      	lsrs	r3, r3, #13
 800080e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000812:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800081c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	015a      	lsls	r2, r3, #5
 8000822:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000826:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800082c:	4919      	ldr	r1, [pc, #100]	@ (8000894 <main+0xfc>)
 800082e:	4313      	orrs	r3, r2
 8000830:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1ef      	bne.n	800081e <main+0x86>
    } while(sets-- != 0U);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1e5a      	subs	r2, r3, #1
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e5      	bne.n	8000814 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <main+0xfc>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <main+0xfc>)
 8000854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000858:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800085a:	f3bf 8f4f 	dsb	sy
}
 800085e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy
}
 8000864:	e000      	b.n	8000868 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000866:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f000 fd4a 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f814 	bl	8000898 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000870:	f000 f8c0 	bl	80009f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f7ff fea8 	bl	80005c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000878:	f000 f932 	bl	8000ae0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800087c:	f000 f986 	bl	8000b8c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000880:	f000 fc62 	bl	8001148 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000884:	f005 fc5a 	bl	800613c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000888:	f7ff fd82 	bl	8000390 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800088c:	f005 fc7a 	bl	8006184 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <main+0xf8>
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09e      	sub	sp, #120	@ 0x78
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a2:	224c      	movs	r2, #76	@ 0x4c
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f009 fa9f 	bl	8009dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2220      	movs	r2, #32
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f009 fa98 	bl	8009dea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ba:	2002      	movs	r0, #2
 80008bc:	f001 f902 	bl	8001ac4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b48      	ldr	r3, [pc, #288]	@ (80009e8 <SystemClock_Config+0x150>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c8:	4a47      	ldr	r2, [pc, #284]	@ (80009e8 <SystemClock_Config+0x150>)
 80008ca:	f023 0301 	bic.w	r3, r3, #1
 80008ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008d0:	4b45      	ldr	r3, [pc, #276]	@ (80009e8 <SystemClock_Config+0x150>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b44      	ldr	r3, [pc, #272]	@ (80009ec <SystemClock_Config+0x154>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a43      	ldr	r2, [pc, #268]	@ (80009ec <SystemClock_Config+0x154>)
 80008e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	4b41      	ldr	r3, [pc, #260]	@ (80009ec <SystemClock_Config+0x154>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f2:	bf00      	nop
 80008f4:	4b3d      	ldr	r3, [pc, #244]	@ (80009ec <SystemClock_Config+0x154>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000900:	d1f8      	bne.n	80008f4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <SystemClock_Config+0x158>)
 8000904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000908:	4a39      	ldr	r2, [pc, #228]	@ (80009f0 <SystemClock_Config+0x158>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000912:	4b37      	ldr	r3, [pc, #220]	@ (80009f0 <SystemClock_Config+0x158>)
 8000914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <SystemClock_Config+0x154>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a30      	ldr	r2, [pc, #192]	@ (80009ec <SystemClock_Config+0x154>)
 800092a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <SystemClock_Config+0x154>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b2b      	ldr	r3, [pc, #172]	@ (80009e8 <SystemClock_Config+0x150>)
 800093c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093e:	4a2a      	ldr	r2, [pc, #168]	@ (80009e8 <SystemClock_Config+0x150>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000946:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <SystemClock_Config+0x150>)
 8000948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000952:	bf00      	nop
 8000954:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <SystemClock_Config+0x154>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800095c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000960:	d1f8      	bne.n	8000954 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000962:	2301      	movs	r3, #1
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000966:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000970:	2302      	movs	r3, #2
 8000972:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000974:	2305      	movs	r3, #5
 8000976:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000978:	23c0      	movs	r3, #192	@ 0xc0
 800097a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000980:	2314      	movs	r3, #20
 8000982:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000988:	2308      	movs	r3, #8
 800098a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098c:	2300      	movs	r3, #0
 800098e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000998:	4618      	mov	r0, r3
 800099a:	f001 f8cd 	bl	8001b38 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80009a4:	f000 f896 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	233f      	movs	r3, #63	@ 0x3f
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2303      	movs	r3, #3
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b4:	2308      	movs	r3, #8
 80009b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c6:	2340      	movs	r3, #64	@ 0x40
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2104      	movs	r1, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fd0b 	bl	80023ec <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80009dc:	f000 f87a 	bl	8000ad4 <Error_Handler>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3778      	adds	r7, #120	@ 0x78
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58000400 	.word	0x58000400
 80009ec:	58024800 	.word	0x58024800
 80009f0:	58024400 	.word	0x58024400

080009f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0b0      	sub	sp, #192	@ 0xc0
 80009f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	22c0      	movs	r2, #192	@ 0xc0
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f009 f9f2 	bl	8009dea <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8000a06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000a12:	2319      	movs	r3, #25
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000a16:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 f88d 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000a48:	f000 f844 	bl	8000ad4 <Error_Handler>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	37c0      	adds	r7, #192	@ 0xc0
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a66:	f000 fdb7 	bl	80015d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000a72:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000a76:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a84:	2303      	movs	r3, #3
 8000a86:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fdd4 	bl	8001648 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f000 fdb1 	bl	8001608 <HAL_MPU_Enable>

}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac2:	f000 fc59 	bl	8001378 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40001000 	.word	0x40001000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000ae6:	4a28      	ldr	r2, [pc, #160]	@ (8000b88 <MX_SPI1_Init+0xa8>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b26      	ldr	r3, [pc, #152]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000aec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000af2:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000af4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000af8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000afa:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b38:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b40:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_SPI1_Init+0xa4>)
 8000b72:	f003 fb61 	bl	8004238 <HAL_SPI_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b7c:	f7ff ffaa 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000220 	.word	0x24000220
 8000b88:	40013000 	.word	0x40013000

08000b8c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b90:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000b92:	4a29      	ldr	r2, [pc, #164]	@ (8000c38 <MX_SPI2_Init+0xac>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000b98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b9e:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000ba0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ba4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000ba8:	220f      	movs	r2, #15
 8000baa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bac:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bc4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_SPI2_Init+0xa8>)
 8000c22:	f003 fb09 	bl	8004238 <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8000c2c:	f7ff ff52 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	240002a8 	.word	0x240002a8
 8000c38:	40003800 	.word	0x40003800

08000c3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a34      	ldr	r2, [pc, #208]	@ (8000d2c <HAL_SPI_MspInit+0xf0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12e      	bne.n	8000cbc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c64:	4a32      	ldr	r2, [pc, #200]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000c66:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8000c9a:	23a0      	movs	r3, #160	@ 0xa0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <HAL_SPI_MspInit+0xf8>)
 8000cb6:	f000 fd07 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cba:	e032      	b.n	8000d22 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d38 <HAL_SPI_MspInit+0xfc>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12d      	bne.n	8000d22 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ccc:	4a18      	ldr	r2, [pc, #96]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	4a11      	ldr	r2, [pc, #68]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d02:	2306      	movs	r3, #6
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d12:	2305      	movs	r3, #5
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <HAL_SPI_MspInit+0x100>)
 8000d1e:	f000 fcd3 	bl	80016c8 <HAL_GPIO_Init>
}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	@ 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40013000 	.word	0x40013000
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58020000 	.word	0x58020000
 8000d38:	40003800 	.word	0x40003800
 8000d3c:	58022000 	.word	0x58022000

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <HAL_MspInit+0x38>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_MspInit+0x38>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_MspInit+0x38>)
 8000d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	210f      	movs	r1, #15
 8000d68:	f06f 0001 	mvn.w	r0, #1
 8000d6c:	f000 fc0c 	bl	8001588 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	58024400 	.word	0x58024400

08000d7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	@ 0x40
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d827      	bhi.n	8000dda <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	2036      	movs	r0, #54	@ 0x36
 8000d90:	f000 fbfa 	bl	8001588 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d94:	2036      	movs	r0, #54	@ 0x36
 8000d96:	f000 fc11 	bl	80015bc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d9a:	4a29      	ldr	r2, [pc, #164]	@ (8000e40 <HAL_InitTick+0xc4>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <HAL_InitTick+0xc8>)
 8000da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da6:	4a27      	ldr	r2, [pc, #156]	@ (8000e44 <HAL_InitTick+0xc8>)
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db0:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <HAL_InitTick+0xc8>)
 8000db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dbe:	f107 0210 	add.w	r2, r7, #16
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fe85 	bl	8002ad8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d106      	bne.n	8000de6 <HAL_InitTick+0x6a>
 8000dd8:	e001      	b.n	8000dde <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e02b      	b.n	8000e36 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dde:	f001 fe65 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8000de2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000de4:	e004      	b.n	8000df0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000de6:	f001 fe61 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8000dea:	4603      	mov	r3, r0
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df2:	4a15      	ldr	r2, [pc, #84]	@ (8000e48 <HAL_InitTick+0xcc>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9b      	lsrs	r3, r3, #18
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_InitTick+0xd0>)
 8000e00:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <HAL_InitTick+0xd4>)
 8000e02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_InitTick+0xd0>)
 8000e06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e4c <HAL_InitTick+0xd0>)
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_InitTick+0xd0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_InitTick+0xd0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e1e:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <HAL_InitTick+0xd0>)
 8000e20:	f004 f877 	bl	8004f12 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d104      	bne.n	8000e34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e2a:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <HAL_InitTick+0xd0>)
 8000e2c:	f004 f8d2 	bl	8004fd4 <HAL_TIM_Base_Start_IT>
 8000e30:	4603      	mov	r3, r0
 8000e32:	e000      	b.n	8000e36 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3740      	adds	r7, #64	@ 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000008 	.word	0x24000008
 8000e44:	58024400 	.word	0x58024400
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	24000330 	.word	0x24000330
 8000e50:	40001000 	.word	0x40001000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <NMI_Handler+0x4>

08000e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 8000e8e:	2040      	movs	r0, #64	@ 0x40
 8000e90:	f000 fdfd 	bl	8001a8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <TIM6_DAC_IRQHandler+0x10>)
 8000e9e:	f004 fa77 	bl	8005390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000330 	.word	0x24000330

08000eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return 1;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_kill>:

int _kill(int pid, int sig)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ec6:	f008 ffe3 	bl	8009e90 <__errno>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2216      	movs	r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_exit>:

void _exit (int status)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffe7 	bl	8000ebc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eee:	bf00      	nop
 8000ef0:	e7fd      	b.n	8000eee <_exit+0x12>

08000ef2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e00a      	b.n	8000f1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f04:	f3af 8000 	nop.w
 8000f08:	4601      	mov	r1, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	b2ca      	uxtb	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf0      	blt.n	8000f04 <_read+0x12>
  }

  return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e009      	b.n	8000f52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	60ba      	str	r2, [r7, #8]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbf1      	blt.n	8000f3e <_write+0x12>
  }
  return len;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_close>:

int _close(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_isatty>:

int _isatty(int file)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f008 ff48 	bl	8009e90 <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	24080000 	.word	0x24080000
 800102c:	00000400 	.word	0x00000400
 8001030:	2400037c 	.word	0x2400037c
 8001034:	24005310 	.word	0x24005310

08001038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800103c:	4b37      	ldr	r3, [pc, #220]	@ (800111c <SystemInit+0xe4>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001042:	4a36      	ldr	r2, [pc, #216]	@ (800111c <SystemInit+0xe4>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800104c:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <SystemInit+0xe8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	2b06      	cmp	r3, #6
 8001056:	d807      	bhi.n	8001068 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001058:	4b31      	ldr	r3, [pc, #196]	@ (8001120 <SystemInit+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 030f 	bic.w	r3, r3, #15
 8001060:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <SystemInit+0xe8>)
 8001062:	f043 0307 	orr.w	r3, r3, #7
 8001066:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001068:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <SystemInit+0xec>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a2d      	ldr	r2, [pc, #180]	@ (8001124 <SystemInit+0xec>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <SystemInit+0xec>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800107a:	4b2a      	ldr	r3, [pc, #168]	@ (8001124 <SystemInit+0xec>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4929      	ldr	r1, [pc, #164]	@ (8001124 <SystemInit+0xec>)
 8001080:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <SystemInit+0xf0>)
 8001082:	4013      	ands	r3, r2
 8001084:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <SystemInit+0xe8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001092:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <SystemInit+0xe8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 030f 	bic.w	r3, r3, #15
 800109a:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <SystemInit+0xe8>)
 800109c:	f043 0307 	orr.w	r3, r3, #7
 80010a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <SystemInit+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <SystemInit+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <SystemInit+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <SystemInit+0xec>)
 80010b6:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <SystemInit+0xf4>)
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <SystemInit+0xec>)
 80010bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <SystemInit+0xf8>)
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <SystemInit+0xec>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <SystemInit+0xfc>)
 80010c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <SystemInit+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <SystemInit+0xec>)
 80010ce:	4a19      	ldr	r2, [pc, #100]	@ (8001134 <SystemInit+0xfc>)
 80010d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010d2:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <SystemInit+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <SystemInit+0xec>)
 80010da:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <SystemInit+0xfc>)
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <SystemInit+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <SystemInit+0xec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <SystemInit+0xec>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <SystemInit+0xec>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <SystemInit+0x100>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <SystemInit+0x104>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001102:	d202      	bcs.n	800110a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <SystemInit+0x108>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <SystemInit+0x10c>)
 800110c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001110:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	52002000 	.word	0x52002000
 8001124:	58024400 	.word	0x58024400
 8001128:	eaf6ed7f 	.word	0xeaf6ed7f
 800112c:	02020200 	.word	0x02020200
 8001130:	01ff0000 	.word	0x01ff0000
 8001134:	01010280 	.word	0x01010280
 8001138:	5c001000 	.word	0x5c001000
 800113c:	ffff0000 	.word	0xffff0000
 8001140:	51008108 	.word	0x51008108
 8001144:	52004000 	.word	0x52004000

08001148 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001174:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001180:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 8001182:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001194:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 8001196:	f003 ff95 	bl	80050c4 <HAL_TIM_PWM_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011a0:	f7ff fc98 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 80011b4:	f004 fed2 	bl	8005f5c <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011be:	f7ff fc89 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c2:	2360      	movs	r3, #96	@ 0x60
 80011c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80011c6:	f242 3327 	movw	r3, #8999	@ 0x2327
 80011ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 80011dc:	f004 f9e0 	bl	80055a0 <HAL_TIM_PWM_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80011e6:	f7ff fc75 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011ea:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <MX_TIM2_Init+0xb0>)
 80011ec:	f000 f826 	bl	800123c <HAL_TIM_MspPostInit>

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	24000380 	.word	0x24000380

080011fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800120c:	d10e      	bne.n	800122c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_TIM_PWM_MspInit+0x3c>)
 8001210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001214:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_TIM_PWM_MspInit+0x3c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_TIM_PWM_MspInit+0x3c>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	58024400 	.word	0x58024400

0800123c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800125c:	d11e      	bne.n	800129c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_TIM_MspPostInit+0x68>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_TIM_MspPostInit+0x68>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_TIM_MspPostInit+0x68>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127c:	2301      	movs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <HAL_TIM_MspPostInit+0x6c>)
 8001298:	f000 fa16 	bl	80016c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020000 	.word	0x58020000

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b0:	f7ff fec2 	bl	8001038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	@ (80012ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	@ (80012f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f008 fddf 	bl	8009e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff fa5b 	bl	8000798 <main>
  bx  lr
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012ec:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80012f0:	0800dad0 	.word	0x0800dad0
  ldr r2, =_sbss
 80012f4:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80012f8:	2400530c 	.word	0x2400530c

080012fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC3_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001306:	2003      	movs	r0, #3
 8001308:	f000 f933 	bl	8001572 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800130c:	f001 fa24 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_Init+0x68>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	4913      	ldr	r1, [pc, #76]	@ (800136c <HAL_Init+0x6c>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_Init+0x68>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	4a0e      	ldr	r2, [pc, #56]	@ (800136c <HAL_Init+0x6c>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <HAL_Init+0x70>)
 8001342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001344:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <HAL_Init+0x74>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134a:	200f      	movs	r0, #15
 800134c:	f7ff fd16 	bl	8000d7c <HAL_InitTick>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e002      	b.n	8001360 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800135a:	f7ff fcf1 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	58024400 	.word	0x58024400
 800136c:	0800bf80 	.word	0x0800bf80
 8001370:	24000004 	.word	0x24000004
 8001374:	24000000 	.word	0x24000000

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2400000c 	.word	0x2400000c
 800139c:	240003cc 	.word	0x240003cc

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	240003cc 	.word	0x240003cc

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2400000c 	.word	0x2400000c

08001400 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetREVID+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1b      	lsrs	r3, r3, #16
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	5c001000 	.word	0x5c001000

08001418 <__NVIC_SetPriorityGrouping>:
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	05fa0000 	.word	0x05fa0000

08001460 <__NVIC_GetPriorityGrouping>:
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	@ (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	@ (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	@ (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	@ 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff4c 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001596:	f7ff ff63 	bl	8001460 <__NVIC_GetPriorityGrouping>
 800159a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f7ff ffb3 	bl	800150c <NVIC_EncodePriority>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff82 	bl	80014b8 <__NVIC_SetPriority>
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff56 	bl	800147c <__NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015dc:	f3bf 8f5f 	dmb	sy
}
 80015e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <HAL_MPU_Disable+0x28>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <HAL_MPU_Disable+0x28>)
 80015e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_MPU_Disable+0x2c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	e000ed90 	.word	0xe000ed90

08001608 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001610:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <HAL_MPU_Enable+0x38>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <HAL_MPU_Enable+0x3c>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <HAL_MPU_Enable+0x3c>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800162c:	f3bf 8f6f 	isb	sy
}
 8001630:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed90 	.word	0xe000ed90
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	785a      	ldrb	r2, [r3, #1]
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_MPU_ConfigRegion+0x7c>)
 8001656:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_MPU_ConfigRegion+0x7c>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a19      	ldr	r2, [pc, #100]	@ (80016c4 <HAL_MPU_ConfigRegion+0x7c>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001664:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_MPU_ConfigRegion+0x7c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7b1b      	ldrb	r3, [r3, #12]
 8001670:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7adb      	ldrb	r3, [r3, #11]
 8001676:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7a9b      	ldrb	r3, [r3, #10]
 800167e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7b5b      	ldrb	r3, [r3, #13]
 8001686:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001688:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7b9b      	ldrb	r3, [r3, #14]
 800168e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001690:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7bdb      	ldrb	r3, [r3, #15]
 8001696:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001698:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7a5b      	ldrb	r3, [r3, #9]
 800169e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7a1b      	ldrb	r3, [r3, #8]
 80016a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016b4:	6113      	str	r3, [r2, #16]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed90 	.word	0xe000ed90

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	@ 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016d6:	4b89      	ldr	r3, [pc, #548]	@ (80018fc <HAL_GPIO_Init+0x234>)
 80016d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016da:	e194      	b.n	8001a06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8186 	beq.w	8001a00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d005      	beq.n	800170c <HAL_GPIO_Init+0x44>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d130      	bne.n	800176e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001742:	2201      	movs	r2, #1
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	f003 0201 	and.w	r2, r3, #1
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b03      	cmp	r3, #3
 8001778:	d017      	beq.n	80017aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d123      	bne.n	80017fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	220f      	movs	r2, #15
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	69b9      	ldr	r1, [r7, #24]
 80017fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0203 	and.w	r2, r3, #3
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80e0 	beq.w	8001a00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <HAL_GPIO_Init+0x238>)
 8001842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001846:	4a2e      	ldr	r2, [pc, #184]	@ (8001900 <HAL_GPIO_Init+0x238>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_GPIO_Init+0x238>)
 8001852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185e:	4a29      	ldr	r2, [pc, #164]	@ (8001904 <HAL_GPIO_Init+0x23c>)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a20      	ldr	r2, [pc, #128]	@ (8001908 <HAL_GPIO_Init+0x240>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d052      	beq.n	8001930 <HAL_GPIO_Init+0x268>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a1f      	ldr	r2, [pc, #124]	@ (800190c <HAL_GPIO_Init+0x244>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d031      	beq.n	80018f6 <HAL_GPIO_Init+0x22e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <HAL_GPIO_Init+0x248>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d02b      	beq.n	80018f2 <HAL_GPIO_Init+0x22a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a1d      	ldr	r2, [pc, #116]	@ (8001914 <HAL_GPIO_Init+0x24c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d025      	beq.n	80018ee <HAL_GPIO_Init+0x226>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <HAL_GPIO_Init+0x250>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01f      	beq.n	80018ea <HAL_GPIO_Init+0x222>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <HAL_GPIO_Init+0x254>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x21e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001920 <HAL_GPIO_Init+0x258>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x21a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a19      	ldr	r2, [pc, #100]	@ (8001924 <HAL_GPIO_Init+0x25c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x216>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a18      	ldr	r2, [pc, #96]	@ (8001928 <HAL_GPIO_Init+0x260>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x212>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a17      	ldr	r2, [pc, #92]	@ (800192c <HAL_GPIO_Init+0x264>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x20e>
 80018d2:	2309      	movs	r3, #9
 80018d4:	e02d      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018d6:	230a      	movs	r3, #10
 80018d8:	e02b      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018da:	2308      	movs	r3, #8
 80018dc:	e029      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018de:	2307      	movs	r3, #7
 80018e0:	e027      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e025      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e023      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e021      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e01f      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e01d      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e01b      	b.n	8001932 <HAL_GPIO_Init+0x26a>
 80018fa:	bf00      	nop
 80018fc:	58000080 	.word	0x58000080
 8001900:	58024400 	.word	0x58024400
 8001904:	58000400 	.word	0x58000400
 8001908:	58020000 	.word	0x58020000
 800190c:	58020400 	.word	0x58020400
 8001910:	58020800 	.word	0x58020800
 8001914:	58020c00 	.word	0x58020c00
 8001918:	58021000 	.word	0x58021000
 800191c:	58021400 	.word	0x58021400
 8001920:	58021800 	.word	0x58021800
 8001924:	58021c00 	.word	0x58021c00
 8001928:	58022000 	.word	0x58022000
 800192c:	58022400 	.word	0x58022400
 8001930:	2300      	movs	r3, #0
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f002 0203 	and.w	r2, r2, #3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4093      	lsls	r3, r2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001942:	4938      	ldr	r1, [pc, #224]	@ (8001a24 <HAL_GPIO_Init+0x35c>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	3301      	adds	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f ae63 	bne.w	80016dc <HAL_GPIO_Init+0x14>
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	3724      	adds	r7, #36	@ 0x24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	58000400 	.word	0x58000400

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	619a      	str	r2, [r3, #24]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a6c:	887a      	ldrh	r2, [r7, #2]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	041a      	lsls	r2, r3, #16
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	619a      	str	r2, [r3, #24]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd71 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_PWREx_ConfigSupply+0x70>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d00a      	beq.n	8001aee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_PWREx_ConfigSupply+0x70>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e01f      	b.n	8001b2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e01d      	b.n	8001b2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_PWREx_ConfigSupply+0x70>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	490f      	ldr	r1, [pc, #60]	@ (8001b34 <HAL_PWREx_ConfigSupply+0x70>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001afe:	f7ff fc4f 	bl	80013a0 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b04:	e009      	b.n	8001b1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b06:	f7ff fc4b 	bl	80013a0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b14:	d901      	bls.n	8001b1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e007      	b.n	8001b2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_PWREx_ConfigSupply+0x70>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b26:	d1ee      	bne.n	8001b06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	58024800 	.word	0x58024800

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	@ 0x30
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f000 bc48 	b.w	80023dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8088 	beq.w	8001c6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4b99      	ldr	r3, [pc, #612]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b64:	4b96      	ldr	r3, [pc, #600]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d007      	beq.n	8001b80 <HAL_RCC_OscConfig+0x48>
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	2b18      	cmp	r3, #24
 8001b74:	d111      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62>
 8001b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d10c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d06d      	beq.n	8001c68 <HAL_RCC_OscConfig+0x130>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d169      	bne.n	8001c68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f000 bc21 	b.w	80023dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x7a>
 8001ba4:	4b86      	ldr	r3, [pc, #536]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a85      	ldr	r2, [pc, #532]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0xd8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x9c>
 8001bba:	4b81      	ldr	r3, [pc, #516]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a80      	ldr	r2, [pc, #512]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7d      	ldr	r2, [pc, #500]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xd8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xc0>
 8001bde:	4b78      	ldr	r3, [pc, #480]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a77      	ldr	r2, [pc, #476]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b75      	ldr	r3, [pc, #468]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a74      	ldr	r2, [pc, #464]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xd8>
 8001bf8:	4b71      	ldr	r3, [pc, #452]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a70      	ldr	r2, [pc, #448]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fbc2 	bl	80013a0 <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fbbe 	bl	80013a0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e3d4      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c32:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe8>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fbae 	bl	80013a0 <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fbaa 	bl	80013a0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e3c0      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c5a:	4b59      	ldr	r3, [pc, #356]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x110>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80ca 	beq.w	8001e0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c78:	4b51      	ldr	r3, [pc, #324]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c82:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_RCC_OscConfig+0x166>
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	2b18      	cmp	r3, #24
 8001c92:	d156      	bne.n	8001d42 <HAL_RCC_OscConfig+0x20a>
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d151      	bne.n	8001d42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9e:	4b48      	ldr	r3, [pc, #288]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x17e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e392      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cb6:	4b42      	ldr	r3, [pc, #264]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0219 	bic.w	r2, r3, #25
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	493f      	ldr	r1, [pc, #252]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fb6a 	bl	80013a0 <HAL_GetTick>
 8001ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fb66 	bl	80013a0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e37c      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ce2:	4b37      	ldr	r3, [pc, #220]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	f7ff fb87 	bl	8001400 <HAL_GetREVID>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d817      	bhi.n	8001d2c <HAL_RCC_OscConfig+0x1f4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b40      	cmp	r3, #64	@ 0x40
 8001d02:	d108      	bne.n	8001d16 <HAL_RCC_OscConfig+0x1de>
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d14:	e07a      	b.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	031b      	lsls	r3, r3, #12
 8001d24:	4926      	ldr	r1, [pc, #152]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2a:	e06f      	b.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	4921      	ldr	r1, [pc, #132]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d40:	e064      	b.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d047      	beq.n	8001dda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0219 	bic.w	r2, r3, #25
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	491a      	ldr	r1, [pc, #104]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fb20 	bl	80013a0 <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d64:	f7ff fb1c 	bl	80013a0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e332      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	f7ff fb3d 	bl	8001400 <HAL_GetREVID>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d819      	bhi.n	8001dc4 <HAL_RCC_OscConfig+0x28c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b40      	cmp	r3, #64	@ 0x40
 8001d96:	d108      	bne.n	8001daa <HAL_RCC_OscConfig+0x272>
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001da0:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da6:	6053      	str	r3, [r2, #4]
 8001da8:	e030      	b.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
 8001daa:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	031b      	lsls	r3, r3, #12
 8001db8:	4901      	ldr	r1, [pc, #4]	@ (8001dc0 <HAL_RCC_OscConfig+0x288>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
 8001dbe:	e025      	b.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	4b9a      	ldr	r3, [pc, #616]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	4997      	ldr	r1, [pc, #604]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
 8001dd8:	e018      	b.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b95      	ldr	r3, [pc, #596]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a94      	ldr	r2, [pc, #592]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7ff fadb 	bl	80013a0 <HAL_GetTick>
 8001dea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff fad7 	bl	80013a0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e2ed      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e00:	4b8b      	ldr	r3, [pc, #556]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a9 	beq.w	8001f6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e1a:	4b85      	ldr	r3, [pc, #532]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e24:	4b82      	ldr	r3, [pc, #520]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d007      	beq.n	8001e40 <HAL_RCC_OscConfig+0x308>
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b18      	cmp	r3, #24
 8001e34:	d13a      	bne.n	8001eac <HAL_RCC_OscConfig+0x374>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d135      	bne.n	8001eac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e40:	4b7b      	ldr	r3, [pc, #492]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x320>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b80      	cmp	r3, #128	@ 0x80
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e2c1      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e58:	f7ff fad2 	bl	8001400 <HAL_GetREVID>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d817      	bhi.n	8001e96 <HAL_RCC_OscConfig+0x35e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d108      	bne.n	8001e80 <HAL_RCC_OscConfig+0x348>
 8001e6e:	4b70      	ldr	r3, [pc, #448]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e76:	4a6e      	ldr	r2, [pc, #440]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e7e:	e075      	b.n	8001f6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e80:	4b6b      	ldr	r3, [pc, #428]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	069b      	lsls	r3, r3, #26
 8001e8e:	4968      	ldr	r1, [pc, #416]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e94:	e06a      	b.n	8001f6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e96:	4b66      	ldr	r3, [pc, #408]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	4962      	ldr	r1, [pc, #392]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eaa:	e05f      	b.n	8001f6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d042      	beq.n	8001f3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa6e 	bl	80013a0 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fa6a 	bl	80013a0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e280      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eda:	4b55      	ldr	r3, [pc, #340]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ee6:	f7ff fa8b 	bl	8001400 <HAL_GetREVID>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d817      	bhi.n	8001f24 <HAL_RCC_OscConfig+0x3ec>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d108      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3d6>
 8001efc:	4b4c      	ldr	r3, [pc, #304]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f04:	4a4a      	ldr	r2, [pc, #296]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f0a:	6053      	str	r3, [r2, #4]
 8001f0c:	e02e      	b.n	8001f6c <HAL_RCC_OscConfig+0x434>
 8001f0e:	4b48      	ldr	r3, [pc, #288]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	069b      	lsls	r3, r3, #26
 8001f1c:	4944      	ldr	r1, [pc, #272]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
 8001f22:	e023      	b.n	8001f6c <HAL_RCC_OscConfig+0x434>
 8001f24:	4b42      	ldr	r3, [pc, #264]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	493f      	ldr	r1, [pc, #252]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
 8001f38:	e018      	b.n	8001f6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7ff fa2b 	bl	80013a0 <HAL_GetTick>
 8001f4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fa27 	bl	80013a0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e23d      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f60:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d036      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d019      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f80:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f84:	4a2a      	ldr	r2, [pc, #168]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fa08 	bl	80013a0 <HAL_GetTick>
 8001f90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff fa04 	bl	80013a0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e21a      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fa6:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x45c>
 8001fb2:	e018      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f9ee 	bl	80013a0 <HAL_GetTick>
 8001fc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f9ea 	bl	80013a0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e200      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d039      	beq.n	8002066 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01c      	beq.n	8002034 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002004:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002006:	f7ff f9cb 	bl	80013a0 <HAL_GetTick>
 800200a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800200e:	f7ff f9c7 	bl	80013a0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1dd      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_RCC_OscConfig+0x4f8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x4d6>
 800202c:	e01b      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
 800202e:	bf00      	nop
 8002030:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002034:	4b9b      	ldr	r3, [pc, #620]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a9a      	ldr	r2, [pc, #616]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800203a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800203e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002040:	f7ff f9ae 	bl	80013a0 <HAL_GetTick>
 8002044:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002048:	f7ff f9aa 	bl	80013a0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1c0      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800205a:	4b92      	ldr	r3, [pc, #584]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8081 	beq.w	8002176 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002074:	4b8c      	ldr	r3, [pc, #560]	@ (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a8b      	ldr	r2, [pc, #556]	@ (80022a8 <HAL_RCC_OscConfig+0x770>)
 800207a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002080:	f7ff f98e 	bl	80013a0 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7ff f98a 	bl	80013a0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	@ 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1a0      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800209a:	4b83      	ldr	r3, [pc, #524]	@ (80022a8 <HAL_RCC_OscConfig+0x770>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d106      	bne.n	80020bc <HAL_RCC_OscConfig+0x584>
 80020ae:	4b7d      	ldr	r3, [pc, #500]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	4a7c      	ldr	r2, [pc, #496]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ba:	e02d      	b.n	8002118 <HAL_RCC_OscConfig+0x5e0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x5a6>
 80020c4:	4b77      	ldr	r3, [pc, #476]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	4a76      	ldr	r2, [pc, #472]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d0:	4b74      	ldr	r3, [pc, #464]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d4:	4a73      	ldr	r2, [pc, #460]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	6713      	str	r3, [r2, #112]	@ 0x70
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x5e0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x5c8>
 80020e6:	4b6f      	ldr	r3, [pc, #444]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	4a6e      	ldr	r2, [pc, #440]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f2:	4b6c      	ldr	r3, [pc, #432]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f6:	4a6b      	ldr	r2, [pc, #428]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0x5e0>
 8002100:	4b68      	ldr	r3, [pc, #416]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a67      	ldr	r2, [pc, #412]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
 800210c:	4b65      	ldr	r3, [pc, #404]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	4a64      	ldr	r2, [pc, #400]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff f93e 	bl	80013a0 <HAL_GetTick>
 8002124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff f93a 	bl	80013a0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e14e      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800213e:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0ee      	beq.n	8002128 <HAL_RCC_OscConfig+0x5f0>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff f928 	bl	80013a0 <HAL_GetTick>
 8002150:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7ff f924 	bl	80013a0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e138      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800216a:	4b4e      	ldr	r3, [pc, #312]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ee      	bne.n	8002154 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 812d 	beq.w	80023da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002180:	4b48      	ldr	r3, [pc, #288]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002188:	2b18      	cmp	r3, #24
 800218a:	f000 80bd 	beq.w	8002308 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	2b02      	cmp	r3, #2
 8002194:	f040 809e 	bne.w	80022d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b42      	ldr	r3, [pc, #264]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a41      	ldr	r2, [pc, #260]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800219e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff f8fc 	bl	80013a0 <HAL_GetTick>
 80021a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7ff f8f8 	bl	80013a0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e10e      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021be:	4b39      	ldr	r3, [pc, #228]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ca:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ce:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <HAL_RCC_OscConfig+0x774>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	430a      	orrs	r2, r1
 80021de:	4931      	ldr	r1, [pc, #196]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	3b01      	subs	r3, #1
 80021ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f2:	3b01      	subs	r3, #1
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fe:	3b01      	subs	r3, #1
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	3b01      	subs	r3, #1
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002214:	4923      	ldr	r1, [pc, #140]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800221a:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002226:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800222a:	4b21      	ldr	r3, [pc, #132]	@ (80022b0 <HAL_RCC_OscConfig+0x778>)
 800222c:	4013      	ands	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002232:	00d2      	lsls	r2, r2, #3
 8002234:	491b      	ldr	r1, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	f023 020c 	bic.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4917      	ldr	r1, [pc, #92]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002248:	4313      	orrs	r3, r2
 800224a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800224c:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	f023 0202 	bic.w	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	4912      	ldr	r1, [pc, #72]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002262:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <HAL_RCC_OscConfig+0x76c>)
 8002294:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7ff f881 	bl	80013a0 <HAL_GetTick>
 800229e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022a0:	e011      	b.n	80022c6 <HAL_RCC_OscConfig+0x78e>
 80022a2:	bf00      	nop
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58024800 	.word	0x58024800
 80022ac:	fffffc0c 	.word	0xfffffc0c
 80022b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff f874 	bl	80013a0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e08a      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x77c>
 80022d2:	e082      	b.n	80023da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a42      	ldr	r2, [pc, #264]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80022da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff f85e 	bl	80013a0 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff f85a 	bl	80013a0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e070      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022fa:	4b3a      	ldr	r3, [pc, #232]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x7b0>
 8002306:	e068      	b.n	80023da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002308:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800230e:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	2b01      	cmp	r3, #1
 800231a:	d031      	beq.n	8002380 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0203 	and.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d12a      	bne.n	8002380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d122      	bne.n	8002380 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d11a      	bne.n	8002380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0a5b      	lsrs	r3, r3, #9
 800234e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002356:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d111      	bne.n	8002380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002368:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	0e1b      	lsrs	r3, r3, #24
 8002372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e02b      	b.n	80023dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002384:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 8002386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800238e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	429a      	cmp	r2, r3
 8002398:	d01f      	beq.n	80023da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023a6:	f7fe fffb 	bl	80013a0 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023ac:	bf00      	nop
 80023ae:	f7fe fff7 	bl	80013a0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d0f9      	beq.n	80023ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80023bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_RCC_OscConfig+0x8b0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023c6:	00d2      	lsls	r2, r2, #3
 80023c8:	4906      	ldr	r1, [pc, #24]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_RCC_OscConfig+0x8ac>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3730      	adds	r7, #48	@ 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	58024400 	.word	0x58024400
 80023e8:	ffff0007 	.word	0xffff0007

080023ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e19c      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b8a      	ldr	r3, [pc, #552]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b87      	ldr	r3, [pc, #540]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	4985      	ldr	r1, [pc, #532]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b83      	ldr	r3, [pc, #524]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e184      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	4b7b      	ldr	r3, [pc, #492]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002448:	429a      	cmp	r2, r3
 800244a:	d908      	bls.n	800245e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800244c:	4b78      	ldr	r3, [pc, #480]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4975      	ldr	r1, [pc, #468]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800245a:	4313      	orrs	r3, r2
 800245c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	4b70      	ldr	r3, [pc, #448]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002476:	429a      	cmp	r2, r3
 8002478:	d908      	bls.n	800248c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800247a:	4b6d      	ldr	r3, [pc, #436]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	496a      	ldr	r1, [pc, #424]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002488:	4313      	orrs	r3, r2
 800248a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d010      	beq.n	80024ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	4b64      	ldr	r3, [pc, #400]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d908      	bls.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024a8:	4b61      	ldr	r3, [pc, #388]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	495e      	ldr	r1, [pc, #376]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d908      	bls.n	80024e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024d6:	4b56      	ldr	r3, [pc, #344]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4953      	ldr	r1, [pc, #332]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d010      	beq.n	8002516 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	429a      	cmp	r2, r3
 8002502:	d908      	bls.n	8002516 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b4a      	ldr	r3, [pc, #296]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f023 020f 	bic.w	r2, r3, #15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4947      	ldr	r1, [pc, #284]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002512:	4313      	orrs	r3, r2
 8002514:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d055      	beq.n	80025ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002522:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4940      	ldr	r1, [pc, #256]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002530:	4313      	orrs	r3, r2
 8002532:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d107      	bne.n	800254c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800253c:	4b3c      	ldr	r3, [pc, #240]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d121      	bne.n	800258c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0f6      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d107      	bne.n	8002564 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002554:	4b36      	ldr	r3, [pc, #216]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d115      	bne.n	800258c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ea      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800256c:	4b30      	ldr	r3, [pc, #192]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0de      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257c:	4b2c      	ldr	r3, [pc, #176]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0d6      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800258c:	4b28      	ldr	r3, [pc, #160]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f023 0207 	bic.w	r2, r3, #7
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4925      	ldr	r1, [pc, #148]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 800259a:	4313      	orrs	r3, r2
 800259c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259e:	f7fe feff 	bl	80013a0 <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a6:	f7fe fefb 	bl	80013a0 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0be      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d1eb      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d010      	beq.n	80025fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d208      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f023 020f 	bic.w	r2, r3, #15
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x244>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d214      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 020f 	bic.w	r2, r3, #15
 8002612:	4906      	ldr	r1, [pc, #24]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b04      	ldr	r3, [pc, #16]	@ (800262c <HAL_RCC_ClockConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e086      	b.n	800273a <HAL_RCC_ClockConfig+0x34e>
 800262c:	52002000 	.word	0x52002000
 8002630:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	4b3f      	ldr	r3, [pc, #252]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264c:	429a      	cmp	r2, r3
 800264e:	d208      	bcs.n	8002662 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002650:	4b3c      	ldr	r3, [pc, #240]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4939      	ldr	r1, [pc, #228]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 800265e:	4313      	orrs	r3, r2
 8002660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d010      	beq.n	8002690 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	4b34      	ldr	r3, [pc, #208]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800267a:	429a      	cmp	r2, r3
 800267c:	d208      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800267e:	4b31      	ldr	r3, [pc, #196]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	492e      	ldr	r1, [pc, #184]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 800268c:	4313      	orrs	r3, r2
 800268e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	4b28      	ldr	r3, [pc, #160]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d208      	bcs.n	80026be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026ac:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4922      	ldr	r1, [pc, #136]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d010      	beq.n	80026ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d208      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026da:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4917      	ldr	r1, [pc, #92]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026ec:	f000 f834 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	4912      	ldr	r1, [pc, #72]	@ (8002748 <HAL_RCC_ClockConfig+0x35c>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
 8002708:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <HAL_RCC_ClockConfig+0x358>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <HAL_RCC_ClockConfig+0x35c>)
 8002714:	5cd3      	ldrb	r3, [r2, r3]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <HAL_RCC_ClockConfig+0x360>)
 8002722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002724:	4a0a      	ldr	r2, [pc, #40]	@ (8002750 <HAL_RCC_ClockConfig+0x364>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_RCC_ClockConfig+0x368>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fb24 	bl	8000d7c <HAL_InitTick>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	58024400 	.word	0x58024400
 8002748:	0800bf80 	.word	0x0800bf80
 800274c:	24000004 	.word	0x24000004
 8002750:	24000000 	.word	0x24000000
 8002754:	24000008 	.word	0x24000008

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275e:	4bb3      	ldr	r3, [pc, #716]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002766:	2b18      	cmp	r3, #24
 8002768:	f200 8155 	bhi.w	8002a16 <HAL_RCC_GetSysClockFreq+0x2be>
 800276c:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <HAL_RCC_GetSysClockFreq+0x1c>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	080027d9 	.word	0x080027d9
 8002778:	08002a17 	.word	0x08002a17
 800277c:	08002a17 	.word	0x08002a17
 8002780:	08002a17 	.word	0x08002a17
 8002784:	08002a17 	.word	0x08002a17
 8002788:	08002a17 	.word	0x08002a17
 800278c:	08002a17 	.word	0x08002a17
 8002790:	08002a17 	.word	0x08002a17
 8002794:	080027ff 	.word	0x080027ff
 8002798:	08002a17 	.word	0x08002a17
 800279c:	08002a17 	.word	0x08002a17
 80027a0:	08002a17 	.word	0x08002a17
 80027a4:	08002a17 	.word	0x08002a17
 80027a8:	08002a17 	.word	0x08002a17
 80027ac:	08002a17 	.word	0x08002a17
 80027b0:	08002a17 	.word	0x08002a17
 80027b4:	08002805 	.word	0x08002805
 80027b8:	08002a17 	.word	0x08002a17
 80027bc:	08002a17 	.word	0x08002a17
 80027c0:	08002a17 	.word	0x08002a17
 80027c4:	08002a17 	.word	0x08002a17
 80027c8:	08002a17 	.word	0x08002a17
 80027cc:	08002a17 	.word	0x08002a17
 80027d0:	08002a17 	.word	0x08002a17
 80027d4:	0800280b 	.word	0x0800280b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027d8:	4b94      	ldr	r3, [pc, #592]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027e4:	4b91      	ldr	r3, [pc, #580]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	4a90      	ldr	r2, [pc, #576]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027f6:	e111      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027fa:	61bb      	str	r3, [r7, #24]
      break;
 80027fc:	e10e      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80027fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002800:	61bb      	str	r3, [r7, #24]
      break;
 8002802:	e10b      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002804:	4b8c      	ldr	r3, [pc, #560]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002806:	61bb      	str	r3, [r7, #24]
      break;
 8002808:	e108      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800280a:	4b88      	ldr	r3, [pc, #544]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002814:	4b85      	ldr	r3, [pc, #532]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002820:	4b82      	ldr	r3, [pc, #520]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800282a:	4b80      	ldr	r3, [pc, #512]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80e1 	beq.w	8002a10 <HAL_RCC_GetSysClockFreq+0x2b8>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b02      	cmp	r3, #2
 8002852:	f000 8083 	beq.w	800295c <HAL_RCC_GetSysClockFreq+0x204>
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b02      	cmp	r3, #2
 800285a:	f200 80a1 	bhi.w	80029a0 <HAL_RCC_GetSysClockFreq+0x248>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x114>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d056      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x1c0>
 800286a:	e099      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800286c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02d      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002878:	4b6c      	ldr	r3, [pc, #432]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	4a6b      	ldr	r2, [pc, #428]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a2:	4b62      	ldr	r3, [pc, #392]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80028d2:	e087      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e6:	4b51      	ldr	r3, [pc, #324]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800290a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002916:	e065      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292a:	4b40      	ldr	r3, [pc, #256]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293a:	ed97 6a02 	vldr	s12, [r7, #8]
 800293e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800295a:	e043      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002966:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a48 <HAL_RCC_GetSysClockFreq+0x2f0>
 800296a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002982:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800299e:	e021      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a44 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	0a5b      	lsrs	r3, r3, #9
 80029ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ee:	3301      	adds	r3, #1
 80029f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a08:	ee17 3a90 	vmov	r3, s15
 8002a0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a0e:	e005      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
      break;
 8002a14:	e002      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a18:	61bb      	str	r3, [r7, #24]
      break;
 8002a1a:	bf00      	nop
  }

  return sysclockfreq;
 8002a1c:	69bb      	ldr	r3, [r7, #24]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	@ 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	03d09000 	.word	0x03d09000
 8002a34:	003d0900 	.word	0x003d0900
 8002a38:	017d7840 	.word	0x017d7840
 8002a3c:	46000000 	.word	0x46000000
 8002a40:	4c742400 	.word	0x4c742400
 8002a44:	4a742400 	.word	0x4a742400
 8002a48:	4bbebc20 	.word	0x4bbebc20

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a52:	f7ff fe81 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490f      	ldr	r1, [pc, #60]	@ (8002aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a07      	ldr	r2, [pc, #28]	@ (8002aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a8a:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	0800bf80 	.word	0x0800bf80
 8002aa4:	24000004 	.word	0x24000004
 8002aa8:	24000000 	.word	0x24000000

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ab0:	f7ff ffcc 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4904      	ldr	r1, [pc, #16]	@ (8002ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	0800bf80 	.word	0x0800bf80

08002ad8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	223f      	movs	r2, #63	@ 0x3f
 8002ae6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <HAL_RCC_GetClockConfig+0x7c>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f003 0207 	and.w	r2, r3, #7
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002af4:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <HAL_RCC_GetClockConfig+0x7c>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <HAL_RCC_GetClockConfig+0x7c>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 020f 	and.w	r2, r3, #15
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_RCC_GetClockConfig+0x7c>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <HAL_RCC_GetClockConfig+0x7c>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_GetClockConfig+0x7c>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002b30:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <HAL_RCC_GetClockConfig+0x7c>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_GetClockConfig+0x80>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	601a      	str	r2, [r3, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	58024400 	.word	0x58024400
 8002b58:	52002000 	.word	0x52002000

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b0ca      	sub	sp, #296	@ 0x128
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002b80:	2500      	movs	r5, #0
 8002b82:	ea54 0305 	orrs.w	r3, r4, r5
 8002b86:	d049      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b92:	d02f      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b98:	d828      	bhi.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b9e:	d01a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ba0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ba4:	d822      	bhi.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bae:	d007      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bb0:	e01c      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb2:	4bb8      	ldr	r3, [pc, #736]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	4ab7      	ldr	r2, [pc, #732]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bbe:	e01a      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 f9d1 	bl	8003f70 <RCCEx_PLL2_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bd4:	e00f      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bda:	3328      	adds	r3, #40	@ 0x28
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 fa78 	bl	80040d4 <RCCEx_PLL3_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bea:	e004      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002bfe:	4ba5      	ldr	r3, [pc, #660]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c0c:	4aa1      	ldr	r2, [pc, #644]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c12:	e003      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c28:	f04f 0900 	mov.w	r9, #0
 8002c2c:	ea58 0309 	orrs.w	r3, r8, r9
 8002c30:	d047      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d82a      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c59 	.word	0x08002c59
 8002c48:	08002c67 	.word	0x08002c67
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c9b 	.word	0x08002c9b
 8002c54:	08002c9b 	.word	0x08002c9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c58:	4b8e      	ldr	r3, [pc, #568]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	4a8d      	ldr	r2, [pc, #564]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c64:	e01a      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f97e 	bl	8003f70 <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c80:	3328      	adds	r3, #40	@ 0x28
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fa25 	bl	80040d4 <RCCEx_PLL3_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c90:	e004      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b7b      	ldr	r3, [pc, #492]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca8:	f023 0107 	bic.w	r1, r3, #7
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb2:	4a78      	ldr	r2, [pc, #480]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cb8:	e003      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002cce:	f04f 0b00 	mov.w	fp, #0
 8002cd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cd6:	d04c      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce2:	d030      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce8:	d829      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cec:	d02d      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002cee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cf0:	d825      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cf2:	2b80      	cmp	r3, #128	@ 0x80
 8002cf4:	d018      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002cf6:	2b80      	cmp	r3, #128	@ 0x80
 8002cf8:	d821      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002cfe:	2b40      	cmp	r3, #64	@ 0x40
 8002d00:	d007      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d02:	e01c      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d04:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	4a62      	ldr	r2, [pc, #392]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d10:	e01c      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d16:	3308      	adds	r3, #8
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 f928 	bl	8003f70 <RCCEx_PLL2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d26:	e011      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2c:	3328      	adds	r3, #40	@ 0x28
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f9cf 	bl	80040d4 <RCCEx_PLL3_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d54:	4b4f      	ldr	r3, [pc, #316]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	4a4c      	ldr	r2, [pc, #304]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d68:	e003      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002d7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	d053      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d9e:	d035      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002da0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002da4:	d82e      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002da6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002daa:	d031      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002dac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002db0:	d828      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db6:	d01a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dbc:	d822      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002dc8:	e01c      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dca:	4b32      	ldr	r3, [pc, #200]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dd6:	e01c      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ddc:	3308      	adds	r3, #8
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 f8c5 	bl	8003f70 <RCCEx_PLL2_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002dec:	e011      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df2:	3328      	adds	r3, #40	@ 0x28
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 f96c 	bl	80040d4 <RCCEx_PLL3_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e02:	e006      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e0c:	bf00      	nop
 8002e0e:	e000      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e30:	e003      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e54:	460b      	mov	r3, r1
 8002e56:	4313      	orrs	r3, r2
 8002e58:	d056      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e66:	d038      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e6c:	d831      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e72:	d034      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e78:	d82b      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e7e:	d01d      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e84:	d825      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e90:	e01f      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e98:	4ba2      	ldr	r3, [pc, #648]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	4aa1      	ldr	r2, [pc, #644]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e01c      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eaa:	3308      	adds	r3, #8
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 f85e 	bl	8003f70 <RCCEx_PLL2_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002eba:	e011      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec0:	3328      	adds	r3, #40	@ 0x28
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f905 	bl	80040d4 <RCCEx_PLL3_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ed0:	e006      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ef8:	4a8a      	ldr	r2, [pc, #552]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efe:	e003      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002f22:	460b      	mov	r3, r1
 8002f24:	4313      	orrs	r3, r2
 8002f26:	d03a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	2b30      	cmp	r3, #48	@ 0x30
 8002f30:	d01f      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f32:	2b30      	cmp	r3, #48	@ 0x30
 8002f34:	d819      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d00c      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d815      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d019      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d111      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f46:	4b77      	ldr	r3, [pc, #476]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	4a76      	ldr	r2, [pc, #472]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f52:	e011      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f58:	3308      	adds	r3, #8
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 f807 	bl	8003f70 <RCCEx_PLL2_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f68:	e006      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f70:	e002      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f80:	4b68      	ldr	r3, [pc, #416]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f94:	e003      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002faa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	d051      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fc8:	d035      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fce:	d82e      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fd4:	d031      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fda:	d828      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe0:	d01a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	d822      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff0:	d007      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002ff2:	e01c      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003000:	e01c      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003006:	3308      	adds	r3, #8
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f000 ffb0 	bl	8003f70 <RCCEx_PLL2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003016:	e011      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301c:	3328      	adds	r3, #40	@ 0x28
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f001 f857 	bl	80040d4 <RCCEx_PLL3_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003034:	e002      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800303a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003044:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003048:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	4a34      	ldr	r2, [pc, #208]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003054:	430b      	orrs	r3, r1
 8003056:	6513      	str	r3, [r2, #80]	@ 0x50
 8003058:	e003      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800306e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003078:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800307c:	460b      	mov	r3, r1
 800307e:	4313      	orrs	r3, r2
 8003080:	d056      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800308c:	d033      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800308e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003092:	d82c      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003094:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003098:	d02f      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800309a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800309e:	d826      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030a4:	d02b      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030aa:	d820      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b0:	d012      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b6:	d81a      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d022      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c0:	d115      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c6:	3308      	adds	r3, #8
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ff50 	bl	8003f70 <RCCEx_PLL2_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030d6:	e015      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030dc:	3328      	adds	r3, #40	@ 0x28
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fff7 	bl	80040d4 <RCCEx_PLL3_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030ec:	e00a      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030f6:	bf00      	nop
 80030f8:	e004      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030fa:	bf00      	nop
 80030fc:	e002      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800311a:	4a02      	ldr	r2, [pc, #8]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800311c:	430b      	orrs	r3, r1
 800311e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003120:	e006      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003146:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800314a:	460b      	mov	r3, r1
 800314c:	4313      	orrs	r3, r2
 800314e:	d055      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003154:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315c:	d033      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003162:	d82c      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003168:	d02f      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d826      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003170:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003174:	d02b      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800317a:	d820      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003180:	d012      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003186:	d81a      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d022      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800318c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003190:	d115      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	3308      	adds	r3, #8
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fee8 	bl	8003f70 <RCCEx_PLL2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031a6:	e015      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	3328      	adds	r3, #40	@ 0x28
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 ff8f 	bl	80040d4 <RCCEx_PLL3_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031bc:	e00a      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031c4:	e006      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031c6:	bf00      	nop
 80031c8:	e004      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031dc:	4ba3      	ldr	r3, [pc, #652]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031ec:	4a9f      	ldr	r2, [pc, #636]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f2:	e003      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003208:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003216:	460b      	mov	r3, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	d037      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003226:	d00e      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800322c:	d816      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003236:	d111      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003238:	4b8c      	ldr	r3, [pc, #560]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	4a8b      	ldr	r2, [pc, #556]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003244:	e00f      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324a:	3308      	adds	r3, #8
 800324c:	2101      	movs	r1, #1
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fe8e 	bl	8003f70 <RCCEx_PLL2_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800325a:	e004      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800326e:	4b7f      	ldr	r3, [pc, #508]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003272:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	4a7b      	ldr	r2, [pc, #492]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800327e:	430b      	orrs	r3, r1
 8003280:	6513      	str	r3, [r2, #80]	@ 0x50
 8003282:	e003      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003288:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4313      	orrs	r3, r2
 80032aa:	d039      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d81c      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80032b6:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032f9 	.word	0x080032f9
 80032c0:	080032cd 	.word	0x080032cd
 80032c4:	080032db 	.word	0x080032db
 80032c8:	080032f9 	.word	0x080032f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032cc:	4b67      	ldr	r3, [pc, #412]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	4a66      	ldr	r2, [pc, #408]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032d8:	e00f      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032de:	3308      	adds	r3, #8
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fe44 	bl	8003f70 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032ee:	e004      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80032f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003302:	4b5a      	ldr	r3, [pc, #360]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003306:	f023 0103 	bic.w	r1, r3, #3
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003310:	4a56      	ldr	r2, [pc, #344]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003312:	430b      	orrs	r3, r1
 8003314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003316:	e003      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800331c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800332c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003336:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800333a:	460b      	mov	r3, r1
 800333c:	4313      	orrs	r3, r2
 800333e:	f000 809f 	beq.w	8003480 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003342:	4b4b      	ldr	r3, [pc, #300]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a4a      	ldr	r2, [pc, #296]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334e:	f7fe f827 	bl	80013a0 <HAL_GetTick>
 8003352:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003356:	e00b      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fe f822 	bl	80013a0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	@ 0x64
 8003366:	d903      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800336e:	e005      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003370:	4b3f      	ldr	r3, [pc, #252]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ed      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800337c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003380:	2b00      	cmp	r3, #0
 8003382:	d179      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003384:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003386:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003390:	4053      	eors	r3, r2
 8003392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a6:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	4a30      	ldr	r2, [pc, #192]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b2:	4b2e      	ldr	r3, [pc, #184]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b6:	4a2d      	ldr	r2, [pc, #180]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033be:	4a2b      	ldr	r2, [pc, #172]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d2:	d118      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fd ffe4 	bl	80013a0 <HAL_GetTick>
 80033d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033dc:	e00d      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fd ffdf 	bl	80013a0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033e8:	1ad2      	subs	r2, r2, r3
 80033ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d903      	bls.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80033f8:	e005      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033fa:	4b1c      	ldr	r3, [pc, #112]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0eb      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340a:	2b00      	cmp	r3, #0
 800340c:	d129      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800341e:	d10e      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003420:	4b12      	ldr	r3, [pc, #72]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003430:	091a      	lsrs	r2, r3, #4
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003434:	4013      	ands	r3, r2
 8003436:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003438:	430b      	orrs	r3, r1
 800343a:	6113      	str	r3, [r2, #16]
 800343c:	e005      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800343e:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003444:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003448:	6113      	str	r3, [r2, #16]
 800344a:	4b08      	ldr	r3, [pc, #32]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345a:	4a04      	ldr	r2, [pc, #16]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800345c:	430b      	orrs	r3, r1
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003460:	e00e      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800346a:	e009      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800346c:	58024400 	.word	0x58024400
 8003470:	58024800 	.word	0x58024800
 8003474:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f002 0301 	and.w	r3, r2, #1
 800348c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003496:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800349a:	460b      	mov	r3, r1
 800349c:	4313      	orrs	r3, r2
 800349e:	f000 8089 	beq.w	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a8:	2b28      	cmp	r3, #40	@ 0x28
 80034aa:	d86b      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80034ac:	a201      	add	r2, pc, #4	@ (adr r2, 80034b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	0800358d 	.word	0x0800358d
 80034b8:	08003585 	.word	0x08003585
 80034bc:	08003585 	.word	0x08003585
 80034c0:	08003585 	.word	0x08003585
 80034c4:	08003585 	.word	0x08003585
 80034c8:	08003585 	.word	0x08003585
 80034cc:	08003585 	.word	0x08003585
 80034d0:	08003585 	.word	0x08003585
 80034d4:	08003559 	.word	0x08003559
 80034d8:	08003585 	.word	0x08003585
 80034dc:	08003585 	.word	0x08003585
 80034e0:	08003585 	.word	0x08003585
 80034e4:	08003585 	.word	0x08003585
 80034e8:	08003585 	.word	0x08003585
 80034ec:	08003585 	.word	0x08003585
 80034f0:	08003585 	.word	0x08003585
 80034f4:	0800356f 	.word	0x0800356f
 80034f8:	08003585 	.word	0x08003585
 80034fc:	08003585 	.word	0x08003585
 8003500:	08003585 	.word	0x08003585
 8003504:	08003585 	.word	0x08003585
 8003508:	08003585 	.word	0x08003585
 800350c:	08003585 	.word	0x08003585
 8003510:	08003585 	.word	0x08003585
 8003514:	0800358d 	.word	0x0800358d
 8003518:	08003585 	.word	0x08003585
 800351c:	08003585 	.word	0x08003585
 8003520:	08003585 	.word	0x08003585
 8003524:	08003585 	.word	0x08003585
 8003528:	08003585 	.word	0x08003585
 800352c:	08003585 	.word	0x08003585
 8003530:	08003585 	.word	0x08003585
 8003534:	0800358d 	.word	0x0800358d
 8003538:	08003585 	.word	0x08003585
 800353c:	08003585 	.word	0x08003585
 8003540:	08003585 	.word	0x08003585
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
 800354c:	08003585 	.word	0x08003585
 8003550:	08003585 	.word	0x08003585
 8003554:	0800358d 	.word	0x0800358d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355c:	3308      	adds	r3, #8
 800355e:	2101      	movs	r1, #1
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fd05 	bl	8003f70 <RCCEx_PLL2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800356c:	e00f      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	3328      	adds	r3, #40	@ 0x28
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fdac 	bl	80040d4 <RCCEx_PLL3_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003582:	e004      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358a:	e000      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800358c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003596:	4bbf      	ldr	r3, [pc, #764]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035a4:	4abb      	ldr	r2, [pc, #748]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80035aa:	e003      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f002 0302 	and.w	r3, r2, #2
 80035c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80035ce:	460b      	mov	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d041      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d824      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80035de:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	08003631 	.word	0x08003631
 80035e8:	080035fd 	.word	0x080035fd
 80035ec:	08003613 	.word	0x08003613
 80035f0:	08003631 	.word	0x08003631
 80035f4:	08003631 	.word	0x08003631
 80035f8:	08003631 	.word	0x08003631
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	3308      	adds	r3, #8
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fcb3 	bl	8003f70 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003610:	e00f      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	3328      	adds	r3, #40	@ 0x28
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fd5a 	bl	80040d4 <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003626:	e004      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800363a:	4b96      	ldr	r3, [pc, #600]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800363c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363e:	f023 0107 	bic.w	r1, r3, #7
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003648:	4a92      	ldr	r2, [pc, #584]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800364a:	430b      	orrs	r3, r1
 800364c:	6553      	str	r3, [r2, #84]	@ 0x54
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f002 0304 	and.w	r3, r2, #4
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800366e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	d044      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003680:	2b05      	cmp	r3, #5
 8003682:	d825      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036d9 	.word	0x080036d9
 8003690:	080036a5 	.word	0x080036a5
 8003694:	080036bb 	.word	0x080036bb
 8003698:	080036d9 	.word	0x080036d9
 800369c:	080036d9 	.word	0x080036d9
 80036a0:	080036d9 	.word	0x080036d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	3308      	adds	r3, #8
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fc5f 	bl	8003f70 <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036b8:	e00f      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036be:	3328      	adds	r3, #40	@ 0x28
 80036c0:	2101      	movs	r1, #1
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fd06 	bl	80040d4 <RCCEx_PLL3_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036ce:	e004      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036d6:	e000      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80036d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	f023 0107 	bic.w	r1, r3, #7
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f2:	4a68      	ldr	r2, [pc, #416]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f002 0320 	and.w	r3, r2, #32
 800370e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003718:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800371c:	460b      	mov	r3, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	d055      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800372e:	d033      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003734:	d82c      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373a:	d02f      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003740:	d826      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003746:	d02b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003748:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800374c:	d820      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800374e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003752:	d012      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003758:	d81a      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d022      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800375e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003762:	d115      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	3308      	adds	r3, #8
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fbff 	bl	8003f70 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003778:	e015      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377e:	3328      	adds	r3, #40	@ 0x28
 8003780:	2102      	movs	r1, #2
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fca6 	bl	80040d4 <RCCEx_PLL3_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800378e:	e00a      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003796:	e006      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003798:	bf00      	nop
 800379a:	e004      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800379c:	bf00      	nop
 800379e:	e002      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037a0:	bf00      	nop
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ae:	4b39      	ldr	r3, [pc, #228]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a35      	ldr	r2, [pc, #212]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80037c4:	e003      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80037da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80037e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	d058      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80037fa:	d033      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80037fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003800:	d82c      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003806:	d02f      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380c:	d826      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800380e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003812:	d02b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003814:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003818:	d820      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800381a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800381e:	d012      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003824:	d81a      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d022      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382e:	d115      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	3308      	adds	r3, #8
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fb99 	bl	8003f70 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003844:	e015      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	3328      	adds	r3, #40	@ 0x28
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fc40 	bl	80040d4 <RCCEx_PLL3_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800385a:	e00a      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003862:	e006      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003864:	bf00      	nop
 8003866:	e004      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003868:	bf00      	nop
 800386a:	e002      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10e      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800388a:	4a02      	ldr	r2, [pc, #8]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800388c:	430b      	orrs	r3, r1
 800388e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003890:	e006      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003892:	bf00      	nop
 8003894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d055      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038cc:	d033      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80038ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038d2:	d82c      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80038d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d8:	d02f      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038de:	d826      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80038e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80038e4:	d02b      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80038e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80038ea:	d820      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80038ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f0:	d012      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80038f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f6:	d81a      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d022      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80038fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003900:	d115      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	3308      	adds	r3, #8
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fb30 	bl	8003f70 <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003916:	e015      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	3328      	adds	r3, #40	@ 0x28
 800391e:	2102      	movs	r1, #2
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fbd7 	bl	80040d4 <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800392c:	e00a      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003934:	e006      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003936:	bf00      	nop
 8003938:	e004      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800393a:	bf00      	nop
 800393c:	e002      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800394c:	4ba1      	ldr	r3, [pc, #644]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800395c:	4a9d      	ldr	r2, [pc, #628]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800395e:	430b      	orrs	r3, r1
 8003960:	6593      	str	r3, [r2, #88]	@ 0x58
 8003962:	e003      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f002 0308 	and.w	r3, r2, #8
 8003978:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003982:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003986:	460b      	mov	r3, r1
 8003988:	4313      	orrs	r3, r2
 800398a:	d01e      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003998:	d10c      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	3328      	adds	r3, #40	@ 0x28
 80039a0:	2102      	movs	r1, #2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fb96 	bl	80040d4 <RCCEx_PLL3_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039b4:	4b87      	ldr	r3, [pc, #540]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c4:	4a83      	ldr	r2, [pc, #524]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f002 0310 	and.w	r3, r2, #16
 80039d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80039e4:	460b      	mov	r3, r1
 80039e6:	4313      	orrs	r3, r2
 80039e8:	d01e      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	3328      	adds	r3, #40	@ 0x28
 80039fe:	2102      	movs	r1, #2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fb67 	bl	80040d4 <RCCEx_PLL3_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a12:	4b70      	ldr	r3, [pc, #448]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a22:	4a6c      	ldr	r2, [pc, #432]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a3e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d03e      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a54:	d022      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a5a:	d81b      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003a66:	e015      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fa7d 	bl	8003f70 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	3328      	adds	r3, #40	@ 0x28
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb24 	bl	80040d4 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a92:	e004      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ab6:	4a47      	ldr	r2, [pc, #284]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003abc:	e003      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ad8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003adc:	460b      	mov	r3, r1
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	d03b      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aee:	d01f      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003af0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003af4:	d818      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003afc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b00:	d007      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b02:	e011      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b33      	ldr	r3, [pc, #204]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4a32      	ldr	r2, [pc, #200]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b10:	e00f      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	3328      	adds	r3, #40	@ 0x28
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fada 	bl	80040d4 <RCCEx_PLL3_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3a:	4b26      	ldr	r3, [pc, #152]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	4a22      	ldr	r2, [pc, #136]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b50:	e003      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b66:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b68:	2300      	movs	r3, #0
 8003b6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d034      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b84:	d007      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003b86:	e011      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	4a11      	ldr	r2, [pc, #68]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b94:	e00e      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f9e6 	bl	8003f70 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bca:	4a02      	ldr	r2, [pc, #8]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd0:	e006      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003bd2:	bf00      	nop
 8003bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003bec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bee:	2300      	movs	r3, #0
 8003bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bf2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	3328      	adds	r3, #40	@ 0x28
 8003c02:	2102      	movs	r1, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fa65 	bl	80040d4 <RCCEx_PLL3_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c22:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c24:	2300      	movs	r3, #0
 8003c26:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	d038      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c3e:	d018      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c44:	d811      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4a:	d014      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c50:	d80b      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5c:	4bc3      	ldr	r3, [pc, #780]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	4ac2      	ldr	r2, [pc, #776]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c68:	e008      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c70:	e004      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c84:	4bb9      	ldr	r3, [pc, #740]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c94:	4ab5      	ldr	r2, [pc, #724]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cc0:	4baa      	ldr	r3, [pc, #680]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cce:	4aa7      	ldr	r2, [pc, #668]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ce6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003cea:	460b      	mov	r3, r1
 8003cec:	4313      	orrs	r3, r2
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d00:	4a9a      	ldr	r2, [pc, #616]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d14:	2300      	movs	r3, #0
 8003d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d22:	4b92      	ldr	r3, [pc, #584]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d26:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d30:	4a8e      	ldr	r2, [pc, #568]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d44:	2300      	movs	r3, #0
 8003d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d52:	4b86      	ldr	r3, [pc, #536]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	4a85      	ldr	r2, [pc, #532]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d5c:	6113      	str	r3, [r2, #16]
 8003d5e:	4b83      	ldr	r3, [pc, #524]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d60:	6919      	ldr	r1, [r3, #16]
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d6a:	4a80      	ldr	r2, [pc, #512]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d7e:	2300      	movs	r3, #0
 8003d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d8c:	4b77      	ldr	r3, [pc, #476]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d90:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9a:	4a74      	ldr	r2, [pc, #464]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dcc:	4a67      	ldr	r2, [pc, #412]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	2100      	movs	r1, #0
 8003ddc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003de8:	460b      	mov	r3, r1
 8003dea:	4313      	orrs	r3, r2
 8003dec:	d011      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	3308      	adds	r3, #8
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f8ba 	bl	8003f70 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	6239      	str	r1, [r7, #32]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d011      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	3308      	adds	r3, #8
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f89a 	bl	8003f70 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	61b9      	str	r1, [r7, #24]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d011      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	3308      	adds	r3, #8
 8003e74:	2102      	movs	r1, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f87a 	bl	8003f70 <RCCEx_PLL2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	6139      	str	r1, [r7, #16]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	3328      	adds	r3, #40	@ 0x28
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f90c 	bl	80040d4 <RCCEx_PLL3_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	2100      	movs	r1, #0
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d011      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	3328      	adds	r3, #40	@ 0x28
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f8ec 	bl	80040d4 <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d011      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	3328      	adds	r3, #40	@ 0x28
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f8cc 	bl	80040d4 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003f52:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003f66:	46bd      	mov	sp, r7
 8003f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6c:	58024400 	.word	0x58024400

08003f70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d101      	bne.n	8003f8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e099      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a4e      	ldr	r2, [pc, #312]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9a:	f7fd fa01 	bl	80013a0 <HAL_GetTick>
 8003f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fa2:	f7fd f9fd 	bl	80013a0 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e086      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fb4:	4b45      	ldr	r3, [pc, #276]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fc0:	4b42      	ldr	r3, [pc, #264]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	031b      	lsls	r3, r3, #12
 8003fce:	493f      	ldr	r1, [pc, #252]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	025b      	lsls	r3, r3, #9
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004004:	4931      	ldr	r1, [pc, #196]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800400a:	4b30      	ldr	r3, [pc, #192]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	492d      	ldr	r1, [pc, #180]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800401c:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	f023 0220 	bic.w	r2, r3, #32
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4928      	ldr	r1, [pc, #160]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800402e:	4b27      	ldr	r3, [pc, #156]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	4a26      	ldr	r2, [pc, #152]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004034:	f023 0310 	bic.w	r3, r3, #16
 8004038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800403a:	4b24      	ldr	r3, [pc, #144]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800403c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800403e:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <RCCEx_PLL2_Config+0x160>)
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	69d2      	ldr	r2, [r2, #28]
 8004046:	00d2      	lsls	r2, r2, #3
 8004048:	4920      	ldr	r1, [pc, #128]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800404a:	4313      	orrs	r3, r2
 800404c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800404e:	4b1f      	ldr	r3, [pc, #124]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	4a1e      	ldr	r2, [pc, #120]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004054:	f043 0310 	orr.w	r3, r3, #16
 8004058:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	4a19      	ldr	r2, [pc, #100]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800406a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800406c:	e00f      	b.n	800408e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004074:	4b15      	ldr	r3, [pc, #84]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004080:	e005      	b.n	800408e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004082:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	4a11      	ldr	r2, [pc, #68]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004088:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800408c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800408e:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a0e      	ldr	r2, [pc, #56]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004094:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409a:	f7fd f981 	bl	80013a0 <HAL_GetTick>
 800409e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040a2:	f7fd f97d 	bl	80013a0 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e006      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	ffff0007 	.word	0xffff0007

080040d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040e2:	4b53      	ldr	r3, [pc, #332]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d101      	bne.n	80040f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e099      	b.n	8004226 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fe:	f7fd f94f 	bl	80013a0 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004104:	e008      	b.n	8004118 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004106:	f7fd f94b 	bl	80013a0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e086      	b.n	8004226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004118:	4b45      	ldr	r3, [pc, #276]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004124:	4b42      	ldr	r3, [pc, #264]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	051b      	lsls	r3, r3, #20
 8004132:	493f      	ldr	r1, [pc, #252]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	628b      	str	r3, [r1, #40]	@ 0x28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	025b      	lsls	r3, r3, #9
 800414a:	b29b      	uxth	r3, r3
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	3b01      	subs	r3, #1
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004168:	4931      	ldr	r1, [pc, #196]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800416e:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	492d      	ldr	r1, [pc, #180]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004180:	4b2b      	ldr	r3, [pc, #172]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	4928      	ldr	r1, [pc, #160]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004192:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	4a26      	ldr	r2, [pc, #152]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800419c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <RCCEx_PLL3_Config+0x160>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	69d2      	ldr	r2, [r2, #28]
 80041aa:	00d2      	lsls	r2, r2, #3
 80041ac:	4920      	ldr	r1, [pc, #128]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4a19      	ldr	r2, [pc, #100]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041d0:	e00f      	b.n	80041f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	4a14      	ldr	r2, [pc, #80]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041e4:	e005      	b.n	80041f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041e6:	4b12      	ldr	r3, [pc, #72]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fe:	f7fd f8cf 	bl	80013a0 <HAL_GetTick>
 8004202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004204:	e008      	b.n	8004218 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004206:	f7fd f8cb 	bl	80013a0 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e006      	b.n	8004226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	58024400 	.word	0x58024400
 8004234:	ffff0007 	.word	0xffff0007

08004238 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e10f      	b.n	800446a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a87      	ldr	r2, [pc, #540]	@ (8004474 <HAL_SPI_Init+0x23c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00f      	beq.n	800427a <HAL_SPI_Init+0x42>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a86      	ldr	r2, [pc, #536]	@ (8004478 <HAL_SPI_Init+0x240>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00a      	beq.n	800427a <HAL_SPI_Init+0x42>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a84      	ldr	r2, [pc, #528]	@ (800447c <HAL_SPI_Init+0x244>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d005      	beq.n	800427a <HAL_SPI_Init+0x42>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	d901      	bls.n	800427a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0f7      	b.n	800446a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fe2e 	bl	8004edc <SPI_GetPacketSize>
 8004280:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7b      	ldr	r2, [pc, #492]	@ (8004474 <HAL_SPI_Init+0x23c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00c      	beq.n	80042a6 <HAL_SPI_Init+0x6e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a79      	ldr	r2, [pc, #484]	@ (8004478 <HAL_SPI_Init+0x240>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <HAL_SPI_Init+0x6e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a78      	ldr	r2, [pc, #480]	@ (800447c <HAL_SPI_Init+0x244>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d002      	beq.n	80042a6 <HAL_SPI_Init+0x6e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d811      	bhi.n	80042ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80042aa:	4a72      	ldr	r2, [pc, #456]	@ (8004474 <HAL_SPI_Init+0x23c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d009      	beq.n	80042c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a70      	ldr	r2, [pc, #448]	@ (8004478 <HAL_SPI_Init+0x240>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_SPI_Init+0x8c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a6f      	ldr	r2, [pc, #444]	@ (800447c <HAL_SPI_Init+0x244>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d104      	bne.n	80042ce <HAL_SPI_Init+0x96>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d901      	bls.n	80042ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0cd      	b.n	800446a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fcaa 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800430a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004314:	d119      	bne.n	800434a <HAL_SPI_Init+0x112>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431e:	d103      	bne.n	8004328 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10c      	bne.n	800434a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004338:	d107      	bne.n	800434a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004348:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00f      	beq.n	8004376 <HAL_SPI_Init+0x13e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b06      	cmp	r3, #6
 800435c:	d90b      	bls.n	8004376 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e007      	b.n	8004386 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004384:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	431a      	orrs	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e6:	ea42 0103 	orr.w	r1, r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004410:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004424:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40013000 	.word	0x40013000
 8004478:	40003800 	.word	0x40003800
 800447c:	40003c00 	.word	0x40003c00

08004480 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3320      	adds	r3, #32
 8004496:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004498:	f7fc ff82 	bl	80013a0 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d001      	beq.n	80044ae <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
 80044ac:	e1d1      	b.n	8004852 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_Transmit+0x3a>
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e1c9      	b.n	8004852 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_SPI_Transmit+0x4c>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e1c2      	b.n	8004852 <HAL_SPI_Transmit+0x3d2>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2203      	movs	r2, #3
 80044d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004524:	d108      	bne.n	8004538 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e009      	b.n	800454c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800454a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4b96      	ldr	r3, [pc, #600]	@ (80047ac <HAL_SPI_Transmit+0x32c>)
 8004554:	4013      	ands	r3, r2
 8004556:	88f9      	ldrh	r1, [r7, #6]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	430b      	orrs	r3, r1
 800455e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004578:	d107      	bne.n	800458a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b0f      	cmp	r3, #15
 8004590:	d947      	bls.n	8004622 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004592:	e03f      	b.n	8004614 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d114      	bne.n	80045cc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80045ca:	e023      	b.n	8004614 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045cc:	f7fc fee8 	bl	80013a0 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d803      	bhi.n	80045e4 <HAL_SPI_Transmit+0x164>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d102      	bne.n	80045ea <HAL_SPI_Transmit+0x16a>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d114      	bne.n	8004614 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fba8 	bl	8004d40 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e11e      	b.n	8004852 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1b9      	bne.n	8004594 <HAL_SPI_Transmit+0x114>
 8004620:	e0f1      	b.n	8004806 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b07      	cmp	r3, #7
 8004628:	f240 80e6 	bls.w	80047f8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800462c:	e05d      	b.n	80046ea <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b02      	cmp	r3, #2
 800463a:	d132      	bne.n	80046a2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d918      	bls.n	800467a <HAL_SPI_Transmit+0x1fa>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d014      	beq.n	800467a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004660:	1d1a      	adds	r2, r3, #4
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b02      	subs	r3, #2
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004678:	e037      	b.n	80046ea <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80046a0:	e023      	b.n	80046ea <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a2:	f7fc fe7d 	bl	80013a0 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_Transmit+0x23a>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_Transmit+0x240>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d114      	bne.n	80046ea <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fb3d 	bl	8004d40 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0b3      	b.n	8004852 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d19b      	bne.n	800462e <HAL_SPI_Transmit+0x1ae>
 80046f6:	e086      	b.n	8004806 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d154      	bne.n	80047b0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b03      	cmp	r3, #3
 8004710:	d918      	bls.n	8004744 <HAL_SPI_Transmit+0x2c4>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d914      	bls.n	8004744 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472a:	1d1a      	adds	r2, r3, #4
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b04      	subs	r3, #4
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004742:	e059      	b.n	80047f8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d917      	bls.n	8004780 <HAL_SPI_Transmit+0x300>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d013      	beq.n	8004780 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475c:	881a      	ldrh	r2, [r3, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b02      	subs	r3, #2
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800477e:	e03b      	b.n	80047f8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3320      	adds	r3, #32
 800478a:	7812      	ldrb	r2, [r2, #0]
 800478c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80047aa:	e025      	b.n	80047f8 <HAL_SPI_Transmit+0x378>
 80047ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047b0:	f7fc fdf6 	bl	80013a0 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d803      	bhi.n	80047c8 <HAL_SPI_Transmit+0x348>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d102      	bne.n	80047ce <HAL_SPI_Transmit+0x34e>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d114      	bne.n	80047f8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fab6 	bl	8004d40 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e02c      	b.n	8004852 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f af79 	bne.w	80046f8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2200      	movs	r2, #0
 800480e:	2108      	movs	r1, #8
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fb35 	bl	8004e80 <SPI_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fa87 	bl	8004d40 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004850:	2300      	movs	r3, #0
  }
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop

0800485c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	b29b      	uxth	r3, r3
 8004874:	3301      	adds	r3, #1
 8004876:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3330      	adds	r3, #48	@ 0x30
 800487e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004880:	f7fc fd8e 	bl	80013a0 <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d001      	beq.n	8004896 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
 8004894:	e250      	b.n	8004d38 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_SPI_Receive+0x46>
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e248      	b.n	8004d38 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_SPI_Receive+0x58>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e241      	b.n	8004d38 <HAL_SPI_Receive+0x4dc>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2204      	movs	r2, #4
 80048c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800490c:	d108      	bne.n	8004920 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e009      	b.n	8004934 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004932:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	4b95      	ldr	r3, [pc, #596]	@ (8004b90 <HAL_SPI_Receive+0x334>)
 800493c:	4013      	ands	r3, r2
 800493e:	88f9      	ldrh	r1, [r7, #6]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	430b      	orrs	r3, r1
 8004946:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004960:	d107      	bne.n	8004972 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d96c      	bls.n	8004a54 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800497a:	e064      	b.n	8004a46 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d114      	bne.n	80049bc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800499a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800499c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80049ba:	e044      	b.n	8004a46 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8bfa      	ldrh	r2, [r7, #30]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d919      	bls.n	80049fe <HAL_SPI_Receive+0x1a2>
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d014      	beq.n	80049fe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049de:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049e4:	1d1a      	adds	r2, r3, #4
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80049fc:	e023      	b.n	8004a46 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049fe:	f7fc fccf 	bl	80013a0 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d803      	bhi.n	8004a16 <HAL_SPI_Receive+0x1ba>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d102      	bne.n	8004a1c <HAL_SPI_Receive+0x1c0>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d114      	bne.n	8004a46 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f98f 	bl	8004d40 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e178      	b.n	8004d38 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d194      	bne.n	800497c <HAL_SPI_Receive+0x120>
 8004a52:	e15e      	b.n	8004d12 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	f240 8153 	bls.w	8004d04 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004a5e:	e08f      	b.n	8004b80 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d114      	bne.n	8004aa0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	8812      	ldrh	r2, [r2, #0]
 8004a7e:	b292      	uxth	r2, r2
 8004a80:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004a9e:	e06f      	b.n	8004b80 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8bfa      	ldrh	r2, [r7, #30]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d924      	bls.n	8004af8 <HAL_SPI_Receive+0x29c>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01f      	beq.n	8004af8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	8812      	ldrh	r2, [r2, #0]
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	8812      	ldrh	r2, [r2, #0]
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b02      	subs	r3, #2
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004af6:	e043      	b.n	8004b80 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d119      	bne.n	8004b38 <HAL_SPI_Receive+0x2dc>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d014      	beq.n	8004b38 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	8812      	ldrh	r2, [r2, #0]
 8004b16:	b292      	uxth	r2, r2
 8004b18:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b1e:	1c9a      	adds	r2, r3, #2
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004b36:	e023      	b.n	8004b80 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b38:	f7fc fc32 	bl	80013a0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d803      	bhi.n	8004b50 <HAL_SPI_Receive+0x2f4>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d102      	bne.n	8004b56 <HAL_SPI_Receive+0x2fa>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d114      	bne.n	8004b80 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f8f2 	bl	8004d40 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0db      	b.n	8004d38 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f af69 	bne.w	8004a60 <HAL_SPI_Receive+0x204>
 8004b8e:	e0c0      	b.n	8004d12 <HAL_SPI_Receive+0x4b6>
 8004b90:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d117      	bne.n	8004bda <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004bd8:	e094      	b.n	8004d04 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8bfa      	ldrh	r2, [r7, #30]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d946      	bls.n	8004c76 <HAL_SPI_Receive+0x41a>
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d041      	beq.n	8004c76 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bfe:	7812      	ldrb	r2, [r2, #0]
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c1a:	7812      	ldrb	r2, [r2, #0]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004c74:	e046      	b.n	8004d04 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d81c      	bhi.n	8004cbc <HAL_SPI_Receive+0x460>
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004cba:	e023      	b.n	8004d04 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cbc:	f7fc fb70 	bl	80013a0 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d803      	bhi.n	8004cd4 <HAL_SPI_Receive+0x478>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d102      	bne.n	8004cda <HAL_SPI_Receive+0x47e>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d114      	bne.n	8004d04 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f830 	bl	8004d40 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e019      	b.n	8004d38 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f47f af41 	bne.w	8004b94 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f814 	bl	8004d40 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8004d36:	2300      	movs	r3, #0
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0208 	orr.w	r2, r2, #8
 8004d5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0210 	orr.w	r2, r2, #16
 8004d6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6919      	ldr	r1, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e7c <SPI_CloseTransfer+0x13c>)
 8004d8c:	400b      	ands	r3, r1
 8004d8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004d9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d014      	beq.n	8004dd6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00f      	beq.n	8004dd6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0220 	orr.w	r2, r2, #32
 8004dd4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d014      	beq.n	8004e0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df2:	f043 0204 	orr.w	r2, r3, #4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00f      	beq.n	8004e36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00f      	beq.n	8004e60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e46:	f043 0208 	orr.w	r2, r3, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	fffffc90 	.word	0xfffffc90

08004e80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004e90:	e010      	b.n	8004eb4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e92:	f7fc fa85 	bl	80013a0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d803      	bhi.n	8004eaa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d102      	bne.n	8004eb0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e00f      	b.n	8004ed4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d0df      	beq.n	8004e92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3307      	adds	r3, #7
 8004efa:	08db      	lsrs	r3, r3, #3
 8004efc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e049      	b.n	8004fb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f841 	bl	8004fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 fc61 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d001      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e054      	b.n	8005096 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a26      	ldr	r2, [pc, #152]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005016:	d01d      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a22      	ldr	r2, [pc, #136]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	@ (80050ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	@ (80050b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	@ (80050bc <HAL_TIM_Base_Start_IT+0xe8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d115      	bne.n	8005080 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <HAL_TIM_Base_Start_IT+0xec>)
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b06      	cmp	r3, #6
 8005064:	d015      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0xbe>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506c:	d011      	beq.n	8005092 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	e008      	b.n	8005092 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e000      	b.n	8005094 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40010400 	.word	0x40010400
 80050b8:	40001800 	.word	0x40001800
 80050bc:	40014000 	.word	0x40014000
 80050c0:	00010007 	.word	0x00010007

080050c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e049      	b.n	800516a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc f886 	bl	80011fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f000 fb88 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_TIM_PWM_Start+0x24>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e03c      	b.n	8005212 <HAL_TIM_PWM_Start+0x9e>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d109      	bne.n	80051b2 <HAL_TIM_PWM_Start+0x3e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	bf14      	ite	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	2300      	moveq	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	e02f      	b.n	8005212 <HAL_TIM_PWM_Start+0x9e>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d109      	bne.n	80051cc <HAL_TIM_PWM_Start+0x58>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	bf14      	ite	ne
 80051c4:	2301      	movne	r3, #1
 80051c6:	2300      	moveq	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e022      	b.n	8005212 <HAL_TIM_PWM_Start+0x9e>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b0c      	cmp	r3, #12
 80051d0:	d109      	bne.n	80051e6 <HAL_TIM_PWM_Start+0x72>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	bf14      	ite	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	2300      	moveq	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	e015      	b.n	8005212 <HAL_TIM_PWM_Start+0x9e>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d109      	bne.n	8005200 <HAL_TIM_PWM_Start+0x8c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	e008      	b.n	8005212 <HAL_TIM_PWM_Start+0x9e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	bf14      	ite	ne
 800520c:	2301      	movne	r3, #1
 800520e:	2300      	moveq	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0a1      	b.n	800535e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start+0xb6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005228:	e023      	b.n	8005272 <HAL_TIM_PWM_Start+0xfe>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d104      	bne.n	800523a <HAL_TIM_PWM_Start+0xc6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005238:	e01b      	b.n	8005272 <HAL_TIM_PWM_Start+0xfe>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d104      	bne.n	800524a <HAL_TIM_PWM_Start+0xd6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005248:	e013      	b.n	8005272 <HAL_TIM_PWM_Start+0xfe>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	d104      	bne.n	800525a <HAL_TIM_PWM_Start+0xe6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005258:	e00b      	b.n	8005272 <HAL_TIM_PWM_Start+0xfe>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b10      	cmp	r3, #16
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Start+0xf6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005268:	e003      	b.n	8005272 <HAL_TIM_PWM_Start+0xfe>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fe48 	bl	8005f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a38      	ldr	r2, [pc, #224]	@ (8005368 <HAL_TIM_PWM_Start+0x1f4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x13e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a37      	ldr	r2, [pc, #220]	@ (800536c <HAL_TIM_PWM_Start+0x1f8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x13e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a35      	ldr	r2, [pc, #212]	@ (8005370 <HAL_TIM_PWM_Start+0x1fc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x13e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a34      	ldr	r2, [pc, #208]	@ (8005374 <HAL_TIM_PWM_Start+0x200>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x13e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a32      	ldr	r2, [pc, #200]	@ (8005378 <HAL_TIM_PWM_Start+0x204>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_PWM_Start+0x142>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_TIM_PWM_Start+0x144>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a25      	ldr	r2, [pc, #148]	@ (8005368 <HAL_TIM_PWM_Start+0x1f4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d022      	beq.n	800531c <HAL_TIM_PWM_Start+0x1a8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052de:	d01d      	beq.n	800531c <HAL_TIM_PWM_Start+0x1a8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a25      	ldr	r2, [pc, #148]	@ (800537c <HAL_TIM_PWM_Start+0x208>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <HAL_TIM_PWM_Start+0x1a8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a24      	ldr	r2, [pc, #144]	@ (8005380 <HAL_TIM_PWM_Start+0x20c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <HAL_TIM_PWM_Start+0x1a8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <HAL_TIM_PWM_Start+0x210>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_TIM_PWM_Start+0x1a8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1a      	ldr	r2, [pc, #104]	@ (800536c <HAL_TIM_PWM_Start+0x1f8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_TIM_PWM_Start+0x1a8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <HAL_TIM_PWM_Start+0x214>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_TIM_PWM_Start+0x1a8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <HAL_TIM_PWM_Start+0x1fc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d115      	bne.n	8005348 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <HAL_TIM_PWM_Start+0x218>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d015      	beq.n	800535a <HAL_TIM_PWM_Start+0x1e6>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005334:	d011      	beq.n	800535a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	e008      	b.n	800535a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e000      	b.n	800535c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000
 800536c:	40010400 	.word	0x40010400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40001800 	.word	0x40001800
 800538c:	00010007 	.word	0x00010007

08005390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d020      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01b      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0202 	mvn.w	r2, #2
 80053c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9fe 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9f0 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa01 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d020      	beq.n	8005440 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0204 	mvn.w	r2, #4
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9d8 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f9ca 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9db 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d020      	beq.n	800548c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0208 	mvn.w	r2, #8
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2204      	movs	r2, #4
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9b2 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f9a4 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f9b5 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d020      	beq.n	80054d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0210 	mvn.w	r2, #16
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2208      	movs	r2, #8
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f98c 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f97e 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f98f 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0201 	mvn.w	r2, #1
 80054f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fb fada 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00c      	beq.n	800552a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fdb1 	bl	800608c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00c      	beq.n	800554e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fda9 	bl	80060a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00c      	beq.n	8005572 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800556a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f949 	bl	8005804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00c      	beq.n	8005596 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0220 	mvn.w	r2, #32
 800558e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fd71 	bl	8006078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e0ff      	b.n	80057be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b14      	cmp	r3, #20
 80055ca:	f200 80f0 	bhi.w	80057ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055ce:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005629 	.word	0x08005629
 80055d8:	080057af 	.word	0x080057af
 80055dc:	080057af 	.word	0x080057af
 80055e0:	080057af 	.word	0x080057af
 80055e4:	08005669 	.word	0x08005669
 80055e8:	080057af 	.word	0x080057af
 80055ec:	080057af 	.word	0x080057af
 80055f0:	080057af 	.word	0x080057af
 80055f4:	080056ab 	.word	0x080056ab
 80055f8:	080057af 	.word	0x080057af
 80055fc:	080057af 	.word	0x080057af
 8005600:	080057af 	.word	0x080057af
 8005604:	080056eb 	.word	0x080056eb
 8005608:	080057af 	.word	0x080057af
 800560c:	080057af 	.word	0x080057af
 8005610:	080057af 	.word	0x080057af
 8005614:	0800572d 	.word	0x0800572d
 8005618:	080057af 	.word	0x080057af
 800561c:	080057af 	.word	0x080057af
 8005620:	080057af 	.word	0x080057af
 8005624:	0800576d 	.word	0x0800576d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f998 	bl	8005964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0208 	orr.w	r2, r2, #8
 8005642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0204 	bic.w	r2, r2, #4
 8005652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6999      	ldr	r1, [r3, #24]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	619a      	str	r2, [r3, #24]
      break;
 8005666:	e0a5      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa08 	bl	8005a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	619a      	str	r2, [r3, #24]
      break;
 80056a8:	e084      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fa71 	bl	8005b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0208 	orr.w	r2, r2, #8
 80056c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0204 	bic.w	r2, r2, #4
 80056d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69d9      	ldr	r1, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	61da      	str	r2, [r3, #28]
      break;
 80056e8:	e064      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fad9 	bl	8005ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	021a      	lsls	r2, r3, #8
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	61da      	str	r2, [r3, #28]
      break;
 800572a:	e043      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb22 	bl	8005d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0208 	orr.w	r2, r2, #8
 8005746:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0204 	bic.w	r2, r2, #4
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800576a:	e023      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb66 	bl	8005e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	021a      	lsls	r2, r3, #8
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057ac:	e002      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
      break;
 80057b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop

080057c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a46      	ldr	r2, [pc, #280]	@ (8005944 <TIM_Base_SetConfig+0x12c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005836:	d00f      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a43      	ldr	r2, [pc, #268]	@ (8005948 <TIM_Base_SetConfig+0x130>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a42      	ldr	r2, [pc, #264]	@ (800594c <TIM_Base_SetConfig+0x134>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a41      	ldr	r2, [pc, #260]	@ (8005950 <TIM_Base_SetConfig+0x138>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a40      	ldr	r2, [pc, #256]	@ (8005954 <TIM_Base_SetConfig+0x13c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a35      	ldr	r2, [pc, #212]	@ (8005944 <TIM_Base_SetConfig+0x12c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a32      	ldr	r2, [pc, #200]	@ (8005948 <TIM_Base_SetConfig+0x130>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a31      	ldr	r2, [pc, #196]	@ (800594c <TIM_Base_SetConfig+0x134>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a30      	ldr	r2, [pc, #192]	@ (8005950 <TIM_Base_SetConfig+0x138>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2f      	ldr	r2, [pc, #188]	@ (8005954 <TIM_Base_SetConfig+0x13c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2e      	ldr	r2, [pc, #184]	@ (8005958 <TIM_Base_SetConfig+0x140>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2d      	ldr	r2, [pc, #180]	@ (800595c <TIM_Base_SetConfig+0x144>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0x9a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005960 <TIM_Base_SetConfig+0x148>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a16      	ldr	r2, [pc, #88]	@ (8005944 <TIM_Base_SetConfig+0x12c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a18      	ldr	r2, [pc, #96]	@ (8005954 <TIM_Base_SetConfig+0x13c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <TIM_Base_SetConfig+0x140>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a16      	ldr	r2, [pc, #88]	@ (800595c <TIM_Base_SetConfig+0x144>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <TIM_Base_SetConfig+0x148>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d105      	bne.n	8005936 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]
  }
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800

08005964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f023 0201 	bic.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4b37      	ldr	r3, [pc, #220]	@ (8005a6c <TIM_OC1_SetConfig+0x108>)
 8005990:	4013      	ands	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0303 	bic.w	r3, r3, #3
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f023 0302 	bic.w	r3, r3, #2
 80059ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005a70 <TIM_OC1_SetConfig+0x10c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00f      	beq.n	80059e0 <TIM_OC1_SetConfig+0x7c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a74 <TIM_OC1_SetConfig+0x110>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00b      	beq.n	80059e0 <TIM_OC1_SetConfig+0x7c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005a78 <TIM_OC1_SetConfig+0x114>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d007      	beq.n	80059e0 <TIM_OC1_SetConfig+0x7c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a7c <TIM_OC1_SetConfig+0x118>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC1_SetConfig+0x7c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a29      	ldr	r2, [pc, #164]	@ (8005a80 <TIM_OC1_SetConfig+0x11c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10c      	bne.n	80059fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 0308 	bic.w	r3, r3, #8
 80059e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 0304 	bic.w	r3, r3, #4
 80059f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <TIM_OC1_SetConfig+0x10c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_OC1_SetConfig+0xbe>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <TIM_OC1_SetConfig+0x110>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_OC1_SetConfig+0xbe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <TIM_OC1_SetConfig+0x114>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_OC1_SetConfig+0xbe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a19      	ldr	r2, [pc, #100]	@ (8005a7c <TIM_OC1_SetConfig+0x118>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC1_SetConfig+0xbe>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <TIM_OC1_SetConfig+0x11c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d111      	bne.n	8005a46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	621a      	str	r2, [r3, #32]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	fffeff8f 	.word	0xfffeff8f
 8005a70:	40010000 	.word	0x40010000
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f023 0210 	bic.w	r2, r3, #16
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4b34      	ldr	r3, [pc, #208]	@ (8005b80 <TIM_OC2_SetConfig+0xfc>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0320 	bic.w	r3, r3, #32
 8005ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a29      	ldr	r2, [pc, #164]	@ (8005b84 <TIM_OC2_SetConfig+0x100>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC2_SetConfig+0x68>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a28      	ldr	r2, [pc, #160]	@ (8005b88 <TIM_OC2_SetConfig+0x104>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10d      	bne.n	8005b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b84 <TIM_OC2_SetConfig+0x100>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00f      	beq.n	8005b30 <TIM_OC2_SetConfig+0xac>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <TIM_OC2_SetConfig+0x104>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <TIM_OC2_SetConfig+0xac>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b8c <TIM_OC2_SetConfig+0x108>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_OC2_SetConfig+0xac>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	@ (8005b90 <TIM_OC2_SetConfig+0x10c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_OC2_SetConfig+0xac>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005b94 <TIM_OC2_SetConfig+0x110>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d113      	bne.n	8005b58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	feff8fff 	.word	0xfeff8fff
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800

08005b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4b33      	ldr	r3, [pc, #204]	@ (8005c90 <TIM_OC3_SetConfig+0xf8>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a28      	ldr	r2, [pc, #160]	@ (8005c94 <TIM_OC3_SetConfig+0xfc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_OC3_SetConfig+0x66>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a27      	ldr	r2, [pc, #156]	@ (8005c98 <TIM_OC3_SetConfig+0x100>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10d      	bne.n	8005c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c94 <TIM_OC3_SetConfig+0xfc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00f      	beq.n	8005c42 <TIM_OC3_SetConfig+0xaa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <TIM_OC3_SetConfig+0x100>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_OC3_SetConfig+0xaa>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c9c <TIM_OC3_SetConfig+0x104>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_OC3_SetConfig+0xaa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca0 <TIM_OC3_SetConfig+0x108>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC3_SetConfig+0xaa>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	@ (8005ca4 <TIM_OC3_SetConfig+0x10c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d113      	bne.n	8005c6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	621a      	str	r2, [r3, #32]
}
 8005c84:	bf00      	nop
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	fffeff8f 	.word	0xfffeff8f
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800

08005ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4b24      	ldr	r3, [pc, #144]	@ (8005d64 <TIM_OC4_SetConfig+0xbc>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	031b      	lsls	r3, r3, #12
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a19      	ldr	r2, [pc, #100]	@ (8005d68 <TIM_OC4_SetConfig+0xc0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_OC4_SetConfig+0x80>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a18      	ldr	r2, [pc, #96]	@ (8005d6c <TIM_OC4_SetConfig+0xc4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_OC4_SetConfig+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a17      	ldr	r2, [pc, #92]	@ (8005d70 <TIM_OC4_SetConfig+0xc8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_OC4_SetConfig+0x80>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a16      	ldr	r2, [pc, #88]	@ (8005d74 <TIM_OC4_SetConfig+0xcc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC4_SetConfig+0x80>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a15      	ldr	r2, [pc, #84]	@ (8005d78 <TIM_OC4_SetConfig+0xd0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d109      	bne.n	8005d3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	feff8fff 	.word	0xfeff8fff
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40010400 	.word	0x40010400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4b21      	ldr	r3, [pc, #132]	@ (8005e2c <TIM_OC5_SetConfig+0xb0>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	041b      	lsls	r3, r3, #16
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <TIM_OC5_SetConfig+0xb4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00f      	beq.n	8005df2 <TIM_OC5_SetConfig+0x76>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <TIM_OC5_SetConfig+0xb8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_OC5_SetConfig+0x76>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a16      	ldr	r2, [pc, #88]	@ (8005e38 <TIM_OC5_SetConfig+0xbc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_OC5_SetConfig+0x76>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <TIM_OC5_SetConfig+0xc0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_OC5_SetConfig+0x76>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a14      	ldr	r2, [pc, #80]	@ (8005e40 <TIM_OC5_SetConfig+0xc4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d109      	bne.n	8005e06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	621a      	str	r2, [r3, #32]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	fffeff8f 	.word	0xfffeff8f
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40010400 	.word	0x40010400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4b22      	ldr	r3, [pc, #136]	@ (8005ef8 <TIM_OC6_SetConfig+0xb4>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	051b      	lsls	r3, r3, #20
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a19      	ldr	r2, [pc, #100]	@ (8005efc <TIM_OC6_SetConfig+0xb8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00f      	beq.n	8005ebc <TIM_OC6_SetConfig+0x78>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <TIM_OC6_SetConfig+0xbc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00b      	beq.n	8005ebc <TIM_OC6_SetConfig+0x78>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <TIM_OC6_SetConfig+0xc0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d007      	beq.n	8005ebc <TIM_OC6_SetConfig+0x78>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a16      	ldr	r2, [pc, #88]	@ (8005f08 <TIM_OC6_SetConfig+0xc4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_OC6_SetConfig+0x78>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a15      	ldr	r2, [pc, #84]	@ (8005f0c <TIM_OC6_SetConfig+0xc8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d109      	bne.n	8005ed0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	029b      	lsls	r3, r3, #10
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	feff8fff 	.word	0xfeff8fff
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800

08005f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2201      	movs	r2, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	401a      	ands	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e06d      	b.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a30      	ldr	r2, [pc, #192]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d108      	bne.n	8005fba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005fae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a20      	ldr	r2, [pc, #128]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d022      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d01d      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1d      	ldr	r2, [pc, #116]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d018      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d013      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1a      	ldr	r2, [pc, #104]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00e      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d009      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a16      	ldr	r2, [pc, #88]	@ (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a15      	ldr	r2, [pc, #84]	@ (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10c      	bne.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800602a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	4313      	orrs	r3, r2
 8006034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	40010000 	.word	0x40010000
 8006060:	40010400 	.word	0x40010400
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40001800 	.word	0x40001800
 8006074:	40014000 	.word	0x40014000

08006078 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <__NVIC_SetPriority>:
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	6039      	str	r1, [r7, #0]
 80060be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80060c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	db0a      	blt.n	80060de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	490c      	ldr	r1, [pc, #48]	@ (8006100 <__NVIC_SetPriority+0x4c>)
 80060ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060d2:	0112      	lsls	r2, r2, #4
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	440b      	add	r3, r1
 80060d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80060dc:	e00a      	b.n	80060f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4908      	ldr	r1, [pc, #32]	@ (8006104 <__NVIC_SetPriority+0x50>)
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	3b04      	subs	r3, #4
 80060ec:	0112      	lsls	r2, r2, #4
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	440b      	add	r3, r1
 80060f2:	761a      	strb	r2, [r3, #24]
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	e000e100 	.word	0xe000e100
 8006104:	e000ed00 	.word	0xe000ed00

08006108 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800610c:	4b05      	ldr	r3, [pc, #20]	@ (8006124 <SysTick_Handler+0x1c>)
 800610e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006110:	f001 fd50 	bl	8007bb4 <xTaskGetSchedulerState>
 8006114:	4603      	mov	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800611a:	f002 fb45 	bl	80087a8 <xPortSysTickHandler>
  }
}
 800611e:	bf00      	nop
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	e000e010 	.word	0xe000e010

08006128 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800612c:	2100      	movs	r1, #0
 800612e:	f06f 0004 	mvn.w	r0, #4
 8006132:	f7ff ffbf 	bl	80060b4 <__NVIC_SetPriority>
#endif
}
 8006136:	bf00      	nop
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006142:	f3ef 8305 	mrs	r3, IPSR
 8006146:	603b      	str	r3, [r7, #0]
  return(result);
 8006148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800614e:	f06f 0305 	mvn.w	r3, #5
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	e00c      	b.n	8006170 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <osKernelInitialize+0x44>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d105      	bne.n	800616a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800615e:	4b08      	ldr	r3, [pc, #32]	@ (8006180 <osKernelInitialize+0x44>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006164:	2300      	movs	r3, #0
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	e002      	b.n	8006170 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
 800616e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006170:	687b      	ldr	r3, [r7, #4]
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	240003d0 	.word	0x240003d0

08006184 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618a:	f3ef 8305 	mrs	r3, IPSR
 800618e:	603b      	str	r3, [r7, #0]
  return(result);
 8006190:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006196:	f06f 0305 	mvn.w	r3, #5
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	e010      	b.n	80061c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800619e:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <osKernelStart+0x48>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d109      	bne.n	80061ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061a6:	f7ff ffbf 	bl	8006128 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061aa:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <osKernelStart+0x48>)
 80061ac:	2202      	movs	r2, #2
 80061ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061b0:	f001 f87a 	bl	80072a8 <vTaskStartScheduler>
      stat = osOK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	607b      	str	r3, [r7, #4]
 80061b8:	e002      	b.n	80061c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061c0:	687b      	ldr	r3, [r7, #4]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	240003d0 	.word	0x240003d0

080061d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08e      	sub	sp, #56	@ 0x38
 80061d4:	af04      	add	r7, sp, #16
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e0:	f3ef 8305 	mrs	r3, IPSR
 80061e4:	617b      	str	r3, [r7, #20]
  return(result);
 80061e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d17e      	bne.n	80062ea <osThreadNew+0x11a>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d07b      	beq.n	80062ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061f2:	2380      	movs	r3, #128	@ 0x80
 80061f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061f6:	2318      	movs	r3, #24
 80061f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d045      	beq.n	8006296 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <osThreadNew+0x48>
        name = attr->name;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <osThreadNew+0x6e>
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b38      	cmp	r3, #56	@ 0x38
 8006230:	d805      	bhi.n	800623e <osThreadNew+0x6e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <osThreadNew+0x72>
        return (NULL);
 800623e:	2300      	movs	r3, #0
 8006240:	e054      	b.n	80062ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	089b      	lsrs	r3, r3, #2
 8006250:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00e      	beq.n	8006278 <osThreadNew+0xa8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006260:	d90a      	bls.n	8006278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006266:	2b00      	cmp	r3, #0
 8006268:	d006      	beq.n	8006278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <osThreadNew+0xa8>
        mem = 1;
 8006272:	2301      	movs	r3, #1
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	e010      	b.n	800629a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10c      	bne.n	800629a <osThreadNew+0xca>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d108      	bne.n	800629a <osThreadNew+0xca>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <osThreadNew+0xca>
          mem = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e001      	b.n	800629a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d110      	bne.n	80062c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062a8:	9202      	str	r2, [sp, #8]
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6a3a      	ldr	r2, [r7, #32]
 80062b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fe1a 	bl	8006ef0 <xTaskCreateStatic>
 80062bc:	4603      	mov	r3, r0
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	e013      	b.n	80062ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d110      	bne.n	80062ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f107 0310 	add.w	r3, r7, #16
 80062d0:	9301      	str	r3, [sp, #4]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fe68 	bl	8006fb0 <xTaskCreate>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d001      	beq.n	80062ea <osThreadNew+0x11a>
            hTask = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062ea:	693b      	ldr	r3, [r7, #16]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3728      	adds	r7, #40	@ 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062fc:	f3ef 8305 	mrs	r3, IPSR
 8006300:	60bb      	str	r3, [r7, #8]
  return(result);
 8006302:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <osDelay+0x1c>
    stat = osErrorISR;
 8006308:	f06f 0305 	mvn.w	r3, #5
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e007      	b.n	8006320 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <osDelay+0x2c>
      vTaskDelay(ticks);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 ff8e 	bl	800723c <vTaskDelay>
    }
  }

  return (stat);
 8006320:	68fb      	ldr	r3, [r7, #12]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a07      	ldr	r2, [pc, #28]	@ (8006358 <vApplicationGetIdleTaskMemory+0x2c>)
 800633c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a06      	ldr	r2, [pc, #24]	@ (800635c <vApplicationGetIdleTaskMemory+0x30>)
 8006342:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2280      	movs	r2, #128	@ 0x80
 8006348:	601a      	str	r2, [r3, #0]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	240003d4 	.word	0x240003d4
 800635c:	24000430 	.word	0x24000430

08006360 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a07      	ldr	r2, [pc, #28]	@ (800638c <vApplicationGetTimerTaskMemory+0x2c>)
 8006370:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4a06      	ldr	r2, [pc, #24]	@ (8006390 <vApplicationGetTimerTaskMemory+0x30>)
 8006376:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800637e:	601a      	str	r2, [r3, #0]
}
 8006380:	bf00      	nop
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	24000630 	.word	0x24000630
 8006390:	2400068c 	.word	0x2400068c

08006394 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f103 0208 	add.w	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f103 0208 	add.w	r2, r3, #8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 0208 	add.w	r2, r3, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d103      	bne.n	8006456 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e00c      	b.n	8006470 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3308      	adds	r3, #8
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e002      	b.n	8006464 <vListInsert+0x2e>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	429a      	cmp	r2, r3
 800646e:	d2f6      	bcs.n	800645e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	601a      	str	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6892      	ldr	r2, [r2, #8]
 80064be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6852      	ldr	r2, [r2, #4]
 80064c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d103      	bne.n	80064dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006528:	f002 f8ae 	bl	8008688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	3b01      	subs	r3, #1
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	22ff      	movs	r2, #255	@ 0xff
 800656c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	22ff      	movs	r2, #255	@ 0xff
 8006574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d114      	bne.n	80065a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01a      	beq.n	80065bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3310      	adds	r3, #16
 800658a:	4618      	mov	r0, r3
 800658c:	f001 f91a 	bl	80077c4 <xTaskRemoveFromEventList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d012      	beq.n	80065bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006596:	4b0d      	ldr	r3, [pc, #52]	@ (80065cc <xQueueGenericReset+0xd0>)
 8006598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	e009      	b.n	80065bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3310      	adds	r3, #16
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff fef1 	bl	8006394 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3324      	adds	r3, #36	@ 0x24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff feec 	bl	8006394 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065bc:	f002 f896 	bl	80086ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065c0:	2301      	movs	r3, #1
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08e      	sub	sp, #56	@ 0x38
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065f6:	bf00      	nop
 80065f8:	bf00      	nop
 80065fa:	e7fd      	b.n	80065f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <xQueueGenericCreateStatic+0x56>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <xQueueGenericCreateStatic+0x5a>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <xQueueGenericCreateStatic+0x5c>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	623b      	str	r3, [r7, #32]
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	e7fd      	b.n	8006644 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <xQueueGenericCreateStatic+0x84>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <xQueueGenericCreateStatic+0x88>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <xQueueGenericCreateStatic+0x8a>
 8006658:	2300      	movs	r3, #0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	61fb      	str	r3, [r7, #28]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006676:	2350      	movs	r3, #80	@ 0x50
 8006678:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b50      	cmp	r3, #80	@ 0x50
 800667e:	d00b      	beq.n	8006698 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	61bb      	str	r3, [r7, #24]
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006698:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800669e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80066b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f805 	bl	80066ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3730      	adds	r7, #48	@ 0x30
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
 80066d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e002      	b.n	80066ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066f8:	2101      	movs	r1, #1
 80066fa:	69b8      	ldr	r0, [r7, #24]
 80066fc:	f7ff fefe 	bl	80064fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08e      	sub	sp, #56	@ 0x38
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800671e:	2300      	movs	r3, #0
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10b      	bne.n	8006744 <xQueueGenericSend+0x34>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	e7fd      	b.n	8006740 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <xQueueGenericSend+0x42>
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <xQueueGenericSend+0x46>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <xQueueGenericSend+0x48>
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10b      	bne.n	8006774 <xQueueGenericSend+0x64>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	e7fd      	b.n	8006770 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d103      	bne.n	8006782 <xQueueGenericSend+0x72>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <xQueueGenericSend+0x76>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <xQueueGenericSend+0x78>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <xQueueGenericSend+0x94>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	623b      	str	r3, [r7, #32]
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067a4:	f001 fa06 	bl	8007bb4 <xTaskGetSchedulerState>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <xQueueGenericSend+0xa4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <xQueueGenericSend+0xa8>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <xQueueGenericSend+0xaa>
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	61fb      	str	r3, [r7, #28]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067d6:	f001 ff57 	bl	8008688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d302      	bcc.n	80067ec <xQueueGenericSend+0xdc>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d129      	bne.n	8006840 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067f2:	f000 fa0f 	bl	8006c14 <prvCopyDataToQueue>
 80067f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d010      	beq.n	8006822 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	3324      	adds	r3, #36	@ 0x24
 8006804:	4618      	mov	r0, r3
 8006806:	f000 ffdd 	bl	80077c4 <xTaskRemoveFromEventList>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d013      	beq.n	8006838 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006810:	4b3f      	ldr	r3, [pc, #252]	@ (8006910 <xQueueGenericSend+0x200>)
 8006812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	e00a      	b.n	8006838 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006828:	4b39      	ldr	r3, [pc, #228]	@ (8006910 <xQueueGenericSend+0x200>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006838:	f001 ff58 	bl	80086ec <vPortExitCritical>
				return pdPASS;
 800683c:	2301      	movs	r3, #1
 800683e:	e063      	b.n	8006908 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d103      	bne.n	800684e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006846:	f001 ff51 	bl	80086ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800684a:	2300      	movs	r3, #0
 800684c:	e05c      	b.n	8006908 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800684e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006854:	f107 0314 	add.w	r3, r7, #20
 8006858:	4618      	mov	r0, r3
 800685a:	f001 f817 	bl	800788c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800685e:	2301      	movs	r3, #1
 8006860:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006862:	f001 ff43 	bl	80086ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006866:	f000 fd87 	bl	8007378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800686a:	f001 ff0d 	bl	8008688 <vPortEnterCritical>
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006874:	b25b      	sxtb	r3, r3
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d103      	bne.n	8006884 <xQueueGenericSend+0x174>
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800688a:	b25b      	sxtb	r3, r3
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d103      	bne.n	800689a <xQueueGenericSend+0x18a>
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800689a:	f001 ff27 	bl	80086ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800689e:	1d3a      	adds	r2, r7, #4
 80068a0:	f107 0314 	add.w	r3, r7, #20
 80068a4:	4611      	mov	r1, r2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f001 f806 	bl	80078b8 <xTaskCheckForTimeOut>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d124      	bne.n	80068fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068b4:	f000 faa6 	bl	8006e04 <prvIsQueueFull>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d018      	beq.n	80068f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	3310      	adds	r3, #16
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	4611      	mov	r1, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 ff2a 	bl	8007720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068ce:	f000 fa31 	bl	8006d34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068d2:	f000 fd5f 	bl	8007394 <xTaskResumeAll>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f47f af7c 	bne.w	80067d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80068de:	4b0c      	ldr	r3, [pc, #48]	@ (8006910 <xQueueGenericSend+0x200>)
 80068e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	e772      	b.n	80067d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068f2:	f000 fa1f 	bl	8006d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068f6:	f000 fd4d 	bl	8007394 <xTaskResumeAll>
 80068fa:	e76c      	b.n	80067d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068fe:	f000 fa19 	bl	8006d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006902:	f000 fd47 	bl	8007394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006908:	4618      	mov	r0, r3
 800690a:	3738      	adds	r7, #56	@ 0x38
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b090      	sub	sp, #64	@ 0x40
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <xQueueGenericSendFromISR+0x3e>
 800694a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <xQueueGenericSendFromISR+0x42>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <xQueueGenericSendFromISR+0x44>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	e7fd      	b.n	8006970 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d103      	bne.n	8006982 <xQueueGenericSendFromISR+0x6e>
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <xQueueGenericSendFromISR+0x72>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <xQueueGenericSendFromISR+0x74>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10b      	bne.n	80069a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	623b      	str	r3, [r7, #32]
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069a4:	f001 ff50 	bl	8008848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069a8:	f3ef 8211 	mrs	r2, BASEPRI
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61fa      	str	r2, [r7, #28]
 80069be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <xQueueGenericSendFromISR+0xc2>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d12f      	bne.n	8006a36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80069ec:	f000 f912 	bl	8006c14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d112      	bne.n	8006a20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d016      	beq.n	8006a30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	3324      	adds	r3, #36	@ 0x24
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fedc 	bl	80077c4 <xTaskRemoveFromEventList>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00e      	beq.n	8006a30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e007      	b.n	8006a30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a24:	3301      	adds	r3, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	b25a      	sxtb	r2, r3
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a30:	2301      	movs	r3, #1
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006a34:	e001      	b.n	8006a3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3740      	adds	r7, #64	@ 0x40
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08c      	sub	sp, #48	@ 0x30
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10b      	bne.n	8006a82 <xQueueReceive+0x32>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	623b      	str	r3, [r7, #32]
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d103      	bne.n	8006a90 <xQueueReceive+0x40>
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <xQueueReceive+0x44>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <xQueueReceive+0x46>
 8006a94:	2300      	movs	r3, #0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10b      	bne.n	8006ab2 <xQueueReceive+0x62>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	61fb      	str	r3, [r7, #28]
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	e7fd      	b.n	8006aae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ab2:	f001 f87f 	bl	8007bb4 <xTaskGetSchedulerState>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <xQueueReceive+0x72>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <xQueueReceive+0x76>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <xQueueReceive+0x78>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xQueueReceive+0x94>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	61bb      	str	r3, [r7, #24]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ae4:	f001 fdd0 	bl	8008688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01f      	beq.n	8006b34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af8:	f000 f8f6 	bl	8006ce8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	1e5a      	subs	r2, r3, #1
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00f      	beq.n	8006b2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0e:	3310      	adds	r3, #16
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fe57 	bl	80077c4 <xTaskRemoveFromEventList>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d007      	beq.n	8006b2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006c10 <xQueueReceive+0x1c0>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b2c:	f001 fdde 	bl	80086ec <vPortExitCritical>
				return pdPASS;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e069      	b.n	8006c08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b3a:	f001 fdd7 	bl	80086ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e062      	b.n	8006c08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b48:	f107 0310 	add.w	r3, r7, #16
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fe9d 	bl	800788c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b56:	f001 fdc9 	bl	80086ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b5a:	f000 fc0d 	bl	8007378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b5e:	f001 fd93 	bl	8008688 <vPortEnterCritical>
 8006b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d103      	bne.n	8006b78 <xQueueReceive+0x128>
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b7e:	b25b      	sxtb	r3, r3
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b84:	d103      	bne.n	8006b8e <xQueueReceive+0x13e>
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b8e:	f001 fdad 	bl	80086ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b92:	1d3a      	adds	r2, r7, #4
 8006b94:	f107 0310 	add.w	r3, r7, #16
 8006b98:	4611      	mov	r1, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fe8c 	bl	80078b8 <xTaskCheckForTimeOut>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d123      	bne.n	8006bee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ba8:	f000 f916 	bl	8006dd8 <prvIsQueueEmpty>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d017      	beq.n	8006be2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb4:	3324      	adds	r3, #36	@ 0x24
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fdb0 	bl	8007720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bc2:	f000 f8b7 	bl	8006d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bc6:	f000 fbe5 	bl	8007394 <xTaskResumeAll>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d189      	bne.n	8006ae4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c10 <xQueueReceive+0x1c0>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	e780      	b.n	8006ae4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006be4:	f000 f8a6 	bl	8006d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006be8:	f000 fbd4 	bl	8007394 <xTaskResumeAll>
 8006bec:	e77a      	b.n	8006ae4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bf0:	f000 f8a0 	bl	8006d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bf4:	f000 fbce 	bl	8007394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bfa:	f000 f8ed 	bl	8006dd8 <prvIsQueueEmpty>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f43f af6f 	beq.w	8006ae4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3730      	adds	r7, #48	@ 0x30
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10d      	bne.n	8006c4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d14d      	bne.n	8006cd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 ffd6 	bl	8007bf0 <xTaskPriorityDisinherit>
 8006c44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	e043      	b.n	8006cd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d119      	bne.n	8006c88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6858      	ldr	r0, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	f003 f943 	bl	8009eea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d32b      	bcc.n	8006cd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	e026      	b.n	8006cd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68d8      	ldr	r0, [r3, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c90:	461a      	mov	r2, r3
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	f003 f929 	bl	8009eea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca0:	425b      	negs	r3, r3
 8006ca2:	441a      	add	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d207      	bcs.n	8006cc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbc:	425b      	negs	r3, r3
 8006cbe:	441a      	add	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d105      	bne.n	8006cd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006cde:	697b      	ldr	r3, [r7, #20]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d018      	beq.n	8006d2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	441a      	add	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d303      	bcc.n	8006d1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68d9      	ldr	r1, [r3, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d24:	461a      	mov	r2, r3
 8006d26:	6838      	ldr	r0, [r7, #0]
 8006d28:	f003 f8df 	bl	8009eea <memcpy>
	}
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d3c:	f001 fca4 	bl	8008688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d48:	e011      	b.n	8006d6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d012      	beq.n	8006d78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3324      	adds	r3, #36	@ 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fd34 	bl	80077c4 <xTaskRemoveFromEventList>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d62:	f000 fe0d 	bl	8007980 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dce9      	bgt.n	8006d4a <prvUnlockQueue+0x16>
 8006d76:	e000      	b.n	8006d7a <prvUnlockQueue+0x46>
					break;
 8006d78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	22ff      	movs	r2, #255	@ 0xff
 8006d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006d82:	f001 fcb3 	bl	80086ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d86:	f001 fc7f 	bl	8008688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d92:	e011      	b.n	8006db8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d012      	beq.n	8006dc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3310      	adds	r3, #16
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fd0f 	bl	80077c4 <xTaskRemoveFromEventList>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dac:	f000 fde8 	bl	8007980 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dce9      	bgt.n	8006d94 <prvUnlockQueue+0x60>
 8006dc0:	e000      	b.n	8006dc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006dc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	22ff      	movs	r2, #255	@ 0xff
 8006dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006dcc:	f001 fc8e 	bl	80086ec <vPortExitCritical>
}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006de0:	f001 fc52 	bl	8008688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e001      	b.n	8006df6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006df6:	f001 fc79 	bl	80086ec <vPortExitCritical>

	return xReturn;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e0c:	f001 fc3c 	bl	8008688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d102      	bne.n	8006e22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e001      	b.n	8006e26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e26:	f001 fc61 	bl	80086ec <vPortExitCritical>

	return xReturn;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e014      	b.n	8006e6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e44:	4a0f      	ldr	r2, [pc, #60]	@ (8006e84 <vQueueAddToRegistry+0x50>)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10b      	bne.n	8006e68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e50:	490c      	ldr	r1, [pc, #48]	@ (8006e84 <vQueueAddToRegistry+0x50>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e84 <vQueueAddToRegistry+0x50>)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e66:	e006      	b.n	8006e76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b07      	cmp	r3, #7
 8006e72:	d9e7      	bls.n	8006e44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	24000a8c 	.word	0x24000a8c

08006e88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e98:	f001 fbf6 	bl	8008688 <vPortEnterCritical>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ea2:	b25b      	sxtb	r3, r3
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d103      	bne.n	8006eb2 <vQueueWaitForMessageRestricted+0x2a>
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eb8:	b25b      	sxtb	r3, r3
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d103      	bne.n	8006ec8 <vQueueWaitForMessageRestricted+0x40>
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ec8:	f001 fc10 	bl	80086ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3324      	adds	r3, #36	@ 0x24
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fc45 	bl	800776c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ee2:	6978      	ldr	r0, [r7, #20]
 8006ee4:	f7ff ff26 	bl	8006d34 <prvUnlockQueue>
	}
 8006ee8:	bf00      	nop
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	@ 0x38
 8006ef4:	af04      	add	r7, sp, #16
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	623b      	str	r3, [r7, #32]
}
 8006f16:	bf00      	nop
 8006f18:	bf00      	nop
 8006f1a:	e7fd      	b.n	8006f18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	61fb      	str	r3, [r7, #28]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f3a:	235c      	movs	r3, #92	@ 0x5c
 8006f3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f42:	d00b      	beq.n	8006f5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	61bb      	str	r3, [r7, #24]
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01e      	beq.n	8006fa2 <xTaskCreateStatic+0xb2>
 8006f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d01b      	beq.n	8006fa2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9303      	str	r3, [sp, #12]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f850 	bl	800703a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f9c:	f000 f8de 	bl	800715c <prvAddNewTaskToReadyList>
 8006fa0:	e001      	b.n	8006fa6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fa6:	697b      	ldr	r3, [r7, #20]
	}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3728      	adds	r7, #40	@ 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08c      	sub	sp, #48	@ 0x30
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fc81 	bl	80088cc <pvPortMalloc>
 8006fca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fd2:	205c      	movs	r0, #92	@ 0x5c
 8006fd4:	f001 fc7a 	bl	80088cc <pvPortMalloc>
 8006fd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fe6:	e005      	b.n	8006ff4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fe8:	6978      	ldr	r0, [r7, #20]
 8006fea:	f001 fd3d 	bl	8008a68 <vPortFree>
 8006fee:	e001      	b.n	8006ff4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d017      	beq.n	800702a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	2300      	movs	r3, #0
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	9302      	str	r3, [sp, #8]
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f80e 	bl	800703a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800701e:	69f8      	ldr	r0, [r7, #28]
 8007020:	f000 f89c 	bl	800715c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007024:	2301      	movs	r3, #1
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	e002      	b.n	8007030 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800702a:	f04f 33ff 	mov.w	r3, #4294967295
 800702e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007030:	69bb      	ldr	r3, [r7, #24]
	}
 8007032:	4618      	mov	r0, r3
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b088      	sub	sp, #32
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	461a      	mov	r2, r3
 8007052:	21a5      	movs	r1, #165	@ 0xa5
 8007054:	f002 fec9 	bl	8009dea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007062:	440b      	add	r3, r1
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	617b      	str	r3, [r7, #20]
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01f      	beq.n	80070da <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	e012      	b.n	80070c6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	7819      	ldrb	r1, [r3, #0]
 80070a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	3334      	adds	r3, #52	@ 0x34
 80070b0:	460a      	mov	r2, r1
 80070b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	2b0f      	cmp	r3, #15
 80070ca:	d9e9      	bls.n	80070a0 <prvInitialiseNewTask+0x66>
 80070cc:	e000      	b.n	80070d0 <prvInitialiseNewTask+0x96>
			{
				break;
 80070ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070d8:	e003      	b.n	80070e2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	2b37      	cmp	r3, #55	@ 0x37
 80070e6:	d901      	bls.n	80070ec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070e8:	2337      	movs	r3, #55	@ 0x37
 80070ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80070f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fa:	2200      	movs	r2, #0
 80070fc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff f966 	bl	80063d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	3318      	adds	r3, #24
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff f961 	bl	80063d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007126:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	2200      	movs	r2, #0
 800712c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	69b8      	ldr	r0, [r7, #24]
 800713c:	f001 f976 	bl	800842c <pxPortInitialiseStack>
 8007140:	4602      	mov	r2, r0
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007152:	bf00      	nop
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007164:	f001 fa90 	bl	8008688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007168:	4b2d      	ldr	r3, [pc, #180]	@ (8007220 <prvAddNewTaskToReadyList+0xc4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a2c      	ldr	r2, [pc, #176]	@ (8007220 <prvAddNewTaskToReadyList+0xc4>)
 8007170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007172:	4b2c      	ldr	r3, [pc, #176]	@ (8007224 <prvAddNewTaskToReadyList+0xc8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800717a:	4a2a      	ldr	r2, [pc, #168]	@ (8007224 <prvAddNewTaskToReadyList+0xc8>)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007180:	4b27      	ldr	r3, [pc, #156]	@ (8007220 <prvAddNewTaskToReadyList+0xc4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d110      	bne.n	80071aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007188:	f000 fc1e 	bl	80079c8 <prvInitialiseTaskLists>
 800718c:	e00d      	b.n	80071aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800718e:	4b26      	ldr	r3, [pc, #152]	@ (8007228 <prvAddNewTaskToReadyList+0xcc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007196:	4b23      	ldr	r3, [pc, #140]	@ (8007224 <prvAddNewTaskToReadyList+0xc8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d802      	bhi.n	80071aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007224 <prvAddNewTaskToReadyList+0xc8>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071aa:	4b20      	ldr	r3, [pc, #128]	@ (800722c <prvAddNewTaskToReadyList+0xd0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3301      	adds	r3, #1
 80071b0:	4a1e      	ldr	r2, [pc, #120]	@ (800722c <prvAddNewTaskToReadyList+0xd0>)
 80071b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071b4:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <prvAddNewTaskToReadyList+0xd0>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007230 <prvAddNewTaskToReadyList+0xd4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d903      	bls.n	80071d0 <prvAddNewTaskToReadyList+0x74>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	4a18      	ldr	r2, [pc, #96]	@ (8007230 <prvAddNewTaskToReadyList+0xd4>)
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4a15      	ldr	r2, [pc, #84]	@ (8007234 <prvAddNewTaskToReadyList+0xd8>)
 80071de:	441a      	add	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f7ff f901 	bl	80063ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071ec:	f001 fa7e 	bl	80086ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <prvAddNewTaskToReadyList+0xcc>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00e      	beq.n	8007216 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <prvAddNewTaskToReadyList+0xc8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	429a      	cmp	r2, r3
 8007204:	d207      	bcs.n	8007216 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007206:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <prvAddNewTaskToReadyList+0xdc>)
 8007208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007216:	bf00      	nop
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	24000fa0 	.word	0x24000fa0
 8007224:	24000acc 	.word	0x24000acc
 8007228:	24000fac 	.word	0x24000fac
 800722c:	24000fbc 	.word	0x24000fbc
 8007230:	24000fa8 	.word	0x24000fa8
 8007234:	24000ad0 	.word	0x24000ad0
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d018      	beq.n	8007280 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800724e:	4b14      	ldr	r3, [pc, #80]	@ (80072a0 <vTaskDelay+0x64>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <vTaskDelay+0x32>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800726e:	f000 f883 	bl	8007378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007272:	2100      	movs	r1, #0
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fd2b 	bl	8007cd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800727a:	f000 f88b 	bl	8007394 <xTaskResumeAll>
 800727e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d107      	bne.n	8007296 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007286:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <vTaskDelay+0x68>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	24000fc8 	.word	0x24000fc8
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	@ 0x28
 80072ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072b6:	463a      	mov	r2, r7
 80072b8:	1d39      	adds	r1, r7, #4
 80072ba:	f107 0308 	add.w	r3, r7, #8
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff f834 	bl	800632c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	9202      	str	r2, [sp, #8]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	460a      	mov	r2, r1
 80072d6:	4922      	ldr	r1, [pc, #136]	@ (8007360 <vTaskStartScheduler+0xb8>)
 80072d8:	4822      	ldr	r0, [pc, #136]	@ (8007364 <vTaskStartScheduler+0xbc>)
 80072da:	f7ff fe09 	bl	8006ef0 <xTaskCreateStatic>
 80072de:	4603      	mov	r3, r0
 80072e0:	4a21      	ldr	r2, [pc, #132]	@ (8007368 <vTaskStartScheduler+0xc0>)
 80072e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072e4:	4b20      	ldr	r3, [pc, #128]	@ (8007368 <vTaskStartScheduler+0xc0>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072ec:	2301      	movs	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e001      	b.n	80072f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d102      	bne.n	8007302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072fc:	f000 fd3c 	bl	8007d78 <xTimerCreateTimerTask>
 8007300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d116      	bne.n	8007336 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	613b      	str	r3, [r7, #16]
}
 800731a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800731c:	4b13      	ldr	r3, [pc, #76]	@ (800736c <vTaskStartScheduler+0xc4>)
 800731e:	f04f 32ff 	mov.w	r2, #4294967295
 8007322:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007324:	4b12      	ldr	r3, [pc, #72]	@ (8007370 <vTaskStartScheduler+0xc8>)
 8007326:	2201      	movs	r2, #1
 8007328:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800732a:	4b12      	ldr	r3, [pc, #72]	@ (8007374 <vTaskStartScheduler+0xcc>)
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007330:	f001 f906 	bl	8008540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007334:	e00f      	b.n	8007356 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d10b      	bne.n	8007356 <vTaskStartScheduler+0xae>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60fb      	str	r3, [r7, #12]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <vTaskStartScheduler+0xaa>
}
 8007356:	bf00      	nop
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	0800bf20 	.word	0x0800bf20
 8007364:	08007999 	.word	0x08007999
 8007368:	24000fc4 	.word	0x24000fc4
 800736c:	24000fc0 	.word	0x24000fc0
 8007370:	24000fac 	.word	0x24000fac
 8007374:	24000fa4 	.word	0x24000fa4

08007378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <vTaskSuspendAll+0x18>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	4a03      	ldr	r2, [pc, #12]	@ (8007390 <vTaskSuspendAll+0x18>)
 8007384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007386:	bf00      	nop
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	24000fc8 	.word	0x24000fc8

08007394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073a2:	4b42      	ldr	r3, [pc, #264]	@ (80074ac <xTaskResumeAll+0x118>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10b      	bne.n	80073c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	603b      	str	r3, [r7, #0]
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	e7fd      	b.n	80073be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073c2:	f001 f961 	bl	8008688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073c6:	4b39      	ldr	r3, [pc, #228]	@ (80074ac <xTaskResumeAll+0x118>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	4a37      	ldr	r2, [pc, #220]	@ (80074ac <xTaskResumeAll+0x118>)
 80073ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d0:	4b36      	ldr	r3, [pc, #216]	@ (80074ac <xTaskResumeAll+0x118>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d162      	bne.n	800749e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073d8:	4b35      	ldr	r3, [pc, #212]	@ (80074b0 <xTaskResumeAll+0x11c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d05e      	beq.n	800749e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073e0:	e02f      	b.n	8007442 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e2:	4b34      	ldr	r3, [pc, #208]	@ (80074b4 <xTaskResumeAll+0x120>)
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3318      	adds	r3, #24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff f85a 	bl	80064a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff f855 	bl	80064a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	4b2d      	ldr	r3, [pc, #180]	@ (80074b8 <xTaskResumeAll+0x124>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <xTaskResumeAll+0x7e>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	4a2a      	ldr	r2, [pc, #168]	@ (80074b8 <xTaskResumeAll+0x124>)
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4a27      	ldr	r2, [pc, #156]	@ (80074bc <xTaskResumeAll+0x128>)
 8007420:	441a      	add	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fe ffe0 	bl	80063ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007432:	4b23      	ldr	r3, [pc, #140]	@ (80074c0 <xTaskResumeAll+0x12c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800743c:	4b21      	ldr	r3, [pc, #132]	@ (80074c4 <xTaskResumeAll+0x130>)
 800743e:	2201      	movs	r2, #1
 8007440:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007442:	4b1c      	ldr	r3, [pc, #112]	@ (80074b4 <xTaskResumeAll+0x120>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1cb      	bne.n	80073e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007450:	f000 fb90 	bl	8007b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007454:	4b1c      	ldr	r3, [pc, #112]	@ (80074c8 <xTaskResumeAll+0x134>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d010      	beq.n	8007482 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007460:	f000 f846 	bl	80074f0 <xTaskIncrementTick>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800746a:	4b16      	ldr	r3, [pc, #88]	@ (80074c4 <xTaskResumeAll+0x130>)
 800746c:	2201      	movs	r2, #1
 800746e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3b01      	subs	r3, #1
 8007474:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f1      	bne.n	8007460 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800747c:	4b12      	ldr	r3, [pc, #72]	@ (80074c8 <xTaskResumeAll+0x134>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007482:	4b10      	ldr	r3, [pc, #64]	@ (80074c4 <xTaskResumeAll+0x130>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800748a:	2301      	movs	r3, #1
 800748c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800748e:	4b0f      	ldr	r3, [pc, #60]	@ (80074cc <xTaskResumeAll+0x138>)
 8007490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800749e:	f001 f925 	bl	80086ec <vPortExitCritical>

	return xAlreadyYielded;
 80074a2:	68bb      	ldr	r3, [r7, #8]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	24000fc8 	.word	0x24000fc8
 80074b0:	24000fa0 	.word	0x24000fa0
 80074b4:	24000f60 	.word	0x24000f60
 80074b8:	24000fa8 	.word	0x24000fa8
 80074bc:	24000ad0 	.word	0x24000ad0
 80074c0:	24000acc 	.word	0x24000acc
 80074c4:	24000fb4 	.word	0x24000fb4
 80074c8:	24000fb0 	.word	0x24000fb0
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074d6:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <xTaskGetTickCount+0x1c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074dc:	687b      	ldr	r3, [r7, #4]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	24000fa4 	.word	0x24000fa4

080074f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007638 <xTaskIncrementTick+0x148>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 8090 	bne.w	8007624 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007504:	4b4d      	ldr	r3, [pc, #308]	@ (800763c <xTaskIncrementTick+0x14c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800750c:	4a4b      	ldr	r2, [pc, #300]	@ (800763c <xTaskIncrementTick+0x14c>)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d121      	bne.n	800755c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007518:	4b49      	ldr	r3, [pc, #292]	@ (8007640 <xTaskIncrementTick+0x150>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	603b      	str	r3, [r7, #0]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xTaskIncrementTick+0x46>
 800753a:	4b41      	ldr	r3, [pc, #260]	@ (8007640 <xTaskIncrementTick+0x150>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	4b40      	ldr	r3, [pc, #256]	@ (8007644 <xTaskIncrementTick+0x154>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a3e      	ldr	r2, [pc, #248]	@ (8007640 <xTaskIncrementTick+0x150>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	4a3e      	ldr	r2, [pc, #248]	@ (8007644 <xTaskIncrementTick+0x154>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	4b3e      	ldr	r3, [pc, #248]	@ (8007648 <xTaskIncrementTick+0x158>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	4a3c      	ldr	r2, [pc, #240]	@ (8007648 <xTaskIncrementTick+0x158>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	f000 fb0c 	bl	8007b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800755c:	4b3b      	ldr	r3, [pc, #236]	@ (800764c <xTaskIncrementTick+0x15c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	429a      	cmp	r2, r3
 8007564:	d349      	bcc.n	80075fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007566:	4b36      	ldr	r3, [pc, #216]	@ (8007640 <xTaskIncrementTick+0x150>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007570:	4b36      	ldr	r3, [pc, #216]	@ (800764c <xTaskIncrementTick+0x15c>)
 8007572:	f04f 32ff 	mov.w	r2, #4294967295
 8007576:	601a      	str	r2, [r3, #0]
					break;
 8007578:	e03f      	b.n	80075fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757a:	4b31      	ldr	r3, [pc, #196]	@ (8007640 <xTaskIncrementTick+0x150>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	429a      	cmp	r2, r3
 8007590:	d203      	bcs.n	800759a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007592:	4a2e      	ldr	r2, [pc, #184]	@ (800764c <xTaskIncrementTick+0x15c>)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007598:	e02f      	b.n	80075fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	3304      	adds	r3, #4
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe ff82 	bl	80064a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	3318      	adds	r3, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe ff79 	bl	80064a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ba:	4b25      	ldr	r3, [pc, #148]	@ (8007650 <xTaskIncrementTick+0x160>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d903      	bls.n	80075ca <xTaskIncrementTick+0xda>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	4a22      	ldr	r2, [pc, #136]	@ (8007650 <xTaskIncrementTick+0x160>)
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007654 <xTaskIncrementTick+0x164>)
 80075d8:	441a      	add	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3304      	adds	r3, #4
 80075de:	4619      	mov	r1, r3
 80075e0:	4610      	mov	r0, r2
 80075e2:	f7fe ff04 	bl	80063ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007658 <xTaskIncrementTick+0x168>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d3b8      	bcc.n	8007566 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075f4:	2301      	movs	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f8:	e7b5      	b.n	8007566 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075fa:	4b17      	ldr	r3, [pc, #92]	@ (8007658 <xTaskIncrementTick+0x168>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007600:	4914      	ldr	r1, [pc, #80]	@ (8007654 <xTaskIncrementTick+0x164>)
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d901      	bls.n	8007616 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007612:	2301      	movs	r3, #1
 8007614:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007616:	4b11      	ldr	r3, [pc, #68]	@ (800765c <xTaskIncrementTick+0x16c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800761e:	2301      	movs	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	e004      	b.n	800762e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007624:	4b0e      	ldr	r3, [pc, #56]	@ (8007660 <xTaskIncrementTick+0x170>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	4a0d      	ldr	r2, [pc, #52]	@ (8007660 <xTaskIncrementTick+0x170>)
 800762c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800762e:	697b      	ldr	r3, [r7, #20]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	24000fc8 	.word	0x24000fc8
 800763c:	24000fa4 	.word	0x24000fa4
 8007640:	24000f58 	.word	0x24000f58
 8007644:	24000f5c 	.word	0x24000f5c
 8007648:	24000fb8 	.word	0x24000fb8
 800764c:	24000fc0 	.word	0x24000fc0
 8007650:	24000fa8 	.word	0x24000fa8
 8007654:	24000ad0 	.word	0x24000ad0
 8007658:	24000acc 	.word	0x24000acc
 800765c:	24000fb4 	.word	0x24000fb4
 8007660:	24000fb0 	.word	0x24000fb0

08007664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800766a:	4b28      	ldr	r3, [pc, #160]	@ (800770c <vTaskSwitchContext+0xa8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007672:	4b27      	ldr	r3, [pc, #156]	@ (8007710 <vTaskSwitchContext+0xac>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007678:	e042      	b.n	8007700 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800767a:	4b25      	ldr	r3, [pc, #148]	@ (8007710 <vTaskSwitchContext+0xac>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007680:	4b24      	ldr	r3, [pc, #144]	@ (8007714 <vTaskSwitchContext+0xb0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e011      	b.n	80076ac <vTaskSwitchContext+0x48>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <vTaskSwitchContext+0x3e>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	491a      	ldr	r1, [pc, #104]	@ (8007718 <vTaskSwitchContext+0xb4>)
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0e3      	beq.n	8007688 <vTaskSwitchContext+0x24>
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4a13      	ldr	r2, [pc, #76]	@ (8007718 <vTaskSwitchContext+0xb4>)
 80076cc:	4413      	add	r3, r2
 80076ce:	60bb      	str	r3, [r7, #8]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3308      	adds	r3, #8
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d104      	bne.n	80076f0 <vTaskSwitchContext+0x8c>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	605a      	str	r2, [r3, #4]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	4a09      	ldr	r2, [pc, #36]	@ (800771c <vTaskSwitchContext+0xb8>)
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4a06      	ldr	r2, [pc, #24]	@ (8007714 <vTaskSwitchContext+0xb0>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6013      	str	r3, [r2, #0]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	24000fc8 	.word	0x24000fc8
 8007710:	24000fb4 	.word	0x24000fb4
 8007714:	24000fa8 	.word	0x24000fa8
 8007718:	24000ad0 	.word	0x24000ad0
 800771c:	24000acc 	.word	0x24000acc

08007720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10b      	bne.n	8007748 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	e7fd      	b.n	8007744 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007748:	4b07      	ldr	r3, [pc, #28]	@ (8007768 <vTaskPlaceOnEventList+0x48>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3318      	adds	r3, #24
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fe fe70 	bl	8006436 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007756:	2101      	movs	r1, #1
 8007758:	6838      	ldr	r0, [r7, #0]
 800775a:	f000 fab9 	bl	8007cd0 <prvAddCurrentTaskToDelayedList>
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	24000acc 	.word	0x24000acc

0800776c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10b      	bne.n	8007796 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	617b      	str	r3, [r7, #20]
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	e7fd      	b.n	8007792 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007796:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3318      	adds	r3, #24
 800779c:	4619      	mov	r1, r3
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7fe fe25 	bl	80063ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077aa:	f04f 33ff 	mov.w	r3, #4294967295
 80077ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	68b8      	ldr	r0, [r7, #8]
 80077b4:	f000 fa8c 	bl	8007cd0 <prvAddCurrentTaskToDelayedList>
	}
 80077b8:	bf00      	nop
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	24000acc 	.word	0x24000acc

080077c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	60fb      	str	r3, [r7, #12]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	3318      	adds	r3, #24
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fe56 	bl	80064a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007874 <xTaskRemoveFromEventList+0xb0>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11d      	bne.n	8007840 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	3304      	adds	r3, #4
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fe4d 	bl	80064a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007812:	4b19      	ldr	r3, [pc, #100]	@ (8007878 <xTaskRemoveFromEventList+0xb4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d903      	bls.n	8007822 <xTaskRemoveFromEventList+0x5e>
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	4a16      	ldr	r2, [pc, #88]	@ (8007878 <xTaskRemoveFromEventList+0xb4>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4a13      	ldr	r2, [pc, #76]	@ (800787c <xTaskRemoveFromEventList+0xb8>)
 8007830:	441a      	add	r2, r3
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3304      	adds	r3, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7fe fdd8 	bl	80063ee <vListInsertEnd>
 800783e:	e005      	b.n	800784c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3318      	adds	r3, #24
 8007844:	4619      	mov	r1, r3
 8007846:	480e      	ldr	r0, [pc, #56]	@ (8007880 <xTaskRemoveFromEventList+0xbc>)
 8007848:	f7fe fdd1 	bl	80063ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007850:	4b0c      	ldr	r3, [pc, #48]	@ (8007884 <xTaskRemoveFromEventList+0xc0>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	429a      	cmp	r2, r3
 8007858:	d905      	bls.n	8007866 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800785a:	2301      	movs	r3, #1
 800785c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800785e:	4b0a      	ldr	r3, [pc, #40]	@ (8007888 <xTaskRemoveFromEventList+0xc4>)
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e001      	b.n	800786a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800786a:	697b      	ldr	r3, [r7, #20]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	24000fc8 	.word	0x24000fc8
 8007878:	24000fa8 	.word	0x24000fa8
 800787c:	24000ad0 	.word	0x24000ad0
 8007880:	24000f60 	.word	0x24000f60
 8007884:	24000acc 	.word	0x24000acc
 8007888:	24000fb4 	.word	0x24000fb4

0800788c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007894:	4b06      	ldr	r3, [pc, #24]	@ (80078b0 <vTaskInternalSetTimeOutState+0x24>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800789c:	4b05      	ldr	r3, [pc, #20]	@ (80078b4 <vTaskInternalSetTimeOutState+0x28>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	605a      	str	r2, [r3, #4]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	24000fb8 	.word	0x24000fb8
 80078b4:	24000fa4 	.word	0x24000fa4

080078b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10b      	bne.n	80078e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	613b      	str	r3, [r7, #16]
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	e7fd      	b.n	80078dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80078fe:	f000 fec3 	bl	8008688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007902:	4b1d      	ldr	r3, [pc, #116]	@ (8007978 <xTaskCheckForTimeOut+0xc0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d102      	bne.n	8007922 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800791c:	2300      	movs	r3, #0
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	e023      	b.n	800796a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4b15      	ldr	r3, [pc, #84]	@ (800797c <xTaskCheckForTimeOut+0xc4>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d007      	beq.n	800793e <xTaskCheckForTimeOut+0x86>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007938:	2301      	movs	r3, #1
 800793a:	61fb      	str	r3, [r7, #28]
 800793c:	e015      	b.n	800796a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	429a      	cmp	r2, r3
 8007946:	d20b      	bcs.n	8007960 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ff99 	bl	800788c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	61fb      	str	r3, [r7, #28]
 800795e:	e004      	b.n	800796a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007966:	2301      	movs	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800796a:	f000 febf 	bl	80086ec <vPortExitCritical>

	return xReturn;
 800796e:	69fb      	ldr	r3, [r7, #28]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	24000fa4 	.word	0x24000fa4
 800797c:	24000fb8 	.word	0x24000fb8

08007980 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007984:	4b03      	ldr	r3, [pc, #12]	@ (8007994 <vTaskMissedYield+0x14>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
}
 800798a:	bf00      	nop
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	24000fb4 	.word	0x24000fb4

08007998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079a0:	f000 f852 	bl	8007a48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079a4:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <prvIdleTask+0x28>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d9f9      	bls.n	80079a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079ac:	4b05      	ldr	r3, [pc, #20]	@ (80079c4 <prvIdleTask+0x2c>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079bc:	e7f0      	b.n	80079a0 <prvIdleTask+0x8>
 80079be:	bf00      	nop
 80079c0:	24000ad0 	.word	0x24000ad0
 80079c4:	e000ed04 	.word	0xe000ed04

080079c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079ce:	2300      	movs	r3, #0
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	e00c      	b.n	80079ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4a12      	ldr	r2, [pc, #72]	@ (8007a28 <prvInitialiseTaskLists+0x60>)
 80079e0:	4413      	add	r3, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fcd6 	bl	8006394 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3301      	adds	r3, #1
 80079ec:	607b      	str	r3, [r7, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b37      	cmp	r3, #55	@ 0x37
 80079f2:	d9ef      	bls.n	80079d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079f4:	480d      	ldr	r0, [pc, #52]	@ (8007a2c <prvInitialiseTaskLists+0x64>)
 80079f6:	f7fe fccd 	bl	8006394 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079fa:	480d      	ldr	r0, [pc, #52]	@ (8007a30 <prvInitialiseTaskLists+0x68>)
 80079fc:	f7fe fcca 	bl	8006394 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a00:	480c      	ldr	r0, [pc, #48]	@ (8007a34 <prvInitialiseTaskLists+0x6c>)
 8007a02:	f7fe fcc7 	bl	8006394 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a06:	480c      	ldr	r0, [pc, #48]	@ (8007a38 <prvInitialiseTaskLists+0x70>)
 8007a08:	f7fe fcc4 	bl	8006394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a0c:	480b      	ldr	r0, [pc, #44]	@ (8007a3c <prvInitialiseTaskLists+0x74>)
 8007a0e:	f7fe fcc1 	bl	8006394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a12:	4b0b      	ldr	r3, [pc, #44]	@ (8007a40 <prvInitialiseTaskLists+0x78>)
 8007a14:	4a05      	ldr	r2, [pc, #20]	@ (8007a2c <prvInitialiseTaskLists+0x64>)
 8007a16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a18:	4b0a      	ldr	r3, [pc, #40]	@ (8007a44 <prvInitialiseTaskLists+0x7c>)
 8007a1a:	4a05      	ldr	r2, [pc, #20]	@ (8007a30 <prvInitialiseTaskLists+0x68>)
 8007a1c:	601a      	str	r2, [r3, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	24000ad0 	.word	0x24000ad0
 8007a2c:	24000f30 	.word	0x24000f30
 8007a30:	24000f44 	.word	0x24000f44
 8007a34:	24000f60 	.word	0x24000f60
 8007a38:	24000f74 	.word	0x24000f74
 8007a3c:	24000f8c 	.word	0x24000f8c
 8007a40:	24000f58 	.word	0x24000f58
 8007a44:	24000f5c 	.word	0x24000f5c

08007a48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a4e:	e019      	b.n	8007a84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a50:	f000 fe1a 	bl	8008688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a54:	4b10      	ldr	r3, [pc, #64]	@ (8007a98 <prvCheckTasksWaitingTermination+0x50>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fe fd21 	bl	80064a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a66:	4b0d      	ldr	r3, [pc, #52]	@ (8007a9c <prvCheckTasksWaitingTermination+0x54>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a9c <prvCheckTasksWaitingTermination+0x54>)
 8007a6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a70:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa0 <prvCheckTasksWaitingTermination+0x58>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	4a0a      	ldr	r2, [pc, #40]	@ (8007aa0 <prvCheckTasksWaitingTermination+0x58>)
 8007a78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a7a:	f000 fe37 	bl	80086ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f848 	bl	8007b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a84:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <prvCheckTasksWaitingTermination+0x58>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e1      	bne.n	8007a50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	24000f74 	.word	0x24000f74
 8007a9c:	24000fa0 	.word	0x24000fa0
 8007aa0:	24000f88 	.word	0x24000f88

08007aa4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007ab0:	e005      	b.n	8007abe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2ba5      	cmp	r3, #165	@ 0xa5
 8007ac4:	d0f5      	beq.n	8007ab2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	089b      	lsrs	r3, r3, #2
 8007aca:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	b29b      	uxth	r3, r3
	}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <uxTaskGetStackHighWaterMark+0x14>
 8007aea:	4b09      	ldr	r3, [pc, #36]	@ (8007b10 <uxTaskGetStackHighWaterMark+0x34>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	e000      	b.n	8007af2 <uxTaskGetStackHighWaterMark+0x16>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8007afa:	6938      	ldr	r0, [r7, #16]
 8007afc:	f7ff ffd2 	bl	8007aa4 <prvTaskCheckFreeStackSpace>
 8007b00:	4603      	mov	r3, r0
 8007b02:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8007b04:	68fb      	ldr	r3, [r7, #12]
	}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	24000acc 	.word	0x24000acc

08007b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 ff9c 	bl	8008a68 <vPortFree>
				vPortFree( pxTCB );
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 ff99 	bl	8008a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b36:	e019      	b.n	8007b6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d103      	bne.n	8007b4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 ff90 	bl	8008a68 <vPortFree>
	}
 8007b48:	e010      	b.n	8007b6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d00b      	beq.n	8007b6c <prvDeleteTCB+0x58>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60fb      	str	r3, [r7, #12]
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <prvDeleteTCB+0x54>
	}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <prvResetNextTaskUnblockTime+0x38>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b84:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b8c:	e008      	b.n	8007ba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b8e:	4b07      	ldr	r3, [pc, #28]	@ (8007bac <prvResetNextTaskUnblockTime+0x38>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4a04      	ldr	r2, [pc, #16]	@ (8007bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007b9e:	6013      	str	r3, [r2, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	24000f58 	.word	0x24000f58
 8007bb0:	24000fc0 	.word	0x24000fc0

08007bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bba:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <xTaskGetSchedulerState+0x34>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	e008      	b.n	8007bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc8:	4b08      	ldr	r3, [pc, #32]	@ (8007bec <xTaskGetSchedulerState+0x38>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	607b      	str	r3, [r7, #4]
 8007bd4:	e001      	b.n	8007bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bda:	687b      	ldr	r3, [r7, #4]
	}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	24000fac 	.word	0x24000fac
 8007bec:	24000fc8 	.word	0x24000fc8

08007bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d058      	beq.n	8007cb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c06:	4b2f      	ldr	r3, [pc, #188]	@ (8007cc4 <xTaskPriorityDisinherit+0xd4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d00b      	beq.n	8007c28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	60fb      	str	r3, [r7, #12]
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	e7fd      	b.n	8007c24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10b      	bne.n	8007c48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60bb      	str	r3, [r7, #8]
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4c:	1e5a      	subs	r2, r3, #1
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d02c      	beq.n	8007cb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d128      	bne.n	8007cb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fc1c 	bl	80064a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c88:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <xTaskPriorityDisinherit+0xd8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d903      	bls.n	8007c98 <xTaskPriorityDisinherit+0xa8>
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c94:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc8 <xTaskPriorityDisinherit+0xd8>)
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4a09      	ldr	r2, [pc, #36]	@ (8007ccc <xTaskPriorityDisinherit+0xdc>)
 8007ca6:	441a      	add	r2, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f7fe fb9d 	bl	80063ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cb8:	697b      	ldr	r3, [r7, #20]
	}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	24000acc 	.word	0x24000acc
 8007cc8:	24000fa8 	.word	0x24000fa8
 8007ccc:	24000ad0 	.word	0x24000ad0

08007cd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cda:	4b21      	ldr	r3, [pc, #132]	@ (8007d60 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ce0:	4b20      	ldr	r3, [pc, #128]	@ (8007d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fbde 	bl	80064a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d10a      	bne.n	8007d0a <prvAddCurrentTaskToDelayedList+0x3a>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8007d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4819      	ldr	r0, [pc, #100]	@ (8007d68 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d04:	f7fe fb73 	bl	80063ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d08:	e026      	b.n	8007d58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4413      	add	r3, r2
 8007d10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d12:	4b14      	ldr	r3, [pc, #80]	@ (8007d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d209      	bcs.n	8007d36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d22:	4b12      	ldr	r3, [pc, #72]	@ (8007d6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b0f      	ldr	r3, [pc, #60]	@ (8007d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	f7fe fb81 	bl	8006436 <vListInsert>
}
 8007d34:	e010      	b.n	8007d58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d36:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f7fe fb77 	bl	8006436 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d48:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d202      	bcs.n	8007d58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d52:	4a08      	ldr	r2, [pc, #32]	@ (8007d74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6013      	str	r3, [r2, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	24000fa4 	.word	0x24000fa4
 8007d64:	24000acc 	.word	0x24000acc
 8007d68:	24000f8c 	.word	0x24000f8c
 8007d6c:	24000f5c 	.word	0x24000f5c
 8007d70:	24000f58 	.word	0x24000f58
 8007d74:	24000fc0 	.word	0x24000fc0

08007d78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	@ 0x28
 8007d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d82:	f000 fb13 	bl	80083ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d86:	4b1d      	ldr	r3, [pc, #116]	@ (8007dfc <xTimerCreateTimerTask+0x84>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d021      	beq.n	8007dd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d96:	1d3a      	adds	r2, r7, #4
 8007d98:	f107 0108 	add.w	r1, r7, #8
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fadd 	bl	8006360 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	9202      	str	r2, [sp, #8]
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	2302      	movs	r3, #2
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	460a      	mov	r2, r1
 8007db8:	4911      	ldr	r1, [pc, #68]	@ (8007e00 <xTimerCreateTimerTask+0x88>)
 8007dba:	4812      	ldr	r0, [pc, #72]	@ (8007e04 <xTimerCreateTimerTask+0x8c>)
 8007dbc:	f7ff f898 	bl	8006ef0 <xTaskCreateStatic>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	4a11      	ldr	r2, [pc, #68]	@ (8007e08 <xTimerCreateTimerTask+0x90>)
 8007dc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dc6:	4b10      	ldr	r3, [pc, #64]	@ (8007e08 <xTimerCreateTimerTask+0x90>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10b      	bne.n	8007df0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	613b      	str	r3, [r7, #16]
}
 8007dea:	bf00      	nop
 8007dec:	bf00      	nop
 8007dee:	e7fd      	b.n	8007dec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007df0:	697b      	ldr	r3, [r7, #20]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	24000ffc 	.word	0x24000ffc
 8007e00:	0800bf28 	.word	0x0800bf28
 8007e04:	08007f45 	.word	0x08007f45
 8007e08:	24001000 	.word	0x24001000

08007e0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	@ 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10b      	bne.n	8007e3c <xTimerGenericCommand+0x30>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	623b      	str	r3, [r7, #32]
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	e7fd      	b.n	8007e38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ea4 <xTimerGenericCommand+0x98>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d02a      	beq.n	8007e9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	dc18      	bgt.n	8007e88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e56:	f7ff fead 	bl	8007bb4 <xTaskGetSchedulerState>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d109      	bne.n	8007e74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e60:	4b10      	ldr	r3, [pc, #64]	@ (8007ea4 <xTimerGenericCommand+0x98>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	f107 0110 	add.w	r1, r7, #16
 8007e68:	2300      	movs	r3, #0
 8007e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e6c:	f7fe fc50 	bl	8006710 <xQueueGenericSend>
 8007e70:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e72:	e012      	b.n	8007e9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e74:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea4 <xTimerGenericCommand+0x98>)
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	f107 0110 	add.w	r1, r7, #16
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f7fe fc46 	bl	8006710 <xQueueGenericSend>
 8007e84:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e86:	e008      	b.n	8007e9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e88:	4b06      	ldr	r3, [pc, #24]	@ (8007ea4 <xTimerGenericCommand+0x98>)
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	f107 0110 	add.w	r1, r7, #16
 8007e90:	2300      	movs	r3, #0
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	f7fe fd3e 	bl	8006914 <xQueueGenericSendFromISR>
 8007e98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3728      	adds	r7, #40	@ 0x28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	24000ffc 	.word	0x24000ffc

08007ea8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb2:	4b23      	ldr	r3, [pc, #140]	@ (8007f40 <prvProcessExpiredTimer+0x98>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe faf1 	bl	80064a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d023      	beq.n	8007f1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	699a      	ldr	r2, [r3, #24]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	18d1      	adds	r1, r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	6978      	ldr	r0, [r7, #20]
 8007ee2:	f000 f8d5 	bl	8008090 <prvInsertTimerInActiveList>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d020      	beq.n	8007f2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eec:	2300      	movs	r3, #0
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6978      	ldr	r0, [r7, #20]
 8007ef8:	f7ff ff88 	bl	8007e0c <xTimerGenericCommand>
 8007efc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d114      	bne.n	8007f2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	60fb      	str	r3, [r7, #12]
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	6978      	ldr	r0, [r7, #20]
 8007f34:	4798      	blx	r3
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	24000ff4 	.word	0x24000ff4

08007f44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f4c:	f107 0308 	add.w	r3, r7, #8
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f859 	bl	8008008 <prvGetNextExpireTime>
 8007f56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f805 	bl	8007f6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f62:	f000 f8d7 	bl	8008114 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f66:	bf00      	nop
 8007f68:	e7f0      	b.n	8007f4c <prvTimerTask+0x8>
	...

08007f6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f76:	f7ff f9ff 	bl	8007378 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f7a:	f107 0308 	add.w	r3, r7, #8
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f866 	bl	8008050 <prvSampleTimeNow>
 8007f84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d130      	bne.n	8007fee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <prvProcessTimerOrBlockTask+0x3c>
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d806      	bhi.n	8007fa8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f9a:	f7ff f9fb 	bl	8007394 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff ff81 	bl	8007ea8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fa6:	e024      	b.n	8007ff2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fae:	4b13      	ldr	r3, [pc, #76]	@ (8007ffc <prvProcessTimerOrBlockTask+0x90>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <prvProcessTimerOrBlockTask+0x50>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <prvProcessTimerOrBlockTask+0x52>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8008000 <prvProcessTimerOrBlockTask+0x94>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f7fe ff5b 	bl	8006e88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fd2:	f7ff f9df 	bl	8007394 <xTaskResumeAll>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fdc:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <prvProcessTimerOrBlockTask+0x98>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
}
 8007fec:	e001      	b.n	8007ff2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fee:	f7ff f9d1 	bl	8007394 <xTaskResumeAll>
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	24000ff8 	.word	0x24000ff8
 8008000:	24000ffc 	.word	0x24000ffc
 8008004:	e000ed04 	.word	0xe000ed04

08008008 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008010:	4b0e      	ldr	r3, [pc, #56]	@ (800804c <prvGetNextExpireTime+0x44>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <prvGetNextExpireTime+0x16>
 800801a:	2201      	movs	r2, #1
 800801c:	e000      	b.n	8008020 <prvGetNextExpireTime+0x18>
 800801e:	2200      	movs	r2, #0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d105      	bne.n	8008038 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800802c:	4b07      	ldr	r3, [pc, #28]	@ (800804c <prvGetNextExpireTime+0x44>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	e001      	b.n	800803c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800803c:	68fb      	ldr	r3, [r7, #12]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	24000ff4 	.word	0x24000ff4

08008050 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008058:	f7ff fa3a 	bl	80074d0 <xTaskGetTickCount>
 800805c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800805e:	4b0b      	ldr	r3, [pc, #44]	@ (800808c <prvSampleTimeNow+0x3c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	429a      	cmp	r2, r3
 8008066:	d205      	bcs.n	8008074 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008068:	f000 f93a 	bl	80082e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e002      	b.n	800807a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800807a:	4a04      	ldr	r2, [pc, #16]	@ (800808c <prvSampleTimeNow+0x3c>)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008080:	68fb      	ldr	r3, [r7, #12]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	24001004 	.word	0x24001004

08008090 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d812      	bhi.n	80080dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d302      	bcc.n	80080ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	e01b      	b.n	8008102 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ca:	4b10      	ldr	r3, [pc, #64]	@ (800810c <prvInsertTimerInActiveList+0x7c>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4619      	mov	r1, r3
 80080d4:	4610      	mov	r0, r2
 80080d6:	f7fe f9ae 	bl	8006436 <vListInsert>
 80080da:	e012      	b.n	8008102 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d206      	bcs.n	80080f2 <prvInsertTimerInActiveList+0x62>
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d302      	bcc.n	80080f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080ec:	2301      	movs	r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	e007      	b.n	8008102 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080f2:	4b07      	ldr	r3, [pc, #28]	@ (8008110 <prvInsertTimerInActiveList+0x80>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f7fe f99a 	bl	8006436 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008102:	697b      	ldr	r3, [r7, #20]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	24000ff8 	.word	0x24000ff8
 8008110:	24000ff4 	.word	0x24000ff4

08008114 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08e      	sub	sp, #56	@ 0x38
 8008118:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800811a:	e0ce      	b.n	80082ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	da19      	bge.n	8008156 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008122:	1d3b      	adds	r3, r7, #4
 8008124:	3304      	adds	r3, #4
 8008126:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	61fb      	str	r3, [r7, #28]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800814c:	6850      	ldr	r0, [r2, #4]
 800814e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008150:	6892      	ldr	r2, [r2, #8]
 8008152:	4611      	mov	r1, r2
 8008154:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f2c0 80ae 	blt.w	80082ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d004      	beq.n	8008174 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	3304      	adds	r3, #4
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe f99a 	bl	80064a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008174:	463b      	mov	r3, r7
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff ff6a 	bl	8008050 <prvSampleTimeNow>
 800817c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b09      	cmp	r3, #9
 8008182:	f200 8097 	bhi.w	80082b4 <prvProcessReceivedCommands+0x1a0>
 8008186:	a201      	add	r2, pc, #4	@ (adr r2, 800818c <prvProcessReceivedCommands+0x78>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081b5 	.word	0x080081b5
 8008190:	080081b5 	.word	0x080081b5
 8008194:	080081b5 	.word	0x080081b5
 8008198:	0800822b 	.word	0x0800822b
 800819c:	0800823f 	.word	0x0800823f
 80081a0:	0800828b 	.word	0x0800828b
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081b5 	.word	0x080081b5
 80081ac:	0800822b 	.word	0x0800822b
 80081b0:	0800823f 	.word	0x0800823f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	18d1      	adds	r1, r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081d4:	f7ff ff5c 	bl	8008090 <prvInsertTimerInActiveList>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d06c      	beq.n	80082b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d061      	beq.n	80082b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	441a      	add	r2, r3
 80081fc:	2300      	movs	r3, #0
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2300      	movs	r3, #0
 8008202:	2100      	movs	r1, #0
 8008204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008206:	f7ff fe01 	bl	8007e0c <xTimerGenericCommand>
 800820a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d152      	bne.n	80082b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	61bb      	str	r3, [r7, #24]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008230:	f023 0301 	bic.w	r3, r3, #1
 8008234:	b2da      	uxtb	r2, r3
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800823c:	e03d      	b.n	80082ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008244:	f043 0301 	orr.w	r3, r3, #1
 8008248:	b2da      	uxtb	r2, r3
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008254:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	617b      	str	r3, [r7, #20]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008278:	699a      	ldr	r2, [r3, #24]
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	18d1      	adds	r1, r2, r3
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008284:	f7ff ff04 	bl	8008090 <prvInsertTimerInActiveList>
					break;
 8008288:	e017      	b.n	80082ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800829a:	f000 fbe5 	bl	8008a68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800829e:	e00c      	b.n	80082ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a6:	f023 0301 	bic.w	r3, r3, #1
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082b2:	e002      	b.n	80082ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <prvProcessReceivedCommands+0x1a6>
					break;
 80082b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082ba:	4b08      	ldr	r3, [pc, #32]	@ (80082dc <prvProcessReceivedCommands+0x1c8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	1d39      	adds	r1, r7, #4
 80082c0:	2200      	movs	r2, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fbc4 	bl	8006a50 <xQueueReceive>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f47f af26 	bne.w	800811c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	3730      	adds	r7, #48	@ 0x30
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	24000ffc 	.word	0x24000ffc

080082e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082e6:	e049      	b.n	800837c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082e8:	4b2e      	ldr	r3, [pc, #184]	@ (80083a4 <prvSwitchTimerLists+0xc4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f2:	4b2c      	ldr	r3, [pc, #176]	@ (80083a4 <prvSwitchTimerLists+0xc4>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3304      	adds	r3, #4
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe f8d1 	bl	80064a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d02f      	beq.n	800837c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4413      	add	r3, r2
 8008324:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	d90e      	bls.n	800834c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800833a:	4b1a      	ldr	r3, [pc, #104]	@ (80083a4 <prvSwitchTimerLists+0xc4>)
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f7fe f876 	bl	8006436 <vListInsert>
 800834a:	e017      	b.n	800837c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800834c:	2300      	movs	r3, #0
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	2300      	movs	r3, #0
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	2100      	movs	r1, #0
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fd58 	bl	8007e0c <xTimerGenericCommand>
 800835c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	603b      	str	r3, [r7, #0]
}
 8008376:	bf00      	nop
 8008378:	bf00      	nop
 800837a:	e7fd      	b.n	8008378 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800837c:	4b09      	ldr	r3, [pc, #36]	@ (80083a4 <prvSwitchTimerLists+0xc4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1b0      	bne.n	80082e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008386:	4b07      	ldr	r3, [pc, #28]	@ (80083a4 <prvSwitchTimerLists+0xc4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <prvSwitchTimerLists+0xc8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a04      	ldr	r2, [pc, #16]	@ (80083a4 <prvSwitchTimerLists+0xc4>)
 8008392:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008394:	4a04      	ldr	r2, [pc, #16]	@ (80083a8 <prvSwitchTimerLists+0xc8>)
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6013      	str	r3, [r2, #0]
}
 800839a:	bf00      	nop
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	24000ff4 	.word	0x24000ff4
 80083a8:	24000ff8 	.word	0x24000ff8

080083ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083b2:	f000 f969 	bl	8008688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083b6:	4b15      	ldr	r3, [pc, #84]	@ (800840c <prvCheckForValidListAndQueue+0x60>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d120      	bne.n	8008400 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083be:	4814      	ldr	r0, [pc, #80]	@ (8008410 <prvCheckForValidListAndQueue+0x64>)
 80083c0:	f7fd ffe8 	bl	8006394 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083c4:	4813      	ldr	r0, [pc, #76]	@ (8008414 <prvCheckForValidListAndQueue+0x68>)
 80083c6:	f7fd ffe5 	bl	8006394 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083ca:	4b13      	ldr	r3, [pc, #76]	@ (8008418 <prvCheckForValidListAndQueue+0x6c>)
 80083cc:	4a10      	ldr	r2, [pc, #64]	@ (8008410 <prvCheckForValidListAndQueue+0x64>)
 80083ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083d0:	4b12      	ldr	r3, [pc, #72]	@ (800841c <prvCheckForValidListAndQueue+0x70>)
 80083d2:	4a10      	ldr	r2, [pc, #64]	@ (8008414 <prvCheckForValidListAndQueue+0x68>)
 80083d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083d6:	2300      	movs	r3, #0
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <prvCheckForValidListAndQueue+0x74>)
 80083dc:	4a11      	ldr	r2, [pc, #68]	@ (8008424 <prvCheckForValidListAndQueue+0x78>)
 80083de:	2110      	movs	r1, #16
 80083e0:	200a      	movs	r0, #10
 80083e2:	f7fe f8f5 	bl	80065d0 <xQueueGenericCreateStatic>
 80083e6:	4603      	mov	r3, r0
 80083e8:	4a08      	ldr	r2, [pc, #32]	@ (800840c <prvCheckForValidListAndQueue+0x60>)
 80083ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083ec:	4b07      	ldr	r3, [pc, #28]	@ (800840c <prvCheckForValidListAndQueue+0x60>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083f4:	4b05      	ldr	r3, [pc, #20]	@ (800840c <prvCheckForValidListAndQueue+0x60>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	490b      	ldr	r1, [pc, #44]	@ (8008428 <prvCheckForValidListAndQueue+0x7c>)
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fd1a 	bl	8006e34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008400:	f000 f974 	bl	80086ec <vPortExitCritical>
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	24000ffc 	.word	0x24000ffc
 8008410:	24000fcc 	.word	0x24000fcc
 8008414:	24000fe0 	.word	0x24000fe0
 8008418:	24000ff4 	.word	0x24000ff4
 800841c:	24000ff8 	.word	0x24000ff8
 8008420:	240010a8 	.word	0x240010a8
 8008424:	24001008 	.word	0x24001008
 8008428:	0800bf30 	.word	0x0800bf30

0800842c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b04      	subs	r3, #4
 800843c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3b04      	subs	r3, #4
 800844a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f023 0201 	bic.w	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3b04      	subs	r3, #4
 800845a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800845c:	4a0c      	ldr	r2, [pc, #48]	@ (8008490 <pxPortInitialiseStack+0x64>)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b14      	subs	r3, #20
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b04      	subs	r3, #4
 8008472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f06f 0202 	mvn.w	r2, #2
 800847a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3b20      	subs	r3, #32
 8008480:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008482:	68fb      	ldr	r3, [r7, #12]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	08008495 	.word	0x08008495

08008494 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800849e:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <prvTaskExitError+0x58>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a6:	d00b      	beq.n	80084c0 <prvTaskExitError+0x2c>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	60fb      	str	r3, [r7, #12]
}
 80084ba:	bf00      	nop
 80084bc:	bf00      	nop
 80084be:	e7fd      	b.n	80084bc <prvTaskExitError+0x28>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60bb      	str	r3, [r7, #8]
}
 80084d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084d4:	bf00      	nop
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0fc      	beq.n	80084d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	24000010 	.word	0x24000010

080084f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084f0:	4b07      	ldr	r3, [pc, #28]	@ (8008510 <pxCurrentTCBConst2>)
 80084f2:	6819      	ldr	r1, [r3, #0]
 80084f4:	6808      	ldr	r0, [r1, #0]
 80084f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	f380 8809 	msr	PSP, r0
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f380 8811 	msr	BASEPRI, r0
 800850a:	4770      	bx	lr
 800850c:	f3af 8000 	nop.w

08008510 <pxCurrentTCBConst2>:
 8008510:	24000acc 	.word	0x24000acc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop

08008518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008518:	4808      	ldr	r0, [pc, #32]	@ (800853c <prvPortStartFirstTask+0x24>)
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	6800      	ldr	r0, [r0, #0]
 800851e:	f380 8808 	msr	MSP, r0
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8814 	msr	CONTROL, r0
 800852a:	b662      	cpsie	i
 800852c:	b661      	cpsie	f
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	df00      	svc	0
 8008538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800853a:	bf00      	nop
 800853c:	e000ed08 	.word	0xe000ed08

08008540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008546:	4b47      	ldr	r3, [pc, #284]	@ (8008664 <xPortStartScheduler+0x124>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a47      	ldr	r2, [pc, #284]	@ (8008668 <xPortStartScheduler+0x128>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d10b      	bne.n	8008568 <xPortStartScheduler+0x28>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	613b      	str	r3, [r7, #16]
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008568:	4b3e      	ldr	r3, [pc, #248]	@ (8008664 <xPortStartScheduler+0x124>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a3f      	ldr	r2, [pc, #252]	@ (800866c <xPortStartScheduler+0x12c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d10b      	bne.n	800858a <xPortStartScheduler+0x4a>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	60fb      	str	r3, [r7, #12]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800858a:	4b39      	ldr	r3, [pc, #228]	@ (8008670 <xPortStartScheduler+0x130>)
 800858c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	22ff      	movs	r2, #255	@ 0xff
 800859a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	4b31      	ldr	r3, [pc, #196]	@ (8008674 <xPortStartScheduler+0x134>)
 80085b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085b2:	4b31      	ldr	r3, [pc, #196]	@ (8008678 <xPortStartScheduler+0x138>)
 80085b4:	2207      	movs	r2, #7
 80085b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085b8:	e009      	b.n	80085ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80085ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008678 <xPortStartScheduler+0x138>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3b01      	subs	r3, #1
 80085c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008678 <xPortStartScheduler+0x138>)
 80085c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085d6:	2b80      	cmp	r3, #128	@ 0x80
 80085d8:	d0ef      	beq.n	80085ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085da:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <xPortStartScheduler+0x138>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f1c3 0307 	rsb	r3, r3, #7
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d00b      	beq.n	80085fe <xPortStartScheduler+0xbe>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	60bb      	str	r3, [r7, #8]
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	e7fd      	b.n	80085fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008678 <xPortStartScheduler+0x138>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	021b      	lsls	r3, r3, #8
 8008604:	4a1c      	ldr	r2, [pc, #112]	@ (8008678 <xPortStartScheduler+0x138>)
 8008606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008608:	4b1b      	ldr	r3, [pc, #108]	@ (8008678 <xPortStartScheduler+0x138>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008610:	4a19      	ldr	r2, [pc, #100]	@ (8008678 <xPortStartScheduler+0x138>)
 8008612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	b2da      	uxtb	r2, r3
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800861c:	4b17      	ldr	r3, [pc, #92]	@ (800867c <xPortStartScheduler+0x13c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a16      	ldr	r2, [pc, #88]	@ (800867c <xPortStartScheduler+0x13c>)
 8008622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008628:	4b14      	ldr	r3, [pc, #80]	@ (800867c <xPortStartScheduler+0x13c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a13      	ldr	r2, [pc, #76]	@ (800867c <xPortStartScheduler+0x13c>)
 800862e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008634:	f000 f8da 	bl	80087ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008638:	4b11      	ldr	r3, [pc, #68]	@ (8008680 <xPortStartScheduler+0x140>)
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800863e:	f000 f8f9 	bl	8008834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008642:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <xPortStartScheduler+0x144>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a0f      	ldr	r2, [pc, #60]	@ (8008684 <xPortStartScheduler+0x144>)
 8008648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800864c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800864e:	f7ff ff63 	bl	8008518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008652:	f7ff f807 	bl	8007664 <vTaskSwitchContext>
	prvTaskExitError();
 8008656:	f7ff ff1d 	bl	8008494 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	e000ed00 	.word	0xe000ed00
 8008668:	410fc271 	.word	0x410fc271
 800866c:	410fc270 	.word	0x410fc270
 8008670:	e000e400 	.word	0xe000e400
 8008674:	240010f8 	.word	0x240010f8
 8008678:	240010fc 	.word	0x240010fc
 800867c:	e000ed20 	.word	0xe000ed20
 8008680:	24000010 	.word	0x24000010
 8008684:	e000ef34 	.word	0xe000ef34

08008688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	607b      	str	r3, [r7, #4]
}
 80086a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <vPortEnterCritical+0x5c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3301      	adds	r3, #1
 80086a8:	4a0e      	ldr	r2, [pc, #56]	@ (80086e4 <vPortEnterCritical+0x5c>)
 80086aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086ac:	4b0d      	ldr	r3, [pc, #52]	@ (80086e4 <vPortEnterCritical+0x5c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d110      	bne.n	80086d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086b4:	4b0c      	ldr	r3, [pc, #48]	@ (80086e8 <vPortEnterCritical+0x60>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00b      	beq.n	80086d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	603b      	str	r3, [r7, #0]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <vPortEnterCritical+0x4a>
	}
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	24000010 	.word	0x24000010
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086f2:	4b12      	ldr	r3, [pc, #72]	@ (800873c <vPortExitCritical+0x50>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10b      	bne.n	8008712 <vPortExitCritical+0x26>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	607b      	str	r3, [r7, #4]
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	e7fd      	b.n	800870e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <vPortExitCritical+0x50>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3b01      	subs	r3, #1
 8008718:	4a08      	ldr	r2, [pc, #32]	@ (800873c <vPortExitCritical+0x50>)
 800871a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800871c:	4b07      	ldr	r3, [pc, #28]	@ (800873c <vPortExitCritical+0x50>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d105      	bne.n	8008730 <vPortExitCritical+0x44>
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f383 8811 	msr	BASEPRI, r3
}
 800872e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	24000010 	.word	0x24000010

08008740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008740:	f3ef 8009 	mrs	r0, PSP
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	4b15      	ldr	r3, [pc, #84]	@ (80087a0 <pxCurrentTCBConst>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f01e 0f10 	tst.w	lr, #16
 8008750:	bf08      	it	eq
 8008752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875a:	6010      	str	r0, [r2, #0]
 800875c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008764:	f380 8811 	msr	BASEPRI, r0
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f7fe ff78 	bl	8007664 <vTaskSwitchContext>
 8008774:	f04f 0000 	mov.w	r0, #0
 8008778:	f380 8811 	msr	BASEPRI, r0
 800877c:	bc09      	pop	{r0, r3}
 800877e:	6819      	ldr	r1, [r3, #0]
 8008780:	6808      	ldr	r0, [r1, #0]
 8008782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008786:	f01e 0f10 	tst.w	lr, #16
 800878a:	bf08      	it	eq
 800878c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008790:	f380 8809 	msr	PSP, r0
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	f3af 8000 	nop.w

080087a0 <pxCurrentTCBConst>:
 80087a0:	24000acc 	.word	0x24000acc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop

080087a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	607b      	str	r3, [r7, #4]
}
 80087c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087c2:	f7fe fe95 	bl	80074f0 <xTaskIncrementTick>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087cc:	4b06      	ldr	r3, [pc, #24]	@ (80087e8 <xPortSysTickHandler+0x40>)
 80087ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	2300      	movs	r3, #0
 80087d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f383 8811 	msr	BASEPRI, r3
}
 80087de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008820 <vPortSetupTimerInterrupt+0x34>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <vPortSetupTimerInterrupt+0x38>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008828 <vPortSetupTimerInterrupt+0x3c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a0a      	ldr	r2, [pc, #40]	@ (800882c <vPortSetupTimerInterrupt+0x40>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	099b      	lsrs	r3, r3, #6
 8008808:	4a09      	ldr	r2, [pc, #36]	@ (8008830 <vPortSetupTimerInterrupt+0x44>)
 800880a:	3b01      	subs	r3, #1
 800880c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800880e:	4b04      	ldr	r3, [pc, #16]	@ (8008820 <vPortSetupTimerInterrupt+0x34>)
 8008810:	2207      	movs	r2, #7
 8008812:	601a      	str	r2, [r3, #0]
}
 8008814:	bf00      	nop
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	e000e010 	.word	0xe000e010
 8008824:	e000e018 	.word	0xe000e018
 8008828:	24000000 	.word	0x24000000
 800882c:	10624dd3 	.word	0x10624dd3
 8008830:	e000e014 	.word	0xe000e014

08008834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008844 <vPortEnableVFP+0x10>
 8008838:	6801      	ldr	r1, [r0, #0]
 800883a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800883e:	6001      	str	r1, [r0, #0]
 8008840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008842:	bf00      	nop
 8008844:	e000ed88 	.word	0xe000ed88

08008848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800884e:	f3ef 8305 	mrs	r3, IPSR
 8008852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b0f      	cmp	r3, #15
 8008858:	d915      	bls.n	8008886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800885a:	4a18      	ldr	r2, [pc, #96]	@ (80088bc <vPortValidateInterruptPriority+0x74>)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008864:	4b16      	ldr	r3, [pc, #88]	@ (80088c0 <vPortValidateInterruptPriority+0x78>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	7afa      	ldrb	r2, [r7, #11]
 800886a:	429a      	cmp	r2, r3
 800886c:	d20b      	bcs.n	8008886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	607b      	str	r3, [r7, #4]
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008886:	4b0f      	ldr	r3, [pc, #60]	@ (80088c4 <vPortValidateInterruptPriority+0x7c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800888e:	4b0e      	ldr	r3, [pc, #56]	@ (80088c8 <vPortValidateInterruptPriority+0x80>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d90b      	bls.n	80088ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	603b      	str	r3, [r7, #0]
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <vPortValidateInterruptPriority+0x62>
	}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	e000e3f0 	.word	0xe000e3f0
 80088c0:	240010f8 	.word	0x240010f8
 80088c4:	e000ed0c 	.word	0xe000ed0c
 80088c8:	240010fc 	.word	0x240010fc

080088cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08a      	sub	sp, #40	@ 0x28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088d8:	f7fe fd4e 	bl	8007378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088dc:	4b5c      	ldr	r3, [pc, #368]	@ (8008a50 <pvPortMalloc+0x184>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088e4:	f000 f924 	bl	8008b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a54 <pvPortMalloc+0x188>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4013      	ands	r3, r2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 8095 	bne.w	8008a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01e      	beq.n	800893a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80088fc:	2208      	movs	r2, #8
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4413      	add	r3, r2
 8008902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b00      	cmp	r3, #0
 800890c:	d015      	beq.n	800893a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	3308      	adds	r3, #8
 8008916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <pvPortMalloc+0x6e>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	617b      	str	r3, [r7, #20]
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	e7fd      	b.n	8008936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d06f      	beq.n	8008a20 <pvPortMalloc+0x154>
 8008940:	4b45      	ldr	r3, [pc, #276]	@ (8008a58 <pvPortMalloc+0x18c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	429a      	cmp	r2, r3
 8008948:	d86a      	bhi.n	8008a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800894a:	4b44      	ldr	r3, [pc, #272]	@ (8008a5c <pvPortMalloc+0x190>)
 800894c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800894e:	4b43      	ldr	r3, [pc, #268]	@ (8008a5c <pvPortMalloc+0x190>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008954:	e004      	b.n	8008960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d903      	bls.n	8008972 <pvPortMalloc+0xa6>
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f1      	bne.n	8008956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008972:	4b37      	ldr	r3, [pc, #220]	@ (8008a50 <pvPortMalloc+0x184>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008978:	429a      	cmp	r2, r3
 800897a:	d051      	beq.n	8008a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2208      	movs	r2, #8
 8008982:	4413      	add	r3, r2
 8008984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	1ad2      	subs	r2, r2, r3
 8008996:	2308      	movs	r3, #8
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	429a      	cmp	r2, r3
 800899c:	d920      	bls.n	80089e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800899e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4413      	add	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <pvPortMalloc+0xfc>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	613b      	str	r3, [r7, #16]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089da:	69b8      	ldr	r0, [r7, #24]
 80089dc:	f000 f90a 	bl	8008bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a58 <pvPortMalloc+0x18c>)
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008a58 <pvPortMalloc+0x18c>)
 80089ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008a58 <pvPortMalloc+0x18c>)
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a60 <pvPortMalloc+0x194>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d203      	bcs.n	8008a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089fa:	4b17      	ldr	r3, [pc, #92]	@ (8008a58 <pvPortMalloc+0x18c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a18      	ldr	r2, [pc, #96]	@ (8008a60 <pvPortMalloc+0x194>)
 8008a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	4b13      	ldr	r3, [pc, #76]	@ (8008a54 <pvPortMalloc+0x188>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a16:	4b13      	ldr	r3, [pc, #76]	@ (8008a64 <pvPortMalloc+0x198>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	4a11      	ldr	r2, [pc, #68]	@ (8008a64 <pvPortMalloc+0x198>)
 8008a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a20:	f7fe fcb8 	bl	8007394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <pvPortMalloc+0x17a>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	60fb      	str	r3, [r7, #12]
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop
 8008a44:	e7fd      	b.n	8008a42 <pvPortMalloc+0x176>
	return pvReturn;
 8008a46:	69fb      	ldr	r3, [r7, #28]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3728      	adds	r7, #40	@ 0x28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	24004d08 	.word	0x24004d08
 8008a54:	24004d1c 	.word	0x24004d1c
 8008a58:	24004d0c 	.word	0x24004d0c
 8008a5c:	24004d00 	.word	0x24004d00
 8008a60:	24004d10 	.word	0x24004d10
 8008a64:	24004d14 	.word	0x24004d14

08008a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d04f      	beq.n	8008b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a7a:	2308      	movs	r3, #8
 8008a7c:	425b      	negs	r3, r3
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4413      	add	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	4b25      	ldr	r3, [pc, #148]	@ (8008b24 <vPortFree+0xbc>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10b      	bne.n	8008aae <vPortFree+0x46>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	60fb      	str	r3, [r7, #12]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <vPortFree+0x66>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	60bb      	str	r3, [r7, #8]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	4b14      	ldr	r3, [pc, #80]	@ (8008b24 <vPortFree+0xbc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d01e      	beq.n	8008b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d11a      	bne.n	8008b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b24 <vPortFree+0xbc>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	43db      	mvns	r3, r3
 8008aee:	401a      	ands	r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008af4:	f7fe fc40 	bl	8007378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <vPortFree+0xc0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4413      	add	r3, r2
 8008b02:	4a09      	ldr	r2, [pc, #36]	@ (8008b28 <vPortFree+0xc0>)
 8008b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b06:	6938      	ldr	r0, [r7, #16]
 8008b08:	f000 f874 	bl	8008bf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b0c:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <vPortFree+0xc4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3301      	adds	r3, #1
 8008b12:	4a06      	ldr	r2, [pc, #24]	@ (8008b2c <vPortFree+0xc4>)
 8008b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b16:	f7fe fc3d 	bl	8007394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b1a:	bf00      	nop
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	24004d1c 	.word	0x24004d1c
 8008b28:	24004d0c 	.word	0x24004d0c
 8008b2c:	24004d18 	.word	0x24004d18

08008b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b3c:	4b27      	ldr	r3, [pc, #156]	@ (8008bdc <prvHeapInit+0xac>)
 8008b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00c      	beq.n	8008b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3307      	adds	r3, #7
 8008b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0307 	bic.w	r3, r3, #7
 8008b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bdc <prvHeapInit+0xac>)
 8008b60:	4413      	add	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b68:	4a1d      	ldr	r2, [pc, #116]	@ (8008be0 <prvHeapInit+0xb0>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8008be0 <prvHeapInit+0xb0>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	4413      	add	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b7c:	2208      	movs	r2, #8
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a15      	ldr	r2, [pc, #84]	@ (8008be4 <prvHeapInit+0xb4>)
 8008b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b92:	4b14      	ldr	r3, [pc, #80]	@ (8008be4 <prvHeapInit+0xb4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b9a:	4b12      	ldr	r3, [pc, #72]	@ (8008be4 <prvHeapInit+0xb4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	1ad2      	subs	r2, r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008be4 <prvHeapInit+0xb4>)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8008be8 <prvHeapInit+0xb8>)
 8008bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	4a09      	ldr	r2, [pc, #36]	@ (8008bec <prvHeapInit+0xbc>)
 8008bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bc8:	4b09      	ldr	r3, [pc, #36]	@ (8008bf0 <prvHeapInit+0xc0>)
 8008bca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008bce:	601a      	str	r2, [r3, #0]
}
 8008bd0:	bf00      	nop
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	24001100 	.word	0x24001100
 8008be0:	24004d00 	.word	0x24004d00
 8008be4:	24004d08 	.word	0x24004d08
 8008be8:	24004d10 	.word	0x24004d10
 8008bec:	24004d0c 	.word	0x24004d0c
 8008bf0:	24004d1c 	.word	0x24004d1c

08008bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bfc:	4b28      	ldr	r3, [pc, #160]	@ (8008ca0 <prvInsertBlockIntoFreeList+0xac>)
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e002      	b.n	8008c08 <prvInsertBlockIntoFreeList+0x14>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d8f7      	bhi.n	8008c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d108      	bne.n	8008c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	441a      	add	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	441a      	add	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d118      	bne.n	8008c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d00d      	beq.n	8008c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	441a      	add	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	e008      	b.n	8008c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	e003      	b.n	8008c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d002      	beq.n	8008c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c92:	bf00      	nop
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	24004d00 	.word	0x24004d00
 8008ca4:	24004d08 	.word	0x24004d08

08008ca8 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 8008cac:	2200      	movs	r2, #0
 8008cae:	2108      	movs	r1, #8
 8008cb0:	480a      	ldr	r0, [pc, #40]	@ (8008cdc <ad7606_Init+0x34>)
 8008cb2:	f7f8 feb9 	bl	8001a28 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	f7f8 fb7e 	bl	80013b8 <HAL_Delay>
    AD7606_RST_SET();
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	2108      	movs	r1, #8
 8008cc0:	4806      	ldr	r0, [pc, #24]	@ (8008cdc <ad7606_Init+0x34>)
 8008cc2:	f7f8 feb1 	bl	8001a28 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	f7f8 fb76 	bl	80013b8 <HAL_Delay>
    AD7606_RST_RESET();
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2108      	movs	r1, #8
 8008cd0:	4802      	ldr	r0, [pc, #8]	@ (8008cdc <ad7606_Init+0x34>)
 8008cd2:	f7f8 fea9 	bl	8001a28 <HAL_GPIO_WritePin>
}
 8008cd6:	bf00      	nop
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	58021800 	.word	0x58021800

08008ce0 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2180      	movs	r1, #128	@ 0x80
 8008cf2:	4809      	ldr	r0, [pc, #36]	@ (8008d18 <ad7606_Read+0x38>)
 8008cf4:	f7f8 fe98 	bl	8001a28 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 8008cf8:	88fa      	ldrh	r2, [r7, #6]
 8008cfa:	2364      	movs	r3, #100	@ 0x64
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f7fb fdac 	bl	800485c <HAL_SPI_Receive>
    AD7606_CS_SET();
 8008d04:	2201      	movs	r2, #1
 8008d06:	2180      	movs	r1, #128	@ 0x80
 8008d08:	4803      	ldr	r0, [pc, #12]	@ (8008d18 <ad7606_Read+0x38>)
 8008d0a:	f7f8 fe8d 	bl	8001a28 <HAL_GPIO_WritePin>
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	58021800 	.word	0x58021800

08008d1c <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7fc fa23 	bl	8005174 <HAL_TIM_PWM_Start>
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	460b      	mov	r3, r1
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	e03d      	b.n	8008dc8 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da0f      	bge.n	8008d7c <ad7606_Convert+0x44>
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	425b      	negs	r3, r3
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	425b      	negs	r3, r3
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	b21b      	sxth	r3, r3
 8008d7a:	e005      	b.n	8008d88 <ad7606_Convert+0x50>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	0052      	lsls	r2, r2, #1
 8008d8c:	68f9      	ldr	r1, [r7, #12]
 8008d8e:	440a      	add	r2, r1
 8008d90:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008da6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8008daa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8008de0 <ad7606_Convert+0xa8>
 8008dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dbe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	897b      	ldrh	r3, [r7, #10]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	dbbd      	blt.n	8008d4c <ad7606_Convert+0x14>
    }
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	47000000 	.word	0x47000000

08008de4 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 8008de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de8:	b087      	sub	sp, #28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	460b      	mov	r3, r1
 8008df0:	607a      	str	r2, [r7, #4]
 8008df2:	817b      	strh	r3, [r7, #10]
 8008df4:	466b      	mov	r3, sp
 8008df6:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 8008df8:	8979      	ldrh	r1, [r7, #10]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	b28b      	uxth	r3, r1
 8008e02:	2200      	movs	r2, #0
 8008e04:	4698      	mov	r8, r3
 8008e06:	4691      	mov	r9, r2
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8008e14:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8008e18:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8008e1c:	b28b      	uxth	r3, r1
 8008e1e:	2200      	movs	r2, #0
 8008e20:	461c      	mov	r4, r3
 8008e22:	4615      	mov	r5, r2
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	f04f 0300 	mov.w	r3, #0
 8008e2c:	012b      	lsls	r3, r5, #4
 8008e2e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8008e32:	0122      	lsls	r2, r4, #4
 8008e34:	460b      	mov	r3, r1
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	3307      	adds	r3, #7
 8008e3a:	08db      	lsrs	r3, r3, #3
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	ebad 0d03 	sub.w	sp, sp, r3
 8008e42:	466b      	mov	r3, sp
 8008e44:	3301      	adds	r3, #1
 8008e46:	085b      	lsrs	r3, r3, #1
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 8008e4c:	897b      	ldrh	r3, [r7, #10]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6939      	ldr	r1, [r7, #16]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f7ff ff44 	bl	8008ce0 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8008e58:	897b      	ldrh	r3, [r7, #10]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6938      	ldr	r0, [r7, #16]
 8008e60:	f7ff ff6a 	bl	8008d38 <ad7606_Convert>
 8008e64:	46b5      	mov	sp, r6
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008e70 <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	460a      	mov	r2, r1
 8008e7a:	71fb      	strb	r3, [r7, #7]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 8008e80:	1dfb      	adds	r3, r7, #7
 8008e82:	60fb      	str	r3, [r7, #12]
	if (cmd)
 8008e84:	79bb      	ldrb	r3, [r7, #6]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	2140      	movs	r1, #64	@ 0x40
 8008e8e:	4811      	ldr	r0, [pc, #68]	@ (8008ed4 <OLED_WR_Byte+0x64>)
 8008e90:	f7f8 fdca 	bl	8001a28 <HAL_GPIO_WritePin>
 8008e94:	e004      	b.n	8008ea0 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 8008e96:	2200      	movs	r2, #0
 8008e98:	2140      	movs	r1, #64	@ 0x40
 8008e9a:	480e      	ldr	r0, [pc, #56]	@ (8008ed4 <OLED_WR_Byte+0x64>)
 8008e9c:	f7f8 fdc4 	bl	8001a28 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2102      	movs	r1, #2
 8008ea4:	480c      	ldr	r0, [pc, #48]	@ (8008ed8 <OLED_WR_Byte+0x68>)
 8008ea6:	f7f8 fdbf 	bl	8001a28 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 8008eaa:	23c8      	movs	r3, #200	@ 0xc8
 8008eac:	2201      	movs	r2, #1
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	480a      	ldr	r0, [pc, #40]	@ (8008edc <OLED_WR_Byte+0x6c>)
 8008eb2:	f7fb fae5 	bl	8004480 <HAL_SPI_Transmit>

	OLED_CS_Set();
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	2102      	movs	r1, #2
 8008eba:	4807      	ldr	r0, [pc, #28]	@ (8008ed8 <OLED_WR_Byte+0x68>)
 8008ebc:	f7f8 fdb4 	bl	8001a28 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	2140      	movs	r1, #64	@ 0x40
 8008ec4:	4803      	ldr	r0, [pc, #12]	@ (8008ed4 <OLED_WR_Byte+0x64>)
 8008ec6:	f7f8 fdaf 	bl	8001a28 <HAL_GPIO_WritePin>
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	58022000 	.word	0x58022000
 8008ed8:	58020400 	.word	0x58020400
 8008edc:	24000220 	.word	0x24000220

08008ee0 <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	71fb      	strb	r3, [r7, #7]
 8008eea:	e026      	b.n	8008f3a <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	3b50      	subs	r3, #80	@ 0x50
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff ffbb 	bl	8008e70 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 8008efa:	2100      	movs	r1, #0
 8008efc:	2000      	movs	r0, #0
 8008efe:	f7ff ffb7 	bl	8008e70 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 8008f02:	2100      	movs	r1, #0
 8008f04:	2010      	movs	r0, #16
 8008f06:	f7ff ffb3 	bl	8008e70 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	71bb      	strb	r3, [r7, #6]
 8008f0e:	e00d      	b.n	8008f2c <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8008f10:	79ba      	ldrb	r2, [r7, #6]
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	490d      	ldr	r1, [pc, #52]	@ (8008f4c <OLED_Refresh+0x6c>)
 8008f16:	00d2      	lsls	r2, r2, #3
 8008f18:	440a      	add	r2, r1
 8008f1a:	4413      	add	r3, r2
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7ff ffa5 	bl	8008e70 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8008f26:	79bb      	ldrb	r3, [r7, #6]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	71bb      	strb	r3, [r7, #6]
 8008f2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	daed      	bge.n	8008f10 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	3301      	adds	r3, #1
 8008f38:	71fb      	strb	r3, [r7, #7]
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	2b07      	cmp	r3, #7
 8008f3e:	d9d5      	bls.n	8008eec <OLED_Refresh+0xc>
	}
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	24004d20 	.word	0x24004d20

08008f50 <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8008f56:	2300      	movs	r3, #0
 8008f58:	71fb      	strb	r3, [r7, #7]
 8008f5a:	e014      	b.n	8008f86 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	71bb      	strb	r3, [r7, #6]
 8008f60:	e00a      	b.n	8008f78 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 8008f62:	79ba      	ldrb	r2, [r7, #6]
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	490c      	ldr	r1, [pc, #48]	@ (8008f98 <OLED_Clear+0x48>)
 8008f68:	00d2      	lsls	r2, r2, #3
 8008f6a:	440a      	add	r2, r1
 8008f6c:	4413      	add	r3, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 8008f72:	79bb      	ldrb	r3, [r7, #6]
 8008f74:	3301      	adds	r3, #1
 8008f76:	71bb      	strb	r3, [r7, #6]
 8008f78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	daf0      	bge.n	8008f62 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	3301      	adds	r3, #1
 8008f84:	71fb      	strb	r3, [r7, #7]
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	2b07      	cmp	r3, #7
 8008f8a:	d9e7      	bls.n	8008f5c <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8008f8c:	f7ff ffa8 	bl	8008ee0 <OLED_Refresh>
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	24004d20 	.word	0x24004d20

08008f9c <OLED_DrawPoint>:

// 画点
// x:0~127
// y:0~63
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	460a      	mov	r2, r1
 8008fa6:	71fb      	strb	r3, [r7, #7]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8008fac:	79bb      	ldrb	r3, [r7, #6]
 8008fae:	08db      	lsrs	r3, r3, #3
 8008fb0:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8008fb2:	79bb      	ldrb	r3, [r7, #6]
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 8008fc4:	79fa      	ldrb	r2, [r7, #7]
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	490a      	ldr	r1, [pc, #40]	@ (8008ff4 <OLED_DrawPoint+0x58>)
 8008fca:	00d2      	lsls	r2, r2, #3
 8008fcc:	440a      	add	r2, r1
 8008fce:	4413      	add	r3, r2
 8008fd0:	7818      	ldrb	r0, [r3, #0]
 8008fd2:	79fa      	ldrb	r2, [r7, #7]
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	7b79      	ldrb	r1, [r7, #13]
 8008fd8:	4301      	orrs	r1, r0
 8008fda:	b2c8      	uxtb	r0, r1
 8008fdc:	4905      	ldr	r1, [pc, #20]	@ (8008ff4 <OLED_DrawPoint+0x58>)
 8008fde:	00d2      	lsls	r2, r2, #3
 8008fe0:	440a      	add	r2, r1
 8008fe2:	4413      	add	r3, r2
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	701a      	strb	r2, [r3, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	24004d20 	.word	0x24004d20

08008ff8 <OLED_ClearPoint>:

// 清除一个点
// x:0~127
// y:0~63
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	460a      	mov	r2, r1
 8009002:	71fb      	strb	r3, [r7, #7]
 8009004:	4613      	mov	r3, r2
 8009006:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8009008:	79bb      	ldrb	r3, [r7, #6]
 800900a:	08db      	lsrs	r3, r3, #3
 800900c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800900e:	79bb      	ldrb	r3, [r7, #6]
 8009010:	f003 0307 	and.w	r3, r3, #7
 8009014:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8009016:	7bbb      	ldrb	r3, [r7, #14]
 8009018:	2201      	movs	r2, #1
 800901a:	fa02 f303 	lsl.w	r3, r2, r3
 800901e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8009020:	79fa      	ldrb	r2, [r7, #7]
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	491b      	ldr	r1, [pc, #108]	@ (8009094 <OLED_ClearPoint+0x9c>)
 8009026:	00d2      	lsls	r2, r2, #3
 8009028:	440a      	add	r2, r1
 800902a:	4413      	add	r3, r2
 800902c:	7819      	ldrb	r1, [r3, #0]
 800902e:	79fa      	ldrb	r2, [r7, #7]
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	43c9      	mvns	r1, r1
 8009034:	b2c8      	uxtb	r0, r1
 8009036:	4917      	ldr	r1, [pc, #92]	@ (8009094 <OLED_ClearPoint+0x9c>)
 8009038:	00d2      	lsls	r2, r2, #3
 800903a:	440a      	add	r2, r1
 800903c:	4413      	add	r3, r2
 800903e:	4602      	mov	r2, r0
 8009040:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 8009042:	79fa      	ldrb	r2, [r7, #7]
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	4913      	ldr	r1, [pc, #76]	@ (8009094 <OLED_ClearPoint+0x9c>)
 8009048:	00d2      	lsls	r2, r2, #3
 800904a:	440a      	add	r2, r1
 800904c:	4413      	add	r3, r2
 800904e:	7818      	ldrb	r0, [r3, #0]
 8009050:	79fa      	ldrb	r2, [r7, #7]
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	7b79      	ldrb	r1, [r7, #13]
 8009056:	4301      	orrs	r1, r0
 8009058:	b2c8      	uxtb	r0, r1
 800905a:	490e      	ldr	r1, [pc, #56]	@ (8009094 <OLED_ClearPoint+0x9c>)
 800905c:	00d2      	lsls	r2, r2, #3
 800905e:	440a      	add	r2, r1
 8009060:	4413      	add	r3, r2
 8009062:	4602      	mov	r2, r0
 8009064:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8009066:	79fa      	ldrb	r2, [r7, #7]
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	490a      	ldr	r1, [pc, #40]	@ (8009094 <OLED_ClearPoint+0x9c>)
 800906c:	00d2      	lsls	r2, r2, #3
 800906e:	440a      	add	r2, r1
 8009070:	4413      	add	r3, r2
 8009072:	7819      	ldrb	r1, [r3, #0]
 8009074:	79fa      	ldrb	r2, [r7, #7]
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	43c9      	mvns	r1, r1
 800907a:	b2c8      	uxtb	r0, r1
 800907c:	4905      	ldr	r1, [pc, #20]	@ (8009094 <OLED_ClearPoint+0x9c>)
 800907e:	00d2      	lsls	r2, r2, #3
 8009080:	440a      	add	r2, r1
 8009082:	4413      	add	r3, r2
 8009084:	4602      	mov	r2, r0
 8009086:	701a      	strb	r2, [r3, #0]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	24004d20 	.word	0x24004d20

08009098 <OLED_ShowChar>:
// x:0~127
// y:0~63
// size:选择字体 12/16/24
// 取模方式 逐列式
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8009098:	b590      	push	{r4, r7, lr}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	461a      	mov	r2, r3
 80090a6:	4623      	mov	r3, r4
 80090a8:	71fb      	strb	r3, [r7, #7]
 80090aa:	4603      	mov	r3, r0
 80090ac:	71bb      	strb	r3, [r7, #6]
 80090ae:	460b      	mov	r3, r1
 80090b0:	717b      	strb	r3, [r7, #5]
 80090b2:	4613      	mov	r3, r2
 80090b4:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 80090b6:	79bb      	ldrb	r3, [r7, #6]
 80090b8:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 80090ba:	793b      	ldrb	r3, [r7, #4]
 80090bc:	08db      	lsrs	r3, r3, #3
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	461a      	mov	r2, r3
 80090c2:	793b      	ldrb	r3, [r7, #4]
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bf14      	ite	ne
 80090ce:	2301      	movne	r3, #1
 80090d0:	2300      	moveq	r3, #0
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4413      	add	r3, r2
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	793b      	ldrb	r3, [r7, #4]
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	fb12 f303 	smulbb	r3, r2, r3
 80090e2:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 80090e4:	797b      	ldrb	r3, [r7, #5]
 80090e6:	3b20      	subs	r3, #32
 80090e8:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]
 80090ee:	e057      	b.n	80091a0 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 80090f0:	793b      	ldrb	r3, [r7, #4]
 80090f2:	2b0c      	cmp	r3, #12
 80090f4:	d10b      	bne.n	800910e <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 80090f6:	7aba      	ldrb	r2, [r7, #10]
 80090f8:	7bf9      	ldrb	r1, [r7, #15]
 80090fa:	482e      	ldr	r0, [pc, #184]	@ (80091b4 <OLED_ShowChar+0x11c>)
 80090fc:	4613      	mov	r3, r2
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4403      	add	r3, r0
 8009106:	440b      	add	r3, r1
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	737b      	strb	r3, [r7, #13]
 800910c:	e019      	b.n	8009142 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800910e:	793b      	ldrb	r3, [r7, #4]
 8009110:	2b10      	cmp	r3, #16
 8009112:	d108      	bne.n	8009126 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 8009114:	7aba      	ldrb	r2, [r7, #10]
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	4927      	ldr	r1, [pc, #156]	@ (80091b8 <OLED_ShowChar+0x120>)
 800911a:	0112      	lsls	r2, r2, #4
 800911c:	440a      	add	r2, r1
 800911e:	4413      	add	r3, r2
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	737b      	strb	r3, [r7, #13]
 8009124:	e00d      	b.n	8009142 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8009126:	793b      	ldrb	r3, [r7, #4]
 8009128:	2b18      	cmp	r3, #24
 800912a:	d13e      	bne.n	80091aa <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800912c:	7aba      	ldrb	r2, [r7, #10]
 800912e:	7bf9      	ldrb	r1, [r7, #15]
 8009130:	4822      	ldr	r0, [pc, #136]	@ (80091bc <OLED_ShowChar+0x124>)
 8009132:	4613      	mov	r3, r2
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4403      	add	r3, r0
 800913c:	440b      	add	r3, r1
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 8009142:	2300      	movs	r3, #0
 8009144:	73bb      	strb	r3, [r7, #14]
 8009146:	e025      	b.n	8009194 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8009148:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800914c:	2b00      	cmp	r3, #0
 800914e:	da06      	bge.n	800915e <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 8009150:	79ba      	ldrb	r2, [r7, #6]
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff ff20 	bl	8008f9c <OLED_DrawPoint>
 800915c:	e005      	b.n	800916a <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800915e:	79ba      	ldrb	r2, [r7, #6]
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	4611      	mov	r1, r2
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff ff47 	bl	8008ff8 <OLED_ClearPoint>
			temp <<= 1;
 800916a:	7b7b      	ldrb	r3, [r7, #13]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	737b      	strb	r3, [r7, #13]
			y++;
 8009170:	79bb      	ldrb	r3, [r7, #6]
 8009172:	3301      	adds	r3, #1
 8009174:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8009176:	79ba      	ldrb	r2, [r7, #6]
 8009178:	7b3b      	ldrb	r3, [r7, #12]
 800917a:	1ad2      	subs	r2, r2, r3
 800917c:	793b      	ldrb	r3, [r7, #4]
 800917e:	429a      	cmp	r2, r3
 8009180:	d105      	bne.n	800918e <OLED_ShowChar+0xf6>
			{
				y = y0;
 8009182:	7b3b      	ldrb	r3, [r7, #12]
 8009184:	71bb      	strb	r3, [r7, #6]
				x++;
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	3301      	adds	r3, #1
 800918a:	71fb      	strb	r3, [r7, #7]
				break;
 800918c:	e005      	b.n	800919a <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	3301      	adds	r3, #1
 8009192:	73bb      	strb	r3, [r7, #14]
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2b07      	cmp	r3, #7
 8009198:	d9d6      	bls.n	8009148 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	3301      	adds	r3, #1
 800919e:	73fb      	strb	r3, [r7, #15]
 80091a0:	7bfa      	ldrb	r2, [r7, #15]
 80091a2:	7afb      	ldrb	r3, [r7, #11]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d3a3      	bcc.n	80090f0 <OLED_ShowChar+0x58>
 80091a8:	e000      	b.n	80091ac <OLED_ShowChar+0x114>
			return;
 80091aa:	bf00      	nop
			}
		}
	}
}
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd90      	pop	{r4, r7, pc}
 80091b2:	bf00      	nop
 80091b4:	0800bf90 	.word	0x0800bf90
 80091b8:	0800c404 	.word	0x0800c404
 80091bc:	0800c9f4 	.word	0x0800c9f4

080091c0 <OLED_ShowString>:
// 显示字符串
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	603a      	str	r2, [r7, #0]
 80091c8:	461a      	mov	r2, r3
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
 80091ce:	460b      	mov	r3, r1
 80091d0:	71bb      	strb	r3, [r7, #6]
 80091d2:	4613      	mov	r3, r2
 80091d4:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 80091d6:	e01b      	b.n	8009210 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	797b      	ldrb	r3, [r7, #5]
 80091de:	79b9      	ldrb	r1, [r7, #6]
 80091e0:	79f8      	ldrb	r0, [r7, #7]
 80091e2:	f7ff ff59 	bl	8009098 <OLED_ShowChar>
		x += size1 / 2;
 80091e6:	797b      	ldrb	r3, [r7, #5]
 80091e8:	085b      	lsrs	r3, r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	4413      	add	r3, r2
 80091f0:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 80091f2:	79fa      	ldrb	r2, [r7, #7]
 80091f4:	797b      	ldrb	r3, [r7, #5]
 80091f6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80091fa:	429a      	cmp	r2, r3
 80091fc:	dd05      	ble.n	800920a <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 80091fe:	2302      	movs	r3, #2
 8009200:	71fb      	strb	r3, [r7, #7]
			y += size1;
 8009202:	79ba      	ldrb	r2, [r7, #6]
 8009204:	797b      	ldrb	r3, [r7, #5]
 8009206:	4413      	add	r3, r2
 8009208:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b1f      	cmp	r3, #31
 8009216:	d903      	bls.n	8009220 <OLED_ShowString+0x60>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b7e      	cmp	r3, #126	@ 0x7e
 800921e:	d9db      	bls.n	80091d8 <OLED_ShowString+0x18>
	}
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800922c:	2200      	movs	r2, #0
 800922e:	2120      	movs	r1, #32
 8009230:	483f      	ldr	r0, [pc, #252]	@ (8009330 <OLED_Init+0x108>)
 8009232:	f7f8 fbf9 	bl	8001a28 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8009236:	20c8      	movs	r0, #200	@ 0xc8
 8009238:	f7f8 f8be 	bl	80013b8 <HAL_Delay>
	OLED_RES_Set();
 800923c:	2201      	movs	r2, #1
 800923e:	2120      	movs	r1, #32
 8009240:	483b      	ldr	r0, [pc, #236]	@ (8009330 <OLED_Init+0x108>)
 8009242:	f7f8 fbf1 	bl	8001a28 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8009246:	2100      	movs	r1, #0
 8009248:	20ae      	movs	r0, #174	@ 0xae
 800924a:	f7ff fe11 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800924e:	2100      	movs	r1, #0
 8009250:	2000      	movs	r0, #0
 8009252:	f7ff fe0d 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8009256:	2100      	movs	r1, #0
 8009258:	2010      	movs	r0, #16
 800925a:	f7ff fe09 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800925e:	2100      	movs	r1, #0
 8009260:	2040      	movs	r0, #64	@ 0x40
 8009262:	f7ff fe05 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8009266:	2100      	movs	r1, #0
 8009268:	2081      	movs	r0, #129	@ 0x81
 800926a:	f7ff fe01 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800926e:	2100      	movs	r1, #0
 8009270:	20cf      	movs	r0, #207	@ 0xcf
 8009272:	f7ff fdfd 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8009276:	2100      	movs	r1, #0
 8009278:	20a1      	movs	r0, #161	@ 0xa1
 800927a:	f7ff fdf9 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800927e:	2100      	movs	r1, #0
 8009280:	20c8      	movs	r0, #200	@ 0xc8
 8009282:	f7ff fdf5 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8009286:	2100      	movs	r1, #0
 8009288:	20a6      	movs	r0, #166	@ 0xa6
 800928a:	f7ff fdf1 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800928e:	2100      	movs	r1, #0
 8009290:	20a8      	movs	r0, #168	@ 0xa8
 8009292:	f7ff fded 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8009296:	2100      	movs	r1, #0
 8009298:	203f      	movs	r0, #63	@ 0x3f
 800929a:	f7ff fde9 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800929e:	2100      	movs	r1, #0
 80092a0:	20d3      	movs	r0, #211	@ 0xd3
 80092a2:	f7ff fde5 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 80092a6:	2100      	movs	r1, #0
 80092a8:	2000      	movs	r0, #0
 80092aa:	f7ff fde1 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 80092ae:	2100      	movs	r1, #0
 80092b0:	20d5      	movs	r0, #213	@ 0xd5
 80092b2:	f7ff fddd 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 80092b6:	2100      	movs	r1, #0
 80092b8:	2080      	movs	r0, #128	@ 0x80
 80092ba:	f7ff fdd9 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 80092be:	2100      	movs	r1, #0
 80092c0:	20d9      	movs	r0, #217	@ 0xd9
 80092c2:	f7ff fdd5 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80092c6:	2100      	movs	r1, #0
 80092c8:	20f1      	movs	r0, #241	@ 0xf1
 80092ca:	f7ff fdd1 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 80092ce:	2100      	movs	r1, #0
 80092d0:	20da      	movs	r0, #218	@ 0xda
 80092d2:	f7ff fdcd 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 80092d6:	2100      	movs	r1, #0
 80092d8:	2012      	movs	r0, #18
 80092da:	f7ff fdc9 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 80092de:	2100      	movs	r1, #0
 80092e0:	20db      	movs	r0, #219	@ 0xdb
 80092e2:	f7ff fdc5 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 80092e6:	2100      	movs	r1, #0
 80092e8:	2040      	movs	r0, #64	@ 0x40
 80092ea:	f7ff fdc1 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 80092ee:	2100      	movs	r1, #0
 80092f0:	2020      	movs	r0, #32
 80092f2:	f7ff fdbd 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 80092f6:	2100      	movs	r1, #0
 80092f8:	2002      	movs	r0, #2
 80092fa:	f7ff fdb9 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 80092fe:	2100      	movs	r1, #0
 8009300:	208d      	movs	r0, #141	@ 0x8d
 8009302:	f7ff fdb5 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8009306:	2100      	movs	r1, #0
 8009308:	2014      	movs	r0, #20
 800930a:	f7ff fdb1 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800930e:	2100      	movs	r1, #0
 8009310:	20a4      	movs	r0, #164	@ 0xa4
 8009312:	f7ff fdad 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8009316:	2100      	movs	r1, #0
 8009318:	20a6      	movs	r0, #166	@ 0xa6
 800931a:	f7ff fda9 	bl	8008e70 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800931e:	2100      	movs	r1, #0
 8009320:	20af      	movs	r0, #175	@ 0xaf
 8009322:	f7ff fda5 	bl	8008e70 <OLED_WR_Byte>
	OLED_Clear();
 8009326:	f7ff fe13 	bl	8008f50 <OLED_Clear>
}
 800932a:	bf00      	nop
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	58020800 	.word	0x58020800

08009334 <__cvt>:
 8009334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009336:	ed2d 8b02 	vpush	{d8}
 800933a:	eeb0 8b40 	vmov.f64	d8, d0
 800933e:	b085      	sub	sp, #20
 8009340:	4617      	mov	r7, r2
 8009342:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009344:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009346:	ee18 2a90 	vmov	r2, s17
 800934a:	f025 0520 	bic.w	r5, r5, #32
 800934e:	2a00      	cmp	r2, #0
 8009350:	bfb6      	itet	lt
 8009352:	222d      	movlt	r2, #45	@ 0x2d
 8009354:	2200      	movge	r2, #0
 8009356:	eeb1 8b40 	vneglt.f64	d8, d0
 800935a:	2d46      	cmp	r5, #70	@ 0x46
 800935c:	460c      	mov	r4, r1
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	d004      	beq.n	800936c <__cvt+0x38>
 8009362:	2d45      	cmp	r5, #69	@ 0x45
 8009364:	d100      	bne.n	8009368 <__cvt+0x34>
 8009366:	3401      	adds	r4, #1
 8009368:	2102      	movs	r1, #2
 800936a:	e000      	b.n	800936e <__cvt+0x3a>
 800936c:	2103      	movs	r1, #3
 800936e:	ab03      	add	r3, sp, #12
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	ab02      	add	r3, sp, #8
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4622      	mov	r2, r4
 8009378:	4633      	mov	r3, r6
 800937a:	eeb0 0b48 	vmov.f64	d0, d8
 800937e:	f000 fe4b 	bl	800a018 <_dtoa_r>
 8009382:	2d47      	cmp	r5, #71	@ 0x47
 8009384:	d114      	bne.n	80093b0 <__cvt+0x7c>
 8009386:	07fb      	lsls	r3, r7, #31
 8009388:	d50a      	bpl.n	80093a0 <__cvt+0x6c>
 800938a:	1902      	adds	r2, r0, r4
 800938c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009394:	bf08      	it	eq
 8009396:	9203      	streq	r2, [sp, #12]
 8009398:	2130      	movs	r1, #48	@ 0x30
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	4293      	cmp	r3, r2
 800939e:	d319      	bcc.n	80093d4 <__cvt+0xa0>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093a4:	1a1b      	subs	r3, r3, r0
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	b005      	add	sp, #20
 80093aa:	ecbd 8b02 	vpop	{d8}
 80093ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b0:	2d46      	cmp	r5, #70	@ 0x46
 80093b2:	eb00 0204 	add.w	r2, r0, r4
 80093b6:	d1e9      	bne.n	800938c <__cvt+0x58>
 80093b8:	7803      	ldrb	r3, [r0, #0]
 80093ba:	2b30      	cmp	r3, #48	@ 0x30
 80093bc:	d107      	bne.n	80093ce <__cvt+0x9a>
 80093be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c6:	bf1c      	itt	ne
 80093c8:	f1c4 0401 	rsbne	r4, r4, #1
 80093cc:	6034      	strne	r4, [r6, #0]
 80093ce:	6833      	ldr	r3, [r6, #0]
 80093d0:	441a      	add	r2, r3
 80093d2:	e7db      	b.n	800938c <__cvt+0x58>
 80093d4:	1c5c      	adds	r4, r3, #1
 80093d6:	9403      	str	r4, [sp, #12]
 80093d8:	7019      	strb	r1, [r3, #0]
 80093da:	e7de      	b.n	800939a <__cvt+0x66>

080093dc <__exponent>:
 80093dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093de:	2900      	cmp	r1, #0
 80093e0:	bfba      	itte	lt
 80093e2:	4249      	neglt	r1, r1
 80093e4:	232d      	movlt	r3, #45	@ 0x2d
 80093e6:	232b      	movge	r3, #43	@ 0x2b
 80093e8:	2909      	cmp	r1, #9
 80093ea:	7002      	strb	r2, [r0, #0]
 80093ec:	7043      	strb	r3, [r0, #1]
 80093ee:	dd29      	ble.n	8009444 <__exponent+0x68>
 80093f0:	f10d 0307 	add.w	r3, sp, #7
 80093f4:	461d      	mov	r5, r3
 80093f6:	270a      	movs	r7, #10
 80093f8:	461a      	mov	r2, r3
 80093fa:	fbb1 f6f7 	udiv	r6, r1, r7
 80093fe:	fb07 1416 	mls	r4, r7, r6, r1
 8009402:	3430      	adds	r4, #48	@ 0x30
 8009404:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009408:	460c      	mov	r4, r1
 800940a:	2c63      	cmp	r4, #99	@ 0x63
 800940c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009410:	4631      	mov	r1, r6
 8009412:	dcf1      	bgt.n	80093f8 <__exponent+0x1c>
 8009414:	3130      	adds	r1, #48	@ 0x30
 8009416:	1e94      	subs	r4, r2, #2
 8009418:	f803 1c01 	strb.w	r1, [r3, #-1]
 800941c:	1c41      	adds	r1, r0, #1
 800941e:	4623      	mov	r3, r4
 8009420:	42ab      	cmp	r3, r5
 8009422:	d30a      	bcc.n	800943a <__exponent+0x5e>
 8009424:	f10d 0309 	add.w	r3, sp, #9
 8009428:	1a9b      	subs	r3, r3, r2
 800942a:	42ac      	cmp	r4, r5
 800942c:	bf88      	it	hi
 800942e:	2300      	movhi	r3, #0
 8009430:	3302      	adds	r3, #2
 8009432:	4403      	add	r3, r0
 8009434:	1a18      	subs	r0, r3, r0
 8009436:	b003      	add	sp, #12
 8009438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800943a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800943e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009442:	e7ed      	b.n	8009420 <__exponent+0x44>
 8009444:	2330      	movs	r3, #48	@ 0x30
 8009446:	3130      	adds	r1, #48	@ 0x30
 8009448:	7083      	strb	r3, [r0, #2]
 800944a:	70c1      	strb	r1, [r0, #3]
 800944c:	1d03      	adds	r3, r0, #4
 800944e:	e7f1      	b.n	8009434 <__exponent+0x58>

08009450 <_printf_float>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	b08d      	sub	sp, #52	@ 0x34
 8009456:	460c      	mov	r4, r1
 8009458:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800945c:	4616      	mov	r6, r2
 800945e:	461f      	mov	r7, r3
 8009460:	4605      	mov	r5, r0
 8009462:	f000 fccb 	bl	8009dfc <_localeconv_r>
 8009466:	f8d0 b000 	ldr.w	fp, [r0]
 800946a:	4658      	mov	r0, fp
 800946c:	f7f6 ff88 	bl	8000380 <strlen>
 8009470:	2300      	movs	r3, #0
 8009472:	930a      	str	r3, [sp, #40]	@ 0x28
 8009474:	f8d8 3000 	ldr.w	r3, [r8]
 8009478:	f894 9018 	ldrb.w	r9, [r4, #24]
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	9005      	str	r0, [sp, #20]
 8009480:	3307      	adds	r3, #7
 8009482:	f023 0307 	bic.w	r3, r3, #7
 8009486:	f103 0108 	add.w	r1, r3, #8
 800948a:	f8c8 1000 	str.w	r1, [r8]
 800948e:	ed93 0b00 	vldr	d0, [r3]
 8009492:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80096f0 <_printf_float+0x2a0>
 8009496:	eeb0 7bc0 	vabs.f64	d7, d0
 800949a:	eeb4 7b46 	vcmp.f64	d7, d6
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80094a6:	dd24      	ble.n	80094f2 <_printf_float+0xa2>
 80094a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80094ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b0:	d502      	bpl.n	80094b8 <_printf_float+0x68>
 80094b2:	232d      	movs	r3, #45	@ 0x2d
 80094b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094b8:	498f      	ldr	r1, [pc, #572]	@ (80096f8 <_printf_float+0x2a8>)
 80094ba:	4b90      	ldr	r3, [pc, #576]	@ (80096fc <_printf_float+0x2ac>)
 80094bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80094c0:	bf94      	ite	ls
 80094c2:	4688      	movls	r8, r1
 80094c4:	4698      	movhi	r8, r3
 80094c6:	f022 0204 	bic.w	r2, r2, #4
 80094ca:	2303      	movs	r3, #3
 80094cc:	6123      	str	r3, [r4, #16]
 80094ce:	6022      	str	r2, [r4, #0]
 80094d0:	f04f 0a00 	mov.w	sl, #0
 80094d4:	9700      	str	r7, [sp, #0]
 80094d6:	4633      	mov	r3, r6
 80094d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094da:	4621      	mov	r1, r4
 80094dc:	4628      	mov	r0, r5
 80094de:	f000 f9d1 	bl	8009884 <_printf_common>
 80094e2:	3001      	adds	r0, #1
 80094e4:	f040 8089 	bne.w	80095fa <_printf_float+0x1aa>
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	b00d      	add	sp, #52	@ 0x34
 80094ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80094f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fa:	d709      	bvc.n	8009510 <_printf_float+0xc0>
 80094fc:	ee10 3a90 	vmov	r3, s1
 8009500:	2b00      	cmp	r3, #0
 8009502:	bfbc      	itt	lt
 8009504:	232d      	movlt	r3, #45	@ 0x2d
 8009506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800950a:	497d      	ldr	r1, [pc, #500]	@ (8009700 <_printf_float+0x2b0>)
 800950c:	4b7d      	ldr	r3, [pc, #500]	@ (8009704 <_printf_float+0x2b4>)
 800950e:	e7d5      	b.n	80094bc <_printf_float+0x6c>
 8009510:	6863      	ldr	r3, [r4, #4]
 8009512:	1c59      	adds	r1, r3, #1
 8009514:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009518:	d139      	bne.n	800958e <_printf_float+0x13e>
 800951a:	2306      	movs	r3, #6
 800951c:	6063      	str	r3, [r4, #4]
 800951e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009522:	2300      	movs	r3, #0
 8009524:	6022      	str	r2, [r4, #0]
 8009526:	9303      	str	r3, [sp, #12]
 8009528:	ab0a      	add	r3, sp, #40	@ 0x28
 800952a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800952e:	ab09      	add	r3, sp, #36	@ 0x24
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	6861      	ldr	r1, [r4, #4]
 8009534:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009538:	4628      	mov	r0, r5
 800953a:	f7ff fefb 	bl	8009334 <__cvt>
 800953e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009542:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009544:	4680      	mov	r8, r0
 8009546:	d129      	bne.n	800959c <_printf_float+0x14c>
 8009548:	1cc8      	adds	r0, r1, #3
 800954a:	db02      	blt.n	8009552 <_printf_float+0x102>
 800954c:	6863      	ldr	r3, [r4, #4]
 800954e:	4299      	cmp	r1, r3
 8009550:	dd41      	ble.n	80095d6 <_printf_float+0x186>
 8009552:	f1a9 0902 	sub.w	r9, r9, #2
 8009556:	fa5f f989 	uxtb.w	r9, r9
 800955a:	3901      	subs	r1, #1
 800955c:	464a      	mov	r2, r9
 800955e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009562:	9109      	str	r1, [sp, #36]	@ 0x24
 8009564:	f7ff ff3a 	bl	80093dc <__exponent>
 8009568:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800956a:	1813      	adds	r3, r2, r0
 800956c:	2a01      	cmp	r2, #1
 800956e:	4682      	mov	sl, r0
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	dc02      	bgt.n	800957a <_printf_float+0x12a>
 8009574:	6822      	ldr	r2, [r4, #0]
 8009576:	07d2      	lsls	r2, r2, #31
 8009578:	d501      	bpl.n	800957e <_printf_float+0x12e>
 800957a:	3301      	adds	r3, #1
 800957c:	6123      	str	r3, [r4, #16]
 800957e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0a6      	beq.n	80094d4 <_printf_float+0x84>
 8009586:	232d      	movs	r3, #45	@ 0x2d
 8009588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800958c:	e7a2      	b.n	80094d4 <_printf_float+0x84>
 800958e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009592:	d1c4      	bne.n	800951e <_printf_float+0xce>
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1c2      	bne.n	800951e <_printf_float+0xce>
 8009598:	2301      	movs	r3, #1
 800959a:	e7bf      	b.n	800951c <_printf_float+0xcc>
 800959c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80095a0:	d9db      	bls.n	800955a <_printf_float+0x10a>
 80095a2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80095a6:	d118      	bne.n	80095da <_printf_float+0x18a>
 80095a8:	2900      	cmp	r1, #0
 80095aa:	6863      	ldr	r3, [r4, #4]
 80095ac:	dd0b      	ble.n	80095c6 <_printf_float+0x176>
 80095ae:	6121      	str	r1, [r4, #16]
 80095b0:	b913      	cbnz	r3, 80095b8 <_printf_float+0x168>
 80095b2:	6822      	ldr	r2, [r4, #0]
 80095b4:	07d0      	lsls	r0, r2, #31
 80095b6:	d502      	bpl.n	80095be <_printf_float+0x16e>
 80095b8:	3301      	adds	r3, #1
 80095ba:	440b      	add	r3, r1
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095c0:	f04f 0a00 	mov.w	sl, #0
 80095c4:	e7db      	b.n	800957e <_printf_float+0x12e>
 80095c6:	b913      	cbnz	r3, 80095ce <_printf_float+0x17e>
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	07d2      	lsls	r2, r2, #31
 80095cc:	d501      	bpl.n	80095d2 <_printf_float+0x182>
 80095ce:	3302      	adds	r3, #2
 80095d0:	e7f4      	b.n	80095bc <_printf_float+0x16c>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e7f2      	b.n	80095bc <_printf_float+0x16c>
 80095d6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80095da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095dc:	4299      	cmp	r1, r3
 80095de:	db05      	blt.n	80095ec <_printf_float+0x19c>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	6121      	str	r1, [r4, #16]
 80095e4:	07d8      	lsls	r0, r3, #31
 80095e6:	d5ea      	bpl.n	80095be <_printf_float+0x16e>
 80095e8:	1c4b      	adds	r3, r1, #1
 80095ea:	e7e7      	b.n	80095bc <_printf_float+0x16c>
 80095ec:	2900      	cmp	r1, #0
 80095ee:	bfd4      	ite	le
 80095f0:	f1c1 0202 	rsble	r2, r1, #2
 80095f4:	2201      	movgt	r2, #1
 80095f6:	4413      	add	r3, r2
 80095f8:	e7e0      	b.n	80095bc <_printf_float+0x16c>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	055a      	lsls	r2, r3, #21
 80095fe:	d407      	bmi.n	8009610 <_printf_float+0x1c0>
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	4642      	mov	r2, r8
 8009604:	4631      	mov	r1, r6
 8009606:	4628      	mov	r0, r5
 8009608:	47b8      	blx	r7
 800960a:	3001      	adds	r0, #1
 800960c:	d12a      	bne.n	8009664 <_printf_float+0x214>
 800960e:	e76b      	b.n	80094e8 <_printf_float+0x98>
 8009610:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009614:	f240 80e0 	bls.w	80097d8 <_printf_float+0x388>
 8009618:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800961c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009624:	d133      	bne.n	800968e <_printf_float+0x23e>
 8009626:	4a38      	ldr	r2, [pc, #224]	@ (8009708 <_printf_float+0x2b8>)
 8009628:	2301      	movs	r3, #1
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	f43f af59 	beq.w	80094e8 <_printf_float+0x98>
 8009636:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800963a:	4543      	cmp	r3, r8
 800963c:	db02      	blt.n	8009644 <_printf_float+0x1f4>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	07d8      	lsls	r0, r3, #31
 8009642:	d50f      	bpl.n	8009664 <_printf_float+0x214>
 8009644:	9b05      	ldr	r3, [sp, #20]
 8009646:	465a      	mov	r2, fp
 8009648:	4631      	mov	r1, r6
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	f43f af4a 	beq.w	80094e8 <_printf_float+0x98>
 8009654:	f04f 0900 	mov.w	r9, #0
 8009658:	f108 38ff 	add.w	r8, r8, #4294967295
 800965c:	f104 0a1a 	add.w	sl, r4, #26
 8009660:	45c8      	cmp	r8, r9
 8009662:	dc09      	bgt.n	8009678 <_printf_float+0x228>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	079b      	lsls	r3, r3, #30
 8009668:	f100 8107 	bmi.w	800987a <_printf_float+0x42a>
 800966c:	68e0      	ldr	r0, [r4, #12]
 800966e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009670:	4298      	cmp	r0, r3
 8009672:	bfb8      	it	lt
 8009674:	4618      	movlt	r0, r3
 8009676:	e739      	b.n	80094ec <_printf_float+0x9c>
 8009678:	2301      	movs	r3, #1
 800967a:	4652      	mov	r2, sl
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	f43f af30 	beq.w	80094e8 <_printf_float+0x98>
 8009688:	f109 0901 	add.w	r9, r9, #1
 800968c:	e7e8      	b.n	8009660 <_printf_float+0x210>
 800968e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	dc3b      	bgt.n	800970c <_printf_float+0x2bc>
 8009694:	4a1c      	ldr	r2, [pc, #112]	@ (8009708 <_printf_float+0x2b8>)
 8009696:	2301      	movs	r3, #1
 8009698:	4631      	mov	r1, r6
 800969a:	4628      	mov	r0, r5
 800969c:	47b8      	blx	r7
 800969e:	3001      	adds	r0, #1
 80096a0:	f43f af22 	beq.w	80094e8 <_printf_float+0x98>
 80096a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096a8:	ea59 0303 	orrs.w	r3, r9, r3
 80096ac:	d102      	bne.n	80096b4 <_printf_float+0x264>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	07d9      	lsls	r1, r3, #31
 80096b2:	d5d7      	bpl.n	8009664 <_printf_float+0x214>
 80096b4:	9b05      	ldr	r3, [sp, #20]
 80096b6:	465a      	mov	r2, fp
 80096b8:	4631      	mov	r1, r6
 80096ba:	4628      	mov	r0, r5
 80096bc:	47b8      	blx	r7
 80096be:	3001      	adds	r0, #1
 80096c0:	f43f af12 	beq.w	80094e8 <_printf_float+0x98>
 80096c4:	f04f 0a00 	mov.w	sl, #0
 80096c8:	f104 0b1a 	add.w	fp, r4, #26
 80096cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ce:	425b      	negs	r3, r3
 80096d0:	4553      	cmp	r3, sl
 80096d2:	dc01      	bgt.n	80096d8 <_printf_float+0x288>
 80096d4:	464b      	mov	r3, r9
 80096d6:	e794      	b.n	8009602 <_printf_float+0x1b2>
 80096d8:	2301      	movs	r3, #1
 80096da:	465a      	mov	r2, fp
 80096dc:	4631      	mov	r1, r6
 80096de:	4628      	mov	r0, r5
 80096e0:	47b8      	blx	r7
 80096e2:	3001      	adds	r0, #1
 80096e4:	f43f af00 	beq.w	80094e8 <_printf_float+0x98>
 80096e8:	f10a 0a01 	add.w	sl, sl, #1
 80096ec:	e7ee      	b.n	80096cc <_printf_float+0x27c>
 80096ee:	bf00      	nop
 80096f0:	ffffffff 	.word	0xffffffff
 80096f4:	7fefffff 	.word	0x7fefffff
 80096f8:	0800d750 	.word	0x0800d750
 80096fc:	0800d754 	.word	0x0800d754
 8009700:	0800d758 	.word	0x0800d758
 8009704:	0800d75c 	.word	0x0800d75c
 8009708:	0800d760 	.word	0x0800d760
 800970c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800970e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009712:	4553      	cmp	r3, sl
 8009714:	bfa8      	it	ge
 8009716:	4653      	movge	r3, sl
 8009718:	2b00      	cmp	r3, #0
 800971a:	4699      	mov	r9, r3
 800971c:	dc37      	bgt.n	800978e <_printf_float+0x33e>
 800971e:	2300      	movs	r3, #0
 8009720:	9307      	str	r3, [sp, #28]
 8009722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009726:	f104 021a 	add.w	r2, r4, #26
 800972a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800972c:	9907      	ldr	r1, [sp, #28]
 800972e:	9306      	str	r3, [sp, #24]
 8009730:	eba3 0309 	sub.w	r3, r3, r9
 8009734:	428b      	cmp	r3, r1
 8009736:	dc31      	bgt.n	800979c <_printf_float+0x34c>
 8009738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973a:	459a      	cmp	sl, r3
 800973c:	dc3b      	bgt.n	80097b6 <_printf_float+0x366>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	07da      	lsls	r2, r3, #31
 8009742:	d438      	bmi.n	80097b6 <_printf_float+0x366>
 8009744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009746:	ebaa 0903 	sub.w	r9, sl, r3
 800974a:	9b06      	ldr	r3, [sp, #24]
 800974c:	ebaa 0303 	sub.w	r3, sl, r3
 8009750:	4599      	cmp	r9, r3
 8009752:	bfa8      	it	ge
 8009754:	4699      	movge	r9, r3
 8009756:	f1b9 0f00 	cmp.w	r9, #0
 800975a:	dc34      	bgt.n	80097c6 <_printf_float+0x376>
 800975c:	f04f 0800 	mov.w	r8, #0
 8009760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009764:	f104 0b1a 	add.w	fp, r4, #26
 8009768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976a:	ebaa 0303 	sub.w	r3, sl, r3
 800976e:	eba3 0309 	sub.w	r3, r3, r9
 8009772:	4543      	cmp	r3, r8
 8009774:	f77f af76 	ble.w	8009664 <_printf_float+0x214>
 8009778:	2301      	movs	r3, #1
 800977a:	465a      	mov	r2, fp
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f aeb0 	beq.w	80094e8 <_printf_float+0x98>
 8009788:	f108 0801 	add.w	r8, r8, #1
 800978c:	e7ec      	b.n	8009768 <_printf_float+0x318>
 800978e:	4642      	mov	r2, r8
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	47b8      	blx	r7
 8009796:	3001      	adds	r0, #1
 8009798:	d1c1      	bne.n	800971e <_printf_float+0x2ce>
 800979a:	e6a5      	b.n	80094e8 <_printf_float+0x98>
 800979c:	2301      	movs	r3, #1
 800979e:	4631      	mov	r1, r6
 80097a0:	4628      	mov	r0, r5
 80097a2:	9206      	str	r2, [sp, #24]
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f ae9e 	beq.w	80094e8 <_printf_float+0x98>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	9a06      	ldr	r2, [sp, #24]
 80097b0:	3301      	adds	r3, #1
 80097b2:	9307      	str	r3, [sp, #28]
 80097b4:	e7b9      	b.n	800972a <_printf_float+0x2da>
 80097b6:	9b05      	ldr	r3, [sp, #20]
 80097b8:	465a      	mov	r2, fp
 80097ba:	4631      	mov	r1, r6
 80097bc:	4628      	mov	r0, r5
 80097be:	47b8      	blx	r7
 80097c0:	3001      	adds	r0, #1
 80097c2:	d1bf      	bne.n	8009744 <_printf_float+0x2f4>
 80097c4:	e690      	b.n	80094e8 <_printf_float+0x98>
 80097c6:	9a06      	ldr	r2, [sp, #24]
 80097c8:	464b      	mov	r3, r9
 80097ca:	4442      	add	r2, r8
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	47b8      	blx	r7
 80097d2:	3001      	adds	r0, #1
 80097d4:	d1c2      	bne.n	800975c <_printf_float+0x30c>
 80097d6:	e687      	b.n	80094e8 <_printf_float+0x98>
 80097d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80097dc:	f1b9 0f01 	cmp.w	r9, #1
 80097e0:	dc01      	bgt.n	80097e6 <_printf_float+0x396>
 80097e2:	07db      	lsls	r3, r3, #31
 80097e4:	d536      	bpl.n	8009854 <_printf_float+0x404>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4642      	mov	r2, r8
 80097ea:	4631      	mov	r1, r6
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b8      	blx	r7
 80097f0:	3001      	adds	r0, #1
 80097f2:	f43f ae79 	beq.w	80094e8 <_printf_float+0x98>
 80097f6:	9b05      	ldr	r3, [sp, #20]
 80097f8:	465a      	mov	r2, fp
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b8      	blx	r7
 8009800:	3001      	adds	r0, #1
 8009802:	f43f ae71 	beq.w	80094e8 <_printf_float+0x98>
 8009806:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800980a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800980e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009812:	f109 39ff 	add.w	r9, r9, #4294967295
 8009816:	d018      	beq.n	800984a <_printf_float+0x3fa>
 8009818:	464b      	mov	r3, r9
 800981a:	f108 0201 	add.w	r2, r8, #1
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	47b8      	blx	r7
 8009824:	3001      	adds	r0, #1
 8009826:	d10c      	bne.n	8009842 <_printf_float+0x3f2>
 8009828:	e65e      	b.n	80094e8 <_printf_float+0x98>
 800982a:	2301      	movs	r3, #1
 800982c:	465a      	mov	r2, fp
 800982e:	4631      	mov	r1, r6
 8009830:	4628      	mov	r0, r5
 8009832:	47b8      	blx	r7
 8009834:	3001      	adds	r0, #1
 8009836:	f43f ae57 	beq.w	80094e8 <_printf_float+0x98>
 800983a:	f108 0801 	add.w	r8, r8, #1
 800983e:	45c8      	cmp	r8, r9
 8009840:	dbf3      	blt.n	800982a <_printf_float+0x3da>
 8009842:	4653      	mov	r3, sl
 8009844:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009848:	e6dc      	b.n	8009604 <_printf_float+0x1b4>
 800984a:	f04f 0800 	mov.w	r8, #0
 800984e:	f104 0b1a 	add.w	fp, r4, #26
 8009852:	e7f4      	b.n	800983e <_printf_float+0x3ee>
 8009854:	2301      	movs	r3, #1
 8009856:	4642      	mov	r2, r8
 8009858:	e7e1      	b.n	800981e <_printf_float+0x3ce>
 800985a:	2301      	movs	r3, #1
 800985c:	464a      	mov	r2, r9
 800985e:	4631      	mov	r1, r6
 8009860:	4628      	mov	r0, r5
 8009862:	47b8      	blx	r7
 8009864:	3001      	adds	r0, #1
 8009866:	f43f ae3f 	beq.w	80094e8 <_printf_float+0x98>
 800986a:	f108 0801 	add.w	r8, r8, #1
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009872:	1a5b      	subs	r3, r3, r1
 8009874:	4543      	cmp	r3, r8
 8009876:	dcf0      	bgt.n	800985a <_printf_float+0x40a>
 8009878:	e6f8      	b.n	800966c <_printf_float+0x21c>
 800987a:	f04f 0800 	mov.w	r8, #0
 800987e:	f104 0919 	add.w	r9, r4, #25
 8009882:	e7f4      	b.n	800986e <_printf_float+0x41e>

08009884 <_printf_common>:
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	4616      	mov	r6, r2
 800988a:	4698      	mov	r8, r3
 800988c:	688a      	ldr	r2, [r1, #8]
 800988e:	690b      	ldr	r3, [r1, #16]
 8009890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009894:	4293      	cmp	r3, r2
 8009896:	bfb8      	it	lt
 8009898:	4613      	movlt	r3, r2
 800989a:	6033      	str	r3, [r6, #0]
 800989c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098a0:	4607      	mov	r7, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	b10a      	cbz	r2, 80098aa <_printf_common+0x26>
 80098a6:	3301      	adds	r3, #1
 80098a8:	6033      	str	r3, [r6, #0]
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	0699      	lsls	r1, r3, #26
 80098ae:	bf42      	ittt	mi
 80098b0:	6833      	ldrmi	r3, [r6, #0]
 80098b2:	3302      	addmi	r3, #2
 80098b4:	6033      	strmi	r3, [r6, #0]
 80098b6:	6825      	ldr	r5, [r4, #0]
 80098b8:	f015 0506 	ands.w	r5, r5, #6
 80098bc:	d106      	bne.n	80098cc <_printf_common+0x48>
 80098be:	f104 0a19 	add.w	sl, r4, #25
 80098c2:	68e3      	ldr	r3, [r4, #12]
 80098c4:	6832      	ldr	r2, [r6, #0]
 80098c6:	1a9b      	subs	r3, r3, r2
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	dc26      	bgt.n	800991a <_printf_common+0x96>
 80098cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098d0:	6822      	ldr	r2, [r4, #0]
 80098d2:	3b00      	subs	r3, #0
 80098d4:	bf18      	it	ne
 80098d6:	2301      	movne	r3, #1
 80098d8:	0692      	lsls	r2, r2, #26
 80098da:	d42b      	bmi.n	8009934 <_printf_common+0xb0>
 80098dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098e0:	4641      	mov	r1, r8
 80098e2:	4638      	mov	r0, r7
 80098e4:	47c8      	blx	r9
 80098e6:	3001      	adds	r0, #1
 80098e8:	d01e      	beq.n	8009928 <_printf_common+0xa4>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	6922      	ldr	r2, [r4, #16]
 80098ee:	f003 0306 	and.w	r3, r3, #6
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	bf02      	ittt	eq
 80098f6:	68e5      	ldreq	r5, [r4, #12]
 80098f8:	6833      	ldreq	r3, [r6, #0]
 80098fa:	1aed      	subeq	r5, r5, r3
 80098fc:	68a3      	ldr	r3, [r4, #8]
 80098fe:	bf0c      	ite	eq
 8009900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009904:	2500      	movne	r5, #0
 8009906:	4293      	cmp	r3, r2
 8009908:	bfc4      	itt	gt
 800990a:	1a9b      	subgt	r3, r3, r2
 800990c:	18ed      	addgt	r5, r5, r3
 800990e:	2600      	movs	r6, #0
 8009910:	341a      	adds	r4, #26
 8009912:	42b5      	cmp	r5, r6
 8009914:	d11a      	bne.n	800994c <_printf_common+0xc8>
 8009916:	2000      	movs	r0, #0
 8009918:	e008      	b.n	800992c <_printf_common+0xa8>
 800991a:	2301      	movs	r3, #1
 800991c:	4652      	mov	r2, sl
 800991e:	4641      	mov	r1, r8
 8009920:	4638      	mov	r0, r7
 8009922:	47c8      	blx	r9
 8009924:	3001      	adds	r0, #1
 8009926:	d103      	bne.n	8009930 <_printf_common+0xac>
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009930:	3501      	adds	r5, #1
 8009932:	e7c6      	b.n	80098c2 <_printf_common+0x3e>
 8009934:	18e1      	adds	r1, r4, r3
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	2030      	movs	r0, #48	@ 0x30
 800993a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800993e:	4422      	add	r2, r4
 8009940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009948:	3302      	adds	r3, #2
 800994a:	e7c7      	b.n	80098dc <_printf_common+0x58>
 800994c:	2301      	movs	r3, #1
 800994e:	4622      	mov	r2, r4
 8009950:	4641      	mov	r1, r8
 8009952:	4638      	mov	r0, r7
 8009954:	47c8      	blx	r9
 8009956:	3001      	adds	r0, #1
 8009958:	d0e6      	beq.n	8009928 <_printf_common+0xa4>
 800995a:	3601      	adds	r6, #1
 800995c:	e7d9      	b.n	8009912 <_printf_common+0x8e>
	...

08009960 <_printf_i>:
 8009960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009964:	7e0f      	ldrb	r7, [r1, #24]
 8009966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009968:	2f78      	cmp	r7, #120	@ 0x78
 800996a:	4691      	mov	r9, r2
 800996c:	4680      	mov	r8, r0
 800996e:	460c      	mov	r4, r1
 8009970:	469a      	mov	sl, r3
 8009972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009976:	d807      	bhi.n	8009988 <_printf_i+0x28>
 8009978:	2f62      	cmp	r7, #98	@ 0x62
 800997a:	d80a      	bhi.n	8009992 <_printf_i+0x32>
 800997c:	2f00      	cmp	r7, #0
 800997e:	f000 80d2 	beq.w	8009b26 <_printf_i+0x1c6>
 8009982:	2f58      	cmp	r7, #88	@ 0x58
 8009984:	f000 80b9 	beq.w	8009afa <_printf_i+0x19a>
 8009988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800998c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009990:	e03a      	b.n	8009a08 <_printf_i+0xa8>
 8009992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009996:	2b15      	cmp	r3, #21
 8009998:	d8f6      	bhi.n	8009988 <_printf_i+0x28>
 800999a:	a101      	add	r1, pc, #4	@ (adr r1, 80099a0 <_printf_i+0x40>)
 800999c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099a0:	080099f9 	.word	0x080099f9
 80099a4:	08009a0d 	.word	0x08009a0d
 80099a8:	08009989 	.word	0x08009989
 80099ac:	08009989 	.word	0x08009989
 80099b0:	08009989 	.word	0x08009989
 80099b4:	08009989 	.word	0x08009989
 80099b8:	08009a0d 	.word	0x08009a0d
 80099bc:	08009989 	.word	0x08009989
 80099c0:	08009989 	.word	0x08009989
 80099c4:	08009989 	.word	0x08009989
 80099c8:	08009989 	.word	0x08009989
 80099cc:	08009b0d 	.word	0x08009b0d
 80099d0:	08009a37 	.word	0x08009a37
 80099d4:	08009ac7 	.word	0x08009ac7
 80099d8:	08009989 	.word	0x08009989
 80099dc:	08009989 	.word	0x08009989
 80099e0:	08009b2f 	.word	0x08009b2f
 80099e4:	08009989 	.word	0x08009989
 80099e8:	08009a37 	.word	0x08009a37
 80099ec:	08009989 	.word	0x08009989
 80099f0:	08009989 	.word	0x08009989
 80099f4:	08009acf 	.word	0x08009acf
 80099f8:	6833      	ldr	r3, [r6, #0]
 80099fa:	1d1a      	adds	r2, r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6032      	str	r2, [r6, #0]
 8009a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e09d      	b.n	8009b48 <_printf_i+0x1e8>
 8009a0c:	6833      	ldr	r3, [r6, #0]
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	1d19      	adds	r1, r3, #4
 8009a12:	6031      	str	r1, [r6, #0]
 8009a14:	0606      	lsls	r6, r0, #24
 8009a16:	d501      	bpl.n	8009a1c <_printf_i+0xbc>
 8009a18:	681d      	ldr	r5, [r3, #0]
 8009a1a:	e003      	b.n	8009a24 <_printf_i+0xc4>
 8009a1c:	0645      	lsls	r5, r0, #25
 8009a1e:	d5fb      	bpl.n	8009a18 <_printf_i+0xb8>
 8009a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	da03      	bge.n	8009a30 <_printf_i+0xd0>
 8009a28:	232d      	movs	r3, #45	@ 0x2d
 8009a2a:	426d      	negs	r5, r5
 8009a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a30:	4859      	ldr	r0, [pc, #356]	@ (8009b98 <_printf_i+0x238>)
 8009a32:	230a      	movs	r3, #10
 8009a34:	e011      	b.n	8009a5a <_printf_i+0xfa>
 8009a36:	6821      	ldr	r1, [r4, #0]
 8009a38:	6833      	ldr	r3, [r6, #0]
 8009a3a:	0608      	lsls	r0, r1, #24
 8009a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a40:	d402      	bmi.n	8009a48 <_printf_i+0xe8>
 8009a42:	0649      	lsls	r1, r1, #25
 8009a44:	bf48      	it	mi
 8009a46:	b2ad      	uxthmi	r5, r5
 8009a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a4a:	4853      	ldr	r0, [pc, #332]	@ (8009b98 <_printf_i+0x238>)
 8009a4c:	6033      	str	r3, [r6, #0]
 8009a4e:	bf14      	ite	ne
 8009a50:	230a      	movne	r3, #10
 8009a52:	2308      	moveq	r3, #8
 8009a54:	2100      	movs	r1, #0
 8009a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a5a:	6866      	ldr	r6, [r4, #4]
 8009a5c:	60a6      	str	r6, [r4, #8]
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	bfa2      	ittt	ge
 8009a62:	6821      	ldrge	r1, [r4, #0]
 8009a64:	f021 0104 	bicge.w	r1, r1, #4
 8009a68:	6021      	strge	r1, [r4, #0]
 8009a6a:	b90d      	cbnz	r5, 8009a70 <_printf_i+0x110>
 8009a6c:	2e00      	cmp	r6, #0
 8009a6e:	d04b      	beq.n	8009b08 <_printf_i+0x1a8>
 8009a70:	4616      	mov	r6, r2
 8009a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a76:	fb03 5711 	mls	r7, r3, r1, r5
 8009a7a:	5dc7      	ldrb	r7, [r0, r7]
 8009a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a80:	462f      	mov	r7, r5
 8009a82:	42bb      	cmp	r3, r7
 8009a84:	460d      	mov	r5, r1
 8009a86:	d9f4      	bls.n	8009a72 <_printf_i+0x112>
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d10b      	bne.n	8009aa4 <_printf_i+0x144>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	07df      	lsls	r7, r3, #31
 8009a90:	d508      	bpl.n	8009aa4 <_printf_i+0x144>
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	6861      	ldr	r1, [r4, #4]
 8009a96:	4299      	cmp	r1, r3
 8009a98:	bfde      	ittt	le
 8009a9a:	2330      	movle	r3, #48	@ 0x30
 8009a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009aa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009aa4:	1b92      	subs	r2, r2, r6
 8009aa6:	6122      	str	r2, [r4, #16]
 8009aa8:	f8cd a000 	str.w	sl, [sp]
 8009aac:	464b      	mov	r3, r9
 8009aae:	aa03      	add	r2, sp, #12
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	f7ff fee6 	bl	8009884 <_printf_common>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d14a      	bne.n	8009b52 <_printf_i+0x1f2>
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	b004      	add	sp, #16
 8009ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f043 0320 	orr.w	r3, r3, #32
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	4833      	ldr	r0, [pc, #204]	@ (8009b9c <_printf_i+0x23c>)
 8009ad0:	2778      	movs	r7, #120	@ 0x78
 8009ad2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	6831      	ldr	r1, [r6, #0]
 8009ada:	061f      	lsls	r7, r3, #24
 8009adc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ae0:	d402      	bmi.n	8009ae8 <_printf_i+0x188>
 8009ae2:	065f      	lsls	r7, r3, #25
 8009ae4:	bf48      	it	mi
 8009ae6:	b2ad      	uxthmi	r5, r5
 8009ae8:	6031      	str	r1, [r6, #0]
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	bf44      	itt	mi
 8009aee:	f043 0320 	orrmi.w	r3, r3, #32
 8009af2:	6023      	strmi	r3, [r4, #0]
 8009af4:	b11d      	cbz	r5, 8009afe <_printf_i+0x19e>
 8009af6:	2310      	movs	r3, #16
 8009af8:	e7ac      	b.n	8009a54 <_printf_i+0xf4>
 8009afa:	4827      	ldr	r0, [pc, #156]	@ (8009b98 <_printf_i+0x238>)
 8009afc:	e7e9      	b.n	8009ad2 <_printf_i+0x172>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	f023 0320 	bic.w	r3, r3, #32
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	e7f6      	b.n	8009af6 <_printf_i+0x196>
 8009b08:	4616      	mov	r6, r2
 8009b0a:	e7bd      	b.n	8009a88 <_printf_i+0x128>
 8009b0c:	6833      	ldr	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	6961      	ldr	r1, [r4, #20]
 8009b12:	1d18      	adds	r0, r3, #4
 8009b14:	6030      	str	r0, [r6, #0]
 8009b16:	062e      	lsls	r6, r5, #24
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	d501      	bpl.n	8009b20 <_printf_i+0x1c0>
 8009b1c:	6019      	str	r1, [r3, #0]
 8009b1e:	e002      	b.n	8009b26 <_printf_i+0x1c6>
 8009b20:	0668      	lsls	r0, r5, #25
 8009b22:	d5fb      	bpl.n	8009b1c <_printf_i+0x1bc>
 8009b24:	8019      	strh	r1, [r3, #0]
 8009b26:	2300      	movs	r3, #0
 8009b28:	6123      	str	r3, [r4, #16]
 8009b2a:	4616      	mov	r6, r2
 8009b2c:	e7bc      	b.n	8009aa8 <_printf_i+0x148>
 8009b2e:	6833      	ldr	r3, [r6, #0]
 8009b30:	1d1a      	adds	r2, r3, #4
 8009b32:	6032      	str	r2, [r6, #0]
 8009b34:	681e      	ldr	r6, [r3, #0]
 8009b36:	6862      	ldr	r2, [r4, #4]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7f6 fbd0 	bl	80002e0 <memchr>
 8009b40:	b108      	cbz	r0, 8009b46 <_printf_i+0x1e6>
 8009b42:	1b80      	subs	r0, r0, r6
 8009b44:	6060      	str	r0, [r4, #4]
 8009b46:	6863      	ldr	r3, [r4, #4]
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b50:	e7aa      	b.n	8009aa8 <_printf_i+0x148>
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	4632      	mov	r2, r6
 8009b56:	4649      	mov	r1, r9
 8009b58:	4640      	mov	r0, r8
 8009b5a:	47d0      	blx	sl
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d0ad      	beq.n	8009abc <_printf_i+0x15c>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	079b      	lsls	r3, r3, #30
 8009b64:	d413      	bmi.n	8009b8e <_printf_i+0x22e>
 8009b66:	68e0      	ldr	r0, [r4, #12]
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	4298      	cmp	r0, r3
 8009b6c:	bfb8      	it	lt
 8009b6e:	4618      	movlt	r0, r3
 8009b70:	e7a6      	b.n	8009ac0 <_printf_i+0x160>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4632      	mov	r2, r6
 8009b76:	4649      	mov	r1, r9
 8009b78:	4640      	mov	r0, r8
 8009b7a:	47d0      	blx	sl
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d09d      	beq.n	8009abc <_printf_i+0x15c>
 8009b80:	3501      	adds	r5, #1
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	9903      	ldr	r1, [sp, #12]
 8009b86:	1a5b      	subs	r3, r3, r1
 8009b88:	42ab      	cmp	r3, r5
 8009b8a:	dcf2      	bgt.n	8009b72 <_printf_i+0x212>
 8009b8c:	e7eb      	b.n	8009b66 <_printf_i+0x206>
 8009b8e:	2500      	movs	r5, #0
 8009b90:	f104 0619 	add.w	r6, r4, #25
 8009b94:	e7f5      	b.n	8009b82 <_printf_i+0x222>
 8009b96:	bf00      	nop
 8009b98:	0800d762 	.word	0x0800d762
 8009b9c:	0800d773 	.word	0x0800d773

08009ba0 <std>:
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	b510      	push	{r4, lr}
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8009baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bae:	6083      	str	r3, [r0, #8]
 8009bb0:	8181      	strh	r1, [r0, #12]
 8009bb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bb4:	81c2      	strh	r2, [r0, #14]
 8009bb6:	6183      	str	r3, [r0, #24]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	2208      	movs	r2, #8
 8009bbc:	305c      	adds	r0, #92	@ 0x5c
 8009bbe:	f000 f914 	bl	8009dea <memset>
 8009bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf8 <std+0x58>)
 8009bc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bfc <std+0x5c>)
 8009bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bca:	4b0d      	ldr	r3, [pc, #52]	@ (8009c00 <std+0x60>)
 8009bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bce:	4b0d      	ldr	r3, [pc, #52]	@ (8009c04 <std+0x64>)
 8009bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c08 <std+0x68>)
 8009bd4:	6224      	str	r4, [r4, #32]
 8009bd6:	429c      	cmp	r4, r3
 8009bd8:	d006      	beq.n	8009be8 <std+0x48>
 8009bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bde:	4294      	cmp	r4, r2
 8009be0:	d002      	beq.n	8009be8 <std+0x48>
 8009be2:	33d0      	adds	r3, #208	@ 0xd0
 8009be4:	429c      	cmp	r4, r3
 8009be6:	d105      	bne.n	8009bf4 <std+0x54>
 8009be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf0:	f000 b978 	b.w	8009ee4 <__retarget_lock_init_recursive>
 8009bf4:	bd10      	pop	{r4, pc}
 8009bf6:	bf00      	nop
 8009bf8:	08009d65 	.word	0x08009d65
 8009bfc:	08009d87 	.word	0x08009d87
 8009c00:	08009dbf 	.word	0x08009dbf
 8009c04:	08009de3 	.word	0x08009de3
 8009c08:	240051c0 	.word	0x240051c0

08009c0c <stdio_exit_handler>:
 8009c0c:	4a02      	ldr	r2, [pc, #8]	@ (8009c18 <stdio_exit_handler+0xc>)
 8009c0e:	4903      	ldr	r1, [pc, #12]	@ (8009c1c <stdio_exit_handler+0x10>)
 8009c10:	4803      	ldr	r0, [pc, #12]	@ (8009c20 <stdio_exit_handler+0x14>)
 8009c12:	f000 b869 	b.w	8009ce8 <_fwalk_sglue>
 8009c16:	bf00      	nop
 8009c18:	24000014 	.word	0x24000014
 8009c1c:	0800b781 	.word	0x0800b781
 8009c20:	24000024 	.word	0x24000024

08009c24 <cleanup_stdio>:
 8009c24:	6841      	ldr	r1, [r0, #4]
 8009c26:	4b0c      	ldr	r3, [pc, #48]	@ (8009c58 <cleanup_stdio+0x34>)
 8009c28:	4299      	cmp	r1, r3
 8009c2a:	b510      	push	{r4, lr}
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	d001      	beq.n	8009c34 <cleanup_stdio+0x10>
 8009c30:	f001 fda6 	bl	800b780 <_fflush_r>
 8009c34:	68a1      	ldr	r1, [r4, #8]
 8009c36:	4b09      	ldr	r3, [pc, #36]	@ (8009c5c <cleanup_stdio+0x38>)
 8009c38:	4299      	cmp	r1, r3
 8009c3a:	d002      	beq.n	8009c42 <cleanup_stdio+0x1e>
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f001 fd9f 	bl	800b780 <_fflush_r>
 8009c42:	68e1      	ldr	r1, [r4, #12]
 8009c44:	4b06      	ldr	r3, [pc, #24]	@ (8009c60 <cleanup_stdio+0x3c>)
 8009c46:	4299      	cmp	r1, r3
 8009c48:	d004      	beq.n	8009c54 <cleanup_stdio+0x30>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c50:	f001 bd96 	b.w	800b780 <_fflush_r>
 8009c54:	bd10      	pop	{r4, pc}
 8009c56:	bf00      	nop
 8009c58:	240051c0 	.word	0x240051c0
 8009c5c:	24005228 	.word	0x24005228
 8009c60:	24005290 	.word	0x24005290

08009c64 <global_stdio_init.part.0>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <global_stdio_init.part.0+0x30>)
 8009c68:	4c0b      	ldr	r4, [pc, #44]	@ (8009c98 <global_stdio_init.part.0+0x34>)
 8009c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c9c <global_stdio_init.part.0+0x38>)
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	4620      	mov	r0, r4
 8009c70:	2200      	movs	r2, #0
 8009c72:	2104      	movs	r1, #4
 8009c74:	f7ff ff94 	bl	8009ba0 <std>
 8009c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	2109      	movs	r1, #9
 8009c80:	f7ff ff8e 	bl	8009ba0 <std>
 8009c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c88:	2202      	movs	r2, #2
 8009c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c8e:	2112      	movs	r1, #18
 8009c90:	f7ff bf86 	b.w	8009ba0 <std>
 8009c94:	240052f8 	.word	0x240052f8
 8009c98:	240051c0 	.word	0x240051c0
 8009c9c:	08009c0d 	.word	0x08009c0d

08009ca0 <__sfp_lock_acquire>:
 8009ca0:	4801      	ldr	r0, [pc, #4]	@ (8009ca8 <__sfp_lock_acquire+0x8>)
 8009ca2:	f000 b920 	b.w	8009ee6 <__retarget_lock_acquire_recursive>
 8009ca6:	bf00      	nop
 8009ca8:	24005301 	.word	0x24005301

08009cac <__sfp_lock_release>:
 8009cac:	4801      	ldr	r0, [pc, #4]	@ (8009cb4 <__sfp_lock_release+0x8>)
 8009cae:	f000 b91b 	b.w	8009ee8 <__retarget_lock_release_recursive>
 8009cb2:	bf00      	nop
 8009cb4:	24005301 	.word	0x24005301

08009cb8 <__sinit>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	4604      	mov	r4, r0
 8009cbc:	f7ff fff0 	bl	8009ca0 <__sfp_lock_acquire>
 8009cc0:	6a23      	ldr	r3, [r4, #32]
 8009cc2:	b11b      	cbz	r3, 8009ccc <__sinit+0x14>
 8009cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc8:	f7ff bff0 	b.w	8009cac <__sfp_lock_release>
 8009ccc:	4b04      	ldr	r3, [pc, #16]	@ (8009ce0 <__sinit+0x28>)
 8009cce:	6223      	str	r3, [r4, #32]
 8009cd0:	4b04      	ldr	r3, [pc, #16]	@ (8009ce4 <__sinit+0x2c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1f5      	bne.n	8009cc4 <__sinit+0xc>
 8009cd8:	f7ff ffc4 	bl	8009c64 <global_stdio_init.part.0>
 8009cdc:	e7f2      	b.n	8009cc4 <__sinit+0xc>
 8009cde:	bf00      	nop
 8009ce0:	08009c25 	.word	0x08009c25
 8009ce4:	240052f8 	.word	0x240052f8

08009ce8 <_fwalk_sglue>:
 8009ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cec:	4607      	mov	r7, r0
 8009cee:	4688      	mov	r8, r1
 8009cf0:	4614      	mov	r4, r2
 8009cf2:	2600      	movs	r6, #0
 8009cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8009cfc:	d505      	bpl.n	8009d0a <_fwalk_sglue+0x22>
 8009cfe:	6824      	ldr	r4, [r4, #0]
 8009d00:	2c00      	cmp	r4, #0
 8009d02:	d1f7      	bne.n	8009cf4 <_fwalk_sglue+0xc>
 8009d04:	4630      	mov	r0, r6
 8009d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	89ab      	ldrh	r3, [r5, #12]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d907      	bls.n	8009d20 <_fwalk_sglue+0x38>
 8009d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d14:	3301      	adds	r3, #1
 8009d16:	d003      	beq.n	8009d20 <_fwalk_sglue+0x38>
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	47c0      	blx	r8
 8009d1e:	4306      	orrs	r6, r0
 8009d20:	3568      	adds	r5, #104	@ 0x68
 8009d22:	e7e9      	b.n	8009cf8 <_fwalk_sglue+0x10>

08009d24 <siprintf>:
 8009d24:	b40e      	push	{r1, r2, r3}
 8009d26:	b500      	push	{lr}
 8009d28:	b09c      	sub	sp, #112	@ 0x70
 8009d2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009d2c:	9002      	str	r0, [sp, #8]
 8009d2e:	9006      	str	r0, [sp, #24]
 8009d30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d34:	4809      	ldr	r0, [pc, #36]	@ (8009d5c <siprintf+0x38>)
 8009d36:	9107      	str	r1, [sp, #28]
 8009d38:	9104      	str	r1, [sp, #16]
 8009d3a:	4909      	ldr	r1, [pc, #36]	@ (8009d60 <siprintf+0x3c>)
 8009d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d40:	9105      	str	r1, [sp, #20]
 8009d42:	6800      	ldr	r0, [r0, #0]
 8009d44:	9301      	str	r3, [sp, #4]
 8009d46:	a902      	add	r1, sp, #8
 8009d48:	f001 fb9a 	bl	800b480 <_svfiprintf_r>
 8009d4c:	9b02      	ldr	r3, [sp, #8]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
 8009d52:	b01c      	add	sp, #112	@ 0x70
 8009d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	24000020 	.word	0x24000020
 8009d60:	ffff0208 	.word	0xffff0208

08009d64 <__sread>:
 8009d64:	b510      	push	{r4, lr}
 8009d66:	460c      	mov	r4, r1
 8009d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6c:	f000 f86c 	bl	8009e48 <_read_r>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	bfab      	itete	ge
 8009d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d76:	89a3      	ldrhlt	r3, [r4, #12]
 8009d78:	181b      	addge	r3, r3, r0
 8009d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d7e:	bfac      	ite	ge
 8009d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d82:	81a3      	strhlt	r3, [r4, #12]
 8009d84:	bd10      	pop	{r4, pc}

08009d86 <__swrite>:
 8009d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	898b      	ldrh	r3, [r1, #12]
 8009d8e:	05db      	lsls	r3, r3, #23
 8009d90:	4605      	mov	r5, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	4616      	mov	r6, r2
 8009d96:	d505      	bpl.n	8009da4 <__swrite+0x1e>
 8009d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f000 f840 	bl	8009e24 <_lseek_r>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	4632      	mov	r2, r6
 8009db2:	463b      	mov	r3, r7
 8009db4:	4628      	mov	r0, r5
 8009db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dba:	f000 b857 	b.w	8009e6c <_write_r>

08009dbe <__sseek>:
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc6:	f000 f82d 	bl	8009e24 <_lseek_r>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	bf15      	itete	ne
 8009dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dda:	81a3      	strheq	r3, [r4, #12]
 8009ddc:	bf18      	it	ne
 8009dde:	81a3      	strhne	r3, [r4, #12]
 8009de0:	bd10      	pop	{r4, pc}

08009de2 <__sclose>:
 8009de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de6:	f000 b80d 	b.w	8009e04 <_close_r>

08009dea <memset>:
 8009dea:	4402      	add	r2, r0
 8009dec:	4603      	mov	r3, r0
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d100      	bne.n	8009df4 <memset+0xa>
 8009df2:	4770      	bx	lr
 8009df4:	f803 1b01 	strb.w	r1, [r3], #1
 8009df8:	e7f9      	b.n	8009dee <memset+0x4>
	...

08009dfc <_localeconv_r>:
 8009dfc:	4800      	ldr	r0, [pc, #0]	@ (8009e00 <_localeconv_r+0x4>)
 8009dfe:	4770      	bx	lr
 8009e00:	24000160 	.word	0x24000160

08009e04 <_close_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	@ (8009e20 <_close_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f7f7 f8a8 	bl	8000f64 <_close>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_close_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_close_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	240052fc 	.word	0x240052fc

08009e24 <_lseek_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	@ (8009e44 <_lseek_r+0x20>)
 8009e28:	4604      	mov	r4, r0
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f7f7 f8bd 	bl	8000fb2 <_lseek>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_lseek_r+0x1e>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_lseek_r+0x1e>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	240052fc 	.word	0x240052fc

08009e48 <_read_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	@ (8009e68 <_read_r+0x20>)
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f7 f84b 	bl	8000ef2 <_read>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_read_r+0x1e>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_read_r+0x1e>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	240052fc 	.word	0x240052fc

08009e6c <_write_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d07      	ldr	r5, [pc, #28]	@ (8009e8c <_write_r+0x20>)
 8009e70:	4604      	mov	r4, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	4611      	mov	r1, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	602a      	str	r2, [r5, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f7f7 f856 	bl	8000f2c <_write>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_write_r+0x1e>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_write_r+0x1e>
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	240052fc 	.word	0x240052fc

08009e90 <__errno>:
 8009e90:	4b01      	ldr	r3, [pc, #4]	@ (8009e98 <__errno+0x8>)
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	24000020 	.word	0x24000020

08009e9c <__libc_init_array>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8009ed4 <__libc_init_array+0x38>)
 8009ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8009ed8 <__libc_init_array+0x3c>)
 8009ea2:	1b64      	subs	r4, r4, r5
 8009ea4:	10a4      	asrs	r4, r4, #2
 8009ea6:	2600      	movs	r6, #0
 8009ea8:	42a6      	cmp	r6, r4
 8009eaa:	d109      	bne.n	8009ec0 <__libc_init_array+0x24>
 8009eac:	4d0b      	ldr	r5, [pc, #44]	@ (8009edc <__libc_init_array+0x40>)
 8009eae:	4c0c      	ldr	r4, [pc, #48]	@ (8009ee0 <__libc_init_array+0x44>)
 8009eb0:	f001 fff6 	bl	800bea0 <_init>
 8009eb4:	1b64      	subs	r4, r4, r5
 8009eb6:	10a4      	asrs	r4, r4, #2
 8009eb8:	2600      	movs	r6, #0
 8009eba:	42a6      	cmp	r6, r4
 8009ebc:	d105      	bne.n	8009eca <__libc_init_array+0x2e>
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}
 8009ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec4:	4798      	blx	r3
 8009ec6:	3601      	adds	r6, #1
 8009ec8:	e7ee      	b.n	8009ea8 <__libc_init_array+0xc>
 8009eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ece:	4798      	blx	r3
 8009ed0:	3601      	adds	r6, #1
 8009ed2:	e7f2      	b.n	8009eba <__libc_init_array+0x1e>
 8009ed4:	0800dac8 	.word	0x0800dac8
 8009ed8:	0800dac8 	.word	0x0800dac8
 8009edc:	0800dac8 	.word	0x0800dac8
 8009ee0:	0800dacc 	.word	0x0800dacc

08009ee4 <__retarget_lock_init_recursive>:
 8009ee4:	4770      	bx	lr

08009ee6 <__retarget_lock_acquire_recursive>:
 8009ee6:	4770      	bx	lr

08009ee8 <__retarget_lock_release_recursive>:
 8009ee8:	4770      	bx	lr

08009eea <memcpy>:
 8009eea:	440a      	add	r2, r1
 8009eec:	4291      	cmp	r1, r2
 8009eee:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ef2:	d100      	bne.n	8009ef6 <memcpy+0xc>
 8009ef4:	4770      	bx	lr
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f00:	4291      	cmp	r1, r2
 8009f02:	d1f9      	bne.n	8009ef8 <memcpy+0xe>
 8009f04:	bd10      	pop	{r4, pc}

08009f06 <quorem>:
 8009f06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0a:	6903      	ldr	r3, [r0, #16]
 8009f0c:	690c      	ldr	r4, [r1, #16]
 8009f0e:	42a3      	cmp	r3, r4
 8009f10:	4607      	mov	r7, r0
 8009f12:	db7e      	blt.n	800a012 <quorem+0x10c>
 8009f14:	3c01      	subs	r4, #1
 8009f16:	f101 0814 	add.w	r8, r1, #20
 8009f1a:	00a3      	lsls	r3, r4, #2
 8009f1c:	f100 0514 	add.w	r5, r0, #20
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f30:	3301      	adds	r3, #1
 8009f32:	429a      	cmp	r2, r3
 8009f34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f38:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f3c:	d32e      	bcc.n	8009f9c <quorem+0x96>
 8009f3e:	f04f 0a00 	mov.w	sl, #0
 8009f42:	46c4      	mov	ip, r8
 8009f44:	46ae      	mov	lr, r5
 8009f46:	46d3      	mov	fp, sl
 8009f48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f4c:	b298      	uxth	r0, r3
 8009f4e:	fb06 a000 	mla	r0, r6, r0, sl
 8009f52:	0c02      	lsrs	r2, r0, #16
 8009f54:	0c1b      	lsrs	r3, r3, #16
 8009f56:	fb06 2303 	mla	r3, r6, r3, r2
 8009f5a:	f8de 2000 	ldr.w	r2, [lr]
 8009f5e:	b280      	uxth	r0, r0
 8009f60:	b292      	uxth	r2, r2
 8009f62:	1a12      	subs	r2, r2, r0
 8009f64:	445a      	add	r2, fp
 8009f66:	f8de 0000 	ldr.w	r0, [lr]
 8009f6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f78:	b292      	uxth	r2, r2
 8009f7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f7e:	45e1      	cmp	r9, ip
 8009f80:	f84e 2b04 	str.w	r2, [lr], #4
 8009f84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f88:	d2de      	bcs.n	8009f48 <quorem+0x42>
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	58eb      	ldr	r3, [r5, r3]
 8009f8e:	b92b      	cbnz	r3, 8009f9c <quorem+0x96>
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	3b04      	subs	r3, #4
 8009f94:	429d      	cmp	r5, r3
 8009f96:	461a      	mov	r2, r3
 8009f98:	d32f      	bcc.n	8009ffa <quorem+0xf4>
 8009f9a:	613c      	str	r4, [r7, #16]
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f001 f90b 	bl	800b1b8 <__mcmp>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	db25      	blt.n	8009ff2 <quorem+0xec>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fae:	f8d1 c000 	ldr.w	ip, [r1]
 8009fb2:	fa1f fe82 	uxth.w	lr, r2
 8009fb6:	fa1f f38c 	uxth.w	r3, ip
 8009fba:	eba3 030e 	sub.w	r3, r3, lr
 8009fbe:	4403      	add	r3, r0
 8009fc0:	0c12      	lsrs	r2, r2, #16
 8009fc2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009fc6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fd0:	45c1      	cmp	r9, r8
 8009fd2:	f841 3b04 	str.w	r3, [r1], #4
 8009fd6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fda:	d2e6      	bcs.n	8009faa <quorem+0xa4>
 8009fdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fe4:	b922      	cbnz	r2, 8009ff0 <quorem+0xea>
 8009fe6:	3b04      	subs	r3, #4
 8009fe8:	429d      	cmp	r5, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	d30b      	bcc.n	800a006 <quorem+0x100>
 8009fee:	613c      	str	r4, [r7, #16]
 8009ff0:	3601      	adds	r6, #1
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	b003      	add	sp, #12
 8009ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffa:	6812      	ldr	r2, [r2, #0]
 8009ffc:	3b04      	subs	r3, #4
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	d1cb      	bne.n	8009f9a <quorem+0x94>
 800a002:	3c01      	subs	r4, #1
 800a004:	e7c6      	b.n	8009f94 <quorem+0x8e>
 800a006:	6812      	ldr	r2, [r2, #0]
 800a008:	3b04      	subs	r3, #4
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d1ef      	bne.n	8009fee <quorem+0xe8>
 800a00e:	3c01      	subs	r4, #1
 800a010:	e7ea      	b.n	8009fe8 <quorem+0xe2>
 800a012:	2000      	movs	r0, #0
 800a014:	e7ee      	b.n	8009ff4 <quorem+0xee>
	...

0800a018 <_dtoa_r>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	ed2d 8b02 	vpush	{d8}
 800a020:	69c7      	ldr	r7, [r0, #28]
 800a022:	b091      	sub	sp, #68	@ 0x44
 800a024:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a028:	ec55 4b10 	vmov	r4, r5, d0
 800a02c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a02e:	9107      	str	r1, [sp, #28]
 800a030:	4681      	mov	r9, r0
 800a032:	9209      	str	r2, [sp, #36]	@ 0x24
 800a034:	930d      	str	r3, [sp, #52]	@ 0x34
 800a036:	b97f      	cbnz	r7, 800a058 <_dtoa_r+0x40>
 800a038:	2010      	movs	r0, #16
 800a03a:	f000 fd8d 	bl	800ab58 <malloc>
 800a03e:	4602      	mov	r2, r0
 800a040:	f8c9 001c 	str.w	r0, [r9, #28]
 800a044:	b920      	cbnz	r0, 800a050 <_dtoa_r+0x38>
 800a046:	4ba0      	ldr	r3, [pc, #640]	@ (800a2c8 <_dtoa_r+0x2b0>)
 800a048:	21ef      	movs	r1, #239	@ 0xef
 800a04a:	48a0      	ldr	r0, [pc, #640]	@ (800a2cc <_dtoa_r+0x2b4>)
 800a04c:	f001 fbea 	bl	800b824 <__assert_func>
 800a050:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a054:	6007      	str	r7, [r0, #0]
 800a056:	60c7      	str	r7, [r0, #12]
 800a058:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a05c:	6819      	ldr	r1, [r3, #0]
 800a05e:	b159      	cbz	r1, 800a078 <_dtoa_r+0x60>
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	604a      	str	r2, [r1, #4]
 800a064:	2301      	movs	r3, #1
 800a066:	4093      	lsls	r3, r2
 800a068:	608b      	str	r3, [r1, #8]
 800a06a:	4648      	mov	r0, r9
 800a06c:	f000 fe6a 	bl	800ad44 <_Bfree>
 800a070:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	1e2b      	subs	r3, r5, #0
 800a07a:	bfbb      	ittet	lt
 800a07c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a080:	9303      	strlt	r3, [sp, #12]
 800a082:	2300      	movge	r3, #0
 800a084:	2201      	movlt	r2, #1
 800a086:	bfac      	ite	ge
 800a088:	6033      	strge	r3, [r6, #0]
 800a08a:	6032      	strlt	r2, [r6, #0]
 800a08c:	4b90      	ldr	r3, [pc, #576]	@ (800a2d0 <_dtoa_r+0x2b8>)
 800a08e:	9e03      	ldr	r6, [sp, #12]
 800a090:	43b3      	bics	r3, r6
 800a092:	d110      	bne.n	800a0b6 <_dtoa_r+0x9e>
 800a094:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a096:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a0a0:	4323      	orrs	r3, r4
 800a0a2:	f000 84de 	beq.w	800aa62 <_dtoa_r+0xa4a>
 800a0a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0a8:	4f8a      	ldr	r7, [pc, #552]	@ (800a2d4 <_dtoa_r+0x2bc>)
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 84e0 	beq.w	800aa70 <_dtoa_r+0xa58>
 800a0b0:	1cfb      	adds	r3, r7, #3
 800a0b2:	f000 bcdb 	b.w	800aa6c <_dtoa_r+0xa54>
 800a0b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a0ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c2:	d10a      	bne.n	800a0da <_dtoa_r+0xc2>
 800a0c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0cc:	b113      	cbz	r3, 800a0d4 <_dtoa_r+0xbc>
 800a0ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a0d0:	4b81      	ldr	r3, [pc, #516]	@ (800a2d8 <_dtoa_r+0x2c0>)
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	4f81      	ldr	r7, [pc, #516]	@ (800a2dc <_dtoa_r+0x2c4>)
 800a0d6:	f000 bccb 	b.w	800aa70 <_dtoa_r+0xa58>
 800a0da:	aa0e      	add	r2, sp, #56	@ 0x38
 800a0dc:	a90f      	add	r1, sp, #60	@ 0x3c
 800a0de:	4648      	mov	r0, r9
 800a0e0:	eeb0 0b48 	vmov.f64	d0, d8
 800a0e4:	f001 f918 	bl	800b318 <__d2b>
 800a0e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a0ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ee:	9001      	str	r0, [sp, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d045      	beq.n	800a180 <_dtoa_r+0x168>
 800a0f4:	eeb0 7b48 	vmov.f64	d7, d8
 800a0f8:	ee18 1a90 	vmov	r1, s17
 800a0fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a100:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a104:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a108:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a10c:	2500      	movs	r5, #0
 800a10e:	ee07 1a90 	vmov	s15, r1
 800a112:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a116:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a2b0 <_dtoa_r+0x298>
 800a11a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a11e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a2b8 <_dtoa_r+0x2a0>
 800a122:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a126:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a2c0 <_dtoa_r+0x2a8>
 800a12a:	ee07 3a90 	vmov	s15, r3
 800a12e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a132:	eeb0 7b46 	vmov.f64	d7, d6
 800a136:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a13a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a13e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a146:	ee16 8a90 	vmov	r8, s13
 800a14a:	d508      	bpl.n	800a15e <_dtoa_r+0x146>
 800a14c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a150:	eeb4 6b47 	vcmp.f64	d6, d7
 800a154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a158:	bf18      	it	ne
 800a15a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a15e:	f1b8 0f16 	cmp.w	r8, #22
 800a162:	d82b      	bhi.n	800a1bc <_dtoa_r+0x1a4>
 800a164:	495e      	ldr	r1, [pc, #376]	@ (800a2e0 <_dtoa_r+0x2c8>)
 800a166:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a16a:	ed91 7b00 	vldr	d7, [r1]
 800a16e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	d501      	bpl.n	800a17c <_dtoa_r+0x164>
 800a178:	f108 38ff 	add.w	r8, r8, #4294967295
 800a17c:	2100      	movs	r1, #0
 800a17e:	e01e      	b.n	800a1be <_dtoa_r+0x1a6>
 800a180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a182:	4413      	add	r3, r2
 800a184:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a188:	2920      	cmp	r1, #32
 800a18a:	bfc1      	itttt	gt
 800a18c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a190:	408e      	lslgt	r6, r1
 800a192:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a196:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a19a:	bfd6      	itet	le
 800a19c:	f1c1 0120 	rsble	r1, r1, #32
 800a1a0:	4331      	orrgt	r1, r6
 800a1a2:	fa04 f101 	lslle.w	r1, r4, r1
 800a1a6:	ee07 1a90 	vmov	s15, r1
 800a1aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	ee17 1a90 	vmov	r1, s15
 800a1b4:	2501      	movs	r5, #1
 800a1b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a1ba:	e7a8      	b.n	800a10e <_dtoa_r+0xf6>
 800a1bc:	2101      	movs	r1, #1
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	1e53      	subs	r3, r2, #1
 800a1c2:	9306      	str	r3, [sp, #24]
 800a1c4:	bf45      	ittet	mi
 800a1c6:	f1c2 0301 	rsbmi	r3, r2, #1
 800a1ca:	9305      	strmi	r3, [sp, #20]
 800a1cc:	2300      	movpl	r3, #0
 800a1ce:	2300      	movmi	r3, #0
 800a1d0:	bf4c      	ite	mi
 800a1d2:	9306      	strmi	r3, [sp, #24]
 800a1d4:	9305      	strpl	r3, [sp, #20]
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	910c      	str	r1, [sp, #48]	@ 0x30
 800a1dc:	db18      	blt.n	800a210 <_dtoa_r+0x1f8>
 800a1de:	9b06      	ldr	r3, [sp, #24]
 800a1e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a1e4:	4443      	add	r3, r8
 800a1e6:	9306      	str	r3, [sp, #24]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9a07      	ldr	r2, [sp, #28]
 800a1ec:	2a09      	cmp	r2, #9
 800a1ee:	d849      	bhi.n	800a284 <_dtoa_r+0x26c>
 800a1f0:	2a05      	cmp	r2, #5
 800a1f2:	bfc4      	itt	gt
 800a1f4:	3a04      	subgt	r2, #4
 800a1f6:	9207      	strgt	r2, [sp, #28]
 800a1f8:	9a07      	ldr	r2, [sp, #28]
 800a1fa:	f1a2 0202 	sub.w	r2, r2, #2
 800a1fe:	bfcc      	ite	gt
 800a200:	2400      	movgt	r4, #0
 800a202:	2401      	movle	r4, #1
 800a204:	2a03      	cmp	r2, #3
 800a206:	d848      	bhi.n	800a29a <_dtoa_r+0x282>
 800a208:	e8df f002 	tbb	[pc, r2]
 800a20c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a210:	9b05      	ldr	r3, [sp, #20]
 800a212:	2200      	movs	r2, #0
 800a214:	eba3 0308 	sub.w	r3, r3, r8
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a21c:	f1c8 0300 	rsb	r3, r8, #0
 800a220:	e7e3      	b.n	800a1ea <_dtoa_r+0x1d2>
 800a222:	2200      	movs	r2, #0
 800a224:	9208      	str	r2, [sp, #32]
 800a226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a228:	2a00      	cmp	r2, #0
 800a22a:	dc39      	bgt.n	800a2a0 <_dtoa_r+0x288>
 800a22c:	f04f 0b01 	mov.w	fp, #1
 800a230:	46da      	mov	sl, fp
 800a232:	465a      	mov	r2, fp
 800a234:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a238:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a23c:	2100      	movs	r1, #0
 800a23e:	2004      	movs	r0, #4
 800a240:	f100 0614 	add.w	r6, r0, #20
 800a244:	4296      	cmp	r6, r2
 800a246:	d930      	bls.n	800a2aa <_dtoa_r+0x292>
 800a248:	6079      	str	r1, [r7, #4]
 800a24a:	4648      	mov	r0, r9
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	f000 fd39 	bl	800acc4 <_Balloc>
 800a252:	9b04      	ldr	r3, [sp, #16]
 800a254:	4607      	mov	r7, r0
 800a256:	2800      	cmp	r0, #0
 800a258:	d146      	bne.n	800a2e8 <_dtoa_r+0x2d0>
 800a25a:	4b22      	ldr	r3, [pc, #136]	@ (800a2e4 <_dtoa_r+0x2cc>)
 800a25c:	4602      	mov	r2, r0
 800a25e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a262:	e6f2      	b.n	800a04a <_dtoa_r+0x32>
 800a264:	2201      	movs	r2, #1
 800a266:	e7dd      	b.n	800a224 <_dtoa_r+0x20c>
 800a268:	2200      	movs	r2, #0
 800a26a:	9208      	str	r2, [sp, #32]
 800a26c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a26e:	eb08 0b02 	add.w	fp, r8, r2
 800a272:	f10b 0a01 	add.w	sl, fp, #1
 800a276:	4652      	mov	r2, sl
 800a278:	2a01      	cmp	r2, #1
 800a27a:	bfb8      	it	lt
 800a27c:	2201      	movlt	r2, #1
 800a27e:	e7db      	b.n	800a238 <_dtoa_r+0x220>
 800a280:	2201      	movs	r2, #1
 800a282:	e7f2      	b.n	800a26a <_dtoa_r+0x252>
 800a284:	2401      	movs	r4, #1
 800a286:	2200      	movs	r2, #0
 800a288:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a28c:	f04f 3bff 	mov.w	fp, #4294967295
 800a290:	2100      	movs	r1, #0
 800a292:	46da      	mov	sl, fp
 800a294:	2212      	movs	r2, #18
 800a296:	9109      	str	r1, [sp, #36]	@ 0x24
 800a298:	e7ce      	b.n	800a238 <_dtoa_r+0x220>
 800a29a:	2201      	movs	r2, #1
 800a29c:	9208      	str	r2, [sp, #32]
 800a29e:	e7f5      	b.n	800a28c <_dtoa_r+0x274>
 800a2a0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a2a4:	46da      	mov	sl, fp
 800a2a6:	465a      	mov	r2, fp
 800a2a8:	e7c6      	b.n	800a238 <_dtoa_r+0x220>
 800a2aa:	3101      	adds	r1, #1
 800a2ac:	0040      	lsls	r0, r0, #1
 800a2ae:	e7c7      	b.n	800a240 <_dtoa_r+0x228>
 800a2b0:	636f4361 	.word	0x636f4361
 800a2b4:	3fd287a7 	.word	0x3fd287a7
 800a2b8:	8b60c8b3 	.word	0x8b60c8b3
 800a2bc:	3fc68a28 	.word	0x3fc68a28
 800a2c0:	509f79fb 	.word	0x509f79fb
 800a2c4:	3fd34413 	.word	0x3fd34413
 800a2c8:	0800d791 	.word	0x0800d791
 800a2cc:	0800d7a8 	.word	0x0800d7a8
 800a2d0:	7ff00000 	.word	0x7ff00000
 800a2d4:	0800d78d 	.word	0x0800d78d
 800a2d8:	0800d761 	.word	0x0800d761
 800a2dc:	0800d760 	.word	0x0800d760
 800a2e0:	0800d8a0 	.word	0x0800d8a0
 800a2e4:	0800d800 	.word	0x0800d800
 800a2e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a2ec:	f1ba 0f0e 	cmp.w	sl, #14
 800a2f0:	6010      	str	r0, [r2, #0]
 800a2f2:	d86f      	bhi.n	800a3d4 <_dtoa_r+0x3bc>
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	d06d      	beq.n	800a3d4 <_dtoa_r+0x3bc>
 800a2f8:	f1b8 0f00 	cmp.w	r8, #0
 800a2fc:	f340 80c2 	ble.w	800a484 <_dtoa_r+0x46c>
 800a300:	4aca      	ldr	r2, [pc, #808]	@ (800a62c <_dtoa_r+0x614>)
 800a302:	f008 010f 	and.w	r1, r8, #15
 800a306:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a30a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a30e:	ed92 7b00 	vldr	d7, [r2]
 800a312:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a316:	f000 80a9 	beq.w	800a46c <_dtoa_r+0x454>
 800a31a:	4ac5      	ldr	r2, [pc, #788]	@ (800a630 <_dtoa_r+0x618>)
 800a31c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a320:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a324:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a328:	f001 010f 	and.w	r1, r1, #15
 800a32c:	2203      	movs	r2, #3
 800a32e:	48c0      	ldr	r0, [pc, #768]	@ (800a630 <_dtoa_r+0x618>)
 800a330:	2900      	cmp	r1, #0
 800a332:	f040 809d 	bne.w	800a470 <_dtoa_r+0x458>
 800a336:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a33a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a33e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a342:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a344:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a348:	2900      	cmp	r1, #0
 800a34a:	f000 80c1 	beq.w	800a4d0 <_dtoa_r+0x4b8>
 800a34e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a352:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35a:	f140 80b9 	bpl.w	800a4d0 <_dtoa_r+0x4b8>
 800a35e:	f1ba 0f00 	cmp.w	sl, #0
 800a362:	f000 80b5 	beq.w	800a4d0 <_dtoa_r+0x4b8>
 800a366:	f1bb 0f00 	cmp.w	fp, #0
 800a36a:	dd31      	ble.n	800a3d0 <_dtoa_r+0x3b8>
 800a36c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a370:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a374:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a378:	f108 31ff 	add.w	r1, r8, #4294967295
 800a37c:	9104      	str	r1, [sp, #16]
 800a37e:	3201      	adds	r2, #1
 800a380:	465c      	mov	r4, fp
 800a382:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a386:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a38a:	ee07 2a90 	vmov	s15, r2
 800a38e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a392:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a396:	ee15 2a90 	vmov	r2, s11
 800a39a:	ec51 0b15 	vmov	r0, r1, d5
 800a39e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a3a2:	2c00      	cmp	r4, #0
 800a3a4:	f040 8098 	bne.w	800a4d8 <_dtoa_r+0x4c0>
 800a3a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a3ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a3b0:	ec41 0b17 	vmov	d7, r0, r1
 800a3b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3bc:	f300 8261 	bgt.w	800a882 <_dtoa_r+0x86a>
 800a3c0:	eeb1 7b47 	vneg.f64	d7, d7
 800a3c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3cc:	f100 80f5 	bmi.w	800a5ba <_dtoa_r+0x5a2>
 800a3d0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a3d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	f2c0 812c 	blt.w	800a634 <_dtoa_r+0x61c>
 800a3dc:	f1b8 0f0e 	cmp.w	r8, #14
 800a3e0:	f300 8128 	bgt.w	800a634 <_dtoa_r+0x61c>
 800a3e4:	4b91      	ldr	r3, [pc, #580]	@ (800a62c <_dtoa_r+0x614>)
 800a3e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a3ea:	ed93 6b00 	vldr	d6, [r3]
 800a3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	da03      	bge.n	800a3fc <_dtoa_r+0x3e4>
 800a3f4:	f1ba 0f00 	cmp.w	sl, #0
 800a3f8:	f340 80d2 	ble.w	800a5a0 <_dtoa_r+0x588>
 800a3fc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a400:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a404:	463e      	mov	r6, r7
 800a406:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a40a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a40e:	ee15 3a10 	vmov	r3, s10
 800a412:	3330      	adds	r3, #48	@ 0x30
 800a414:	f806 3b01 	strb.w	r3, [r6], #1
 800a418:	1bf3      	subs	r3, r6, r7
 800a41a:	459a      	cmp	sl, r3
 800a41c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a420:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a424:	f040 80f8 	bne.w	800a618 <_dtoa_r+0x600>
 800a428:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a42c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a434:	f300 80dd 	bgt.w	800a5f2 <_dtoa_r+0x5da>
 800a438:	eeb4 7b46 	vcmp.f64	d7, d6
 800a43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a440:	d104      	bne.n	800a44c <_dtoa_r+0x434>
 800a442:	ee15 3a10 	vmov	r3, s10
 800a446:	07db      	lsls	r3, r3, #31
 800a448:	f100 80d3 	bmi.w	800a5f2 <_dtoa_r+0x5da>
 800a44c:	9901      	ldr	r1, [sp, #4]
 800a44e:	4648      	mov	r0, r9
 800a450:	f000 fc78 	bl	800ad44 <_Bfree>
 800a454:	2300      	movs	r3, #0
 800a456:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a458:	7033      	strb	r3, [r6, #0]
 800a45a:	f108 0301 	add.w	r3, r8, #1
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 8304 	beq.w	800aa70 <_dtoa_r+0xa58>
 800a468:	601e      	str	r6, [r3, #0]
 800a46a:	e301      	b.n	800aa70 <_dtoa_r+0xa58>
 800a46c:	2202      	movs	r2, #2
 800a46e:	e75e      	b.n	800a32e <_dtoa_r+0x316>
 800a470:	07cc      	lsls	r4, r1, #31
 800a472:	d504      	bpl.n	800a47e <_dtoa_r+0x466>
 800a474:	ed90 6b00 	vldr	d6, [r0]
 800a478:	3201      	adds	r2, #1
 800a47a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a47e:	1049      	asrs	r1, r1, #1
 800a480:	3008      	adds	r0, #8
 800a482:	e755      	b.n	800a330 <_dtoa_r+0x318>
 800a484:	d022      	beq.n	800a4cc <_dtoa_r+0x4b4>
 800a486:	f1c8 0100 	rsb	r1, r8, #0
 800a48a:	4a68      	ldr	r2, [pc, #416]	@ (800a62c <_dtoa_r+0x614>)
 800a48c:	f001 000f 	and.w	r0, r1, #15
 800a490:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a494:	ed92 7b00 	vldr	d7, [r2]
 800a498:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a49c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4a0:	4863      	ldr	r0, [pc, #396]	@ (800a630 <_dtoa_r+0x618>)
 800a4a2:	1109      	asrs	r1, r1, #4
 800a4a4:	2400      	movs	r4, #0
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	b929      	cbnz	r1, 800a4b6 <_dtoa_r+0x49e>
 800a4aa:	2c00      	cmp	r4, #0
 800a4ac:	f43f af49 	beq.w	800a342 <_dtoa_r+0x32a>
 800a4b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4b4:	e745      	b.n	800a342 <_dtoa_r+0x32a>
 800a4b6:	07ce      	lsls	r6, r1, #31
 800a4b8:	d505      	bpl.n	800a4c6 <_dtoa_r+0x4ae>
 800a4ba:	ed90 6b00 	vldr	d6, [r0]
 800a4be:	3201      	adds	r2, #1
 800a4c0:	2401      	movs	r4, #1
 800a4c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4c6:	1049      	asrs	r1, r1, #1
 800a4c8:	3008      	adds	r0, #8
 800a4ca:	e7ed      	b.n	800a4a8 <_dtoa_r+0x490>
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	e738      	b.n	800a342 <_dtoa_r+0x32a>
 800a4d0:	f8cd 8010 	str.w	r8, [sp, #16]
 800a4d4:	4654      	mov	r4, sl
 800a4d6:	e754      	b.n	800a382 <_dtoa_r+0x36a>
 800a4d8:	4a54      	ldr	r2, [pc, #336]	@ (800a62c <_dtoa_r+0x614>)
 800a4da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a4de:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a4e2:	9a08      	ldr	r2, [sp, #32]
 800a4e4:	ec41 0b17 	vmov	d7, r0, r1
 800a4e8:	443c      	add	r4, r7
 800a4ea:	b34a      	cbz	r2, 800a540 <_dtoa_r+0x528>
 800a4ec:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a4f0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a4f4:	463e      	mov	r6, r7
 800a4f6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a4fa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a4fe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a502:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a506:	ee14 2a90 	vmov	r2, s9
 800a50a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a50e:	3230      	adds	r2, #48	@ 0x30
 800a510:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51c:	f806 2b01 	strb.w	r2, [r6], #1
 800a520:	d438      	bmi.n	800a594 <_dtoa_r+0x57c>
 800a522:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a526:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a52e:	d462      	bmi.n	800a5f6 <_dtoa_r+0x5de>
 800a530:	42a6      	cmp	r6, r4
 800a532:	f43f af4d 	beq.w	800a3d0 <_dtoa_r+0x3b8>
 800a536:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a53a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a53e:	e7e0      	b.n	800a502 <_dtoa_r+0x4ea>
 800a540:	4621      	mov	r1, r4
 800a542:	463e      	mov	r6, r7
 800a544:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a548:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a54c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a550:	ee14 2a90 	vmov	r2, s9
 800a554:	3230      	adds	r2, #48	@ 0x30
 800a556:	f806 2b01 	strb.w	r2, [r6], #1
 800a55a:	42a6      	cmp	r6, r4
 800a55c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a560:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a564:	d119      	bne.n	800a59a <_dtoa_r+0x582>
 800a566:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a56a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a56e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a576:	dc3e      	bgt.n	800a5f6 <_dtoa_r+0x5de>
 800a578:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a57c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a584:	f57f af24 	bpl.w	800a3d0 <_dtoa_r+0x3b8>
 800a588:	460e      	mov	r6, r1
 800a58a:	3901      	subs	r1, #1
 800a58c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a590:	2b30      	cmp	r3, #48	@ 0x30
 800a592:	d0f9      	beq.n	800a588 <_dtoa_r+0x570>
 800a594:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a598:	e758      	b.n	800a44c <_dtoa_r+0x434>
 800a59a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a59e:	e7d5      	b.n	800a54c <_dtoa_r+0x534>
 800a5a0:	d10b      	bne.n	800a5ba <_dtoa_r+0x5a2>
 800a5a2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a5a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a5aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b6:	f2c0 8161 	blt.w	800a87c <_dtoa_r+0x864>
 800a5ba:	2400      	movs	r4, #0
 800a5bc:	4625      	mov	r5, r4
 800a5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	9304      	str	r3, [sp, #16]
 800a5c4:	463e      	mov	r6, r7
 800a5c6:	f04f 0800 	mov.w	r8, #0
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4648      	mov	r0, r9
 800a5ce:	f000 fbb9 	bl	800ad44 <_Bfree>
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	d0de      	beq.n	800a594 <_dtoa_r+0x57c>
 800a5d6:	f1b8 0f00 	cmp.w	r8, #0
 800a5da:	d005      	beq.n	800a5e8 <_dtoa_r+0x5d0>
 800a5dc:	45a8      	cmp	r8, r5
 800a5de:	d003      	beq.n	800a5e8 <_dtoa_r+0x5d0>
 800a5e0:	4641      	mov	r1, r8
 800a5e2:	4648      	mov	r0, r9
 800a5e4:	f000 fbae 	bl	800ad44 <_Bfree>
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4648      	mov	r0, r9
 800a5ec:	f000 fbaa 	bl	800ad44 <_Bfree>
 800a5f0:	e7d0      	b.n	800a594 <_dtoa_r+0x57c>
 800a5f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800a5f6:	4633      	mov	r3, r6
 800a5f8:	461e      	mov	r6, r3
 800a5fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5fe:	2a39      	cmp	r2, #57	@ 0x39
 800a600:	d106      	bne.n	800a610 <_dtoa_r+0x5f8>
 800a602:	429f      	cmp	r7, r3
 800a604:	d1f8      	bne.n	800a5f8 <_dtoa_r+0x5e0>
 800a606:	9a04      	ldr	r2, [sp, #16]
 800a608:	3201      	adds	r2, #1
 800a60a:	9204      	str	r2, [sp, #16]
 800a60c:	2230      	movs	r2, #48	@ 0x30
 800a60e:	703a      	strb	r2, [r7, #0]
 800a610:	781a      	ldrb	r2, [r3, #0]
 800a612:	3201      	adds	r2, #1
 800a614:	701a      	strb	r2, [r3, #0]
 800a616:	e7bd      	b.n	800a594 <_dtoa_r+0x57c>
 800a618:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a61c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a624:	f47f aeef 	bne.w	800a406 <_dtoa_r+0x3ee>
 800a628:	e710      	b.n	800a44c <_dtoa_r+0x434>
 800a62a:	bf00      	nop
 800a62c:	0800d8a0 	.word	0x0800d8a0
 800a630:	0800d878 	.word	0x0800d878
 800a634:	9908      	ldr	r1, [sp, #32]
 800a636:	2900      	cmp	r1, #0
 800a638:	f000 80e3 	beq.w	800a802 <_dtoa_r+0x7ea>
 800a63c:	9907      	ldr	r1, [sp, #28]
 800a63e:	2901      	cmp	r1, #1
 800a640:	f300 80c8 	bgt.w	800a7d4 <_dtoa_r+0x7bc>
 800a644:	2d00      	cmp	r5, #0
 800a646:	f000 80c1 	beq.w	800a7cc <_dtoa_r+0x7b4>
 800a64a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a64e:	9e05      	ldr	r6, [sp, #20]
 800a650:	461c      	mov	r4, r3
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	9b05      	ldr	r3, [sp, #20]
 800a656:	4413      	add	r3, r2
 800a658:	9305      	str	r3, [sp, #20]
 800a65a:	9b06      	ldr	r3, [sp, #24]
 800a65c:	2101      	movs	r1, #1
 800a65e:	4413      	add	r3, r2
 800a660:	4648      	mov	r0, r9
 800a662:	9306      	str	r3, [sp, #24]
 800a664:	f000 fc22 	bl	800aeac <__i2b>
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	4605      	mov	r5, r0
 800a66c:	b166      	cbz	r6, 800a688 <_dtoa_r+0x670>
 800a66e:	9a06      	ldr	r2, [sp, #24]
 800a670:	2a00      	cmp	r2, #0
 800a672:	dd09      	ble.n	800a688 <_dtoa_r+0x670>
 800a674:	42b2      	cmp	r2, r6
 800a676:	9905      	ldr	r1, [sp, #20]
 800a678:	bfa8      	it	ge
 800a67a:	4632      	movge	r2, r6
 800a67c:	1a89      	subs	r1, r1, r2
 800a67e:	9105      	str	r1, [sp, #20]
 800a680:	9906      	ldr	r1, [sp, #24]
 800a682:	1ab6      	subs	r6, r6, r2
 800a684:	1a8a      	subs	r2, r1, r2
 800a686:	9206      	str	r2, [sp, #24]
 800a688:	b1fb      	cbz	r3, 800a6ca <_dtoa_r+0x6b2>
 800a68a:	9a08      	ldr	r2, [sp, #32]
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	f000 80bc 	beq.w	800a80a <_dtoa_r+0x7f2>
 800a692:	b19c      	cbz	r4, 800a6bc <_dtoa_r+0x6a4>
 800a694:	4629      	mov	r1, r5
 800a696:	4622      	mov	r2, r4
 800a698:	4648      	mov	r0, r9
 800a69a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a69c:	f000 fcc6 	bl	800b02c <__pow5mult>
 800a6a0:	9a01      	ldr	r2, [sp, #4]
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	4648      	mov	r0, r9
 800a6a8:	f000 fc16 	bl	800aed8 <__multiply>
 800a6ac:	9901      	ldr	r1, [sp, #4]
 800a6ae:	9004      	str	r0, [sp, #16]
 800a6b0:	4648      	mov	r0, r9
 800a6b2:	f000 fb47 	bl	800ad44 <_Bfree>
 800a6b6:	9a04      	ldr	r2, [sp, #16]
 800a6b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6ba:	9201      	str	r2, [sp, #4]
 800a6bc:	1b1a      	subs	r2, r3, r4
 800a6be:	d004      	beq.n	800a6ca <_dtoa_r+0x6b2>
 800a6c0:	9901      	ldr	r1, [sp, #4]
 800a6c2:	4648      	mov	r0, r9
 800a6c4:	f000 fcb2 	bl	800b02c <__pow5mult>
 800a6c8:	9001      	str	r0, [sp, #4]
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	4648      	mov	r0, r9
 800a6ce:	f000 fbed 	bl	800aeac <__i2b>
 800a6d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 81d0 	beq.w	800aa7c <_dtoa_r+0xa64>
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4601      	mov	r1, r0
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f000 fca3 	bl	800b02c <__pow5mult>
 800a6e6:	9b07      	ldr	r3, [sp, #28]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	f300 8095 	bgt.w	800a81a <_dtoa_r+0x802>
 800a6f0:	9b02      	ldr	r3, [sp, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f040 808b 	bne.w	800a80e <_dtoa_r+0x7f6>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	f040 8087 	bne.w	800a812 <_dtoa_r+0x7fa>
 800a704:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a708:	0d12      	lsrs	r2, r2, #20
 800a70a:	0512      	lsls	r2, r2, #20
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	f000 8082 	beq.w	800a816 <_dtoa_r+0x7fe>
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	3301      	adds	r3, #1
 800a716:	9305      	str	r3, [sp, #20]
 800a718:	9b06      	ldr	r3, [sp, #24]
 800a71a:	3301      	adds	r3, #1
 800a71c:	9306      	str	r3, [sp, #24]
 800a71e:	2301      	movs	r3, #1
 800a720:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 81af 	beq.w	800aa88 <_dtoa_r+0xa70>
 800a72a:	6922      	ldr	r2, [r4, #16]
 800a72c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a730:	6910      	ldr	r0, [r2, #16]
 800a732:	f000 fb6f 	bl	800ae14 <__hi0bits>
 800a736:	f1c0 0020 	rsb	r0, r0, #32
 800a73a:	9b06      	ldr	r3, [sp, #24]
 800a73c:	4418      	add	r0, r3
 800a73e:	f010 001f 	ands.w	r0, r0, #31
 800a742:	d076      	beq.n	800a832 <_dtoa_r+0x81a>
 800a744:	f1c0 0220 	rsb	r2, r0, #32
 800a748:	2a04      	cmp	r2, #4
 800a74a:	dd69      	ble.n	800a820 <_dtoa_r+0x808>
 800a74c:	9b05      	ldr	r3, [sp, #20]
 800a74e:	f1c0 001c 	rsb	r0, r0, #28
 800a752:	4403      	add	r3, r0
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	4406      	add	r6, r0
 800a75a:	4403      	add	r3, r0
 800a75c:	9306      	str	r3, [sp, #24]
 800a75e:	9b05      	ldr	r3, [sp, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd05      	ble.n	800a770 <_dtoa_r+0x758>
 800a764:	9901      	ldr	r1, [sp, #4]
 800a766:	461a      	mov	r2, r3
 800a768:	4648      	mov	r0, r9
 800a76a:	f000 fcb9 	bl	800b0e0 <__lshift>
 800a76e:	9001      	str	r0, [sp, #4]
 800a770:	9b06      	ldr	r3, [sp, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	dd05      	ble.n	800a782 <_dtoa_r+0x76a>
 800a776:	4621      	mov	r1, r4
 800a778:	461a      	mov	r2, r3
 800a77a:	4648      	mov	r0, r9
 800a77c:	f000 fcb0 	bl	800b0e0 <__lshift>
 800a780:	4604      	mov	r4, r0
 800a782:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a784:	2b00      	cmp	r3, #0
 800a786:	d056      	beq.n	800a836 <_dtoa_r+0x81e>
 800a788:	9801      	ldr	r0, [sp, #4]
 800a78a:	4621      	mov	r1, r4
 800a78c:	f000 fd14 	bl	800b1b8 <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	da50      	bge.n	800a836 <_dtoa_r+0x81e>
 800a794:	f108 33ff 	add.w	r3, r8, #4294967295
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	9901      	ldr	r1, [sp, #4]
 800a79c:	2300      	movs	r3, #0
 800a79e:	220a      	movs	r2, #10
 800a7a0:	4648      	mov	r0, r9
 800a7a2:	f000 faf1 	bl	800ad88 <__multadd>
 800a7a6:	9b08      	ldr	r3, [sp, #32]
 800a7a8:	9001      	str	r0, [sp, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 816e 	beq.w	800aa8c <_dtoa_r+0xa74>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	220a      	movs	r2, #10
 800a7b6:	4648      	mov	r0, r9
 800a7b8:	f000 fae6 	bl	800ad88 <__multadd>
 800a7bc:	f1bb 0f00 	cmp.w	fp, #0
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	dc64      	bgt.n	800a88e <_dtoa_r+0x876>
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	dc3e      	bgt.n	800a848 <_dtoa_r+0x830>
 800a7ca:	e060      	b.n	800a88e <_dtoa_r+0x876>
 800a7cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a7d2:	e73c      	b.n	800a64e <_dtoa_r+0x636>
 800a7d4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	bfbf      	itttt	lt
 800a7dc:	1ae2      	sublt	r2, r4, r3
 800a7de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a7e0:	189b      	addlt	r3, r3, r2
 800a7e2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a7e4:	bfae      	itee	ge
 800a7e6:	1b1c      	subge	r4, r3, r4
 800a7e8:	4623      	movlt	r3, r4
 800a7ea:	2400      	movlt	r4, #0
 800a7ec:	f1ba 0f00 	cmp.w	sl, #0
 800a7f0:	bfb5      	itete	lt
 800a7f2:	9a05      	ldrlt	r2, [sp, #20]
 800a7f4:	9e05      	ldrge	r6, [sp, #20]
 800a7f6:	eba2 060a 	sublt.w	r6, r2, sl
 800a7fa:	4652      	movge	r2, sl
 800a7fc:	bfb8      	it	lt
 800a7fe:	2200      	movlt	r2, #0
 800a800:	e727      	b.n	800a652 <_dtoa_r+0x63a>
 800a802:	9e05      	ldr	r6, [sp, #20]
 800a804:	9d08      	ldr	r5, [sp, #32]
 800a806:	461c      	mov	r4, r3
 800a808:	e730      	b.n	800a66c <_dtoa_r+0x654>
 800a80a:	461a      	mov	r2, r3
 800a80c:	e758      	b.n	800a6c0 <_dtoa_r+0x6a8>
 800a80e:	2300      	movs	r3, #0
 800a810:	e786      	b.n	800a720 <_dtoa_r+0x708>
 800a812:	9b02      	ldr	r3, [sp, #8]
 800a814:	e784      	b.n	800a720 <_dtoa_r+0x708>
 800a816:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a818:	e783      	b.n	800a722 <_dtoa_r+0x70a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a81e:	e784      	b.n	800a72a <_dtoa_r+0x712>
 800a820:	d09d      	beq.n	800a75e <_dtoa_r+0x746>
 800a822:	9b05      	ldr	r3, [sp, #20]
 800a824:	321c      	adds	r2, #28
 800a826:	4413      	add	r3, r2
 800a828:	9305      	str	r3, [sp, #20]
 800a82a:	9b06      	ldr	r3, [sp, #24]
 800a82c:	4416      	add	r6, r2
 800a82e:	4413      	add	r3, r2
 800a830:	e794      	b.n	800a75c <_dtoa_r+0x744>
 800a832:	4602      	mov	r2, r0
 800a834:	e7f5      	b.n	800a822 <_dtoa_r+0x80a>
 800a836:	f1ba 0f00 	cmp.w	sl, #0
 800a83a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a83e:	46d3      	mov	fp, sl
 800a840:	dc21      	bgt.n	800a886 <_dtoa_r+0x86e>
 800a842:	9b07      	ldr	r3, [sp, #28]
 800a844:	2b02      	cmp	r3, #2
 800a846:	dd1e      	ble.n	800a886 <_dtoa_r+0x86e>
 800a848:	f1bb 0f00 	cmp.w	fp, #0
 800a84c:	f47f aeb7 	bne.w	800a5be <_dtoa_r+0x5a6>
 800a850:	4621      	mov	r1, r4
 800a852:	465b      	mov	r3, fp
 800a854:	2205      	movs	r2, #5
 800a856:	4648      	mov	r0, r9
 800a858:	f000 fa96 	bl	800ad88 <__multadd>
 800a85c:	4601      	mov	r1, r0
 800a85e:	4604      	mov	r4, r0
 800a860:	9801      	ldr	r0, [sp, #4]
 800a862:	f000 fca9 	bl	800b1b8 <__mcmp>
 800a866:	2800      	cmp	r0, #0
 800a868:	f77f aea9 	ble.w	800a5be <_dtoa_r+0x5a6>
 800a86c:	463e      	mov	r6, r7
 800a86e:	2331      	movs	r3, #49	@ 0x31
 800a870:	f806 3b01 	strb.w	r3, [r6], #1
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	3301      	adds	r3, #1
 800a878:	9304      	str	r3, [sp, #16]
 800a87a:	e6a4      	b.n	800a5c6 <_dtoa_r+0x5ae>
 800a87c:	f8cd 8010 	str.w	r8, [sp, #16]
 800a880:	4654      	mov	r4, sl
 800a882:	4625      	mov	r5, r4
 800a884:	e7f2      	b.n	800a86c <_dtoa_r+0x854>
 800a886:	9b08      	ldr	r3, [sp, #32]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 8103 	beq.w	800aa94 <_dtoa_r+0xa7c>
 800a88e:	2e00      	cmp	r6, #0
 800a890:	dd05      	ble.n	800a89e <_dtoa_r+0x886>
 800a892:	4629      	mov	r1, r5
 800a894:	4632      	mov	r2, r6
 800a896:	4648      	mov	r0, r9
 800a898:	f000 fc22 	bl	800b0e0 <__lshift>
 800a89c:	4605      	mov	r5, r0
 800a89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d058      	beq.n	800a956 <_dtoa_r+0x93e>
 800a8a4:	6869      	ldr	r1, [r5, #4]
 800a8a6:	4648      	mov	r0, r9
 800a8a8:	f000 fa0c 	bl	800acc4 <_Balloc>
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	b928      	cbnz	r0, 800a8bc <_dtoa_r+0x8a4>
 800a8b0:	4b82      	ldr	r3, [pc, #520]	@ (800aabc <_dtoa_r+0xaa4>)
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a8b8:	f7ff bbc7 	b.w	800a04a <_dtoa_r+0x32>
 800a8bc:	692a      	ldr	r2, [r5, #16]
 800a8be:	3202      	adds	r2, #2
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	f105 010c 	add.w	r1, r5, #12
 800a8c6:	300c      	adds	r0, #12
 800a8c8:	f7ff fb0f 	bl	8009eea <memcpy>
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4648      	mov	r0, r9
 800a8d2:	f000 fc05 	bl	800b0e0 <__lshift>
 800a8d6:	1c7b      	adds	r3, r7, #1
 800a8d8:	9305      	str	r3, [sp, #20]
 800a8da:	eb07 030b 	add.w	r3, r7, fp
 800a8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e0:	9b02      	ldr	r3, [sp, #8]
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	46a8      	mov	r8, r5
 800a8e8:	9308      	str	r3, [sp, #32]
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	9b05      	ldr	r3, [sp, #20]
 800a8ee:	9801      	ldr	r0, [sp, #4]
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a8f6:	f7ff fb06 	bl	8009f06 <quorem>
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	9002      	str	r0, [sp, #8]
 800a8fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a902:	9801      	ldr	r0, [sp, #4]
 800a904:	f000 fc58 	bl	800b1b8 <__mcmp>
 800a908:	462a      	mov	r2, r5
 800a90a:	9006      	str	r0, [sp, #24]
 800a90c:	4621      	mov	r1, r4
 800a90e:	4648      	mov	r0, r9
 800a910:	f000 fc6e 	bl	800b1f0 <__mdiff>
 800a914:	68c2      	ldr	r2, [r0, #12]
 800a916:	4606      	mov	r6, r0
 800a918:	b9fa      	cbnz	r2, 800a95a <_dtoa_r+0x942>
 800a91a:	4601      	mov	r1, r0
 800a91c:	9801      	ldr	r0, [sp, #4]
 800a91e:	f000 fc4b 	bl	800b1b8 <__mcmp>
 800a922:	4602      	mov	r2, r0
 800a924:	4631      	mov	r1, r6
 800a926:	4648      	mov	r0, r9
 800a928:	920a      	str	r2, [sp, #40]	@ 0x28
 800a92a:	f000 fa0b 	bl	800ad44 <_Bfree>
 800a92e:	9b07      	ldr	r3, [sp, #28]
 800a930:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a932:	9e05      	ldr	r6, [sp, #20]
 800a934:	ea43 0102 	orr.w	r1, r3, r2
 800a938:	9b08      	ldr	r3, [sp, #32]
 800a93a:	4319      	orrs	r1, r3
 800a93c:	d10f      	bne.n	800a95e <_dtoa_r+0x946>
 800a93e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a942:	d028      	beq.n	800a996 <_dtoa_r+0x97e>
 800a944:	9b06      	ldr	r3, [sp, #24]
 800a946:	2b00      	cmp	r3, #0
 800a948:	dd02      	ble.n	800a950 <_dtoa_r+0x938>
 800a94a:	9b02      	ldr	r3, [sp, #8]
 800a94c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a950:	f88b a000 	strb.w	sl, [fp]
 800a954:	e639      	b.n	800a5ca <_dtoa_r+0x5b2>
 800a956:	4628      	mov	r0, r5
 800a958:	e7bd      	b.n	800a8d6 <_dtoa_r+0x8be>
 800a95a:	2201      	movs	r2, #1
 800a95c:	e7e2      	b.n	800a924 <_dtoa_r+0x90c>
 800a95e:	9b06      	ldr	r3, [sp, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	db04      	blt.n	800a96e <_dtoa_r+0x956>
 800a964:	9907      	ldr	r1, [sp, #28]
 800a966:	430b      	orrs	r3, r1
 800a968:	9908      	ldr	r1, [sp, #32]
 800a96a:	430b      	orrs	r3, r1
 800a96c:	d120      	bne.n	800a9b0 <_dtoa_r+0x998>
 800a96e:	2a00      	cmp	r2, #0
 800a970:	ddee      	ble.n	800a950 <_dtoa_r+0x938>
 800a972:	9901      	ldr	r1, [sp, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	4648      	mov	r0, r9
 800a978:	f000 fbb2 	bl	800b0e0 <__lshift>
 800a97c:	4621      	mov	r1, r4
 800a97e:	9001      	str	r0, [sp, #4]
 800a980:	f000 fc1a 	bl	800b1b8 <__mcmp>
 800a984:	2800      	cmp	r0, #0
 800a986:	dc03      	bgt.n	800a990 <_dtoa_r+0x978>
 800a988:	d1e2      	bne.n	800a950 <_dtoa_r+0x938>
 800a98a:	f01a 0f01 	tst.w	sl, #1
 800a98e:	d0df      	beq.n	800a950 <_dtoa_r+0x938>
 800a990:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a994:	d1d9      	bne.n	800a94a <_dtoa_r+0x932>
 800a996:	2339      	movs	r3, #57	@ 0x39
 800a998:	f88b 3000 	strb.w	r3, [fp]
 800a99c:	4633      	mov	r3, r6
 800a99e:	461e      	mov	r6, r3
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a9a6:	2a39      	cmp	r2, #57	@ 0x39
 800a9a8:	d053      	beq.n	800aa52 <_dtoa_r+0xa3a>
 800a9aa:	3201      	adds	r2, #1
 800a9ac:	701a      	strb	r2, [r3, #0]
 800a9ae:	e60c      	b.n	800a5ca <_dtoa_r+0x5b2>
 800a9b0:	2a00      	cmp	r2, #0
 800a9b2:	dd07      	ble.n	800a9c4 <_dtoa_r+0x9ac>
 800a9b4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a9b8:	d0ed      	beq.n	800a996 <_dtoa_r+0x97e>
 800a9ba:	f10a 0301 	add.w	r3, sl, #1
 800a9be:	f88b 3000 	strb.w	r3, [fp]
 800a9c2:	e602      	b.n	800a5ca <_dtoa_r+0x5b2>
 800a9c4:	9b05      	ldr	r3, [sp, #20]
 800a9c6:	9a05      	ldr	r2, [sp, #20]
 800a9c8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d029      	beq.n	800aa26 <_dtoa_r+0xa0e>
 800a9d2:	9901      	ldr	r1, [sp, #4]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	220a      	movs	r2, #10
 800a9d8:	4648      	mov	r0, r9
 800a9da:	f000 f9d5 	bl	800ad88 <__multadd>
 800a9de:	45a8      	cmp	r8, r5
 800a9e0:	9001      	str	r0, [sp, #4]
 800a9e2:	f04f 0300 	mov.w	r3, #0
 800a9e6:	f04f 020a 	mov.w	r2, #10
 800a9ea:	4641      	mov	r1, r8
 800a9ec:	4648      	mov	r0, r9
 800a9ee:	d107      	bne.n	800aa00 <_dtoa_r+0x9e8>
 800a9f0:	f000 f9ca 	bl	800ad88 <__multadd>
 800a9f4:	4680      	mov	r8, r0
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	9b05      	ldr	r3, [sp, #20]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	e775      	b.n	800a8ec <_dtoa_r+0x8d4>
 800aa00:	f000 f9c2 	bl	800ad88 <__multadd>
 800aa04:	4629      	mov	r1, r5
 800aa06:	4680      	mov	r8, r0
 800aa08:	2300      	movs	r3, #0
 800aa0a:	220a      	movs	r2, #10
 800aa0c:	4648      	mov	r0, r9
 800aa0e:	f000 f9bb 	bl	800ad88 <__multadd>
 800aa12:	4605      	mov	r5, r0
 800aa14:	e7f0      	b.n	800a9f8 <_dtoa_r+0x9e0>
 800aa16:	f1bb 0f00 	cmp.w	fp, #0
 800aa1a:	bfcc      	ite	gt
 800aa1c:	465e      	movgt	r6, fp
 800aa1e:	2601      	movle	r6, #1
 800aa20:	443e      	add	r6, r7
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	9901      	ldr	r1, [sp, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	4648      	mov	r0, r9
 800aa2c:	f000 fb58 	bl	800b0e0 <__lshift>
 800aa30:	4621      	mov	r1, r4
 800aa32:	9001      	str	r0, [sp, #4]
 800aa34:	f000 fbc0 	bl	800b1b8 <__mcmp>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	dcaf      	bgt.n	800a99c <_dtoa_r+0x984>
 800aa3c:	d102      	bne.n	800aa44 <_dtoa_r+0xa2c>
 800aa3e:	f01a 0f01 	tst.w	sl, #1
 800aa42:	d1ab      	bne.n	800a99c <_dtoa_r+0x984>
 800aa44:	4633      	mov	r3, r6
 800aa46:	461e      	mov	r6, r3
 800aa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4c:	2a30      	cmp	r2, #48	@ 0x30
 800aa4e:	d0fa      	beq.n	800aa46 <_dtoa_r+0xa2e>
 800aa50:	e5bb      	b.n	800a5ca <_dtoa_r+0x5b2>
 800aa52:	429f      	cmp	r7, r3
 800aa54:	d1a3      	bne.n	800a99e <_dtoa_r+0x986>
 800aa56:	9b04      	ldr	r3, [sp, #16]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	9304      	str	r3, [sp, #16]
 800aa5c:	2331      	movs	r3, #49	@ 0x31
 800aa5e:	703b      	strb	r3, [r7, #0]
 800aa60:	e5b3      	b.n	800a5ca <_dtoa_r+0x5b2>
 800aa62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa64:	4f16      	ldr	r7, [pc, #88]	@ (800aac0 <_dtoa_r+0xaa8>)
 800aa66:	b11b      	cbz	r3, 800aa70 <_dtoa_r+0xa58>
 800aa68:	f107 0308 	add.w	r3, r7, #8
 800aa6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	4638      	mov	r0, r7
 800aa72:	b011      	add	sp, #68	@ 0x44
 800aa74:	ecbd 8b02 	vpop	{d8}
 800aa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	f77f ae36 	ble.w	800a6f0 <_dtoa_r+0x6d8>
 800aa84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa88:	2001      	movs	r0, #1
 800aa8a:	e656      	b.n	800a73a <_dtoa_r+0x722>
 800aa8c:	f1bb 0f00 	cmp.w	fp, #0
 800aa90:	f77f aed7 	ble.w	800a842 <_dtoa_r+0x82a>
 800aa94:	463e      	mov	r6, r7
 800aa96:	9801      	ldr	r0, [sp, #4]
 800aa98:	4621      	mov	r1, r4
 800aa9a:	f7ff fa34 	bl	8009f06 <quorem>
 800aa9e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800aaa2:	f806 ab01 	strb.w	sl, [r6], #1
 800aaa6:	1bf2      	subs	r2, r6, r7
 800aaa8:	4593      	cmp	fp, r2
 800aaaa:	ddb4      	ble.n	800aa16 <_dtoa_r+0x9fe>
 800aaac:	9901      	ldr	r1, [sp, #4]
 800aaae:	2300      	movs	r3, #0
 800aab0:	220a      	movs	r2, #10
 800aab2:	4648      	mov	r0, r9
 800aab4:	f000 f968 	bl	800ad88 <__multadd>
 800aab8:	9001      	str	r0, [sp, #4]
 800aaba:	e7ec      	b.n	800aa96 <_dtoa_r+0xa7e>
 800aabc:	0800d800 	.word	0x0800d800
 800aac0:	0800d784 	.word	0x0800d784

0800aac4 <_free_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4605      	mov	r5, r0
 800aac8:	2900      	cmp	r1, #0
 800aaca:	d041      	beq.n	800ab50 <_free_r+0x8c>
 800aacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad0:	1f0c      	subs	r4, r1, #4
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bfb8      	it	lt
 800aad6:	18e4      	addlt	r4, r4, r3
 800aad8:	f000 f8e8 	bl	800acac <__malloc_lock>
 800aadc:	4a1d      	ldr	r2, [pc, #116]	@ (800ab54 <_free_r+0x90>)
 800aade:	6813      	ldr	r3, [r2, #0]
 800aae0:	b933      	cbnz	r3, 800aaf0 <_free_r+0x2c>
 800aae2:	6063      	str	r3, [r4, #4]
 800aae4:	6014      	str	r4, [r2, #0]
 800aae6:	4628      	mov	r0, r5
 800aae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaec:	f000 b8e4 	b.w	800acb8 <__malloc_unlock>
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	d908      	bls.n	800ab06 <_free_r+0x42>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	1821      	adds	r1, r4, r0
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	bf01      	itttt	eq
 800aafc:	6819      	ldreq	r1, [r3, #0]
 800aafe:	685b      	ldreq	r3, [r3, #4]
 800ab00:	1809      	addeq	r1, r1, r0
 800ab02:	6021      	streq	r1, [r4, #0]
 800ab04:	e7ed      	b.n	800aae2 <_free_r+0x1e>
 800ab06:	461a      	mov	r2, r3
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	b10b      	cbz	r3, 800ab10 <_free_r+0x4c>
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	d9fa      	bls.n	800ab06 <_free_r+0x42>
 800ab10:	6811      	ldr	r1, [r2, #0]
 800ab12:	1850      	adds	r0, r2, r1
 800ab14:	42a0      	cmp	r0, r4
 800ab16:	d10b      	bne.n	800ab30 <_free_r+0x6c>
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	4401      	add	r1, r0
 800ab1c:	1850      	adds	r0, r2, r1
 800ab1e:	4283      	cmp	r3, r0
 800ab20:	6011      	str	r1, [r2, #0]
 800ab22:	d1e0      	bne.n	800aae6 <_free_r+0x22>
 800ab24:	6818      	ldr	r0, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	6053      	str	r3, [r2, #4]
 800ab2a:	4408      	add	r0, r1
 800ab2c:	6010      	str	r0, [r2, #0]
 800ab2e:	e7da      	b.n	800aae6 <_free_r+0x22>
 800ab30:	d902      	bls.n	800ab38 <_free_r+0x74>
 800ab32:	230c      	movs	r3, #12
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	e7d6      	b.n	800aae6 <_free_r+0x22>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	1821      	adds	r1, r4, r0
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	bf04      	itt	eq
 800ab40:	6819      	ldreq	r1, [r3, #0]
 800ab42:	685b      	ldreq	r3, [r3, #4]
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	bf04      	itt	eq
 800ab48:	1809      	addeq	r1, r1, r0
 800ab4a:	6021      	streq	r1, [r4, #0]
 800ab4c:	6054      	str	r4, [r2, #4]
 800ab4e:	e7ca      	b.n	800aae6 <_free_r+0x22>
 800ab50:	bd38      	pop	{r3, r4, r5, pc}
 800ab52:	bf00      	nop
 800ab54:	24005308 	.word	0x24005308

0800ab58 <malloc>:
 800ab58:	4b02      	ldr	r3, [pc, #8]	@ (800ab64 <malloc+0xc>)
 800ab5a:	4601      	mov	r1, r0
 800ab5c:	6818      	ldr	r0, [r3, #0]
 800ab5e:	f000 b825 	b.w	800abac <_malloc_r>
 800ab62:	bf00      	nop
 800ab64:	24000020 	.word	0x24000020

0800ab68 <sbrk_aligned>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	4e0f      	ldr	r6, [pc, #60]	@ (800aba8 <sbrk_aligned+0x40>)
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	6831      	ldr	r1, [r6, #0]
 800ab70:	4605      	mov	r5, r0
 800ab72:	b911      	cbnz	r1, 800ab7a <sbrk_aligned+0x12>
 800ab74:	f000 fe46 	bl	800b804 <_sbrk_r>
 800ab78:	6030      	str	r0, [r6, #0]
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f000 fe41 	bl	800b804 <_sbrk_r>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	d103      	bne.n	800ab8e <sbrk_aligned+0x26>
 800ab86:	f04f 34ff 	mov.w	r4, #4294967295
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	bd70      	pop	{r4, r5, r6, pc}
 800ab8e:	1cc4      	adds	r4, r0, #3
 800ab90:	f024 0403 	bic.w	r4, r4, #3
 800ab94:	42a0      	cmp	r0, r4
 800ab96:	d0f8      	beq.n	800ab8a <sbrk_aligned+0x22>
 800ab98:	1a21      	subs	r1, r4, r0
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 fe32 	bl	800b804 <_sbrk_r>
 800aba0:	3001      	adds	r0, #1
 800aba2:	d1f2      	bne.n	800ab8a <sbrk_aligned+0x22>
 800aba4:	e7ef      	b.n	800ab86 <sbrk_aligned+0x1e>
 800aba6:	bf00      	nop
 800aba8:	24005304 	.word	0x24005304

0800abac <_malloc_r>:
 800abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb0:	1ccd      	adds	r5, r1, #3
 800abb2:	f025 0503 	bic.w	r5, r5, #3
 800abb6:	3508      	adds	r5, #8
 800abb8:	2d0c      	cmp	r5, #12
 800abba:	bf38      	it	cc
 800abbc:	250c      	movcc	r5, #12
 800abbe:	2d00      	cmp	r5, #0
 800abc0:	4606      	mov	r6, r0
 800abc2:	db01      	blt.n	800abc8 <_malloc_r+0x1c>
 800abc4:	42a9      	cmp	r1, r5
 800abc6:	d904      	bls.n	800abd2 <_malloc_r+0x26>
 800abc8:	230c      	movs	r3, #12
 800abca:	6033      	str	r3, [r6, #0]
 800abcc:	2000      	movs	r0, #0
 800abce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aca8 <_malloc_r+0xfc>
 800abd6:	f000 f869 	bl	800acac <__malloc_lock>
 800abda:	f8d8 3000 	ldr.w	r3, [r8]
 800abde:	461c      	mov	r4, r3
 800abe0:	bb44      	cbnz	r4, 800ac34 <_malloc_r+0x88>
 800abe2:	4629      	mov	r1, r5
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7ff ffbf 	bl	800ab68 <sbrk_aligned>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	4604      	mov	r4, r0
 800abee:	d158      	bne.n	800aca2 <_malloc_r+0xf6>
 800abf0:	f8d8 4000 	ldr.w	r4, [r8]
 800abf4:	4627      	mov	r7, r4
 800abf6:	2f00      	cmp	r7, #0
 800abf8:	d143      	bne.n	800ac82 <_malloc_r+0xd6>
 800abfa:	2c00      	cmp	r4, #0
 800abfc:	d04b      	beq.n	800ac96 <_malloc_r+0xea>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	4639      	mov	r1, r7
 800ac02:	4630      	mov	r0, r6
 800ac04:	eb04 0903 	add.w	r9, r4, r3
 800ac08:	f000 fdfc 	bl	800b804 <_sbrk_r>
 800ac0c:	4581      	cmp	r9, r0
 800ac0e:	d142      	bne.n	800ac96 <_malloc_r+0xea>
 800ac10:	6821      	ldr	r1, [r4, #0]
 800ac12:	1a6d      	subs	r5, r5, r1
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ffa6 	bl	800ab68 <sbrk_aligned>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d03a      	beq.n	800ac96 <_malloc_r+0xea>
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	442b      	add	r3, r5
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	f8d8 3000 	ldr.w	r3, [r8]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	bb62      	cbnz	r2, 800ac88 <_malloc_r+0xdc>
 800ac2e:	f8c8 7000 	str.w	r7, [r8]
 800ac32:	e00f      	b.n	800ac54 <_malloc_r+0xa8>
 800ac34:	6822      	ldr	r2, [r4, #0]
 800ac36:	1b52      	subs	r2, r2, r5
 800ac38:	d420      	bmi.n	800ac7c <_malloc_r+0xd0>
 800ac3a:	2a0b      	cmp	r2, #11
 800ac3c:	d917      	bls.n	800ac6e <_malloc_r+0xc2>
 800ac3e:	1961      	adds	r1, r4, r5
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	6025      	str	r5, [r4, #0]
 800ac44:	bf18      	it	ne
 800ac46:	6059      	strne	r1, [r3, #4]
 800ac48:	6863      	ldr	r3, [r4, #4]
 800ac4a:	bf08      	it	eq
 800ac4c:	f8c8 1000 	streq.w	r1, [r8]
 800ac50:	5162      	str	r2, [r4, r5]
 800ac52:	604b      	str	r3, [r1, #4]
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 f82f 	bl	800acb8 <__malloc_unlock>
 800ac5a:	f104 000b 	add.w	r0, r4, #11
 800ac5e:	1d23      	adds	r3, r4, #4
 800ac60:	f020 0007 	bic.w	r0, r0, #7
 800ac64:	1ac2      	subs	r2, r0, r3
 800ac66:	bf1c      	itt	ne
 800ac68:	1a1b      	subne	r3, r3, r0
 800ac6a:	50a3      	strne	r3, [r4, r2]
 800ac6c:	e7af      	b.n	800abce <_malloc_r+0x22>
 800ac6e:	6862      	ldr	r2, [r4, #4]
 800ac70:	42a3      	cmp	r3, r4
 800ac72:	bf0c      	ite	eq
 800ac74:	f8c8 2000 	streq.w	r2, [r8]
 800ac78:	605a      	strne	r2, [r3, #4]
 800ac7a:	e7eb      	b.n	800ac54 <_malloc_r+0xa8>
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	6864      	ldr	r4, [r4, #4]
 800ac80:	e7ae      	b.n	800abe0 <_malloc_r+0x34>
 800ac82:	463c      	mov	r4, r7
 800ac84:	687f      	ldr	r7, [r7, #4]
 800ac86:	e7b6      	b.n	800abf6 <_malloc_r+0x4a>
 800ac88:	461a      	mov	r2, r3
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	d1fb      	bne.n	800ac88 <_malloc_r+0xdc>
 800ac90:	2300      	movs	r3, #0
 800ac92:	6053      	str	r3, [r2, #4]
 800ac94:	e7de      	b.n	800ac54 <_malloc_r+0xa8>
 800ac96:	230c      	movs	r3, #12
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f000 f80c 	bl	800acb8 <__malloc_unlock>
 800aca0:	e794      	b.n	800abcc <_malloc_r+0x20>
 800aca2:	6005      	str	r5, [r0, #0]
 800aca4:	e7d6      	b.n	800ac54 <_malloc_r+0xa8>
 800aca6:	bf00      	nop
 800aca8:	24005308 	.word	0x24005308

0800acac <__malloc_lock>:
 800acac:	4801      	ldr	r0, [pc, #4]	@ (800acb4 <__malloc_lock+0x8>)
 800acae:	f7ff b91a 	b.w	8009ee6 <__retarget_lock_acquire_recursive>
 800acb2:	bf00      	nop
 800acb4:	24005300 	.word	0x24005300

0800acb8 <__malloc_unlock>:
 800acb8:	4801      	ldr	r0, [pc, #4]	@ (800acc0 <__malloc_unlock+0x8>)
 800acba:	f7ff b915 	b.w	8009ee8 <__retarget_lock_release_recursive>
 800acbe:	bf00      	nop
 800acc0:	24005300 	.word	0x24005300

0800acc4 <_Balloc>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	69c6      	ldr	r6, [r0, #28]
 800acc8:	4604      	mov	r4, r0
 800acca:	460d      	mov	r5, r1
 800accc:	b976      	cbnz	r6, 800acec <_Balloc+0x28>
 800acce:	2010      	movs	r0, #16
 800acd0:	f7ff ff42 	bl	800ab58 <malloc>
 800acd4:	4602      	mov	r2, r0
 800acd6:	61e0      	str	r0, [r4, #28]
 800acd8:	b920      	cbnz	r0, 800ace4 <_Balloc+0x20>
 800acda:	4b18      	ldr	r3, [pc, #96]	@ (800ad3c <_Balloc+0x78>)
 800acdc:	4818      	ldr	r0, [pc, #96]	@ (800ad40 <_Balloc+0x7c>)
 800acde:	216b      	movs	r1, #107	@ 0x6b
 800ace0:	f000 fda0 	bl	800b824 <__assert_func>
 800ace4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ace8:	6006      	str	r6, [r0, #0]
 800acea:	60c6      	str	r6, [r0, #12]
 800acec:	69e6      	ldr	r6, [r4, #28]
 800acee:	68f3      	ldr	r3, [r6, #12]
 800acf0:	b183      	cbz	r3, 800ad14 <_Balloc+0x50>
 800acf2:	69e3      	ldr	r3, [r4, #28]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acfa:	b9b8      	cbnz	r0, 800ad2c <_Balloc+0x68>
 800acfc:	2101      	movs	r1, #1
 800acfe:	fa01 f605 	lsl.w	r6, r1, r5
 800ad02:	1d72      	adds	r2, r6, #5
 800ad04:	0092      	lsls	r2, r2, #2
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 fdaa 	bl	800b860 <_calloc_r>
 800ad0c:	b160      	cbz	r0, 800ad28 <_Balloc+0x64>
 800ad0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad12:	e00e      	b.n	800ad32 <_Balloc+0x6e>
 800ad14:	2221      	movs	r2, #33	@ 0x21
 800ad16:	2104      	movs	r1, #4
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 fda1 	bl	800b860 <_calloc_r>
 800ad1e:	69e3      	ldr	r3, [r4, #28]
 800ad20:	60f0      	str	r0, [r6, #12]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e4      	bne.n	800acf2 <_Balloc+0x2e>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}
 800ad2c:	6802      	ldr	r2, [r0, #0]
 800ad2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad32:	2300      	movs	r3, #0
 800ad34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad38:	e7f7      	b.n	800ad2a <_Balloc+0x66>
 800ad3a:	bf00      	nop
 800ad3c:	0800d791 	.word	0x0800d791
 800ad40:	0800d811 	.word	0x0800d811

0800ad44 <_Bfree>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	69c6      	ldr	r6, [r0, #28]
 800ad48:	4605      	mov	r5, r0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	b976      	cbnz	r6, 800ad6c <_Bfree+0x28>
 800ad4e:	2010      	movs	r0, #16
 800ad50:	f7ff ff02 	bl	800ab58 <malloc>
 800ad54:	4602      	mov	r2, r0
 800ad56:	61e8      	str	r0, [r5, #28]
 800ad58:	b920      	cbnz	r0, 800ad64 <_Bfree+0x20>
 800ad5a:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <_Bfree+0x3c>)
 800ad5c:	4809      	ldr	r0, [pc, #36]	@ (800ad84 <_Bfree+0x40>)
 800ad5e:	218f      	movs	r1, #143	@ 0x8f
 800ad60:	f000 fd60 	bl	800b824 <__assert_func>
 800ad64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad68:	6006      	str	r6, [r0, #0]
 800ad6a:	60c6      	str	r6, [r0, #12]
 800ad6c:	b13c      	cbz	r4, 800ad7e <_Bfree+0x3a>
 800ad6e:	69eb      	ldr	r3, [r5, #28]
 800ad70:	6862      	ldr	r2, [r4, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad78:	6021      	str	r1, [r4, #0]
 800ad7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	0800d791 	.word	0x0800d791
 800ad84:	0800d811 	.word	0x0800d811

0800ad88 <__multadd>:
 800ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	690d      	ldr	r5, [r1, #16]
 800ad8e:	4607      	mov	r7, r0
 800ad90:	460c      	mov	r4, r1
 800ad92:	461e      	mov	r6, r3
 800ad94:	f101 0c14 	add.w	ip, r1, #20
 800ad98:	2000      	movs	r0, #0
 800ad9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad9e:	b299      	uxth	r1, r3
 800ada0:	fb02 6101 	mla	r1, r2, r1, r6
 800ada4:	0c1e      	lsrs	r6, r3, #16
 800ada6:	0c0b      	lsrs	r3, r1, #16
 800ada8:	fb02 3306 	mla	r3, r2, r6, r3
 800adac:	b289      	uxth	r1, r1
 800adae:	3001      	adds	r0, #1
 800adb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800adb4:	4285      	cmp	r5, r0
 800adb6:	f84c 1b04 	str.w	r1, [ip], #4
 800adba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800adbe:	dcec      	bgt.n	800ad9a <__multadd+0x12>
 800adc0:	b30e      	cbz	r6, 800ae06 <__multadd+0x7e>
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	42ab      	cmp	r3, r5
 800adc6:	dc19      	bgt.n	800adfc <__multadd+0x74>
 800adc8:	6861      	ldr	r1, [r4, #4]
 800adca:	4638      	mov	r0, r7
 800adcc:	3101      	adds	r1, #1
 800adce:	f7ff ff79 	bl	800acc4 <_Balloc>
 800add2:	4680      	mov	r8, r0
 800add4:	b928      	cbnz	r0, 800ade2 <__multadd+0x5a>
 800add6:	4602      	mov	r2, r0
 800add8:	4b0c      	ldr	r3, [pc, #48]	@ (800ae0c <__multadd+0x84>)
 800adda:	480d      	ldr	r0, [pc, #52]	@ (800ae10 <__multadd+0x88>)
 800addc:	21ba      	movs	r1, #186	@ 0xba
 800adde:	f000 fd21 	bl	800b824 <__assert_func>
 800ade2:	6922      	ldr	r2, [r4, #16]
 800ade4:	3202      	adds	r2, #2
 800ade6:	f104 010c 	add.w	r1, r4, #12
 800adea:	0092      	lsls	r2, r2, #2
 800adec:	300c      	adds	r0, #12
 800adee:	f7ff f87c 	bl	8009eea <memcpy>
 800adf2:	4621      	mov	r1, r4
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff ffa5 	bl	800ad44 <_Bfree>
 800adfa:	4644      	mov	r4, r8
 800adfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae00:	3501      	adds	r5, #1
 800ae02:	615e      	str	r6, [r3, #20]
 800ae04:	6125      	str	r5, [r4, #16]
 800ae06:	4620      	mov	r0, r4
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0c:	0800d800 	.word	0x0800d800
 800ae10:	0800d811 	.word	0x0800d811

0800ae14 <__hi0bits>:
 800ae14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae18:	4603      	mov	r3, r0
 800ae1a:	bf36      	itet	cc
 800ae1c:	0403      	lslcc	r3, r0, #16
 800ae1e:	2000      	movcs	r0, #0
 800ae20:	2010      	movcc	r0, #16
 800ae22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae26:	bf3c      	itt	cc
 800ae28:	021b      	lslcc	r3, r3, #8
 800ae2a:	3008      	addcc	r0, #8
 800ae2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae30:	bf3c      	itt	cc
 800ae32:	011b      	lslcc	r3, r3, #4
 800ae34:	3004      	addcc	r0, #4
 800ae36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae3a:	bf3c      	itt	cc
 800ae3c:	009b      	lslcc	r3, r3, #2
 800ae3e:	3002      	addcc	r0, #2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	db05      	blt.n	800ae50 <__hi0bits+0x3c>
 800ae44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae48:	f100 0001 	add.w	r0, r0, #1
 800ae4c:	bf08      	it	eq
 800ae4e:	2020      	moveq	r0, #32
 800ae50:	4770      	bx	lr

0800ae52 <__lo0bits>:
 800ae52:	6803      	ldr	r3, [r0, #0]
 800ae54:	4602      	mov	r2, r0
 800ae56:	f013 0007 	ands.w	r0, r3, #7
 800ae5a:	d00b      	beq.n	800ae74 <__lo0bits+0x22>
 800ae5c:	07d9      	lsls	r1, r3, #31
 800ae5e:	d421      	bmi.n	800aea4 <__lo0bits+0x52>
 800ae60:	0798      	lsls	r0, r3, #30
 800ae62:	bf49      	itett	mi
 800ae64:	085b      	lsrmi	r3, r3, #1
 800ae66:	089b      	lsrpl	r3, r3, #2
 800ae68:	2001      	movmi	r0, #1
 800ae6a:	6013      	strmi	r3, [r2, #0]
 800ae6c:	bf5c      	itt	pl
 800ae6e:	6013      	strpl	r3, [r2, #0]
 800ae70:	2002      	movpl	r0, #2
 800ae72:	4770      	bx	lr
 800ae74:	b299      	uxth	r1, r3
 800ae76:	b909      	cbnz	r1, 800ae7c <__lo0bits+0x2a>
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	2010      	movs	r0, #16
 800ae7c:	b2d9      	uxtb	r1, r3
 800ae7e:	b909      	cbnz	r1, 800ae84 <__lo0bits+0x32>
 800ae80:	3008      	adds	r0, #8
 800ae82:	0a1b      	lsrs	r3, r3, #8
 800ae84:	0719      	lsls	r1, r3, #28
 800ae86:	bf04      	itt	eq
 800ae88:	091b      	lsreq	r3, r3, #4
 800ae8a:	3004      	addeq	r0, #4
 800ae8c:	0799      	lsls	r1, r3, #30
 800ae8e:	bf04      	itt	eq
 800ae90:	089b      	lsreq	r3, r3, #2
 800ae92:	3002      	addeq	r0, #2
 800ae94:	07d9      	lsls	r1, r3, #31
 800ae96:	d403      	bmi.n	800aea0 <__lo0bits+0x4e>
 800ae98:	085b      	lsrs	r3, r3, #1
 800ae9a:	f100 0001 	add.w	r0, r0, #1
 800ae9e:	d003      	beq.n	800aea8 <__lo0bits+0x56>
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	4770      	bx	lr
 800aea4:	2000      	movs	r0, #0
 800aea6:	4770      	bx	lr
 800aea8:	2020      	movs	r0, #32
 800aeaa:	4770      	bx	lr

0800aeac <__i2b>:
 800aeac:	b510      	push	{r4, lr}
 800aeae:	460c      	mov	r4, r1
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	f7ff ff07 	bl	800acc4 <_Balloc>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	b928      	cbnz	r0, 800aec6 <__i2b+0x1a>
 800aeba:	4b05      	ldr	r3, [pc, #20]	@ (800aed0 <__i2b+0x24>)
 800aebc:	4805      	ldr	r0, [pc, #20]	@ (800aed4 <__i2b+0x28>)
 800aebe:	f240 1145 	movw	r1, #325	@ 0x145
 800aec2:	f000 fcaf 	bl	800b824 <__assert_func>
 800aec6:	2301      	movs	r3, #1
 800aec8:	6144      	str	r4, [r0, #20]
 800aeca:	6103      	str	r3, [r0, #16]
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	bf00      	nop
 800aed0:	0800d800 	.word	0x0800d800
 800aed4:	0800d811 	.word	0x0800d811

0800aed8 <__multiply>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	4614      	mov	r4, r2
 800aede:	690a      	ldr	r2, [r1, #16]
 800aee0:	6923      	ldr	r3, [r4, #16]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	bfa8      	it	ge
 800aee6:	4623      	movge	r3, r4
 800aee8:	460f      	mov	r7, r1
 800aeea:	bfa4      	itt	ge
 800aeec:	460c      	movge	r4, r1
 800aeee:	461f      	movge	r7, r3
 800aef0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aef4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aef8:	68a3      	ldr	r3, [r4, #8]
 800aefa:	6861      	ldr	r1, [r4, #4]
 800aefc:	eb0a 0609 	add.w	r6, sl, r9
 800af00:	42b3      	cmp	r3, r6
 800af02:	b085      	sub	sp, #20
 800af04:	bfb8      	it	lt
 800af06:	3101      	addlt	r1, #1
 800af08:	f7ff fedc 	bl	800acc4 <_Balloc>
 800af0c:	b930      	cbnz	r0, 800af1c <__multiply+0x44>
 800af0e:	4602      	mov	r2, r0
 800af10:	4b44      	ldr	r3, [pc, #272]	@ (800b024 <__multiply+0x14c>)
 800af12:	4845      	ldr	r0, [pc, #276]	@ (800b028 <__multiply+0x150>)
 800af14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af18:	f000 fc84 	bl	800b824 <__assert_func>
 800af1c:	f100 0514 	add.w	r5, r0, #20
 800af20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af24:	462b      	mov	r3, r5
 800af26:	2200      	movs	r2, #0
 800af28:	4543      	cmp	r3, r8
 800af2a:	d321      	bcc.n	800af70 <__multiply+0x98>
 800af2c:	f107 0114 	add.w	r1, r7, #20
 800af30:	f104 0214 	add.w	r2, r4, #20
 800af34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af3c:	9302      	str	r3, [sp, #8]
 800af3e:	1b13      	subs	r3, r2, r4
 800af40:	3b15      	subs	r3, #21
 800af42:	f023 0303 	bic.w	r3, r3, #3
 800af46:	3304      	adds	r3, #4
 800af48:	f104 0715 	add.w	r7, r4, #21
 800af4c:	42ba      	cmp	r2, r7
 800af4e:	bf38      	it	cc
 800af50:	2304      	movcc	r3, #4
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	9b02      	ldr	r3, [sp, #8]
 800af56:	9103      	str	r1, [sp, #12]
 800af58:	428b      	cmp	r3, r1
 800af5a:	d80c      	bhi.n	800af76 <__multiply+0x9e>
 800af5c:	2e00      	cmp	r6, #0
 800af5e:	dd03      	ble.n	800af68 <__multiply+0x90>
 800af60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af64:	2b00      	cmp	r3, #0
 800af66:	d05b      	beq.n	800b020 <__multiply+0x148>
 800af68:	6106      	str	r6, [r0, #16]
 800af6a:	b005      	add	sp, #20
 800af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af70:	f843 2b04 	str.w	r2, [r3], #4
 800af74:	e7d8      	b.n	800af28 <__multiply+0x50>
 800af76:	f8b1 a000 	ldrh.w	sl, [r1]
 800af7a:	f1ba 0f00 	cmp.w	sl, #0
 800af7e:	d024      	beq.n	800afca <__multiply+0xf2>
 800af80:	f104 0e14 	add.w	lr, r4, #20
 800af84:	46a9      	mov	r9, r5
 800af86:	f04f 0c00 	mov.w	ip, #0
 800af8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af8e:	f8d9 3000 	ldr.w	r3, [r9]
 800af92:	fa1f fb87 	uxth.w	fp, r7
 800af96:	b29b      	uxth	r3, r3
 800af98:	fb0a 330b 	mla	r3, sl, fp, r3
 800af9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800afa0:	f8d9 7000 	ldr.w	r7, [r9]
 800afa4:	4463      	add	r3, ip
 800afa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afaa:	fb0a c70b 	mla	r7, sl, fp, ip
 800afae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afb8:	4572      	cmp	r2, lr
 800afba:	f849 3b04 	str.w	r3, [r9], #4
 800afbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800afc2:	d8e2      	bhi.n	800af8a <__multiply+0xb2>
 800afc4:	9b01      	ldr	r3, [sp, #4]
 800afc6:	f845 c003 	str.w	ip, [r5, r3]
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800afd0:	3104      	adds	r1, #4
 800afd2:	f1b9 0f00 	cmp.w	r9, #0
 800afd6:	d021      	beq.n	800b01c <__multiply+0x144>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	f104 0c14 	add.w	ip, r4, #20
 800afde:	46ae      	mov	lr, r5
 800afe0:	f04f 0a00 	mov.w	sl, #0
 800afe4:	f8bc b000 	ldrh.w	fp, [ip]
 800afe8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800afec:	fb09 770b 	mla	r7, r9, fp, r7
 800aff0:	4457      	add	r7, sl
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aff8:	f84e 3b04 	str.w	r3, [lr], #4
 800affc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b004:	f8be 3000 	ldrh.w	r3, [lr]
 800b008:	fb09 330a 	mla	r3, r9, sl, r3
 800b00c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b010:	4562      	cmp	r2, ip
 800b012:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b016:	d8e5      	bhi.n	800afe4 <__multiply+0x10c>
 800b018:	9f01      	ldr	r7, [sp, #4]
 800b01a:	51eb      	str	r3, [r5, r7]
 800b01c:	3504      	adds	r5, #4
 800b01e:	e799      	b.n	800af54 <__multiply+0x7c>
 800b020:	3e01      	subs	r6, #1
 800b022:	e79b      	b.n	800af5c <__multiply+0x84>
 800b024:	0800d800 	.word	0x0800d800
 800b028:	0800d811 	.word	0x0800d811

0800b02c <__pow5mult>:
 800b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b030:	4615      	mov	r5, r2
 800b032:	f012 0203 	ands.w	r2, r2, #3
 800b036:	4607      	mov	r7, r0
 800b038:	460e      	mov	r6, r1
 800b03a:	d007      	beq.n	800b04c <__pow5mult+0x20>
 800b03c:	4c25      	ldr	r4, [pc, #148]	@ (800b0d4 <__pow5mult+0xa8>)
 800b03e:	3a01      	subs	r2, #1
 800b040:	2300      	movs	r3, #0
 800b042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b046:	f7ff fe9f 	bl	800ad88 <__multadd>
 800b04a:	4606      	mov	r6, r0
 800b04c:	10ad      	asrs	r5, r5, #2
 800b04e:	d03d      	beq.n	800b0cc <__pow5mult+0xa0>
 800b050:	69fc      	ldr	r4, [r7, #28]
 800b052:	b97c      	cbnz	r4, 800b074 <__pow5mult+0x48>
 800b054:	2010      	movs	r0, #16
 800b056:	f7ff fd7f 	bl	800ab58 <malloc>
 800b05a:	4602      	mov	r2, r0
 800b05c:	61f8      	str	r0, [r7, #28]
 800b05e:	b928      	cbnz	r0, 800b06c <__pow5mult+0x40>
 800b060:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d8 <__pow5mult+0xac>)
 800b062:	481e      	ldr	r0, [pc, #120]	@ (800b0dc <__pow5mult+0xb0>)
 800b064:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b068:	f000 fbdc 	bl	800b824 <__assert_func>
 800b06c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b070:	6004      	str	r4, [r0, #0]
 800b072:	60c4      	str	r4, [r0, #12]
 800b074:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b07c:	b94c      	cbnz	r4, 800b092 <__pow5mult+0x66>
 800b07e:	f240 2171 	movw	r1, #625	@ 0x271
 800b082:	4638      	mov	r0, r7
 800b084:	f7ff ff12 	bl	800aeac <__i2b>
 800b088:	2300      	movs	r3, #0
 800b08a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b08e:	4604      	mov	r4, r0
 800b090:	6003      	str	r3, [r0, #0]
 800b092:	f04f 0900 	mov.w	r9, #0
 800b096:	07eb      	lsls	r3, r5, #31
 800b098:	d50a      	bpl.n	800b0b0 <__pow5mult+0x84>
 800b09a:	4631      	mov	r1, r6
 800b09c:	4622      	mov	r2, r4
 800b09e:	4638      	mov	r0, r7
 800b0a0:	f7ff ff1a 	bl	800aed8 <__multiply>
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f7ff fe4b 	bl	800ad44 <_Bfree>
 800b0ae:	4646      	mov	r6, r8
 800b0b0:	106d      	asrs	r5, r5, #1
 800b0b2:	d00b      	beq.n	800b0cc <__pow5mult+0xa0>
 800b0b4:	6820      	ldr	r0, [r4, #0]
 800b0b6:	b938      	cbnz	r0, 800b0c8 <__pow5mult+0x9c>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7ff ff0b 	bl	800aed8 <__multiply>
 800b0c2:	6020      	str	r0, [r4, #0]
 800b0c4:	f8c0 9000 	str.w	r9, [r0]
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	e7e4      	b.n	800b096 <__pow5mult+0x6a>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d2:	bf00      	nop
 800b0d4:	0800d86c 	.word	0x0800d86c
 800b0d8:	0800d791 	.word	0x0800d791
 800b0dc:	0800d811 	.word	0x0800d811

0800b0e0 <__lshift>:
 800b0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	6849      	ldr	r1, [r1, #4]
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0ee:	68a3      	ldr	r3, [r4, #8]
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	4691      	mov	r9, r2
 800b0f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0f8:	f108 0601 	add.w	r6, r8, #1
 800b0fc:	42b3      	cmp	r3, r6
 800b0fe:	db0b      	blt.n	800b118 <__lshift+0x38>
 800b100:	4638      	mov	r0, r7
 800b102:	f7ff fddf 	bl	800acc4 <_Balloc>
 800b106:	4605      	mov	r5, r0
 800b108:	b948      	cbnz	r0, 800b11e <__lshift+0x3e>
 800b10a:	4602      	mov	r2, r0
 800b10c:	4b28      	ldr	r3, [pc, #160]	@ (800b1b0 <__lshift+0xd0>)
 800b10e:	4829      	ldr	r0, [pc, #164]	@ (800b1b4 <__lshift+0xd4>)
 800b110:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b114:	f000 fb86 	bl	800b824 <__assert_func>
 800b118:	3101      	adds	r1, #1
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	e7ee      	b.n	800b0fc <__lshift+0x1c>
 800b11e:	2300      	movs	r3, #0
 800b120:	f100 0114 	add.w	r1, r0, #20
 800b124:	f100 0210 	add.w	r2, r0, #16
 800b128:	4618      	mov	r0, r3
 800b12a:	4553      	cmp	r3, sl
 800b12c:	db33      	blt.n	800b196 <__lshift+0xb6>
 800b12e:	6920      	ldr	r0, [r4, #16]
 800b130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b134:	f104 0314 	add.w	r3, r4, #20
 800b138:	f019 091f 	ands.w	r9, r9, #31
 800b13c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b140:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b144:	d02b      	beq.n	800b19e <__lshift+0xbe>
 800b146:	f1c9 0e20 	rsb	lr, r9, #32
 800b14a:	468a      	mov	sl, r1
 800b14c:	2200      	movs	r2, #0
 800b14e:	6818      	ldr	r0, [r3, #0]
 800b150:	fa00 f009 	lsl.w	r0, r0, r9
 800b154:	4310      	orrs	r0, r2
 800b156:	f84a 0b04 	str.w	r0, [sl], #4
 800b15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15e:	459c      	cmp	ip, r3
 800b160:	fa22 f20e 	lsr.w	r2, r2, lr
 800b164:	d8f3      	bhi.n	800b14e <__lshift+0x6e>
 800b166:	ebac 0304 	sub.w	r3, ip, r4
 800b16a:	3b15      	subs	r3, #21
 800b16c:	f023 0303 	bic.w	r3, r3, #3
 800b170:	3304      	adds	r3, #4
 800b172:	f104 0015 	add.w	r0, r4, #21
 800b176:	4584      	cmp	ip, r0
 800b178:	bf38      	it	cc
 800b17a:	2304      	movcc	r3, #4
 800b17c:	50ca      	str	r2, [r1, r3]
 800b17e:	b10a      	cbz	r2, 800b184 <__lshift+0xa4>
 800b180:	f108 0602 	add.w	r6, r8, #2
 800b184:	3e01      	subs	r6, #1
 800b186:	4638      	mov	r0, r7
 800b188:	612e      	str	r6, [r5, #16]
 800b18a:	4621      	mov	r1, r4
 800b18c:	f7ff fdda 	bl	800ad44 <_Bfree>
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b196:	f842 0f04 	str.w	r0, [r2, #4]!
 800b19a:	3301      	adds	r3, #1
 800b19c:	e7c5      	b.n	800b12a <__lshift+0x4a>
 800b19e:	3904      	subs	r1, #4
 800b1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1a8:	459c      	cmp	ip, r3
 800b1aa:	d8f9      	bhi.n	800b1a0 <__lshift+0xc0>
 800b1ac:	e7ea      	b.n	800b184 <__lshift+0xa4>
 800b1ae:	bf00      	nop
 800b1b0:	0800d800 	.word	0x0800d800
 800b1b4:	0800d811 	.word	0x0800d811

0800b1b8 <__mcmp>:
 800b1b8:	690a      	ldr	r2, [r1, #16]
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	6900      	ldr	r0, [r0, #16]
 800b1be:	1a80      	subs	r0, r0, r2
 800b1c0:	b530      	push	{r4, r5, lr}
 800b1c2:	d10e      	bne.n	800b1e2 <__mcmp+0x2a>
 800b1c4:	3314      	adds	r3, #20
 800b1c6:	3114      	adds	r1, #20
 800b1c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1d8:	4295      	cmp	r5, r2
 800b1da:	d003      	beq.n	800b1e4 <__mcmp+0x2c>
 800b1dc:	d205      	bcs.n	800b1ea <__mcmp+0x32>
 800b1de:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e2:	bd30      	pop	{r4, r5, pc}
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d3f3      	bcc.n	800b1d0 <__mcmp+0x18>
 800b1e8:	e7fb      	b.n	800b1e2 <__mcmp+0x2a>
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	e7f9      	b.n	800b1e2 <__mcmp+0x2a>
	...

0800b1f0 <__mdiff>:
 800b1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	4689      	mov	r9, r1
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4648      	mov	r0, r9
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	f7ff ffdb 	bl	800b1b8 <__mcmp>
 800b202:	1e05      	subs	r5, r0, #0
 800b204:	d112      	bne.n	800b22c <__mdiff+0x3c>
 800b206:	4629      	mov	r1, r5
 800b208:	4630      	mov	r0, r6
 800b20a:	f7ff fd5b 	bl	800acc4 <_Balloc>
 800b20e:	4602      	mov	r2, r0
 800b210:	b928      	cbnz	r0, 800b21e <__mdiff+0x2e>
 800b212:	4b3f      	ldr	r3, [pc, #252]	@ (800b310 <__mdiff+0x120>)
 800b214:	f240 2137 	movw	r1, #567	@ 0x237
 800b218:	483e      	ldr	r0, [pc, #248]	@ (800b314 <__mdiff+0x124>)
 800b21a:	f000 fb03 	bl	800b824 <__assert_func>
 800b21e:	2301      	movs	r3, #1
 800b220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b224:	4610      	mov	r0, r2
 800b226:	b003      	add	sp, #12
 800b228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22c:	bfbc      	itt	lt
 800b22e:	464b      	movlt	r3, r9
 800b230:	46a1      	movlt	r9, r4
 800b232:	4630      	mov	r0, r6
 800b234:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b238:	bfba      	itte	lt
 800b23a:	461c      	movlt	r4, r3
 800b23c:	2501      	movlt	r5, #1
 800b23e:	2500      	movge	r5, #0
 800b240:	f7ff fd40 	bl	800acc4 <_Balloc>
 800b244:	4602      	mov	r2, r0
 800b246:	b918      	cbnz	r0, 800b250 <__mdiff+0x60>
 800b248:	4b31      	ldr	r3, [pc, #196]	@ (800b310 <__mdiff+0x120>)
 800b24a:	f240 2145 	movw	r1, #581	@ 0x245
 800b24e:	e7e3      	b.n	800b218 <__mdiff+0x28>
 800b250:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b254:	6926      	ldr	r6, [r4, #16]
 800b256:	60c5      	str	r5, [r0, #12]
 800b258:	f109 0310 	add.w	r3, r9, #16
 800b25c:	f109 0514 	add.w	r5, r9, #20
 800b260:	f104 0e14 	add.w	lr, r4, #20
 800b264:	f100 0b14 	add.w	fp, r0, #20
 800b268:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b26c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	46d9      	mov	r9, fp
 800b274:	f04f 0c00 	mov.w	ip, #0
 800b278:	9b01      	ldr	r3, [sp, #4]
 800b27a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b27e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b282:	9301      	str	r3, [sp, #4]
 800b284:	fa1f f38a 	uxth.w	r3, sl
 800b288:	4619      	mov	r1, r3
 800b28a:	b283      	uxth	r3, r0
 800b28c:	1acb      	subs	r3, r1, r3
 800b28e:	0c00      	lsrs	r0, r0, #16
 800b290:	4463      	add	r3, ip
 800b292:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b296:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2a0:	4576      	cmp	r6, lr
 800b2a2:	f849 3b04 	str.w	r3, [r9], #4
 800b2a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2aa:	d8e5      	bhi.n	800b278 <__mdiff+0x88>
 800b2ac:	1b33      	subs	r3, r6, r4
 800b2ae:	3b15      	subs	r3, #21
 800b2b0:	f023 0303 	bic.w	r3, r3, #3
 800b2b4:	3415      	adds	r4, #21
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	42a6      	cmp	r6, r4
 800b2ba:	bf38      	it	cc
 800b2bc:	2304      	movcc	r3, #4
 800b2be:	441d      	add	r5, r3
 800b2c0:	445b      	add	r3, fp
 800b2c2:	461e      	mov	r6, r3
 800b2c4:	462c      	mov	r4, r5
 800b2c6:	4544      	cmp	r4, r8
 800b2c8:	d30e      	bcc.n	800b2e8 <__mdiff+0xf8>
 800b2ca:	f108 0103 	add.w	r1, r8, #3
 800b2ce:	1b49      	subs	r1, r1, r5
 800b2d0:	f021 0103 	bic.w	r1, r1, #3
 800b2d4:	3d03      	subs	r5, #3
 800b2d6:	45a8      	cmp	r8, r5
 800b2d8:	bf38      	it	cc
 800b2da:	2100      	movcc	r1, #0
 800b2dc:	440b      	add	r3, r1
 800b2de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2e2:	b191      	cbz	r1, 800b30a <__mdiff+0x11a>
 800b2e4:	6117      	str	r7, [r2, #16]
 800b2e6:	e79d      	b.n	800b224 <__mdiff+0x34>
 800b2e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2ec:	46e6      	mov	lr, ip
 800b2ee:	0c08      	lsrs	r0, r1, #16
 800b2f0:	fa1c fc81 	uxtah	ip, ip, r1
 800b2f4:	4471      	add	r1, lr
 800b2f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b2fa:	b289      	uxth	r1, r1
 800b2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b300:	f846 1b04 	str.w	r1, [r6], #4
 800b304:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b308:	e7dd      	b.n	800b2c6 <__mdiff+0xd6>
 800b30a:	3f01      	subs	r7, #1
 800b30c:	e7e7      	b.n	800b2de <__mdiff+0xee>
 800b30e:	bf00      	nop
 800b310:	0800d800 	.word	0x0800d800
 800b314:	0800d811 	.word	0x0800d811

0800b318 <__d2b>:
 800b318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b31c:	460f      	mov	r7, r1
 800b31e:	2101      	movs	r1, #1
 800b320:	ec59 8b10 	vmov	r8, r9, d0
 800b324:	4616      	mov	r6, r2
 800b326:	f7ff fccd 	bl	800acc4 <_Balloc>
 800b32a:	4604      	mov	r4, r0
 800b32c:	b930      	cbnz	r0, 800b33c <__d2b+0x24>
 800b32e:	4602      	mov	r2, r0
 800b330:	4b23      	ldr	r3, [pc, #140]	@ (800b3c0 <__d2b+0xa8>)
 800b332:	4824      	ldr	r0, [pc, #144]	@ (800b3c4 <__d2b+0xac>)
 800b334:	f240 310f 	movw	r1, #783	@ 0x30f
 800b338:	f000 fa74 	bl	800b824 <__assert_func>
 800b33c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b344:	b10d      	cbz	r5, 800b34a <__d2b+0x32>
 800b346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	f1b8 0300 	subs.w	r3, r8, #0
 800b350:	d023      	beq.n	800b39a <__d2b+0x82>
 800b352:	4668      	mov	r0, sp
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	f7ff fd7c 	bl	800ae52 <__lo0bits>
 800b35a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b35e:	b1d0      	cbz	r0, 800b396 <__d2b+0x7e>
 800b360:	f1c0 0320 	rsb	r3, r0, #32
 800b364:	fa02 f303 	lsl.w	r3, r2, r3
 800b368:	430b      	orrs	r3, r1
 800b36a:	40c2      	lsrs	r2, r0
 800b36c:	6163      	str	r3, [r4, #20]
 800b36e:	9201      	str	r2, [sp, #4]
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	61a3      	str	r3, [r4, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	bf0c      	ite	eq
 800b378:	2201      	moveq	r2, #1
 800b37a:	2202      	movne	r2, #2
 800b37c:	6122      	str	r2, [r4, #16]
 800b37e:	b1a5      	cbz	r5, 800b3aa <__d2b+0x92>
 800b380:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b384:	4405      	add	r5, r0
 800b386:	603d      	str	r5, [r7, #0]
 800b388:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b38c:	6030      	str	r0, [r6, #0]
 800b38e:	4620      	mov	r0, r4
 800b390:	b003      	add	sp, #12
 800b392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b396:	6161      	str	r1, [r4, #20]
 800b398:	e7ea      	b.n	800b370 <__d2b+0x58>
 800b39a:	a801      	add	r0, sp, #4
 800b39c:	f7ff fd59 	bl	800ae52 <__lo0bits>
 800b3a0:	9b01      	ldr	r3, [sp, #4]
 800b3a2:	6163      	str	r3, [r4, #20]
 800b3a4:	3020      	adds	r0, #32
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	e7e8      	b.n	800b37c <__d2b+0x64>
 800b3aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3b2:	6038      	str	r0, [r7, #0]
 800b3b4:	6918      	ldr	r0, [r3, #16]
 800b3b6:	f7ff fd2d 	bl	800ae14 <__hi0bits>
 800b3ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3be:	e7e5      	b.n	800b38c <__d2b+0x74>
 800b3c0:	0800d800 	.word	0x0800d800
 800b3c4:	0800d811 	.word	0x0800d811

0800b3c8 <__ssputs_r>:
 800b3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3cc:	688e      	ldr	r6, [r1, #8]
 800b3ce:	461f      	mov	r7, r3
 800b3d0:	42be      	cmp	r6, r7
 800b3d2:	680b      	ldr	r3, [r1, #0]
 800b3d4:	4682      	mov	sl, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	4690      	mov	r8, r2
 800b3da:	d82d      	bhi.n	800b438 <__ssputs_r+0x70>
 800b3dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b3e4:	d026      	beq.n	800b434 <__ssputs_r+0x6c>
 800b3e6:	6965      	ldr	r5, [r4, #20]
 800b3e8:	6909      	ldr	r1, [r1, #16]
 800b3ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3ee:	eba3 0901 	sub.w	r9, r3, r1
 800b3f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3f6:	1c7b      	adds	r3, r7, #1
 800b3f8:	444b      	add	r3, r9
 800b3fa:	106d      	asrs	r5, r5, #1
 800b3fc:	429d      	cmp	r5, r3
 800b3fe:	bf38      	it	cc
 800b400:	461d      	movcc	r5, r3
 800b402:	0553      	lsls	r3, r2, #21
 800b404:	d527      	bpl.n	800b456 <__ssputs_r+0x8e>
 800b406:	4629      	mov	r1, r5
 800b408:	f7ff fbd0 	bl	800abac <_malloc_r>
 800b40c:	4606      	mov	r6, r0
 800b40e:	b360      	cbz	r0, 800b46a <__ssputs_r+0xa2>
 800b410:	6921      	ldr	r1, [r4, #16]
 800b412:	464a      	mov	r2, r9
 800b414:	f7fe fd69 	bl	8009eea <memcpy>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b41e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b422:	81a3      	strh	r3, [r4, #12]
 800b424:	6126      	str	r6, [r4, #16]
 800b426:	6165      	str	r5, [r4, #20]
 800b428:	444e      	add	r6, r9
 800b42a:	eba5 0509 	sub.w	r5, r5, r9
 800b42e:	6026      	str	r6, [r4, #0]
 800b430:	60a5      	str	r5, [r4, #8]
 800b432:	463e      	mov	r6, r7
 800b434:	42be      	cmp	r6, r7
 800b436:	d900      	bls.n	800b43a <__ssputs_r+0x72>
 800b438:	463e      	mov	r6, r7
 800b43a:	6820      	ldr	r0, [r4, #0]
 800b43c:	4632      	mov	r2, r6
 800b43e:	4641      	mov	r1, r8
 800b440:	f000 f9c6 	bl	800b7d0 <memmove>
 800b444:	68a3      	ldr	r3, [r4, #8]
 800b446:	1b9b      	subs	r3, r3, r6
 800b448:	60a3      	str	r3, [r4, #8]
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	4433      	add	r3, r6
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	2000      	movs	r0, #0
 800b452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b456:	462a      	mov	r2, r5
 800b458:	f000 fa28 	bl	800b8ac <_realloc_r>
 800b45c:	4606      	mov	r6, r0
 800b45e:	2800      	cmp	r0, #0
 800b460:	d1e0      	bne.n	800b424 <__ssputs_r+0x5c>
 800b462:	6921      	ldr	r1, [r4, #16]
 800b464:	4650      	mov	r0, sl
 800b466:	f7ff fb2d 	bl	800aac4 <_free_r>
 800b46a:	230c      	movs	r3, #12
 800b46c:	f8ca 3000 	str.w	r3, [sl]
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	e7e9      	b.n	800b452 <__ssputs_r+0x8a>
	...

0800b480 <_svfiprintf_r>:
 800b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b484:	4698      	mov	r8, r3
 800b486:	898b      	ldrh	r3, [r1, #12]
 800b488:	061b      	lsls	r3, r3, #24
 800b48a:	b09d      	sub	sp, #116	@ 0x74
 800b48c:	4607      	mov	r7, r0
 800b48e:	460d      	mov	r5, r1
 800b490:	4614      	mov	r4, r2
 800b492:	d510      	bpl.n	800b4b6 <_svfiprintf_r+0x36>
 800b494:	690b      	ldr	r3, [r1, #16]
 800b496:	b973      	cbnz	r3, 800b4b6 <_svfiprintf_r+0x36>
 800b498:	2140      	movs	r1, #64	@ 0x40
 800b49a:	f7ff fb87 	bl	800abac <_malloc_r>
 800b49e:	6028      	str	r0, [r5, #0]
 800b4a0:	6128      	str	r0, [r5, #16]
 800b4a2:	b930      	cbnz	r0, 800b4b2 <_svfiprintf_r+0x32>
 800b4a4:	230c      	movs	r3, #12
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ac:	b01d      	add	sp, #116	@ 0x74
 800b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b2:	2340      	movs	r3, #64	@ 0x40
 800b4b4:	616b      	str	r3, [r5, #20]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ba:	2320      	movs	r3, #32
 800b4bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4c4:	2330      	movs	r3, #48	@ 0x30
 800b4c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b664 <_svfiprintf_r+0x1e4>
 800b4ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4ce:	f04f 0901 	mov.w	r9, #1
 800b4d2:	4623      	mov	r3, r4
 800b4d4:	469a      	mov	sl, r3
 800b4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4da:	b10a      	cbz	r2, 800b4e0 <_svfiprintf_r+0x60>
 800b4dc:	2a25      	cmp	r2, #37	@ 0x25
 800b4de:	d1f9      	bne.n	800b4d4 <_svfiprintf_r+0x54>
 800b4e0:	ebba 0b04 	subs.w	fp, sl, r4
 800b4e4:	d00b      	beq.n	800b4fe <_svfiprintf_r+0x7e>
 800b4e6:	465b      	mov	r3, fp
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	f7ff ff6b 	bl	800b3c8 <__ssputs_r>
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	f000 80a7 	beq.w	800b646 <_svfiprintf_r+0x1c6>
 800b4f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4fa:	445a      	add	r2, fp
 800b4fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 809f 	beq.w	800b646 <_svfiprintf_r+0x1c6>
 800b508:	2300      	movs	r3, #0
 800b50a:	f04f 32ff 	mov.w	r2, #4294967295
 800b50e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b512:	f10a 0a01 	add.w	sl, sl, #1
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	9307      	str	r3, [sp, #28]
 800b51a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b51e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b520:	4654      	mov	r4, sl
 800b522:	2205      	movs	r2, #5
 800b524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b528:	484e      	ldr	r0, [pc, #312]	@ (800b664 <_svfiprintf_r+0x1e4>)
 800b52a:	f7f4 fed9 	bl	80002e0 <memchr>
 800b52e:	9a04      	ldr	r2, [sp, #16]
 800b530:	b9d8      	cbnz	r0, 800b56a <_svfiprintf_r+0xea>
 800b532:	06d0      	lsls	r0, r2, #27
 800b534:	bf44      	itt	mi
 800b536:	2320      	movmi	r3, #32
 800b538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b53c:	0711      	lsls	r1, r2, #28
 800b53e:	bf44      	itt	mi
 800b540:	232b      	movmi	r3, #43	@ 0x2b
 800b542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b546:	f89a 3000 	ldrb.w	r3, [sl]
 800b54a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b54c:	d015      	beq.n	800b57a <_svfiprintf_r+0xfa>
 800b54e:	9a07      	ldr	r2, [sp, #28]
 800b550:	4654      	mov	r4, sl
 800b552:	2000      	movs	r0, #0
 800b554:	f04f 0c0a 	mov.w	ip, #10
 800b558:	4621      	mov	r1, r4
 800b55a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b55e:	3b30      	subs	r3, #48	@ 0x30
 800b560:	2b09      	cmp	r3, #9
 800b562:	d94b      	bls.n	800b5fc <_svfiprintf_r+0x17c>
 800b564:	b1b0      	cbz	r0, 800b594 <_svfiprintf_r+0x114>
 800b566:	9207      	str	r2, [sp, #28]
 800b568:	e014      	b.n	800b594 <_svfiprintf_r+0x114>
 800b56a:	eba0 0308 	sub.w	r3, r0, r8
 800b56e:	fa09 f303 	lsl.w	r3, r9, r3
 800b572:	4313      	orrs	r3, r2
 800b574:	9304      	str	r3, [sp, #16]
 800b576:	46a2      	mov	sl, r4
 800b578:	e7d2      	b.n	800b520 <_svfiprintf_r+0xa0>
 800b57a:	9b03      	ldr	r3, [sp, #12]
 800b57c:	1d19      	adds	r1, r3, #4
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	9103      	str	r1, [sp, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	bfbb      	ittet	lt
 800b586:	425b      	neglt	r3, r3
 800b588:	f042 0202 	orrlt.w	r2, r2, #2
 800b58c:	9307      	strge	r3, [sp, #28]
 800b58e:	9307      	strlt	r3, [sp, #28]
 800b590:	bfb8      	it	lt
 800b592:	9204      	strlt	r2, [sp, #16]
 800b594:	7823      	ldrb	r3, [r4, #0]
 800b596:	2b2e      	cmp	r3, #46	@ 0x2e
 800b598:	d10a      	bne.n	800b5b0 <_svfiprintf_r+0x130>
 800b59a:	7863      	ldrb	r3, [r4, #1]
 800b59c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b59e:	d132      	bne.n	800b606 <_svfiprintf_r+0x186>
 800b5a0:	9b03      	ldr	r3, [sp, #12]
 800b5a2:	1d1a      	adds	r2, r3, #4
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	9203      	str	r2, [sp, #12]
 800b5a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5ac:	3402      	adds	r4, #2
 800b5ae:	9305      	str	r3, [sp, #20]
 800b5b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b674 <_svfiprintf_r+0x1f4>
 800b5b4:	7821      	ldrb	r1, [r4, #0]
 800b5b6:	2203      	movs	r2, #3
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	f7f4 fe91 	bl	80002e0 <memchr>
 800b5be:	b138      	cbz	r0, 800b5d0 <_svfiprintf_r+0x150>
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	eba0 000a 	sub.w	r0, r0, sl
 800b5c6:	2240      	movs	r2, #64	@ 0x40
 800b5c8:	4082      	lsls	r2, r0
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	3401      	adds	r4, #1
 800b5ce:	9304      	str	r3, [sp, #16]
 800b5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d4:	4824      	ldr	r0, [pc, #144]	@ (800b668 <_svfiprintf_r+0x1e8>)
 800b5d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5da:	2206      	movs	r2, #6
 800b5dc:	f7f4 fe80 	bl	80002e0 <memchr>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d036      	beq.n	800b652 <_svfiprintf_r+0x1d2>
 800b5e4:	4b21      	ldr	r3, [pc, #132]	@ (800b66c <_svfiprintf_r+0x1ec>)
 800b5e6:	bb1b      	cbnz	r3, 800b630 <_svfiprintf_r+0x1b0>
 800b5e8:	9b03      	ldr	r3, [sp, #12]
 800b5ea:	3307      	adds	r3, #7
 800b5ec:	f023 0307 	bic.w	r3, r3, #7
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	9303      	str	r3, [sp, #12]
 800b5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5f6:	4433      	add	r3, r6
 800b5f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5fa:	e76a      	b.n	800b4d2 <_svfiprintf_r+0x52>
 800b5fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b600:	460c      	mov	r4, r1
 800b602:	2001      	movs	r0, #1
 800b604:	e7a8      	b.n	800b558 <_svfiprintf_r+0xd8>
 800b606:	2300      	movs	r3, #0
 800b608:	3401      	adds	r4, #1
 800b60a:	9305      	str	r3, [sp, #20]
 800b60c:	4619      	mov	r1, r3
 800b60e:	f04f 0c0a 	mov.w	ip, #10
 800b612:	4620      	mov	r0, r4
 800b614:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b618:	3a30      	subs	r2, #48	@ 0x30
 800b61a:	2a09      	cmp	r2, #9
 800b61c:	d903      	bls.n	800b626 <_svfiprintf_r+0x1a6>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0c6      	beq.n	800b5b0 <_svfiprintf_r+0x130>
 800b622:	9105      	str	r1, [sp, #20]
 800b624:	e7c4      	b.n	800b5b0 <_svfiprintf_r+0x130>
 800b626:	fb0c 2101 	mla	r1, ip, r1, r2
 800b62a:	4604      	mov	r4, r0
 800b62c:	2301      	movs	r3, #1
 800b62e:	e7f0      	b.n	800b612 <_svfiprintf_r+0x192>
 800b630:	ab03      	add	r3, sp, #12
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	462a      	mov	r2, r5
 800b636:	4b0e      	ldr	r3, [pc, #56]	@ (800b670 <_svfiprintf_r+0x1f0>)
 800b638:	a904      	add	r1, sp, #16
 800b63a:	4638      	mov	r0, r7
 800b63c:	f7fd ff08 	bl	8009450 <_printf_float>
 800b640:	1c42      	adds	r2, r0, #1
 800b642:	4606      	mov	r6, r0
 800b644:	d1d6      	bne.n	800b5f4 <_svfiprintf_r+0x174>
 800b646:	89ab      	ldrh	r3, [r5, #12]
 800b648:	065b      	lsls	r3, r3, #25
 800b64a:	f53f af2d 	bmi.w	800b4a8 <_svfiprintf_r+0x28>
 800b64e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b650:	e72c      	b.n	800b4ac <_svfiprintf_r+0x2c>
 800b652:	ab03      	add	r3, sp, #12
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	462a      	mov	r2, r5
 800b658:	4b05      	ldr	r3, [pc, #20]	@ (800b670 <_svfiprintf_r+0x1f0>)
 800b65a:	a904      	add	r1, sp, #16
 800b65c:	4638      	mov	r0, r7
 800b65e:	f7fe f97f 	bl	8009960 <_printf_i>
 800b662:	e7ed      	b.n	800b640 <_svfiprintf_r+0x1c0>
 800b664:	0800d968 	.word	0x0800d968
 800b668:	0800d972 	.word	0x0800d972
 800b66c:	08009451 	.word	0x08009451
 800b670:	0800b3c9 	.word	0x0800b3c9
 800b674:	0800d96e 	.word	0x0800d96e

0800b678 <__sflush_r>:
 800b678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b680:	0716      	lsls	r6, r2, #28
 800b682:	4605      	mov	r5, r0
 800b684:	460c      	mov	r4, r1
 800b686:	d454      	bmi.n	800b732 <__sflush_r+0xba>
 800b688:	684b      	ldr	r3, [r1, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	dc02      	bgt.n	800b694 <__sflush_r+0x1c>
 800b68e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b690:	2b00      	cmp	r3, #0
 800b692:	dd48      	ble.n	800b726 <__sflush_r+0xae>
 800b694:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b696:	2e00      	cmp	r6, #0
 800b698:	d045      	beq.n	800b726 <__sflush_r+0xae>
 800b69a:	2300      	movs	r3, #0
 800b69c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6a0:	682f      	ldr	r7, [r5, #0]
 800b6a2:	6a21      	ldr	r1, [r4, #32]
 800b6a4:	602b      	str	r3, [r5, #0]
 800b6a6:	d030      	beq.n	800b70a <__sflush_r+0x92>
 800b6a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	0759      	lsls	r1, r3, #29
 800b6ae:	d505      	bpl.n	800b6bc <__sflush_r+0x44>
 800b6b0:	6863      	ldr	r3, [r4, #4]
 800b6b2:	1ad2      	subs	r2, r2, r3
 800b6b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6b6:	b10b      	cbz	r3, 800b6bc <__sflush_r+0x44>
 800b6b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6ba:	1ad2      	subs	r2, r2, r3
 800b6bc:	2300      	movs	r3, #0
 800b6be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6c0:	6a21      	ldr	r1, [r4, #32]
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	47b0      	blx	r6
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	d106      	bne.n	800b6da <__sflush_r+0x62>
 800b6cc:	6829      	ldr	r1, [r5, #0]
 800b6ce:	291d      	cmp	r1, #29
 800b6d0:	d82b      	bhi.n	800b72a <__sflush_r+0xb2>
 800b6d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b77c <__sflush_r+0x104>)
 800b6d4:	410a      	asrs	r2, r1
 800b6d6:	07d6      	lsls	r6, r2, #31
 800b6d8:	d427      	bmi.n	800b72a <__sflush_r+0xb2>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	6062      	str	r2, [r4, #4]
 800b6de:	04d9      	lsls	r1, r3, #19
 800b6e0:	6922      	ldr	r2, [r4, #16]
 800b6e2:	6022      	str	r2, [r4, #0]
 800b6e4:	d504      	bpl.n	800b6f0 <__sflush_r+0x78>
 800b6e6:	1c42      	adds	r2, r0, #1
 800b6e8:	d101      	bne.n	800b6ee <__sflush_r+0x76>
 800b6ea:	682b      	ldr	r3, [r5, #0]
 800b6ec:	b903      	cbnz	r3, 800b6f0 <__sflush_r+0x78>
 800b6ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6f2:	602f      	str	r7, [r5, #0]
 800b6f4:	b1b9      	cbz	r1, 800b726 <__sflush_r+0xae>
 800b6f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6fa:	4299      	cmp	r1, r3
 800b6fc:	d002      	beq.n	800b704 <__sflush_r+0x8c>
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7ff f9e0 	bl	800aac4 <_free_r>
 800b704:	2300      	movs	r3, #0
 800b706:	6363      	str	r3, [r4, #52]	@ 0x34
 800b708:	e00d      	b.n	800b726 <__sflush_r+0xae>
 800b70a:	2301      	movs	r3, #1
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b0      	blx	r6
 800b710:	4602      	mov	r2, r0
 800b712:	1c50      	adds	r0, r2, #1
 800b714:	d1c9      	bne.n	800b6aa <__sflush_r+0x32>
 800b716:	682b      	ldr	r3, [r5, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0c6      	beq.n	800b6aa <__sflush_r+0x32>
 800b71c:	2b1d      	cmp	r3, #29
 800b71e:	d001      	beq.n	800b724 <__sflush_r+0xac>
 800b720:	2b16      	cmp	r3, #22
 800b722:	d11e      	bne.n	800b762 <__sflush_r+0xea>
 800b724:	602f      	str	r7, [r5, #0]
 800b726:	2000      	movs	r0, #0
 800b728:	e022      	b.n	800b770 <__sflush_r+0xf8>
 800b72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b72e:	b21b      	sxth	r3, r3
 800b730:	e01b      	b.n	800b76a <__sflush_r+0xf2>
 800b732:	690f      	ldr	r7, [r1, #16]
 800b734:	2f00      	cmp	r7, #0
 800b736:	d0f6      	beq.n	800b726 <__sflush_r+0xae>
 800b738:	0793      	lsls	r3, r2, #30
 800b73a:	680e      	ldr	r6, [r1, #0]
 800b73c:	bf08      	it	eq
 800b73e:	694b      	ldreq	r3, [r1, #20]
 800b740:	600f      	str	r7, [r1, #0]
 800b742:	bf18      	it	ne
 800b744:	2300      	movne	r3, #0
 800b746:	eba6 0807 	sub.w	r8, r6, r7
 800b74a:	608b      	str	r3, [r1, #8]
 800b74c:	f1b8 0f00 	cmp.w	r8, #0
 800b750:	dde9      	ble.n	800b726 <__sflush_r+0xae>
 800b752:	6a21      	ldr	r1, [r4, #32]
 800b754:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b756:	4643      	mov	r3, r8
 800b758:	463a      	mov	r2, r7
 800b75a:	4628      	mov	r0, r5
 800b75c:	47b0      	blx	r6
 800b75e:	2800      	cmp	r0, #0
 800b760:	dc08      	bgt.n	800b774 <__sflush_r+0xfc>
 800b762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b774:	4407      	add	r7, r0
 800b776:	eba8 0800 	sub.w	r8, r8, r0
 800b77a:	e7e7      	b.n	800b74c <__sflush_r+0xd4>
 800b77c:	dfbffffe 	.word	0xdfbffffe

0800b780 <_fflush_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	690b      	ldr	r3, [r1, #16]
 800b784:	4605      	mov	r5, r0
 800b786:	460c      	mov	r4, r1
 800b788:	b913      	cbnz	r3, 800b790 <_fflush_r+0x10>
 800b78a:	2500      	movs	r5, #0
 800b78c:	4628      	mov	r0, r5
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	b118      	cbz	r0, 800b79a <_fflush_r+0x1a>
 800b792:	6a03      	ldr	r3, [r0, #32]
 800b794:	b90b      	cbnz	r3, 800b79a <_fflush_r+0x1a>
 800b796:	f7fe fa8f 	bl	8009cb8 <__sinit>
 800b79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d0f3      	beq.n	800b78a <_fflush_r+0xa>
 800b7a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7a4:	07d0      	lsls	r0, r2, #31
 800b7a6:	d404      	bmi.n	800b7b2 <_fflush_r+0x32>
 800b7a8:	0599      	lsls	r1, r3, #22
 800b7aa:	d402      	bmi.n	800b7b2 <_fflush_r+0x32>
 800b7ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ae:	f7fe fb9a 	bl	8009ee6 <__retarget_lock_acquire_recursive>
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	f7ff ff5f 	bl	800b678 <__sflush_r>
 800b7ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7bc:	07da      	lsls	r2, r3, #31
 800b7be:	4605      	mov	r5, r0
 800b7c0:	d4e4      	bmi.n	800b78c <_fflush_r+0xc>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	059b      	lsls	r3, r3, #22
 800b7c6:	d4e1      	bmi.n	800b78c <_fflush_r+0xc>
 800b7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ca:	f7fe fb8d 	bl	8009ee8 <__retarget_lock_release_recursive>
 800b7ce:	e7dd      	b.n	800b78c <_fflush_r+0xc>

0800b7d0 <memmove>:
 800b7d0:	4288      	cmp	r0, r1
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	eb01 0402 	add.w	r4, r1, r2
 800b7d8:	d902      	bls.n	800b7e0 <memmove+0x10>
 800b7da:	4284      	cmp	r4, r0
 800b7dc:	4623      	mov	r3, r4
 800b7de:	d807      	bhi.n	800b7f0 <memmove+0x20>
 800b7e0:	1e43      	subs	r3, r0, #1
 800b7e2:	42a1      	cmp	r1, r4
 800b7e4:	d008      	beq.n	800b7f8 <memmove+0x28>
 800b7e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ee:	e7f8      	b.n	800b7e2 <memmove+0x12>
 800b7f0:	4402      	add	r2, r0
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	428a      	cmp	r2, r1
 800b7f6:	d100      	bne.n	800b7fa <memmove+0x2a>
 800b7f8:	bd10      	pop	{r4, pc}
 800b7fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b802:	e7f7      	b.n	800b7f4 <memmove+0x24>

0800b804 <_sbrk_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d06      	ldr	r5, [pc, #24]	@ (800b820 <_sbrk_r+0x1c>)
 800b808:	2300      	movs	r3, #0
 800b80a:	4604      	mov	r4, r0
 800b80c:	4608      	mov	r0, r1
 800b80e:	602b      	str	r3, [r5, #0]
 800b810:	f7f5 fbdc 	bl	8000fcc <_sbrk>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_sbrk_r+0x1a>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_sbrk_r+0x1a>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	240052fc 	.word	0x240052fc

0800b824 <__assert_func>:
 800b824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b826:	4614      	mov	r4, r2
 800b828:	461a      	mov	r2, r3
 800b82a:	4b09      	ldr	r3, [pc, #36]	@ (800b850 <__assert_func+0x2c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4605      	mov	r5, r0
 800b830:	68d8      	ldr	r0, [r3, #12]
 800b832:	b954      	cbnz	r4, 800b84a <__assert_func+0x26>
 800b834:	4b07      	ldr	r3, [pc, #28]	@ (800b854 <__assert_func+0x30>)
 800b836:	461c      	mov	r4, r3
 800b838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b83c:	9100      	str	r1, [sp, #0]
 800b83e:	462b      	mov	r3, r5
 800b840:	4905      	ldr	r1, [pc, #20]	@ (800b858 <__assert_func+0x34>)
 800b842:	f000 f86f 	bl	800b924 <fiprintf>
 800b846:	f000 f87f 	bl	800b948 <abort>
 800b84a:	4b04      	ldr	r3, [pc, #16]	@ (800b85c <__assert_func+0x38>)
 800b84c:	e7f4      	b.n	800b838 <__assert_func+0x14>
 800b84e:	bf00      	nop
 800b850:	24000020 	.word	0x24000020
 800b854:	0800d9be 	.word	0x0800d9be
 800b858:	0800d990 	.word	0x0800d990
 800b85c:	0800d983 	.word	0x0800d983

0800b860 <_calloc_r>:
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	fba1 5402 	umull	r5, r4, r1, r2
 800b866:	b93c      	cbnz	r4, 800b878 <_calloc_r+0x18>
 800b868:	4629      	mov	r1, r5
 800b86a:	f7ff f99f 	bl	800abac <_malloc_r>
 800b86e:	4606      	mov	r6, r0
 800b870:	b928      	cbnz	r0, 800b87e <_calloc_r+0x1e>
 800b872:	2600      	movs	r6, #0
 800b874:	4630      	mov	r0, r6
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	220c      	movs	r2, #12
 800b87a:	6002      	str	r2, [r0, #0]
 800b87c:	e7f9      	b.n	800b872 <_calloc_r+0x12>
 800b87e:	462a      	mov	r2, r5
 800b880:	4621      	mov	r1, r4
 800b882:	f7fe fab2 	bl	8009dea <memset>
 800b886:	e7f5      	b.n	800b874 <_calloc_r+0x14>

0800b888 <__ascii_mbtowc>:
 800b888:	b082      	sub	sp, #8
 800b88a:	b901      	cbnz	r1, 800b88e <__ascii_mbtowc+0x6>
 800b88c:	a901      	add	r1, sp, #4
 800b88e:	b142      	cbz	r2, 800b8a2 <__ascii_mbtowc+0x1a>
 800b890:	b14b      	cbz	r3, 800b8a6 <__ascii_mbtowc+0x1e>
 800b892:	7813      	ldrb	r3, [r2, #0]
 800b894:	600b      	str	r3, [r1, #0]
 800b896:	7812      	ldrb	r2, [r2, #0]
 800b898:	1e10      	subs	r0, r2, #0
 800b89a:	bf18      	it	ne
 800b89c:	2001      	movne	r0, #1
 800b89e:	b002      	add	sp, #8
 800b8a0:	4770      	bx	lr
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	e7fb      	b.n	800b89e <__ascii_mbtowc+0x16>
 800b8a6:	f06f 0001 	mvn.w	r0, #1
 800b8aa:	e7f8      	b.n	800b89e <__ascii_mbtowc+0x16>

0800b8ac <_realloc_r>:
 800b8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4615      	mov	r5, r2
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	b921      	cbnz	r1, 800b8c2 <_realloc_r+0x16>
 800b8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	4611      	mov	r1, r2
 800b8be:	f7ff b975 	b.w	800abac <_malloc_r>
 800b8c2:	b92a      	cbnz	r2, 800b8d0 <_realloc_r+0x24>
 800b8c4:	f7ff f8fe 	bl	800aac4 <_free_r>
 800b8c8:	2400      	movs	r4, #0
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	f000 f841 	bl	800b956 <_malloc_usable_size_r>
 800b8d4:	4285      	cmp	r5, r0
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	d802      	bhi.n	800b8e0 <_realloc_r+0x34>
 800b8da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8de:	d8f4      	bhi.n	800b8ca <_realloc_r+0x1e>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	f7ff f962 	bl	800abac <_malloc_r>
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d0ec      	beq.n	800b8c8 <_realloc_r+0x1c>
 800b8ee:	42b5      	cmp	r5, r6
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	bf28      	it	cs
 800b8f6:	4632      	movcs	r2, r6
 800b8f8:	f7fe faf7 	bl	8009eea <memcpy>
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4640      	mov	r0, r8
 800b900:	f7ff f8e0 	bl	800aac4 <_free_r>
 800b904:	463c      	mov	r4, r7
 800b906:	e7e0      	b.n	800b8ca <_realloc_r+0x1e>

0800b908 <__ascii_wctomb>:
 800b908:	4603      	mov	r3, r0
 800b90a:	4608      	mov	r0, r1
 800b90c:	b141      	cbz	r1, 800b920 <__ascii_wctomb+0x18>
 800b90e:	2aff      	cmp	r2, #255	@ 0xff
 800b910:	d904      	bls.n	800b91c <__ascii_wctomb+0x14>
 800b912:	228a      	movs	r2, #138	@ 0x8a
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	f04f 30ff 	mov.w	r0, #4294967295
 800b91a:	4770      	bx	lr
 800b91c:	700a      	strb	r2, [r1, #0]
 800b91e:	2001      	movs	r0, #1
 800b920:	4770      	bx	lr
	...

0800b924 <fiprintf>:
 800b924:	b40e      	push	{r1, r2, r3}
 800b926:	b503      	push	{r0, r1, lr}
 800b928:	4601      	mov	r1, r0
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	4805      	ldr	r0, [pc, #20]	@ (800b944 <fiprintf+0x20>)
 800b92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b932:	6800      	ldr	r0, [r0, #0]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	f000 f83f 	bl	800b9b8 <_vfiprintf_r>
 800b93a:	b002      	add	sp, #8
 800b93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b940:	b003      	add	sp, #12
 800b942:	4770      	bx	lr
 800b944:	24000020 	.word	0x24000020

0800b948 <abort>:
 800b948:	b508      	push	{r3, lr}
 800b94a:	2006      	movs	r0, #6
 800b94c:	f000 fa08 	bl	800bd60 <raise>
 800b950:	2001      	movs	r0, #1
 800b952:	f7f5 fac3 	bl	8000edc <_exit>

0800b956 <_malloc_usable_size_r>:
 800b956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b95a:	1f18      	subs	r0, r3, #4
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	bfbc      	itt	lt
 800b960:	580b      	ldrlt	r3, [r1, r0]
 800b962:	18c0      	addlt	r0, r0, r3
 800b964:	4770      	bx	lr

0800b966 <__sfputc_r>:
 800b966:	6893      	ldr	r3, [r2, #8]
 800b968:	3b01      	subs	r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	b410      	push	{r4}
 800b96e:	6093      	str	r3, [r2, #8]
 800b970:	da08      	bge.n	800b984 <__sfputc_r+0x1e>
 800b972:	6994      	ldr	r4, [r2, #24]
 800b974:	42a3      	cmp	r3, r4
 800b976:	db01      	blt.n	800b97c <__sfputc_r+0x16>
 800b978:	290a      	cmp	r1, #10
 800b97a:	d103      	bne.n	800b984 <__sfputc_r+0x1e>
 800b97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b980:	f000 b932 	b.w	800bbe8 <__swbuf_r>
 800b984:	6813      	ldr	r3, [r2, #0]
 800b986:	1c58      	adds	r0, r3, #1
 800b988:	6010      	str	r0, [r2, #0]
 800b98a:	7019      	strb	r1, [r3, #0]
 800b98c:	4608      	mov	r0, r1
 800b98e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <__sfputs_r>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	4614      	mov	r4, r2
 800b99c:	18d5      	adds	r5, r2, r3
 800b99e:	42ac      	cmp	r4, r5
 800b9a0:	d101      	bne.n	800b9a6 <__sfputs_r+0x12>
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e007      	b.n	800b9b6 <__sfputs_r+0x22>
 800b9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9aa:	463a      	mov	r2, r7
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7ff ffda 	bl	800b966 <__sfputc_r>
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	d1f3      	bne.n	800b99e <__sfputs_r+0xa>
 800b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9b8 <_vfiprintf_r>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	460d      	mov	r5, r1
 800b9be:	b09d      	sub	sp, #116	@ 0x74
 800b9c0:	4614      	mov	r4, r2
 800b9c2:	4698      	mov	r8, r3
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	b118      	cbz	r0, 800b9d0 <_vfiprintf_r+0x18>
 800b9c8:	6a03      	ldr	r3, [r0, #32]
 800b9ca:	b90b      	cbnz	r3, 800b9d0 <_vfiprintf_r+0x18>
 800b9cc:	f7fe f974 	bl	8009cb8 <__sinit>
 800b9d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9d2:	07d9      	lsls	r1, r3, #31
 800b9d4:	d405      	bmi.n	800b9e2 <_vfiprintf_r+0x2a>
 800b9d6:	89ab      	ldrh	r3, [r5, #12]
 800b9d8:	059a      	lsls	r2, r3, #22
 800b9da:	d402      	bmi.n	800b9e2 <_vfiprintf_r+0x2a>
 800b9dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9de:	f7fe fa82 	bl	8009ee6 <__retarget_lock_acquire_recursive>
 800b9e2:	89ab      	ldrh	r3, [r5, #12]
 800b9e4:	071b      	lsls	r3, r3, #28
 800b9e6:	d501      	bpl.n	800b9ec <_vfiprintf_r+0x34>
 800b9e8:	692b      	ldr	r3, [r5, #16]
 800b9ea:	b99b      	cbnz	r3, 800ba14 <_vfiprintf_r+0x5c>
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f000 f938 	bl	800bc64 <__swsetup_r>
 800b9f4:	b170      	cbz	r0, 800ba14 <_vfiprintf_r+0x5c>
 800b9f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9f8:	07dc      	lsls	r4, r3, #31
 800b9fa:	d504      	bpl.n	800ba06 <_vfiprintf_r+0x4e>
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	b01d      	add	sp, #116	@ 0x74
 800ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba06:	89ab      	ldrh	r3, [r5, #12]
 800ba08:	0598      	lsls	r0, r3, #22
 800ba0a:	d4f7      	bmi.n	800b9fc <_vfiprintf_r+0x44>
 800ba0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba0e:	f7fe fa6b 	bl	8009ee8 <__retarget_lock_release_recursive>
 800ba12:	e7f3      	b.n	800b9fc <_vfiprintf_r+0x44>
 800ba14:	2300      	movs	r3, #0
 800ba16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba18:	2320      	movs	r3, #32
 800ba1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba22:	2330      	movs	r3, #48	@ 0x30
 800ba24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bbd4 <_vfiprintf_r+0x21c>
 800ba28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba2c:	f04f 0901 	mov.w	r9, #1
 800ba30:	4623      	mov	r3, r4
 800ba32:	469a      	mov	sl, r3
 800ba34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba38:	b10a      	cbz	r2, 800ba3e <_vfiprintf_r+0x86>
 800ba3a:	2a25      	cmp	r2, #37	@ 0x25
 800ba3c:	d1f9      	bne.n	800ba32 <_vfiprintf_r+0x7a>
 800ba3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba42:	d00b      	beq.n	800ba5c <_vfiprintf_r+0xa4>
 800ba44:	465b      	mov	r3, fp
 800ba46:	4622      	mov	r2, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ffa2 	bl	800b994 <__sfputs_r>
 800ba50:	3001      	adds	r0, #1
 800ba52:	f000 80a7 	beq.w	800bba4 <_vfiprintf_r+0x1ec>
 800ba56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba58:	445a      	add	r2, fp
 800ba5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 809f 	beq.w	800bba4 <_vfiprintf_r+0x1ec>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba70:	f10a 0a01 	add.w	sl, sl, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba7e:	4654      	mov	r4, sl
 800ba80:	2205      	movs	r2, #5
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	4853      	ldr	r0, [pc, #332]	@ (800bbd4 <_vfiprintf_r+0x21c>)
 800ba88:	f7f4 fc2a 	bl	80002e0 <memchr>
 800ba8c:	9a04      	ldr	r2, [sp, #16]
 800ba8e:	b9d8      	cbnz	r0, 800bac8 <_vfiprintf_r+0x110>
 800ba90:	06d1      	lsls	r1, r2, #27
 800ba92:	bf44      	itt	mi
 800ba94:	2320      	movmi	r3, #32
 800ba96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba9a:	0713      	lsls	r3, r2, #28
 800ba9c:	bf44      	itt	mi
 800ba9e:	232b      	movmi	r3, #43	@ 0x2b
 800baa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baa4:	f89a 3000 	ldrb.w	r3, [sl]
 800baa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800baaa:	d015      	beq.n	800bad8 <_vfiprintf_r+0x120>
 800baac:	9a07      	ldr	r2, [sp, #28]
 800baae:	4654      	mov	r4, sl
 800bab0:	2000      	movs	r0, #0
 800bab2:	f04f 0c0a 	mov.w	ip, #10
 800bab6:	4621      	mov	r1, r4
 800bab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800babc:	3b30      	subs	r3, #48	@ 0x30
 800babe:	2b09      	cmp	r3, #9
 800bac0:	d94b      	bls.n	800bb5a <_vfiprintf_r+0x1a2>
 800bac2:	b1b0      	cbz	r0, 800baf2 <_vfiprintf_r+0x13a>
 800bac4:	9207      	str	r2, [sp, #28]
 800bac6:	e014      	b.n	800baf2 <_vfiprintf_r+0x13a>
 800bac8:	eba0 0308 	sub.w	r3, r0, r8
 800bacc:	fa09 f303 	lsl.w	r3, r9, r3
 800bad0:	4313      	orrs	r3, r2
 800bad2:	9304      	str	r3, [sp, #16]
 800bad4:	46a2      	mov	sl, r4
 800bad6:	e7d2      	b.n	800ba7e <_vfiprintf_r+0xc6>
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	1d19      	adds	r1, r3, #4
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	9103      	str	r1, [sp, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bfbb      	ittet	lt
 800bae4:	425b      	neglt	r3, r3
 800bae6:	f042 0202 	orrlt.w	r2, r2, #2
 800baea:	9307      	strge	r3, [sp, #28]
 800baec:	9307      	strlt	r3, [sp, #28]
 800baee:	bfb8      	it	lt
 800baf0:	9204      	strlt	r2, [sp, #16]
 800baf2:	7823      	ldrb	r3, [r4, #0]
 800baf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800baf6:	d10a      	bne.n	800bb0e <_vfiprintf_r+0x156>
 800baf8:	7863      	ldrb	r3, [r4, #1]
 800bafa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bafc:	d132      	bne.n	800bb64 <_vfiprintf_r+0x1ac>
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	1d1a      	adds	r2, r3, #4
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	9203      	str	r2, [sp, #12]
 800bb06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb0a:	3402      	adds	r4, #2
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bbe4 <_vfiprintf_r+0x22c>
 800bb12:	7821      	ldrb	r1, [r4, #0]
 800bb14:	2203      	movs	r2, #3
 800bb16:	4650      	mov	r0, sl
 800bb18:	f7f4 fbe2 	bl	80002e0 <memchr>
 800bb1c:	b138      	cbz	r0, 800bb2e <_vfiprintf_r+0x176>
 800bb1e:	9b04      	ldr	r3, [sp, #16]
 800bb20:	eba0 000a 	sub.w	r0, r0, sl
 800bb24:	2240      	movs	r2, #64	@ 0x40
 800bb26:	4082      	lsls	r2, r0
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	3401      	adds	r4, #1
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb32:	4829      	ldr	r0, [pc, #164]	@ (800bbd8 <_vfiprintf_r+0x220>)
 800bb34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb38:	2206      	movs	r2, #6
 800bb3a:	f7f4 fbd1 	bl	80002e0 <memchr>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d03f      	beq.n	800bbc2 <_vfiprintf_r+0x20a>
 800bb42:	4b26      	ldr	r3, [pc, #152]	@ (800bbdc <_vfiprintf_r+0x224>)
 800bb44:	bb1b      	cbnz	r3, 800bb8e <_vfiprintf_r+0x1d6>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	3307      	adds	r3, #7
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	3308      	adds	r3, #8
 800bb50:	9303      	str	r3, [sp, #12]
 800bb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb54:	443b      	add	r3, r7
 800bb56:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb58:	e76a      	b.n	800ba30 <_vfiprintf_r+0x78>
 800bb5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb5e:	460c      	mov	r4, r1
 800bb60:	2001      	movs	r0, #1
 800bb62:	e7a8      	b.n	800bab6 <_vfiprintf_r+0xfe>
 800bb64:	2300      	movs	r3, #0
 800bb66:	3401      	adds	r4, #1
 800bb68:	9305      	str	r3, [sp, #20]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	f04f 0c0a 	mov.w	ip, #10
 800bb70:	4620      	mov	r0, r4
 800bb72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb76:	3a30      	subs	r2, #48	@ 0x30
 800bb78:	2a09      	cmp	r2, #9
 800bb7a:	d903      	bls.n	800bb84 <_vfiprintf_r+0x1cc>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0c6      	beq.n	800bb0e <_vfiprintf_r+0x156>
 800bb80:	9105      	str	r1, [sp, #20]
 800bb82:	e7c4      	b.n	800bb0e <_vfiprintf_r+0x156>
 800bb84:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb88:	4604      	mov	r4, r0
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e7f0      	b.n	800bb70 <_vfiprintf_r+0x1b8>
 800bb8e:	ab03      	add	r3, sp, #12
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	462a      	mov	r2, r5
 800bb94:	4b12      	ldr	r3, [pc, #72]	@ (800bbe0 <_vfiprintf_r+0x228>)
 800bb96:	a904      	add	r1, sp, #16
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7fd fc59 	bl	8009450 <_printf_float>
 800bb9e:	4607      	mov	r7, r0
 800bba0:	1c78      	adds	r0, r7, #1
 800bba2:	d1d6      	bne.n	800bb52 <_vfiprintf_r+0x19a>
 800bba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	d405      	bmi.n	800bbb6 <_vfiprintf_r+0x1fe>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	059a      	lsls	r2, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_vfiprintf_r+0x1fe>
 800bbb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbb2:	f7fe f999 	bl	8009ee8 <__retarget_lock_release_recursive>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	065b      	lsls	r3, r3, #25
 800bbba:	f53f af1f 	bmi.w	800b9fc <_vfiprintf_r+0x44>
 800bbbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbc0:	e71e      	b.n	800ba00 <_vfiprintf_r+0x48>
 800bbc2:	ab03      	add	r3, sp, #12
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	462a      	mov	r2, r5
 800bbc8:	4b05      	ldr	r3, [pc, #20]	@ (800bbe0 <_vfiprintf_r+0x228>)
 800bbca:	a904      	add	r1, sp, #16
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7fd fec7 	bl	8009960 <_printf_i>
 800bbd2:	e7e4      	b.n	800bb9e <_vfiprintf_r+0x1e6>
 800bbd4:	0800d968 	.word	0x0800d968
 800bbd8:	0800d972 	.word	0x0800d972
 800bbdc:	08009451 	.word	0x08009451
 800bbe0:	0800b995 	.word	0x0800b995
 800bbe4:	0800d96e 	.word	0x0800d96e

0800bbe8 <__swbuf_r>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	460e      	mov	r6, r1
 800bbec:	4614      	mov	r4, r2
 800bbee:	4605      	mov	r5, r0
 800bbf0:	b118      	cbz	r0, 800bbfa <__swbuf_r+0x12>
 800bbf2:	6a03      	ldr	r3, [r0, #32]
 800bbf4:	b90b      	cbnz	r3, 800bbfa <__swbuf_r+0x12>
 800bbf6:	f7fe f85f 	bl	8009cb8 <__sinit>
 800bbfa:	69a3      	ldr	r3, [r4, #24]
 800bbfc:	60a3      	str	r3, [r4, #8]
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	071a      	lsls	r2, r3, #28
 800bc02:	d501      	bpl.n	800bc08 <__swbuf_r+0x20>
 800bc04:	6923      	ldr	r3, [r4, #16]
 800bc06:	b943      	cbnz	r3, 800bc1a <__swbuf_r+0x32>
 800bc08:	4621      	mov	r1, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f000 f82a 	bl	800bc64 <__swsetup_r>
 800bc10:	b118      	cbz	r0, 800bc1a <__swbuf_r+0x32>
 800bc12:	f04f 37ff 	mov.w	r7, #4294967295
 800bc16:	4638      	mov	r0, r7
 800bc18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	6922      	ldr	r2, [r4, #16]
 800bc1e:	1a98      	subs	r0, r3, r2
 800bc20:	6963      	ldr	r3, [r4, #20]
 800bc22:	b2f6      	uxtb	r6, r6
 800bc24:	4283      	cmp	r3, r0
 800bc26:	4637      	mov	r7, r6
 800bc28:	dc05      	bgt.n	800bc36 <__swbuf_r+0x4e>
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f7ff fda7 	bl	800b780 <_fflush_r>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d1ed      	bne.n	800bc12 <__swbuf_r+0x2a>
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	60a3      	str	r3, [r4, #8]
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	6022      	str	r2, [r4, #0]
 800bc42:	701e      	strb	r6, [r3, #0]
 800bc44:	6962      	ldr	r2, [r4, #20]
 800bc46:	1c43      	adds	r3, r0, #1
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d004      	beq.n	800bc56 <__swbuf_r+0x6e>
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	07db      	lsls	r3, r3, #31
 800bc50:	d5e1      	bpl.n	800bc16 <__swbuf_r+0x2e>
 800bc52:	2e0a      	cmp	r6, #10
 800bc54:	d1df      	bne.n	800bc16 <__swbuf_r+0x2e>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f7ff fd91 	bl	800b780 <_fflush_r>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d0d9      	beq.n	800bc16 <__swbuf_r+0x2e>
 800bc62:	e7d6      	b.n	800bc12 <__swbuf_r+0x2a>

0800bc64 <__swsetup_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4b29      	ldr	r3, [pc, #164]	@ (800bd0c <__swsetup_r+0xa8>)
 800bc68:	4605      	mov	r5, r0
 800bc6a:	6818      	ldr	r0, [r3, #0]
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	b118      	cbz	r0, 800bc78 <__swsetup_r+0x14>
 800bc70:	6a03      	ldr	r3, [r0, #32]
 800bc72:	b90b      	cbnz	r3, 800bc78 <__swsetup_r+0x14>
 800bc74:	f7fe f820 	bl	8009cb8 <__sinit>
 800bc78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7c:	0719      	lsls	r1, r3, #28
 800bc7e:	d422      	bmi.n	800bcc6 <__swsetup_r+0x62>
 800bc80:	06da      	lsls	r2, r3, #27
 800bc82:	d407      	bmi.n	800bc94 <__swsetup_r+0x30>
 800bc84:	2209      	movs	r2, #9
 800bc86:	602a      	str	r2, [r5, #0]
 800bc88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc8c:	81a3      	strh	r3, [r4, #12]
 800bc8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc92:	e033      	b.n	800bcfc <__swsetup_r+0x98>
 800bc94:	0758      	lsls	r0, r3, #29
 800bc96:	d512      	bpl.n	800bcbe <__swsetup_r+0x5a>
 800bc98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc9a:	b141      	cbz	r1, 800bcae <__swsetup_r+0x4a>
 800bc9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bca0:	4299      	cmp	r1, r3
 800bca2:	d002      	beq.n	800bcaa <__swsetup_r+0x46>
 800bca4:	4628      	mov	r0, r5
 800bca6:	f7fe ff0d 	bl	800aac4 <_free_r>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f043 0308 	orr.w	r3, r3, #8
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	b94b      	cbnz	r3, 800bcde <__swsetup_r+0x7a>
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bcd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcd4:	d003      	beq.n	800bcde <__swsetup_r+0x7a>
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	4628      	mov	r0, r5
 800bcda:	f000 f883 	bl	800bde4 <__smakebuf_r>
 800bcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce2:	f013 0201 	ands.w	r2, r3, #1
 800bce6:	d00a      	beq.n	800bcfe <__swsetup_r+0x9a>
 800bce8:	2200      	movs	r2, #0
 800bcea:	60a2      	str	r2, [r4, #8]
 800bcec:	6962      	ldr	r2, [r4, #20]
 800bcee:	4252      	negs	r2, r2
 800bcf0:	61a2      	str	r2, [r4, #24]
 800bcf2:	6922      	ldr	r2, [r4, #16]
 800bcf4:	b942      	cbnz	r2, 800bd08 <__swsetup_r+0xa4>
 800bcf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bcfa:	d1c5      	bne.n	800bc88 <__swsetup_r+0x24>
 800bcfc:	bd38      	pop	{r3, r4, r5, pc}
 800bcfe:	0799      	lsls	r1, r3, #30
 800bd00:	bf58      	it	pl
 800bd02:	6962      	ldrpl	r2, [r4, #20]
 800bd04:	60a2      	str	r2, [r4, #8]
 800bd06:	e7f4      	b.n	800bcf2 <__swsetup_r+0x8e>
 800bd08:	2000      	movs	r0, #0
 800bd0a:	e7f7      	b.n	800bcfc <__swsetup_r+0x98>
 800bd0c:	24000020 	.word	0x24000020

0800bd10 <_raise_r>:
 800bd10:	291f      	cmp	r1, #31
 800bd12:	b538      	push	{r3, r4, r5, lr}
 800bd14:	4605      	mov	r5, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	d904      	bls.n	800bd24 <_raise_r+0x14>
 800bd1a:	2316      	movs	r3, #22
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd26:	b112      	cbz	r2, 800bd2e <_raise_r+0x1e>
 800bd28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd2c:	b94b      	cbnz	r3, 800bd42 <_raise_r+0x32>
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f000 f830 	bl	800bd94 <_getpid_r>
 800bd34:	4622      	mov	r2, r4
 800bd36:	4601      	mov	r1, r0
 800bd38:	4628      	mov	r0, r5
 800bd3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd3e:	f000 b817 	b.w	800bd70 <_kill_r>
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d00a      	beq.n	800bd5c <_raise_r+0x4c>
 800bd46:	1c59      	adds	r1, r3, #1
 800bd48:	d103      	bne.n	800bd52 <_raise_r+0x42>
 800bd4a:	2316      	movs	r3, #22
 800bd4c:	6003      	str	r3, [r0, #0]
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7e7      	b.n	800bd22 <_raise_r+0x12>
 800bd52:	2100      	movs	r1, #0
 800bd54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd58:	4620      	mov	r0, r4
 800bd5a:	4798      	blx	r3
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7e0      	b.n	800bd22 <_raise_r+0x12>

0800bd60 <raise>:
 800bd60:	4b02      	ldr	r3, [pc, #8]	@ (800bd6c <raise+0xc>)
 800bd62:	4601      	mov	r1, r0
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	f7ff bfd3 	b.w	800bd10 <_raise_r>
 800bd6a:	bf00      	nop
 800bd6c:	24000020 	.word	0x24000020

0800bd70 <_kill_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d07      	ldr	r5, [pc, #28]	@ (800bd90 <_kill_r+0x20>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f7f5 f89d 	bl	8000ebc <_kill>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	d102      	bne.n	800bd8c <_kill_r+0x1c>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	b103      	cbz	r3, 800bd8c <_kill_r+0x1c>
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	bf00      	nop
 800bd90:	240052fc 	.word	0x240052fc

0800bd94 <_getpid_r>:
 800bd94:	f7f5 b88a 	b.w	8000eac <_getpid>

0800bd98 <__swhatbuf_r>:
 800bd98:	b570      	push	{r4, r5, r6, lr}
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda0:	2900      	cmp	r1, #0
 800bda2:	b096      	sub	sp, #88	@ 0x58
 800bda4:	4615      	mov	r5, r2
 800bda6:	461e      	mov	r6, r3
 800bda8:	da0d      	bge.n	800bdc6 <__swhatbuf_r+0x2e>
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdb0:	f04f 0100 	mov.w	r1, #0
 800bdb4:	bf14      	ite	ne
 800bdb6:	2340      	movne	r3, #64	@ 0x40
 800bdb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	6031      	str	r1, [r6, #0]
 800bdc0:	602b      	str	r3, [r5, #0]
 800bdc2:	b016      	add	sp, #88	@ 0x58
 800bdc4:	bd70      	pop	{r4, r5, r6, pc}
 800bdc6:	466a      	mov	r2, sp
 800bdc8:	f000 f848 	bl	800be5c <_fstat_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	dbec      	blt.n	800bdaa <__swhatbuf_r+0x12>
 800bdd0:	9901      	ldr	r1, [sp, #4]
 800bdd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdda:	4259      	negs	r1, r3
 800bddc:	4159      	adcs	r1, r3
 800bdde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bde2:	e7eb      	b.n	800bdbc <__swhatbuf_r+0x24>

0800bde4 <__smakebuf_r>:
 800bde4:	898b      	ldrh	r3, [r1, #12]
 800bde6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bde8:	079d      	lsls	r5, r3, #30
 800bdea:	4606      	mov	r6, r0
 800bdec:	460c      	mov	r4, r1
 800bdee:	d507      	bpl.n	800be00 <__smakebuf_r+0x1c>
 800bdf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	6123      	str	r3, [r4, #16]
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	6163      	str	r3, [r4, #20]
 800bdfc:	b003      	add	sp, #12
 800bdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be00:	ab01      	add	r3, sp, #4
 800be02:	466a      	mov	r2, sp
 800be04:	f7ff ffc8 	bl	800bd98 <__swhatbuf_r>
 800be08:	9f00      	ldr	r7, [sp, #0]
 800be0a:	4605      	mov	r5, r0
 800be0c:	4639      	mov	r1, r7
 800be0e:	4630      	mov	r0, r6
 800be10:	f7fe fecc 	bl	800abac <_malloc_r>
 800be14:	b948      	cbnz	r0, 800be2a <__smakebuf_r+0x46>
 800be16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1a:	059a      	lsls	r2, r3, #22
 800be1c:	d4ee      	bmi.n	800bdfc <__smakebuf_r+0x18>
 800be1e:	f023 0303 	bic.w	r3, r3, #3
 800be22:	f043 0302 	orr.w	r3, r3, #2
 800be26:	81a3      	strh	r3, [r4, #12]
 800be28:	e7e2      	b.n	800bdf0 <__smakebuf_r+0xc>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	6020      	str	r0, [r4, #0]
 800be2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	9b01      	ldr	r3, [sp, #4]
 800be36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be3a:	b15b      	cbz	r3, 800be54 <__smakebuf_r+0x70>
 800be3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be40:	4630      	mov	r0, r6
 800be42:	f000 f81d 	bl	800be80 <_isatty_r>
 800be46:	b128      	cbz	r0, 800be54 <__smakebuf_r+0x70>
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	f043 0301 	orr.w	r3, r3, #1
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	431d      	orrs	r5, r3
 800be58:	81a5      	strh	r5, [r4, #12]
 800be5a:	e7cf      	b.n	800bdfc <__smakebuf_r+0x18>

0800be5c <_fstat_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4d07      	ldr	r5, [pc, #28]	@ (800be7c <_fstat_r+0x20>)
 800be60:	2300      	movs	r3, #0
 800be62:	4604      	mov	r4, r0
 800be64:	4608      	mov	r0, r1
 800be66:	4611      	mov	r1, r2
 800be68:	602b      	str	r3, [r5, #0]
 800be6a:	f7f5 f887 	bl	8000f7c <_fstat>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	d102      	bne.n	800be78 <_fstat_r+0x1c>
 800be72:	682b      	ldr	r3, [r5, #0]
 800be74:	b103      	cbz	r3, 800be78 <_fstat_r+0x1c>
 800be76:	6023      	str	r3, [r4, #0]
 800be78:	bd38      	pop	{r3, r4, r5, pc}
 800be7a:	bf00      	nop
 800be7c:	240052fc 	.word	0x240052fc

0800be80 <_isatty_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4d06      	ldr	r5, [pc, #24]	@ (800be9c <_isatty_r+0x1c>)
 800be84:	2300      	movs	r3, #0
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	602b      	str	r3, [r5, #0]
 800be8c:	f7f5 f886 	bl	8000f9c <_isatty>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d102      	bne.n	800be9a <_isatty_r+0x1a>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	b103      	cbz	r3, 800be9a <_isatty_r+0x1a>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd38      	pop	{r3, r4, r5, pc}
 800be9c:	240052fc 	.word	0x240052fc

0800bea0 <_init>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	bf00      	nop
 800bea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea6:	bc08      	pop	{r3}
 800bea8:	469e      	mov	lr, r3
 800beaa:	4770      	bx	lr

0800beac <_fini>:
 800beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beae:	bf00      	nop
 800beb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb2:	bc08      	pop	{r3}
 800beb4:	469e      	mov	lr, r3
 800beb6:	4770      	bx	lr
