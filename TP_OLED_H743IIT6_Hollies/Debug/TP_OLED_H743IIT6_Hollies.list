
TP_OLED_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  08009c70  08009c70  00019c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  24000000  0800a5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000025c  240001d8  0800a7cc  000201d8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000434  0800a7cc  00020434  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001239f  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029df  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e70  00000000  00000000  00034fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ac9  00000000  00000000  00035e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000393bd  00000000  00000000  00036901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014cc8  00000000  00000000  0006fcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169b15  00000000  00000000  00084986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004a38  00000000  00000000  001ee49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001f2ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009c54 	.word	0x08009c54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08009c54 	.word	0x08009c54

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
 80003a4:	615a      	str	r2, [r3, #20]
 80003a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003aa:	4a28      	ldr	r2, [pc, #160]	; (800044c <MX_ADC3_Init+0xbc>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003bc:	2204      	movs	r2, #4
 80003be:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80003c0:	4b21      	ldr	r3, [pc, #132]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003c6:	4b20      	ldr	r3, [pc, #128]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80003cc:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003d2:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ea:	4b17      	ldr	r3, [pc, #92]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_ADC3_Init+0xb8>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80003fe:	4812      	ldr	r0, [pc, #72]	; (8000448 <MX_ADC3_Init+0xb8>)
 8000400:	f000 ff6e 	bl	80012e0 <HAL_ADC_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800040a:	f000 fa0b 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_ADC3_Init+0xc0>)
 8000410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000412:	2306      	movs	r3, #6
 8000414:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000416:	2307      	movs	r3, #7
 8000418:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800041a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800041e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000420:	2304      	movs	r3, #4
 8000422:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_ADC3_Init+0xb8>)
 8000432:	f001 fac3 	bl	80019bc <HAL_ADC_ConfigChannel>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800043c:	f000 f9f2 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	240001f4 	.word	0x240001f4
 800044c:	58026000 	.word	0x58026000
 8000450:	cb840000 	.word	0xcb840000

08000454 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b0b4      	sub	sp, #208	; 0xd0
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	22c0      	movs	r2, #192	; 0xc0
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f007 fb82 	bl	8007b6e <memset>
  if(adcHandle->Instance==ADC3)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <HAL_ADC_MspInit+0x8c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d131      	bne.n	80004d8 <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000474:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000480:	2302      	movs	r3, #2
 8000482:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000484:	230c      	movs	r3, #12
 8000486:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000488:	2302      	movs	r3, #2
 800048a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800048c:	2302      	movs	r3, #2
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000490:	2302      	movs	r3, #2
 8000492:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000494:	23c0      	movs	r3, #192	; 0xc0
 8000496:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000498:	2320      	movs	r3, #32
 800049a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800049c:	2300      	movs	r3, #0
 800049e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 fb1a 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80004b6:	f000 f9b5 	bl	8000824 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_ADC_MspInit+0x90>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <HAL_ADC_MspInit+0x90>)
 80004c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_ADC_MspInit+0x90>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80004d8:	bf00      	nop
 80004da:	37d0      	adds	r7, #208	; 0xd0
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	58026000 	.word	0x58026000
 80004e4:	58024400 	.word	0x58024400

080004e8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000504:	4a20      	ldr	r2, [pc, #128]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_GPIO_Init+0xa0>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000522:	4a19      	ldr	r2, [pc, #100]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_GPIO_Init+0xa0>)
 800052e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_GPIO_Init+0xa0>)
 800053c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_GPIO_Init+0xa0>)
 800054c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2119      	movs	r1, #25
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <MX_GPIO_Init+0xa4>)
 800055e:	f002 fa9d 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|OLED_RST_Pin;
 8000562:	2319      	movs	r3, #25
 8000564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056e:	2303      	movs	r3, #3
 8000570:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4619      	mov	r1, r3
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_GPIO_Init+0xa4>)
 800057a:	f002 f8df 	bl	800273c <HAL_GPIO_Init>

}
 800057e:	bf00      	nop
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	58024400 	.word	0x58024400
 800058c:	58020000 	.word	0x58020000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char temp[6] = "";
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	2300      	movs	r3, #0
 800059c:	813b      	strh	r3, [r7, #8]
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800059e:	4b47      	ldr	r3, [pc, #284]	; (80006bc <main+0x12c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d11b      	bne.n	80005e2 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005aa:	f3bf 8f4f 	dsb	sy
}
 80005ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b0:	f3bf 8f6f 	isb	sy
}
 80005b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b6:	4b41      	ldr	r3, [pc, #260]	; (80006bc <main+0x12c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005be:	f3bf 8f4f 	dsb	sy
}
 80005c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c4:	f3bf 8f6f 	isb	sy
}
 80005c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005ca:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <main+0x12c>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a3b      	ldr	r2, [pc, #236]	; (80006bc <main+0x12c>)
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d6:	f3bf 8f4f 	dsb	sy
}
 80005da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005dc:	f3bf 8f6f 	isb	sy
}
 80005e0:	e000      	b.n	80005e4 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005e4:	4b35      	ldr	r3, [pc, #212]	; (80006bc <main+0x12c>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d138      	bne.n	8000662 <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <main+0x12c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <main+0x12c>)
 8000600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000604:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	0b5b      	lsrs	r3, r3, #13
 800060a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800060e:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	08db      	lsrs	r3, r3, #3
 8000614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000618:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	015a      	lsls	r2, r3, #5
 800061e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000622:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000628:	4924      	ldr	r1, [pc, #144]	; (80006bc <main+0x12c>)
 800062a:	4313      	orrs	r3, r2
 800062c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	60fa      	str	r2, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1ef      	bne.n	800061a <main+0x8a>
    } while(sets-- != 0U);
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	613a      	str	r2, [r7, #16]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1e5      	bne.n	8000610 <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 8000644:	f3bf 8f4f 	dsb	sy
}
 8000648:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <main+0x12c>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <main+0x12c>)
 8000650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000654:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000656:	f3bf 8f4f 	dsb	sy
}
 800065a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065c:	f3bf 8f6f 	isb	sy
}
 8000660:	e000      	b.n	8000664 <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000662:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fb72 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f82e 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f7ff ff3c 	bl	80004e8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000670:	f7ff fe8e 	bl	8000390 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000674:	f000 f8dc 	bl	8000830 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000678:	f006 fc90 	bl	8006f9c <OLED_Init>
  //ADC校准
  HAL_ADCEx_Calibration_Start(&hadc3,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 800067c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000680:	2100      	movs	r1, #0
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <main+0x130>)
 8000684:	f001 ff12 	bl	80024ac <HAL_ADCEx_Calibration_Start>
  HAL_Delay(120);
 8000688:	2078      	movs	r0, #120	; 0x78
 800068a:	f000 fbf1 	bl	8000e70 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(temp, "%.3f", getInterTemprature());
 800068e:	f006 fb31 	bl	8006cf4 <getInterTemprature>
 8000692:	eef0 7a40 	vmov.f32	s15, s0
 8000696:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800069a:	1d38      	adds	r0, r7, #4
 800069c:	ec53 2b17 	vmov	r2, r3, d7
 80006a0:	4908      	ldr	r1, [pc, #32]	; (80006c4 <main+0x134>)
 80006a2:	f007 fa01 	bl	8007aa8 <siprintf>
	  OLED_ShowString(0, 0, (uint8_t*)temp);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	461a      	mov	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	f006 fc47 	bl	8006f40 <OLED_ShowString>
	  HAL_Delay(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b6:	f000 fbdb 	bl	8000e70 <HAL_Delay>
	  sprintf(temp, "%.3f", getInterTemprature());
 80006ba:	e7e8      	b.n	800068e <main+0xfe>
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	240001f4 	.word	0x240001f4
 80006c4:	08009c70 	.word	0x08009c70

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09e      	sub	sp, #120	; 0x78
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006d2:	224c      	movs	r2, #76	; 0x4c
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 fa49 	bl	8007b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2220      	movs	r2, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f007 fa42 	bl	8007b6e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ea:	2002      	movs	r0, #2
 80006ec:	f002 f9f0 	bl	8002ad0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b48      	ldr	r3, [pc, #288]	; (8000818 <SystemClock_Config+0x150>)
 80006f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f8:	4a47      	ldr	r2, [pc, #284]	; (8000818 <SystemClock_Config+0x150>)
 80006fa:	f023 0301 	bic.w	r3, r3, #1
 80006fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000700:	4b45      	ldr	r3, [pc, #276]	; (8000818 <SystemClock_Config+0x150>)
 8000702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b44      	ldr	r3, [pc, #272]	; (800081c <SystemClock_Config+0x154>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a43      	ldr	r2, [pc, #268]	; (800081c <SystemClock_Config+0x154>)
 8000710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b41      	ldr	r3, [pc, #260]	; (800081c <SystemClock_Config+0x154>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000722:	bf00      	nop
 8000724:	4b3d      	ldr	r3, [pc, #244]	; (800081c <SystemClock_Config+0x154>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800072c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000730:	d1f8      	bne.n	8000724 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <SystemClock_Config+0x158>)
 8000734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000738:	4a39      	ldr	r2, [pc, #228]	; (8000820 <SystemClock_Config+0x158>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <SystemClock_Config+0x158>)
 8000744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	4b31      	ldr	r3, [pc, #196]	; (800081c <SystemClock_Config+0x154>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a30      	ldr	r2, [pc, #192]	; (800081c <SystemClock_Config+0x154>)
 800075a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <SystemClock_Config+0x154>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <SystemClock_Config+0x150>)
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <SystemClock_Config+0x150>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <SystemClock_Config+0x150>)
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000782:	bf00      	nop
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <SystemClock_Config+0x154>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000790:	d1f8      	bne.n	8000784 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000792:	2301      	movs	r3, #1
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a0:	2302      	movs	r3, #2
 80007a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007a4:	2305      	movs	r3, #5
 80007a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007a8:	23c0      	movs	r3, #192	; 0xc0
 80007aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007b0:	2305      	movs	r3, #5
 80007b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007b8:	2308      	movs	r3, #8
 80007ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007bc:	2300      	movs	r3, #0
 80007be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 f9bb 	bl	8002b44 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007d4:	f000 f826 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	233f      	movs	r3, #63	; 0x3f
 80007da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2303      	movs	r3, #3
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007e4:	2308      	movs	r3, #8
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2104      	movs	r1, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fdf9 	bl	80033f8 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800080c:	f000 f80a 	bl	8000824 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3778      	adds	r7, #120	; 0x78
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58000400 	.word	0x58000400
 800081c:	58024800 	.word	0x58024800
 8000820:	58024400 	.word	0x58024400

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000834:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <MX_SPI1_Init+0xa8>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_SPI1_Init+0xa4>)
 800083c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_SPI1_Init+0xa4>)
 800084a:	2207      	movs	r2, #7
 800084c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000854:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000858:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800085c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000860:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_SPI1_Init+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI1_Init+0xa4>)
 800088c:	2200      	movs	r2, #0
 800088e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_SPI1_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI1_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI1_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI1_Init+0xa4>)
 80008c2:	f005 fe0d 	bl	80064e0 <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80008cc:	f7ff ffaa 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	24000258 	.word	0x24000258
 80008d8:	40013000 	.word	0x40013000

080008dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0ba      	sub	sp, #232	; 0xe8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	22c0      	movs	r2, #192	; 0xc0
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f007 f936 	bl	8007b6e <memset>
  if(spiHandle->Instance==SPI1)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <HAL_SPI_MspInit+0xec>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d159      	bne.n	80009c0 <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800090c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000918:	2300      	movs	r3, #0
 800091a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f8df 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800092c:	f7ff ff7a 	bl	8000824 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <HAL_SPI_MspInit+0xf0>)
 8000932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <HAL_SPI_MspInit+0xf0>)
 8000938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <HAL_SPI_MspInit+0xf0>)
 8000942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_SPI_MspInit+0xf0>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <HAL_SPI_MspInit+0xf0>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_SPI_MspInit+0xf0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000984:	2305      	movs	r3, #5
 8000986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800098e:	4619      	mov	r1, r3
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <HAL_SPI_MspInit+0xf4>)
 8000992:	f001 fed3 	bl	800273c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000996:	2340      	movs	r3, #64	; 0x40
 8000998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ae:	2305      	movs	r3, #5
 80009b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <HAL_SPI_MspInit+0xf4>)
 80009bc:	f001 febe 	bl	800273c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009c0:	bf00      	nop
 80009c2:	37e8      	adds	r7, #232	; 0xe8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40013000 	.word	0x40013000
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58020000 	.word	0x58020000

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_MspInit+0x30>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e0:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x30>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x30>)
 80009ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58024400 	.word	0x58024400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f9ec 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_kill>:

int _kill(int pid, int sig)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a76:	f007 f8cd 	bl	8007c14 <__errno>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_exit>:

void _exit (int status)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe7 	bl	8000a6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a9e:	e7fe      	b.n	8000a9e <_exit+0x12>

08000aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e00a      	b.n	8000ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab2:	f3af 8000 	nop.w
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	60ba      	str	r2, [r7, #8]
 8000abe:	b2ca      	uxtb	r2, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf0      	blt.n	8000ab2 <_read+0x12>
  }

  return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e009      	b.n	8000b00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf1      	blt.n	8000aec <_write+0x12>
  }
  return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_close>:

int _close(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_isatty>:

int _isatty(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f007 f832 	bl	8007c14 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24080000 	.word	0x24080000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	240002e0 	.word	0x240002e0
 8000be4:	24000438 	.word	0x24000438

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bec:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <SystemInit+0xe4>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <SystemInit+0xe4>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <SystemInit+0xe8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	2b06      	cmp	r3, #6
 8000c06:	d807      	bhi.n	8000c18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <SystemInit+0xe8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f023 030f 	bic.w	r3, r3, #15
 8000c10:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <SystemInit+0xe8>)
 8000c12:	f043 0307 	orr.w	r3, r3, #7
 8000c16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <SystemInit+0xec>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <SystemInit+0xec>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <SystemInit+0xec>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <SystemInit+0xec>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4929      	ldr	r1, [pc, #164]	; (8000cd4 <SystemInit+0xec>)
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <SystemInit+0xf0>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <SystemInit+0xe8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <SystemInit+0xe8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f023 030f 	bic.w	r3, r3, #15
 8000c4a:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <SystemInit+0xe8>)
 8000c4c:	f043 0307 	orr.w	r3, r3, #7
 8000c50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <SystemInit+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <SystemInit+0xec>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <SystemInit+0xec>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <SystemInit+0xec>)
 8000c66:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <SystemInit+0xf4>)
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <SystemInit+0xec>)
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <SystemInit+0xf8>)
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <SystemInit+0xec>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <SystemInit+0xfc>)
 8000c74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <SystemInit+0xec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <SystemInit+0xec>)
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <SystemInit+0xfc>)
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <SystemInit+0xec>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <SystemInit+0xec>)
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <SystemInit+0xfc>)
 8000c8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <SystemInit+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <SystemInit+0xec>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <SystemInit+0xec>)
 8000c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <SystemInit+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <SystemInit+0x100>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <SystemInit+0x104>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cb2:	d202      	bcs.n	8000cba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <SystemInit+0x108>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <SystemInit+0x10c>)
 8000cbc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	52002000 	.word	0x52002000
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cdc:	02020200 	.word	0x02020200
 8000ce0:	01ff0000 	.word	0x01ff0000
 8000ce4:	01010280 	.word	0x01010280
 8000ce8:	5c001000 	.word	0x5c001000
 8000cec:	ffff0000 	.word	0xffff0000
 8000cf0:	51008108 	.word	0x51008108
 8000cf4:	52004000 	.word	0x52004000

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cfc:	f7ff ff74 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f006 ff7b 	bl	8007c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2a:	f7ff fc31 	bl	8000590 <main>
  bx  lr
 8000d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d38:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000d3c:	0800a5f4 	.word	0x0800a5f4
  ldr r2, =_sbss
 8000d40:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000d44:	24000434 	.word	0x24000434

08000d48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC3_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d52:	2003      	movs	r0, #3
 8000d54:	f001 fcc0 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d58:	f002 fd04 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_Init+0x68>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	4913      	ldr	r1, [pc, #76]	; (8000db8 <HAL_Init+0x6c>)
 8000d6a:	5ccb      	ldrb	r3, [r1, r3]
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_Init+0x68>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_Init+0x6c>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <HAL_Init+0x70>)
 8000d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_Init+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	200f      	movs	r0, #15
 8000d98:	f000 f814 	bl	8000dc4 <HAL_InitTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e002      	b.n	8000dac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000da6:	f7ff fe15 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	58024400 	.word	0x58024400
 8000db8:	08009c78 	.word	0x08009c78
 8000dbc:	24000004 	.word	0x24000004
 8000dc0:	24000000 	.word	0x24000000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_InitTick+0x60>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e021      	b.n	8000e1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_InitTick+0x64>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_InitTick+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fc97 	bl	8002722 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f001 fc6f 	bl	80026ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x68>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2400000c 	.word	0x2400000c
 8000e28:	24000000 	.word	0x24000000
 8000e2c:	24000008 	.word	0x24000008

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2400000c 	.word	0x2400000c
 8000e54:	240002e4 	.word	0x240002e4

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	240002e4 	.word	0x240002e4

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2400000c 	.word	0x2400000c

08000eb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetREVID+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0c1b      	lsrs	r3, r3, #16
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	5c001000 	.word	0x5c001000

08000ed0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3360      	adds	r3, #96	; 0x60
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	430b      	orrs	r3, r1
 8000f66:	431a      	orrs	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b087      	sub	sp, #28
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3360      	adds	r3, #96	; 0x60
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	601a      	str	r2, [r3, #0]
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001006:	b480      	push	{r7}
 8001008:	b087      	sub	sp, #28
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3330      	adds	r3, #48	; 0x30
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	4413      	add	r3, r2
 8001024:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f003 031f 	and.w	r3, r3, #31
 8001030:	211f      	movs	r1, #31
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	401a      	ands	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0e9b      	lsrs	r3, r3, #26
 800103e:	f003 011f 	and.w	r1, r3, #31
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800105e:	b480      	push	{r7}
 8001060:	b087      	sub	sp, #28
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3314      	adds	r3, #20
 800106e:	461a      	mov	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	0e5b      	lsrs	r3, r3, #25
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	4413      	add	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	0d1b      	lsrs	r3, r3, #20
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	2107      	movs	r1, #7
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	0d1b      	lsrs	r3, r3, #20
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	431a      	orrs	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010a8:	bf00      	nop
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010cc:	43db      	mvns	r3, r3
 80010ce:	401a      	ands	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0318 	and.w	r3, r3, #24
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010d8:	40d9      	lsrs	r1, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	400b      	ands	r3, r1
 80010de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010e2:	431a      	orrs	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	000fffff 	.word	0x000fffff

080010fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 031f 	and.w	r3, r3, #31
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001142:	4013      	ands	r3, r2
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6093      	str	r3, [r2, #8]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	5fffffc0 	.word	0x5fffffc0

08001158 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800116c:	d101      	bne.n	8001172 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800118e:	4013      	ands	r3, r2
 8001190:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	6fffffc0 	.word	0x6fffffc0

080011a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011bc:	d101      	bne.n	80011c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <LL_ADC_Enable+0x24>)
 80011de:	4013      	ands	r3, r2
 80011e0:	f043 0201 	orr.w	r2, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	7fffffc0 	.word	0x7fffffc0

080011f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <LL_ADC_Disable+0x24>)
 8001206:	4013      	ands	r3, r2
 8001208:	f043 0202 	orr.w	r2, r3, #2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	7fffffc0 	.word	0x7fffffc0

08001220 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <LL_ADC_IsEnabled+0x18>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <LL_ADC_IsEnabled+0x1a>
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b02      	cmp	r3, #2
 8001258:	d101      	bne.n	800125e <LL_ADC_IsDisableOngoing+0x18>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <LL_ADC_IsDisableOngoing+0x1a>
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <LL_ADC_REG_StartConversion+0x24>)
 800127a:	4013      	ands	r3, r2
 800127c:	f043 0204 	orr.w	r2, r3, #4
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	7fffffc0 	.word	0x7fffffc0

08001294 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d101      	bne.n	80012ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e18f      	b.n	800161a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff f8a3 	bl	8000454 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff19 	bl	8001158 <LL_ADC_IsDeepPowerDownEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff feff 	bl	8001134 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff34 	bl	80011a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d114      	bne.n	8001370 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff18 	bl	8001180 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001350:	4b87      	ldr	r3, [pc, #540]	; (8001570 <HAL_ADC_Init+0x290>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	4a87      	ldr	r2, [pc, #540]	; (8001574 <HAL_ADC_Init+0x294>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	099b      	lsrs	r3, r3, #6
 800135e:	3301      	adds	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001362:	e002      	b.n	800136a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3b01      	subs	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f9      	bne.n	8001364 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff17 	bl	80011a8 <LL_ADC_IsInternalRegulatorEnabled>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10d      	bne.n	800139c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	f043 0210 	orr.w	r2, r3, #16
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff77 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 80013a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f040 8129 	bne.w	8001608 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 8125 	bne.w	8001608 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013c6:	f043 0202 	orr.w	r2, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff24 	bl	8001220 <LL_ADC_IsEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d136      	bne.n	800144c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a65      	ldr	r2, [pc, #404]	; (8001578 <HAL_ADC_Init+0x298>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d004      	beq.n	80013f2 <HAL_ADC_Init+0x112>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_ADC_Init+0x29c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10e      	bne.n	8001410 <HAL_ADC_Init+0x130>
 80013f2:	4861      	ldr	r0, [pc, #388]	; (8001578 <HAL_ADC_Init+0x298>)
 80013f4:	f7ff ff14 	bl	8001220 <LL_ADC_IsEnabled>
 80013f8:	4604      	mov	r4, r0
 80013fa:	4860      	ldr	r0, [pc, #384]	; (800157c <HAL_ADC_Init+0x29c>)
 80013fc:	f7ff ff10 	bl	8001220 <LL_ADC_IsEnabled>
 8001400:	4603      	mov	r3, r0
 8001402:	4323      	orrs	r3, r4
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	e008      	b.n	8001422 <HAL_ADC_Init+0x142>
 8001410:	485b      	ldr	r0, [pc, #364]	; (8001580 <HAL_ADC_Init+0x2a0>)
 8001412:	f7ff ff05 	bl	8001220 <LL_ADC_IsEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d012      	beq.n	800144c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a53      	ldr	r2, [pc, #332]	; (8001578 <HAL_ADC_Init+0x298>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d004      	beq.n	800143a <HAL_ADC_Init+0x15a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a51      	ldr	r2, [pc, #324]	; (800157c <HAL_ADC_Init+0x29c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_ADC_Init+0x15e>
 800143a:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_ADC_Init+0x2a4>)
 800143c:	e000      	b.n	8001440 <HAL_ADC_Init+0x160>
 800143e:	4a52      	ldr	r2, [pc, #328]	; (8001588 <HAL_ADC_Init+0x2a8>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f7ff fd42 	bl	8000ed0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800144c:	f7ff fd34 	bl	8000eb8 <HAL_GetREVID>
 8001450:	4603      	mov	r3, r0
 8001452:	f241 0203 	movw	r2, #4099	; 0x1003
 8001456:	4293      	cmp	r3, r2
 8001458:	d914      	bls.n	8001484 <HAL_ADC_Init+0x1a4>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d110      	bne.n	8001484 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7d5b      	ldrb	r3, [r3, #21]
 8001466:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800146c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001472:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7f1b      	ldrb	r3, [r3, #28]
 8001478:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800147a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800147c:	f043 030c 	orr.w	r3, r3, #12
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	e00d      	b.n	80014a0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7d5b      	ldrb	r3, [r3, #21]
 8001488:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800148e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001494:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7f1b      	ldrb	r3, [r3, #28]
 800149a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7f1b      	ldrb	r3, [r3, #28]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	045b      	lsls	r3, r3, #17
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_ADC_Init+0x2ac>)
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	69b9      	ldr	r1, [r7, #24]
 80014e2:	430b      	orrs	r3, r1
 80014e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fed2 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 80014f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fedf 	bl	80012ba <LL_ADC_INJ_IsConversionOngoing>
 80014fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d15f      	bne.n	80015c4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d15c      	bne.n	80015c4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7d1b      	ldrb	r3, [r3, #20]
 800150e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_ADC_Init+0x2b0>)
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	430b      	orrs	r3, r1
 800152a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001532:	2b01      	cmp	r3, #1
 8001534:	d130      	bne.n	8001598 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_ADC_Init+0x2b4>)
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800154a:	3a01      	subs	r2, #1
 800154c:	0411      	lsls	r1, r2, #16
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001552:	4311      	orrs	r1, r2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001558:	4311      	orrs	r1, r2
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800155e:	430a      	orrs	r2, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	e01c      	b.n	80015a8 <HAL_ADC_Init+0x2c8>
 800156e:	bf00      	nop
 8001570:	24000000 	.word	0x24000000
 8001574:	053e2d63 	.word	0x053e2d63
 8001578:	40022000 	.word	0x40022000
 800157c:	40022100 	.word	0x40022100
 8001580:	58026000 	.word	0x58026000
 8001584:	40022300 	.word	0x40022300
 8001588:	58026300 	.word	0x58026300
 800158c:	fff0c003 	.word	0xfff0c003
 8001590:	ffffbffc 	.word	0xffffbffc
 8001594:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fe36 	bl	8002230 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10c      	bne.n	80015e6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f023 010f 	bic.w	r1, r3, #15
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
 80015e4:	e007      	b.n	80015f6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020f 	bic.w	r2, r2, #15
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fa:	f023 0303 	bic.w	r3, r3, #3
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
 8001606:	e007      	b.n	8001618 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	f043 0210 	orr.w	r2, r3, #16
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001618:	7ffb      	ldrb	r3, [r7, #31]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop

08001624 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a5c      	ldr	r2, [pc, #368]	; (80017a4 <HAL_ADC_Start+0x180>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_ADC_Start+0x1c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a5b      	ldr	r2, [pc, #364]	; (80017a8 <HAL_ADC_Start+0x184>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_ADC_Start+0x20>
 8001640:	4b5a      	ldr	r3, [pc, #360]	; (80017ac <HAL_ADC_Start+0x188>)
 8001642:	e000      	b.n	8001646 <HAL_ADC_Start+0x22>
 8001644:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <HAL_ADC_Start+0x18c>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fd58 	bl	80010fc <LL_ADC_GetMultimode>
 800164c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe1e 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 809a 	bne.w	8001794 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_ADC_Start+0x4a>
 800166a:	2302      	movs	r3, #2
 800166c:	e095      	b.n	800179a <HAL_ADC_Start+0x176>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fcf0 	bl	800205c <ADC_Enable>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8081 	bne.w	800178a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800168c:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_ADC_Start+0x190>)
 800168e:	4013      	ands	r3, r2
 8001690:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a42      	ldr	r2, [pc, #264]	; (80017a8 <HAL_ADC_Start+0x184>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d002      	beq.n	80016a8 <HAL_ADC_Start+0x84>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	e000      	b.n	80016aa <HAL_ADC_Start+0x86>
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_ADC_Start+0x180>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d002      	beq.n	80016b8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	d106      	bne.n	80016e0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f023 0206 	bic.w	r2, r3, #6
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	659a      	str	r2, [r3, #88]	; 0x58
 80016de:	e002      	b.n	80016e6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	221c      	movs	r2, #28
 80016ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2b      	ldr	r2, [pc, #172]	; (80017a8 <HAL_ADC_Start+0x184>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d002      	beq.n	8001706 <HAL_ADC_Start+0xe2>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	e000      	b.n	8001708 <HAL_ADC_Start+0xe4>
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_ADC_Start+0x180>)
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	4293      	cmp	r3, r2
 800170e:	d008      	beq.n	8001722 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d002      	beq.n	8001722 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b09      	cmp	r3, #9
 8001720:	d114      	bne.n	800174c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001738:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fd91 	bl	800126c <LL_ADC_REG_StartConversion>
 800174a:	e025      	b.n	8001798 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001750:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_ADC_Start+0x184>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d002      	beq.n	8001768 <HAL_ADC_Start+0x144>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	e000      	b.n	800176a <HAL_ADC_Start+0x146>
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_ADC_Start+0x180>)
 800176a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00f      	beq.n	8001798 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001780:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
 8001788:	e006      	b.n	8001798 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001792:	e001      	b.n	8001798 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001794:	2302      	movs	r3, #2
 8001796:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001798:	7dfb      	ldrb	r3, [r7, #23]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40022100 	.word	0x40022100
 80017ac:	40022300 	.word	0x40022300
 80017b0:	58026300 	.word	0x58026300
 80017b4:	fffff0fe 	.word	0xfffff0fe

080017b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a72      	ldr	r2, [pc, #456]	; (8001990 <HAL_ADC_PollForConversion+0x1d8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_ADC_PollForConversion+0x1e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a70      	ldr	r2, [pc, #448]	; (8001994 <HAL_ADC_PollForConversion+0x1dc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_ADC_PollForConversion+0x22>
 80017d6:	4b70      	ldr	r3, [pc, #448]	; (8001998 <HAL_ADC_PollForConversion+0x1e0>)
 80017d8:	e000      	b.n	80017dc <HAL_ADC_PollForConversion+0x24>
 80017da:	4b70      	ldr	r3, [pc, #448]	; (800199c <HAL_ADC_PollForConversion+0x1e4>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc8d 	bl	80010fc <LL_ADC_GetMultimode>
 80017e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d102      	bne.n	80017f2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017ec:	2308      	movs	r3, #8
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	e037      	b.n	8001862 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d002      	beq.n	8001804 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b09      	cmp	r3, #9
 8001802:	d111      	bne.n	8001828 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	f043 0220 	orr.w	r2, r3, #32
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0b1      	b.n	8001986 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001822:	2304      	movs	r3, #4
 8001824:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001826:	e01c      	b.n	8001862 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <HAL_ADC_PollForConversion+0x1d8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d004      	beq.n	800183c <HAL_ADC_PollForConversion+0x84>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a57      	ldr	r2, [pc, #348]	; (8001994 <HAL_ADC_PollForConversion+0x1dc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_ADC_PollForConversion+0x88>
 800183c:	4b56      	ldr	r3, [pc, #344]	; (8001998 <HAL_ADC_PollForConversion+0x1e0>)
 800183e:	e000      	b.n	8001842 <HAL_ADC_PollForConversion+0x8a>
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_ADC_PollForConversion+0x1e4>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc68 	bl	8001118 <LL_ADC_GetMultiDMATransfer>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f043 0220 	orr.w	r2, r3, #32
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e093      	b.n	8001986 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800185e:	2304      	movs	r3, #4
 8001860:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001862:	f7ff faf9 	bl	8000e58 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001868:	e021      	b.n	80018ae <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d01d      	beq.n	80018ae <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001872:	f7ff faf1 	bl	8000e58 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d302      	bcc.n	8001888 <HAL_ADC_PollForConversion+0xd0>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d112      	bne.n	80018ae <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10b      	bne.n	80018ae <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f043 0204 	orr.w	r2, r3, #4
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e06b      	b.n	8001986 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0d6      	beq.n	800186a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb87 	bl	8000fe0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01c      	beq.n	8001912 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7d5b      	ldrb	r3, [r3, #21]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d118      	bne.n	8001912 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d111      	bne.n	8001912 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <HAL_ADC_PollForConversion+0x1dc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d002      	beq.n	8001922 <HAL_ADC_PollForConversion+0x16a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e000      	b.n	8001924 <HAL_ADC_PollForConversion+0x16c>
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_ADC_PollForConversion+0x1d8>)
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	4293      	cmp	r3, r2
 800192a:	d008      	beq.n	800193e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d002      	beq.n	800193e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b09      	cmp	r3, #9
 800193c:	d104      	bne.n	8001948 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	e00c      	b.n	8001962 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_ADC_PollForConversion+0x1dc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d002      	beq.n	8001958 <HAL_ADC_PollForConversion+0x1a0>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e000      	b.n	800195a <HAL_ADC_PollForConversion+0x1a2>
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_ADC_PollForConversion+0x1d8>)
 800195a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b08      	cmp	r3, #8
 8001966:	d104      	bne.n	8001972 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2208      	movs	r2, #8
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e008      	b.n	8001984 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d103      	bne.n	8001984 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	220c      	movs	r2, #12
 8001982:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000
 8001994:	40022100 	.word	0x40022100
 8001998:	40022300 	.word	0x40022300
 800199c:	58026300 	.word	0x58026300

080019a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b0a1      	sub	sp, #132	; 0x84
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4a9d      	ldr	r2, [pc, #628]	; (8001c4c <HAL_ADC_ConfigChannel+0x290>)
 80019d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x2a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e321      	b.n	800202a <HAL_ADC_ConfigChannel+0x66e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fc4e 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 8306 	bne.w	800200c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d108      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x62>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2201      	movs	r2, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	e016      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x90>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a2e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001a36:	2320      	movs	r3, #32
 8001a38:	e003      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2201      	movs	r2, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	69d1      	ldr	r1, [r2, #28]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	430b      	orrs	r3, r1
 8001a58:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7ff facd 	bl	8001006 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fc0f 	bl	8001294 <LL_ADC_REG_IsConversionOngoing>
 8001a76:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fc1c 	bl	80012ba <LL_ADC_INJ_IsConversionOngoing>
 8001a82:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 80b3 	bne.w	8001bf2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f040 80af 	bne.w	8001bf2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6819      	ldr	r1, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f7ff fadc 	bl	800105e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_ADC_ConfigChannel+0x294>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ab2:	d10b      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x110>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	e01d      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x14c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x136>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	e00a      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x14c>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d027      	beq.n	8001b62 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6919      	ldr	r1, [r3, #16]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b20:	f7ff fa0a 	bl	8000f38 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6919      	ldr	r1, [r3, #16]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	7e5b      	ldrb	r3, [r3, #25]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x17e>
 8001b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x180>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f7ff fa34 	bl	8000faa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	7e1b      	ldrb	r3, [r3, #24]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x19c>
 8001b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x19e>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f7ff fa0c 	bl	8000f78 <LL_ADC_SetDataRightShift>
 8001b60:	e047      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	069b      	lsls	r3, r3, #26
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d107      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b84:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	069b      	lsls	r3, r3, #26
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d107      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ba8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	069b      	lsls	r3, r3, #26
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d107      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bcc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	069b      	lsls	r3, r3, #26
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d107      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bf0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb12 	bl	8001220 <LL_ADC_IsEnabled>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 820d 	bne.w	800201e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f7ff fa4f 	bl	80010b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_ADC_ConfigChannel+0x290>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	f040 8133 	bne.w	8001e88 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d110      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x298>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0e9b      	lsrs	r3, r3, #26
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	2b09      	cmp	r3, #9
 8001c40:	bf94      	ite	ls
 8001c42:	2301      	movls	r3, #1
 8001c44:	2300      	movhi	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	e01e      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x2cc>
 8001c4a:	bf00      	nop
 8001c4c:	47ff0000 	.word	0x47ff0000
 8001c50:	5c001000 	.word	0x5c001000
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e003      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	2b09      	cmp	r3, #9
 8001c80:	bf94      	ite	ls
 8001c82:	2301      	movls	r3, #1
 8001c84:	2300      	movhi	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d079      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x2ec>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0e9b      	lsrs	r3, r3, #26
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	069b      	lsls	r3, r3, #26
 8001ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca6:	e015      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x318>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e003      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	069b      	lsls	r3, r3, #26
 8001cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x338>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0e9b      	lsrs	r3, r3, #26
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	e017      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x368>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	e003      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	ea42 0103 	orr.w	r1, r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x38e>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	051b      	lsls	r3, r3, #20
 8001d48:	e018      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x3c0>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e003      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	e07e      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x3e0>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	3301      	adds	r3, #1
 8001d94:	069b      	lsls	r3, r3, #26
 8001d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d9a:	e015      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x40c>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001db4:	2320      	movs	r3, #32
 8001db6:	e003      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	069b      	lsls	r3, r3, #26
 8001dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x42c>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	e017      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x45c>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	61bb      	str	r3, [r7, #24]
  return result;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e003      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	ea42 0103 	orr.w	r1, r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x488>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b1e      	subs	r3, #30
 8001e3c:	051b      	lsls	r3, r3, #20
 8001e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e42:	e01b      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x4c0>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	60fb      	str	r3, [r7, #12]
  return result;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e003      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	051b      	lsls	r3, r3, #20
 8001e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	6892      	ldr	r2, [r2, #8]
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7ff f8eb 	bl	800105e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f280 80c6 	bge.w	800201e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a67      	ldr	r2, [pc, #412]	; (8002034 <HAL_ADC_ConfigChannel+0x678>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d004      	beq.n	8001ea6 <HAL_ADC_ConfigChannel+0x4ea>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_ADC_ConfigChannel+0x67c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x4ee>
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_ADC_ConfigChannel+0x680>)
 8001ea8:	e000      	b.n	8001eac <HAL_ADC_ConfigChannel+0x4f0>
 8001eaa:	4b65      	ldr	r3, [pc, #404]	; (8002040 <HAL_ADC_ConfigChannel+0x684>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f835 	bl	8000f1c <LL_ADC_GetCommonPathInternalCh>
 8001eb2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5e      	ldr	r2, [pc, #376]	; (8002034 <HAL_ADC_ConfigChannel+0x678>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x50c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a5d      	ldr	r2, [pc, #372]	; (8002038 <HAL_ADC_ConfigChannel+0x67c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x52a>
 8001ec8:	485a      	ldr	r0, [pc, #360]	; (8002034 <HAL_ADC_ConfigChannel+0x678>)
 8001eca:	f7ff f9a9 	bl	8001220 <LL_ADC_IsEnabled>
 8001ece:	4604      	mov	r4, r0
 8001ed0:	4859      	ldr	r0, [pc, #356]	; (8002038 <HAL_ADC_ConfigChannel+0x67c>)
 8001ed2:	f7ff f9a5 	bl	8001220 <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4323      	orrs	r3, r4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	e008      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x53c>
 8001ee6:	4857      	ldr	r0, [pc, #348]	; (8002044 <HAL_ADC_ConfigChannel+0x688>)
 8001ee8:	f7ff f99a 	bl	8001220 <LL_ADC_IsEnabled>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d07d      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <HAL_ADC_ConfigChannel+0x68c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d130      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x5ac>
 8001f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d12b      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4b      	ldr	r2, [pc, #300]	; (8002044 <HAL_ADC_ConfigChannel+0x688>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	f040 8081 	bne.w	800201e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a44      	ldr	r2, [pc, #272]	; (8002034 <HAL_ADC_ConfigChannel+0x678>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x574>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a43      	ldr	r2, [pc, #268]	; (8002038 <HAL_ADC_ConfigChannel+0x67c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x578>
 8001f30:	4a42      	ldr	r2, [pc, #264]	; (800203c <HAL_ADC_ConfigChannel+0x680>)
 8001f32:	e000      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x57a>
 8001f34:	4a42      	ldr	r2, [pc, #264]	; (8002040 <HAL_ADC_ConfigChannel+0x684>)
 8001f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f7fe ffd9 	bl	8000ef6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f44:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_ADC_ConfigChannel+0x690>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	4a41      	ldr	r2, [pc, #260]	; (8002050 <HAL_ADC_ConfigChannel+0x694>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f66:	e05a      	b.n	800201e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a39      	ldr	r2, [pc, #228]	; (8002054 <HAL_ADC_ConfigChannel+0x698>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11e      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x5f4>
 8001f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d119      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a30      	ldr	r2, [pc, #192]	; (8002044 <HAL_ADC_ConfigChannel+0x688>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d14b      	bne.n	800201e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <HAL_ADC_ConfigChannel+0x678>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d004      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x5de>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_ADC_ConfigChannel+0x67c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x5e2>
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_ADC_ConfigChannel+0x680>)
 8001f9c:	e000      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x5e4>
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_ADC_ConfigChannel+0x684>)
 8001fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4610      	mov	r0, r2
 8001faa:	f7fe ffa4 	bl	8000ef6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fae:	e036      	b.n	800201e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <HAL_ADC_ConfigChannel+0x69c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d131      	bne.n	800201e <HAL_ADC_ConfigChannel+0x662>
 8001fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d12c      	bne.n	800201e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_ADC_ConfigChannel+0x688>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d127      	bne.n	800201e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_ADC_ConfigChannel+0x678>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x626>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_ADC_ConfigChannel+0x67c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x62a>
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_ADC_ConfigChannel+0x680>)
 8001fe4:	e000      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x62c>
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <HAL_ADC_ConfigChannel+0x684>)
 8001fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f7fe ff80 	bl	8000ef6 <LL_ADC_SetCommonPathInternalCh>
 8001ff6:	e012      	b.n	800201e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800200a:	e008      	b.n	800201e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002026:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800202a:	4618      	mov	r0, r3
 800202c:	3784      	adds	r7, #132	; 0x84
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	40022000 	.word	0x40022000
 8002038:	40022100 	.word	0x40022100
 800203c:	40022300 	.word	0x40022300
 8002040:	58026300 	.word	0x58026300
 8002044:	58026000 	.word	0x58026000
 8002048:	cb840000 	.word	0xcb840000
 800204c:	24000000 	.word	0x24000000
 8002050:	053e2d63 	.word	0x053e2d63
 8002054:	c7520000 	.word	0xc7520000
 8002058:	cfb80000 	.word	0xcfb80000

0800205c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f8d9 	bl	8001220 <LL_ADC_IsEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d16e      	bne.n	8002152 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <ADC_Enable+0x100>)
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00d      	beq.n	800209e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e05a      	b.n	8002154 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f894 	bl	80011d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fed6 	bl	8000e58 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <ADC_Enable+0x104>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <ADC_Enable+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <ADC_Enable+0x108>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <ADC_Enable+0x6a>
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <ADC_Enable+0x10c>)
 80020c4:	e000      	b.n	80020c8 <ADC_Enable+0x6c>
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <ADC_Enable+0x110>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f817 	bl	80010fc <LL_ADC_GetMultimode>
 80020ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <ADC_Enable+0x108>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d002      	beq.n	80020e0 <ADC_Enable+0x84>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e000      	b.n	80020e2 <ADC_Enable+0x86>
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <ADC_Enable+0x104>)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02c      	beq.n	8002144 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d130      	bne.n	8002152 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f0:	e028      	b.n	8002144 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f892 	bl	8001220 <LL_ADC_IsEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d104      	bne.n	800210c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f862 	bl	80011d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800210c:	f7fe fea4 	bl	8000e58 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d914      	bls.n	8002144 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d00d      	beq.n	8002144 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d1cf      	bne.n	80020f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	8000003f 	.word	0x8000003f
 8002160:	40022000 	.word	0x40022000
 8002164:	40022100 	.word	0x40022100
 8002168:	40022300 	.word	0x40022300
 800216c:	58026300 	.word	0x58026300

08002170 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f862 	bl	8001246 <LL_ADC_IsDisableOngoing>
 8002182:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f849 	bl	8001220 <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d047      	beq.n	8002224 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d144      	bne.n	8002224 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030d 	and.w	r3, r3, #13
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10c      	bne.n	80021c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f823 	bl	80011f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2203      	movs	r2, #3
 80021b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021ba:	f7fe fe4d 	bl	8000e58 <HAL_GetTick>
 80021be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021c0:	e029      	b.n	8002216 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e023      	b.n	8002226 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021de:	f7fe fe3b 	bl	8000e58 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d914      	bls.n	8002216 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0210 	orr.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e007      	b.n	8002226 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1dc      	bne.n	80021de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <ADC_ConfigureBoostMode+0x1f8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d004      	beq.n	800224c <ADC_ConfigureBoostMode+0x1c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a79      	ldr	r2, [pc, #484]	; (800242c <ADC_ConfigureBoostMode+0x1fc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d109      	bne.n	8002260 <ADC_ConfigureBoostMode+0x30>
 800224c:	4b78      	ldr	r3, [pc, #480]	; (8002430 <ADC_ConfigureBoostMode+0x200>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e008      	b.n	8002272 <ADC_ConfigureBoostMode+0x42>
 8002260:	4b74      	ldr	r3, [pc, #464]	; (8002434 <ADC_ConfigureBoostMode+0x204>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01c      	beq.n	80022b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002276:	f001 fbef 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 800227a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002284:	d010      	beq.n	80022a8 <ADC_ConfigureBoostMode+0x78>
 8002286:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800228a:	d873      	bhi.n	8002374 <ADC_ConfigureBoostMode+0x144>
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d002      	beq.n	8002298 <ADC_ConfigureBoostMode+0x68>
 8002292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002296:	d16d      	bne.n	8002374 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	60fb      	str	r3, [r7, #12]
        break;
 80022a6:	e068      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	60fb      	str	r3, [r7, #12]
        break;
 80022ae:	e064      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80022b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	f002 fe1e 	bl	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq>
 80022bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022c6:	d051      	beq.n	800236c <ADC_ConfigureBoostMode+0x13c>
 80022c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022cc:	d854      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 80022ce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022d2:	d047      	beq.n	8002364 <ADC_ConfigureBoostMode+0x134>
 80022d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022d8:	d84e      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 80022da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022de:	d03d      	beq.n	800235c <ADC_ConfigureBoostMode+0x12c>
 80022e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022e4:	d848      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 80022e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ea:	d033      	beq.n	8002354 <ADC_ConfigureBoostMode+0x124>
 80022ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022f0:	d842      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 80022f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80022f6:	d029      	beq.n	800234c <ADC_ConfigureBoostMode+0x11c>
 80022f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80022fc:	d83c      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 80022fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002302:	d01a      	beq.n	800233a <ADC_ConfigureBoostMode+0x10a>
 8002304:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002308:	d836      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 800230a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800230e:	d014      	beq.n	800233a <ADC_ConfigureBoostMode+0x10a>
 8002310:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002314:	d830      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 8002316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800231a:	d00e      	beq.n	800233a <ADC_ConfigureBoostMode+0x10a>
 800231c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002320:	d82a      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 8002322:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002326:	d008      	beq.n	800233a <ADC_ConfigureBoostMode+0x10a>
 8002328:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800232c:	d824      	bhi.n	8002378 <ADC_ConfigureBoostMode+0x148>
 800232e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002332:	d002      	beq.n	800233a <ADC_ConfigureBoostMode+0x10a>
 8002334:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002338:	d11e      	bne.n	8002378 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0c9b      	lsrs	r3, r3, #18
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	60fb      	str	r3, [r7, #12]
        break;
 800234a:	e016      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
        break;
 8002352:	e012      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	60fb      	str	r3, [r7, #12]
        break;
 800235a:	e00e      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	60fb      	str	r3, [r7, #12]
        break;
 8002362:	e00a      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	09db      	lsrs	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]
        break;
 800236a:	e006      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	60fb      	str	r3, [r7, #12]
        break;
 8002372:	e002      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002374:	bf00      	nop
 8002376:	e000      	b.n	800237a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002378:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800237a:	f7fe fd9d 	bl	8000eb8 <HAL_GetREVID>
 800237e:	4603      	mov	r3, r0
 8002380:	f241 0203 	movw	r2, #4099	; 0x1003
 8002384:	4293      	cmp	r3, r2
 8002386:	d815      	bhi.n	80023b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <ADC_ConfigureBoostMode+0x208>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d908      	bls.n	80023a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800239e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80023a0:	e03e      	b.n	8002420 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b0:	609a      	str	r2, [r3, #8]
}
 80023b2:	e035      	b.n	8002420 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a1f      	ldr	r2, [pc, #124]	; (800243c <ADC_ConfigureBoostMode+0x20c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d808      	bhi.n	80023d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023d0:	609a      	str	r2, [r3, #8]
}
 80023d2:	e025      	b.n	8002420 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <ADC_ConfigureBoostMode+0x210>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d80a      	bhi.n	80023f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ee:	609a      	str	r2, [r3, #8]
}
 80023f0:	e016      	b.n	8002420 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <ADC_ConfigureBoostMode+0x214>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d80a      	bhi.n	8002410 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	609a      	str	r2, [r3, #8]
}
 800240e:	e007      	b.n	8002420 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800241e:	609a      	str	r2, [r3, #8]
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40022000 	.word	0x40022000
 800242c:	40022100 	.word	0x40022100
 8002430:	40022300 	.word	0x40022300
 8002434:	58026300 	.word	0x58026300
 8002438:	01312d00 	.word	0x01312d00
 800243c:	005f5e10 	.word	0x005f5e10
 8002440:	00bebc20 	.word	0x00bebc20
 8002444:	017d7840 	.word	0x017d7840

08002448 <LL_ADC_StartCalibration>:
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <LL_ADC_StartCalibration+0x38>)
 800245a:	4013      	ands	r3, r2
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002468:	430a      	orrs	r2, r1
 800246a:	4313      	orrs	r3, r2
 800246c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	3ffeffc0 	.word	0x3ffeffc0

08002484 <LL_ADC_IsCalibrationOnGoing>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002498:	d101      	bne.n	800249e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADCEx_Calibration_Start+0x1e>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e04c      	b.n	8002564 <HAL_ADCEx_Calibration_Start+0xb8>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff fe4c 	bl	8002170 <ADC_Disable>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d135      	bne.n	800254e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_ADCEx_Calibration_Start+0xc0>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	f043 0202 	orr.w	r2, r3, #2
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ffa4 	bl	8002448 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002500:	e014      	b.n	800252c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	3301      	adds	r3, #1
 8002506:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_ADCEx_Calibration_Start+0xc4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d30d      	bcc.n	800252c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f023 0312 	bic.w	r3, r3, #18
 8002518:	f043 0210 	orr.w	r2, r3, #16
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e01b      	b.n	8002564 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ffa7 	bl	8002484 <LL_ADC_IsCalibrationOnGoing>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e2      	bne.n	8002502 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f023 0303 	bic.w	r3, r3, #3
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
 800254c:	e005      	b.n	800255a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f043 0210 	orr.w	r2, r3, #16
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002562:	7dfb      	ldrb	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	ffffeefd 	.word	0xffffeefd
 8002570:	25c3f800 	.word	0x25c3f800

08002574 <__NVIC_SetPriorityGrouping>:
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <__NVIC_SetPriorityGrouping+0x40>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00
 80025b8:	05fa0000 	.word	0x05fa0000

080025bc <__NVIC_GetPriorityGrouping>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_SetPriority>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff47 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff5e 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff90 	bl	800262c <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5f 	bl	80025d8 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffb2 	bl	8002694 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800274a:	4b89      	ldr	r3, [pc, #548]	; (8002970 <HAL_GPIO_Init+0x234>)
 800274c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800274e:	e194      	b.n	8002a7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8186 	beq.w	8002a74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <HAL_GPIO_Init+0x44>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d130      	bne.n	80027e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b6:	2201      	movs	r2, #1
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 0201 	and.w	r2, r3, #1
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d017      	beq.n	800281e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d123      	bne.n	8002872 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	69b9      	ldr	r1, [r7, #24]
 800286e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80e0 	beq.w	8002a74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_GPIO_Init+0x238>)
 80028b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ba:	4a2e      	ldr	r2, [pc, #184]	; (8002974 <HAL_GPIO_Init+0x238>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_GPIO_Init+0x238>)
 80028c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d2:	4a29      	ldr	r2, [pc, #164]	; (8002978 <HAL_GPIO_Init+0x23c>)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <HAL_GPIO_Init+0x240>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d052      	beq.n	80029a4 <HAL_GPIO_Init+0x268>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_GPIO_Init+0x244>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d031      	beq.n	800296a <HAL_GPIO_Init+0x22e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_GPIO_Init+0x248>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02b      	beq.n	8002966 <HAL_GPIO_Init+0x22a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <HAL_GPIO_Init+0x24c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d025      	beq.n	8002962 <HAL_GPIO_Init+0x226>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_GPIO_Init+0x250>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <HAL_GPIO_Init+0x222>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_GPIO_Init+0x254>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d019      	beq.n	800295a <HAL_GPIO_Init+0x21e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <HAL_GPIO_Init+0x258>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0x21a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_GPIO_Init+0x25c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00d      	beq.n	8002952 <HAL_GPIO_Init+0x216>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_GPIO_Init+0x260>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x212>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_GPIO_Init+0x264>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_GPIO_Init+0x20e>
 8002946:	2309      	movs	r3, #9
 8002948:	e02d      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 800294a:	230a      	movs	r3, #10
 800294c:	e02b      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 800294e:	2308      	movs	r3, #8
 8002950:	e029      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 8002952:	2307      	movs	r3, #7
 8002954:	e027      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 8002956:	2306      	movs	r3, #6
 8002958:	e025      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 800295a:	2305      	movs	r3, #5
 800295c:	e023      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 800295e:	2304      	movs	r3, #4
 8002960:	e021      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 8002962:	2303      	movs	r3, #3
 8002964:	e01f      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 8002966:	2302      	movs	r3, #2
 8002968:	e01d      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 800296a:	2301      	movs	r3, #1
 800296c:	e01b      	b.n	80029a6 <HAL_GPIO_Init+0x26a>
 800296e:	bf00      	nop
 8002970:	58000080 	.word	0x58000080
 8002974:	58024400 	.word	0x58024400
 8002978:	58000400 	.word	0x58000400
 800297c:	58020000 	.word	0x58020000
 8002980:	58020400 	.word	0x58020400
 8002984:	58020800 	.word	0x58020800
 8002988:	58020c00 	.word	0x58020c00
 800298c:	58021000 	.word	0x58021000
 8002990:	58021400 	.word	0x58021400
 8002994:	58021800 	.word	0x58021800
 8002998:	58021c00 	.word	0x58021c00
 800299c:	58022000 	.word	0x58022000
 80029a0:	58022400 	.word	0x58022400
 80029a4:	2300      	movs	r3, #0
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	f002 0203 	and.w	r2, r2, #3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4093      	lsls	r3, r2
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b6:	4938      	ldr	r1, [pc, #224]	; (8002a98 <HAL_GPIO_Init+0x35c>)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f47f ae63 	bne.w	8002750 <HAL_GPIO_Init+0x14>
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3724      	adds	r7, #36	; 0x24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	58000400 	.word	0x58000400

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ab8:	e003      	b.n	8002ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_PWREx_ConfigSupply+0x70>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d00a      	beq.n	8002afa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_PWREx_ConfigSupply+0x70>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d001      	beq.n	8002af6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01f      	b.n	8002b36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e01d      	b.n	8002b36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_PWREx_ConfigSupply+0x70>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	490f      	ldr	r1, [pc, #60]	; (8002b40 <HAL_PWREx_ConfigSupply+0x70>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b0a:	f7fe f9a5 	bl	8000e58 <HAL_GetTick>
 8002b0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b10:	e009      	b.n	8002b26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b12:	f7fe f9a1 	bl	8000e58 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b20:	d901      	bls.n	8002b26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e007      	b.n	8002b36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_PWREx_ConfigSupply+0x70>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b32:	d1ee      	bne.n	8002b12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	58024800 	.word	0x58024800

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	; 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f000 bc48 	b.w	80033e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8088 	beq.w	8002c76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4b99      	ldr	r3, [pc, #612]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b70:	4b96      	ldr	r3, [pc, #600]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d007      	beq.n	8002b8c <HAL_RCC_OscConfig+0x48>
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	2b18      	cmp	r3, #24
 8002b80:	d111      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62>
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	4b8f      	ldr	r3, [pc, #572]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d06d      	beq.n	8002c74 <HAL_RCC_OscConfig+0x130>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d169      	bne.n	8002c74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f000 bc21 	b.w	80033e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x7a>
 8002bb0:	4b86      	ldr	r3, [pc, #536]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a85      	ldr	r2, [pc, #532]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e02e      	b.n	8002c1c <HAL_RCC_OscConfig+0xd8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x9c>
 8002bc6:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a80      	ldr	r2, [pc, #512]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7d      	ldr	r2, [pc, #500]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e01d      	b.n	8002c1c <HAL_RCC_OscConfig+0xd8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0xc0>
 8002bea:	4b78      	ldr	r3, [pc, #480]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a77      	ldr	r2, [pc, #476]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b75      	ldr	r3, [pc, #468]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a74      	ldr	r2, [pc, #464]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0xd8>
 8002c04:	4b71      	ldr	r3, [pc, #452]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a70      	ldr	r2, [pc, #448]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b6e      	ldr	r3, [pc, #440]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6d      	ldr	r2, [pc, #436]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe f918 	bl	8000e58 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f914 	bl	8000e58 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e3d4      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0xe8>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f904 	bl	8000e58 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe f900 	bl	8000e58 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e3c0      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c66:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x110>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80ca 	beq.w	8002e18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c84:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c8e:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_RCC_OscConfig+0x166>
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2b18      	cmp	r3, #24
 8002c9e:	d156      	bne.n	8002d4e <HAL_RCC_OscConfig+0x20a>
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d151      	bne.n	8002d4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002caa:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x17e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e392      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0219 	bic.w	r2, r3, #25
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	493f      	ldr	r1, [pc, #252]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f8c0 	bl	8000e58 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7fe f8bc 	bl	8000e58 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e37c      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	f7fe f8dd 	bl	8000eb8 <HAL_GetREVID>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d817      	bhi.n	8002d38 <HAL_RCC_OscConfig+0x1f4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d108      	bne.n	8002d22 <HAL_RCC_OscConfig+0x1de>
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d18:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d20:	e07a      	b.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	031b      	lsls	r3, r3, #12
 8002d30:	4926      	ldr	r1, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d36:	e06f      	b.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	4921      	ldr	r1, [pc, #132]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	e064      	b.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d047      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0219 	bic.w	r2, r3, #25
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	491a      	ldr	r1, [pc, #104]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe f876 	bl	8000e58 <HAL_GetTick>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fe f872 	bl	8000e58 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e332      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	f7fe f893 	bl	8000eb8 <HAL_GetREVID>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d819      	bhi.n	8002dd0 <HAL_RCC_OscConfig+0x28c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d108      	bne.n	8002db6 <HAL_RCC_OscConfig+0x272>
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	6053      	str	r3, [r2, #4]
 8002db4:	e030      	b.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	031b      	lsls	r3, r3, #12
 8002dc4:	4901      	ldr	r1, [pc, #4]	; (8002dcc <HAL_RCC_OscConfig+0x288>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
 8002dca:	e025      	b.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
 8002dcc:	58024400 	.word	0x58024400
 8002dd0:	4b9a      	ldr	r3, [pc, #616]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	4997      	ldr	r1, [pc, #604]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e018      	b.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4b95      	ldr	r3, [pc, #596]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a94      	ldr	r2, [pc, #592]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe f831 	bl	8000e58 <HAL_GetTick>
 8002df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fe f82d 	bl	8000e58 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e2ed      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e0c:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a9 	beq.w	8002f78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b85      	ldr	r3, [pc, #532]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e30:	4b82      	ldr	r3, [pc, #520]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_OscConfig+0x308>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b18      	cmp	r3, #24
 8002e40:	d13a      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x374>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d135      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e4c:	4b7b      	ldr	r3, [pc, #492]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x320>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e2c1      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e64:	f7fe f828 	bl	8000eb8 <HAL_GetREVID>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d817      	bhi.n	8002ea2 <HAL_RCC_OscConfig+0x35e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_OscConfig+0x348>
 8002e7a:	4b70      	ldr	r3, [pc, #448]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e8a:	e075      	b.n	8002f78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e8c:	4b6b      	ldr	r3, [pc, #428]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	4968      	ldr	r1, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea0:	e06a      	b.n	8002f78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ea2:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	061b      	lsls	r3, r3, #24
 8002eb0:	4962      	ldr	r1, [pc, #392]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eb6:	e05f      	b.n	8002f78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d042      	beq.n	8002f46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a5d      	ldr	r2, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd ffc4 	bl	8000e58 <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ed4:	f7fd ffc0 	bl	8000e58 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e280      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee6:	4b55      	ldr	r3, [pc, #340]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ef2:	f7fd ffe1 	bl	8000eb8 <HAL_GetREVID>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d817      	bhi.n	8002f30 <HAL_RCC_OscConfig+0x3ec>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d108      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3d6>
 8002f08:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f10:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f16:	6053      	str	r3, [r2, #4]
 8002f18:	e02e      	b.n	8002f78 <HAL_RCC_OscConfig+0x434>
 8002f1a:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	4944      	ldr	r1, [pc, #272]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
 8002f2e:	e023      	b.n	8002f78 <HAL_RCC_OscConfig+0x434>
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	061b      	lsls	r3, r3, #24
 8002f3e:	493f      	ldr	r1, [pc, #252]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60cb      	str	r3, [r1, #12]
 8002f44:	e018      	b.n	8002f78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3c      	ldr	r2, [pc, #240]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f52:	f7fd ff81 	bl	8000e58 <HAL_GetTick>
 8002f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f5a:	f7fd ff7d 	bl	8000e58 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e23d      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f6c:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d036      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d019      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fd ff5e 	bl	8000e58 <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fd ff5a 	bl	8000e58 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e21a      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x45c>
 8002fbe:	e018      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fd ff44 	bl	8000e58 <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fd ff40 	bl	8000e58 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e200      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d039      	beq.n	8003072 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01c      	beq.n	8003040 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 800300c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003010:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003012:	f7fd ff21 	bl	8000e58 <HAL_GetTick>
 8003016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800301a:	f7fd ff1d 	bl	8000e58 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1dd      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_OscConfig+0x4f8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x4d6>
 8003038:	e01b      	b.n	8003072 <HAL_RCC_OscConfig+0x52e>
 800303a:	bf00      	nop
 800303c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003040:	4b9b      	ldr	r3, [pc, #620]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a9a      	ldr	r2, [pc, #616]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800304a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800304c:	f7fd ff04 	bl	8000e58 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003054:	f7fd ff00 	bl	8000e58 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1c0      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003066:	4b92      	ldr	r3, [pc, #584]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8081 	beq.w	8003182 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003080:	4b8c      	ldr	r3, [pc, #560]	; (80032b4 <HAL_RCC_OscConfig+0x770>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a8b      	ldr	r2, [pc, #556]	; (80032b4 <HAL_RCC_OscConfig+0x770>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800308c:	f7fd fee4 	bl	8000e58 <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003094:	f7fd fee0 	bl	8000e58 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1a0      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030a6:	4b83      	ldr	r3, [pc, #524]	; (80032b4 <HAL_RCC_OscConfig+0x770>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d106      	bne.n	80030c8 <HAL_RCC_OscConfig+0x584>
 80030ba:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a7c      	ldr	r2, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	e02d      	b.n	8003124 <HAL_RCC_OscConfig+0x5e0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10c      	bne.n	80030ea <HAL_RCC_OscConfig+0x5a6>
 80030d0:	4b77      	ldr	r3, [pc, #476]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a76      	ldr	r2, [pc, #472]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	4b74      	ldr	r3, [pc, #464]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a73      	ldr	r2, [pc, #460]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030e2:	f023 0304 	bic.w	r3, r3, #4
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	e01c      	b.n	8003124 <HAL_RCC_OscConfig+0x5e0>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x5c8>
 80030f2:	4b6f      	ldr	r3, [pc, #444]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a6e      	ldr	r2, [pc, #440]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	4b6c      	ldr	r3, [pc, #432]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a6b      	ldr	r2, [pc, #428]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
 800310a:	e00b      	b.n	8003124 <HAL_RCC_OscConfig+0x5e0>
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a67      	ldr	r2, [pc, #412]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4a64      	ldr	r2, [pc, #400]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800311e:	f023 0304 	bic.w	r3, r3, #4
 8003122:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d015      	beq.n	8003158 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fd fe94 	bl	8000e58 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fd fe90 	bl	8000e58 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e14e      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800314a:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ee      	beq.n	8003134 <HAL_RCC_OscConfig+0x5f0>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fd fe7e 	bl	8000e58 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fd fe7a 	bl	8000e58 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e138      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003176:	4b4e      	ldr	r3, [pc, #312]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ee      	bne.n	8003160 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 812d 	beq.w	80033e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800318c:	4b48      	ldr	r3, [pc, #288]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003194:	2b18      	cmp	r3, #24
 8003196:	f000 80bd 	beq.w	8003314 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b02      	cmp	r3, #2
 80031a0:	f040 809e 	bne.w	80032e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a4:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a41      	ldr	r2, [pc, #260]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80031aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fd fe52 	bl	8000e58 <HAL_GetTick>
 80031b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fe4e 	bl	8000e58 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e10e      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ca:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80031d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031da:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <HAL_RCC_OscConfig+0x774>)
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	430a      	orrs	r2, r1
 80031ea:	4931      	ldr	r1, [pc, #196]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	628b      	str	r3, [r1, #40]	; 0x28
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	3b01      	subs	r3, #1
 80031f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	3b01      	subs	r3, #1
 8003200:	025b      	lsls	r3, r3, #9
 8003202:	b29b      	uxth	r3, r3
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	3b01      	subs	r3, #1
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	3b01      	subs	r3, #1
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003220:	4923      	ldr	r1, [pc, #140]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_RCC_OscConfig+0x778>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800323e:	00d2      	lsls	r2, r2, #3
 8003240:	491b      	ldr	r1, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003242:	4313      	orrs	r3, r2
 8003244:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	f023 020c 	bic.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4917      	ldr	r1, [pc, #92]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f023 0202 	bic.w	r2, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003266:	4313      	orrs	r3, r2
 8003268:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a04      	ldr	r2, [pc, #16]	; (80032b0 <HAL_RCC_OscConfig+0x76c>)
 80032a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd fdd7 	bl	8000e58 <HAL_GetTick>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ac:	e011      	b.n	80032d2 <HAL_RCC_OscConfig+0x78e>
 80032ae:	bf00      	nop
 80032b0:	58024400 	.word	0x58024400
 80032b4:	58024800 	.word	0x58024800
 80032b8:	fffffc0c 	.word	0xfffffc0c
 80032bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd fdca 	bl	8000e58 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e08a      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x77c>
 80032de:	e082      	b.n	80033e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80032e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fdb4 	bl	8000e58 <HAL_GetTick>
 80032f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fd fdb0 	bl	8000e58 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e070      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003306:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x7b0>
 8003312:	e068      	b.n	80033e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800331a:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b01      	cmp	r3, #1
 8003326:	d031      	beq.n	800338c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f003 0203 	and.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d12a      	bne.n	800338c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d122      	bne.n	800338c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d11a      	bne.n	800338c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0a5b      	lsrs	r3, r3, #9
 800335a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d111      	bne.n	800338c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d108      	bne.n	800338c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	0e1b      	lsrs	r3, r3, #24
 800337e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e02b      	b.n	80033e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003390:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800339a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d01f      	beq.n	80033e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	4a11      	ldr	r2, [pc, #68]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033b2:	f7fd fd51 	bl	8000e58 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033b8:	bf00      	nop
 80033ba:	f7fd fd4d 	bl	8000e58 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d0f9      	beq.n	80033ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_OscConfig+0x8b0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033d2:	00d2      	lsls	r2, r2, #3
 80033d4:	4906      	ldr	r1, [pc, #24]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <HAL_RCC_OscConfig+0x8ac>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3730      	adds	r7, #48	; 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	58024400 	.word	0x58024400
 80033f4:	ffff0007 	.word	0xffff0007

080033f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e19c      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b8a      	ldr	r3, [pc, #552]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d910      	bls.n	800343c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b87      	ldr	r3, [pc, #540]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 020f 	bic.w	r2, r3, #15
 8003422:	4985      	ldr	r1, [pc, #532]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e184      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	4b7b      	ldr	r3, [pc, #492]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003454:	429a      	cmp	r2, r3
 8003456:	d908      	bls.n	800346a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003458:	4b78      	ldr	r3, [pc, #480]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	4975      	ldr	r1, [pc, #468]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003466:	4313      	orrs	r3, r2
 8003468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d010      	beq.n	8003498 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	4b70      	ldr	r3, [pc, #448]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003482:	429a      	cmp	r2, r3
 8003484:	d908      	bls.n	8003498 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003486:	4b6d      	ldr	r3, [pc, #436]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	496a      	ldr	r1, [pc, #424]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	4b64      	ldr	r3, [pc, #400]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d908      	bls.n	80034c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034b4:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	495e      	ldr	r1, [pc, #376]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	4b59      	ldr	r3, [pc, #356]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034de:	429a      	cmp	r2, r3
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034e2:	4b56      	ldr	r3, [pc, #344]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4953      	ldr	r1, [pc, #332]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4b4d      	ldr	r3, [pc, #308]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	429a      	cmp	r2, r3
 800350e:	d908      	bls.n	8003522 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003510:	4b4a      	ldr	r3, [pc, #296]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f023 020f 	bic.w	r2, r3, #15
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4947      	ldr	r1, [pc, #284]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800351e:	4313      	orrs	r3, r2
 8003520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d055      	beq.n	80035da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4940      	ldr	r1, [pc, #256]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800353c:	4313      	orrs	r3, r2
 800353e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d107      	bne.n	8003558 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003548:	4b3c      	ldr	r3, [pc, #240]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d121      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0f6      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d107      	bne.n	8003570 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003560:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d115      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0ea      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0de      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003588:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d6      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f023 0207 	bic.w	r2, r3, #7
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4925      	ldr	r1, [pc, #148]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035aa:	f7fd fc55 	bl	8000e58 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b2:	f7fd fc51 	bl	8000e58 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0be      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c8:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d1eb      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d208      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f023 020f 	bic.w	r2, r3, #15
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	490e      	ldr	r1, [pc, #56]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003604:	4313      	orrs	r3, r2
 8003606:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d214      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	4906      	ldr	r1, [pc, #24]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e086      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
 8003638:	52002000 	.word	0x52002000
 800363c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003658:	429a      	cmp	r2, r3
 800365a:	d208      	bcs.n	800366e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4939      	ldr	r1, [pc, #228]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 800366a:	4313      	orrs	r3, r2
 800366c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d010      	beq.n	800369c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003686:	429a      	cmp	r2, r3
 8003688:	d208      	bcs.n	800369c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	492e      	ldr	r1, [pc, #184]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d208      	bcs.n	80036ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	4922      	ldr	r1, [pc, #136]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d208      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4917      	ldr	r1, [pc, #92]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036f8:	f000 f834 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_RCC_ClockConfig+0x35c>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <HAL_RCC_ClockConfig+0x35c>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_RCC_ClockConfig+0x360>)
 800372e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x364>)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x368>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fb42 	bl	8000dc4 <HAL_InitTick>
 8003740:	4603      	mov	r3, r0
 8003742:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
 8003754:	08009c78 	.word	0x08009c78
 8003758:	24000004 	.word	0x24000004
 800375c:	24000000 	.word	0x24000000
 8003760:	24000008 	.word	0x24000008

08003764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376a:	4bb3      	ldr	r3, [pc, #716]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003772:	2b18      	cmp	r3, #24
 8003774:	f200 8155 	bhi.w	8003a22 <HAL_RCC_GetSysClockFreq+0x2be>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <HAL_RCC_GetSysClockFreq+0x1c>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037e5 	.word	0x080037e5
 8003784:	08003a23 	.word	0x08003a23
 8003788:	08003a23 	.word	0x08003a23
 800378c:	08003a23 	.word	0x08003a23
 8003790:	08003a23 	.word	0x08003a23
 8003794:	08003a23 	.word	0x08003a23
 8003798:	08003a23 	.word	0x08003a23
 800379c:	08003a23 	.word	0x08003a23
 80037a0:	0800380b 	.word	0x0800380b
 80037a4:	08003a23 	.word	0x08003a23
 80037a8:	08003a23 	.word	0x08003a23
 80037ac:	08003a23 	.word	0x08003a23
 80037b0:	08003a23 	.word	0x08003a23
 80037b4:	08003a23 	.word	0x08003a23
 80037b8:	08003a23 	.word	0x08003a23
 80037bc:	08003a23 	.word	0x08003a23
 80037c0:	08003811 	.word	0x08003811
 80037c4:	08003a23 	.word	0x08003a23
 80037c8:	08003a23 	.word	0x08003a23
 80037cc:	08003a23 	.word	0x08003a23
 80037d0:	08003a23 	.word	0x08003a23
 80037d4:	08003a23 	.word	0x08003a23
 80037d8:	08003a23 	.word	0x08003a23
 80037dc:	08003a23 	.word	0x08003a23
 80037e0:	08003817 	.word	0x08003817
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e4:	4b94      	ldr	r3, [pc, #592]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037f0:	4b91      	ldr	r3, [pc, #580]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	08db      	lsrs	r3, r3, #3
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	4a90      	ldr	r2, [pc, #576]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003802:	e111      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003804:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003806:	61bb      	str	r3, [r7, #24]
      break;
 8003808:	e10e      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800380c:	61bb      	str	r3, [r7, #24]
      break;
 800380e:	e10b      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003810:	4b8c      	ldr	r3, [pc, #560]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003812:	61bb      	str	r3, [r7, #24]
      break;
 8003814:	e108      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003816:	4b88      	ldr	r3, [pc, #544]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003820:	4b85      	ldr	r3, [pc, #532]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800382c:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003836:	4b80      	ldr	r3, [pc, #512]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	08db      	lsrs	r3, r3, #3
 800383c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80e1 	beq.w	8003a1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b02      	cmp	r3, #2
 800385e:	f000 8083 	beq.w	8003968 <HAL_RCC_GetSysClockFreq+0x204>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b02      	cmp	r3, #2
 8003866:	f200 80a1 	bhi.w	80039ac <HAL_RCC_GetSysClockFreq+0x248>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x114>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d056      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003876:	e099      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003878:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d02d      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003884:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	4a6b      	ldr	r2, [pc, #428]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
 8003894:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ae:	4b62      	ldr	r3, [pc, #392]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038be:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80038de:	e087      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80038ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003902:	ed97 6a02 	vldr	s12, [r7, #8]
 8003906:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800390a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003922:	e065      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003936:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003946:	ed97 6a02 	vldr	s12, [r7, #8]
 800394a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800394e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003966:	e043      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003972:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397a:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398a:	ed97 6a02 	vldr	s12, [r7, #8]
 800398e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039aa:	e021      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80039d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	0a5b      	lsrs	r3, r3, #9
 80039f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fa:	3301      	adds	r3, #1
 80039fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a14:	ee17 3a90 	vmov	r3, s15
 8003a18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
      break;
 8003a20:	e002      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a24:	61bb      	str	r3, [r7, #24]
      break;
 8003a26:	bf00      	nop
  }

  return sysclockfreq;
 8003a28:	69bb      	ldr	r3, [r7, #24]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	03d09000 	.word	0x03d09000
 8003a40:	003d0900 	.word	0x003d0900
 8003a44:	017d7840 	.word	0x017d7840
 8003a48:	46000000 	.word	0x46000000
 8003a4c:	4c742400 	.word	0x4c742400
 8003a50:	4a742400 	.word	0x4a742400
 8003a54:	4bbebc20 	.word	0x4bbebc20

08003a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a5e:	f7ff fe81 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490f      	ldr	r1, [pc, #60]	; (8003aac <HAL_RCC_GetHCLKFreq+0x54>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_GetHCLKFreq+0x54>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a96:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	08009c78 	.word	0x08009c78
 8003ab0:	24000004 	.word	0x24000004
 8003ab4:	24000000 	.word	0x24000000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003abc:	f7ff ffcc 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	08009c78 	.word	0x08009c78

08003ae4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae8:	b0ca      	sub	sp, #296	; 0x128
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003b08:	2500      	movs	r5, #0
 8003b0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003b0e:	d049      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b1a:	d02f      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b20:	d828      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b26:	d01a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b2c:	d822      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d007      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b38:	e01c      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3a:	4bb8      	ldr	r3, [pc, #736]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	4ab7      	ldr	r2, [pc, #732]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b46:	e01a      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f002 fb61 	bl	8006218 <RCCEx_PLL2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b62:	3328      	adds	r3, #40	; 0x28
 8003b64:	2102      	movs	r1, #2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 fc08 	bl	800637c <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b72:	e004      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b86:	4ba5      	ldr	r3, [pc, #660]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	4aa1      	ldr	r2, [pc, #644]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6513      	str	r3, [r2, #80]	; 0x50
 8003b9a:	e003      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003bb0:	f04f 0900 	mov.w	r9, #0
 8003bb4:	ea58 0309 	orrs.w	r3, r8, r9
 8003bb8:	d047      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d82a      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003be1 	.word	0x08003be1
 8003bd0:	08003bef 	.word	0x08003bef
 8003bd4:	08003c05 	.word	0x08003c05
 8003bd8:	08003c23 	.word	0x08003c23
 8003bdc:	08003c23 	.word	0x08003c23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be0:	4b8e      	ldr	r3, [pc, #568]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a8d      	ldr	r2, [pc, #564]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bec:	e01a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 fb0e 	bl	8006218 <RCCEx_PLL2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c02:	e00f      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c08:	3328      	adds	r3, #40	; 0x28
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f002 fbb5 	bl	800637c <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c18:	e004      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c2c:	4b7b      	ldr	r3, [pc, #492]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	f023 0107 	bic.w	r1, r3, #7
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	4a78      	ldr	r2, [pc, #480]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c40:	e003      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003c56:	f04f 0b00 	mov.w	fp, #0
 8003c5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c5e:	d04c      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d030      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c70:	d829      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c72:	2bc0      	cmp	r3, #192	; 0xc0
 8003c74:	d02d      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c76:	2bc0      	cmp	r3, #192	; 0xc0
 8003c78:	d825      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	d018      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d821      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d007      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c8a:	e01c      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a62      	ldr	r2, [pc, #392]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c98:	e01c      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 fab8 	bl	8006218 <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003cae:	e011      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	3328      	adds	r3, #40	; 0x28
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 fb5f 	bl	800637c <RCCEx_PLL3_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cdc:	4b4f      	ldr	r3, [pc, #316]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	4a4c      	ldr	r2, [pc, #304]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6513      	str	r3, [r2, #80]	; 0x50
 8003cf0:	e003      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003d06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003d10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003d14:	460b      	mov	r3, r1
 8003d16:	4313      	orrs	r3, r2
 8003d18:	d053      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d26:	d035      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003d28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d2c:	d82e      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d32:	d031      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003d34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d38:	d828      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d3e:	d01a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d44:	d822      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d4e:	d007      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003d50:	e01c      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d52:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d5e:	e01c      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d64:	3308      	adds	r3, #8
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 fa55 	bl	8006218 <RCCEx_PLL2_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d74:	e011      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	3328      	adds	r3, #40	; 0x28
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fafc 	bl	800637c <RCCEx_PLL3_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d8a:	e006      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003db2:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6593      	str	r3, [r2, #88]	; 0x58
 8003db8:	e003      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003dce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003dd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4313      	orrs	r3, r2
 8003de0:	d056      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dee:	d038      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d831      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003df6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dfa:	d034      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003dfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e00:	d82b      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e06:	d01d      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e0c:	d825      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d006      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e18:	e01f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e1a:	bf00      	nop
 8003e1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4ba2      	ldr	r3, [pc, #648]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4aa1      	ldr	r2, [pc, #644]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e32:	3308      	adds	r3, #8
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f002 f9ee 	bl	8006218 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e42:	e011      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e48:	3328      	adds	r3, #40	; 0x28
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 fa95 	bl	800637c <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e70:	4b8e      	ldr	r3, [pc, #568]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e80:	4a8a      	ldr	r2, [pc, #552]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6593      	str	r3, [r2, #88]	; 0x58
 8003e86:	e003      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ea6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d03a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	2b30      	cmp	r3, #48	; 0x30
 8003eb8:	d01f      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003eba:	2b30      	cmp	r3, #48	; 0x30
 8003ebc:	d819      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d00c      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d815      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d019      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d111      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ece:	4b77      	ldr	r3, [pc, #476]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a76      	ldr	r2, [pc, #472]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003eda:	e011      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f002 f997 	bl	8006218 <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ef0:	e006      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ef8:	e002      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f08:	4b68      	ldr	r3, [pc, #416]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	4a65      	ldr	r2, [pc, #404]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d051      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f50:	d035      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f56:	d82e      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f5c:	d031      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f62:	d828      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f68:	d01a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6e:	d822      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f78:	d007      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f7a:	e01c      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	4a4a      	ldr	r2, [pc, #296]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f88:	e01c      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8e:	3308      	adds	r3, #8
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 f940 	bl	8006218 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f9e:	e011      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa4:	3328      	adds	r3, #40	; 0x28
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f002 f9e7 	bl	800637c <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e006      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fcc:	4b37      	ldr	r3, [pc, #220]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	4a34      	ldr	r2, [pc, #208]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6513      	str	r3, [r2, #80]	; 0x50
 8003fe0:	e003      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004000:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004004:	460b      	mov	r3, r1
 8004006:	4313      	orrs	r3, r2
 8004008:	d056      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004014:	d033      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004016:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800401a:	d82c      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800401c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004020:	d02f      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004026:	d826      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800402c:	d02b      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800402e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004032:	d820      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004038:	d012      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800403a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800403e:	d81a      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d022      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d115      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404e:	3308      	adds	r3, #8
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f002 f8e0 	bl	8006218 <RCCEx_PLL2_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800405e:	e015      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004064:	3328      	adds	r3, #40	; 0x28
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f002 f987 	bl	800637c <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004074:	e00a      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800407c:	e006      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800407e:	bf00      	nop
 8004080:	e004      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004082:	bf00      	nop
 8004084:	e002      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800408a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a2:	4a02      	ldr	r2, [pc, #8]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6513      	str	r3, [r2, #80]	; 0x50
 80040a8:	e006      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80040aa:	bf00      	nop
 80040ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80040c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d055      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e4:	d033      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80040e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ea:	d82c      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d02f      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f6:	d826      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040fc:	d02b      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80040fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004102:	d820      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004108:	d012      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800410a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410e:	d81a      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d022      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004118:	d115      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411e:	3308      	adds	r3, #8
 8004120:	2101      	movs	r1, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f002 f878 	bl	8006218 <RCCEx_PLL2_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800412e:	e015      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004134:	3328      	adds	r3, #40	; 0x28
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f002 f91f 	bl	800637c <RCCEx_PLL3_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004144:	e00a      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800414c:	e006      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800414e:	bf00      	nop
 8004150:	e004      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800415a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004164:	4ba3      	ldr	r3, [pc, #652]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004174:	4a9f      	ldr	r2, [pc, #636]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004176:	430b      	orrs	r3, r1
 8004178:	6593      	str	r3, [r2, #88]	; 0x58
 800417a:	e003      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800419a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d037      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ae:	d00e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b4:	d816      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d018      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041be:	d111      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c0:	4b8c      	ldr	r3, [pc, #560]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	4a8b      	ldr	r2, [pc, #556]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041cc:	e00f      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d2:	3308      	adds	r3, #8
 80041d4:	2101      	movs	r1, #1
 80041d6:	4618      	mov	r0, r3
 80041d8:	f002 f81e 	bl	8006218 <RCCEx_PLL2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80041ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a7b      	ldr	r2, [pc, #492]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004206:	430b      	orrs	r3, r1
 8004208:	6513      	str	r3, [r2, #80]	; 0x50
 800420a:	e003      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800422a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800422e:	460b      	mov	r3, r1
 8004230:	4313      	orrs	r3, r2
 8004232:	d039      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	2b03      	cmp	r3, #3
 800423c:	d81c      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004281 	.word	0x08004281
 8004248:	08004255 	.word	0x08004255
 800424c:	08004263 	.word	0x08004263
 8004250:	08004281 	.word	0x08004281
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004254:	4b67      	ldr	r3, [pc, #412]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	4a66      	ldr	r2, [pc, #408]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004260:	e00f      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	3308      	adds	r3, #8
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f001 ffd4 	bl	8006218 <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004276:	e004      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800428a:	4b5a      	ldr	r3, [pc, #360]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	f023 0103 	bic.w	r1, r3, #3
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	4a56      	ldr	r2, [pc, #344]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429a:	430b      	orrs	r3, r1
 800429c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800429e:	e003      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80042b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f000 809f 	beq.w	8004408 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ca:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a4a      	ldr	r2, [pc, #296]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d6:	f7fc fdbf 	bl	8000e58 <HAL_GetTick>
 80042da:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042de:	e00b      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e0:	f7fc fdba 	bl	8000e58 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b64      	cmp	r3, #100	; 0x64
 80042ee:	d903      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042f6:	e005      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042f8:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ed      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004308:	2b00      	cmp	r3, #0
 800430a:	d179      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800430e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004318:	4053      	eors	r3, r2
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d015      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004322:	4b34      	ldr	r3, [pc, #208]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a30      	ldr	r2, [pc, #192]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004346:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004348:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435a:	d118      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fc fd7c 	bl	8000e58 <HAL_GetTick>
 8004360:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004364:	e00d      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fc fd77 	bl	8000e58 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004370:	1ad2      	subs	r2, r2, r3
 8004372:	f241 3388 	movw	r3, #5000	; 0x1388
 8004376:	429a      	cmp	r2, r3
 8004378:	d903      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004380:	e005      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0eb      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800438e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004392:	2b00      	cmp	r3, #0
 8004394:	d129      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a6:	d10e      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043b8:	091a      	lsrs	r2, r3, #4
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80043bc:	4013      	ands	r3, r2
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6113      	str	r3, [r2, #16]
 80043c4:	e005      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043d0:	6113      	str	r3, [r2, #16]
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e2:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	e00e      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80043f2:	e009      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80043f4:	58024400 	.word	0x58024400
 80043f8:	58024800 	.word	0x58024800
 80043fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f002 0301 	and.w	r3, r2, #1
 8004414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004418:	2300      	movs	r3, #0
 800441a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800441e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	f000 8089 	beq.w	800453c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004430:	2b28      	cmp	r3, #40	; 0x28
 8004432:	d86b      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004515 	.word	0x08004515
 8004440:	0800450d 	.word	0x0800450d
 8004444:	0800450d 	.word	0x0800450d
 8004448:	0800450d 	.word	0x0800450d
 800444c:	0800450d 	.word	0x0800450d
 8004450:	0800450d 	.word	0x0800450d
 8004454:	0800450d 	.word	0x0800450d
 8004458:	0800450d 	.word	0x0800450d
 800445c:	080044e1 	.word	0x080044e1
 8004460:	0800450d 	.word	0x0800450d
 8004464:	0800450d 	.word	0x0800450d
 8004468:	0800450d 	.word	0x0800450d
 800446c:	0800450d 	.word	0x0800450d
 8004470:	0800450d 	.word	0x0800450d
 8004474:	0800450d 	.word	0x0800450d
 8004478:	0800450d 	.word	0x0800450d
 800447c:	080044f7 	.word	0x080044f7
 8004480:	0800450d 	.word	0x0800450d
 8004484:	0800450d 	.word	0x0800450d
 8004488:	0800450d 	.word	0x0800450d
 800448c:	0800450d 	.word	0x0800450d
 8004490:	0800450d 	.word	0x0800450d
 8004494:	0800450d 	.word	0x0800450d
 8004498:	0800450d 	.word	0x0800450d
 800449c:	08004515 	.word	0x08004515
 80044a0:	0800450d 	.word	0x0800450d
 80044a4:	0800450d 	.word	0x0800450d
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	0800450d 	.word	0x0800450d
 80044b0:	0800450d 	.word	0x0800450d
 80044b4:	0800450d 	.word	0x0800450d
 80044b8:	0800450d 	.word	0x0800450d
 80044bc:	08004515 	.word	0x08004515
 80044c0:	0800450d 	.word	0x0800450d
 80044c4:	0800450d 	.word	0x0800450d
 80044c8:	0800450d 	.word	0x0800450d
 80044cc:	0800450d 	.word	0x0800450d
 80044d0:	0800450d 	.word	0x0800450d
 80044d4:	0800450d 	.word	0x0800450d
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	08004515 	.word	0x08004515
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e4:	3308      	adds	r3, #8
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 fe95 	bl	8006218 <RCCEx_PLL2_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044f4:	e00f      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	3328      	adds	r3, #40	; 0x28
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 ff3c 	bl	800637c <RCCEx_PLL3_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800450a:	e004      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800451e:	4bbf      	ldr	r3, [pc, #764]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452c:	4abb      	ldr	r2, [pc, #748]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6553      	str	r3, [r2, #84]	; 0x54
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f002 0302 	and.w	r3, r2, #2
 8004548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004552:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d041      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	2b05      	cmp	r3, #5
 8004564:	d824      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	080045b9 	.word	0x080045b9
 8004570:	08004585 	.word	0x08004585
 8004574:	0800459b 	.word	0x0800459b
 8004578:	080045b9 	.word	0x080045b9
 800457c:	080045b9 	.word	0x080045b9
 8004580:	080045b9 	.word	0x080045b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004588:	3308      	adds	r3, #8
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fe43 	bl	8006218 <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004598:	e00f      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	3328      	adds	r3, #40	; 0x28
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 feea 	bl	800637c <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80045b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045c2:	4b96      	ldr	r3, [pc, #600]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	f023 0107 	bic.w	r1, r3, #7
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d0:	4a92      	ldr	r2, [pc, #584]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d2:	430b      	orrs	r3, r1
 80045d4:	6553      	str	r3, [r2, #84]	; 0x54
 80045d6:	e003      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f002 0304 	and.w	r3, r2, #4
 80045ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	d044      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004608:	2b05      	cmp	r3, #5
 800460a:	d825      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004661 	.word	0x08004661
 8004618:	0800462d 	.word	0x0800462d
 800461c:	08004643 	.word	0x08004643
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
 8004628:	08004661 	.word	0x08004661
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	3308      	adds	r3, #8
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f001 fdef 	bl	8006218 <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004640:	e00f      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004646:	3328      	adds	r3, #40	; 0x28
 8004648:	2101      	movs	r1, #1
 800464a:	4618      	mov	r0, r3
 800464c:	f001 fe96 	bl	800637c <RCCEx_PLL3_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004656:	e004      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800465e:	e000      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466a:	4b6c      	ldr	r3, [pc, #432]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	f023 0107 	bic.w	r1, r3, #7
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	4a68      	ldr	r2, [pc, #416]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800467c:	430b      	orrs	r3, r1
 800467e:	6593      	str	r3, [r2, #88]	; 0x58
 8004680:	e003      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f002 0320 	and.w	r3, r2, #32
 8004696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800469a:	2300      	movs	r3, #0
 800469c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d055      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b6:	d033      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80046b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046bc:	d82c      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d02f      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d826      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046ce:	d02b      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80046d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046d4:	d820      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046da:	d012      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80046dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e0:	d81a      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d022      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80046e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ea:	d115      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	3308      	adds	r3, #8
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 fd8f 	bl	8006218 <RCCEx_PLL2_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004700:	e015      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004706:	3328      	adds	r3, #40	; 0x28
 8004708:	2102      	movs	r1, #2
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fe36 	bl	800637c <RCCEx_PLL3_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004716:	e00a      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800471e:	e006      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004720:	bf00      	nop
 8004722:	e004      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004724:	bf00      	nop
 8004726:	e002      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004728:	bf00      	nop
 800472a:	e000      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800472c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a35      	ldr	r2, [pc, #212]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004748:	430b      	orrs	r3, r1
 800474a:	6553      	str	r3, [r2, #84]	; 0x54
 800474c:	e003      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800476c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004770:	460b      	mov	r3, r1
 8004772:	4313      	orrs	r3, r2
 8004774:	d058      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004782:	d033      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004784:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004788:	d82c      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800478a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478e:	d02f      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d826      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004796:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800479a:	d02b      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800479c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a0:	d820      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a6:	d012      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ac:	d81a      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d022      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b6:	d115      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047bc:	3308      	adds	r3, #8
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fd29 	bl	8006218 <RCCEx_PLL2_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047cc:	e015      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d2:	3328      	adds	r3, #40	; 0x28
 80047d4:	2102      	movs	r1, #2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 fdd0 	bl	800637c <RCCEx_PLL3_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047e2:	e00a      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047ea:	e006      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047ec:	bf00      	nop
 80047ee:	e004      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10e      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004812:	4a02      	ldr	r2, [pc, #8]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004814:	430b      	orrs	r3, r1
 8004816:	6593      	str	r3, [r2, #88]	; 0x58
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800481a:	bf00      	nop
 800481c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800483e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004842:	460b      	mov	r3, r1
 8004844:	4313      	orrs	r3, r2
 8004846:	d055      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004850:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004854:	d033      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004856:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800485a:	d82c      	bhi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800485c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004860:	d02f      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004866:	d826      	bhi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004868:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800486c:	d02b      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800486e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004872:	d820      	bhi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004878:	d012      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800487a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487e:	d81a      	bhi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d022      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004888:	d115      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488e:	3308      	adds	r3, #8
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f001 fcc0 	bl	8006218 <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800489e:	e015      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	3328      	adds	r3, #40	; 0x28
 80048a6:	2102      	movs	r1, #2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 fd67 	bl	800637c <RCCEx_PLL3_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048b4:	e00a      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048bc:	e006      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048be:	bf00      	nop
 80048c0:	e004      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80048ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10b      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048d4:	4ba1      	ldr	r3, [pc, #644]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048e4:	4a9d      	ldr	r2, [pc, #628]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f002 0308 	and.w	r3, r2, #8
 8004900:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800490a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d01e      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d10c      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	3328      	adds	r3, #40	; 0x28
 8004928:	2102      	movs	r1, #2
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fd26 	bl	800637c <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800493c:	4b87      	ldr	r3, [pc, #540]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800493e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004940:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494c:	4a83      	ldr	r2, [pc, #524]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800494e:	430b      	orrs	r3, r1
 8004950:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	f002 0310 	and.w	r3, r2, #16
 800495e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004962:	2300      	movs	r3, #0
 8004964:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004968:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800496c:	460b      	mov	r3, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	d01e      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d10c      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004984:	3328      	adds	r3, #40	; 0x28
 8004986:	2102      	movs	r1, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f001 fcf7 	bl	800637c <RCCEx_PLL3_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800499a:	4b70      	ldr	r3, [pc, #448]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049aa:	4a6c      	ldr	r2, [pc, #432]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80049bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80049ca:	460b      	mov	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	d03e      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049dc:	d022      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80049de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e2:	d81b      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ec:	d00b      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80049ee:	e015      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f4:	3308      	adds	r3, #8
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fc0d 	bl	8006218 <RCCEx_PLL2_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a04:	e00f      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0a:	3328      	adds	r3, #40	; 0x28
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fcb4 	bl	800637c <RCCEx_PLL3_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a1a:	e004      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a22:	e000      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a2e:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a3e:	4a47      	ldr	r2, [pc, #284]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6593      	str	r3, [r2, #88]	; 0x58
 8004a44:	e003      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004a5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d03b      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a76:	d01f      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a7c:	d818      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a82:	d003      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a88:	d007      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a8a:	e011      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8c:	4b33      	ldr	r3, [pc, #204]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a98:	e00f      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9e:	3328      	adds	r3, #40	; 0x28
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 fc6a 	bl	800637c <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac2:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6553      	str	r3, [r2, #84]	; 0x54
 8004ad8:	e003      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004aee:	673b      	str	r3, [r7, #112]	; 0x70
 8004af0:	2300      	movs	r3, #0
 8004af2:	677b      	str	r3, [r7, #116]	; 0x74
 8004af4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d034      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d007      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004b0e:	e011      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b1c:	e00e      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b22:	3308      	adds	r3, #8
 8004b24:	2102      	movs	r1, #2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 fb76 	bl	8006218 <RCCEx_PLL2_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b32:	e003      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	4a02      	ldr	r2, [pc, #8]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b58:	e006      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004b5a:	bf00      	nop
 8004b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b76:	2300      	movs	r3, #0
 8004b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d00c      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b88:	3328      	adds	r3, #40	; 0x28
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 fbf5 	bl	800637c <RCCEx_PLL3_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004baa:	663b      	str	r3, [r7, #96]	; 0x60
 8004bac:	2300      	movs	r3, #0
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
 8004bb0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	d038      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc6:	d018      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bcc:	d811      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd2:	d014      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd8:	d80b      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d011      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be4:	4bc3      	ldr	r3, [pc, #780]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	4ac2      	ldr	r2, [pc, #776]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bf0:	e008      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bf8:	e004      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e002      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e000      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c0c:	4bb9      	ldr	r3, [pc, #740]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1c:	4ab5      	ldr	r2, [pc, #724]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	6553      	str	r3, [r2, #84]	; 0x54
 8004c22:	e003      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004c38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c48:	4baa      	ldr	r3, [pc, #680]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	4aa7      	ldr	r2, [pc, #668]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004c68:	653b      	str	r3, [r7, #80]	; 0x50
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004c72:	460b      	mov	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c78:	4b9e      	ldr	r3, [pc, #632]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c88:	4a9a      	ldr	r2, [pc, #616]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004caa:	4b92      	ldr	r3, [pc, #584]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb8:	4a8e      	ldr	r2, [pc, #568]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004cca:	643b      	str	r3, [r7, #64]	; 0x40
 8004ccc:	2300      	movs	r3, #0
 8004cce:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d00e      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cda:	4b86      	ldr	r3, [pc, #536]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	4a85      	ldr	r2, [pc, #532]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ce4:	6113      	str	r3, [r2, #16]
 8004ce6:	4b83      	ldr	r3, [pc, #524]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce8:	6919      	ldr	r1, [r3, #16]
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004cf2:	4a80      	ldr	r2, [pc, #512]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d06:	2300      	movs	r3, #0
 8004d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d14:	4b77      	ldr	r3, [pc, #476]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	4a74      	ldr	r2, [pc, #464]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d44:	4b6b      	ldr	r3, [pc, #428]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d54:	4a67      	ldr	r2, [pc, #412]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	2100      	movs	r1, #0
 8004d64:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d011      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 fa4a 	bl	8006218 <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	2100      	movs	r1, #0
 8004da4:	6239      	str	r1, [r7, #32]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004db0:	460b      	mov	r3, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	d011      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	3308      	adds	r3, #8
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 fa2a 	bl	8006218 <RCCEx_PLL2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	2100      	movs	r1, #0
 8004de4:	61b9      	str	r1, [r7, #24]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004df0:	460b      	mov	r3, r1
 8004df2:	4313      	orrs	r3, r2
 8004df4:	d011      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 fa0a 	bl	8006218 <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	2100      	movs	r1, #0
 8004e24:	6139      	str	r1, [r7, #16]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e30:	460b      	mov	r3, r1
 8004e32:	4313      	orrs	r3, r2
 8004e34:	d011      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e3a:	3328      	adds	r3, #40	; 0x28
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fa9c 	bl	800637c <RCCEx_PLL3_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	2100      	movs	r1, #0
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d011      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7a:	3328      	adds	r3, #40	; 0x28
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fa7c 	bl	800637c <RCCEx_PLL3_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	d011      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eba:	3328      	adds	r3, #40	; 0x28
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 fa5c 	bl	800637c <RCCEx_PLL3_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004eda:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef4:	58024400 	.word	0x58024400

08004ef8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b090      	sub	sp, #64	; 0x40
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f06:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	f040 8094 	bne.w	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004f10:	4b9e      	ldr	r3, [pc, #632]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	f200 8087 	bhi.w	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f3d 	.word	0x08004f3d
 8004f2c:	08004f65 	.word	0x08004f65
 8004f30:	08004f8d 	.word	0x08004f8d
 8004f34:	08005029 	.word	0x08005029
 8004f38:	08004fb5 	.word	0x08004fb5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f3c:	4b93      	ldr	r3, [pc, #588]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f48:	d108      	bne.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 f810 	bl	8005f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f58:	f000 bd45 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f60:	f000 bd41 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f64:	4b89      	ldr	r3, [pc, #548]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f70:	d108      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f72:	f107 0318 	add.w	r3, r7, #24
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fd54 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f80:	f000 bd31 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f88:	f000 bd2d 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f8c:	4b7f      	ldr	r3, [pc, #508]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f98:	d108      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f9a:	f107 030c 	add.w	r3, r7, #12
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fe94 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fa8:	f000 bd1d 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb0:	f000 bd19 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fb4:	4b75      	ldr	r3, [pc, #468]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fbe:	4b73      	ldr	r3, [pc, #460]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fd0:	4b6e      	ldr	r3, [pc, #440]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	4a6d      	ldr	r2, [pc, #436]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe2:	e01f      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fe4:	4b69      	ldr	r3, [pc, #420]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff0:	d106      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ff8:	d102      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004ffa:	4b66      	ldr	r3, [pc, #408]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffe:	e011      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005000:	4b62      	ldr	r3, [pc, #392]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800500c:	d106      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005014:	d102      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005016:	4b60      	ldr	r3, [pc, #384]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501a:	e003      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005020:	f000 bce1 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005024:	f000 bcdf 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005028:	4b5c      	ldr	r3, [pc, #368]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800502c:	f000 bcdb 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005034:	f000 bcd7 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800503c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005040:	430b      	orrs	r3, r1
 8005042:	f040 80ad 	bne.w	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005046:	4b51      	ldr	r3, [pc, #324]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800504e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	d056      	beq.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	f200 8090 	bhi.w	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	2bc0      	cmp	r3, #192	; 0xc0
 8005066:	f000 8088 	beq.w	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2bc0      	cmp	r3, #192	; 0xc0
 800506e:	f200 8088 	bhi.w	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	2b80      	cmp	r3, #128	; 0x80
 8005076:	d032      	beq.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	f200 8081 	bhi.w	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d014      	beq.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800508c:	e079      	b.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800509a:	d108      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800509c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 ff67 	bl	8005f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050aa:	f000 bc9c 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050b2:	f000 bc98 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050b6:	4b35      	ldr	r3, [pc, #212]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c2:	d108      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c4:	f107 0318 	add.w	r3, r7, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fcab 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050d2:	f000 bc88 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050da:	f000 bc84 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050de:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ea:	d108      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ec:	f107 030c 	add.w	r3, r7, #12
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fdeb 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050fa:	f000 bc74 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005102:	f000 bc70 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005106:	4b21      	ldr	r3, [pc, #132]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800510e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d10c      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	08db      	lsrs	r3, r3, #3
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	4a18      	ldr	r2, [pc, #96]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800512e:	fa22 f303 	lsr.w	r3, r2, r3
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	e01f      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005142:	d106      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514a:	d102      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800514c:	4b11      	ldr	r3, [pc, #68]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005150:	e011      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800515e:	d106      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005166:	d102      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005172:	f000 bc38 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005176:	f000 bc36 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800517a:	4b08      	ldr	r3, [pc, #32]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800517e:	f000 bc32 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005186:	f000 bc2e 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800518a:	bf00      	nop
 800518c:	58024400 	.word	0x58024400
 8005190:	03d09000 	.word	0x03d09000
 8005194:	003d0900 	.word	0x003d0900
 8005198:	017d7840 	.word	0x017d7840
 800519c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80051a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80051a8:	430b      	orrs	r3, r1
 80051aa:	f040 809c 	bne.w	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80051ae:	4b9e      	ldr	r3, [pc, #632]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051be:	d054      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051c6:	f200 808b 	bhi.w	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051d0:	f000 8083 	beq.w	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051da:	f200 8081 	bhi.w	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e4:	d02f      	beq.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ec:	d878      	bhi.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051fa:	d012      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80051fc:	e070      	b.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051fe:	4b8a      	ldr	r3, [pc, #552]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800520a:	d107      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800520c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005210:	4618      	mov	r0, r3
 8005212:	f000 feaf 	bl	8005f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800521a:	e3e4      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005220:	e3e1      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005222:	4b81      	ldr	r3, [pc, #516]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800522a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800522e:	d107      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005230:	f107 0318 	add.w	r3, r7, #24
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fbf5 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800523e:	e3d2      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005244:	e3cf      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005246:	4b78      	ldr	r3, [pc, #480]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005252:	d107      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fd37 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005262:	e3c0      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005268:	e3bd      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800526a:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005272:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005274:	4b6c      	ldr	r3, [pc, #432]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b04      	cmp	r3, #4
 800527e:	d10c      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005286:	4b68      	ldr	r3, [pc, #416]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	08db      	lsrs	r3, r3, #3
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	4a66      	ldr	r2, [pc, #408]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005292:	fa22 f303 	lsr.w	r3, r2, r3
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005298:	e01e      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800529a:	4b63      	ldr	r3, [pc, #396]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a6:	d106      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ae:	d102      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052b0:	4b5f      	ldr	r3, [pc, #380]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b4:	e010      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052b6:	4b5c      	ldr	r3, [pc, #368]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c2:	d106      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ca:	d102      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80052cc:	4b59      	ldr	r3, [pc, #356]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d0:	e002      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80052d6:	e386      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80052d8:	e385      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80052da:	4b57      	ldr	r3, [pc, #348]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052de:	e382      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052e4:	e37f      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80052e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ea:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80052ee:	430b      	orrs	r3, r1
 80052f0:	f040 80a7 	bne.w	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80052f4:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005304:	d055      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800530c:	f200 8096 	bhi.w	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005316:	f000 8084 	beq.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005320:	f200 808c 	bhi.w	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800532a:	d030      	beq.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005332:	f200 8083 	bhi.w	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005342:	d012      	beq.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005344:	e07a      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005346:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005352:	d107      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fe0b 	bl	8005f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005362:	e340      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005368:	e33d      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005376:	d107      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005378:	f107 0318 	add.w	r3, r7, #24
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fb51 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005386:	e32e      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800538c:	e32b      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800538e:	4b26      	ldr	r3, [pc, #152]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800539a:	d107      	bne.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fc93 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053aa:	e31c      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053b0:	e319      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053b2:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053bc:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d10c      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	08db      	lsrs	r3, r3, #3
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	4a14      	ldr	r2, [pc, #80]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80053da:	fa22 f303 	lsr.w	r3, r2, r3
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e0:	e01e      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053e2:	4b11      	ldr	r3, [pc, #68]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ee:	d106      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f6:	d102      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fc:	e010      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540a:	d106      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005412:	d102      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005418:	e002      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800541e:	e2e2      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005420:	e2e1      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005426:	e2de      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005428:	58024400 	.word	0x58024400
 800542c:	03d09000 	.word	0x03d09000
 8005430:	003d0900 	.word	0x003d0900
 8005434:	017d7840 	.word	0x017d7840
 8005438:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005440:	e2d1      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005446:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800544a:	430b      	orrs	r3, r1
 800544c:	f040 809c 	bne.w	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005450:	4b93      	ldr	r3, [pc, #588]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005454:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005460:	d054      	beq.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005468:	f200 808b 	bhi.w	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005472:	f000 8083 	beq.w	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800547c:	f200 8081 	bhi.w	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005486:	d02f      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548e:	d878      	bhi.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549c:	d012      	beq.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800549e:	e070      	b.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054a0:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ac:	d107      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fd5e 	bl	8005f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054bc:	e293      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c2:	e290      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054c4:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d0:	d107      	bne.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d2:	f107 0318 	add.w	r3, r7, #24
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 faa4 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054e0:	e281      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054e6:	e27e      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054e8:	4b6d      	ldr	r3, [pc, #436]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f4:	d107      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fbe6 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005504:	e26f      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800550a:	e26c      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800550c:	4b64      	ldr	r3, [pc, #400]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005514:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005516:	4b62      	ldr	r3, [pc, #392]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b04      	cmp	r3, #4
 8005520:	d10c      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005528:	4b5d      	ldr	r3, [pc, #372]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	4a5c      	ldr	r2, [pc, #368]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553a:	e01e      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800553c:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005548:	d106      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005550:	d102      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005552:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005556:	e010      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005558:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005564:	d106      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556c:	d102      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800556e:	4b4f      	ldr	r3, [pc, #316]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005572:	e002      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005578:	e235      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800557a:	e234      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800557c:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005580:	e231      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005586:	e22e      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800558c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005590:	430b      	orrs	r3, r1
 8005592:	f040 808f 	bne.w	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005596:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a6:	d06b      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ae:	d874      	bhi.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b6:	d056      	beq.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055be:	d86c      	bhi.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055c6:	d03b      	beq.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ce:	d864      	bhi.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d6:	d021      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055de:	d85c      	bhi.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	d004      	beq.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80055ee:	e054      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe fa62 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 80055f4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055f6:	e1f6      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055f8:	4b29      	ldr	r3, [pc, #164]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005604:	d107      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005606:	f107 0318 	add.w	r3, r7, #24
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fa0a 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005614:	e1e7      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800561a:	e1e4      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800561c:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005628:	d107      	bne.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fb4c 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005638:	e1d5      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563e:	e1d2      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005640:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b04      	cmp	r3, #4
 800564a:	d109      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	08db      	lsrs	r3, r3, #3
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800565e:	e1c2      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005664:	e1bf      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005666:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005672:	d102      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005674:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005678:	e1b5      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800567e:	e1b2      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568c:	d102      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800568e:	4b07      	ldr	r3, [pc, #28]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005692:	e1a8      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005698:	e1a5      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800569e:	e1a2      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80056a0:	58024400 	.word	0x58024400
 80056a4:	03d09000 	.word	0x03d09000
 80056a8:	003d0900 	.word	0x003d0900
 80056ac:	017d7840 	.word	0x017d7840
 80056b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80056b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80056bc:	430b      	orrs	r3, r1
 80056be:	d173      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80056c0:	4b9c      	ldr	r3, [pc, #624]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056d0:	d02f      	beq.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056d8:	d863      	bhi.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e6:	d012      	beq.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80056e8:	e05b      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056ea:	4b92      	ldr	r3, [pc, #584]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f6:	d107      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f991 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005706:	e16e      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800570c:	e16b      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800570e:	4b89      	ldr	r3, [pc, #548]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800571a:	d107      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fad3 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800572a:	e15c      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005730:	e159      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005732:	4b80      	ldr	r3, [pc, #512]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800573a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800573c:	4b7d      	ldr	r3, [pc, #500]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b04      	cmp	r3, #4
 8005746:	d10c      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800574e:	4b79      	ldr	r3, [pc, #484]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	08db      	lsrs	r3, r3, #3
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	4a77      	ldr	r2, [pc, #476]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005760:	e01e      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005762:	4b74      	ldr	r3, [pc, #464]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576e:	d106      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005776:	d102      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005778:	4b70      	ldr	r3, [pc, #448]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800577c:	e010      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800577e:	4b6d      	ldr	r3, [pc, #436]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800578a:	d106      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005792:	d102      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005794:	4b6a      	ldr	r3, [pc, #424]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005798:	e002      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800579e:	e122      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80057a0:	e121      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a6:	e11e      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80057a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ac:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80057b0:	430b      	orrs	r3, r1
 80057b2:	d133      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80057b4:	4b5f      	ldr	r3, [pc, #380]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ca:	d012      	beq.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80057cc:	e023      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057ce:	4b59      	ldr	r3, [pc, #356]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057da:	d107      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fbc7 	bl	8005f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ea:	e0fc      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f0:	e0f9      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057f2:	4b50      	ldr	r3, [pc, #320]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057fe:	d107      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005800:	f107 0318 	add.w	r3, r7, #24
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f90d 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800580e:	e0ea      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005814:	e0e7      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800581a:	e0e4      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800581c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005820:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005824:	430b      	orrs	r3, r1
 8005826:	f040 808d 	bne.w	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800582a:	4b42      	ldr	r3, [pc, #264]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005832:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800583a:	d06b      	beq.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005842:	d874      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d056      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d86c      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800585a:	d03b      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005862:	d864      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800586a:	d021      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005872:	d85c      	bhi.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005880:	d004      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005882:	e054      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005884:	f000 f8b8 	bl	80059f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005888:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800588a:	e0ac      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800588c:	4b29      	ldr	r3, [pc, #164]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005898:	d107      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800589a:	f107 0318 	add.w	r3, r7, #24
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f8c0 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058a8:	e09d      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ae:	e09a      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058b0:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058bc:	d107      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fa02 	bl	8005ccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058cc:	e08b      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d2:	e088      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058d4:	4b17      	ldr	r3, [pc, #92]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d109      	bne.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058e0:	4b14      	ldr	r3, [pc, #80]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	08db      	lsrs	r3, r3, #3
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f2:	e078      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f8:	e075      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005906:	d102      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800590c:	e06b      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005912:	e068      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005920:	d102      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005926:	e05e      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800592c:	e05b      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005932:	e058      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005934:	58024400 	.word	0x58024400
 8005938:	03d09000 	.word	0x03d09000
 800593c:	003d0900 	.word	0x003d0900
 8005940:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005948:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800594c:	430b      	orrs	r3, r1
 800594e:	d148      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005950:	4b27      	ldr	r3, [pc, #156]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005954:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005960:	d02a      	beq.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005968:	d838      	bhi.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005976:	d00d      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005978:	e030      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005986:	d102      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800598c:	e02b      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005992:	e028      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005994:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059a0:	d107      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fae4 	bl	8005f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059b0:	e019      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b6:	e016      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b8:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c4:	d107      	bne.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f82a 	bl	8005a24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059d4:	e007      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059e0:	e001      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3740      	adds	r7, #64	; 0x40
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	58024400 	.word	0x58024400
 80059f4:	017d7840 	.word	0x017d7840

080059f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059fc:	f7fe f82c 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	4904      	ldr	r1, [pc, #16]	; (8005a20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a0e:	5ccb      	ldrb	r3, [r1, r3]
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	58024400 	.word	0x58024400
 8005a20:	08009c78 	.word	0x08009c78

08005a24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a2c:	4ba1      	ldr	r3, [pc, #644]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a36:	4b9f      	ldr	r3, [pc, #636]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	0b1b      	lsrs	r3, r3, #12
 8005a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a42:	4b9c      	ldr	r3, [pc, #624]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a4e:	4b99      	ldr	r3, [pc, #612]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	08db      	lsrs	r3, r3, #3
 8005a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8111 	beq.w	8005c94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	f000 8083 	beq.w	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f200 80a1 	bhi.w	8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d056      	beq.n	8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005a8e:	e099      	b.n	8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a90:	4b88      	ldr	r3, [pc, #544]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02d      	beq.n	8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a9c:	4b85      	ldr	r3, [pc, #532]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	08db      	lsrs	r3, r3, #3
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	4a84      	ldr	r2, [pc, #528]	; (8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	ee07 3a90 	vmov	s15, r3
 8005ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac6:	4b7b      	ldr	r3, [pc, #492]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ada:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005af6:	e087      	b.n	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0a:	4b6a      	ldr	r3, [pc, #424]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b3a:	e065      	b.n	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4e:	4b59      	ldr	r3, [pc, #356]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b7e:	e043      	b.n	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b92:	4b48      	ldr	r3, [pc, #288]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bc2:	e021      	b.n	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c08:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	0a5b      	lsrs	r3, r3, #9
 8005c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2e:	ee17 2a90 	vmov	r2, s15
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c36:	4b1f      	ldr	r3, [pc, #124]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5c:	ee17 2a90 	vmov	r2, s15
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	0e1b      	lsrs	r3, r3, #24
 8005c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c8a:	ee17 2a90 	vmov	r2, s15
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c92:	e008      	b.n	8005ca6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	609a      	str	r2, [r3, #8]
}
 8005ca6:	bf00      	nop
 8005ca8:	3724      	adds	r7, #36	; 0x24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	03d09000 	.word	0x03d09000
 8005cbc:	46000000 	.word	0x46000000
 8005cc0:	4c742400 	.word	0x4c742400
 8005cc4:	4a742400 	.word	0x4a742400
 8005cc8:	4bbebc20 	.word	0x4bbebc20

08005ccc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b089      	sub	sp, #36	; 0x24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cd4:	4ba1      	ldr	r3, [pc, #644]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005cde:	4b9f      	ldr	r3, [pc, #636]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	0d1b      	lsrs	r3, r3, #20
 8005ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005cea:	4b9c      	ldr	r3, [pc, #624]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005cf6:	4b99      	ldr	r3, [pc, #612]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	08db      	lsrs	r3, r3, #3
 8005cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8111 	beq.w	8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	f000 8083 	beq.w	8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	f200 80a1 	bhi.w	8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d056      	beq.n	8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d36:	e099      	b.n	8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d38:	4b88      	ldr	r3, [pc, #544]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02d      	beq.n	8005da0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d44:	4b85      	ldr	r3, [pc, #532]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	08db      	lsrs	r3, r3, #3
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	4a84      	ldr	r2, [pc, #528]	; (8005f60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b7b      	ldr	r3, [pc, #492]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d9e:	e087      	b.n	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b6a      	ldr	r3, [pc, #424]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de2:	e065      	b.n	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b59      	ldr	r3, [pc, #356]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e26:	e043      	b.n	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b48      	ldr	r3, [pc, #288]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e6a:	e021      	b.n	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b37      	ldr	r3, [pc, #220]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005eb0:	4b2a      	ldr	r3, [pc, #168]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	0a5b      	lsrs	r3, r3, #9
 8005eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed6:	ee17 2a90 	vmov	r2, s15
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f04:	ee17 2a90 	vmov	r2, s15
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f0c:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	0e1b      	lsrs	r3, r3, #24
 8005f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f32:	ee17 2a90 	vmov	r2, s15
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f3a:	e008      	b.n	8005f4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	609a      	str	r2, [r3, #8]
}
 8005f4e:	bf00      	nop
 8005f50:	3724      	adds	r7, #36	; 0x24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	03d09000 	.word	0x03d09000
 8005f64:	46000000 	.word	0x46000000
 8005f68:	4c742400 	.word	0x4c742400
 8005f6c:	4a742400 	.word	0x4a742400
 8005f70:	4bbebc20 	.word	0x4bbebc20

08005f74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b089      	sub	sp, #36	; 0x24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f7c:	4ba0      	ldr	r3, [pc, #640]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005f86:	4b9e      	ldr	r3, [pc, #632]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005f92:	4b9b      	ldr	r3, [pc, #620]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f9c:	4b98      	ldr	r3, [pc, #608]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa0:	08db      	lsrs	r3, r3, #3
 8005fa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8111 	beq.w	80061e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	f000 8083 	beq.w	80060ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	f200 80a1 	bhi.w	8006112 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d056      	beq.n	800608a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005fdc:	e099      	b.n	8006112 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fde:	4b88      	ldr	r3, [pc, #544]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d02d      	beq.n	8006046 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fea:	4b85      	ldr	r3, [pc, #532]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	08db      	lsrs	r3, r3, #3
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	4a83      	ldr	r2, [pc, #524]	; (8006204 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006014:	4b7a      	ldr	r3, [pc, #488]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006024:	ed97 6a03 	vldr	s12, [r7, #12]
 8006028:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800602c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006040:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006044:	e087      	b.n	8006156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006050:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800620c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006058:	4b69      	ldr	r3, [pc, #420]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006068:	ed97 6a03 	vldr	s12, [r7, #12]
 800606c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006088:	e065      	b.n	8006156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006094:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006210 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609c:	4b58      	ldr	r3, [pc, #352]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060cc:	e043      	b.n	8006156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006214 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80060dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e0:	4b47      	ldr	r3, [pc, #284]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006110:	e021      	b.n	8006156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800620c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006124:	4b36      	ldr	r3, [pc, #216]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006134:	ed97 6a03 	vldr	s12, [r7, #12]
 8006138:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800613c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006150:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006154:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006156:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	0a5b      	lsrs	r3, r3, #9
 800615c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006170:	edd7 6a07 	vldr	s13, [r7, #28]
 8006174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617c:	ee17 2a90 	vmov	r2, s15
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006184:	4b1e      	ldr	r3, [pc, #120]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800619a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619e:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061aa:	ee17 2a90 	vmov	r2, s15
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80061b2:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	0e1b      	lsrs	r3, r3, #24
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061bc:	ee07 3a90 	vmov	s15, r3
 80061c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d8:	ee17 2a90 	vmov	r2, s15
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80061e0:	e008      	b.n	80061f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	3724      	adds	r7, #36	; 0x24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	58024400 	.word	0x58024400
 8006204:	03d09000 	.word	0x03d09000
 8006208:	46000000 	.word	0x46000000
 800620c:	4c742400 	.word	0x4c742400
 8006210:	4a742400 	.word	0x4a742400
 8006214:	4bbebc20 	.word	0x4bbebc20

08006218 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006226:	4b53      	ldr	r3, [pc, #332]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b03      	cmp	r3, #3
 8006230:	d101      	bne.n	8006236 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e099      	b.n	800636a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006236:	4b4f      	ldr	r3, [pc, #316]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a4e      	ldr	r2, [pc, #312]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800623c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006242:	f7fa fe09 	bl	8000e58 <HAL_GetTick>
 8006246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006248:	e008      	b.n	800625c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800624a:	f7fa fe05 	bl	8000e58 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e086      	b.n	800636a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800625c:	4b45      	ldr	r3, [pc, #276]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f0      	bne.n	800624a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006268:	4b42      	ldr	r3, [pc, #264]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	031b      	lsls	r3, r3, #12
 8006276:	493f      	ldr	r1, [pc, #252]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 8006278:	4313      	orrs	r3, r2
 800627a:	628b      	str	r3, [r1, #40]	; 0x28
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	3b01      	subs	r3, #1
 8006282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	3b01      	subs	r3, #1
 800628c:	025b      	lsls	r3, r3, #9
 800628e:	b29b      	uxth	r3, r3
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	3b01      	subs	r3, #1
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	061b      	lsls	r3, r3, #24
 80062a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062ac:	4931      	ldr	r1, [pc, #196]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80062b2:	4b30      	ldr	r3, [pc, #192]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	492d      	ldr	r1, [pc, #180]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062c4:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	f023 0220 	bic.w	r2, r3, #32
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	4928      	ldr	r1, [pc, #160]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062d6:	4b27      	ldr	r3, [pc, #156]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	4a26      	ldr	r2, [pc, #152]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	f023 0310 	bic.w	r3, r3, #16
 80062e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062e2:	4b24      	ldr	r3, [pc, #144]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e6:	4b24      	ldr	r3, [pc, #144]	; (8006378 <RCCEx_PLL2_Config+0x160>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	69d2      	ldr	r2, [r2, #28]
 80062ee:	00d2      	lsls	r2, r2, #3
 80062f0:	4920      	ldr	r1, [pc, #128]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062f6:	4b1f      	ldr	r3, [pc, #124]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 80062fc:	f043 0310 	orr.w	r3, r3, #16
 8006300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006308:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800630e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006314:	e00f      	b.n	8006336 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d106      	bne.n	800632a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 8006322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006328:	e005      	b.n	8006336 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	4a11      	ldr	r2, [pc, #68]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 8006330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a0e      	ldr	r2, [pc, #56]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800633c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006342:	f7fa fd89 	bl	8000e58 <HAL_GetTick>
 8006346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006348:	e008      	b.n	800635c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800634a:	f7fa fd85 	bl	8000e58 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e006      	b.n	800636a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <RCCEx_PLL2_Config+0x15c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	58024400 	.word	0x58024400
 8006378:	ffff0007 	.word	0xffff0007

0800637c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800638a:	4b53      	ldr	r3, [pc, #332]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b03      	cmp	r3, #3
 8006394:	d101      	bne.n	800639a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e099      	b.n	80064ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800639a:	4b4f      	ldr	r3, [pc, #316]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a4e      	ldr	r2, [pc, #312]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 80063a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a6:	f7fa fd57 	bl	8000e58 <HAL_GetTick>
 80063aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063ac:	e008      	b.n	80063c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063ae:	f7fa fd53 	bl	8000e58 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e086      	b.n	80064ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063c0:	4b45      	ldr	r3, [pc, #276]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f0      	bne.n	80063ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063cc:	4b42      	ldr	r3, [pc, #264]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	051b      	lsls	r3, r3, #20
 80063da:	493f      	ldr	r1, [pc, #252]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	628b      	str	r3, [r1, #40]	; 0x28
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	025b      	lsls	r3, r3, #9
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	3b01      	subs	r3, #1
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006410:	4931      	ldr	r1, [pc, #196]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006416:	4b30      	ldr	r3, [pc, #192]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	492d      	ldr	r1, [pc, #180]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006424:	4313      	orrs	r3, r2
 8006426:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006428:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	4928      	ldr	r1, [pc, #160]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006436:	4313      	orrs	r3, r2
 8006438:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800643a:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006446:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800644a:	4b24      	ldr	r3, [pc, #144]	; (80064dc <RCCEx_PLL3_Config+0x160>)
 800644c:	4013      	ands	r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	69d2      	ldr	r2, [r2, #28]
 8006452:	00d2      	lsls	r2, r2, #3
 8006454:	4920      	ldr	r1, [pc, #128]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006456:	4313      	orrs	r3, r2
 8006458:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800645a:	4b1f      	ldr	r3, [pc, #124]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800646c:	4b1a      	ldr	r3, [pc, #104]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006478:	e00f      	b.n	800649a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d106      	bne.n	800648e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006480:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800648c:	e005      	b.n	800649a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	4a11      	ldr	r2, [pc, #68]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 8006494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006498:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800649a:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a0e      	ldr	r2, [pc, #56]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 80064a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a6:	f7fa fcd7 	bl	8000e58 <HAL_GetTick>
 80064aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064ac:	e008      	b.n	80064c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064ae:	f7fa fcd3 	bl	8000e58 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e006      	b.n	80064ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <RCCEx_PLL3_Config+0x15c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	58024400 	.word	0x58024400
 80064dc:	ffff0007 	.word	0xffff0007

080064e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e10f      	b.n	8006712 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a87      	ldr	r2, [pc, #540]	; (800671c <HAL_SPI_Init+0x23c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00f      	beq.n	8006522 <HAL_SPI_Init+0x42>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a86      	ldr	r2, [pc, #536]	; (8006720 <HAL_SPI_Init+0x240>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00a      	beq.n	8006522 <HAL_SPI_Init+0x42>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a84      	ldr	r2, [pc, #528]	; (8006724 <HAL_SPI_Init+0x244>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d005      	beq.n	8006522 <HAL_SPI_Init+0x42>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d901      	bls.n	8006522 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e0f7      	b.n	8006712 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fbca 	bl	8006cbc <SPI_GetPacketSize>
 8006528:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a7b      	ldr	r2, [pc, #492]	; (800671c <HAL_SPI_Init+0x23c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00c      	beq.n	800654e <HAL_SPI_Init+0x6e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a79      	ldr	r2, [pc, #484]	; (8006720 <HAL_SPI_Init+0x240>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <HAL_SPI_Init+0x6e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a78      	ldr	r2, [pc, #480]	; (8006724 <HAL_SPI_Init+0x244>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d002      	beq.n	800654e <HAL_SPI_Init+0x6e>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b08      	cmp	r3, #8
 800654c:	d811      	bhi.n	8006572 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006552:	4a72      	ldr	r2, [pc, #456]	; (800671c <HAL_SPI_Init+0x23c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d009      	beq.n	800656c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a70      	ldr	r2, [pc, #448]	; (8006720 <HAL_SPI_Init+0x240>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_SPI_Init+0x8c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a6f      	ldr	r2, [pc, #444]	; (8006724 <HAL_SPI_Init+0x244>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d104      	bne.n	8006576 <HAL_SPI_Init+0x96>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b10      	cmp	r3, #16
 8006570:	d901      	bls.n	8006576 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e0cd      	b.n	8006712 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fa f9a6 	bl	80008dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80065b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065bc:	d119      	bne.n	80065f2 <HAL_SPI_Init+0x112>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c6:	d103      	bne.n	80065d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10c      	bne.n	80065f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80065dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e0:	d107      	bne.n	80065f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00f      	beq.n	800661e <HAL_SPI_Init+0x13e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	2b06      	cmp	r3, #6
 8006604:	d90b      	bls.n	800661e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e007      	b.n	800662e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800662c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	431a      	orrs	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006640:	ea42 0103 	orr.w	r1, r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668e:	ea42 0103 	orr.w	r1, r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d113      	bne.n	80066ce <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066cc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0201 	bic.w	r2, r2, #1
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40013000 	.word	0x40013000
 8006720:	40003800 	.word	0x40003800
 8006724:	40003c00 	.word	0x40003c00

08006728 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	; 0x28
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	4613      	mov	r3, r2
 8006736:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3320      	adds	r3, #32
 800673e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_SPI_Transmit+0x2a>
 800674e:	2302      	movs	r3, #2
 8006750:	e1e1      	b.n	8006b16 <HAL_SPI_Transmit+0x3ee>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800675a:	f7fa fb7d 	bl	8000e58 <HAL_GetTick>
 800675e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	d007      	beq.n	800677c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800676c:	2302      	movs	r3, #2
 800676e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006778:	7efb      	ldrb	r3, [r7, #27]
 800677a:	e1cc      	b.n	8006b16 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <HAL_SPI_Transmit+0x60>
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006794:	7efb      	ldrb	r3, [r7, #27]
 8006796:	e1be      	b.n	8006b16 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2203      	movs	r2, #3
 800679c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	88fa      	ldrh	r2, [r7, #6]
 80067b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	88fa      	ldrh	r2, [r7, #6]
 80067ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80067e8:	d108      	bne.n	80067fc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e009      	b.n	8006810 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800680e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4b96      	ldr	r3, [pc, #600]	; (8006a70 <HAL_SPI_Transmit+0x348>)
 8006818:	4013      	ands	r3, r2
 800681a:	88f9      	ldrh	r1, [r7, #6]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	430b      	orrs	r3, r1
 8006822:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800683c:	d107      	bne.n	800684e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2b0f      	cmp	r3, #15
 8006854:	d947      	bls.n	80068e6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006856:	e03f      	b.n	80068d8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b02      	cmp	r3, #2
 8006864:	d114      	bne.n	8006890 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6812      	ldr	r2, [r2, #0]
 8006870:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006876:	1d1a      	adds	r2, r3, #4
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800688e:	e023      	b.n	80068d8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006890:	f7fa fae2 	bl	8000e58 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d803      	bhi.n	80068a8 <HAL_SPI_Transmit+0x180>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d102      	bne.n	80068ae <HAL_SPI_Transmit+0x186>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d114      	bne.n	80068d8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f936 	bl	8006b20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e11e      	b.n	8006b16 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1b9      	bne.n	8006858 <HAL_SPI_Transmit+0x130>
 80068e4:	e0f1      	b.n	8006aca <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b07      	cmp	r3, #7
 80068ec:	f240 80e6 	bls.w	8006abc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80068f0:	e05d      	b.n	80069ae <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d132      	bne.n	8006966 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	d918      	bls.n	800693e <HAL_SPI_Transmit+0x216>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d014      	beq.n	800693e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	1d1a      	adds	r2, r3, #4
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b02      	subs	r3, #2
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800693c:	e037      	b.n	80069ae <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	881a      	ldrh	r2, [r3, #0]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006964:	e023      	b.n	80069ae <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006966:	f7fa fa77 	bl	8000e58 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d803      	bhi.n	800697e <HAL_SPI_Transmit+0x256>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d102      	bne.n	8006984 <HAL_SPI_Transmit+0x25c>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d114      	bne.n	80069ae <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f8cb 	bl	8006b20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006998:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e0b3      	b.n	8006b16 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d19b      	bne.n	80068f2 <HAL_SPI_Transmit+0x1ca>
 80069ba:	e086      	b.n	8006aca <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d154      	bne.n	8006a74 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d918      	bls.n	8006a08 <HAL_SPI_Transmit+0x2e0>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d914      	bls.n	8006a08 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b04      	subs	r3, #4
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a06:	e059      	b.n	8006abc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d917      	bls.n	8006a44 <HAL_SPI_Transmit+0x31c>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d013      	beq.n	8006a44 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a20:	881a      	ldrh	r2, [r3, #0]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2a:	1c9a      	adds	r2, r3, #2
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b02      	subs	r3, #2
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a42:	e03b      	b.n	8006abc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3320      	adds	r3, #32
 8006a4e:	7812      	ldrb	r2, [r2, #0]
 8006a50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a6e:	e025      	b.n	8006abc <HAL_SPI_Transmit+0x394>
 8006a70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a74:	f7fa f9f0 	bl	8000e58 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d803      	bhi.n	8006a8c <HAL_SPI_Transmit+0x364>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d102      	bne.n	8006a92 <HAL_SPI_Transmit+0x36a>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d114      	bne.n	8006abc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f844 	bl	8006b20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e02c      	b.n	8006b16 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f af79 	bne.w	80069bc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2108      	movs	r1, #8
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f8c3 	bl	8006c60 <SPI_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae6:	f043 0220 	orr.w	r2, r3, #32
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f815 	bl	8006b20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8006b14:	7efb      	ldrb	r3, [r7, #27]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0208 	orr.w	r2, r2, #8
 8006b3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0210 	orr.w	r2, r2, #16
 8006b4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0201 	bic.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6919      	ldr	r1, [r3, #16]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b3c      	ldr	r3, [pc, #240]	; (8006c5c <SPI_CloseTransfer+0x13c>)
 8006b6c:	400b      	ands	r3, r1
 8006b6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d014      	beq.n	8006bb6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00f      	beq.n	8006bb6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 0220 	orr.w	r2, r2, #32
 8006bb4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d014      	beq.n	8006bec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00f      	beq.n	8006bec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd2:	f043 0204 	orr.w	r2, r3, #4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00f      	beq.n	8006c16 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfc:	f043 0201 	orr.w	r2, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00f      	beq.n	8006c40 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c26:	f043 0208 	orr.w	r2, r3, #8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	fffffc90 	.word	0xfffffc90

08006c60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c70:	e010      	b.n	8006c94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c72:	f7fa f8f1 	bl	8000e58 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d803      	bhi.n	8006c8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d102      	bne.n	8006c90 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e00f      	b.n	8006cb4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695a      	ldr	r2, [r3, #20]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2301      	moveq	r3, #1
 8006ca6:	2300      	movne	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d0df      	beq.n	8006c72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3307      	adds	r3, #7
 8006cda:	08db      	lsrs	r3, r3, #3
 8006cdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <getInterTemprature>:
#include "inter_temp.h"

float getInterTemprature()
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	ed2d 8b02 	vpush	{d8}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
	uint16_t TS_CAL1 = *(__IO uint16_t *)(0x1FF1E820);
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <getInterTemprature+0x74>)
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	80fb      	strh	r3, [r7, #6]
	uint16_t TS_CAL2 = *(__IO uint16_t *)(0x1FF1E840);
 8006d04:	4b19      	ldr	r3, [pc, #100]	; (8006d6c <getInterTemprature+0x78>)
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	80bb      	strh	r3, [r7, #4]
	HAL_ADC_Start(&hadc3);
 8006d0a:	4819      	ldr	r0, [pc, #100]	; (8006d70 <getInterTemprature+0x7c>)
 8006d0c:	f7fa fc8a 	bl	8001624 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK)
 8006d10:	210a      	movs	r1, #10
 8006d12:	4817      	ldr	r0, [pc, #92]	; (8006d70 <getInterTemprature+0x7c>)
 8006d14:	f7fa fd50 	bl	80017b8 <HAL_ADC_PollForConversion>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d11b      	bne.n	8006d56 <getInterTemprature+0x62>
		return ((110.0f - 30.0f) / (TS_CAL2 - TS_CAL1)) * (HAL_ADC_GetValue(&hadc3) - TS_CAL1) + 30.0f;
 8006d1e:	88ba      	ldrh	r2, [r7, #4]
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d2c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006d74 <getInterTemprature+0x80>
 8006d30:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8006d34:	480e      	ldr	r0, [pc, #56]	; (8006d70 <getInterTemprature+0x7c>)
 8006d36:	f7fa fe33 	bl	80019a0 <HAL_ADC_GetValue>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d48:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006d4c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006d50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d54:	e001      	b.n	8006d5a <getInterTemprature+0x66>
	return HAL_TIMEOUT;
 8006d56:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
}
 8006d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	ecbd 8b02 	vpop	{d8}
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	1ff1e820 	.word	0x1ff1e820
 8006d6c:	1ff1e840 	.word	0x1ff1e840
 8006d70:	240001f4 	.word	0x240001f4
 8006d74:	42a00000 	.word	0x42a00000

08006d78 <OLED_WR_Byte>:
//向SSD1306写入一个字节
//dat:要写入的数据/命令
//cmd:数据/命令标志 0，表示命令；1，表示数据

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{				  
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	460a      	mov	r2, r1
 8006d82:	71fb      	strb	r3, [r7, #7]
 8006d84:	4613      	mov	r3, r2
 8006d86:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 8006d88:	79bb      	ldrb	r3, [r7, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set();//命令/数据标志位置为1，则表示传送的是命令字节
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2108      	movs	r1, #8
 8006d92:	4811      	ldr	r0, [pc, #68]	; (8006dd8 <OLED_WR_Byte+0x60>)
 8006d94:	f7fb fe82 	bl	8002a9c <HAL_GPIO_WritePin>
 8006d98:	e004      	b.n	8006da4 <OLED_WR_Byte+0x2c>
	}
	  
	else
	OLED_DC_Clr();//命令/数据标志位置为0，则表示传送的是数据字节		  
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2108      	movs	r1, #8
 8006d9e:	480e      	ldr	r0, [pc, #56]	; (8006dd8 <OLED_WR_Byte+0x60>)
 8006da0:	f7fb fe7c 	bl	8002a9c <HAL_GPIO_WritePin>
	  OLED_CS_Clr();//片选信号为低，表示选中OLED
 8006da4:	2200      	movs	r2, #0
 8006da6:	2101      	movs	r1, #1
 8006da8:	480b      	ldr	r0, [pc, #44]	; (8006dd8 <OLED_WR_Byte+0x60>)
 8006daa:	f7fb fe77 	bl	8002a9c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1,&dat,1,1000);//oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 8006dae:	1df9      	adds	r1, r7, #7
 8006db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006db4:	2201      	movs	r2, #1
 8006db6:	4809      	ldr	r0, [pc, #36]	; (8006ddc <OLED_WR_Byte+0x64>)
 8006db8:	f7ff fcb6 	bl	8006728 <HAL_SPI_Transmit>
	  OLED_CS_Set();
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4805      	ldr	r0, [pc, #20]	; (8006dd8 <OLED_WR_Byte+0x60>)
 8006dc2:	f7fb fe6b 	bl	8002a9c <HAL_GPIO_WritePin>
	  OLED_DC_Set();	  
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	2108      	movs	r1, #8
 8006dca:	4803      	ldr	r0, [pc, #12]	; (8006dd8 <OLED_WR_Byte+0x60>)
 8006dcc:	f7fb fe66 	bl	8002a9c <HAL_GPIO_WritePin>
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	58020000 	.word	0x58020000
 8006ddc:	24000258 	.word	0x24000258

08006de0 <OLED_Set_Pos>:

	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	460a      	mov	r2, r1
 8006dea:	71fb      	strb	r3, [r7, #7]
 8006dec:	4613      	mov	r3, r2
 8006dee:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8006df0:	79bb      	ldrb	r3, [r7, #6]
 8006df2:	3b50      	subs	r3, #80	; 0x50
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2100      	movs	r1, #0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff ffbd 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte((((x+2)&0xf0)>>4)|0x10,OLED_CMD);
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	3302      	adds	r3, #2
 8006e02:	111b      	asrs	r3, r3, #4
 8006e04:	b25b      	sxtb	r3, r3
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	b25b      	sxtb	r3, r3
 8006e0c:	f043 0310 	orr.w	r3, r3, #16
 8006e10:	b25b      	sxtb	r3, r3
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff ffae 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(((x+2)&0x0f),OLED_CMD); 
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	3302      	adds	r3, #2
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff ffa4 	bl	8006d78 <OLED_WR_Byte>
}    	  
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <OLED_Clear>:
/**
 * @brief 清屏
 * 
 */
void OLED_Clear(void)  
{  
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006e3e:	2300      	movs	r3, #0
 8006e40:	71fb      	strb	r3, [r7, #7]
 8006e42:	e01f      	b.n	8006e84 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	3b50      	subs	r3, #80	; 0x50
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff ff93 	bl	8006d78 <OLED_WR_Byte>
		OLED_WR_Byte (0x02,OLED_CMD);      //设置起始列低地址
 8006e52:	2100      	movs	r1, #0
 8006e54:	2002      	movs	r0, #2
 8006e56:	f7ff ff8f 	bl	8006d78 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置起始列高地址   
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	2010      	movs	r0, #16
 8006e5e:	f7ff ff8b 	bl	8006d78 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8006e62:	2300      	movs	r3, #0
 8006e64:	71bb      	strb	r3, [r7, #6]
 8006e66:	e006      	b.n	8006e76 <OLED_Clear+0x3e>
 8006e68:	2101      	movs	r1, #1
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f7ff ff84 	bl	8006d78 <OLED_WR_Byte>
 8006e70:	79bb      	ldrb	r3, [r7, #6]
 8006e72:	3301      	adds	r3, #1
 8006e74:	71bb      	strb	r3, [r7, #6]
 8006e76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	daf4      	bge.n	8006e68 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	3301      	adds	r3, #1
 8006e82:	71fb      	strb	r3, [r7, #7]
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	2b07      	cmp	r3, #7
 8006e88:	d9dc      	bls.n	8006e44 <OLED_Clear+0xc>
	} //更新显示
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <OLED_ShowChar>:
 * @param x x轴起始坐标
 * @param y y轴起始坐标
 * @param chr 显示的字符
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr)
{      	
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	71fb      	strb	r3, [r7, #7]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	71bb      	strb	r3, [r7, #6]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	717b      	strb	r3, [r7, #5]
	unsigned char c=0,i=0;	
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73bb      	strb	r3, [r7, #14]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值			
 8006eae:	797b      	ldrb	r3, [r7, #5]
 8006eb0:	3b20      	subs	r3, #32
 8006eb2:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8006eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	da04      	bge.n	8006ec6 <OLED_ShowChar+0x32>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	71fb      	strb	r3, [r7, #7]
 8006ec0:	79bb      	ldrb	r3, [r7, #6]
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	71bb      	strb	r3, [r7, #6]
		if(SIZE ==16)
			{
			OLED_Set_Pos(x,y);	
 8006ec6:	79ba      	ldrb	r2, [r7, #6]
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff ff87 	bl	8006de0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
 8006ed6:	e00c      	b.n	8006ef2 <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	011a      	lsls	r2, r3, #4
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	4413      	add	r3, r2
 8006ee0:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <OLED_ShowChar+0xa8>)
 8006ee2:	5cd3      	ldrb	r3, [r2, r3]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff ff46 	bl	8006d78 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	73fb      	strb	r3, [r7, #15]
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b07      	cmp	r3, #7
 8006ef6:	d9ef      	bls.n	8006ed8 <OLED_ShowChar+0x44>
			OLED_Set_Pos(x,y+1);
 8006ef8:	79bb      	ldrb	r3, [r7, #6]
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff ff6c 	bl	8006de0 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
 8006f0c:	e00d      	b.n	8006f2a <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	011a      	lsls	r2, r3, #4
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	4413      	add	r3, r2
 8006f16:	3308      	adds	r3, #8
 8006f18:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <OLED_ShowChar+0xa8>)
 8006f1a:	5cd3      	ldrb	r3, [r2, r3]
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff ff2a 	bl	8006d78 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	3301      	adds	r3, #1
 8006f28:	73fb      	strb	r3, [r7, #15]
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b07      	cmp	r3, #7
 8006f2e:	d9ee      	bls.n	8006f0e <OLED_ShowChar+0x7a>
				OLED_Set_Pos(x,y+1);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	08009c88 	.word	0x08009c88

08006f40 <OLED_ShowString>:
 * @param x x轴起始坐标
 * @param y y轴起始坐标
 * @param chr 单个字符
 */
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	603a      	str	r2, [r7, #0]
 8006f4a:	71fb      	strb	r3, [r7, #7]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	71bb      	strb	r3, [r7, #6]
	unsigned char j=0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8006f54:	e016      	b.n	8006f84 <OLED_ShowString+0x44>
	{		OLED_ShowChar(x,y,chr[j]);
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781a      	ldrb	r2, [r3, #0]
 8006f5e:	79b9      	ldrb	r1, [r7, #6]
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff ff96 	bl	8006e94 <OLED_ShowChar>
			x+=8;
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	2b78      	cmp	r3, #120	; 0x78
 8006f72:	d904      	bls.n	8006f7e <OLED_ShowString+0x3e>
 8006f74:	2300      	movs	r3, #0
 8006f76:	71fb      	strb	r3, [r7, #7]
 8006f78:	79bb      	ldrb	r3, [r7, #6]
 8006f7a:	3302      	adds	r3, #2
 8006f7c:	71bb      	strb	r3, [r7, #6]
			j++;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	3301      	adds	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	4413      	add	r3, r2
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e2      	bne.n	8006f56 <OLED_ShowString+0x16>
	}
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <OLED_Init>:
/**
 * @brief 初始化SSD1306
 * 
 */
void OLED_Init(void)
{ 	
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
	
	OLED_RST_Clr();
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2110      	movs	r1, #16
 8006fa4:	4841      	ldr	r0, [pc, #260]	; (80070ac <OLED_Init+0x110>)
 8006fa6:	f7fb fd79 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8006faa:	20c8      	movs	r0, #200	; 0xc8
 8006fac:	f7f9 ff60 	bl	8000e70 <HAL_Delay>
	OLED_RST_Set(); 
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	2110      	movs	r1, #16
 8006fb4:	483d      	ldr	r0, [pc, #244]	; (80070ac <OLED_Init+0x110>)
 8006fb6:	f7fb fd71 	bl	8002a9c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8006fba:	2100      	movs	r1, #0
 8006fbc:	20ae      	movs	r0, #174	; 0xae
 8006fbe:	f7ff fedb 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//---set low column address
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2002      	movs	r0, #2
 8006fc6:	f7ff fed7 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8006fca:	2100      	movs	r1, #0
 8006fcc:	2010      	movs	r0, #16
 8006fce:	f7ff fed3 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	2040      	movs	r0, #64	; 0x40
 8006fd6:	f7ff fecf 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 8006fda:	2100      	movs	r1, #0
 8006fdc:	2081      	movs	r0, #129	; 0x81
 8006fde:	f7ff fecb 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	20cf      	movs	r0, #207	; 0xcf
 8006fe6:	f7ff fec7 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0Xa0左右反置 0Xa1正常
 8006fea:	2100      	movs	r1, #0
 8006fec:	20a1      	movs	r0, #161	; 0xa1
 8006fee:	f7ff fec3 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0Xc0上下反置 0Xc8正常
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	20c8      	movs	r0, #200	; 0xc8
 8006ff6:	f7ff febf 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	20a6      	movs	r0, #166	; 0xa6
 8006ffe:	f7ff febb 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8007002:	2100      	movs	r1, #0
 8007004:	20a8      	movs	r0, #168	; 0xa8
 8007006:	f7ff feb7 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 800700a:	2100      	movs	r1, #0
 800700c:	203f      	movs	r0, #63	; 0x3f
 800700e:	f7ff feb3 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8007012:	2100      	movs	r1, #0
 8007014:	20d3      	movs	r0, #211	; 0xd3
 8007016:	f7ff feaf 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 800701a:	2100      	movs	r1, #0
 800701c:	2000      	movs	r0, #0
 800701e:	f7ff feab 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8007022:	2100      	movs	r1, #0
 8007024:	20d5      	movs	r0, #213	; 0xd5
 8007026:	f7ff fea7 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 800702a:	2100      	movs	r1, #0
 800702c:	2080      	movs	r0, #128	; 0x80
 800702e:	f7ff fea3 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8007032:	2100      	movs	r1, #0
 8007034:	20d9      	movs	r0, #217	; 0xd9
 8007036:	f7ff fe9f 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800703a:	2100      	movs	r1, #0
 800703c:	20f1      	movs	r0, #241	; 0xf1
 800703e:	f7ff fe9b 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8007042:	2100      	movs	r1, #0
 8007044:	20da      	movs	r0, #218	; 0xda
 8007046:	f7ff fe97 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 800704a:	2100      	movs	r1, #0
 800704c:	2012      	movs	r0, #18
 800704e:	f7ff fe93 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8007052:	2100      	movs	r1, #0
 8007054:	20db      	movs	r0, #219	; 0xdb
 8007056:	f7ff fe8f 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 800705a:	2100      	movs	r1, #0
 800705c:	2040      	movs	r0, #64	; 0x40
 800705e:	f7ff fe8b 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8007062:	2100      	movs	r1, #0
 8007064:	2020      	movs	r0, #32
 8007066:	f7ff fe87 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 800706a:	2100      	movs	r1, #0
 800706c:	2002      	movs	r0, #2
 800706e:	f7ff fe83 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8007072:	2100      	movs	r1, #0
 8007074:	208d      	movs	r0, #141	; 0x8d
 8007076:	f7ff fe7f 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 800707a:	2100      	movs	r1, #0
 800707c:	2014      	movs	r0, #20
 800707e:	f7ff fe7b 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8007082:	2100      	movs	r1, #0
 8007084:	20a4      	movs	r0, #164	; 0xa4
 8007086:	f7ff fe77 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 800708a:	2100      	movs	r1, #0
 800708c:	20a6      	movs	r0, #166	; 0xa6
 800708e:	f7ff fe73 	bl	8006d78 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8007092:	2100      	movs	r1, #0
 8007094:	20af      	movs	r0, #175	; 0xaf
 8007096:	f7ff fe6f 	bl	8006d78 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 800709a:	2100      	movs	r1, #0
 800709c:	20af      	movs	r0, #175	; 0xaf
 800709e:	f7ff fe6b 	bl	8006d78 <OLED_WR_Byte>
	OLED_Clear();
 80070a2:	f7ff fec9 	bl	8006e38 <OLED_Clear>
}  
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	58020000 	.word	0x58020000

080070b0 <__cvt>:
 80070b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b2:	ed2d 8b02 	vpush	{d8}
 80070b6:	eeb0 8b40 	vmov.f64	d8, d0
 80070ba:	b085      	sub	sp, #20
 80070bc:	4617      	mov	r7, r2
 80070be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80070c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80070c2:	ee18 2a90 	vmov	r2, s17
 80070c6:	f025 0520 	bic.w	r5, r5, #32
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	bfb6      	itet	lt
 80070ce:	222d      	movlt	r2, #45	; 0x2d
 80070d0:	2200      	movge	r2, #0
 80070d2:	eeb1 8b40 	vneglt.f64	d8, d0
 80070d6:	2d46      	cmp	r5, #70	; 0x46
 80070d8:	460c      	mov	r4, r1
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	d004      	beq.n	80070e8 <__cvt+0x38>
 80070de:	2d45      	cmp	r5, #69	; 0x45
 80070e0:	d100      	bne.n	80070e4 <__cvt+0x34>
 80070e2:	3401      	adds	r4, #1
 80070e4:	2102      	movs	r1, #2
 80070e6:	e000      	b.n	80070ea <__cvt+0x3a>
 80070e8:	2103      	movs	r1, #3
 80070ea:	ab03      	add	r3, sp, #12
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	ab02      	add	r3, sp, #8
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4622      	mov	r2, r4
 80070f4:	4633      	mov	r3, r6
 80070f6:	eeb0 0b48 	vmov.f64	d0, d8
 80070fa:	f000 fe41 	bl	8007d80 <_dtoa_r>
 80070fe:	2d47      	cmp	r5, #71	; 0x47
 8007100:	d101      	bne.n	8007106 <__cvt+0x56>
 8007102:	07fb      	lsls	r3, r7, #31
 8007104:	d51a      	bpl.n	800713c <__cvt+0x8c>
 8007106:	2d46      	cmp	r5, #70	; 0x46
 8007108:	eb00 0204 	add.w	r2, r0, r4
 800710c:	d10c      	bne.n	8007128 <__cvt+0x78>
 800710e:	7803      	ldrb	r3, [r0, #0]
 8007110:	2b30      	cmp	r3, #48	; 0x30
 8007112:	d107      	bne.n	8007124 <__cvt+0x74>
 8007114:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711c:	bf1c      	itt	ne
 800711e:	f1c4 0401 	rsbne	r4, r4, #1
 8007122:	6034      	strne	r4, [r6, #0]
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	441a      	add	r2, r3
 8007128:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800712c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007130:	bf08      	it	eq
 8007132:	9203      	streq	r2, [sp, #12]
 8007134:	2130      	movs	r1, #48	; 0x30
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	4293      	cmp	r3, r2
 800713a:	d307      	bcc.n	800714c <__cvt+0x9c>
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007140:	1a1b      	subs	r3, r3, r0
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	b005      	add	sp, #20
 8007146:	ecbd 8b02 	vpop	{d8}
 800714a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714c:	1c5c      	adds	r4, r3, #1
 800714e:	9403      	str	r4, [sp, #12]
 8007150:	7019      	strb	r1, [r3, #0]
 8007152:	e7f0      	b.n	8007136 <__cvt+0x86>

08007154 <__exponent>:
 8007154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007156:	4603      	mov	r3, r0
 8007158:	2900      	cmp	r1, #0
 800715a:	bfb8      	it	lt
 800715c:	4249      	neglt	r1, r1
 800715e:	f803 2b02 	strb.w	r2, [r3], #2
 8007162:	bfb4      	ite	lt
 8007164:	222d      	movlt	r2, #45	; 0x2d
 8007166:	222b      	movge	r2, #43	; 0x2b
 8007168:	2909      	cmp	r1, #9
 800716a:	7042      	strb	r2, [r0, #1]
 800716c:	dd2a      	ble.n	80071c4 <__exponent+0x70>
 800716e:	f10d 0207 	add.w	r2, sp, #7
 8007172:	4617      	mov	r7, r2
 8007174:	260a      	movs	r6, #10
 8007176:	4694      	mov	ip, r2
 8007178:	fb91 f5f6 	sdiv	r5, r1, r6
 800717c:	fb06 1415 	mls	r4, r6, r5, r1
 8007180:	3430      	adds	r4, #48	; 0x30
 8007182:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007186:	460c      	mov	r4, r1
 8007188:	2c63      	cmp	r4, #99	; 0x63
 800718a:	f102 32ff 	add.w	r2, r2, #4294967295
 800718e:	4629      	mov	r1, r5
 8007190:	dcf1      	bgt.n	8007176 <__exponent+0x22>
 8007192:	3130      	adds	r1, #48	; 0x30
 8007194:	f1ac 0402 	sub.w	r4, ip, #2
 8007198:	f802 1c01 	strb.w	r1, [r2, #-1]
 800719c:	1c41      	adds	r1, r0, #1
 800719e:	4622      	mov	r2, r4
 80071a0:	42ba      	cmp	r2, r7
 80071a2:	d30a      	bcc.n	80071ba <__exponent+0x66>
 80071a4:	f10d 0209 	add.w	r2, sp, #9
 80071a8:	eba2 020c 	sub.w	r2, r2, ip
 80071ac:	42bc      	cmp	r4, r7
 80071ae:	bf88      	it	hi
 80071b0:	2200      	movhi	r2, #0
 80071b2:	4413      	add	r3, r2
 80071b4:	1a18      	subs	r0, r3, r0
 80071b6:	b003      	add	sp, #12
 80071b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80071be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80071c2:	e7ed      	b.n	80071a0 <__exponent+0x4c>
 80071c4:	2330      	movs	r3, #48	; 0x30
 80071c6:	3130      	adds	r1, #48	; 0x30
 80071c8:	7083      	strb	r3, [r0, #2]
 80071ca:	70c1      	strb	r1, [r0, #3]
 80071cc:	1d03      	adds	r3, r0, #4
 80071ce:	e7f1      	b.n	80071b4 <__exponent+0x60>

080071d0 <_printf_float>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	b08b      	sub	sp, #44	; 0x2c
 80071d6:	460c      	mov	r4, r1
 80071d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80071dc:	4616      	mov	r6, r2
 80071de:	461f      	mov	r7, r3
 80071e0:	4605      	mov	r5, r0
 80071e2:	f000 fccd 	bl	8007b80 <_localeconv_r>
 80071e6:	f8d0 b000 	ldr.w	fp, [r0]
 80071ea:	4658      	mov	r0, fp
 80071ec:	f7f9 f8c8 	bl	8000380 <strlen>
 80071f0:	2300      	movs	r3, #0
 80071f2:	9308      	str	r3, [sp, #32]
 80071f4:	f8d8 3000 	ldr.w	r3, [r8]
 80071f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	3307      	adds	r3, #7
 8007200:	f023 0307 	bic.w	r3, r3, #7
 8007204:	f103 0108 	add.w	r1, r3, #8
 8007208:	f8c8 1000 	str.w	r1, [r8]
 800720c:	ed93 0b00 	vldr	d0, [r3]
 8007210:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007470 <_printf_float+0x2a0>
 8007214:	eeb0 7bc0 	vabs.f64	d7, d0
 8007218:	eeb4 7b46 	vcmp.f64	d7, d6
 800721c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007220:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8007224:	4682      	mov	sl, r0
 8007226:	dd24      	ble.n	8007272 <_printf_float+0xa2>
 8007228:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007230:	d502      	bpl.n	8007238 <_printf_float+0x68>
 8007232:	232d      	movs	r3, #45	; 0x2d
 8007234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007238:	498f      	ldr	r1, [pc, #572]	; (8007478 <_printf_float+0x2a8>)
 800723a:	4b90      	ldr	r3, [pc, #576]	; (800747c <_printf_float+0x2ac>)
 800723c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007240:	bf94      	ite	ls
 8007242:	4688      	movls	r8, r1
 8007244:	4698      	movhi	r8, r3
 8007246:	2303      	movs	r3, #3
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	f022 0204 	bic.w	r2, r2, #4
 800724e:	2300      	movs	r3, #0
 8007250:	6022      	str	r2, [r4, #0]
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	9700      	str	r7, [sp, #0]
 8007256:	4633      	mov	r3, r6
 8007258:	aa09      	add	r2, sp, #36	; 0x24
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f9d1 	bl	8007604 <_printf_common>
 8007262:	3001      	adds	r0, #1
 8007264:	f040 808a 	bne.w	800737c <_printf_float+0x1ac>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	b00b      	add	sp, #44	; 0x2c
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	eeb4 0b40 	vcmp.f64	d0, d0
 8007276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727a:	d709      	bvc.n	8007290 <_printf_float+0xc0>
 800727c:	ee10 3a90 	vmov	r3, s1
 8007280:	2b00      	cmp	r3, #0
 8007282:	bfbc      	itt	lt
 8007284:	232d      	movlt	r3, #45	; 0x2d
 8007286:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800728a:	497d      	ldr	r1, [pc, #500]	; (8007480 <_printf_float+0x2b0>)
 800728c:	4b7d      	ldr	r3, [pc, #500]	; (8007484 <_printf_float+0x2b4>)
 800728e:	e7d5      	b.n	800723c <_printf_float+0x6c>
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007296:	9104      	str	r1, [sp, #16]
 8007298:	1c59      	adds	r1, r3, #1
 800729a:	d13c      	bne.n	8007316 <_printf_float+0x146>
 800729c:	2306      	movs	r3, #6
 800729e:	6063      	str	r3, [r4, #4]
 80072a0:	2300      	movs	r3, #0
 80072a2:	9303      	str	r3, [sp, #12]
 80072a4:	ab08      	add	r3, sp, #32
 80072a6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80072aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072ae:	ab07      	add	r3, sp, #28
 80072b0:	6861      	ldr	r1, [r4, #4]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	6022      	str	r2, [r4, #0]
 80072b6:	f10d 031b 	add.w	r3, sp, #27
 80072ba:	4628      	mov	r0, r5
 80072bc:	f7ff fef8 	bl	80070b0 <__cvt>
 80072c0:	9b04      	ldr	r3, [sp, #16]
 80072c2:	9907      	ldr	r1, [sp, #28]
 80072c4:	2b47      	cmp	r3, #71	; 0x47
 80072c6:	4680      	mov	r8, r0
 80072c8:	d108      	bne.n	80072dc <_printf_float+0x10c>
 80072ca:	1cc8      	adds	r0, r1, #3
 80072cc:	db02      	blt.n	80072d4 <_printf_float+0x104>
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	4299      	cmp	r1, r3
 80072d2:	dd41      	ble.n	8007358 <_printf_float+0x188>
 80072d4:	f1a9 0902 	sub.w	r9, r9, #2
 80072d8:	fa5f f989 	uxtb.w	r9, r9
 80072dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072e0:	d820      	bhi.n	8007324 <_printf_float+0x154>
 80072e2:	3901      	subs	r1, #1
 80072e4:	464a      	mov	r2, r9
 80072e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072ea:	9107      	str	r1, [sp, #28]
 80072ec:	f7ff ff32 	bl	8007154 <__exponent>
 80072f0:	9a08      	ldr	r2, [sp, #32]
 80072f2:	9004      	str	r0, [sp, #16]
 80072f4:	1813      	adds	r3, r2, r0
 80072f6:	2a01      	cmp	r2, #1
 80072f8:	6123      	str	r3, [r4, #16]
 80072fa:	dc02      	bgt.n	8007302 <_printf_float+0x132>
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	07d2      	lsls	r2, r2, #31
 8007300:	d501      	bpl.n	8007306 <_printf_float+0x136>
 8007302:	3301      	adds	r3, #1
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0a2      	beq.n	8007254 <_printf_float+0x84>
 800730e:	232d      	movs	r3, #45	; 0x2d
 8007310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007314:	e79e      	b.n	8007254 <_printf_float+0x84>
 8007316:	9904      	ldr	r1, [sp, #16]
 8007318:	2947      	cmp	r1, #71	; 0x47
 800731a:	d1c1      	bne.n	80072a0 <_printf_float+0xd0>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1bf      	bne.n	80072a0 <_printf_float+0xd0>
 8007320:	2301      	movs	r3, #1
 8007322:	e7bc      	b.n	800729e <_printf_float+0xce>
 8007324:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007328:	d118      	bne.n	800735c <_printf_float+0x18c>
 800732a:	2900      	cmp	r1, #0
 800732c:	6863      	ldr	r3, [r4, #4]
 800732e:	dd0b      	ble.n	8007348 <_printf_float+0x178>
 8007330:	6121      	str	r1, [r4, #16]
 8007332:	b913      	cbnz	r3, 800733a <_printf_float+0x16a>
 8007334:	6822      	ldr	r2, [r4, #0]
 8007336:	07d0      	lsls	r0, r2, #31
 8007338:	d502      	bpl.n	8007340 <_printf_float+0x170>
 800733a:	3301      	adds	r3, #1
 800733c:	440b      	add	r3, r1
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	2300      	movs	r3, #0
 8007342:	65a1      	str	r1, [r4, #88]	; 0x58
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	e7de      	b.n	8007306 <_printf_float+0x136>
 8007348:	b913      	cbnz	r3, 8007350 <_printf_float+0x180>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	07d2      	lsls	r2, r2, #31
 800734e:	d501      	bpl.n	8007354 <_printf_float+0x184>
 8007350:	3302      	adds	r3, #2
 8007352:	e7f4      	b.n	800733e <_printf_float+0x16e>
 8007354:	2301      	movs	r3, #1
 8007356:	e7f2      	b.n	800733e <_printf_float+0x16e>
 8007358:	f04f 0967 	mov.w	r9, #103	; 0x67
 800735c:	9b08      	ldr	r3, [sp, #32]
 800735e:	4299      	cmp	r1, r3
 8007360:	db05      	blt.n	800736e <_printf_float+0x19e>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	6121      	str	r1, [r4, #16]
 8007366:	07d8      	lsls	r0, r3, #31
 8007368:	d5ea      	bpl.n	8007340 <_printf_float+0x170>
 800736a:	1c4b      	adds	r3, r1, #1
 800736c:	e7e7      	b.n	800733e <_printf_float+0x16e>
 800736e:	2900      	cmp	r1, #0
 8007370:	bfd4      	ite	le
 8007372:	f1c1 0202 	rsble	r2, r1, #2
 8007376:	2201      	movgt	r2, #1
 8007378:	4413      	add	r3, r2
 800737a:	e7e0      	b.n	800733e <_printf_float+0x16e>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	055a      	lsls	r2, r3, #21
 8007380:	d407      	bmi.n	8007392 <_printf_float+0x1c2>
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	4642      	mov	r2, r8
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	d12a      	bne.n	80073e6 <_printf_float+0x216>
 8007390:	e76a      	b.n	8007268 <_printf_float+0x98>
 8007392:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007396:	f240 80e0 	bls.w	800755a <_printf_float+0x38a>
 800739a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800739e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a6:	d133      	bne.n	8007410 <_printf_float+0x240>
 80073a8:	4a37      	ldr	r2, [pc, #220]	; (8007488 <_printf_float+0x2b8>)
 80073aa:	2301      	movs	r3, #1
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f af58 	beq.w	8007268 <_printf_float+0x98>
 80073b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80073bc:	429a      	cmp	r2, r3
 80073be:	db02      	blt.n	80073c6 <_printf_float+0x1f6>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07d8      	lsls	r0, r3, #31
 80073c4:	d50f      	bpl.n	80073e6 <_printf_float+0x216>
 80073c6:	4653      	mov	r3, sl
 80073c8:	465a      	mov	r2, fp
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b8      	blx	r7
 80073d0:	3001      	adds	r0, #1
 80073d2:	f43f af49 	beq.w	8007268 <_printf_float+0x98>
 80073d6:	f04f 0800 	mov.w	r8, #0
 80073da:	f104 091a 	add.w	r9, r4, #26
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	4543      	cmp	r3, r8
 80073e4:	dc09      	bgt.n	80073fa <_printf_float+0x22a>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	079b      	lsls	r3, r3, #30
 80073ea:	f100 8106 	bmi.w	80075fa <_printf_float+0x42a>
 80073ee:	68e0      	ldr	r0, [r4, #12]
 80073f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f2:	4298      	cmp	r0, r3
 80073f4:	bfb8      	it	lt
 80073f6:	4618      	movlt	r0, r3
 80073f8:	e738      	b.n	800726c <_printf_float+0x9c>
 80073fa:	2301      	movs	r3, #1
 80073fc:	464a      	mov	r2, r9
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f af2f 	beq.w	8007268 <_printf_float+0x98>
 800740a:	f108 0801 	add.w	r8, r8, #1
 800740e:	e7e6      	b.n	80073de <_printf_float+0x20e>
 8007410:	9b07      	ldr	r3, [sp, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	dc3a      	bgt.n	800748c <_printf_float+0x2bc>
 8007416:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <_printf_float+0x2b8>)
 8007418:	2301      	movs	r3, #1
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f af21 	beq.w	8007268 <_printf_float+0x98>
 8007426:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800742a:	4313      	orrs	r3, r2
 800742c:	d102      	bne.n	8007434 <_printf_float+0x264>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	07d9      	lsls	r1, r3, #31
 8007432:	d5d8      	bpl.n	80073e6 <_printf_float+0x216>
 8007434:	4653      	mov	r3, sl
 8007436:	465a      	mov	r2, fp
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f af12 	beq.w	8007268 <_printf_float+0x98>
 8007444:	f04f 0900 	mov.w	r9, #0
 8007448:	f104 0a1a 	add.w	sl, r4, #26
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	425b      	negs	r3, r3
 8007450:	454b      	cmp	r3, r9
 8007452:	dc01      	bgt.n	8007458 <_printf_float+0x288>
 8007454:	9b08      	ldr	r3, [sp, #32]
 8007456:	e795      	b.n	8007384 <_printf_float+0x1b4>
 8007458:	2301      	movs	r3, #1
 800745a:	4652      	mov	r2, sl
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f af00 	beq.w	8007268 <_printf_float+0x98>
 8007468:	f109 0901 	add.w	r9, r9, #1
 800746c:	e7ee      	b.n	800744c <_printf_float+0x27c>
 800746e:	bf00      	nop
 8007470:	ffffffff 	.word	0xffffffff
 8007474:	7fefffff 	.word	0x7fefffff
 8007478:	0800a278 	.word	0x0800a278
 800747c:	0800a27c 	.word	0x0800a27c
 8007480:	0800a280 	.word	0x0800a280
 8007484:	0800a284 	.word	0x0800a284
 8007488:	0800a288 	.word	0x0800a288
 800748c:	9a08      	ldr	r2, [sp, #32]
 800748e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007490:	429a      	cmp	r2, r3
 8007492:	bfa8      	it	ge
 8007494:	461a      	movge	r2, r3
 8007496:	2a00      	cmp	r2, #0
 8007498:	4691      	mov	r9, r2
 800749a:	dc38      	bgt.n	800750e <_printf_float+0x33e>
 800749c:	2300      	movs	r3, #0
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074a4:	f104 021a 	add.w	r2, r4, #26
 80074a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074aa:	9905      	ldr	r1, [sp, #20]
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	eba3 0309 	sub.w	r3, r3, r9
 80074b2:	428b      	cmp	r3, r1
 80074b4:	dc33      	bgt.n	800751e <_printf_float+0x34e>
 80074b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	db3c      	blt.n	8007538 <_printf_float+0x368>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	07da      	lsls	r2, r3, #31
 80074c2:	d439      	bmi.n	8007538 <_printf_float+0x368>
 80074c4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80074c8:	eba2 0903 	sub.w	r9, r2, r3
 80074cc:	9b04      	ldr	r3, [sp, #16]
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	4591      	cmp	r9, r2
 80074d2:	bfa8      	it	ge
 80074d4:	4691      	movge	r9, r2
 80074d6:	f1b9 0f00 	cmp.w	r9, #0
 80074da:	dc35      	bgt.n	8007548 <_printf_float+0x378>
 80074dc:	f04f 0800 	mov.w	r8, #0
 80074e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074e4:	f104 0a1a 	add.w	sl, r4, #26
 80074e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	eba3 0309 	sub.w	r3, r3, r9
 80074f2:	4543      	cmp	r3, r8
 80074f4:	f77f af77 	ble.w	80073e6 <_printf_float+0x216>
 80074f8:	2301      	movs	r3, #1
 80074fa:	4652      	mov	r2, sl
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	f43f aeb0 	beq.w	8007268 <_printf_float+0x98>
 8007508:	f108 0801 	add.w	r8, r8, #1
 800750c:	e7ec      	b.n	80074e8 <_printf_float+0x318>
 800750e:	4613      	mov	r3, r2
 8007510:	4631      	mov	r1, r6
 8007512:	4642      	mov	r2, r8
 8007514:	4628      	mov	r0, r5
 8007516:	47b8      	blx	r7
 8007518:	3001      	adds	r0, #1
 800751a:	d1bf      	bne.n	800749c <_printf_float+0x2cc>
 800751c:	e6a4      	b.n	8007268 <_printf_float+0x98>
 800751e:	2301      	movs	r3, #1
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	9204      	str	r2, [sp, #16]
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	f43f ae9d 	beq.w	8007268 <_printf_float+0x98>
 800752e:	9b05      	ldr	r3, [sp, #20]
 8007530:	9a04      	ldr	r2, [sp, #16]
 8007532:	3301      	adds	r3, #1
 8007534:	9305      	str	r3, [sp, #20]
 8007536:	e7b7      	b.n	80074a8 <_printf_float+0x2d8>
 8007538:	4653      	mov	r3, sl
 800753a:	465a      	mov	r2, fp
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	d1be      	bne.n	80074c4 <_printf_float+0x2f4>
 8007546:	e68f      	b.n	8007268 <_printf_float+0x98>
 8007548:	9a04      	ldr	r2, [sp, #16]
 800754a:	464b      	mov	r3, r9
 800754c:	4442      	add	r2, r8
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	47b8      	blx	r7
 8007554:	3001      	adds	r0, #1
 8007556:	d1c1      	bne.n	80074dc <_printf_float+0x30c>
 8007558:	e686      	b.n	8007268 <_printf_float+0x98>
 800755a:	9a08      	ldr	r2, [sp, #32]
 800755c:	2a01      	cmp	r2, #1
 800755e:	dc01      	bgt.n	8007564 <_printf_float+0x394>
 8007560:	07db      	lsls	r3, r3, #31
 8007562:	d537      	bpl.n	80075d4 <_printf_float+0x404>
 8007564:	2301      	movs	r3, #1
 8007566:	4642      	mov	r2, r8
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f ae7a 	beq.w	8007268 <_printf_float+0x98>
 8007574:	4653      	mov	r3, sl
 8007576:	465a      	mov	r2, fp
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f ae72 	beq.w	8007268 <_printf_float+0x98>
 8007584:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007588:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800758c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	d01a      	beq.n	80075ca <_printf_float+0x3fa>
 8007594:	3b01      	subs	r3, #1
 8007596:	f108 0201 	add.w	r2, r8, #1
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	d10e      	bne.n	80075c2 <_printf_float+0x3f2>
 80075a4:	e660      	b.n	8007268 <_printf_float+0x98>
 80075a6:	2301      	movs	r3, #1
 80075a8:	464a      	mov	r2, r9
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	f43f ae59 	beq.w	8007268 <_printf_float+0x98>
 80075b6:	f108 0801 	add.w	r8, r8, #1
 80075ba:	9b08      	ldr	r3, [sp, #32]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4543      	cmp	r3, r8
 80075c0:	dcf1      	bgt.n	80075a6 <_printf_float+0x3d6>
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075c8:	e6dd      	b.n	8007386 <_printf_float+0x1b6>
 80075ca:	f04f 0800 	mov.w	r8, #0
 80075ce:	f104 091a 	add.w	r9, r4, #26
 80075d2:	e7f2      	b.n	80075ba <_printf_float+0x3ea>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4642      	mov	r2, r8
 80075d8:	e7df      	b.n	800759a <_printf_float+0x3ca>
 80075da:	2301      	movs	r3, #1
 80075dc:	464a      	mov	r2, r9
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f ae3f 	beq.w	8007268 <_printf_float+0x98>
 80075ea:	f108 0801 	add.w	r8, r8, #1
 80075ee:	68e3      	ldr	r3, [r4, #12]
 80075f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f2:	1a5b      	subs	r3, r3, r1
 80075f4:	4543      	cmp	r3, r8
 80075f6:	dcf0      	bgt.n	80075da <_printf_float+0x40a>
 80075f8:	e6f9      	b.n	80073ee <_printf_float+0x21e>
 80075fa:	f04f 0800 	mov.w	r8, #0
 80075fe:	f104 0919 	add.w	r9, r4, #25
 8007602:	e7f4      	b.n	80075ee <_printf_float+0x41e>

08007604 <_printf_common>:
 8007604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	4616      	mov	r6, r2
 800760a:	4699      	mov	r9, r3
 800760c:	688a      	ldr	r2, [r1, #8]
 800760e:	690b      	ldr	r3, [r1, #16]
 8007610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007614:	4293      	cmp	r3, r2
 8007616:	bfb8      	it	lt
 8007618:	4613      	movlt	r3, r2
 800761a:	6033      	str	r3, [r6, #0]
 800761c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007620:	4607      	mov	r7, r0
 8007622:	460c      	mov	r4, r1
 8007624:	b10a      	cbz	r2, 800762a <_printf_common+0x26>
 8007626:	3301      	adds	r3, #1
 8007628:	6033      	str	r3, [r6, #0]
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	0699      	lsls	r1, r3, #26
 800762e:	bf42      	ittt	mi
 8007630:	6833      	ldrmi	r3, [r6, #0]
 8007632:	3302      	addmi	r3, #2
 8007634:	6033      	strmi	r3, [r6, #0]
 8007636:	6825      	ldr	r5, [r4, #0]
 8007638:	f015 0506 	ands.w	r5, r5, #6
 800763c:	d106      	bne.n	800764c <_printf_common+0x48>
 800763e:	f104 0a19 	add.w	sl, r4, #25
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	6832      	ldr	r2, [r6, #0]
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	42ab      	cmp	r3, r5
 800764a:	dc26      	bgt.n	800769a <_printf_common+0x96>
 800764c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007650:	1e13      	subs	r3, r2, #0
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	bf18      	it	ne
 8007656:	2301      	movne	r3, #1
 8007658:	0692      	lsls	r2, r2, #26
 800765a:	d42b      	bmi.n	80076b4 <_printf_common+0xb0>
 800765c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007660:	4649      	mov	r1, r9
 8007662:	4638      	mov	r0, r7
 8007664:	47c0      	blx	r8
 8007666:	3001      	adds	r0, #1
 8007668:	d01e      	beq.n	80076a8 <_printf_common+0xa4>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	f003 0306 	and.w	r3, r3, #6
 8007672:	2b04      	cmp	r3, #4
 8007674:	bf02      	ittt	eq
 8007676:	68e5      	ldreq	r5, [r4, #12]
 8007678:	6833      	ldreq	r3, [r6, #0]
 800767a:	1aed      	subeq	r5, r5, r3
 800767c:	68a3      	ldr	r3, [r4, #8]
 800767e:	bf0c      	ite	eq
 8007680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007684:	2500      	movne	r5, #0
 8007686:	4293      	cmp	r3, r2
 8007688:	bfc4      	itt	gt
 800768a:	1a9b      	subgt	r3, r3, r2
 800768c:	18ed      	addgt	r5, r5, r3
 800768e:	2600      	movs	r6, #0
 8007690:	341a      	adds	r4, #26
 8007692:	42b5      	cmp	r5, r6
 8007694:	d11a      	bne.n	80076cc <_printf_common+0xc8>
 8007696:	2000      	movs	r0, #0
 8007698:	e008      	b.n	80076ac <_printf_common+0xa8>
 800769a:	2301      	movs	r3, #1
 800769c:	4652      	mov	r2, sl
 800769e:	4649      	mov	r1, r9
 80076a0:	4638      	mov	r0, r7
 80076a2:	47c0      	blx	r8
 80076a4:	3001      	adds	r0, #1
 80076a6:	d103      	bne.n	80076b0 <_printf_common+0xac>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b0:	3501      	adds	r5, #1
 80076b2:	e7c6      	b.n	8007642 <_printf_common+0x3e>
 80076b4:	18e1      	adds	r1, r4, r3
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	2030      	movs	r0, #48	; 0x30
 80076ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076be:	4422      	add	r2, r4
 80076c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076c8:	3302      	adds	r3, #2
 80076ca:	e7c7      	b.n	800765c <_printf_common+0x58>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4622      	mov	r2, r4
 80076d0:	4649      	mov	r1, r9
 80076d2:	4638      	mov	r0, r7
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d0e6      	beq.n	80076a8 <_printf_common+0xa4>
 80076da:	3601      	adds	r6, #1
 80076dc:	e7d9      	b.n	8007692 <_printf_common+0x8e>
	...

080076e0 <_printf_i>:
 80076e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	7e0f      	ldrb	r7, [r1, #24]
 80076e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076e8:	2f78      	cmp	r7, #120	; 0x78
 80076ea:	4691      	mov	r9, r2
 80076ec:	4680      	mov	r8, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	469a      	mov	sl, r3
 80076f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076f6:	d807      	bhi.n	8007708 <_printf_i+0x28>
 80076f8:	2f62      	cmp	r7, #98	; 0x62
 80076fa:	d80a      	bhi.n	8007712 <_printf_i+0x32>
 80076fc:	2f00      	cmp	r7, #0
 80076fe:	f000 80d4 	beq.w	80078aa <_printf_i+0x1ca>
 8007702:	2f58      	cmp	r7, #88	; 0x58
 8007704:	f000 80c0 	beq.w	8007888 <_printf_i+0x1a8>
 8007708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800770c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007710:	e03a      	b.n	8007788 <_printf_i+0xa8>
 8007712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007716:	2b15      	cmp	r3, #21
 8007718:	d8f6      	bhi.n	8007708 <_printf_i+0x28>
 800771a:	a101      	add	r1, pc, #4	; (adr r1, 8007720 <_printf_i+0x40>)
 800771c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007720:	08007779 	.word	0x08007779
 8007724:	0800778d 	.word	0x0800778d
 8007728:	08007709 	.word	0x08007709
 800772c:	08007709 	.word	0x08007709
 8007730:	08007709 	.word	0x08007709
 8007734:	08007709 	.word	0x08007709
 8007738:	0800778d 	.word	0x0800778d
 800773c:	08007709 	.word	0x08007709
 8007740:	08007709 	.word	0x08007709
 8007744:	08007709 	.word	0x08007709
 8007748:	08007709 	.word	0x08007709
 800774c:	08007891 	.word	0x08007891
 8007750:	080077b9 	.word	0x080077b9
 8007754:	0800784b 	.word	0x0800784b
 8007758:	08007709 	.word	0x08007709
 800775c:	08007709 	.word	0x08007709
 8007760:	080078b3 	.word	0x080078b3
 8007764:	08007709 	.word	0x08007709
 8007768:	080077b9 	.word	0x080077b9
 800776c:	08007709 	.word	0x08007709
 8007770:	08007709 	.word	0x08007709
 8007774:	08007853 	.word	0x08007853
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	1d1a      	adds	r2, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	602a      	str	r2, [r5, #0]
 8007780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007788:	2301      	movs	r3, #1
 800778a:	e09f      	b.n	80078cc <_printf_i+0x1ec>
 800778c:	6820      	ldr	r0, [r4, #0]
 800778e:	682b      	ldr	r3, [r5, #0]
 8007790:	0607      	lsls	r7, r0, #24
 8007792:	f103 0104 	add.w	r1, r3, #4
 8007796:	6029      	str	r1, [r5, #0]
 8007798:	d501      	bpl.n	800779e <_printf_i+0xbe>
 800779a:	681e      	ldr	r6, [r3, #0]
 800779c:	e003      	b.n	80077a6 <_printf_i+0xc6>
 800779e:	0646      	lsls	r6, r0, #25
 80077a0:	d5fb      	bpl.n	800779a <_printf_i+0xba>
 80077a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077a6:	2e00      	cmp	r6, #0
 80077a8:	da03      	bge.n	80077b2 <_printf_i+0xd2>
 80077aa:	232d      	movs	r3, #45	; 0x2d
 80077ac:	4276      	negs	r6, r6
 80077ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b2:	485a      	ldr	r0, [pc, #360]	; (800791c <_printf_i+0x23c>)
 80077b4:	230a      	movs	r3, #10
 80077b6:	e012      	b.n	80077de <_printf_i+0xfe>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	6029      	str	r1, [r5, #0]
 80077c0:	0605      	lsls	r5, r0, #24
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0xe8>
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0xee>
 80077c8:	0641      	lsls	r1, r0, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0xe4>
 80077cc:	881e      	ldrh	r6, [r3, #0]
 80077ce:	4853      	ldr	r0, [pc, #332]	; (800791c <_printf_i+0x23c>)
 80077d0:	2f6f      	cmp	r7, #111	; 0x6f
 80077d2:	bf0c      	ite	eq
 80077d4:	2308      	moveq	r3, #8
 80077d6:	230a      	movne	r3, #10
 80077d8:	2100      	movs	r1, #0
 80077da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077de:	6865      	ldr	r5, [r4, #4]
 80077e0:	60a5      	str	r5, [r4, #8]
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	bfa2      	ittt	ge
 80077e6:	6821      	ldrge	r1, [r4, #0]
 80077e8:	f021 0104 	bicge.w	r1, r1, #4
 80077ec:	6021      	strge	r1, [r4, #0]
 80077ee:	b90e      	cbnz	r6, 80077f4 <_printf_i+0x114>
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	d04b      	beq.n	800788c <_printf_i+0x1ac>
 80077f4:	4615      	mov	r5, r2
 80077f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80077fa:	fb03 6711 	mls	r7, r3, r1, r6
 80077fe:	5dc7      	ldrb	r7, [r0, r7]
 8007800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007804:	4637      	mov	r7, r6
 8007806:	42bb      	cmp	r3, r7
 8007808:	460e      	mov	r6, r1
 800780a:	d9f4      	bls.n	80077f6 <_printf_i+0x116>
 800780c:	2b08      	cmp	r3, #8
 800780e:	d10b      	bne.n	8007828 <_printf_i+0x148>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	07de      	lsls	r6, r3, #31
 8007814:	d508      	bpl.n	8007828 <_printf_i+0x148>
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	6861      	ldr	r1, [r4, #4]
 800781a:	4299      	cmp	r1, r3
 800781c:	bfde      	ittt	le
 800781e:	2330      	movle	r3, #48	; 0x30
 8007820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007828:	1b52      	subs	r2, r2, r5
 800782a:	6122      	str	r2, [r4, #16]
 800782c:	f8cd a000 	str.w	sl, [sp]
 8007830:	464b      	mov	r3, r9
 8007832:	aa03      	add	r2, sp, #12
 8007834:	4621      	mov	r1, r4
 8007836:	4640      	mov	r0, r8
 8007838:	f7ff fee4 	bl	8007604 <_printf_common>
 800783c:	3001      	adds	r0, #1
 800783e:	d14a      	bne.n	80078d6 <_printf_i+0x1f6>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	b004      	add	sp, #16
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	f043 0320 	orr.w	r3, r3, #32
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	4833      	ldr	r0, [pc, #204]	; (8007920 <_printf_i+0x240>)
 8007854:	2778      	movs	r7, #120	; 0x78
 8007856:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	6829      	ldr	r1, [r5, #0]
 800785e:	061f      	lsls	r7, r3, #24
 8007860:	f851 6b04 	ldr.w	r6, [r1], #4
 8007864:	d402      	bmi.n	800786c <_printf_i+0x18c>
 8007866:	065f      	lsls	r7, r3, #25
 8007868:	bf48      	it	mi
 800786a:	b2b6      	uxthmi	r6, r6
 800786c:	07df      	lsls	r7, r3, #31
 800786e:	bf48      	it	mi
 8007870:	f043 0320 	orrmi.w	r3, r3, #32
 8007874:	6029      	str	r1, [r5, #0]
 8007876:	bf48      	it	mi
 8007878:	6023      	strmi	r3, [r4, #0]
 800787a:	b91e      	cbnz	r6, 8007884 <_printf_i+0x1a4>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	f023 0320 	bic.w	r3, r3, #32
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	2310      	movs	r3, #16
 8007886:	e7a7      	b.n	80077d8 <_printf_i+0xf8>
 8007888:	4824      	ldr	r0, [pc, #144]	; (800791c <_printf_i+0x23c>)
 800788a:	e7e4      	b.n	8007856 <_printf_i+0x176>
 800788c:	4615      	mov	r5, r2
 800788e:	e7bd      	b.n	800780c <_printf_i+0x12c>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	6826      	ldr	r6, [r4, #0]
 8007894:	6961      	ldr	r1, [r4, #20]
 8007896:	1d18      	adds	r0, r3, #4
 8007898:	6028      	str	r0, [r5, #0]
 800789a:	0635      	lsls	r5, r6, #24
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	d501      	bpl.n	80078a4 <_printf_i+0x1c4>
 80078a0:	6019      	str	r1, [r3, #0]
 80078a2:	e002      	b.n	80078aa <_printf_i+0x1ca>
 80078a4:	0670      	lsls	r0, r6, #25
 80078a6:	d5fb      	bpl.n	80078a0 <_printf_i+0x1c0>
 80078a8:	8019      	strh	r1, [r3, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	6123      	str	r3, [r4, #16]
 80078ae:	4615      	mov	r5, r2
 80078b0:	e7bc      	b.n	800782c <_printf_i+0x14c>
 80078b2:	682b      	ldr	r3, [r5, #0]
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	602a      	str	r2, [r5, #0]
 80078b8:	681d      	ldr	r5, [r3, #0]
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	2100      	movs	r1, #0
 80078be:	4628      	mov	r0, r5
 80078c0:	f7f8 fd0e 	bl	80002e0 <memchr>
 80078c4:	b108      	cbz	r0, 80078ca <_printf_i+0x1ea>
 80078c6:	1b40      	subs	r0, r0, r5
 80078c8:	6060      	str	r0, [r4, #4]
 80078ca:	6863      	ldr	r3, [r4, #4]
 80078cc:	6123      	str	r3, [r4, #16]
 80078ce:	2300      	movs	r3, #0
 80078d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d4:	e7aa      	b.n	800782c <_printf_i+0x14c>
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	462a      	mov	r2, r5
 80078da:	4649      	mov	r1, r9
 80078dc:	4640      	mov	r0, r8
 80078de:	47d0      	blx	sl
 80078e0:	3001      	adds	r0, #1
 80078e2:	d0ad      	beq.n	8007840 <_printf_i+0x160>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	079b      	lsls	r3, r3, #30
 80078e8:	d413      	bmi.n	8007912 <_printf_i+0x232>
 80078ea:	68e0      	ldr	r0, [r4, #12]
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	4298      	cmp	r0, r3
 80078f0:	bfb8      	it	lt
 80078f2:	4618      	movlt	r0, r3
 80078f4:	e7a6      	b.n	8007844 <_printf_i+0x164>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4632      	mov	r2, r6
 80078fa:	4649      	mov	r1, r9
 80078fc:	4640      	mov	r0, r8
 80078fe:	47d0      	blx	sl
 8007900:	3001      	adds	r0, #1
 8007902:	d09d      	beq.n	8007840 <_printf_i+0x160>
 8007904:	3501      	adds	r5, #1
 8007906:	68e3      	ldr	r3, [r4, #12]
 8007908:	9903      	ldr	r1, [sp, #12]
 800790a:	1a5b      	subs	r3, r3, r1
 800790c:	42ab      	cmp	r3, r5
 800790e:	dcf2      	bgt.n	80078f6 <_printf_i+0x216>
 8007910:	e7eb      	b.n	80078ea <_printf_i+0x20a>
 8007912:	2500      	movs	r5, #0
 8007914:	f104 0619 	add.w	r6, r4, #25
 8007918:	e7f5      	b.n	8007906 <_printf_i+0x226>
 800791a:	bf00      	nop
 800791c:	0800a28a 	.word	0x0800a28a
 8007920:	0800a29b 	.word	0x0800a29b

08007924 <std>:
 8007924:	2300      	movs	r3, #0
 8007926:	b510      	push	{r4, lr}
 8007928:	4604      	mov	r4, r0
 800792a:	e9c0 3300 	strd	r3, r3, [r0]
 800792e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007932:	6083      	str	r3, [r0, #8]
 8007934:	8181      	strh	r1, [r0, #12]
 8007936:	6643      	str	r3, [r0, #100]	; 0x64
 8007938:	81c2      	strh	r2, [r0, #14]
 800793a:	6183      	str	r3, [r0, #24]
 800793c:	4619      	mov	r1, r3
 800793e:	2208      	movs	r2, #8
 8007940:	305c      	adds	r0, #92	; 0x5c
 8007942:	f000 f914 	bl	8007b6e <memset>
 8007946:	4b0d      	ldr	r3, [pc, #52]	; (800797c <std+0x58>)
 8007948:	6263      	str	r3, [r4, #36]	; 0x24
 800794a:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <std+0x5c>)
 800794c:	62a3      	str	r3, [r4, #40]	; 0x28
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <std+0x60>)
 8007950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007952:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <std+0x64>)
 8007954:	6323      	str	r3, [r4, #48]	; 0x30
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <std+0x68>)
 8007958:	6224      	str	r4, [r4, #32]
 800795a:	429c      	cmp	r4, r3
 800795c:	d006      	beq.n	800796c <std+0x48>
 800795e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007962:	4294      	cmp	r4, r2
 8007964:	d002      	beq.n	800796c <std+0x48>
 8007966:	33d0      	adds	r3, #208	; 0xd0
 8007968:	429c      	cmp	r4, r3
 800796a:	d105      	bne.n	8007978 <std+0x54>
 800796c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007974:	f000 b978 	b.w	8007c68 <__retarget_lock_init_recursive>
 8007978:	bd10      	pop	{r4, pc}
 800797a:	bf00      	nop
 800797c:	08007ae9 	.word	0x08007ae9
 8007980:	08007b0b 	.word	0x08007b0b
 8007984:	08007b43 	.word	0x08007b43
 8007988:	08007b67 	.word	0x08007b67
 800798c:	240002e8 	.word	0x240002e8

08007990 <stdio_exit_handler>:
 8007990:	4a02      	ldr	r2, [pc, #8]	; (800799c <stdio_exit_handler+0xc>)
 8007992:	4903      	ldr	r1, [pc, #12]	; (80079a0 <stdio_exit_handler+0x10>)
 8007994:	4803      	ldr	r0, [pc, #12]	; (80079a4 <stdio_exit_handler+0x14>)
 8007996:	f000 b869 	b.w	8007a6c <_fwalk_sglue>
 800799a:	bf00      	nop
 800799c:	24000010 	.word	0x24000010
 80079a0:	0800950d 	.word	0x0800950d
 80079a4:	2400001c 	.word	0x2400001c

080079a8 <cleanup_stdio>:
 80079a8:	6841      	ldr	r1, [r0, #4]
 80079aa:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <cleanup_stdio+0x34>)
 80079ac:	4299      	cmp	r1, r3
 80079ae:	b510      	push	{r4, lr}
 80079b0:	4604      	mov	r4, r0
 80079b2:	d001      	beq.n	80079b8 <cleanup_stdio+0x10>
 80079b4:	f001 fdaa 	bl	800950c <_fflush_r>
 80079b8:	68a1      	ldr	r1, [r4, #8]
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <cleanup_stdio+0x38>)
 80079bc:	4299      	cmp	r1, r3
 80079be:	d002      	beq.n	80079c6 <cleanup_stdio+0x1e>
 80079c0:	4620      	mov	r0, r4
 80079c2:	f001 fda3 	bl	800950c <_fflush_r>
 80079c6:	68e1      	ldr	r1, [r4, #12]
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <cleanup_stdio+0x3c>)
 80079ca:	4299      	cmp	r1, r3
 80079cc:	d004      	beq.n	80079d8 <cleanup_stdio+0x30>
 80079ce:	4620      	mov	r0, r4
 80079d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d4:	f001 bd9a 	b.w	800950c <_fflush_r>
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	bf00      	nop
 80079dc:	240002e8 	.word	0x240002e8
 80079e0:	24000350 	.word	0x24000350
 80079e4:	240003b8 	.word	0x240003b8

080079e8 <global_stdio_init.part.0>:
 80079e8:	b510      	push	{r4, lr}
 80079ea:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <global_stdio_init.part.0+0x30>)
 80079ec:	4c0b      	ldr	r4, [pc, #44]	; (8007a1c <global_stdio_init.part.0+0x34>)
 80079ee:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <global_stdio_init.part.0+0x38>)
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	4620      	mov	r0, r4
 80079f4:	2200      	movs	r2, #0
 80079f6:	2104      	movs	r1, #4
 80079f8:	f7ff ff94 	bl	8007924 <std>
 80079fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a00:	2201      	movs	r2, #1
 8007a02:	2109      	movs	r1, #9
 8007a04:	f7ff ff8e 	bl	8007924 <std>
 8007a08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a12:	2112      	movs	r1, #18
 8007a14:	f7ff bf86 	b.w	8007924 <std>
 8007a18:	24000420 	.word	0x24000420
 8007a1c:	240002e8 	.word	0x240002e8
 8007a20:	08007991 	.word	0x08007991

08007a24 <__sfp_lock_acquire>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__sfp_lock_acquire+0x8>)
 8007a26:	f000 b920 	b.w	8007c6a <__retarget_lock_acquire_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	24000429 	.word	0x24000429

08007a30 <__sfp_lock_release>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__sfp_lock_release+0x8>)
 8007a32:	f000 b91b 	b.w	8007c6c <__retarget_lock_release_recursive>
 8007a36:	bf00      	nop
 8007a38:	24000429 	.word	0x24000429

08007a3c <__sinit>:
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	4604      	mov	r4, r0
 8007a40:	f7ff fff0 	bl	8007a24 <__sfp_lock_acquire>
 8007a44:	6a23      	ldr	r3, [r4, #32]
 8007a46:	b11b      	cbz	r3, 8007a50 <__sinit+0x14>
 8007a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4c:	f7ff bff0 	b.w	8007a30 <__sfp_lock_release>
 8007a50:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <__sinit+0x28>)
 8007a52:	6223      	str	r3, [r4, #32]
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <__sinit+0x2c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f5      	bne.n	8007a48 <__sinit+0xc>
 8007a5c:	f7ff ffc4 	bl	80079e8 <global_stdio_init.part.0>
 8007a60:	e7f2      	b.n	8007a48 <__sinit+0xc>
 8007a62:	bf00      	nop
 8007a64:	080079a9 	.word	0x080079a9
 8007a68:	24000420 	.word	0x24000420

08007a6c <_fwalk_sglue>:
 8007a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a70:	4607      	mov	r7, r0
 8007a72:	4688      	mov	r8, r1
 8007a74:	4614      	mov	r4, r2
 8007a76:	2600      	movs	r6, #0
 8007a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a80:	d505      	bpl.n	8007a8e <_fwalk_sglue+0x22>
 8007a82:	6824      	ldr	r4, [r4, #0]
 8007a84:	2c00      	cmp	r4, #0
 8007a86:	d1f7      	bne.n	8007a78 <_fwalk_sglue+0xc>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8e:	89ab      	ldrh	r3, [r5, #12]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d907      	bls.n	8007aa4 <_fwalk_sglue+0x38>
 8007a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	d003      	beq.n	8007aa4 <_fwalk_sglue+0x38>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	47c0      	blx	r8
 8007aa2:	4306      	orrs	r6, r0
 8007aa4:	3568      	adds	r5, #104	; 0x68
 8007aa6:	e7e9      	b.n	8007a7c <_fwalk_sglue+0x10>

08007aa8 <siprintf>:
 8007aa8:	b40e      	push	{r1, r2, r3}
 8007aaa:	b500      	push	{lr}
 8007aac:	b09c      	sub	sp, #112	; 0x70
 8007aae:	ab1d      	add	r3, sp, #116	; 0x74
 8007ab0:	9002      	str	r0, [sp, #8]
 8007ab2:	9006      	str	r0, [sp, #24]
 8007ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ab8:	4809      	ldr	r0, [pc, #36]	; (8007ae0 <siprintf+0x38>)
 8007aba:	9107      	str	r1, [sp, #28]
 8007abc:	9104      	str	r1, [sp, #16]
 8007abe:	4909      	ldr	r1, [pc, #36]	; (8007ae4 <siprintf+0x3c>)
 8007ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac4:	9105      	str	r1, [sp, #20]
 8007ac6:	6800      	ldr	r0, [r0, #0]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	a902      	add	r1, sp, #8
 8007acc:	f001 fb9a 	bl	8009204 <_svfiprintf_r>
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	b01c      	add	sp, #112	; 0x70
 8007ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007adc:	b003      	add	sp, #12
 8007ade:	4770      	bx	lr
 8007ae0:	24000068 	.word	0x24000068
 8007ae4:	ffff0208 	.word	0xffff0208

08007ae8 <__sread>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	460c      	mov	r4, r1
 8007aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af0:	f000 f86c 	bl	8007bcc <_read_r>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	bfab      	itete	ge
 8007af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007afa:	89a3      	ldrhlt	r3, [r4, #12]
 8007afc:	181b      	addge	r3, r3, r0
 8007afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b02:	bfac      	ite	ge
 8007b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b06:	81a3      	strhlt	r3, [r4, #12]
 8007b08:	bd10      	pop	{r4, pc}

08007b0a <__swrite>:
 8007b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0e:	461f      	mov	r7, r3
 8007b10:	898b      	ldrh	r3, [r1, #12]
 8007b12:	05db      	lsls	r3, r3, #23
 8007b14:	4605      	mov	r5, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	4616      	mov	r6, r2
 8007b1a:	d505      	bpl.n	8007b28 <__swrite+0x1e>
 8007b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b20:	2302      	movs	r3, #2
 8007b22:	2200      	movs	r2, #0
 8007b24:	f000 f840 	bl	8007ba8 <_lseek_r>
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b32:	81a3      	strh	r3, [r4, #12]
 8007b34:	4632      	mov	r2, r6
 8007b36:	463b      	mov	r3, r7
 8007b38:	4628      	mov	r0, r5
 8007b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3e:	f000 b857 	b.w	8007bf0 <_write_r>

08007b42 <__sseek>:
 8007b42:	b510      	push	{r4, lr}
 8007b44:	460c      	mov	r4, r1
 8007b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4a:	f000 f82d 	bl	8007ba8 <_lseek_r>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	bf15      	itete	ne
 8007b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b5e:	81a3      	strheq	r3, [r4, #12]
 8007b60:	bf18      	it	ne
 8007b62:	81a3      	strhne	r3, [r4, #12]
 8007b64:	bd10      	pop	{r4, pc}

08007b66 <__sclose>:
 8007b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6a:	f000 b80d 	b.w	8007b88 <_close_r>

08007b6e <memset>:
 8007b6e:	4402      	add	r2, r0
 8007b70:	4603      	mov	r3, r0
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d100      	bne.n	8007b78 <memset+0xa>
 8007b76:	4770      	bx	lr
 8007b78:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7c:	e7f9      	b.n	8007b72 <memset+0x4>
	...

08007b80 <_localeconv_r>:
 8007b80:	4800      	ldr	r0, [pc, #0]	; (8007b84 <_localeconv_r+0x4>)
 8007b82:	4770      	bx	lr
 8007b84:	2400015c 	.word	0x2400015c

08007b88 <_close_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d06      	ldr	r5, [pc, #24]	; (8007ba4 <_close_r+0x1c>)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	f7f8 ffbd 	bl	8000b12 <_close>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_close_r+0x1a>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_close_r+0x1a>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	24000424 	.word	0x24000424

08007ba8 <_lseek_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d07      	ldr	r5, [pc, #28]	; (8007bc8 <_lseek_r+0x20>)
 8007bac:	4604      	mov	r4, r0
 8007bae:	4608      	mov	r0, r1
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f7f8 ffd2 	bl	8000b60 <_lseek>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_lseek_r+0x1e>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_lseek_r+0x1e>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	24000424 	.word	0x24000424

08007bcc <_read_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d07      	ldr	r5, [pc, #28]	; (8007bec <_read_r+0x20>)
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7f8 ff60 	bl	8000aa0 <_read>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_read_r+0x1e>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_read_r+0x1e>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	24000424 	.word	0x24000424

08007bf0 <_write_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d07      	ldr	r5, [pc, #28]	; (8007c10 <_write_r+0x20>)
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	602a      	str	r2, [r5, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f7f8 ff6b 	bl	8000ada <_write>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_write_r+0x1e>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_write_r+0x1e>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	24000424 	.word	0x24000424

08007c14 <__errno>:
 8007c14:	4b01      	ldr	r3, [pc, #4]	; (8007c1c <__errno+0x8>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	24000068 	.word	0x24000068

08007c20 <__libc_init_array>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	4d0d      	ldr	r5, [pc, #52]	; (8007c58 <__libc_init_array+0x38>)
 8007c24:	4c0d      	ldr	r4, [pc, #52]	; (8007c5c <__libc_init_array+0x3c>)
 8007c26:	1b64      	subs	r4, r4, r5
 8007c28:	10a4      	asrs	r4, r4, #2
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	42a6      	cmp	r6, r4
 8007c2e:	d109      	bne.n	8007c44 <__libc_init_array+0x24>
 8007c30:	4d0b      	ldr	r5, [pc, #44]	; (8007c60 <__libc_init_array+0x40>)
 8007c32:	4c0c      	ldr	r4, [pc, #48]	; (8007c64 <__libc_init_array+0x44>)
 8007c34:	f002 f80e 	bl	8009c54 <_init>
 8007c38:	1b64      	subs	r4, r4, r5
 8007c3a:	10a4      	asrs	r4, r4, #2
 8007c3c:	2600      	movs	r6, #0
 8007c3e:	42a6      	cmp	r6, r4
 8007c40:	d105      	bne.n	8007c4e <__libc_init_array+0x2e>
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c48:	4798      	blx	r3
 8007c4a:	3601      	adds	r6, #1
 8007c4c:	e7ee      	b.n	8007c2c <__libc_init_array+0xc>
 8007c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c52:	4798      	blx	r3
 8007c54:	3601      	adds	r6, #1
 8007c56:	e7f2      	b.n	8007c3e <__libc_init_array+0x1e>
 8007c58:	0800a5ec 	.word	0x0800a5ec
 8007c5c:	0800a5ec 	.word	0x0800a5ec
 8007c60:	0800a5ec 	.word	0x0800a5ec
 8007c64:	0800a5f0 	.word	0x0800a5f0

08007c68 <__retarget_lock_init_recursive>:
 8007c68:	4770      	bx	lr

08007c6a <__retarget_lock_acquire_recursive>:
 8007c6a:	4770      	bx	lr

08007c6c <__retarget_lock_release_recursive>:
 8007c6c:	4770      	bx	lr

08007c6e <quorem>:
 8007c6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c72:	6903      	ldr	r3, [r0, #16]
 8007c74:	690c      	ldr	r4, [r1, #16]
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	4607      	mov	r7, r0
 8007c7a:	db7e      	blt.n	8007d7a <quorem+0x10c>
 8007c7c:	3c01      	subs	r4, #1
 8007c7e:	f101 0814 	add.w	r8, r1, #20
 8007c82:	f100 0514 	add.w	r5, r0, #20
 8007c86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c94:	3301      	adds	r3, #1
 8007c96:	429a      	cmp	r2, r3
 8007c98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ca0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ca4:	d331      	bcc.n	8007d0a <quorem+0x9c>
 8007ca6:	f04f 0e00 	mov.w	lr, #0
 8007caa:	4640      	mov	r0, r8
 8007cac:	46ac      	mov	ip, r5
 8007cae:	46f2      	mov	sl, lr
 8007cb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cb4:	b293      	uxth	r3, r2
 8007cb6:	fb06 e303 	mla	r3, r6, r3, lr
 8007cba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cbe:	0c1a      	lsrs	r2, r3, #16
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ebaa 0303 	sub.w	r3, sl, r3
 8007cc6:	f8dc a000 	ldr.w	sl, [ip]
 8007cca:	fa13 f38a 	uxtah	r3, r3, sl
 8007cce:	fb06 220e 	mla	r2, r6, lr, r2
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	9b00      	ldr	r3, [sp, #0]
 8007cd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cda:	b292      	uxth	r2, r2
 8007cdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ce4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ce8:	4581      	cmp	r9, r0
 8007cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cee:	f84c 3b04 	str.w	r3, [ip], #4
 8007cf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cf6:	d2db      	bcs.n	8007cb0 <quorem+0x42>
 8007cf8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cfc:	b92b      	cbnz	r3, 8007d0a <quorem+0x9c>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	429d      	cmp	r5, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	d32c      	bcc.n	8007d62 <quorem+0xf4>
 8007d08:	613c      	str	r4, [r7, #16]
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f001 f920 	bl	8008f50 <__mcmp>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	db22      	blt.n	8007d5a <quorem+0xec>
 8007d14:	3601      	adds	r6, #1
 8007d16:	4629      	mov	r1, r5
 8007d18:	2000      	movs	r0, #0
 8007d1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d1e:	f8d1 c000 	ldr.w	ip, [r1]
 8007d22:	b293      	uxth	r3, r2
 8007d24:	1ac3      	subs	r3, r0, r3
 8007d26:	0c12      	lsrs	r2, r2, #16
 8007d28:	fa13 f38c 	uxtah	r3, r3, ip
 8007d2c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d3a:	45c1      	cmp	r9, r8
 8007d3c:	f841 3b04 	str.w	r3, [r1], #4
 8007d40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d44:	d2e9      	bcs.n	8007d1a <quorem+0xac>
 8007d46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d4e:	b922      	cbnz	r2, 8007d5a <quorem+0xec>
 8007d50:	3b04      	subs	r3, #4
 8007d52:	429d      	cmp	r5, r3
 8007d54:	461a      	mov	r2, r3
 8007d56:	d30a      	bcc.n	8007d6e <quorem+0x100>
 8007d58:	613c      	str	r4, [r7, #16]
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	b003      	add	sp, #12
 8007d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	3b04      	subs	r3, #4
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	d1ce      	bne.n	8007d08 <quorem+0x9a>
 8007d6a:	3c01      	subs	r4, #1
 8007d6c:	e7c9      	b.n	8007d02 <quorem+0x94>
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	3b04      	subs	r3, #4
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d1f0      	bne.n	8007d58 <quorem+0xea>
 8007d76:	3c01      	subs	r4, #1
 8007d78:	e7eb      	b.n	8007d52 <quorem+0xe4>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e7ee      	b.n	8007d5c <quorem+0xee>
	...

08007d80 <_dtoa_r>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	ed2d 8b02 	vpush	{d8}
 8007d88:	69c5      	ldr	r5, [r0, #28]
 8007d8a:	b091      	sub	sp, #68	; 0x44
 8007d8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d90:	ec59 8b10 	vmov	r8, r9, d0
 8007d94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007d96:	9106      	str	r1, [sp, #24]
 8007d98:	4606      	mov	r6, r0
 8007d9a:	9208      	str	r2, [sp, #32]
 8007d9c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d9e:	b975      	cbnz	r5, 8007dbe <_dtoa_r+0x3e>
 8007da0:	2010      	movs	r0, #16
 8007da2:	f000 fda5 	bl	80088f0 <malloc>
 8007da6:	4602      	mov	r2, r0
 8007da8:	61f0      	str	r0, [r6, #28]
 8007daa:	b920      	cbnz	r0, 8007db6 <_dtoa_r+0x36>
 8007dac:	4ba6      	ldr	r3, [pc, #664]	; (8008048 <_dtoa_r+0x2c8>)
 8007dae:	21ef      	movs	r1, #239	; 0xef
 8007db0:	48a6      	ldr	r0, [pc, #664]	; (800804c <_dtoa_r+0x2cc>)
 8007db2:	f001 fc0b 	bl	80095cc <__assert_func>
 8007db6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dba:	6005      	str	r5, [r0, #0]
 8007dbc:	60c5      	str	r5, [r0, #12]
 8007dbe:	69f3      	ldr	r3, [r6, #28]
 8007dc0:	6819      	ldr	r1, [r3, #0]
 8007dc2:	b151      	cbz	r1, 8007dda <_dtoa_r+0x5a>
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	604a      	str	r2, [r1, #4]
 8007dc8:	2301      	movs	r3, #1
 8007dca:	4093      	lsls	r3, r2
 8007dcc:	608b      	str	r3, [r1, #8]
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 fe82 	bl	8008ad8 <_Bfree>
 8007dd4:	69f3      	ldr	r3, [r6, #28]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	f1b9 0300 	subs.w	r3, r9, #0
 8007dde:	bfbb      	ittet	lt
 8007de0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007de4:	9303      	strlt	r3, [sp, #12]
 8007de6:	2300      	movge	r3, #0
 8007de8:	2201      	movlt	r2, #1
 8007dea:	bfac      	ite	ge
 8007dec:	6023      	strge	r3, [r4, #0]
 8007dee:	6022      	strlt	r2, [r4, #0]
 8007df0:	4b97      	ldr	r3, [pc, #604]	; (8008050 <_dtoa_r+0x2d0>)
 8007df2:	9c03      	ldr	r4, [sp, #12]
 8007df4:	43a3      	bics	r3, r4
 8007df6:	d11c      	bne.n	8007e32 <_dtoa_r+0xb2>
 8007df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e04:	ea53 0308 	orrs.w	r3, r3, r8
 8007e08:	f000 84fb 	beq.w	8008802 <_dtoa_r+0xa82>
 8007e0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e0e:	b963      	cbnz	r3, 8007e2a <_dtoa_r+0xaa>
 8007e10:	4b90      	ldr	r3, [pc, #576]	; (8008054 <_dtoa_r+0x2d4>)
 8007e12:	e020      	b.n	8007e56 <_dtoa_r+0xd6>
 8007e14:	4b90      	ldr	r3, [pc, #576]	; (8008058 <_dtoa_r+0x2d8>)
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	9801      	ldr	r0, [sp, #4]
 8007e20:	b011      	add	sp, #68	; 0x44
 8007e22:	ecbd 8b02 	vpop	{d8}
 8007e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2a:	4b8a      	ldr	r3, [pc, #552]	; (8008054 <_dtoa_r+0x2d4>)
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	3303      	adds	r3, #3
 8007e30:	e7f3      	b.n	8007e1a <_dtoa_r+0x9a>
 8007e32:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007e36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3e:	d10c      	bne.n	8007e5a <_dtoa_r+0xda>
 8007e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e42:	2301      	movs	r3, #1
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 84d7 	beq.w	80087fc <_dtoa_r+0xa7c>
 8007e4e:	4b83      	ldr	r3, [pc, #524]	; (800805c <_dtoa_r+0x2dc>)
 8007e50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	e7e1      	b.n	8007e1e <_dtoa_r+0x9e>
 8007e5a:	aa0e      	add	r2, sp, #56	; 0x38
 8007e5c:	a90f      	add	r1, sp, #60	; 0x3c
 8007e5e:	4630      	mov	r0, r6
 8007e60:	eeb0 0b48 	vmov.f64	d0, d8
 8007e64:	f001 f91a 	bl	800909c <__d2b>
 8007e68:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e6e:	4605      	mov	r5, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d046      	beq.n	8007f02 <_dtoa_r+0x182>
 8007e74:	eeb0 7b48 	vmov.f64	d7, d8
 8007e78:	ee18 1a90 	vmov	r1, s17
 8007e7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007e80:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007e84:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007e88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	ee07 1a90 	vmov	s15, r1
 8007e92:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007e96:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008030 <_dtoa_r+0x2b0>
 8007e9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007e9e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008038 <_dtoa_r+0x2b8>
 8007ea2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007ea6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008040 <_dtoa_r+0x2c0>
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007eb2:	eeb0 7b46 	vmov.f64	d7, d6
 8007eb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007eba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007ebe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec6:	ee16 ba90 	vmov	fp, s13
 8007eca:	9009      	str	r0, [sp, #36]	; 0x24
 8007ecc:	d508      	bpl.n	8007ee0 <_dtoa_r+0x160>
 8007ece:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007ed2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eda:	bf18      	it	ne
 8007edc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007ee0:	f1bb 0f16 	cmp.w	fp, #22
 8007ee4:	d82b      	bhi.n	8007f3e <_dtoa_r+0x1be>
 8007ee6:	495e      	ldr	r1, [pc, #376]	; (8008060 <_dtoa_r+0x2e0>)
 8007ee8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007eec:	ed91 7b00 	vldr	d7, [r1]
 8007ef0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef8:	d501      	bpl.n	8007efe <_dtoa_r+0x17e>
 8007efa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007efe:	2100      	movs	r1, #0
 8007f00:	e01e      	b.n	8007f40 <_dtoa_r+0x1c0>
 8007f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f04:	4413      	add	r3, r2
 8007f06:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007f0a:	2920      	cmp	r1, #32
 8007f0c:	bfc1      	itttt	gt
 8007f0e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007f12:	408c      	lslgt	r4, r1
 8007f14:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007f18:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007f1c:	bfd6      	itet	le
 8007f1e:	f1c1 0120 	rsble	r1, r1, #32
 8007f22:	4321      	orrgt	r1, r4
 8007f24:	fa08 f101 	lslle.w	r1, r8, r1
 8007f28:	ee07 1a90 	vmov	s15, r1
 8007f2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f30:	3b01      	subs	r3, #1
 8007f32:	ee17 1a90 	vmov	r1, s15
 8007f36:	2001      	movs	r0, #1
 8007f38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f3c:	e7a7      	b.n	8007e8e <_dtoa_r+0x10e>
 8007f3e:	2101      	movs	r1, #1
 8007f40:	1ad2      	subs	r2, r2, r3
 8007f42:	1e53      	subs	r3, r2, #1
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	bf45      	ittet	mi
 8007f48:	f1c2 0301 	rsbmi	r3, r2, #1
 8007f4c:	9304      	strmi	r3, [sp, #16]
 8007f4e:	2300      	movpl	r3, #0
 8007f50:	2300      	movmi	r3, #0
 8007f52:	bf4c      	ite	mi
 8007f54:	9305      	strmi	r3, [sp, #20]
 8007f56:	9304      	strpl	r3, [sp, #16]
 8007f58:	f1bb 0f00 	cmp.w	fp, #0
 8007f5c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f5e:	db18      	blt.n	8007f92 <_dtoa_r+0x212>
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007f66:	445b      	add	r3, fp
 8007f68:	9305      	str	r3, [sp, #20]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9a06      	ldr	r2, [sp, #24]
 8007f6e:	2a09      	cmp	r2, #9
 8007f70:	d848      	bhi.n	8008004 <_dtoa_r+0x284>
 8007f72:	2a05      	cmp	r2, #5
 8007f74:	bfc4      	itt	gt
 8007f76:	3a04      	subgt	r2, #4
 8007f78:	9206      	strgt	r2, [sp, #24]
 8007f7a:	9a06      	ldr	r2, [sp, #24]
 8007f7c:	f1a2 0202 	sub.w	r2, r2, #2
 8007f80:	bfcc      	ite	gt
 8007f82:	2400      	movgt	r4, #0
 8007f84:	2401      	movle	r4, #1
 8007f86:	2a03      	cmp	r2, #3
 8007f88:	d847      	bhi.n	800801a <_dtoa_r+0x29a>
 8007f8a:	e8df f002 	tbb	[pc, r2]
 8007f8e:	2d0b      	.short	0x2d0b
 8007f90:	392b      	.short	0x392b
 8007f92:	9b04      	ldr	r3, [sp, #16]
 8007f94:	2200      	movs	r2, #0
 8007f96:	eba3 030b 	sub.w	r3, r3, fp
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f9e:	f1cb 0300 	rsb	r3, fp, #0
 8007fa2:	e7e3      	b.n	8007f6c <_dtoa_r+0x1ec>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	9207      	str	r2, [sp, #28]
 8007fa8:	9a08      	ldr	r2, [sp, #32]
 8007faa:	2a00      	cmp	r2, #0
 8007fac:	dc38      	bgt.n	8008020 <_dtoa_r+0x2a0>
 8007fae:	f04f 0a01 	mov.w	sl, #1
 8007fb2:	46d1      	mov	r9, sl
 8007fb4:	4652      	mov	r2, sl
 8007fb6:	f8cd a020 	str.w	sl, [sp, #32]
 8007fba:	69f7      	ldr	r7, [r6, #28]
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	2004      	movs	r0, #4
 8007fc0:	f100 0c14 	add.w	ip, r0, #20
 8007fc4:	4594      	cmp	ip, r2
 8007fc6:	d930      	bls.n	800802a <_dtoa_r+0x2aa>
 8007fc8:	6079      	str	r1, [r7, #4]
 8007fca:	4630      	mov	r0, r6
 8007fcc:	930d      	str	r3, [sp, #52]	; 0x34
 8007fce:	f000 fd43 	bl	8008a58 <_Balloc>
 8007fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fd4:	9001      	str	r0, [sp, #4]
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d145      	bne.n	8008068 <_dtoa_r+0x2e8>
 8007fdc:	4b21      	ldr	r3, [pc, #132]	; (8008064 <_dtoa_r+0x2e4>)
 8007fde:	f240 11af 	movw	r1, #431	; 0x1af
 8007fe2:	e6e5      	b.n	8007db0 <_dtoa_r+0x30>
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	e7de      	b.n	8007fa6 <_dtoa_r+0x226>
 8007fe8:	2200      	movs	r2, #0
 8007fea:	9207      	str	r2, [sp, #28]
 8007fec:	9a08      	ldr	r2, [sp, #32]
 8007fee:	eb0b 0a02 	add.w	sl, fp, r2
 8007ff2:	f10a 0901 	add.w	r9, sl, #1
 8007ff6:	464a      	mov	r2, r9
 8007ff8:	2a01      	cmp	r2, #1
 8007ffa:	bfb8      	it	lt
 8007ffc:	2201      	movlt	r2, #1
 8007ffe:	e7dc      	b.n	8007fba <_dtoa_r+0x23a>
 8008000:	2201      	movs	r2, #1
 8008002:	e7f2      	b.n	8007fea <_dtoa_r+0x26a>
 8008004:	2401      	movs	r4, #1
 8008006:	2200      	movs	r2, #0
 8008008:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800800c:	f04f 3aff 	mov.w	sl, #4294967295
 8008010:	2100      	movs	r1, #0
 8008012:	46d1      	mov	r9, sl
 8008014:	2212      	movs	r2, #18
 8008016:	9108      	str	r1, [sp, #32]
 8008018:	e7cf      	b.n	8007fba <_dtoa_r+0x23a>
 800801a:	2201      	movs	r2, #1
 800801c:	9207      	str	r2, [sp, #28]
 800801e:	e7f5      	b.n	800800c <_dtoa_r+0x28c>
 8008020:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008024:	46d1      	mov	r9, sl
 8008026:	4652      	mov	r2, sl
 8008028:	e7c7      	b.n	8007fba <_dtoa_r+0x23a>
 800802a:	3101      	adds	r1, #1
 800802c:	0040      	lsls	r0, r0, #1
 800802e:	e7c7      	b.n	8007fc0 <_dtoa_r+0x240>
 8008030:	636f4361 	.word	0x636f4361
 8008034:	3fd287a7 	.word	0x3fd287a7
 8008038:	8b60c8b3 	.word	0x8b60c8b3
 800803c:	3fc68a28 	.word	0x3fc68a28
 8008040:	509f79fb 	.word	0x509f79fb
 8008044:	3fd34413 	.word	0x3fd34413
 8008048:	0800a2b9 	.word	0x0800a2b9
 800804c:	0800a2d0 	.word	0x0800a2d0
 8008050:	7ff00000 	.word	0x7ff00000
 8008054:	0800a2b5 	.word	0x0800a2b5
 8008058:	0800a2ac 	.word	0x0800a2ac
 800805c:	0800a289 	.word	0x0800a289
 8008060:	0800a3c0 	.word	0x0800a3c0
 8008064:	0800a328 	.word	0x0800a328
 8008068:	69f2      	ldr	r2, [r6, #28]
 800806a:	9901      	ldr	r1, [sp, #4]
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	f1b9 0f0e 	cmp.w	r9, #14
 8008072:	d86c      	bhi.n	800814e <_dtoa_r+0x3ce>
 8008074:	2c00      	cmp	r4, #0
 8008076:	d06a      	beq.n	800814e <_dtoa_r+0x3ce>
 8008078:	f1bb 0f00 	cmp.w	fp, #0
 800807c:	f340 80a0 	ble.w	80081c0 <_dtoa_r+0x440>
 8008080:	4ac1      	ldr	r2, [pc, #772]	; (8008388 <_dtoa_r+0x608>)
 8008082:	f00b 010f 	and.w	r1, fp, #15
 8008086:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800808a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800808e:	ed92 7b00 	vldr	d7, [r2]
 8008092:	ea4f 122b 	mov.w	r2, fp, asr #4
 8008096:	f000 8087 	beq.w	80081a8 <_dtoa_r+0x428>
 800809a:	49bc      	ldr	r1, [pc, #752]	; (800838c <_dtoa_r+0x60c>)
 800809c:	ed91 6b08 	vldr	d6, [r1, #32]
 80080a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80080a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80080a8:	f002 020f 	and.w	r2, r2, #15
 80080ac:	2103      	movs	r1, #3
 80080ae:	48b7      	ldr	r0, [pc, #732]	; (800838c <_dtoa_r+0x60c>)
 80080b0:	2a00      	cmp	r2, #0
 80080b2:	d17b      	bne.n	80081ac <_dtoa_r+0x42c>
 80080b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80080bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	f000 80a0 	beq.w	800820c <_dtoa_r+0x48c>
 80080cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80080d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d8:	f140 8098 	bpl.w	800820c <_dtoa_r+0x48c>
 80080dc:	f1b9 0f00 	cmp.w	r9, #0
 80080e0:	f000 8094 	beq.w	800820c <_dtoa_r+0x48c>
 80080e4:	f1ba 0f00 	cmp.w	sl, #0
 80080e8:	dd2f      	ble.n	800814a <_dtoa_r+0x3ca>
 80080ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80080ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080f6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80080fa:	3101      	adds	r1, #1
 80080fc:	4654      	mov	r4, sl
 80080fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008102:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008106:	ee07 1a90 	vmov	s15, r1
 800810a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800810e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008112:	ee15 7a90 	vmov	r7, s11
 8008116:	ec51 0b15 	vmov	r0, r1, d5
 800811a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800811e:	2c00      	cmp	r4, #0
 8008120:	d177      	bne.n	8008212 <_dtoa_r+0x492>
 8008122:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008126:	ee36 6b47 	vsub.f64	d6, d6, d7
 800812a:	ec41 0b17 	vmov	d7, r0, r1
 800812e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008136:	f300 826a 	bgt.w	800860e <_dtoa_r+0x88e>
 800813a:	eeb1 7b47 	vneg.f64	d7, d7
 800813e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008146:	f100 8260 	bmi.w	800860a <_dtoa_r+0x88a>
 800814a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800814e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008150:	2a00      	cmp	r2, #0
 8008152:	f2c0 811d 	blt.w	8008390 <_dtoa_r+0x610>
 8008156:	f1bb 0f0e 	cmp.w	fp, #14
 800815a:	f300 8119 	bgt.w	8008390 <_dtoa_r+0x610>
 800815e:	4b8a      	ldr	r3, [pc, #552]	; (8008388 <_dtoa_r+0x608>)
 8008160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008164:	ed93 6b00 	vldr	d6, [r3]
 8008168:	9b08      	ldr	r3, [sp, #32]
 800816a:	2b00      	cmp	r3, #0
 800816c:	f280 80b7 	bge.w	80082de <_dtoa_r+0x55e>
 8008170:	f1b9 0f00 	cmp.w	r9, #0
 8008174:	f300 80b3 	bgt.w	80082de <_dtoa_r+0x55e>
 8008178:	f040 8246 	bne.w	8008608 <_dtoa_r+0x888>
 800817c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008180:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008184:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008188:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800818c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008190:	464c      	mov	r4, r9
 8008192:	464f      	mov	r7, r9
 8008194:	f280 821c 	bge.w	80085d0 <_dtoa_r+0x850>
 8008198:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800819c:	2331      	movs	r3, #49	; 0x31
 800819e:	f808 3b01 	strb.w	r3, [r8], #1
 80081a2:	f10b 0b01 	add.w	fp, fp, #1
 80081a6:	e218      	b.n	80085da <_dtoa_r+0x85a>
 80081a8:	2102      	movs	r1, #2
 80081aa:	e780      	b.n	80080ae <_dtoa_r+0x32e>
 80081ac:	07d4      	lsls	r4, r2, #31
 80081ae:	d504      	bpl.n	80081ba <_dtoa_r+0x43a>
 80081b0:	ed90 6b00 	vldr	d6, [r0]
 80081b4:	3101      	adds	r1, #1
 80081b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081ba:	1052      	asrs	r2, r2, #1
 80081bc:	3008      	adds	r0, #8
 80081be:	e777      	b.n	80080b0 <_dtoa_r+0x330>
 80081c0:	d022      	beq.n	8008208 <_dtoa_r+0x488>
 80081c2:	f1cb 0200 	rsb	r2, fp, #0
 80081c6:	4970      	ldr	r1, [pc, #448]	; (8008388 <_dtoa_r+0x608>)
 80081c8:	f002 000f 	and.w	r0, r2, #15
 80081cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80081d0:	ed91 7b00 	vldr	d7, [r1]
 80081d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80081d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081dc:	486b      	ldr	r0, [pc, #428]	; (800838c <_dtoa_r+0x60c>)
 80081de:	1112      	asrs	r2, r2, #4
 80081e0:	2400      	movs	r4, #0
 80081e2:	2102      	movs	r1, #2
 80081e4:	b92a      	cbnz	r2, 80081f2 <_dtoa_r+0x472>
 80081e6:	2c00      	cmp	r4, #0
 80081e8:	f43f af6a 	beq.w	80080c0 <_dtoa_r+0x340>
 80081ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081f0:	e766      	b.n	80080c0 <_dtoa_r+0x340>
 80081f2:	07d7      	lsls	r7, r2, #31
 80081f4:	d505      	bpl.n	8008202 <_dtoa_r+0x482>
 80081f6:	ed90 6b00 	vldr	d6, [r0]
 80081fa:	3101      	adds	r1, #1
 80081fc:	2401      	movs	r4, #1
 80081fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008202:	1052      	asrs	r2, r2, #1
 8008204:	3008      	adds	r0, #8
 8008206:	e7ed      	b.n	80081e4 <_dtoa_r+0x464>
 8008208:	2102      	movs	r1, #2
 800820a:	e759      	b.n	80080c0 <_dtoa_r+0x340>
 800820c:	465a      	mov	r2, fp
 800820e:	464c      	mov	r4, r9
 8008210:	e775      	b.n	80080fe <_dtoa_r+0x37e>
 8008212:	ec41 0b17 	vmov	d7, r0, r1
 8008216:	495c      	ldr	r1, [pc, #368]	; (8008388 <_dtoa_r+0x608>)
 8008218:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800821c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008220:	9901      	ldr	r1, [sp, #4]
 8008222:	440c      	add	r4, r1
 8008224:	9907      	ldr	r1, [sp, #28]
 8008226:	b351      	cbz	r1, 800827e <_dtoa_r+0x4fe>
 8008228:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800822c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008230:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008234:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008238:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800823c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008240:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008244:	ee14 1a90 	vmov	r1, s9
 8008248:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800824c:	3130      	adds	r1, #48	; 0x30
 800824e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008252:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825a:	f808 1b01 	strb.w	r1, [r8], #1
 800825e:	d439      	bmi.n	80082d4 <_dtoa_r+0x554>
 8008260:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008264:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826c:	d472      	bmi.n	8008354 <_dtoa_r+0x5d4>
 800826e:	45a0      	cmp	r8, r4
 8008270:	f43f af6b 	beq.w	800814a <_dtoa_r+0x3ca>
 8008274:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008278:	ee26 6b03 	vmul.f64	d6, d6, d3
 800827c:	e7e0      	b.n	8008240 <_dtoa_r+0x4c0>
 800827e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008282:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008286:	4620      	mov	r0, r4
 8008288:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800828c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008290:	ee14 1a90 	vmov	r1, s9
 8008294:	3130      	adds	r1, #48	; 0x30
 8008296:	f808 1b01 	strb.w	r1, [r8], #1
 800829a:	45a0      	cmp	r8, r4
 800829c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082a4:	d118      	bne.n	80082d8 <_dtoa_r+0x558>
 80082a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80082aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80082ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80082b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b6:	dc4d      	bgt.n	8008354 <_dtoa_r+0x5d4>
 80082b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80082bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	f57f af41 	bpl.w	800814a <_dtoa_r+0x3ca>
 80082c8:	4680      	mov	r8, r0
 80082ca:	3801      	subs	r0, #1
 80082cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80082d0:	2b30      	cmp	r3, #48	; 0x30
 80082d2:	d0f9      	beq.n	80082c8 <_dtoa_r+0x548>
 80082d4:	4693      	mov	fp, r2
 80082d6:	e02a      	b.n	800832e <_dtoa_r+0x5ae>
 80082d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80082dc:	e7d6      	b.n	800828c <_dtoa_r+0x50c>
 80082de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80082e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80082ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80082ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80082f2:	ee15 3a10 	vmov	r3, s10
 80082f6:	3330      	adds	r3, #48	; 0x30
 80082f8:	f808 3b01 	strb.w	r3, [r8], #1
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	eba8 0303 	sub.w	r3, r8, r3
 8008302:	4599      	cmp	r9, r3
 8008304:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008308:	eea3 7b46 	vfms.f64	d7, d3, d6
 800830c:	d133      	bne.n	8008376 <_dtoa_r+0x5f6>
 800830e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008312:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831a:	dc1a      	bgt.n	8008352 <_dtoa_r+0x5d2>
 800831c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	d103      	bne.n	800832e <_dtoa_r+0x5ae>
 8008326:	ee15 3a10 	vmov	r3, s10
 800832a:	07d9      	lsls	r1, r3, #31
 800832c:	d411      	bmi.n	8008352 <_dtoa_r+0x5d2>
 800832e:	4629      	mov	r1, r5
 8008330:	4630      	mov	r0, r6
 8008332:	f000 fbd1 	bl	8008ad8 <_Bfree>
 8008336:	2300      	movs	r3, #0
 8008338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800833a:	f888 3000 	strb.w	r3, [r8]
 800833e:	f10b 0301 	add.w	r3, fp, #1
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008346:	2b00      	cmp	r3, #0
 8008348:	f43f ad69 	beq.w	8007e1e <_dtoa_r+0x9e>
 800834c:	f8c3 8000 	str.w	r8, [r3]
 8008350:	e565      	b.n	8007e1e <_dtoa_r+0x9e>
 8008352:	465a      	mov	r2, fp
 8008354:	4643      	mov	r3, r8
 8008356:	4698      	mov	r8, r3
 8008358:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800835c:	2939      	cmp	r1, #57	; 0x39
 800835e:	d106      	bne.n	800836e <_dtoa_r+0x5ee>
 8008360:	9901      	ldr	r1, [sp, #4]
 8008362:	4299      	cmp	r1, r3
 8008364:	d1f7      	bne.n	8008356 <_dtoa_r+0x5d6>
 8008366:	9801      	ldr	r0, [sp, #4]
 8008368:	2130      	movs	r1, #48	; 0x30
 800836a:	3201      	adds	r2, #1
 800836c:	7001      	strb	r1, [r0, #0]
 800836e:	7819      	ldrb	r1, [r3, #0]
 8008370:	3101      	adds	r1, #1
 8008372:	7019      	strb	r1, [r3, #0]
 8008374:	e7ae      	b.n	80082d4 <_dtoa_r+0x554>
 8008376:	ee27 7b04 	vmul.f64	d7, d7, d4
 800837a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008382:	d1b2      	bne.n	80082ea <_dtoa_r+0x56a>
 8008384:	e7d3      	b.n	800832e <_dtoa_r+0x5ae>
 8008386:	bf00      	nop
 8008388:	0800a3c0 	.word	0x0800a3c0
 800838c:	0800a398 	.word	0x0800a398
 8008390:	9907      	ldr	r1, [sp, #28]
 8008392:	2900      	cmp	r1, #0
 8008394:	f000 80d0 	beq.w	8008538 <_dtoa_r+0x7b8>
 8008398:	9906      	ldr	r1, [sp, #24]
 800839a:	2901      	cmp	r1, #1
 800839c:	f300 80b4 	bgt.w	8008508 <_dtoa_r+0x788>
 80083a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083a2:	2900      	cmp	r1, #0
 80083a4:	f000 80ac 	beq.w	8008500 <_dtoa_r+0x780>
 80083a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80083b0:	461c      	mov	r4, r3
 80083b2:	9309      	str	r3, [sp, #36]	; 0x24
 80083b4:	9b04      	ldr	r3, [sp, #16]
 80083b6:	4413      	add	r3, r2
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	9b05      	ldr	r3, [sp, #20]
 80083bc:	2101      	movs	r1, #1
 80083be:	4413      	add	r3, r2
 80083c0:	4630      	mov	r0, r6
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	f000 fc3e 	bl	8008c44 <__i2b>
 80083c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ca:	4607      	mov	r7, r0
 80083cc:	f1b8 0f00 	cmp.w	r8, #0
 80083d0:	d00d      	beq.n	80083ee <_dtoa_r+0x66e>
 80083d2:	9a05      	ldr	r2, [sp, #20]
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	dd0a      	ble.n	80083ee <_dtoa_r+0x66e>
 80083d8:	4542      	cmp	r2, r8
 80083da:	9904      	ldr	r1, [sp, #16]
 80083dc:	bfa8      	it	ge
 80083de:	4642      	movge	r2, r8
 80083e0:	1a89      	subs	r1, r1, r2
 80083e2:	9104      	str	r1, [sp, #16]
 80083e4:	9905      	ldr	r1, [sp, #20]
 80083e6:	eba8 0802 	sub.w	r8, r8, r2
 80083ea:	1a8a      	subs	r2, r1, r2
 80083ec:	9205      	str	r2, [sp, #20]
 80083ee:	b303      	cbz	r3, 8008432 <_dtoa_r+0x6b2>
 80083f0:	9a07      	ldr	r2, [sp, #28]
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	f000 80a5 	beq.w	8008542 <_dtoa_r+0x7c2>
 80083f8:	2c00      	cmp	r4, #0
 80083fa:	dd13      	ble.n	8008424 <_dtoa_r+0x6a4>
 80083fc:	4639      	mov	r1, r7
 80083fe:	4622      	mov	r2, r4
 8008400:	4630      	mov	r0, r6
 8008402:	930d      	str	r3, [sp, #52]	; 0x34
 8008404:	f000 fcde 	bl	8008dc4 <__pow5mult>
 8008408:	462a      	mov	r2, r5
 800840a:	4601      	mov	r1, r0
 800840c:	4607      	mov	r7, r0
 800840e:	4630      	mov	r0, r6
 8008410:	f000 fc2e 	bl	8008c70 <__multiply>
 8008414:	4629      	mov	r1, r5
 8008416:	9009      	str	r0, [sp, #36]	; 0x24
 8008418:	4630      	mov	r0, r6
 800841a:	f000 fb5d 	bl	8008ad8 <_Bfree>
 800841e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008422:	4615      	mov	r5, r2
 8008424:	1b1a      	subs	r2, r3, r4
 8008426:	d004      	beq.n	8008432 <_dtoa_r+0x6b2>
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f000 fcca 	bl	8008dc4 <__pow5mult>
 8008430:	4605      	mov	r5, r0
 8008432:	2101      	movs	r1, #1
 8008434:	4630      	mov	r0, r6
 8008436:	f000 fc05 	bl	8008c44 <__i2b>
 800843a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	f340 8081 	ble.w	8008546 <_dtoa_r+0x7c6>
 8008444:	461a      	mov	r2, r3
 8008446:	4601      	mov	r1, r0
 8008448:	4630      	mov	r0, r6
 800844a:	f000 fcbb 	bl	8008dc4 <__pow5mult>
 800844e:	9b06      	ldr	r3, [sp, #24]
 8008450:	2b01      	cmp	r3, #1
 8008452:	4604      	mov	r4, r0
 8008454:	dd7a      	ble.n	800854c <_dtoa_r+0x7cc>
 8008456:	2300      	movs	r3, #0
 8008458:	9309      	str	r3, [sp, #36]	; 0x24
 800845a:	6922      	ldr	r2, [r4, #16]
 800845c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008460:	6910      	ldr	r0, [r2, #16]
 8008462:	f000 fba1 	bl	8008ba8 <__hi0bits>
 8008466:	f1c0 0020 	rsb	r0, r0, #32
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	4418      	add	r0, r3
 800846e:	f010 001f 	ands.w	r0, r0, #31
 8008472:	f000 8093 	beq.w	800859c <_dtoa_r+0x81c>
 8008476:	f1c0 0220 	rsb	r2, r0, #32
 800847a:	2a04      	cmp	r2, #4
 800847c:	f340 8085 	ble.w	800858a <_dtoa_r+0x80a>
 8008480:	9b04      	ldr	r3, [sp, #16]
 8008482:	f1c0 001c 	rsb	r0, r0, #28
 8008486:	4403      	add	r3, r0
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	4480      	add	r8, r0
 800848e:	4403      	add	r3, r0
 8008490:	9305      	str	r3, [sp, #20]
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	dd05      	ble.n	80084a4 <_dtoa_r+0x724>
 8008498:	4629      	mov	r1, r5
 800849a:	461a      	mov	r2, r3
 800849c:	4630      	mov	r0, r6
 800849e:	f000 fceb 	bl	8008e78 <__lshift>
 80084a2:	4605      	mov	r5, r0
 80084a4:	9b05      	ldr	r3, [sp, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dd05      	ble.n	80084b6 <_dtoa_r+0x736>
 80084aa:	4621      	mov	r1, r4
 80084ac:	461a      	mov	r2, r3
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 fce2 	bl	8008e78 <__lshift>
 80084b4:	4604      	mov	r4, r0
 80084b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d071      	beq.n	80085a0 <_dtoa_r+0x820>
 80084bc:	4621      	mov	r1, r4
 80084be:	4628      	mov	r0, r5
 80084c0:	f000 fd46 	bl	8008f50 <__mcmp>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	da6b      	bge.n	80085a0 <_dtoa_r+0x820>
 80084c8:	2300      	movs	r3, #0
 80084ca:	4629      	mov	r1, r5
 80084cc:	220a      	movs	r2, #10
 80084ce:	4630      	mov	r0, r6
 80084d0:	f000 fb24 	bl	8008b1c <__multadd>
 80084d4:	9b07      	ldr	r3, [sp, #28]
 80084d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084da:	4605      	mov	r5, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8197 	beq.w	8008810 <_dtoa_r+0xa90>
 80084e2:	4639      	mov	r1, r7
 80084e4:	2300      	movs	r3, #0
 80084e6:	220a      	movs	r2, #10
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fb17 	bl	8008b1c <__multadd>
 80084ee:	f1ba 0f00 	cmp.w	sl, #0
 80084f2:	4607      	mov	r7, r0
 80084f4:	f300 8093 	bgt.w	800861e <_dtoa_r+0x89e>
 80084f8:	9b06      	ldr	r3, [sp, #24]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	dc57      	bgt.n	80085ae <_dtoa_r+0x82e>
 80084fe:	e08e      	b.n	800861e <_dtoa_r+0x89e>
 8008500:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008502:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008506:	e751      	b.n	80083ac <_dtoa_r+0x62c>
 8008508:	f109 34ff 	add.w	r4, r9, #4294967295
 800850c:	42a3      	cmp	r3, r4
 800850e:	bfbf      	itttt	lt
 8008510:	1ae2      	sublt	r2, r4, r3
 8008512:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008514:	189b      	addlt	r3, r3, r2
 8008516:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008518:	bfae      	itee	ge
 800851a:	1b1c      	subge	r4, r3, r4
 800851c:	4623      	movlt	r3, r4
 800851e:	2400      	movlt	r4, #0
 8008520:	f1b9 0f00 	cmp.w	r9, #0
 8008524:	bfb5      	itete	lt
 8008526:	9a04      	ldrlt	r2, [sp, #16]
 8008528:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800852c:	eba2 0809 	sublt.w	r8, r2, r9
 8008530:	464a      	movge	r2, r9
 8008532:	bfb8      	it	lt
 8008534:	2200      	movlt	r2, #0
 8008536:	e73c      	b.n	80083b2 <_dtoa_r+0x632>
 8008538:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800853c:	9f07      	ldr	r7, [sp, #28]
 800853e:	461c      	mov	r4, r3
 8008540:	e744      	b.n	80083cc <_dtoa_r+0x64c>
 8008542:	461a      	mov	r2, r3
 8008544:	e770      	b.n	8008428 <_dtoa_r+0x6a8>
 8008546:	9b06      	ldr	r3, [sp, #24]
 8008548:	2b01      	cmp	r3, #1
 800854a:	dc18      	bgt.n	800857e <_dtoa_r+0x7fe>
 800854c:	9b02      	ldr	r3, [sp, #8]
 800854e:	b9b3      	cbnz	r3, 800857e <_dtoa_r+0x7fe>
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008556:	b9a2      	cbnz	r2, 8008582 <_dtoa_r+0x802>
 8008558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800855c:	0d12      	lsrs	r2, r2, #20
 800855e:	0512      	lsls	r2, r2, #20
 8008560:	b18a      	cbz	r2, 8008586 <_dtoa_r+0x806>
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	3301      	adds	r3, #1
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9b05      	ldr	r3, [sp, #20]
 800856a:	3301      	adds	r3, #1
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	2301      	movs	r3, #1
 8008570:	9309      	str	r3, [sp, #36]	; 0x24
 8008572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008574:	2b00      	cmp	r3, #0
 8008576:	f47f af70 	bne.w	800845a <_dtoa_r+0x6da>
 800857a:	2001      	movs	r0, #1
 800857c:	e775      	b.n	800846a <_dtoa_r+0x6ea>
 800857e:	2300      	movs	r3, #0
 8008580:	e7f6      	b.n	8008570 <_dtoa_r+0x7f0>
 8008582:	9b02      	ldr	r3, [sp, #8]
 8008584:	e7f4      	b.n	8008570 <_dtoa_r+0x7f0>
 8008586:	9209      	str	r2, [sp, #36]	; 0x24
 8008588:	e7f3      	b.n	8008572 <_dtoa_r+0x7f2>
 800858a:	d082      	beq.n	8008492 <_dtoa_r+0x712>
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	321c      	adds	r2, #28
 8008590:	4413      	add	r3, r2
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	4490      	add	r8, r2
 8008598:	4413      	add	r3, r2
 800859a:	e779      	b.n	8008490 <_dtoa_r+0x710>
 800859c:	4602      	mov	r2, r0
 800859e:	e7f5      	b.n	800858c <_dtoa_r+0x80c>
 80085a0:	f1b9 0f00 	cmp.w	r9, #0
 80085a4:	dc36      	bgt.n	8008614 <_dtoa_r+0x894>
 80085a6:	9b06      	ldr	r3, [sp, #24]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	dd33      	ble.n	8008614 <_dtoa_r+0x894>
 80085ac:	46ca      	mov	sl, r9
 80085ae:	f1ba 0f00 	cmp.w	sl, #0
 80085b2:	d10d      	bne.n	80085d0 <_dtoa_r+0x850>
 80085b4:	4621      	mov	r1, r4
 80085b6:	4653      	mov	r3, sl
 80085b8:	2205      	movs	r2, #5
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 faae 	bl	8008b1c <__multadd>
 80085c0:	4601      	mov	r1, r0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4628      	mov	r0, r5
 80085c6:	f000 fcc3 	bl	8008f50 <__mcmp>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f73f ade4 	bgt.w	8008198 <_dtoa_r+0x418>
 80085d0:	9b08      	ldr	r3, [sp, #32]
 80085d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085d6:	ea6f 0b03 	mvn.w	fp, r3
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	4621      	mov	r1, r4
 80085e0:	4630      	mov	r0, r6
 80085e2:	f000 fa79 	bl	8008ad8 <_Bfree>
 80085e6:	2f00      	cmp	r7, #0
 80085e8:	f43f aea1 	beq.w	800832e <_dtoa_r+0x5ae>
 80085ec:	f1b9 0f00 	cmp.w	r9, #0
 80085f0:	d005      	beq.n	80085fe <_dtoa_r+0x87e>
 80085f2:	45b9      	cmp	r9, r7
 80085f4:	d003      	beq.n	80085fe <_dtoa_r+0x87e>
 80085f6:	4649      	mov	r1, r9
 80085f8:	4630      	mov	r0, r6
 80085fa:	f000 fa6d 	bl	8008ad8 <_Bfree>
 80085fe:	4639      	mov	r1, r7
 8008600:	4630      	mov	r0, r6
 8008602:	f000 fa69 	bl	8008ad8 <_Bfree>
 8008606:	e692      	b.n	800832e <_dtoa_r+0x5ae>
 8008608:	2400      	movs	r4, #0
 800860a:	4627      	mov	r7, r4
 800860c:	e7e0      	b.n	80085d0 <_dtoa_r+0x850>
 800860e:	4693      	mov	fp, r2
 8008610:	4627      	mov	r7, r4
 8008612:	e5c1      	b.n	8008198 <_dtoa_r+0x418>
 8008614:	9b07      	ldr	r3, [sp, #28]
 8008616:	46ca      	mov	sl, r9
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8100 	beq.w	800881e <_dtoa_r+0xa9e>
 800861e:	f1b8 0f00 	cmp.w	r8, #0
 8008622:	dd05      	ble.n	8008630 <_dtoa_r+0x8b0>
 8008624:	4639      	mov	r1, r7
 8008626:	4642      	mov	r2, r8
 8008628:	4630      	mov	r0, r6
 800862a:	f000 fc25 	bl	8008e78 <__lshift>
 800862e:	4607      	mov	r7, r0
 8008630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d05d      	beq.n	80086f2 <_dtoa_r+0x972>
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	4630      	mov	r0, r6
 800863a:	f000 fa0d 	bl	8008a58 <_Balloc>
 800863e:	4680      	mov	r8, r0
 8008640:	b928      	cbnz	r0, 800864e <_dtoa_r+0x8ce>
 8008642:	4b82      	ldr	r3, [pc, #520]	; (800884c <_dtoa_r+0xacc>)
 8008644:	4602      	mov	r2, r0
 8008646:	f240 21ef 	movw	r1, #751	; 0x2ef
 800864a:	f7ff bbb1 	b.w	8007db0 <_dtoa_r+0x30>
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	3202      	adds	r2, #2
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	f107 010c 	add.w	r1, r7, #12
 8008658:	300c      	adds	r0, #12
 800865a:	f000 ffa9 	bl	80095b0 <memcpy>
 800865e:	2201      	movs	r2, #1
 8008660:	4641      	mov	r1, r8
 8008662:	4630      	mov	r0, r6
 8008664:	f000 fc08 	bl	8008e78 <__lshift>
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	3301      	adds	r3, #1
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	9b01      	ldr	r3, [sp, #4]
 8008670:	4453      	add	r3, sl
 8008672:	9308      	str	r3, [sp, #32]
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	46b9      	mov	r9, r7
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	4607      	mov	r7, r0
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	4621      	mov	r1, r4
 8008684:	3b01      	subs	r3, #1
 8008686:	4628      	mov	r0, r5
 8008688:	9302      	str	r3, [sp, #8]
 800868a:	f7ff faf0 	bl	8007c6e <quorem>
 800868e:	4603      	mov	r3, r0
 8008690:	3330      	adds	r3, #48	; 0x30
 8008692:	9005      	str	r0, [sp, #20]
 8008694:	4649      	mov	r1, r9
 8008696:	4628      	mov	r0, r5
 8008698:	9309      	str	r3, [sp, #36]	; 0x24
 800869a:	f000 fc59 	bl	8008f50 <__mcmp>
 800869e:	463a      	mov	r2, r7
 80086a0:	4682      	mov	sl, r0
 80086a2:	4621      	mov	r1, r4
 80086a4:	4630      	mov	r0, r6
 80086a6:	f000 fc6f 	bl	8008f88 <__mdiff>
 80086aa:	68c2      	ldr	r2, [r0, #12]
 80086ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ae:	4680      	mov	r8, r0
 80086b0:	bb0a      	cbnz	r2, 80086f6 <_dtoa_r+0x976>
 80086b2:	4601      	mov	r1, r0
 80086b4:	4628      	mov	r0, r5
 80086b6:	f000 fc4b 	bl	8008f50 <__mcmp>
 80086ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086bc:	4602      	mov	r2, r0
 80086be:	4641      	mov	r1, r8
 80086c0:	4630      	mov	r0, r6
 80086c2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80086c6:	f000 fa07 	bl	8008ad8 <_Bfree>
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80086d2:	ea43 0102 	orr.w	r1, r3, r2
 80086d6:	9b07      	ldr	r3, [sp, #28]
 80086d8:	4319      	orrs	r1, r3
 80086da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086dc:	d10d      	bne.n	80086fa <_dtoa_r+0x97a>
 80086de:	2b39      	cmp	r3, #57	; 0x39
 80086e0:	d029      	beq.n	8008736 <_dtoa_r+0x9b6>
 80086e2:	f1ba 0f00 	cmp.w	sl, #0
 80086e6:	dd01      	ble.n	80086ec <_dtoa_r+0x96c>
 80086e8:	9b05      	ldr	r3, [sp, #20]
 80086ea:	3331      	adds	r3, #49	; 0x31
 80086ec:	9a02      	ldr	r2, [sp, #8]
 80086ee:	7013      	strb	r3, [r2, #0]
 80086f0:	e775      	b.n	80085de <_dtoa_r+0x85e>
 80086f2:	4638      	mov	r0, r7
 80086f4:	e7b8      	b.n	8008668 <_dtoa_r+0x8e8>
 80086f6:	2201      	movs	r2, #1
 80086f8:	e7e1      	b.n	80086be <_dtoa_r+0x93e>
 80086fa:	f1ba 0f00 	cmp.w	sl, #0
 80086fe:	db06      	blt.n	800870e <_dtoa_r+0x98e>
 8008700:	9906      	ldr	r1, [sp, #24]
 8008702:	ea41 0a0a 	orr.w	sl, r1, sl
 8008706:	9907      	ldr	r1, [sp, #28]
 8008708:	ea5a 0a01 	orrs.w	sl, sl, r1
 800870c:	d120      	bne.n	8008750 <_dtoa_r+0x9d0>
 800870e:	2a00      	cmp	r2, #0
 8008710:	ddec      	ble.n	80086ec <_dtoa_r+0x96c>
 8008712:	4629      	mov	r1, r5
 8008714:	2201      	movs	r2, #1
 8008716:	4630      	mov	r0, r6
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	f000 fbad 	bl	8008e78 <__lshift>
 800871e:	4621      	mov	r1, r4
 8008720:	4605      	mov	r5, r0
 8008722:	f000 fc15 	bl	8008f50 <__mcmp>
 8008726:	2800      	cmp	r0, #0
 8008728:	9b04      	ldr	r3, [sp, #16]
 800872a:	dc02      	bgt.n	8008732 <_dtoa_r+0x9b2>
 800872c:	d1de      	bne.n	80086ec <_dtoa_r+0x96c>
 800872e:	07da      	lsls	r2, r3, #31
 8008730:	d5dc      	bpl.n	80086ec <_dtoa_r+0x96c>
 8008732:	2b39      	cmp	r3, #57	; 0x39
 8008734:	d1d8      	bne.n	80086e8 <_dtoa_r+0x968>
 8008736:	9a02      	ldr	r2, [sp, #8]
 8008738:	2339      	movs	r3, #57	; 0x39
 800873a:	7013      	strb	r3, [r2, #0]
 800873c:	4643      	mov	r3, r8
 800873e:	4698      	mov	r8, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008746:	2a39      	cmp	r2, #57	; 0x39
 8008748:	d051      	beq.n	80087ee <_dtoa_r+0xa6e>
 800874a:	3201      	adds	r2, #1
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	e746      	b.n	80085de <_dtoa_r+0x85e>
 8008750:	2a00      	cmp	r2, #0
 8008752:	dd03      	ble.n	800875c <_dtoa_r+0x9dc>
 8008754:	2b39      	cmp	r3, #57	; 0x39
 8008756:	d0ee      	beq.n	8008736 <_dtoa_r+0x9b6>
 8008758:	3301      	adds	r3, #1
 800875a:	e7c7      	b.n	80086ec <_dtoa_r+0x96c>
 800875c:	9a04      	ldr	r2, [sp, #16]
 800875e:	9908      	ldr	r1, [sp, #32]
 8008760:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008764:	428a      	cmp	r2, r1
 8008766:	d02b      	beq.n	80087c0 <_dtoa_r+0xa40>
 8008768:	4629      	mov	r1, r5
 800876a:	2300      	movs	r3, #0
 800876c:	220a      	movs	r2, #10
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f9d4 	bl	8008b1c <__multadd>
 8008774:	45b9      	cmp	r9, r7
 8008776:	4605      	mov	r5, r0
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	f04f 020a 	mov.w	r2, #10
 8008780:	4649      	mov	r1, r9
 8008782:	4630      	mov	r0, r6
 8008784:	d107      	bne.n	8008796 <_dtoa_r+0xa16>
 8008786:	f000 f9c9 	bl	8008b1c <__multadd>
 800878a:	4681      	mov	r9, r0
 800878c:	4607      	mov	r7, r0
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	3301      	adds	r3, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	e774      	b.n	8008680 <_dtoa_r+0x900>
 8008796:	f000 f9c1 	bl	8008b1c <__multadd>
 800879a:	4639      	mov	r1, r7
 800879c:	4681      	mov	r9, r0
 800879e:	2300      	movs	r3, #0
 80087a0:	220a      	movs	r2, #10
 80087a2:	4630      	mov	r0, r6
 80087a4:	f000 f9ba 	bl	8008b1c <__multadd>
 80087a8:	4607      	mov	r7, r0
 80087aa:	e7f0      	b.n	800878e <_dtoa_r+0xa0e>
 80087ac:	f1ba 0f00 	cmp.w	sl, #0
 80087b0:	9a01      	ldr	r2, [sp, #4]
 80087b2:	bfcc      	ite	gt
 80087b4:	46d0      	movgt	r8, sl
 80087b6:	f04f 0801 	movle.w	r8, #1
 80087ba:	4490      	add	r8, r2
 80087bc:	f04f 0900 	mov.w	r9, #0
 80087c0:	4629      	mov	r1, r5
 80087c2:	2201      	movs	r2, #1
 80087c4:	4630      	mov	r0, r6
 80087c6:	9302      	str	r3, [sp, #8]
 80087c8:	f000 fb56 	bl	8008e78 <__lshift>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4605      	mov	r5, r0
 80087d0:	f000 fbbe 	bl	8008f50 <__mcmp>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	dcb1      	bgt.n	800873c <_dtoa_r+0x9bc>
 80087d8:	d102      	bne.n	80087e0 <_dtoa_r+0xa60>
 80087da:	9b02      	ldr	r3, [sp, #8]
 80087dc:	07db      	lsls	r3, r3, #31
 80087de:	d4ad      	bmi.n	800873c <_dtoa_r+0x9bc>
 80087e0:	4643      	mov	r3, r8
 80087e2:	4698      	mov	r8, r3
 80087e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087e8:	2a30      	cmp	r2, #48	; 0x30
 80087ea:	d0fa      	beq.n	80087e2 <_dtoa_r+0xa62>
 80087ec:	e6f7      	b.n	80085de <_dtoa_r+0x85e>
 80087ee:	9a01      	ldr	r2, [sp, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d1a4      	bne.n	800873e <_dtoa_r+0x9be>
 80087f4:	f10b 0b01 	add.w	fp, fp, #1
 80087f8:	2331      	movs	r3, #49	; 0x31
 80087fa:	e778      	b.n	80086ee <_dtoa_r+0x96e>
 80087fc:	4b14      	ldr	r3, [pc, #80]	; (8008850 <_dtoa_r+0xad0>)
 80087fe:	f7ff bb2a 	b.w	8007e56 <_dtoa_r+0xd6>
 8008802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008804:	2b00      	cmp	r3, #0
 8008806:	f47f ab05 	bne.w	8007e14 <_dtoa_r+0x94>
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <_dtoa_r+0xad4>)
 800880c:	f7ff bb23 	b.w	8007e56 <_dtoa_r+0xd6>
 8008810:	f1ba 0f00 	cmp.w	sl, #0
 8008814:	dc03      	bgt.n	800881e <_dtoa_r+0xa9e>
 8008816:	9b06      	ldr	r3, [sp, #24]
 8008818:	2b02      	cmp	r3, #2
 800881a:	f73f aec8 	bgt.w	80085ae <_dtoa_r+0x82e>
 800881e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008822:	4621      	mov	r1, r4
 8008824:	4628      	mov	r0, r5
 8008826:	f7ff fa22 	bl	8007c6e <quorem>
 800882a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800882e:	f808 3b01 	strb.w	r3, [r8], #1
 8008832:	9a01      	ldr	r2, [sp, #4]
 8008834:	eba8 0202 	sub.w	r2, r8, r2
 8008838:	4592      	cmp	sl, r2
 800883a:	ddb7      	ble.n	80087ac <_dtoa_r+0xa2c>
 800883c:	4629      	mov	r1, r5
 800883e:	2300      	movs	r3, #0
 8008840:	220a      	movs	r2, #10
 8008842:	4630      	mov	r0, r6
 8008844:	f000 f96a 	bl	8008b1c <__multadd>
 8008848:	4605      	mov	r5, r0
 800884a:	e7ea      	b.n	8008822 <_dtoa_r+0xaa2>
 800884c:	0800a328 	.word	0x0800a328
 8008850:	0800a288 	.word	0x0800a288
 8008854:	0800a2ac 	.word	0x0800a2ac

08008858 <_free_r>:
 8008858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800885a:	2900      	cmp	r1, #0
 800885c:	d044      	beq.n	80088e8 <_free_r+0x90>
 800885e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008862:	9001      	str	r0, [sp, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f1a1 0404 	sub.w	r4, r1, #4
 800886a:	bfb8      	it	lt
 800886c:	18e4      	addlt	r4, r4, r3
 800886e:	f000 f8e7 	bl	8008a40 <__malloc_lock>
 8008872:	4a1e      	ldr	r2, [pc, #120]	; (80088ec <_free_r+0x94>)
 8008874:	9801      	ldr	r0, [sp, #4]
 8008876:	6813      	ldr	r3, [r2, #0]
 8008878:	b933      	cbnz	r3, 8008888 <_free_r+0x30>
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	6014      	str	r4, [r2, #0]
 800887e:	b003      	add	sp, #12
 8008880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008884:	f000 b8e2 	b.w	8008a4c <__malloc_unlock>
 8008888:	42a3      	cmp	r3, r4
 800888a:	d908      	bls.n	800889e <_free_r+0x46>
 800888c:	6825      	ldr	r5, [r4, #0]
 800888e:	1961      	adds	r1, r4, r5
 8008890:	428b      	cmp	r3, r1
 8008892:	bf01      	itttt	eq
 8008894:	6819      	ldreq	r1, [r3, #0]
 8008896:	685b      	ldreq	r3, [r3, #4]
 8008898:	1949      	addeq	r1, r1, r5
 800889a:	6021      	streq	r1, [r4, #0]
 800889c:	e7ed      	b.n	800887a <_free_r+0x22>
 800889e:	461a      	mov	r2, r3
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	b10b      	cbz	r3, 80088a8 <_free_r+0x50>
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	d9fa      	bls.n	800889e <_free_r+0x46>
 80088a8:	6811      	ldr	r1, [r2, #0]
 80088aa:	1855      	adds	r5, r2, r1
 80088ac:	42a5      	cmp	r5, r4
 80088ae:	d10b      	bne.n	80088c8 <_free_r+0x70>
 80088b0:	6824      	ldr	r4, [r4, #0]
 80088b2:	4421      	add	r1, r4
 80088b4:	1854      	adds	r4, r2, r1
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	d1e0      	bne.n	800887e <_free_r+0x26>
 80088bc:	681c      	ldr	r4, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	6053      	str	r3, [r2, #4]
 80088c2:	440c      	add	r4, r1
 80088c4:	6014      	str	r4, [r2, #0]
 80088c6:	e7da      	b.n	800887e <_free_r+0x26>
 80088c8:	d902      	bls.n	80088d0 <_free_r+0x78>
 80088ca:	230c      	movs	r3, #12
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	e7d6      	b.n	800887e <_free_r+0x26>
 80088d0:	6825      	ldr	r5, [r4, #0]
 80088d2:	1961      	adds	r1, r4, r5
 80088d4:	428b      	cmp	r3, r1
 80088d6:	bf04      	itt	eq
 80088d8:	6819      	ldreq	r1, [r3, #0]
 80088da:	685b      	ldreq	r3, [r3, #4]
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	bf04      	itt	eq
 80088e0:	1949      	addeq	r1, r1, r5
 80088e2:	6021      	streq	r1, [r4, #0]
 80088e4:	6054      	str	r4, [r2, #4]
 80088e6:	e7ca      	b.n	800887e <_free_r+0x26>
 80088e8:	b003      	add	sp, #12
 80088ea:	bd30      	pop	{r4, r5, pc}
 80088ec:	2400042c 	.word	0x2400042c

080088f0 <malloc>:
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <malloc+0xc>)
 80088f2:	4601      	mov	r1, r0
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	f000 b823 	b.w	8008940 <_malloc_r>
 80088fa:	bf00      	nop
 80088fc:	24000068 	.word	0x24000068

08008900 <sbrk_aligned>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4e0e      	ldr	r6, [pc, #56]	; (800893c <sbrk_aligned+0x3c>)
 8008904:	460c      	mov	r4, r1
 8008906:	6831      	ldr	r1, [r6, #0]
 8008908:	4605      	mov	r5, r0
 800890a:	b911      	cbnz	r1, 8008912 <sbrk_aligned+0x12>
 800890c:	f000 fe40 	bl	8009590 <_sbrk_r>
 8008910:	6030      	str	r0, [r6, #0]
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	f000 fe3b 	bl	8009590 <_sbrk_r>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	d00a      	beq.n	8008934 <sbrk_aligned+0x34>
 800891e:	1cc4      	adds	r4, r0, #3
 8008920:	f024 0403 	bic.w	r4, r4, #3
 8008924:	42a0      	cmp	r0, r4
 8008926:	d007      	beq.n	8008938 <sbrk_aligned+0x38>
 8008928:	1a21      	subs	r1, r4, r0
 800892a:	4628      	mov	r0, r5
 800892c:	f000 fe30 	bl	8009590 <_sbrk_r>
 8008930:	3001      	adds	r0, #1
 8008932:	d101      	bne.n	8008938 <sbrk_aligned+0x38>
 8008934:	f04f 34ff 	mov.w	r4, #4294967295
 8008938:	4620      	mov	r0, r4
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	24000430 	.word	0x24000430

08008940 <_malloc_r>:
 8008940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008944:	1ccd      	adds	r5, r1, #3
 8008946:	f025 0503 	bic.w	r5, r5, #3
 800894a:	3508      	adds	r5, #8
 800894c:	2d0c      	cmp	r5, #12
 800894e:	bf38      	it	cc
 8008950:	250c      	movcc	r5, #12
 8008952:	2d00      	cmp	r5, #0
 8008954:	4607      	mov	r7, r0
 8008956:	db01      	blt.n	800895c <_malloc_r+0x1c>
 8008958:	42a9      	cmp	r1, r5
 800895a:	d905      	bls.n	8008968 <_malloc_r+0x28>
 800895c:	230c      	movs	r3, #12
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	2600      	movs	r6, #0
 8008962:	4630      	mov	r0, r6
 8008964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008968:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a3c <_malloc_r+0xfc>
 800896c:	f000 f868 	bl	8008a40 <__malloc_lock>
 8008970:	f8d8 3000 	ldr.w	r3, [r8]
 8008974:	461c      	mov	r4, r3
 8008976:	bb5c      	cbnz	r4, 80089d0 <_malloc_r+0x90>
 8008978:	4629      	mov	r1, r5
 800897a:	4638      	mov	r0, r7
 800897c:	f7ff ffc0 	bl	8008900 <sbrk_aligned>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	4604      	mov	r4, r0
 8008984:	d155      	bne.n	8008a32 <_malloc_r+0xf2>
 8008986:	f8d8 4000 	ldr.w	r4, [r8]
 800898a:	4626      	mov	r6, r4
 800898c:	2e00      	cmp	r6, #0
 800898e:	d145      	bne.n	8008a1c <_malloc_r+0xdc>
 8008990:	2c00      	cmp	r4, #0
 8008992:	d048      	beq.n	8008a26 <_malloc_r+0xe6>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	4631      	mov	r1, r6
 8008998:	4638      	mov	r0, r7
 800899a:	eb04 0903 	add.w	r9, r4, r3
 800899e:	f000 fdf7 	bl	8009590 <_sbrk_r>
 80089a2:	4581      	cmp	r9, r0
 80089a4:	d13f      	bne.n	8008a26 <_malloc_r+0xe6>
 80089a6:	6821      	ldr	r1, [r4, #0]
 80089a8:	1a6d      	subs	r5, r5, r1
 80089aa:	4629      	mov	r1, r5
 80089ac:	4638      	mov	r0, r7
 80089ae:	f7ff ffa7 	bl	8008900 <sbrk_aligned>
 80089b2:	3001      	adds	r0, #1
 80089b4:	d037      	beq.n	8008a26 <_malloc_r+0xe6>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	442b      	add	r3, r5
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	f8d8 3000 	ldr.w	r3, [r8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d038      	beq.n	8008a36 <_malloc_r+0xf6>
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	42a2      	cmp	r2, r4
 80089c8:	d12b      	bne.n	8008a22 <_malloc_r+0xe2>
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
 80089ce:	e00f      	b.n	80089f0 <_malloc_r+0xb0>
 80089d0:	6822      	ldr	r2, [r4, #0]
 80089d2:	1b52      	subs	r2, r2, r5
 80089d4:	d41f      	bmi.n	8008a16 <_malloc_r+0xd6>
 80089d6:	2a0b      	cmp	r2, #11
 80089d8:	d917      	bls.n	8008a0a <_malloc_r+0xca>
 80089da:	1961      	adds	r1, r4, r5
 80089dc:	42a3      	cmp	r3, r4
 80089de:	6025      	str	r5, [r4, #0]
 80089e0:	bf18      	it	ne
 80089e2:	6059      	strne	r1, [r3, #4]
 80089e4:	6863      	ldr	r3, [r4, #4]
 80089e6:	bf08      	it	eq
 80089e8:	f8c8 1000 	streq.w	r1, [r8]
 80089ec:	5162      	str	r2, [r4, r5]
 80089ee:	604b      	str	r3, [r1, #4]
 80089f0:	4638      	mov	r0, r7
 80089f2:	f104 060b 	add.w	r6, r4, #11
 80089f6:	f000 f829 	bl	8008a4c <__malloc_unlock>
 80089fa:	f026 0607 	bic.w	r6, r6, #7
 80089fe:	1d23      	adds	r3, r4, #4
 8008a00:	1af2      	subs	r2, r6, r3
 8008a02:	d0ae      	beq.n	8008962 <_malloc_r+0x22>
 8008a04:	1b9b      	subs	r3, r3, r6
 8008a06:	50a3      	str	r3, [r4, r2]
 8008a08:	e7ab      	b.n	8008962 <_malloc_r+0x22>
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	6862      	ldr	r2, [r4, #4]
 8008a0e:	d1dd      	bne.n	80089cc <_malloc_r+0x8c>
 8008a10:	f8c8 2000 	str.w	r2, [r8]
 8008a14:	e7ec      	b.n	80089f0 <_malloc_r+0xb0>
 8008a16:	4623      	mov	r3, r4
 8008a18:	6864      	ldr	r4, [r4, #4]
 8008a1a:	e7ac      	b.n	8008976 <_malloc_r+0x36>
 8008a1c:	4634      	mov	r4, r6
 8008a1e:	6876      	ldr	r6, [r6, #4]
 8008a20:	e7b4      	b.n	800898c <_malloc_r+0x4c>
 8008a22:	4613      	mov	r3, r2
 8008a24:	e7cc      	b.n	80089c0 <_malloc_r+0x80>
 8008a26:	230c      	movs	r3, #12
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f000 f80e 	bl	8008a4c <__malloc_unlock>
 8008a30:	e797      	b.n	8008962 <_malloc_r+0x22>
 8008a32:	6025      	str	r5, [r4, #0]
 8008a34:	e7dc      	b.n	80089f0 <_malloc_r+0xb0>
 8008a36:	605b      	str	r3, [r3, #4]
 8008a38:	deff      	udf	#255	; 0xff
 8008a3a:	bf00      	nop
 8008a3c:	2400042c 	.word	0x2400042c

08008a40 <__malloc_lock>:
 8008a40:	4801      	ldr	r0, [pc, #4]	; (8008a48 <__malloc_lock+0x8>)
 8008a42:	f7ff b912 	b.w	8007c6a <__retarget_lock_acquire_recursive>
 8008a46:	bf00      	nop
 8008a48:	24000428 	.word	0x24000428

08008a4c <__malloc_unlock>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	; (8008a54 <__malloc_unlock+0x8>)
 8008a4e:	f7ff b90d 	b.w	8007c6c <__retarget_lock_release_recursive>
 8008a52:	bf00      	nop
 8008a54:	24000428 	.word	0x24000428

08008a58 <_Balloc>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	69c6      	ldr	r6, [r0, #28]
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	460d      	mov	r5, r1
 8008a60:	b976      	cbnz	r6, 8008a80 <_Balloc+0x28>
 8008a62:	2010      	movs	r0, #16
 8008a64:	f7ff ff44 	bl	80088f0 <malloc>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	61e0      	str	r0, [r4, #28]
 8008a6c:	b920      	cbnz	r0, 8008a78 <_Balloc+0x20>
 8008a6e:	4b18      	ldr	r3, [pc, #96]	; (8008ad0 <_Balloc+0x78>)
 8008a70:	4818      	ldr	r0, [pc, #96]	; (8008ad4 <_Balloc+0x7c>)
 8008a72:	216b      	movs	r1, #107	; 0x6b
 8008a74:	f000 fdaa 	bl	80095cc <__assert_func>
 8008a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a7c:	6006      	str	r6, [r0, #0]
 8008a7e:	60c6      	str	r6, [r0, #12]
 8008a80:	69e6      	ldr	r6, [r4, #28]
 8008a82:	68f3      	ldr	r3, [r6, #12]
 8008a84:	b183      	cbz	r3, 8008aa8 <_Balloc+0x50>
 8008a86:	69e3      	ldr	r3, [r4, #28]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a8e:	b9b8      	cbnz	r0, 8008ac0 <_Balloc+0x68>
 8008a90:	2101      	movs	r1, #1
 8008a92:	fa01 f605 	lsl.w	r6, r1, r5
 8008a96:	1d72      	adds	r2, r6, #5
 8008a98:	0092      	lsls	r2, r2, #2
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 fdb4 	bl	8009608 <_calloc_r>
 8008aa0:	b160      	cbz	r0, 8008abc <_Balloc+0x64>
 8008aa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aa6:	e00e      	b.n	8008ac6 <_Balloc+0x6e>
 8008aa8:	2221      	movs	r2, #33	; 0x21
 8008aaa:	2104      	movs	r1, #4
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fdab 	bl	8009608 <_calloc_r>
 8008ab2:	69e3      	ldr	r3, [r4, #28]
 8008ab4:	60f0      	str	r0, [r6, #12]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e4      	bne.n	8008a86 <_Balloc+0x2e>
 8008abc:	2000      	movs	r0, #0
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	6802      	ldr	r2, [r0, #0]
 8008ac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008acc:	e7f7      	b.n	8008abe <_Balloc+0x66>
 8008ace:	bf00      	nop
 8008ad0:	0800a2b9 	.word	0x0800a2b9
 8008ad4:	0800a339 	.word	0x0800a339

08008ad8 <_Bfree>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	69c6      	ldr	r6, [r0, #28]
 8008adc:	4605      	mov	r5, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	b976      	cbnz	r6, 8008b00 <_Bfree+0x28>
 8008ae2:	2010      	movs	r0, #16
 8008ae4:	f7ff ff04 	bl	80088f0 <malloc>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	61e8      	str	r0, [r5, #28]
 8008aec:	b920      	cbnz	r0, 8008af8 <_Bfree+0x20>
 8008aee:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <_Bfree+0x3c>)
 8008af0:	4809      	ldr	r0, [pc, #36]	; (8008b18 <_Bfree+0x40>)
 8008af2:	218f      	movs	r1, #143	; 0x8f
 8008af4:	f000 fd6a 	bl	80095cc <__assert_func>
 8008af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008afc:	6006      	str	r6, [r0, #0]
 8008afe:	60c6      	str	r6, [r0, #12]
 8008b00:	b13c      	cbz	r4, 8008b12 <_Bfree+0x3a>
 8008b02:	69eb      	ldr	r3, [r5, #28]
 8008b04:	6862      	ldr	r2, [r4, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b0c:	6021      	str	r1, [r4, #0]
 8008b0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	0800a2b9 	.word	0x0800a2b9
 8008b18:	0800a339 	.word	0x0800a339

08008b1c <__multadd>:
 8008b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b20:	690d      	ldr	r5, [r1, #16]
 8008b22:	4607      	mov	r7, r0
 8008b24:	460c      	mov	r4, r1
 8008b26:	461e      	mov	r6, r3
 8008b28:	f101 0c14 	add.w	ip, r1, #20
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f8dc 3000 	ldr.w	r3, [ip]
 8008b32:	b299      	uxth	r1, r3
 8008b34:	fb02 6101 	mla	r1, r2, r1, r6
 8008b38:	0c1e      	lsrs	r6, r3, #16
 8008b3a:	0c0b      	lsrs	r3, r1, #16
 8008b3c:	fb02 3306 	mla	r3, r2, r6, r3
 8008b40:	b289      	uxth	r1, r1
 8008b42:	3001      	adds	r0, #1
 8008b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b48:	4285      	cmp	r5, r0
 8008b4a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b52:	dcec      	bgt.n	8008b2e <__multadd+0x12>
 8008b54:	b30e      	cbz	r6, 8008b9a <__multadd+0x7e>
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dc19      	bgt.n	8008b90 <__multadd+0x74>
 8008b5c:	6861      	ldr	r1, [r4, #4]
 8008b5e:	4638      	mov	r0, r7
 8008b60:	3101      	adds	r1, #1
 8008b62:	f7ff ff79 	bl	8008a58 <_Balloc>
 8008b66:	4680      	mov	r8, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <__multadd+0x5a>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <__multadd+0x84>)
 8008b6e:	480d      	ldr	r0, [pc, #52]	; (8008ba4 <__multadd+0x88>)
 8008b70:	21ba      	movs	r1, #186	; 0xba
 8008b72:	f000 fd2b 	bl	80095cc <__assert_func>
 8008b76:	6922      	ldr	r2, [r4, #16]
 8008b78:	3202      	adds	r2, #2
 8008b7a:	f104 010c 	add.w	r1, r4, #12
 8008b7e:	0092      	lsls	r2, r2, #2
 8008b80:	300c      	adds	r0, #12
 8008b82:	f000 fd15 	bl	80095b0 <memcpy>
 8008b86:	4621      	mov	r1, r4
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff ffa5 	bl	8008ad8 <_Bfree>
 8008b8e:	4644      	mov	r4, r8
 8008b90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b94:	3501      	adds	r5, #1
 8008b96:	615e      	str	r6, [r3, #20]
 8008b98:	6125      	str	r5, [r4, #16]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba0:	0800a328 	.word	0x0800a328
 8008ba4:	0800a339 	.word	0x0800a339

08008ba8 <__hi0bits>:
 8008ba8:	0c03      	lsrs	r3, r0, #16
 8008baa:	041b      	lsls	r3, r3, #16
 8008bac:	b9d3      	cbnz	r3, 8008be4 <__hi0bits+0x3c>
 8008bae:	0400      	lsls	r0, r0, #16
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bb6:	bf04      	itt	eq
 8008bb8:	0200      	lsleq	r0, r0, #8
 8008bba:	3308      	addeq	r3, #8
 8008bbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bc0:	bf04      	itt	eq
 8008bc2:	0100      	lsleq	r0, r0, #4
 8008bc4:	3304      	addeq	r3, #4
 8008bc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bca:	bf04      	itt	eq
 8008bcc:	0080      	lsleq	r0, r0, #2
 8008bce:	3302      	addeq	r3, #2
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	db05      	blt.n	8008be0 <__hi0bits+0x38>
 8008bd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bd8:	f103 0301 	add.w	r3, r3, #1
 8008bdc:	bf08      	it	eq
 8008bde:	2320      	moveq	r3, #32
 8008be0:	4618      	mov	r0, r3
 8008be2:	4770      	bx	lr
 8008be4:	2300      	movs	r3, #0
 8008be6:	e7e4      	b.n	8008bb2 <__hi0bits+0xa>

08008be8 <__lo0bits>:
 8008be8:	6803      	ldr	r3, [r0, #0]
 8008bea:	f013 0207 	ands.w	r2, r3, #7
 8008bee:	d00c      	beq.n	8008c0a <__lo0bits+0x22>
 8008bf0:	07d9      	lsls	r1, r3, #31
 8008bf2:	d422      	bmi.n	8008c3a <__lo0bits+0x52>
 8008bf4:	079a      	lsls	r2, r3, #30
 8008bf6:	bf49      	itett	mi
 8008bf8:	085b      	lsrmi	r3, r3, #1
 8008bfa:	089b      	lsrpl	r3, r3, #2
 8008bfc:	6003      	strmi	r3, [r0, #0]
 8008bfe:	2201      	movmi	r2, #1
 8008c00:	bf5c      	itt	pl
 8008c02:	6003      	strpl	r3, [r0, #0]
 8008c04:	2202      	movpl	r2, #2
 8008c06:	4610      	mov	r0, r2
 8008c08:	4770      	bx	lr
 8008c0a:	b299      	uxth	r1, r3
 8008c0c:	b909      	cbnz	r1, 8008c12 <__lo0bits+0x2a>
 8008c0e:	0c1b      	lsrs	r3, r3, #16
 8008c10:	2210      	movs	r2, #16
 8008c12:	b2d9      	uxtb	r1, r3
 8008c14:	b909      	cbnz	r1, 8008c1a <__lo0bits+0x32>
 8008c16:	3208      	adds	r2, #8
 8008c18:	0a1b      	lsrs	r3, r3, #8
 8008c1a:	0719      	lsls	r1, r3, #28
 8008c1c:	bf04      	itt	eq
 8008c1e:	091b      	lsreq	r3, r3, #4
 8008c20:	3204      	addeq	r2, #4
 8008c22:	0799      	lsls	r1, r3, #30
 8008c24:	bf04      	itt	eq
 8008c26:	089b      	lsreq	r3, r3, #2
 8008c28:	3202      	addeq	r2, #2
 8008c2a:	07d9      	lsls	r1, r3, #31
 8008c2c:	d403      	bmi.n	8008c36 <__lo0bits+0x4e>
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	f102 0201 	add.w	r2, r2, #1
 8008c34:	d003      	beq.n	8008c3e <__lo0bits+0x56>
 8008c36:	6003      	str	r3, [r0, #0]
 8008c38:	e7e5      	b.n	8008c06 <__lo0bits+0x1e>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	e7e3      	b.n	8008c06 <__lo0bits+0x1e>
 8008c3e:	2220      	movs	r2, #32
 8008c40:	e7e1      	b.n	8008c06 <__lo0bits+0x1e>
	...

08008c44 <__i2b>:
 8008c44:	b510      	push	{r4, lr}
 8008c46:	460c      	mov	r4, r1
 8008c48:	2101      	movs	r1, #1
 8008c4a:	f7ff ff05 	bl	8008a58 <_Balloc>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	b928      	cbnz	r0, 8008c5e <__i2b+0x1a>
 8008c52:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <__i2b+0x24>)
 8008c54:	4805      	ldr	r0, [pc, #20]	; (8008c6c <__i2b+0x28>)
 8008c56:	f240 1145 	movw	r1, #325	; 0x145
 8008c5a:	f000 fcb7 	bl	80095cc <__assert_func>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	6144      	str	r4, [r0, #20]
 8008c62:	6103      	str	r3, [r0, #16]
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	bf00      	nop
 8008c68:	0800a328 	.word	0x0800a328
 8008c6c:	0800a339 	.word	0x0800a339

08008c70 <__multiply>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	4691      	mov	r9, r2
 8008c76:	690a      	ldr	r2, [r1, #16]
 8008c78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	bfb8      	it	lt
 8008c80:	460b      	movlt	r3, r1
 8008c82:	460c      	mov	r4, r1
 8008c84:	bfbc      	itt	lt
 8008c86:	464c      	movlt	r4, r9
 8008c88:	4699      	movlt	r9, r3
 8008c8a:	6927      	ldr	r7, [r4, #16]
 8008c8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c90:	68a3      	ldr	r3, [r4, #8]
 8008c92:	6861      	ldr	r1, [r4, #4]
 8008c94:	eb07 060a 	add.w	r6, r7, sl
 8008c98:	42b3      	cmp	r3, r6
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	bfb8      	it	lt
 8008c9e:	3101      	addlt	r1, #1
 8008ca0:	f7ff feda 	bl	8008a58 <_Balloc>
 8008ca4:	b930      	cbnz	r0, 8008cb4 <__multiply+0x44>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	4b44      	ldr	r3, [pc, #272]	; (8008dbc <__multiply+0x14c>)
 8008caa:	4845      	ldr	r0, [pc, #276]	; (8008dc0 <__multiply+0x150>)
 8008cac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008cb0:	f000 fc8c 	bl	80095cc <__assert_func>
 8008cb4:	f100 0514 	add.w	r5, r0, #20
 8008cb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	4543      	cmp	r3, r8
 8008cc2:	d321      	bcc.n	8008d08 <__multiply+0x98>
 8008cc4:	f104 0314 	add.w	r3, r4, #20
 8008cc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ccc:	f109 0314 	add.w	r3, r9, #20
 8008cd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cd4:	9202      	str	r2, [sp, #8]
 8008cd6:	1b3a      	subs	r2, r7, r4
 8008cd8:	3a15      	subs	r2, #21
 8008cda:	f022 0203 	bic.w	r2, r2, #3
 8008cde:	3204      	adds	r2, #4
 8008ce0:	f104 0115 	add.w	r1, r4, #21
 8008ce4:	428f      	cmp	r7, r1
 8008ce6:	bf38      	it	cc
 8008ce8:	2204      	movcc	r2, #4
 8008cea:	9201      	str	r2, [sp, #4]
 8008cec:	9a02      	ldr	r2, [sp, #8]
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d80c      	bhi.n	8008d0e <__multiply+0x9e>
 8008cf4:	2e00      	cmp	r6, #0
 8008cf6:	dd03      	ble.n	8008d00 <__multiply+0x90>
 8008cf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d05b      	beq.n	8008db8 <__multiply+0x148>
 8008d00:	6106      	str	r6, [r0, #16]
 8008d02:	b005      	add	sp, #20
 8008d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d08:	f843 2b04 	str.w	r2, [r3], #4
 8008d0c:	e7d8      	b.n	8008cc0 <__multiply+0x50>
 8008d0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d12:	f1ba 0f00 	cmp.w	sl, #0
 8008d16:	d024      	beq.n	8008d62 <__multiply+0xf2>
 8008d18:	f104 0e14 	add.w	lr, r4, #20
 8008d1c:	46a9      	mov	r9, r5
 8008d1e:	f04f 0c00 	mov.w	ip, #0
 8008d22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d26:	f8d9 1000 	ldr.w	r1, [r9]
 8008d2a:	fa1f fb82 	uxth.w	fp, r2
 8008d2e:	b289      	uxth	r1, r1
 8008d30:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d38:	f8d9 2000 	ldr.w	r2, [r9]
 8008d3c:	4461      	add	r1, ip
 8008d3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d42:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d4a:	b289      	uxth	r1, r1
 8008d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d50:	4577      	cmp	r7, lr
 8008d52:	f849 1b04 	str.w	r1, [r9], #4
 8008d56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d5a:	d8e2      	bhi.n	8008d22 <__multiply+0xb2>
 8008d5c:	9a01      	ldr	r2, [sp, #4]
 8008d5e:	f845 c002 	str.w	ip, [r5, r2]
 8008d62:	9a03      	ldr	r2, [sp, #12]
 8008d64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	f1b9 0f00 	cmp.w	r9, #0
 8008d6e:	d021      	beq.n	8008db4 <__multiply+0x144>
 8008d70:	6829      	ldr	r1, [r5, #0]
 8008d72:	f104 0c14 	add.w	ip, r4, #20
 8008d76:	46ae      	mov	lr, r5
 8008d78:	f04f 0a00 	mov.w	sl, #0
 8008d7c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d84:	fb09 220b 	mla	r2, r9, fp, r2
 8008d88:	4452      	add	r2, sl
 8008d8a:	b289      	uxth	r1, r1
 8008d8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d90:	f84e 1b04 	str.w	r1, [lr], #4
 8008d94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008d98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d9c:	f8be 1000 	ldrh.w	r1, [lr]
 8008da0:	fb09 110a 	mla	r1, r9, sl, r1
 8008da4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008da8:	4567      	cmp	r7, ip
 8008daa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008dae:	d8e5      	bhi.n	8008d7c <__multiply+0x10c>
 8008db0:	9a01      	ldr	r2, [sp, #4]
 8008db2:	50a9      	str	r1, [r5, r2]
 8008db4:	3504      	adds	r5, #4
 8008db6:	e799      	b.n	8008cec <__multiply+0x7c>
 8008db8:	3e01      	subs	r6, #1
 8008dba:	e79b      	b.n	8008cf4 <__multiply+0x84>
 8008dbc:	0800a328 	.word	0x0800a328
 8008dc0:	0800a339 	.word	0x0800a339

08008dc4 <__pow5mult>:
 8008dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc8:	4615      	mov	r5, r2
 8008dca:	f012 0203 	ands.w	r2, r2, #3
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	d007      	beq.n	8008de4 <__pow5mult+0x20>
 8008dd4:	4c25      	ldr	r4, [pc, #148]	; (8008e6c <__pow5mult+0xa8>)
 8008dd6:	3a01      	subs	r2, #1
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dde:	f7ff fe9d 	bl	8008b1c <__multadd>
 8008de2:	4607      	mov	r7, r0
 8008de4:	10ad      	asrs	r5, r5, #2
 8008de6:	d03d      	beq.n	8008e64 <__pow5mult+0xa0>
 8008de8:	69f4      	ldr	r4, [r6, #28]
 8008dea:	b97c      	cbnz	r4, 8008e0c <__pow5mult+0x48>
 8008dec:	2010      	movs	r0, #16
 8008dee:	f7ff fd7f 	bl	80088f0 <malloc>
 8008df2:	4602      	mov	r2, r0
 8008df4:	61f0      	str	r0, [r6, #28]
 8008df6:	b928      	cbnz	r0, 8008e04 <__pow5mult+0x40>
 8008df8:	4b1d      	ldr	r3, [pc, #116]	; (8008e70 <__pow5mult+0xac>)
 8008dfa:	481e      	ldr	r0, [pc, #120]	; (8008e74 <__pow5mult+0xb0>)
 8008dfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e00:	f000 fbe4 	bl	80095cc <__assert_func>
 8008e04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e08:	6004      	str	r4, [r0, #0]
 8008e0a:	60c4      	str	r4, [r0, #12]
 8008e0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e14:	b94c      	cbnz	r4, 8008e2a <__pow5mult+0x66>
 8008e16:	f240 2171 	movw	r1, #625	; 0x271
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7ff ff12 	bl	8008c44 <__i2b>
 8008e20:	2300      	movs	r3, #0
 8008e22:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e26:	4604      	mov	r4, r0
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	f04f 0900 	mov.w	r9, #0
 8008e2e:	07eb      	lsls	r3, r5, #31
 8008e30:	d50a      	bpl.n	8008e48 <__pow5mult+0x84>
 8008e32:	4639      	mov	r1, r7
 8008e34:	4622      	mov	r2, r4
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff ff1a 	bl	8008c70 <__multiply>
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	4680      	mov	r8, r0
 8008e40:	4630      	mov	r0, r6
 8008e42:	f7ff fe49 	bl	8008ad8 <_Bfree>
 8008e46:	4647      	mov	r7, r8
 8008e48:	106d      	asrs	r5, r5, #1
 8008e4a:	d00b      	beq.n	8008e64 <__pow5mult+0xa0>
 8008e4c:	6820      	ldr	r0, [r4, #0]
 8008e4e:	b938      	cbnz	r0, 8008e60 <__pow5mult+0x9c>
 8008e50:	4622      	mov	r2, r4
 8008e52:	4621      	mov	r1, r4
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7ff ff0b 	bl	8008c70 <__multiply>
 8008e5a:	6020      	str	r0, [r4, #0]
 8008e5c:	f8c0 9000 	str.w	r9, [r0]
 8008e60:	4604      	mov	r4, r0
 8008e62:	e7e4      	b.n	8008e2e <__pow5mult+0x6a>
 8008e64:	4638      	mov	r0, r7
 8008e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e6a:	bf00      	nop
 8008e6c:	0800a488 	.word	0x0800a488
 8008e70:	0800a2b9 	.word	0x0800a2b9
 8008e74:	0800a339 	.word	0x0800a339

08008e78 <__lshift>:
 8008e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	6849      	ldr	r1, [r1, #4]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e86:	68a3      	ldr	r3, [r4, #8]
 8008e88:	4607      	mov	r7, r0
 8008e8a:	4691      	mov	r9, r2
 8008e8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e90:	f108 0601 	add.w	r6, r8, #1
 8008e94:	42b3      	cmp	r3, r6
 8008e96:	db0b      	blt.n	8008eb0 <__lshift+0x38>
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff fddd 	bl	8008a58 <_Balloc>
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	b948      	cbnz	r0, 8008eb6 <__lshift+0x3e>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	4b28      	ldr	r3, [pc, #160]	; (8008f48 <__lshift+0xd0>)
 8008ea6:	4829      	ldr	r0, [pc, #164]	; (8008f4c <__lshift+0xd4>)
 8008ea8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008eac:	f000 fb8e 	bl	80095cc <__assert_func>
 8008eb0:	3101      	adds	r1, #1
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	e7ee      	b.n	8008e94 <__lshift+0x1c>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f100 0114 	add.w	r1, r0, #20
 8008ebc:	f100 0210 	add.w	r2, r0, #16
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	4553      	cmp	r3, sl
 8008ec4:	db33      	blt.n	8008f2e <__lshift+0xb6>
 8008ec6:	6920      	ldr	r0, [r4, #16]
 8008ec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ecc:	f104 0314 	add.w	r3, r4, #20
 8008ed0:	f019 091f 	ands.w	r9, r9, #31
 8008ed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008edc:	d02b      	beq.n	8008f36 <__lshift+0xbe>
 8008ede:	f1c9 0e20 	rsb	lr, r9, #32
 8008ee2:	468a      	mov	sl, r1
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	fa00 f009 	lsl.w	r0, r0, r9
 8008eec:	4310      	orrs	r0, r2
 8008eee:	f84a 0b04 	str.w	r0, [sl], #4
 8008ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef6:	459c      	cmp	ip, r3
 8008ef8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008efc:	d8f3      	bhi.n	8008ee6 <__lshift+0x6e>
 8008efe:	ebac 0304 	sub.w	r3, ip, r4
 8008f02:	3b15      	subs	r3, #21
 8008f04:	f023 0303 	bic.w	r3, r3, #3
 8008f08:	3304      	adds	r3, #4
 8008f0a:	f104 0015 	add.w	r0, r4, #21
 8008f0e:	4584      	cmp	ip, r0
 8008f10:	bf38      	it	cc
 8008f12:	2304      	movcc	r3, #4
 8008f14:	50ca      	str	r2, [r1, r3]
 8008f16:	b10a      	cbz	r2, 8008f1c <__lshift+0xa4>
 8008f18:	f108 0602 	add.w	r6, r8, #2
 8008f1c:	3e01      	subs	r6, #1
 8008f1e:	4638      	mov	r0, r7
 8008f20:	612e      	str	r6, [r5, #16]
 8008f22:	4621      	mov	r1, r4
 8008f24:	f7ff fdd8 	bl	8008ad8 <_Bfree>
 8008f28:	4628      	mov	r0, r5
 8008f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f32:	3301      	adds	r3, #1
 8008f34:	e7c5      	b.n	8008ec2 <__lshift+0x4a>
 8008f36:	3904      	subs	r1, #4
 8008f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f40:	459c      	cmp	ip, r3
 8008f42:	d8f9      	bhi.n	8008f38 <__lshift+0xc0>
 8008f44:	e7ea      	b.n	8008f1c <__lshift+0xa4>
 8008f46:	bf00      	nop
 8008f48:	0800a328 	.word	0x0800a328
 8008f4c:	0800a339 	.word	0x0800a339

08008f50 <__mcmp>:
 8008f50:	b530      	push	{r4, r5, lr}
 8008f52:	6902      	ldr	r2, [r0, #16]
 8008f54:	690c      	ldr	r4, [r1, #16]
 8008f56:	1b12      	subs	r2, r2, r4
 8008f58:	d10e      	bne.n	8008f78 <__mcmp+0x28>
 8008f5a:	f100 0314 	add.w	r3, r0, #20
 8008f5e:	3114      	adds	r1, #20
 8008f60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f70:	42a5      	cmp	r5, r4
 8008f72:	d003      	beq.n	8008f7c <__mcmp+0x2c>
 8008f74:	d305      	bcc.n	8008f82 <__mcmp+0x32>
 8008f76:	2201      	movs	r2, #1
 8008f78:	4610      	mov	r0, r2
 8008f7a:	bd30      	pop	{r4, r5, pc}
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	d3f3      	bcc.n	8008f68 <__mcmp+0x18>
 8008f80:	e7fa      	b.n	8008f78 <__mcmp+0x28>
 8008f82:	f04f 32ff 	mov.w	r2, #4294967295
 8008f86:	e7f7      	b.n	8008f78 <__mcmp+0x28>

08008f88 <__mdiff>:
 8008f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	4606      	mov	r6, r0
 8008f90:	4611      	mov	r1, r2
 8008f92:	4620      	mov	r0, r4
 8008f94:	4690      	mov	r8, r2
 8008f96:	f7ff ffdb 	bl	8008f50 <__mcmp>
 8008f9a:	1e05      	subs	r5, r0, #0
 8008f9c:	d110      	bne.n	8008fc0 <__mdiff+0x38>
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7ff fd59 	bl	8008a58 <_Balloc>
 8008fa6:	b930      	cbnz	r0, 8008fb6 <__mdiff+0x2e>
 8008fa8:	4b3a      	ldr	r3, [pc, #232]	; (8009094 <__mdiff+0x10c>)
 8008faa:	4602      	mov	r2, r0
 8008fac:	f240 2137 	movw	r1, #567	; 0x237
 8008fb0:	4839      	ldr	r0, [pc, #228]	; (8009098 <__mdiff+0x110>)
 8008fb2:	f000 fb0b 	bl	80095cc <__assert_func>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc0:	bfa4      	itt	ge
 8008fc2:	4643      	movge	r3, r8
 8008fc4:	46a0      	movge	r8, r4
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fcc:	bfa6      	itte	ge
 8008fce:	461c      	movge	r4, r3
 8008fd0:	2500      	movge	r5, #0
 8008fd2:	2501      	movlt	r5, #1
 8008fd4:	f7ff fd40 	bl	8008a58 <_Balloc>
 8008fd8:	b920      	cbnz	r0, 8008fe4 <__mdiff+0x5c>
 8008fda:	4b2e      	ldr	r3, [pc, #184]	; (8009094 <__mdiff+0x10c>)
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f240 2145 	movw	r1, #581	; 0x245
 8008fe2:	e7e5      	b.n	8008fb0 <__mdiff+0x28>
 8008fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fe8:	6926      	ldr	r6, [r4, #16]
 8008fea:	60c5      	str	r5, [r0, #12]
 8008fec:	f104 0914 	add.w	r9, r4, #20
 8008ff0:	f108 0514 	add.w	r5, r8, #20
 8008ff4:	f100 0e14 	add.w	lr, r0, #20
 8008ff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009000:	f108 0210 	add.w	r2, r8, #16
 8009004:	46f2      	mov	sl, lr
 8009006:	2100      	movs	r1, #0
 8009008:	f859 3b04 	ldr.w	r3, [r9], #4
 800900c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009010:	fa11 f88b 	uxtah	r8, r1, fp
 8009014:	b299      	uxth	r1, r3
 8009016:	0c1b      	lsrs	r3, r3, #16
 8009018:	eba8 0801 	sub.w	r8, r8, r1
 800901c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009020:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009024:	fa1f f888 	uxth.w	r8, r8
 8009028:	1419      	asrs	r1, r3, #16
 800902a:	454e      	cmp	r6, r9
 800902c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009030:	f84a 3b04 	str.w	r3, [sl], #4
 8009034:	d8e8      	bhi.n	8009008 <__mdiff+0x80>
 8009036:	1b33      	subs	r3, r6, r4
 8009038:	3b15      	subs	r3, #21
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	3304      	adds	r3, #4
 8009040:	3415      	adds	r4, #21
 8009042:	42a6      	cmp	r6, r4
 8009044:	bf38      	it	cc
 8009046:	2304      	movcc	r3, #4
 8009048:	441d      	add	r5, r3
 800904a:	4473      	add	r3, lr
 800904c:	469e      	mov	lr, r3
 800904e:	462e      	mov	r6, r5
 8009050:	4566      	cmp	r6, ip
 8009052:	d30e      	bcc.n	8009072 <__mdiff+0xea>
 8009054:	f10c 0203 	add.w	r2, ip, #3
 8009058:	1b52      	subs	r2, r2, r5
 800905a:	f022 0203 	bic.w	r2, r2, #3
 800905e:	3d03      	subs	r5, #3
 8009060:	45ac      	cmp	ip, r5
 8009062:	bf38      	it	cc
 8009064:	2200      	movcc	r2, #0
 8009066:	4413      	add	r3, r2
 8009068:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800906c:	b17a      	cbz	r2, 800908e <__mdiff+0x106>
 800906e:	6107      	str	r7, [r0, #16]
 8009070:	e7a4      	b.n	8008fbc <__mdiff+0x34>
 8009072:	f856 8b04 	ldr.w	r8, [r6], #4
 8009076:	fa11 f288 	uxtah	r2, r1, r8
 800907a:	1414      	asrs	r4, r2, #16
 800907c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009080:	b292      	uxth	r2, r2
 8009082:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009086:	f84e 2b04 	str.w	r2, [lr], #4
 800908a:	1421      	asrs	r1, r4, #16
 800908c:	e7e0      	b.n	8009050 <__mdiff+0xc8>
 800908e:	3f01      	subs	r7, #1
 8009090:	e7ea      	b.n	8009068 <__mdiff+0xe0>
 8009092:	bf00      	nop
 8009094:	0800a328 	.word	0x0800a328
 8009098:	0800a339 	.word	0x0800a339

0800909c <__d2b>:
 800909c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	460f      	mov	r7, r1
 80090a2:	2101      	movs	r1, #1
 80090a4:	ec59 8b10 	vmov	r8, r9, d0
 80090a8:	4616      	mov	r6, r2
 80090aa:	f7ff fcd5 	bl	8008a58 <_Balloc>
 80090ae:	4604      	mov	r4, r0
 80090b0:	b930      	cbnz	r0, 80090c0 <__d2b+0x24>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b24      	ldr	r3, [pc, #144]	; (8009148 <__d2b+0xac>)
 80090b6:	4825      	ldr	r0, [pc, #148]	; (800914c <__d2b+0xb0>)
 80090b8:	f240 310f 	movw	r1, #783	; 0x30f
 80090bc:	f000 fa86 	bl	80095cc <__assert_func>
 80090c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090c8:	bb2d      	cbnz	r5, 8009116 <__d2b+0x7a>
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	f1b8 0300 	subs.w	r3, r8, #0
 80090d0:	d026      	beq.n	8009120 <__d2b+0x84>
 80090d2:	4668      	mov	r0, sp
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	f7ff fd87 	bl	8008be8 <__lo0bits>
 80090da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090de:	b1e8      	cbz	r0, 800911c <__d2b+0x80>
 80090e0:	f1c0 0320 	rsb	r3, r0, #32
 80090e4:	fa02 f303 	lsl.w	r3, r2, r3
 80090e8:	430b      	orrs	r3, r1
 80090ea:	40c2      	lsrs	r2, r0
 80090ec:	6163      	str	r3, [r4, #20]
 80090ee:	9201      	str	r2, [sp, #4]
 80090f0:	9b01      	ldr	r3, [sp, #4]
 80090f2:	61a3      	str	r3, [r4, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	bf14      	ite	ne
 80090f8:	2202      	movne	r2, #2
 80090fa:	2201      	moveq	r2, #1
 80090fc:	6122      	str	r2, [r4, #16]
 80090fe:	b1bd      	cbz	r5, 8009130 <__d2b+0x94>
 8009100:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009104:	4405      	add	r5, r0
 8009106:	603d      	str	r5, [r7, #0]
 8009108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800910c:	6030      	str	r0, [r6, #0]
 800910e:	4620      	mov	r0, r4
 8009110:	b003      	add	sp, #12
 8009112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800911a:	e7d6      	b.n	80090ca <__d2b+0x2e>
 800911c:	6161      	str	r1, [r4, #20]
 800911e:	e7e7      	b.n	80090f0 <__d2b+0x54>
 8009120:	a801      	add	r0, sp, #4
 8009122:	f7ff fd61 	bl	8008be8 <__lo0bits>
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	6163      	str	r3, [r4, #20]
 800912a:	3020      	adds	r0, #32
 800912c:	2201      	movs	r2, #1
 800912e:	e7e5      	b.n	80090fc <__d2b+0x60>
 8009130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009138:	6038      	str	r0, [r7, #0]
 800913a:	6918      	ldr	r0, [r3, #16]
 800913c:	f7ff fd34 	bl	8008ba8 <__hi0bits>
 8009140:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009144:	e7e2      	b.n	800910c <__d2b+0x70>
 8009146:	bf00      	nop
 8009148:	0800a328 	.word	0x0800a328
 800914c:	0800a339 	.word	0x0800a339

08009150 <__ssputs_r>:
 8009150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009154:	688e      	ldr	r6, [r1, #8]
 8009156:	461f      	mov	r7, r3
 8009158:	42be      	cmp	r6, r7
 800915a:	680b      	ldr	r3, [r1, #0]
 800915c:	4682      	mov	sl, r0
 800915e:	460c      	mov	r4, r1
 8009160:	4690      	mov	r8, r2
 8009162:	d82c      	bhi.n	80091be <__ssputs_r+0x6e>
 8009164:	898a      	ldrh	r2, [r1, #12]
 8009166:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800916a:	d026      	beq.n	80091ba <__ssputs_r+0x6a>
 800916c:	6965      	ldr	r5, [r4, #20]
 800916e:	6909      	ldr	r1, [r1, #16]
 8009170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009174:	eba3 0901 	sub.w	r9, r3, r1
 8009178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800917c:	1c7b      	adds	r3, r7, #1
 800917e:	444b      	add	r3, r9
 8009180:	106d      	asrs	r5, r5, #1
 8009182:	429d      	cmp	r5, r3
 8009184:	bf38      	it	cc
 8009186:	461d      	movcc	r5, r3
 8009188:	0553      	lsls	r3, r2, #21
 800918a:	d527      	bpl.n	80091dc <__ssputs_r+0x8c>
 800918c:	4629      	mov	r1, r5
 800918e:	f7ff fbd7 	bl	8008940 <_malloc_r>
 8009192:	4606      	mov	r6, r0
 8009194:	b360      	cbz	r0, 80091f0 <__ssputs_r+0xa0>
 8009196:	6921      	ldr	r1, [r4, #16]
 8009198:	464a      	mov	r2, r9
 800919a:	f000 fa09 	bl	80095b0 <memcpy>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	6126      	str	r6, [r4, #16]
 80091ac:	6165      	str	r5, [r4, #20]
 80091ae:	444e      	add	r6, r9
 80091b0:	eba5 0509 	sub.w	r5, r5, r9
 80091b4:	6026      	str	r6, [r4, #0]
 80091b6:	60a5      	str	r5, [r4, #8]
 80091b8:	463e      	mov	r6, r7
 80091ba:	42be      	cmp	r6, r7
 80091bc:	d900      	bls.n	80091c0 <__ssputs_r+0x70>
 80091be:	463e      	mov	r6, r7
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	4632      	mov	r2, r6
 80091c4:	4641      	mov	r1, r8
 80091c6:	f000 f9c9 	bl	800955c <memmove>
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	1b9b      	subs	r3, r3, r6
 80091ce:	60a3      	str	r3, [r4, #8]
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	4433      	add	r3, r6
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	2000      	movs	r0, #0
 80091d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091dc:	462a      	mov	r2, r5
 80091de:	f000 fa3b 	bl	8009658 <_realloc_r>
 80091e2:	4606      	mov	r6, r0
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d1e0      	bne.n	80091aa <__ssputs_r+0x5a>
 80091e8:	6921      	ldr	r1, [r4, #16]
 80091ea:	4650      	mov	r0, sl
 80091ec:	f7ff fb34 	bl	8008858 <_free_r>
 80091f0:	230c      	movs	r3, #12
 80091f2:	f8ca 3000 	str.w	r3, [sl]
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009202:	e7e9      	b.n	80091d8 <__ssputs_r+0x88>

08009204 <_svfiprintf_r>:
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	4698      	mov	r8, r3
 800920a:	898b      	ldrh	r3, [r1, #12]
 800920c:	061b      	lsls	r3, r3, #24
 800920e:	b09d      	sub	sp, #116	; 0x74
 8009210:	4607      	mov	r7, r0
 8009212:	460d      	mov	r5, r1
 8009214:	4614      	mov	r4, r2
 8009216:	d50e      	bpl.n	8009236 <_svfiprintf_r+0x32>
 8009218:	690b      	ldr	r3, [r1, #16]
 800921a:	b963      	cbnz	r3, 8009236 <_svfiprintf_r+0x32>
 800921c:	2140      	movs	r1, #64	; 0x40
 800921e:	f7ff fb8f 	bl	8008940 <_malloc_r>
 8009222:	6028      	str	r0, [r5, #0]
 8009224:	6128      	str	r0, [r5, #16]
 8009226:	b920      	cbnz	r0, 8009232 <_svfiprintf_r+0x2e>
 8009228:	230c      	movs	r3, #12
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	e0d0      	b.n	80093d4 <_svfiprintf_r+0x1d0>
 8009232:	2340      	movs	r3, #64	; 0x40
 8009234:	616b      	str	r3, [r5, #20]
 8009236:	2300      	movs	r3, #0
 8009238:	9309      	str	r3, [sp, #36]	; 0x24
 800923a:	2320      	movs	r3, #32
 800923c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009240:	f8cd 800c 	str.w	r8, [sp, #12]
 8009244:	2330      	movs	r3, #48	; 0x30
 8009246:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093ec <_svfiprintf_r+0x1e8>
 800924a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800924e:	f04f 0901 	mov.w	r9, #1
 8009252:	4623      	mov	r3, r4
 8009254:	469a      	mov	sl, r3
 8009256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800925a:	b10a      	cbz	r2, 8009260 <_svfiprintf_r+0x5c>
 800925c:	2a25      	cmp	r2, #37	; 0x25
 800925e:	d1f9      	bne.n	8009254 <_svfiprintf_r+0x50>
 8009260:	ebba 0b04 	subs.w	fp, sl, r4
 8009264:	d00b      	beq.n	800927e <_svfiprintf_r+0x7a>
 8009266:	465b      	mov	r3, fp
 8009268:	4622      	mov	r2, r4
 800926a:	4629      	mov	r1, r5
 800926c:	4638      	mov	r0, r7
 800926e:	f7ff ff6f 	bl	8009150 <__ssputs_r>
 8009272:	3001      	adds	r0, #1
 8009274:	f000 80a9 	beq.w	80093ca <_svfiprintf_r+0x1c6>
 8009278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800927a:	445a      	add	r2, fp
 800927c:	9209      	str	r2, [sp, #36]	; 0x24
 800927e:	f89a 3000 	ldrb.w	r3, [sl]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 80a1 	beq.w	80093ca <_svfiprintf_r+0x1c6>
 8009288:	2300      	movs	r3, #0
 800928a:	f04f 32ff 	mov.w	r2, #4294967295
 800928e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009292:	f10a 0a01 	add.w	sl, sl, #1
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	9307      	str	r3, [sp, #28]
 800929a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800929e:	931a      	str	r3, [sp, #104]	; 0x68
 80092a0:	4654      	mov	r4, sl
 80092a2:	2205      	movs	r2, #5
 80092a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a8:	4850      	ldr	r0, [pc, #320]	; (80093ec <_svfiprintf_r+0x1e8>)
 80092aa:	f7f7 f819 	bl	80002e0 <memchr>
 80092ae:	9a04      	ldr	r2, [sp, #16]
 80092b0:	b9d8      	cbnz	r0, 80092ea <_svfiprintf_r+0xe6>
 80092b2:	06d0      	lsls	r0, r2, #27
 80092b4:	bf44      	itt	mi
 80092b6:	2320      	movmi	r3, #32
 80092b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092bc:	0711      	lsls	r1, r2, #28
 80092be:	bf44      	itt	mi
 80092c0:	232b      	movmi	r3, #43	; 0x2b
 80092c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ca:	2b2a      	cmp	r3, #42	; 0x2a
 80092cc:	d015      	beq.n	80092fa <_svfiprintf_r+0xf6>
 80092ce:	9a07      	ldr	r2, [sp, #28]
 80092d0:	4654      	mov	r4, sl
 80092d2:	2000      	movs	r0, #0
 80092d4:	f04f 0c0a 	mov.w	ip, #10
 80092d8:	4621      	mov	r1, r4
 80092da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092de:	3b30      	subs	r3, #48	; 0x30
 80092e0:	2b09      	cmp	r3, #9
 80092e2:	d94d      	bls.n	8009380 <_svfiprintf_r+0x17c>
 80092e4:	b1b0      	cbz	r0, 8009314 <_svfiprintf_r+0x110>
 80092e6:	9207      	str	r2, [sp, #28]
 80092e8:	e014      	b.n	8009314 <_svfiprintf_r+0x110>
 80092ea:	eba0 0308 	sub.w	r3, r0, r8
 80092ee:	fa09 f303 	lsl.w	r3, r9, r3
 80092f2:	4313      	orrs	r3, r2
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	46a2      	mov	sl, r4
 80092f8:	e7d2      	b.n	80092a0 <_svfiprintf_r+0x9c>
 80092fa:	9b03      	ldr	r3, [sp, #12]
 80092fc:	1d19      	adds	r1, r3, #4
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	9103      	str	r1, [sp, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	bfbb      	ittet	lt
 8009306:	425b      	neglt	r3, r3
 8009308:	f042 0202 	orrlt.w	r2, r2, #2
 800930c:	9307      	strge	r3, [sp, #28]
 800930e:	9307      	strlt	r3, [sp, #28]
 8009310:	bfb8      	it	lt
 8009312:	9204      	strlt	r2, [sp, #16]
 8009314:	7823      	ldrb	r3, [r4, #0]
 8009316:	2b2e      	cmp	r3, #46	; 0x2e
 8009318:	d10c      	bne.n	8009334 <_svfiprintf_r+0x130>
 800931a:	7863      	ldrb	r3, [r4, #1]
 800931c:	2b2a      	cmp	r3, #42	; 0x2a
 800931e:	d134      	bne.n	800938a <_svfiprintf_r+0x186>
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	1d1a      	adds	r2, r3, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	9203      	str	r2, [sp, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	bfb8      	it	lt
 800932c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009330:	3402      	adds	r4, #2
 8009332:	9305      	str	r3, [sp, #20]
 8009334:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093fc <_svfiprintf_r+0x1f8>
 8009338:	7821      	ldrb	r1, [r4, #0]
 800933a:	2203      	movs	r2, #3
 800933c:	4650      	mov	r0, sl
 800933e:	f7f6 ffcf 	bl	80002e0 <memchr>
 8009342:	b138      	cbz	r0, 8009354 <_svfiprintf_r+0x150>
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	eba0 000a 	sub.w	r0, r0, sl
 800934a:	2240      	movs	r2, #64	; 0x40
 800934c:	4082      	lsls	r2, r0
 800934e:	4313      	orrs	r3, r2
 8009350:	3401      	adds	r4, #1
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009358:	4825      	ldr	r0, [pc, #148]	; (80093f0 <_svfiprintf_r+0x1ec>)
 800935a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800935e:	2206      	movs	r2, #6
 8009360:	f7f6 ffbe 	bl	80002e0 <memchr>
 8009364:	2800      	cmp	r0, #0
 8009366:	d038      	beq.n	80093da <_svfiprintf_r+0x1d6>
 8009368:	4b22      	ldr	r3, [pc, #136]	; (80093f4 <_svfiprintf_r+0x1f0>)
 800936a:	bb1b      	cbnz	r3, 80093b4 <_svfiprintf_r+0x1b0>
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	3307      	adds	r3, #7
 8009370:	f023 0307 	bic.w	r3, r3, #7
 8009374:	3308      	adds	r3, #8
 8009376:	9303      	str	r3, [sp, #12]
 8009378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937a:	4433      	add	r3, r6
 800937c:	9309      	str	r3, [sp, #36]	; 0x24
 800937e:	e768      	b.n	8009252 <_svfiprintf_r+0x4e>
 8009380:	fb0c 3202 	mla	r2, ip, r2, r3
 8009384:	460c      	mov	r4, r1
 8009386:	2001      	movs	r0, #1
 8009388:	e7a6      	b.n	80092d8 <_svfiprintf_r+0xd4>
 800938a:	2300      	movs	r3, #0
 800938c:	3401      	adds	r4, #1
 800938e:	9305      	str	r3, [sp, #20]
 8009390:	4619      	mov	r1, r3
 8009392:	f04f 0c0a 	mov.w	ip, #10
 8009396:	4620      	mov	r0, r4
 8009398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800939c:	3a30      	subs	r2, #48	; 0x30
 800939e:	2a09      	cmp	r2, #9
 80093a0:	d903      	bls.n	80093aa <_svfiprintf_r+0x1a6>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0c6      	beq.n	8009334 <_svfiprintf_r+0x130>
 80093a6:	9105      	str	r1, [sp, #20]
 80093a8:	e7c4      	b.n	8009334 <_svfiprintf_r+0x130>
 80093aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ae:	4604      	mov	r4, r0
 80093b0:	2301      	movs	r3, #1
 80093b2:	e7f0      	b.n	8009396 <_svfiprintf_r+0x192>
 80093b4:	ab03      	add	r3, sp, #12
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	462a      	mov	r2, r5
 80093ba:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <_svfiprintf_r+0x1f4>)
 80093bc:	a904      	add	r1, sp, #16
 80093be:	4638      	mov	r0, r7
 80093c0:	f7fd ff06 	bl	80071d0 <_printf_float>
 80093c4:	1c42      	adds	r2, r0, #1
 80093c6:	4606      	mov	r6, r0
 80093c8:	d1d6      	bne.n	8009378 <_svfiprintf_r+0x174>
 80093ca:	89ab      	ldrh	r3, [r5, #12]
 80093cc:	065b      	lsls	r3, r3, #25
 80093ce:	f53f af2d 	bmi.w	800922c <_svfiprintf_r+0x28>
 80093d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093d4:	b01d      	add	sp, #116	; 0x74
 80093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093da:	ab03      	add	r3, sp, #12
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	462a      	mov	r2, r5
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <_svfiprintf_r+0x1f4>)
 80093e2:	a904      	add	r1, sp, #16
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7fe f97b 	bl	80076e0 <_printf_i>
 80093ea:	e7eb      	b.n	80093c4 <_svfiprintf_r+0x1c0>
 80093ec:	0800a494 	.word	0x0800a494
 80093f0:	0800a49e 	.word	0x0800a49e
 80093f4:	080071d1 	.word	0x080071d1
 80093f8:	08009151 	.word	0x08009151
 80093fc:	0800a49a 	.word	0x0800a49a

08009400 <__sflush_r>:
 8009400:	898a      	ldrh	r2, [r1, #12]
 8009402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009406:	4605      	mov	r5, r0
 8009408:	0710      	lsls	r0, r2, #28
 800940a:	460c      	mov	r4, r1
 800940c:	d458      	bmi.n	80094c0 <__sflush_r+0xc0>
 800940e:	684b      	ldr	r3, [r1, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	dc05      	bgt.n	8009420 <__sflush_r+0x20>
 8009414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	dc02      	bgt.n	8009420 <__sflush_r+0x20>
 800941a:	2000      	movs	r0, #0
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009422:	2e00      	cmp	r6, #0
 8009424:	d0f9      	beq.n	800941a <__sflush_r+0x1a>
 8009426:	2300      	movs	r3, #0
 8009428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800942c:	682f      	ldr	r7, [r5, #0]
 800942e:	6a21      	ldr	r1, [r4, #32]
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	d032      	beq.n	800949a <__sflush_r+0x9a>
 8009434:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	075a      	lsls	r2, r3, #29
 800943a:	d505      	bpl.n	8009448 <__sflush_r+0x48>
 800943c:	6863      	ldr	r3, [r4, #4]
 800943e:	1ac0      	subs	r0, r0, r3
 8009440:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009442:	b10b      	cbz	r3, 8009448 <__sflush_r+0x48>
 8009444:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009446:	1ac0      	subs	r0, r0, r3
 8009448:	2300      	movs	r3, #0
 800944a:	4602      	mov	r2, r0
 800944c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800944e:	6a21      	ldr	r1, [r4, #32]
 8009450:	4628      	mov	r0, r5
 8009452:	47b0      	blx	r6
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	d106      	bne.n	8009468 <__sflush_r+0x68>
 800945a:	6829      	ldr	r1, [r5, #0]
 800945c:	291d      	cmp	r1, #29
 800945e:	d82b      	bhi.n	80094b8 <__sflush_r+0xb8>
 8009460:	4a29      	ldr	r2, [pc, #164]	; (8009508 <__sflush_r+0x108>)
 8009462:	410a      	asrs	r2, r1
 8009464:	07d6      	lsls	r6, r2, #31
 8009466:	d427      	bmi.n	80094b8 <__sflush_r+0xb8>
 8009468:	2200      	movs	r2, #0
 800946a:	6062      	str	r2, [r4, #4]
 800946c:	04d9      	lsls	r1, r3, #19
 800946e:	6922      	ldr	r2, [r4, #16]
 8009470:	6022      	str	r2, [r4, #0]
 8009472:	d504      	bpl.n	800947e <__sflush_r+0x7e>
 8009474:	1c42      	adds	r2, r0, #1
 8009476:	d101      	bne.n	800947c <__sflush_r+0x7c>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	b903      	cbnz	r3, 800947e <__sflush_r+0x7e>
 800947c:	6560      	str	r0, [r4, #84]	; 0x54
 800947e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009480:	602f      	str	r7, [r5, #0]
 8009482:	2900      	cmp	r1, #0
 8009484:	d0c9      	beq.n	800941a <__sflush_r+0x1a>
 8009486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800948a:	4299      	cmp	r1, r3
 800948c:	d002      	beq.n	8009494 <__sflush_r+0x94>
 800948e:	4628      	mov	r0, r5
 8009490:	f7ff f9e2 	bl	8008858 <_free_r>
 8009494:	2000      	movs	r0, #0
 8009496:	6360      	str	r0, [r4, #52]	; 0x34
 8009498:	e7c0      	b.n	800941c <__sflush_r+0x1c>
 800949a:	2301      	movs	r3, #1
 800949c:	4628      	mov	r0, r5
 800949e:	47b0      	blx	r6
 80094a0:	1c41      	adds	r1, r0, #1
 80094a2:	d1c8      	bne.n	8009436 <__sflush_r+0x36>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0c5      	beq.n	8009436 <__sflush_r+0x36>
 80094aa:	2b1d      	cmp	r3, #29
 80094ac:	d001      	beq.n	80094b2 <__sflush_r+0xb2>
 80094ae:	2b16      	cmp	r3, #22
 80094b0:	d101      	bne.n	80094b6 <__sflush_r+0xb6>
 80094b2:	602f      	str	r7, [r5, #0]
 80094b4:	e7b1      	b.n	800941a <__sflush_r+0x1a>
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	e7ad      	b.n	800941c <__sflush_r+0x1c>
 80094c0:	690f      	ldr	r7, [r1, #16]
 80094c2:	2f00      	cmp	r7, #0
 80094c4:	d0a9      	beq.n	800941a <__sflush_r+0x1a>
 80094c6:	0793      	lsls	r3, r2, #30
 80094c8:	680e      	ldr	r6, [r1, #0]
 80094ca:	bf08      	it	eq
 80094cc:	694b      	ldreq	r3, [r1, #20]
 80094ce:	600f      	str	r7, [r1, #0]
 80094d0:	bf18      	it	ne
 80094d2:	2300      	movne	r3, #0
 80094d4:	eba6 0807 	sub.w	r8, r6, r7
 80094d8:	608b      	str	r3, [r1, #8]
 80094da:	f1b8 0f00 	cmp.w	r8, #0
 80094de:	dd9c      	ble.n	800941a <__sflush_r+0x1a>
 80094e0:	6a21      	ldr	r1, [r4, #32]
 80094e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094e4:	4643      	mov	r3, r8
 80094e6:	463a      	mov	r2, r7
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b0      	blx	r6
 80094ec:	2800      	cmp	r0, #0
 80094ee:	dc06      	bgt.n	80094fe <__sflush_r+0xfe>
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	e78e      	b.n	800941c <__sflush_r+0x1c>
 80094fe:	4407      	add	r7, r0
 8009500:	eba8 0800 	sub.w	r8, r8, r0
 8009504:	e7e9      	b.n	80094da <__sflush_r+0xda>
 8009506:	bf00      	nop
 8009508:	dfbffffe 	.word	0xdfbffffe

0800950c <_fflush_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	690b      	ldr	r3, [r1, #16]
 8009510:	4605      	mov	r5, r0
 8009512:	460c      	mov	r4, r1
 8009514:	b913      	cbnz	r3, 800951c <_fflush_r+0x10>
 8009516:	2500      	movs	r5, #0
 8009518:	4628      	mov	r0, r5
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	b118      	cbz	r0, 8009526 <_fflush_r+0x1a>
 800951e:	6a03      	ldr	r3, [r0, #32]
 8009520:	b90b      	cbnz	r3, 8009526 <_fflush_r+0x1a>
 8009522:	f7fe fa8b 	bl	8007a3c <__sinit>
 8009526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0f3      	beq.n	8009516 <_fflush_r+0xa>
 800952e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009530:	07d0      	lsls	r0, r2, #31
 8009532:	d404      	bmi.n	800953e <_fflush_r+0x32>
 8009534:	0599      	lsls	r1, r3, #22
 8009536:	d402      	bmi.n	800953e <_fflush_r+0x32>
 8009538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800953a:	f7fe fb96 	bl	8007c6a <__retarget_lock_acquire_recursive>
 800953e:	4628      	mov	r0, r5
 8009540:	4621      	mov	r1, r4
 8009542:	f7ff ff5d 	bl	8009400 <__sflush_r>
 8009546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009548:	07da      	lsls	r2, r3, #31
 800954a:	4605      	mov	r5, r0
 800954c:	d4e4      	bmi.n	8009518 <_fflush_r+0xc>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	059b      	lsls	r3, r3, #22
 8009552:	d4e1      	bmi.n	8009518 <_fflush_r+0xc>
 8009554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009556:	f7fe fb89 	bl	8007c6c <__retarget_lock_release_recursive>
 800955a:	e7dd      	b.n	8009518 <_fflush_r+0xc>

0800955c <memmove>:
 800955c:	4288      	cmp	r0, r1
 800955e:	b510      	push	{r4, lr}
 8009560:	eb01 0402 	add.w	r4, r1, r2
 8009564:	d902      	bls.n	800956c <memmove+0x10>
 8009566:	4284      	cmp	r4, r0
 8009568:	4623      	mov	r3, r4
 800956a:	d807      	bhi.n	800957c <memmove+0x20>
 800956c:	1e43      	subs	r3, r0, #1
 800956e:	42a1      	cmp	r1, r4
 8009570:	d008      	beq.n	8009584 <memmove+0x28>
 8009572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800957a:	e7f8      	b.n	800956e <memmove+0x12>
 800957c:	4402      	add	r2, r0
 800957e:	4601      	mov	r1, r0
 8009580:	428a      	cmp	r2, r1
 8009582:	d100      	bne.n	8009586 <memmove+0x2a>
 8009584:	bd10      	pop	{r4, pc}
 8009586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800958a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800958e:	e7f7      	b.n	8009580 <memmove+0x24>

08009590 <_sbrk_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	; (80095ac <_sbrk_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7f7 faee 	bl	8000b7c <_sbrk>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_sbrk_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_sbrk_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	24000424 	.word	0x24000424

080095b0 <memcpy>:
 80095b0:	440a      	add	r2, r1
 80095b2:	4291      	cmp	r1, r2
 80095b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b8:	d100      	bne.n	80095bc <memcpy+0xc>
 80095ba:	4770      	bx	lr
 80095bc:	b510      	push	{r4, lr}
 80095be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c6:	4291      	cmp	r1, r2
 80095c8:	d1f9      	bne.n	80095be <memcpy+0xe>
 80095ca:	bd10      	pop	{r4, pc}

080095cc <__assert_func>:
 80095cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ce:	4614      	mov	r4, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <__assert_func+0x2c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4605      	mov	r5, r0
 80095d8:	68d8      	ldr	r0, [r3, #12]
 80095da:	b14c      	cbz	r4, 80095f0 <__assert_func+0x24>
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <__assert_func+0x30>)
 80095de:	9100      	str	r1, [sp, #0]
 80095e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <__assert_func+0x34>)
 80095e6:	462b      	mov	r3, r5
 80095e8:	f000 f872 	bl	80096d0 <fiprintf>
 80095ec:	f000 f882 	bl	80096f4 <abort>
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <__assert_func+0x38>)
 80095f2:	461c      	mov	r4, r3
 80095f4:	e7f3      	b.n	80095de <__assert_func+0x12>
 80095f6:	bf00      	nop
 80095f8:	24000068 	.word	0x24000068
 80095fc:	0800a4af 	.word	0x0800a4af
 8009600:	0800a4bc 	.word	0x0800a4bc
 8009604:	0800a4ea 	.word	0x0800a4ea

08009608 <_calloc_r>:
 8009608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800960a:	fba1 2402 	umull	r2, r4, r1, r2
 800960e:	b94c      	cbnz	r4, 8009624 <_calloc_r+0x1c>
 8009610:	4611      	mov	r1, r2
 8009612:	9201      	str	r2, [sp, #4]
 8009614:	f7ff f994 	bl	8008940 <_malloc_r>
 8009618:	9a01      	ldr	r2, [sp, #4]
 800961a:	4605      	mov	r5, r0
 800961c:	b930      	cbnz	r0, 800962c <_calloc_r+0x24>
 800961e:	4628      	mov	r0, r5
 8009620:	b003      	add	sp, #12
 8009622:	bd30      	pop	{r4, r5, pc}
 8009624:	220c      	movs	r2, #12
 8009626:	6002      	str	r2, [r0, #0]
 8009628:	2500      	movs	r5, #0
 800962a:	e7f8      	b.n	800961e <_calloc_r+0x16>
 800962c:	4621      	mov	r1, r4
 800962e:	f7fe fa9e 	bl	8007b6e <memset>
 8009632:	e7f4      	b.n	800961e <_calloc_r+0x16>

08009634 <__ascii_mbtowc>:
 8009634:	b082      	sub	sp, #8
 8009636:	b901      	cbnz	r1, 800963a <__ascii_mbtowc+0x6>
 8009638:	a901      	add	r1, sp, #4
 800963a:	b142      	cbz	r2, 800964e <__ascii_mbtowc+0x1a>
 800963c:	b14b      	cbz	r3, 8009652 <__ascii_mbtowc+0x1e>
 800963e:	7813      	ldrb	r3, [r2, #0]
 8009640:	600b      	str	r3, [r1, #0]
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	1e10      	subs	r0, r2, #0
 8009646:	bf18      	it	ne
 8009648:	2001      	movne	r0, #1
 800964a:	b002      	add	sp, #8
 800964c:	4770      	bx	lr
 800964e:	4610      	mov	r0, r2
 8009650:	e7fb      	b.n	800964a <__ascii_mbtowc+0x16>
 8009652:	f06f 0001 	mvn.w	r0, #1
 8009656:	e7f8      	b.n	800964a <__ascii_mbtowc+0x16>

08009658 <_realloc_r>:
 8009658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965c:	4680      	mov	r8, r0
 800965e:	4614      	mov	r4, r2
 8009660:	460e      	mov	r6, r1
 8009662:	b921      	cbnz	r1, 800966e <_realloc_r+0x16>
 8009664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009668:	4611      	mov	r1, r2
 800966a:	f7ff b969 	b.w	8008940 <_malloc_r>
 800966e:	b92a      	cbnz	r2, 800967c <_realloc_r+0x24>
 8009670:	f7ff f8f2 	bl	8008858 <_free_r>
 8009674:	4625      	mov	r5, r4
 8009676:	4628      	mov	r0, r5
 8009678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967c:	f000 f841 	bl	8009702 <_malloc_usable_size_r>
 8009680:	4284      	cmp	r4, r0
 8009682:	4607      	mov	r7, r0
 8009684:	d802      	bhi.n	800968c <_realloc_r+0x34>
 8009686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800968a:	d812      	bhi.n	80096b2 <_realloc_r+0x5a>
 800968c:	4621      	mov	r1, r4
 800968e:	4640      	mov	r0, r8
 8009690:	f7ff f956 	bl	8008940 <_malloc_r>
 8009694:	4605      	mov	r5, r0
 8009696:	2800      	cmp	r0, #0
 8009698:	d0ed      	beq.n	8009676 <_realloc_r+0x1e>
 800969a:	42bc      	cmp	r4, r7
 800969c:	4622      	mov	r2, r4
 800969e:	4631      	mov	r1, r6
 80096a0:	bf28      	it	cs
 80096a2:	463a      	movcs	r2, r7
 80096a4:	f7ff ff84 	bl	80095b0 <memcpy>
 80096a8:	4631      	mov	r1, r6
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7ff f8d4 	bl	8008858 <_free_r>
 80096b0:	e7e1      	b.n	8009676 <_realloc_r+0x1e>
 80096b2:	4635      	mov	r5, r6
 80096b4:	e7df      	b.n	8009676 <_realloc_r+0x1e>

080096b6 <__ascii_wctomb>:
 80096b6:	b149      	cbz	r1, 80096cc <__ascii_wctomb+0x16>
 80096b8:	2aff      	cmp	r2, #255	; 0xff
 80096ba:	bf85      	ittet	hi
 80096bc:	238a      	movhi	r3, #138	; 0x8a
 80096be:	6003      	strhi	r3, [r0, #0]
 80096c0:	700a      	strbls	r2, [r1, #0]
 80096c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80096c6:	bf98      	it	ls
 80096c8:	2001      	movls	r0, #1
 80096ca:	4770      	bx	lr
 80096cc:	4608      	mov	r0, r1
 80096ce:	4770      	bx	lr

080096d0 <fiprintf>:
 80096d0:	b40e      	push	{r1, r2, r3}
 80096d2:	b503      	push	{r0, r1, lr}
 80096d4:	4601      	mov	r1, r0
 80096d6:	ab03      	add	r3, sp, #12
 80096d8:	4805      	ldr	r0, [pc, #20]	; (80096f0 <fiprintf+0x20>)
 80096da:	f853 2b04 	ldr.w	r2, [r3], #4
 80096de:	6800      	ldr	r0, [r0, #0]
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	f000 f83f 	bl	8009764 <_vfiprintf_r>
 80096e6:	b002      	add	sp, #8
 80096e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ec:	b003      	add	sp, #12
 80096ee:	4770      	bx	lr
 80096f0:	24000068 	.word	0x24000068

080096f4 <abort>:
 80096f4:	b508      	push	{r3, lr}
 80096f6:	2006      	movs	r0, #6
 80096f8:	f000 fa0c 	bl	8009b14 <raise>
 80096fc:	2001      	movs	r0, #1
 80096fe:	f7f7 f9c5 	bl	8000a8c <_exit>

08009702 <_malloc_usable_size_r>:
 8009702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009706:	1f18      	subs	r0, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbc      	itt	lt
 800970c:	580b      	ldrlt	r3, [r1, r0]
 800970e:	18c0      	addlt	r0, r0, r3
 8009710:	4770      	bx	lr

08009712 <__sfputc_r>:
 8009712:	6893      	ldr	r3, [r2, #8]
 8009714:	3b01      	subs	r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	b410      	push	{r4}
 800971a:	6093      	str	r3, [r2, #8]
 800971c:	da08      	bge.n	8009730 <__sfputc_r+0x1e>
 800971e:	6994      	ldr	r4, [r2, #24]
 8009720:	42a3      	cmp	r3, r4
 8009722:	db01      	blt.n	8009728 <__sfputc_r+0x16>
 8009724:	290a      	cmp	r1, #10
 8009726:	d103      	bne.n	8009730 <__sfputc_r+0x1e>
 8009728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972c:	f000 b934 	b.w	8009998 <__swbuf_r>
 8009730:	6813      	ldr	r3, [r2, #0]
 8009732:	1c58      	adds	r0, r3, #1
 8009734:	6010      	str	r0, [r2, #0]
 8009736:	7019      	strb	r1, [r3, #0]
 8009738:	4608      	mov	r0, r1
 800973a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800973e:	4770      	bx	lr

08009740 <__sfputs_r>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	4606      	mov	r6, r0
 8009744:	460f      	mov	r7, r1
 8009746:	4614      	mov	r4, r2
 8009748:	18d5      	adds	r5, r2, r3
 800974a:	42ac      	cmp	r4, r5
 800974c:	d101      	bne.n	8009752 <__sfputs_r+0x12>
 800974e:	2000      	movs	r0, #0
 8009750:	e007      	b.n	8009762 <__sfputs_r+0x22>
 8009752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009756:	463a      	mov	r2, r7
 8009758:	4630      	mov	r0, r6
 800975a:	f7ff ffda 	bl	8009712 <__sfputc_r>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d1f3      	bne.n	800974a <__sfputs_r+0xa>
 8009762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009764 <_vfiprintf_r>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	460d      	mov	r5, r1
 800976a:	b09d      	sub	sp, #116	; 0x74
 800976c:	4614      	mov	r4, r2
 800976e:	4698      	mov	r8, r3
 8009770:	4606      	mov	r6, r0
 8009772:	b118      	cbz	r0, 800977c <_vfiprintf_r+0x18>
 8009774:	6a03      	ldr	r3, [r0, #32]
 8009776:	b90b      	cbnz	r3, 800977c <_vfiprintf_r+0x18>
 8009778:	f7fe f960 	bl	8007a3c <__sinit>
 800977c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	d405      	bmi.n	800978e <_vfiprintf_r+0x2a>
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d402      	bmi.n	800978e <_vfiprintf_r+0x2a>
 8009788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800978a:	f7fe fa6e 	bl	8007c6a <__retarget_lock_acquire_recursive>
 800978e:	89ab      	ldrh	r3, [r5, #12]
 8009790:	071b      	lsls	r3, r3, #28
 8009792:	d501      	bpl.n	8009798 <_vfiprintf_r+0x34>
 8009794:	692b      	ldr	r3, [r5, #16]
 8009796:	b99b      	cbnz	r3, 80097c0 <_vfiprintf_r+0x5c>
 8009798:	4629      	mov	r1, r5
 800979a:	4630      	mov	r0, r6
 800979c:	f000 f93a 	bl	8009a14 <__swsetup_r>
 80097a0:	b170      	cbz	r0, 80097c0 <_vfiprintf_r+0x5c>
 80097a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a4:	07dc      	lsls	r4, r3, #31
 80097a6:	d504      	bpl.n	80097b2 <_vfiprintf_r+0x4e>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	b01d      	add	sp, #116	; 0x74
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	89ab      	ldrh	r3, [r5, #12]
 80097b4:	0598      	lsls	r0, r3, #22
 80097b6:	d4f7      	bmi.n	80097a8 <_vfiprintf_r+0x44>
 80097b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ba:	f7fe fa57 	bl	8007c6c <__retarget_lock_release_recursive>
 80097be:	e7f3      	b.n	80097a8 <_vfiprintf_r+0x44>
 80097c0:	2300      	movs	r3, #0
 80097c2:	9309      	str	r3, [sp, #36]	; 0x24
 80097c4:	2320      	movs	r3, #32
 80097c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ce:	2330      	movs	r3, #48	; 0x30
 80097d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009984 <_vfiprintf_r+0x220>
 80097d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097d8:	f04f 0901 	mov.w	r9, #1
 80097dc:	4623      	mov	r3, r4
 80097de:	469a      	mov	sl, r3
 80097e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e4:	b10a      	cbz	r2, 80097ea <_vfiprintf_r+0x86>
 80097e6:	2a25      	cmp	r2, #37	; 0x25
 80097e8:	d1f9      	bne.n	80097de <_vfiprintf_r+0x7a>
 80097ea:	ebba 0b04 	subs.w	fp, sl, r4
 80097ee:	d00b      	beq.n	8009808 <_vfiprintf_r+0xa4>
 80097f0:	465b      	mov	r3, fp
 80097f2:	4622      	mov	r2, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ffa2 	bl	8009740 <__sfputs_r>
 80097fc:	3001      	adds	r0, #1
 80097fe:	f000 80a9 	beq.w	8009954 <_vfiprintf_r+0x1f0>
 8009802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009804:	445a      	add	r2, fp
 8009806:	9209      	str	r2, [sp, #36]	; 0x24
 8009808:	f89a 3000 	ldrb.w	r3, [sl]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 80a1 	beq.w	8009954 <_vfiprintf_r+0x1f0>
 8009812:	2300      	movs	r3, #0
 8009814:	f04f 32ff 	mov.w	r2, #4294967295
 8009818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800981c:	f10a 0a01 	add.w	sl, sl, #1
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	9307      	str	r3, [sp, #28]
 8009824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009828:	931a      	str	r3, [sp, #104]	; 0x68
 800982a:	4654      	mov	r4, sl
 800982c:	2205      	movs	r2, #5
 800982e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009832:	4854      	ldr	r0, [pc, #336]	; (8009984 <_vfiprintf_r+0x220>)
 8009834:	f7f6 fd54 	bl	80002e0 <memchr>
 8009838:	9a04      	ldr	r2, [sp, #16]
 800983a:	b9d8      	cbnz	r0, 8009874 <_vfiprintf_r+0x110>
 800983c:	06d1      	lsls	r1, r2, #27
 800983e:	bf44      	itt	mi
 8009840:	2320      	movmi	r3, #32
 8009842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009846:	0713      	lsls	r3, r2, #28
 8009848:	bf44      	itt	mi
 800984a:	232b      	movmi	r3, #43	; 0x2b
 800984c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009850:	f89a 3000 	ldrb.w	r3, [sl]
 8009854:	2b2a      	cmp	r3, #42	; 0x2a
 8009856:	d015      	beq.n	8009884 <_vfiprintf_r+0x120>
 8009858:	9a07      	ldr	r2, [sp, #28]
 800985a:	4654      	mov	r4, sl
 800985c:	2000      	movs	r0, #0
 800985e:	f04f 0c0a 	mov.w	ip, #10
 8009862:	4621      	mov	r1, r4
 8009864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009868:	3b30      	subs	r3, #48	; 0x30
 800986a:	2b09      	cmp	r3, #9
 800986c:	d94d      	bls.n	800990a <_vfiprintf_r+0x1a6>
 800986e:	b1b0      	cbz	r0, 800989e <_vfiprintf_r+0x13a>
 8009870:	9207      	str	r2, [sp, #28]
 8009872:	e014      	b.n	800989e <_vfiprintf_r+0x13a>
 8009874:	eba0 0308 	sub.w	r3, r0, r8
 8009878:	fa09 f303 	lsl.w	r3, r9, r3
 800987c:	4313      	orrs	r3, r2
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	46a2      	mov	sl, r4
 8009882:	e7d2      	b.n	800982a <_vfiprintf_r+0xc6>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	1d19      	adds	r1, r3, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	9103      	str	r1, [sp, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfbb      	ittet	lt
 8009890:	425b      	neglt	r3, r3
 8009892:	f042 0202 	orrlt.w	r2, r2, #2
 8009896:	9307      	strge	r3, [sp, #28]
 8009898:	9307      	strlt	r3, [sp, #28]
 800989a:	bfb8      	it	lt
 800989c:	9204      	strlt	r2, [sp, #16]
 800989e:	7823      	ldrb	r3, [r4, #0]
 80098a0:	2b2e      	cmp	r3, #46	; 0x2e
 80098a2:	d10c      	bne.n	80098be <_vfiprintf_r+0x15a>
 80098a4:	7863      	ldrb	r3, [r4, #1]
 80098a6:	2b2a      	cmp	r3, #42	; 0x2a
 80098a8:	d134      	bne.n	8009914 <_vfiprintf_r+0x1b0>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	1d1a      	adds	r2, r3, #4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	9203      	str	r2, [sp, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bfb8      	it	lt
 80098b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ba:	3402      	adds	r4, #2
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009994 <_vfiprintf_r+0x230>
 80098c2:	7821      	ldrb	r1, [r4, #0]
 80098c4:	2203      	movs	r2, #3
 80098c6:	4650      	mov	r0, sl
 80098c8:	f7f6 fd0a 	bl	80002e0 <memchr>
 80098cc:	b138      	cbz	r0, 80098de <_vfiprintf_r+0x17a>
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	eba0 000a 	sub.w	r0, r0, sl
 80098d4:	2240      	movs	r2, #64	; 0x40
 80098d6:	4082      	lsls	r2, r0
 80098d8:	4313      	orrs	r3, r2
 80098da:	3401      	adds	r4, #1
 80098dc:	9304      	str	r3, [sp, #16]
 80098de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e2:	4829      	ldr	r0, [pc, #164]	; (8009988 <_vfiprintf_r+0x224>)
 80098e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098e8:	2206      	movs	r2, #6
 80098ea:	f7f6 fcf9 	bl	80002e0 <memchr>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d03f      	beq.n	8009972 <_vfiprintf_r+0x20e>
 80098f2:	4b26      	ldr	r3, [pc, #152]	; (800998c <_vfiprintf_r+0x228>)
 80098f4:	bb1b      	cbnz	r3, 800993e <_vfiprintf_r+0x1da>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	3307      	adds	r3, #7
 80098fa:	f023 0307 	bic.w	r3, r3, #7
 80098fe:	3308      	adds	r3, #8
 8009900:	9303      	str	r3, [sp, #12]
 8009902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009904:	443b      	add	r3, r7
 8009906:	9309      	str	r3, [sp, #36]	; 0x24
 8009908:	e768      	b.n	80097dc <_vfiprintf_r+0x78>
 800990a:	fb0c 3202 	mla	r2, ip, r2, r3
 800990e:	460c      	mov	r4, r1
 8009910:	2001      	movs	r0, #1
 8009912:	e7a6      	b.n	8009862 <_vfiprintf_r+0xfe>
 8009914:	2300      	movs	r3, #0
 8009916:	3401      	adds	r4, #1
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	4619      	mov	r1, r3
 800991c:	f04f 0c0a 	mov.w	ip, #10
 8009920:	4620      	mov	r0, r4
 8009922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009926:	3a30      	subs	r2, #48	; 0x30
 8009928:	2a09      	cmp	r2, #9
 800992a:	d903      	bls.n	8009934 <_vfiprintf_r+0x1d0>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0c6      	beq.n	80098be <_vfiprintf_r+0x15a>
 8009930:	9105      	str	r1, [sp, #20]
 8009932:	e7c4      	b.n	80098be <_vfiprintf_r+0x15a>
 8009934:	fb0c 2101 	mla	r1, ip, r1, r2
 8009938:	4604      	mov	r4, r0
 800993a:	2301      	movs	r3, #1
 800993c:	e7f0      	b.n	8009920 <_vfiprintf_r+0x1bc>
 800993e:	ab03      	add	r3, sp, #12
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	462a      	mov	r2, r5
 8009944:	4b12      	ldr	r3, [pc, #72]	; (8009990 <_vfiprintf_r+0x22c>)
 8009946:	a904      	add	r1, sp, #16
 8009948:	4630      	mov	r0, r6
 800994a:	f7fd fc41 	bl	80071d0 <_printf_float>
 800994e:	4607      	mov	r7, r0
 8009950:	1c78      	adds	r0, r7, #1
 8009952:	d1d6      	bne.n	8009902 <_vfiprintf_r+0x19e>
 8009954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009956:	07d9      	lsls	r1, r3, #31
 8009958:	d405      	bmi.n	8009966 <_vfiprintf_r+0x202>
 800995a:	89ab      	ldrh	r3, [r5, #12]
 800995c:	059a      	lsls	r2, r3, #22
 800995e:	d402      	bmi.n	8009966 <_vfiprintf_r+0x202>
 8009960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009962:	f7fe f983 	bl	8007c6c <__retarget_lock_release_recursive>
 8009966:	89ab      	ldrh	r3, [r5, #12]
 8009968:	065b      	lsls	r3, r3, #25
 800996a:	f53f af1d 	bmi.w	80097a8 <_vfiprintf_r+0x44>
 800996e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009970:	e71c      	b.n	80097ac <_vfiprintf_r+0x48>
 8009972:	ab03      	add	r3, sp, #12
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	462a      	mov	r2, r5
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <_vfiprintf_r+0x22c>)
 800997a:	a904      	add	r1, sp, #16
 800997c:	4630      	mov	r0, r6
 800997e:	f7fd feaf 	bl	80076e0 <_printf_i>
 8009982:	e7e4      	b.n	800994e <_vfiprintf_r+0x1ea>
 8009984:	0800a494 	.word	0x0800a494
 8009988:	0800a49e 	.word	0x0800a49e
 800998c:	080071d1 	.word	0x080071d1
 8009990:	08009741 	.word	0x08009741
 8009994:	0800a49a 	.word	0x0800a49a

08009998 <__swbuf_r>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	460e      	mov	r6, r1
 800999c:	4614      	mov	r4, r2
 800999e:	4605      	mov	r5, r0
 80099a0:	b118      	cbz	r0, 80099aa <__swbuf_r+0x12>
 80099a2:	6a03      	ldr	r3, [r0, #32]
 80099a4:	b90b      	cbnz	r3, 80099aa <__swbuf_r+0x12>
 80099a6:	f7fe f849 	bl	8007a3c <__sinit>
 80099aa:	69a3      	ldr	r3, [r4, #24]
 80099ac:	60a3      	str	r3, [r4, #8]
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	071a      	lsls	r2, r3, #28
 80099b2:	d525      	bpl.n	8009a00 <__swbuf_r+0x68>
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	b31b      	cbz	r3, 8009a00 <__swbuf_r+0x68>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	1a98      	subs	r0, r3, r2
 80099be:	6963      	ldr	r3, [r4, #20]
 80099c0:	b2f6      	uxtb	r6, r6
 80099c2:	4283      	cmp	r3, r0
 80099c4:	4637      	mov	r7, r6
 80099c6:	dc04      	bgt.n	80099d2 <__swbuf_r+0x3a>
 80099c8:	4621      	mov	r1, r4
 80099ca:	4628      	mov	r0, r5
 80099cc:	f7ff fd9e 	bl	800950c <_fflush_r>
 80099d0:	b9e0      	cbnz	r0, 8009a0c <__swbuf_r+0x74>
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	60a3      	str	r3, [r4, #8]
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	701e      	strb	r6, [r3, #0]
 80099e0:	6962      	ldr	r2, [r4, #20]
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d004      	beq.n	80099f2 <__swbuf_r+0x5a>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	07db      	lsls	r3, r3, #31
 80099ec:	d506      	bpl.n	80099fc <__swbuf_r+0x64>
 80099ee:	2e0a      	cmp	r6, #10
 80099f0:	d104      	bne.n	80099fc <__swbuf_r+0x64>
 80099f2:	4621      	mov	r1, r4
 80099f4:	4628      	mov	r0, r5
 80099f6:	f7ff fd89 	bl	800950c <_fflush_r>
 80099fa:	b938      	cbnz	r0, 8009a0c <__swbuf_r+0x74>
 80099fc:	4638      	mov	r0, r7
 80099fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a00:	4621      	mov	r1, r4
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f806 	bl	8009a14 <__swsetup_r>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d0d5      	beq.n	80099b8 <__swbuf_r+0x20>
 8009a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a10:	e7f4      	b.n	80099fc <__swbuf_r+0x64>
	...

08009a14 <__swsetup_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4b2a      	ldr	r3, [pc, #168]	; (8009ac0 <__swsetup_r+0xac>)
 8009a18:	4605      	mov	r5, r0
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	b118      	cbz	r0, 8009a28 <__swsetup_r+0x14>
 8009a20:	6a03      	ldr	r3, [r0, #32]
 8009a22:	b90b      	cbnz	r3, 8009a28 <__swsetup_r+0x14>
 8009a24:	f7fe f80a 	bl	8007a3c <__sinit>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a2e:	0718      	lsls	r0, r3, #28
 8009a30:	d422      	bmi.n	8009a78 <__swsetup_r+0x64>
 8009a32:	06d9      	lsls	r1, r3, #27
 8009a34:	d407      	bmi.n	8009a46 <__swsetup_r+0x32>
 8009a36:	2309      	movs	r3, #9
 8009a38:	602b      	str	r3, [r5, #0]
 8009a3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295
 8009a44:	e034      	b.n	8009ab0 <__swsetup_r+0x9c>
 8009a46:	0758      	lsls	r0, r3, #29
 8009a48:	d512      	bpl.n	8009a70 <__swsetup_r+0x5c>
 8009a4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a4c:	b141      	cbz	r1, 8009a60 <__swsetup_r+0x4c>
 8009a4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a52:	4299      	cmp	r1, r3
 8009a54:	d002      	beq.n	8009a5c <__swsetup_r+0x48>
 8009a56:	4628      	mov	r0, r5
 8009a58:	f7fe fefe 	bl	8008858 <_free_r>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	6363      	str	r3, [r4, #52]	; 0x34
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6063      	str	r3, [r4, #4]
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f043 0308 	orr.w	r3, r3, #8
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	b94b      	cbnz	r3, 8009a90 <__swsetup_r+0x7c>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a86:	d003      	beq.n	8009a90 <__swsetup_r+0x7c>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 f884 	bl	8009b98 <__smakebuf_r>
 8009a90:	89a0      	ldrh	r0, [r4, #12]
 8009a92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a96:	f010 0301 	ands.w	r3, r0, #1
 8009a9a:	d00a      	beq.n	8009ab2 <__swsetup_r+0x9e>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60a3      	str	r3, [r4, #8]
 8009aa0:	6963      	ldr	r3, [r4, #20]
 8009aa2:	425b      	negs	r3, r3
 8009aa4:	61a3      	str	r3, [r4, #24]
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	b943      	cbnz	r3, 8009abc <__swsetup_r+0xa8>
 8009aaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aae:	d1c4      	bne.n	8009a3a <__swsetup_r+0x26>
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
 8009ab2:	0781      	lsls	r1, r0, #30
 8009ab4:	bf58      	it	pl
 8009ab6:	6963      	ldrpl	r3, [r4, #20]
 8009ab8:	60a3      	str	r3, [r4, #8]
 8009aba:	e7f4      	b.n	8009aa6 <__swsetup_r+0x92>
 8009abc:	2000      	movs	r0, #0
 8009abe:	e7f7      	b.n	8009ab0 <__swsetup_r+0x9c>
 8009ac0:	24000068 	.word	0x24000068

08009ac4 <_raise_r>:
 8009ac4:	291f      	cmp	r1, #31
 8009ac6:	b538      	push	{r3, r4, r5, lr}
 8009ac8:	4604      	mov	r4, r0
 8009aca:	460d      	mov	r5, r1
 8009acc:	d904      	bls.n	8009ad8 <_raise_r+0x14>
 8009ace:	2316      	movs	r3, #22
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ada:	b112      	cbz	r2, 8009ae2 <_raise_r+0x1e>
 8009adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ae0:	b94b      	cbnz	r3, 8009af6 <_raise_r+0x32>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 f830 	bl	8009b48 <_getpid_r>
 8009ae8:	462a      	mov	r2, r5
 8009aea:	4601      	mov	r1, r0
 8009aec:	4620      	mov	r0, r4
 8009aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af2:	f000 b817 	b.w	8009b24 <_kill_r>
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d00a      	beq.n	8009b10 <_raise_r+0x4c>
 8009afa:	1c59      	adds	r1, r3, #1
 8009afc:	d103      	bne.n	8009b06 <_raise_r+0x42>
 8009afe:	2316      	movs	r3, #22
 8009b00:	6003      	str	r3, [r0, #0]
 8009b02:	2001      	movs	r0, #1
 8009b04:	e7e7      	b.n	8009ad6 <_raise_r+0x12>
 8009b06:	2400      	movs	r4, #0
 8009b08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	4798      	blx	r3
 8009b10:	2000      	movs	r0, #0
 8009b12:	e7e0      	b.n	8009ad6 <_raise_r+0x12>

08009b14 <raise>:
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <raise+0xc>)
 8009b16:	4601      	mov	r1, r0
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	f7ff bfd3 	b.w	8009ac4 <_raise_r>
 8009b1e:	bf00      	nop
 8009b20:	24000068 	.word	0x24000068

08009b24 <_kill_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d07      	ldr	r5, [pc, #28]	; (8009b44 <_kill_r+0x20>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f7f6 ff9b 	bl	8000a6c <_kill>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d102      	bne.n	8009b40 <_kill_r+0x1c>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	b103      	cbz	r3, 8009b40 <_kill_r+0x1c>
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	bd38      	pop	{r3, r4, r5, pc}
 8009b42:	bf00      	nop
 8009b44:	24000424 	.word	0x24000424

08009b48 <_getpid_r>:
 8009b48:	f7f6 bf88 	b.w	8000a5c <_getpid>

08009b4c <__swhatbuf_r>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	460c      	mov	r4, r1
 8009b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b54:	2900      	cmp	r1, #0
 8009b56:	b096      	sub	sp, #88	; 0x58
 8009b58:	4615      	mov	r5, r2
 8009b5a:	461e      	mov	r6, r3
 8009b5c:	da0d      	bge.n	8009b7a <__swhatbuf_r+0x2e>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b64:	f04f 0100 	mov.w	r1, #0
 8009b68:	bf0c      	ite	eq
 8009b6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b6e:	2340      	movne	r3, #64	; 0x40
 8009b70:	2000      	movs	r0, #0
 8009b72:	6031      	str	r1, [r6, #0]
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	b016      	add	sp, #88	; 0x58
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	466a      	mov	r2, sp
 8009b7c:	f000 f848 	bl	8009c10 <_fstat_r>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	dbec      	blt.n	8009b5e <__swhatbuf_r+0x12>
 8009b84:	9901      	ldr	r1, [sp, #4]
 8009b86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b8e:	4259      	negs	r1, r3
 8009b90:	4159      	adcs	r1, r3
 8009b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b96:	e7eb      	b.n	8009b70 <__swhatbuf_r+0x24>

08009b98 <__smakebuf_r>:
 8009b98:	898b      	ldrh	r3, [r1, #12]
 8009b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b9c:	079d      	lsls	r5, r3, #30
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	d507      	bpl.n	8009bb4 <__smakebuf_r+0x1c>
 8009ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	2301      	movs	r3, #1
 8009bae:	6163      	str	r3, [r4, #20]
 8009bb0:	b002      	add	sp, #8
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	ab01      	add	r3, sp, #4
 8009bb6:	466a      	mov	r2, sp
 8009bb8:	f7ff ffc8 	bl	8009b4c <__swhatbuf_r>
 8009bbc:	9900      	ldr	r1, [sp, #0]
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7fe febd 	bl	8008940 <_malloc_r>
 8009bc6:	b948      	cbnz	r0, 8009bdc <__smakebuf_r+0x44>
 8009bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bcc:	059a      	lsls	r2, r3, #22
 8009bce:	d4ef      	bmi.n	8009bb0 <__smakebuf_r+0x18>
 8009bd0:	f023 0303 	bic.w	r3, r3, #3
 8009bd4:	f043 0302 	orr.w	r3, r3, #2
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	e7e3      	b.n	8009ba4 <__smakebuf_r+0xc>
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	6020      	str	r0, [r4, #0]
 8009be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	9b00      	ldr	r3, [sp, #0]
 8009be8:	6163      	str	r3, [r4, #20]
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	6120      	str	r0, [r4, #16]
 8009bee:	b15b      	cbz	r3, 8009c08 <__smakebuf_r+0x70>
 8009bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f000 f81d 	bl	8009c34 <_isatty_r>
 8009bfa:	b128      	cbz	r0, 8009c08 <__smakebuf_r+0x70>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f023 0303 	bic.w	r3, r3, #3
 8009c02:	f043 0301 	orr.w	r3, r3, #1
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	431d      	orrs	r5, r3
 8009c0c:	81a5      	strh	r5, [r4, #12]
 8009c0e:	e7cf      	b.n	8009bb0 <__smakebuf_r+0x18>

08009c10 <_fstat_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d07      	ldr	r5, [pc, #28]	; (8009c30 <_fstat_r+0x20>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	f7f6 ff84 	bl	8000b2a <_fstat>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	d102      	bne.n	8009c2c <_fstat_r+0x1c>
 8009c26:	682b      	ldr	r3, [r5, #0]
 8009c28:	b103      	cbz	r3, 8009c2c <_fstat_r+0x1c>
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	24000424 	.word	0x24000424

08009c34 <_isatty_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d06      	ldr	r5, [pc, #24]	; (8009c50 <_isatty_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7f6 ff83 	bl	8000b4a <_isatty>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_isatty_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_isatty_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	24000424 	.word	0x24000424

08009c54 <_init>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr

08009c60 <_fini>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr
