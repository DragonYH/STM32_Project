
CP_ThreePortDCDC_F103ZET6_Hollies_School.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008778  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  08008960  08008960  00018960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c4  080093c4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080093c4  080093c4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093c4  080093c4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c4  080093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080093cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e8  080095b4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080095b4  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edd3  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d1  00000000  00000000  0002efe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000313b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00032378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b613  00000000  00000000  00033238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001205a  00000000  00000000  0004e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d477  00000000  00000000  000608a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdd1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005400  00000000  00000000  000fdd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008948 	.word	0x08008948

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	08008948 	.word	0x08008948

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <keyboard_function>:
//PID pid2;	//电池侧pid
//ads1115采样值变�???????????
double V1IN = 0, VSIN = 0, VOUT = 0, ERR = 0, Target = 30.0;
//按键功能
void keyboard_function()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	switch (KEY_SCAN())
 80010f4:	f004 fb34 	bl	8005760 <KEY_SCAN>
 80010f8:	4603      	mov	r3, r0
 80010fa:	3b01      	subs	r3, #1
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d87c      	bhi.n	80011fa <keyboard_function+0x10a>
 8001100:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <keyboard_function+0x18>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001149 	.word	0x08001149
 800110c:	080011f9 	.word	0x080011f9
 8001110:	080011f9 	.word	0x080011f9
 8001114:	080011f9 	.word	0x080011f9
 8001118:	080011f9 	.word	0x080011f9
 800111c:	080011f9 	.word	0x080011f9
 8001120:	080011f9 	.word	0x080011f9
 8001124:	080011f9 	.word	0x080011f9
 8001128:	080011f9 	.word	0x080011f9
 800112c:	080011f9 	.word	0x080011f9
 8001130:	08001151 	.word	0x08001151
 8001134:	0800116d 	.word	0x0800116d
 8001138:	08001189 	.word	0x08001189
 800113c:	080011a5 	.word	0x080011a5
 8001140:	080011c1 	.word	0x080011c1
 8001144:	080011dd 	.word	0x080011dd
	{
	case 1:
		HAL_TIM_Base_Start_IT(&htim1);
 8001148:	4831      	ldr	r0, [pc, #196]	; (8001210 <keyboard_function+0x120>)
 800114a:	f003 f949 	bl	80043e0 <HAL_TIM_Base_Start_IT>
		break;
 800114e:	e054      	b.n	80011fa <keyboard_function+0x10a>
	case 9:
		break;
	case 10:
		break;
	case 11:
		Target-=0.5;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <keyboard_function+0x124>)
 8001152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <keyboard_function+0x128>)
 800115c:	f7ff f924 	bl	80003a8 <__aeabi_dsub>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	492b      	ldr	r1, [pc, #172]	; (8001214 <keyboard_function+0x124>)
 8001166:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800116a:	e046      	b.n	80011fa <keyboard_function+0x10a>
	case 12:
		Target+=0.5;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <keyboard_function+0x124>)
 800116e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <keyboard_function+0x128>)
 8001178:	f7ff f918 	bl	80003ac <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4924      	ldr	r1, [pc, #144]	; (8001214 <keyboard_function+0x124>)
 8001182:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001186:	e038      	b.n	80011fa <keyboard_function+0x10a>
	case 13:
		ERR+=0.01;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <keyboard_function+0x12c>)
 800118a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800118e:	a31c      	add	r3, pc, #112	; (adr r3, 8001200 <keyboard_function+0x110>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff f90a 	bl	80003ac <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	491f      	ldr	r1, [pc, #124]	; (800121c <keyboard_function+0x12c>)
 800119e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80011a2:	e02a      	b.n	80011fa <keyboard_function+0x10a>
	case 14:
		ERR+=0.1;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <keyboard_function+0x12c>)
 80011a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011aa:	a317      	add	r3, pc, #92	; (adr r3, 8001208 <keyboard_function+0x118>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff f8fc 	bl	80003ac <__adddf3>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4918      	ldr	r1, [pc, #96]	; (800121c <keyboard_function+0x12c>)
 80011ba:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80011be:	e01c      	b.n	80011fa <keyboard_function+0x10a>
	case 15:
		ERR-=0.1;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <keyboard_function+0x12c>)
 80011c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c6:	a310      	add	r3, pc, #64	; (adr r3, 8001208 <keyboard_function+0x118>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f8ec 	bl	80003a8 <__aeabi_dsub>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4911      	ldr	r1, [pc, #68]	; (800121c <keyboard_function+0x12c>)
 80011d6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80011da:	e00e      	b.n	80011fa <keyboard_function+0x10a>
	case 16:
		ERR-=0.01;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <keyboard_function+0x12c>)
 80011de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e2:	a307      	add	r3, pc, #28	; (adr r3, 8001200 <keyboard_function+0x110>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f8de 	bl	80003a8 <__aeabi_dsub>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	490a      	ldr	r1, [pc, #40]	; (800121c <keyboard_function+0x12c>)
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80011f6:	e000      	b.n	80011fa <keyboard_function+0x10a>
		break;
 80011f8:	bf00      	nop
	}
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	47ae147b 	.word	0x47ae147b
 8001204:	3f847ae1 	.word	0x3f847ae1
 8001208:	9999999a 	.word	0x9999999a
 800120c:	3fb99999 	.word	0x3fb99999
 8001210:	20000304 	.word	0x20000304
 8001214:	20000000 	.word	0x20000000
 8001218:	3fe00000 	.word	0x3fe00000
 800121c:	200003b0 	.word	0x200003b0

08001220 <oled_show>:
//显示
void oled_show()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
	OLED_Clear();
 8001226:	f004 fb89 	bl	800593c <OLED_Clear>
	//电源侧显示当前计数�?�及占空�????????????
	uint32_t i = __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_1);
 800122a:	4b51      	ldr	r3, [pc, #324]	; (8001370 <oled_show+0x150>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	607b      	str	r3, [r7, #4]
	OLED_ShowNum(0, 0, i, 4, 16);
 8001232:	2310      	movs	r3, #16
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2304      	movs	r3, #4
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	2100      	movs	r1, #0
 800123c:	2000      	movs	r0, #0
 800123e:	f004 fc1d 	bl	8005a7c <OLED_ShowNum>
	OLED_ShowNum(40, 0, i * 100.0 / 3600, 4, 16);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff f9ee 	bl	8000624 <__aeabi_ui2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b49      	ldr	r3, [pc, #292]	; (8001374 <oled_show+0x154>)
 800124e:	f7ff fa63 	bl	8000718 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a343      	add	r3, pc, #268	; (adr r3, 8001368 <oled_show+0x148>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fb84 	bl	800096c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fd2c 	bl	8000cc8 <__aeabi_d2uiz>
 8001270:	4602      	mov	r2, r0
 8001272:	2310      	movs	r3, #16
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2304      	movs	r3, #4
 8001278:	2100      	movs	r1, #0
 800127a:	2028      	movs	r0, #40	; 0x28
 800127c:	f004 fbfe 	bl	8005a7c <OLED_ShowNum>
	//电池侧显示当前计数�?�及占空�????????????
	i = __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_2);
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <oled_show+0x150>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001286:	607b      	str	r3, [r7, #4]
	OLED_ShowNum(0, 2, i, 4, 16);
 8001288:	2310      	movs	r3, #16
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2304      	movs	r3, #4
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	2102      	movs	r1, #2
 8001292:	2000      	movs	r0, #0
 8001294:	f004 fbf2 	bl	8005a7c <OLED_ShowNum>
	OLED_ShowNum(40, 2, i * 100.0 / 3600, 4, 16);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff f9c3 	bl	8000624 <__aeabi_ui2d>
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b34      	ldr	r3, [pc, #208]	; (8001374 <oled_show+0x154>)
 80012a4:	f7ff fa38 	bl	8000718 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	a32d      	add	r3, pc, #180	; (adr r3, 8001368 <oled_show+0x148>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff fb59 	bl	800096c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fd01 	bl	8000cc8 <__aeabi_d2uiz>
 80012c6:	4602      	mov	r2, r0
 80012c8:	2310      	movs	r3, #16
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2304      	movs	r3, #4
 80012ce:	2102      	movs	r1, #2
 80012d0:	2028      	movs	r0, #40	; 0x28
 80012d2:	f004 fbd3 	bl	8005a7c <OLED_ShowNum>
	//显示当前采样�????
	OLED_ShowNum(0, 4, V1IN*1000, 5, 16);	//U1
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <oled_show+0x158>)
 80012d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <oled_show+0x15c>)
 80012e2:	f7ff fa19 	bl	8000718 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fceb 	bl	8000cc8 <__aeabi_d2uiz>
 80012f2:	4602      	mov	r2, r0
 80012f4:	2310      	movs	r3, #16
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2305      	movs	r3, #5
 80012fa:	2104      	movs	r1, #4
 80012fc:	2000      	movs	r0, #0
 80012fe:	f004 fbbd 	bl	8005a7c <OLED_ShowNum>
	OLED_ShowNum(0, 6, VOUT*1000, 5, 16);	//Uo
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <oled_show+0x160>)
 8001304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <oled_show+0x15c>)
 800130e:	f7ff fa03 	bl	8000718 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fcd5 	bl	8000cc8 <__aeabi_d2uiz>
 800131e:	4602      	mov	r2, r0
 8001320:	2310      	movs	r3, #16
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2305      	movs	r3, #5
 8001326:	2106      	movs	r1, #6
 8001328:	2000      	movs	r0, #0
 800132a:	f004 fba7 	bl	8005a7c <OLED_ShowNum>
	OLED_ShowNum(50, 6, VSIN*1000, 5, 16);	//Us
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <oled_show+0x164>)
 8001330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <oled_show+0x15c>)
 800133a:	f7ff f9ed 	bl	8000718 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fcbf 	bl	8000cc8 <__aeabi_d2uiz>
 800134a:	4602      	mov	r2, r0
 800134c:	2310      	movs	r3, #16
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2305      	movs	r3, #5
 8001352:	2106      	movs	r1, #6
 8001354:	2032      	movs	r0, #50	; 0x32
 8001356:	f004 fb91 	bl	8005a7c <OLED_ShowNum>

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40ac2000 	.word	0x40ac2000
 8001370:	2000034c 	.word	0x2000034c
 8001374:	40590000 	.word	0x40590000
 8001378:	20000398 	.word	0x20000398
 800137c:	408f4000 	.word	0x408f4000
 8001380:	200003a8 	.word	0x200003a8
 8001384:	200003a0 	.word	0x200003a0

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b095      	sub	sp, #84	; 0x54
 800138c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f000 fe39 	bl	8002004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f88d 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f000 fa63 	bl	8001860 <MX_GPIO_Init>
  MX_SPI1_Init();
 800139a:	f000 f92b 	bl	80015f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800139e:	f000 f95f 	bl	8001660 <MX_TIM1_Init>
  MX_TIM8_Init();
 80013a2:	f000 f9af 	bl	8001704 <MX_TIM8_Init>
  MX_I2C1_Init();
 80013a6:	f000 f8c9 	bl	800153c <MX_I2C1_Init>
  MX_I2C2_Init();
 80013aa:	f000 f8f5 	bl	8001598 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4839      	ldr	r0, [pc, #228]	; (8001498 <main+0x110>)
 80013b2:	f003 f8cd 	bl	8004550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80013b6:	2104      	movs	r1, #4
 80013b8:	4837      	ldr	r0, [pc, #220]	; (8001498 <main+0x110>)
 80013ba:	f003 f8c9 	bl	8004550 <HAL_TIM_PWM_Start>

	PID_Init();
 80013be:	f004 fc4d 	bl	8005c5c <PID_Init>
	OLED_Init();
 80013c2:	f004 fbc1 	bl	8005b48 <OLED_Init>
	OLED_Display_On();
 80013c6:	f004 faa9 	bl	800591c <OLED_Display_On>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		keyboard_function();
 80013ca:	f7ff fe91 	bl	80010f0 <keyboard_function>
		oled_show();
 80013ce:	f7ff ff27 	bl	8001220 <oled_show>
		V1IN = (ads1115_get_voltage_val(hi2c1, 0x01, CONFIG0_REG_H,
 80013d2:	4c32      	ldr	r4, [pc, #200]	; (800149c <main+0x114>)
 80013d4:	2383      	movs	r3, #131	; 0x83
 80013d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80013d8:	2383      	movs	r3, #131	; 0x83
 80013da:	9312      	str	r3, [sp, #72]	; 0x48
 80013dc:	2301      	movs	r3, #1
 80013de:	9311      	str	r3, [sp, #68]	; 0x44
 80013e0:	4668      	mov	r0, sp
 80013e2:	f104 0310 	add.w	r3, r4, #16
 80013e6:	2244      	movs	r2, #68	; 0x44
 80013e8:	4619      	mov	r1, r3
 80013ea:	f004 fd23 	bl	8005e34 <memcpy>
 80013ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013f2:	f004 f849 	bl	8005488 <ads1115_get_voltage_val>
				CONFIG0_REG_L) * 21.26);
 80013f6:	a322      	add	r3, pc, #136	; (adr r3, 8001480 <main+0xf8>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f98c 	bl	8000718 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
		V1IN = (ads1115_get_voltage_val(hi2c1, 0x01, CONFIG0_REG_H,
 8001404:	4926      	ldr	r1, [pc, #152]	; (80014a0 <main+0x118>)
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
		VSIN = (ads1115_get_voltage_val(hi2c1, 0x01, CONFIG1_REG_H,
 800140a:	4c24      	ldr	r4, [pc, #144]	; (800149c <main+0x114>)
 800140c:	23a3      	movs	r3, #163	; 0xa3
 800140e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001410:	23b3      	movs	r3, #179	; 0xb3
 8001412:	9312      	str	r3, [sp, #72]	; 0x48
 8001414:	2301      	movs	r3, #1
 8001416:	9311      	str	r3, [sp, #68]	; 0x44
 8001418:	4668      	mov	r0, sp
 800141a:	f104 0310 	add.w	r3, r4, #16
 800141e:	2244      	movs	r2, #68	; 0x44
 8001420:	4619      	mov	r1, r3
 8001422:	f004 fd07 	bl	8005e34 <memcpy>
 8001426:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800142a:	f004 f82d 	bl	8005488 <ads1115_get_voltage_val>
				CONFIG1_REG_L) * 21.12);
 800142e:	a316      	add	r3, pc, #88	; (adr r3, 8001488 <main+0x100>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f970 	bl	8000718 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
		VSIN = (ads1115_get_voltage_val(hi2c1, 0x01, CONFIG1_REG_H,
 800143c:	4919      	ldr	r1, [pc, #100]	; (80014a4 <main+0x11c>)
 800143e:	e9c1 2300 	strd	r2, r3, [r1]
		VOUT = (ads1115_get_voltage_val(hi2c2, 0x01, CONFIG0_REG_H,
 8001442:	4c19      	ldr	r4, [pc, #100]	; (80014a8 <main+0x120>)
 8001444:	2383      	movs	r3, #131	; 0x83
 8001446:	9313      	str	r3, [sp, #76]	; 0x4c
 8001448:	2383      	movs	r3, #131	; 0x83
 800144a:	9312      	str	r3, [sp, #72]	; 0x48
 800144c:	2301      	movs	r3, #1
 800144e:	9311      	str	r3, [sp, #68]	; 0x44
 8001450:	4668      	mov	r0, sp
 8001452:	f104 0310 	add.w	r3, r4, #16
 8001456:	2244      	movs	r2, #68	; 0x44
 8001458:	4619      	mov	r1, r3
 800145a:	f004 fceb 	bl	8005e34 <memcpy>
 800145e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001462:	f004 f811 	bl	8005488 <ads1115_get_voltage_val>
				CONFIG0_REG_L) * 21.39);
 8001466:	a30a      	add	r3, pc, #40	; (adr r3, 8001490 <main+0x108>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f954 	bl	8000718 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
		VOUT = (ads1115_get_voltage_val(hi2c2, 0x01, CONFIG0_REG_H,
 8001474:	490d      	ldr	r1, [pc, #52]	; (80014ac <main+0x124>)
 8001476:	e9c1 2300 	strd	r2, r3, [r1]
		keyboard_function();
 800147a:	e7a6      	b.n	80013ca <main+0x42>
 800147c:	f3af 8000 	nop.w
 8001480:	5c28f5c3 	.word	0x5c28f5c3
 8001484:	4035428f 	.word	0x4035428f
 8001488:	51eb851f 	.word	0x51eb851f
 800148c:	40351eb8 	.word	0x40351eb8
 8001490:	0a3d70a4 	.word	0x0a3d70a4
 8001494:	403563d7 	.word	0x403563d7
 8001498:	2000034c 	.word	0x2000034c
 800149c:	20000204 	.word	0x20000204
 80014a0:	20000398 	.word	0x20000398
 80014a4:	200003a0 	.word	0x200003a0
 80014a8:	20000258 	.word	0x20000258
 80014ac:	200003a8 	.word	0x200003a8

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b090      	sub	sp, #64	; 0x40
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 fcc6 	bl	8005e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f8b5 	bl	8003668 <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001504:	f000 fb06 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fb22 	bl	8003b6c <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800152e:	f000 faf1 	bl	8001b14 <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_I2C1_Init+0x50>)
 8001542:	4a13      	ldr	r2, [pc, #76]	; (8001590 <MX_I2C1_Init+0x54>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_I2C1_Init+0x50>)
 8001548:	4a12      	ldr	r2, [pc, #72]	; (8001594 <MX_I2C1_Init+0x58>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_I2C1_Init+0x50>)
 800155a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_I2C1_Init+0x50>)
 800157a:	f001 f89b 	bl	80026b4 <HAL_I2C_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001584:	f000 fac6 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000204 	.word	0x20000204
 8001590:	40005400 	.word	0x40005400
 8001594:	000186a0 	.word	0x000186a0

08001598 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_I2C2_Init+0x50>)
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <MX_I2C2_Init+0x54>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_I2C2_Init+0x58>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_I2C2_Init+0x50>)
 80015d6:	f001 f86d 	bl	80026b4 <HAL_I2C_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015e0:	f000 fa98 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000258 	.word	0x20000258
 80015ec:	40005800 	.word	0x40005800
 80015f0:	000186a0 	.word	0x000186a0

080015f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_SPI1_Init+0x64>)
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <MX_SPI1_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_SPI1_Init+0x64>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_SPI1_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_SPI1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_SPI1_Init+0x64>)
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_SPI1_Init+0x64>)
 8001628:	2208      	movs	r2, #8
 800162a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_SPI1_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_SPI1_Init+0x64>)
 8001640:	220a      	movs	r2, #10
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_SPI1_Init+0x64>)
 8001646:	f002 fc15 	bl	8003e74 <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001650:	f000 fa60 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200002ac 	.word	0x200002ac
 800165c:	40013000 	.word	0x40013000

08001660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_TIM1_Init+0x9c>)
 800167e:	4a20      	ldr	r2, [pc, #128]	; (8001700 <MX_TIM1_Init+0xa0>)
 8001680:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 500-1;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_TIM1_Init+0x9c>)
 8001684:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001688:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_TIM1_Init+0x9c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72000000/10000-1;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_TIM1_Init+0x9c>)
 8001692:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001696:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_TIM1_Init+0x9c>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_TIM1_Init+0x9c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_TIM1_Init+0x9c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <MX_TIM1_Init+0x9c>)
 80016ac:	f002 fe48 	bl	8004340 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016b6:	f000 fa2d 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <MX_TIM1_Init+0x9c>)
 80016c8:	f003 f9c2 	bl	8004a50 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016d2:	f000 fa1f 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <MX_TIM1_Init+0x9c>)
 80016e4:	f003 fd7c 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016ee:	f000 fa11 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000304 	.word	0x20000304
 8001700:	40012c00 	.word	0x40012c00

08001704 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2220      	movs	r2, #32
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fb87 	bl	8005e50 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001742:	4b45      	ldr	r3, [pc, #276]	; (8001858 <MX_TIM8_Init+0x154>)
 8001744:	4a45      	ldr	r2, [pc, #276]	; (800185c <MX_TIM8_Init+0x158>)
 8001746:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <MX_TIM8_Init+0x154>)
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <MX_TIM8_Init+0x154>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 72000000/20000-1;
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <MX_TIM8_Init+0x154>)
 8001756:	f640 620f 	movw	r2, #3599	; 0xe0f
 800175a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <MX_TIM8_Init+0x154>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001762:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <MX_TIM8_Init+0x154>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <MX_TIM8_Init+0x154>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800176e:	483a      	ldr	r0, [pc, #232]	; (8001858 <MX_TIM8_Init+0x154>)
 8001770:	f002 fde6 	bl	8004340 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800177a:	f000 f9cb 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001788:	4619      	mov	r1, r3
 800178a:	4833      	ldr	r0, [pc, #204]	; (8001858 <MX_TIM8_Init+0x154>)
 800178c:	f003 f960 	bl	8004a50 <HAL_TIM_ConfigClockSource>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001796:	f000 f9bd 	bl	8001b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800179a:	482f      	ldr	r0, [pc, #188]	; (8001858 <MX_TIM8_Init+0x154>)
 800179c:	f002 fe80 	bl	80044a0 <HAL_TIM_PWM_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80017a6:	f000 f9b5 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b6:	4619      	mov	r1, r3
 80017b8:	4827      	ldr	r0, [pc, #156]	; (8001858 <MX_TIM8_Init+0x154>)
 80017ba:	f003 fd11 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80017c4:	f000 f9a6 	bl	8001b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c8:	2360      	movs	r3, #96	; 0x60
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1800;
 80017cc:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	481a      	ldr	r0, [pc, #104]	; (8001858 <MX_TIM8_Init+0x154>)
 80017f0:	f003 f870 	bl	80048d4 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80017fa:	f000 f98b 	bl	8001b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	2204      	movs	r2, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_TIM8_Init+0x154>)
 8001808:	f003 f864 	bl	80048d4 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001812:	f000 f97f 	bl	8001b14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM8_Init+0x154>)
 800183a:	f003 fd3d 	bl	80052b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001844:	f000 f966 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM8_Init+0x154>)
 800184a:	f000 fa8b 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 800184e:	bf00      	nop
 8001850:	3758      	adds	r7, #88	; 0x58
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000034c 	.word	0x2000034c
 800185c:	40013400 	.word	0x40013400

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <MX_GPIO_Init+0x10c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a3c      	ldr	r2, [pc, #240]	; (800196c <MX_GPIO_Init+0x10c>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b3a      	ldr	r3, [pc, #232]	; (800196c <MX_GPIO_Init+0x10c>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <MX_GPIO_Init+0x10c>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a36      	ldr	r2, [pc, #216]	; (800196c <MX_GPIO_Init+0x10c>)
 8001892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <MX_GPIO_Init+0x10c>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <MX_GPIO_Init+0x10c>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a30      	ldr	r2, [pc, #192]	; (800196c <MX_GPIO_Init+0x10c>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <MX_GPIO_Init+0x10c>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <MX_GPIO_Init+0x10c>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <MX_GPIO_Init+0x10c>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <MX_GPIO_Init+0x10c>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, R4_Pin|R3_Pin|R2_Pin|R1_Pin
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 6155 	mov.w	r1, #3408	; 0xd50
 80018da:	4825      	ldr	r0, [pc, #148]	; (8001970 <MX_GPIO_Init+0x110>)
 80018dc:	f000 fed1 	bl	8002682 <HAL_GPIO_WritePin>
                          |OLED_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2120      	movs	r1, #32
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <MX_GPIO_Init+0x114>)
 80018e6:	f000 fecc 	bl	8002682 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2102      	movs	r1, #2
 80018ee:	4822      	ldr	r0, [pc, #136]	; (8001978 <MX_GPIO_Init+0x118>)
 80018f0:	f000 fec7 	bl	8002682 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 80018f4:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4619      	mov	r1, r3
 8001908:	4819      	ldr	r0, [pc, #100]	; (8001970 <MX_GPIO_Init+0x110>)
 800190a:	f000 fd0f 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin
                           OLED_CS_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin
 800190e:	f44f 6355 	mov.w	r3, #3408	; 0xd50
 8001912:	613b      	str	r3, [r7, #16]
                          |OLED_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2302      	movs	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	4812      	ldr	r0, [pc, #72]	; (8001970 <MX_GPIO_Init+0x110>)
 8001928:	f000 fd00 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800192c:	2320      	movs	r3, #32
 800192e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2302      	movs	r3, #2
 800193a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_GPIO_Init+0x114>)
 8001944:	f000 fcf2 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2302      	movs	r3, #2
 8001956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <MX_GPIO_Init+0x118>)
 8001960:	f000 fce4 	bl	800232c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	40011c00 	.word	0x40011c00
 8001974:	40011000 	.word	0x40011000
 8001978:	40010c00 	.word	0x40010c00
 800197c:	00000000 	.word	0x00000000

08001980 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001990:	4293      	cmp	r3, r2
 8001992:	f040 809f 	bne.w	8001ad4 <HAL_TIM_PeriodElapsedCallback+0x154>
	{
		//电源�????????????
//		if(TIM8->CCR2 - Incremental_PID(&PID_V, VOUT, 30.0) <= 3500&&TIM8->CCR2 - Incremental_PID(&PID_V, VOUT, 30.0) >= 100)//�??30V
		if(fabs(VOUT+ERR-Target)>0.01)
 8001996:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199c:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fd03 	bl	80003ac <__adddf3>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fcf8 	bl	80003a8 <__aeabi_dsub>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4690      	mov	r8, r2
 80019be:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80019c2:	a347      	add	r3, pc, #284	; (adr r3, 8001ae0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	4640      	mov	r0, r8
 80019ca:	4649      	mov	r1, r9
 80019cc:	f7ff f934 	bl	8000c38 <__aeabi_dcmpgt>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d02d      	beq.n	8001a32 <HAL_TIM_PeriodElapsedCallback+0xb2>
			TIM8->CCR2 -= Incremental_PID(&PID_V, VOUT+ERR, Target);
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80019d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019dc:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fce3 	bl	80003ac <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f98b 	bl	8000d08 <__aeabi_d2f>
 80019f2:	4606      	mov	r6, r0
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f983 	bl	8000d08 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4631      	mov	r1, r6
 8001a08:	483d      	ldr	r0, [pc, #244]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001a0a:	f004 f95f 	bl	8005ccc <Incremental_PID>
 8001a0e:	4606      	mov	r6, r0
 8001a10:	4b3c      	ldr	r3, [pc, #240]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fa7d 	bl	8000f14 <__aeabi_ui2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4631      	mov	r1, r6
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f9c6 	bl	8000db0 <__aeabi_fsub>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4e37      	ldr	r6, [pc, #220]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fb41 	bl	80010b0 <__aeabi_f2uiz>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	63b3      	str	r3, [r6, #56]	; 0x38
		//电池�????????????
//		if(TIM8->CCR1 <=3500 && TIM8->CCR1 >= 100 )//MPPT
		if(fabs(V1IN-VSIN/2.0)>0.05)
 8001a32:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a46:	f7fe ff91 	bl	800096c <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4640      	mov	r0, r8
 8001a50:	4649      	mov	r1, r9
 8001a52:	f7fe fca9 	bl	80003a8 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a60:	a321      	add	r3, pc, #132	; (adr r3, 8001ae8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	4620      	mov	r0, r4
 8001a68:	4629      	mov	r1, r5
 8001a6a:	f7ff f8e5 	bl	8000c38 <__aeabi_dcmpgt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d100      	bne.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0xf6>
		    TIM8->CCR1 += Incremental_PID(&MPPT_V, V1IN,VSIN/2.0) ;
	}
}
 8001a74:	e02e      	b.n	8001ad4 <HAL_TIM_PeriodElapsedCallback+0x154>
		    TIM8->CCR1 += Incremental_PID(&MPPT_V, V1IN,VSIN/2.0) ;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f942 	bl	8000d08 <__aeabi_d2f>
 8001a84:	4604      	mov	r4, r0
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a94:	f7fe ff6a 	bl	800096c <__aeabi_ddiv>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f932 	bl	8000d08 <__aeabi_d2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	4819      	ldr	r0, [pc, #100]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001aac:	f004 f90e 	bl	8005ccc <Incremental_PID>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa2c 	bl	8000f14 <__aeabi_ui2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff f977 	bl	8000db4 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4c0e      	ldr	r4, [pc, #56]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff faf0 	bl	80010b0 <__aeabi_f2uiz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ade:	bf00      	nop
 8001ae0:	47ae147b 	.word	0x47ae147b
 8001ae4:	3f847ae1 	.word	0x3f847ae1
 8001ae8:	9999999a 	.word	0x9999999a
 8001aec:	3fa99999 	.word	0x3fa99999
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	200003a8 	.word	0x200003a8
 8001af8:	200003b0 	.word	0x200003b0
 8001afc:	20000000 	.word	0x20000000
 8001b00:	200003c0 	.word	0x200003c0
 8001b04:	40013400 	.word	0x40013400
 8001b08:	20000398 	.word	0x20000398
 8001b0c:	200003a0 	.word	0x200003a0
 8001b10:	200003e4 	.word	0x200003e4

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b1c:	e7fe      	b.n	8001b1c <Error_Handler+0x8>
	...

08001b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6193      	str	r3, [r2, #24]
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_MspInit+0x60>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_MspInit+0x60>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000

08001b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0318 	add.w	r3, r7, #24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <HAL_I2C_MspInit+0xc8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d124      	bne.n	8001bee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bbc:	23c0      	movs	r3, #192	; 0xc0
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc0:	2312      	movs	r3, #18
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4821      	ldr	r0, [pc, #132]	; (8001c54 <HAL_I2C_MspInit+0xd0>)
 8001bd0:	f000 fbac 	bl	800232c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bde:	61d3      	str	r3, [r2, #28]
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bec:	e029      	b.n	8001c42 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_I2C_MspInit+0xd4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d124      	bne.n	8001c42 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c16:	2312      	movs	r3, #18
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 0318 	add.w	r3, r7, #24
 8001c22:	4619      	mov	r1, r3
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <HAL_I2C_MspInit+0xd0>)
 8001c26:	f000 fb81 	bl	800232c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001c30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_I2C_MspInit+0xcc>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010c00 	.word	0x40010c00
 8001c58:	40005800 	.word	0x40005800

08001c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d12f      	bne.n	8001cdc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001c82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8001cac:	23a0      	movs	r3, #160	; 0xa0
 8001cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <HAL_SPI_MspInit+0x90>)
 8001cc0:	f000 fb34 	bl	800232c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cc4:	2340      	movs	r3, #64	; 0x40
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_SPI_MspInit+0x90>)
 8001cd8:	f000 fb28 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40013000 	.word	0x40013000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010800 	.word	0x40010800

08001cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_TIM_Base_MspInit+0x68>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d114      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_TIM_Base_MspInit+0x6c>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <HAL_TIM_Base_MspInit+0x6c>)
 8001d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d0c:	6193      	str	r3, [r2, #24]
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_TIM_Base_MspInit+0x6c>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2019      	movs	r0, #25
 8001d20:	f000 facd 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d24:	2019      	movs	r0, #25
 8001d26:	f000 fae6 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d2a:	e010      	b.n	8001d4e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_TIM_Base_MspInit+0x70>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10b      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_TIM_Base_MspInit+0x6c>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_TIM_Base_MspInit+0x6c>)
 8001d3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d40:	6193      	str	r3, [r2, #24]
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_TIM_Base_MspInit+0x6c>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40013400 	.word	0x40013400

08001d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_TIM_MspPostInit+0x58>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d117      	bne.n	8001db4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_TIM_MspPostInit+0x5c>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_TIM_MspPostInit+0x5c>)
 8001d8a:	f043 0310 	orr.w	r3, r3, #16
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_TIM_MspPostInit+0x5c>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_TIM_MspPostInit+0x60>)
 8001db0:	f000 fabc 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013400 	.word	0x40013400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40011000 	.word	0x40011000

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0e:	f000 f93f 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM1_UP_IRQHandler+0x10>)
 8001e1e:	f002 fc51 	bl	80046c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000304 	.word	0x20000304

08001e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return 1;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <_kill>:

int _kill(int pid, int sig)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e44:	f003 ffcc 	bl	8005de0 <__errno>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2216      	movs	r2, #22
 8001e4c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_exit>:

void _exit (int status)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e62:	f04f 31ff 	mov.w	r1, #4294967295
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffe7 	bl	8001e3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e6c:	e7fe      	b.n	8001e6c <_exit+0x12>

08001e6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e00a      	b.n	8001e96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e80:	f3af 8000 	nop.w
 8001e84:	4601      	mov	r1, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	60ba      	str	r2, [r7, #8]
 8001e8c:	b2ca      	uxtb	r2, r1
 8001e8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dbf0      	blt.n	8001e80 <_read+0x12>
  }

  return len;
 8001e9e:	687b      	ldr	r3, [r7, #4]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e009      	b.n	8001ece <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbf1      	blt.n	8001eba <_write+0x12>
  }
  return len;
 8001ed6:	687b      	ldr	r3, [r7, #4]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_close>:

int _close(int file)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f06:	605a      	str	r2, [r3, #4]
  return 0;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <_isatty>:

int _isatty(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f003 ff36 	bl	8005de0 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20010000 	.word	0x20010000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	200003b8 	.word	0x200003b8
 8001fa8:	20000418 	.word	0x20000418

08001fac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fba:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	; (8001ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fde:	f7ff ffe5 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f003 ff03 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fe6:	f7ff f9cf 	bl	8001388 <main>
  bx lr
 8001fea:	4770      	bx	lr
  ldr r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ff4:	080093cc 	.word	0x080093cc
  ldr r2, =_sbss
 8001ff8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ffc:	20000418 	.word	0x20000418

08002000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC1_2_IRQHandler>
	...

08002004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x28>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x28>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 f947 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	200f      	movs	r0, #15
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fd7e 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f95f 	bl	8002312 <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 f927 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000008 	.word	0x20000008
 8002088:	20000010 	.word	0x20000010
 800208c:	2000000c 	.word	0x2000000c

08002090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_IncTick+0x1c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_IncTick+0x20>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_IncTick+0x20>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000010 	.word	0x20000010
 80020b0:	200003bc 	.word	0x200003bc

080020b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <HAL_GetTick+0x10>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	200003bc 	.word	0x200003bc

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff fff0 	bl	80020b4 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffe0 	bl	80020b4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000010 	.word	0x20000010

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4906      	ldr	r1, [pc, #24]	; (80021a8 <__NVIC_EnableIRQ+0x34>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff90 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff2d 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff42 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff90 	bl	8002200 <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5f 	bl	80021ac <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff35 	bl	8002174 <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa2 	bl	8002264 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e179      	b.n	8002634 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002340:	2201      	movs	r2, #1
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8168 	bne.w	800262e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a96      	ldr	r2, [pc, #600]	; (80025bc <HAL_GPIO_Init+0x290>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d05e      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002368:	4a94      	ldr	r2, [pc, #592]	; (80025bc <HAL_GPIO_Init+0x290>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d875      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800236e:	4a94      	ldr	r2, [pc, #592]	; (80025c0 <HAL_GPIO_Init+0x294>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d058      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002374:	4a92      	ldr	r2, [pc, #584]	; (80025c0 <HAL_GPIO_Init+0x294>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d86f      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800237a:	4a92      	ldr	r2, [pc, #584]	; (80025c4 <HAL_GPIO_Init+0x298>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d052      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002380:	4a90      	ldr	r2, [pc, #576]	; (80025c4 <HAL_GPIO_Init+0x298>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d869      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002386:	4a90      	ldr	r2, [pc, #576]	; (80025c8 <HAL_GPIO_Init+0x29c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d04c      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 800238c:	4a8e      	ldr	r2, [pc, #568]	; (80025c8 <HAL_GPIO_Init+0x29c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d863      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002392:	4a8e      	ldr	r2, [pc, #568]	; (80025cc <HAL_GPIO_Init+0x2a0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d046      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002398:	4a8c      	ldr	r2, [pc, #560]	; (80025cc <HAL_GPIO_Init+0x2a0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d85d      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d82a      	bhi.n	80023f8 <HAL_GPIO_Init+0xcc>
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d859      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <HAL_GPIO_Init+0x80>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002401 	.word	0x08002401
 80023b4:	08002413 	.word	0x08002413
 80023b8:	08002455 	.word	0x08002455
 80023bc:	0800245b 	.word	0x0800245b
 80023c0:	0800245b 	.word	0x0800245b
 80023c4:	0800245b 	.word	0x0800245b
 80023c8:	0800245b 	.word	0x0800245b
 80023cc:	0800245b 	.word	0x0800245b
 80023d0:	0800245b 	.word	0x0800245b
 80023d4:	0800245b 	.word	0x0800245b
 80023d8:	0800245b 	.word	0x0800245b
 80023dc:	0800245b 	.word	0x0800245b
 80023e0:	0800245b 	.word	0x0800245b
 80023e4:	0800245b 	.word	0x0800245b
 80023e8:	0800245b 	.word	0x0800245b
 80023ec:	0800245b 	.word	0x0800245b
 80023f0:	08002409 	.word	0x08002409
 80023f4:	0800241d 	.word	0x0800241d
 80023f8:	4a75      	ldr	r2, [pc, #468]	; (80025d0 <HAL_GPIO_Init+0x2a4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023fe:	e02c      	b.n	800245a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e029      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	3304      	adds	r3, #4
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e024      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	3308      	adds	r3, #8
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e01f      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	330c      	adds	r3, #12
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e01a      	b.n	800245c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800242e:	2304      	movs	r3, #4
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e013      	b.n	800245c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800243c:	2308      	movs	r3, #8
 800243e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	611a      	str	r2, [r3, #16]
          break;
 8002446:	e009      	b.n	800245c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	615a      	str	r2, [r3, #20]
          break;
 8002452:	e003      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x130>
          break;
 800245a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d801      	bhi.n	8002466 <HAL_GPIO_Init+0x13a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	e001      	b.n	800246a <HAL_GPIO_Init+0x13e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d802      	bhi.n	8002478 <HAL_GPIO_Init+0x14c>
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x152>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3b08      	subs	r3, #8
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	210f      	movs	r1, #15
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80c1 	beq.w	800262e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_GPIO_Init+0x2a8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024c4:	4a44      	ldr	r2, [pc, #272]	; (80025d8 <HAL_GPIO_Init+0x2ac>)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3c      	ldr	r2, [pc, #240]	; (80025dc <HAL_GPIO_Init+0x2b0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01f      	beq.n	8002530 <HAL_GPIO_Init+0x204>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <HAL_GPIO_Init+0x2b4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d019      	beq.n	800252c <HAL_GPIO_Init+0x200>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1fc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a39      	ldr	r2, [pc, #228]	; (80025e8 <HAL_GPIO_Init+0x2bc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1f8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a38      	ldr	r2, [pc, #224]	; (80025ec <HAL_GPIO_Init+0x2c0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1f4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a37      	ldr	r2, [pc, #220]	; (80025f0 <HAL_GPIO_Init+0x2c4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1f0>
 8002518:	2305      	movs	r3, #5
 800251a:	e00a      	b.n	8002532 <HAL_GPIO_Init+0x206>
 800251c:	2306      	movs	r3, #6
 800251e:	e008      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002520:	2304      	movs	r3, #4
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002524:	2303      	movs	r3, #3
 8002526:	e004      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002528:	2302      	movs	r3, #2
 800252a:	e002      	b.n	8002532 <HAL_GPIO_Init+0x206>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_GPIO_Init+0x206>
 8002530:	2300      	movs	r3, #0
 8002532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002542:	4925      	ldr	r1, [pc, #148]	; (80025d8 <HAL_GPIO_Init+0x2ac>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4924      	ldr	r1, [pc, #144]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4920      	ldr	r1, [pc, #128]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002574:	4013      	ands	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	491a      	ldr	r1, [pc, #104]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4916      	ldr	r1, [pc, #88]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 800259c:	4013      	ands	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d025      	beq.n	80025f8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4910      	ldr	r1, [pc, #64]	; (80025f4 <HAL_GPIO_Init+0x2c8>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]
 80025b8:	e025      	b.n	8002606 <HAL_GPIO_Init+0x2da>
 80025ba:	bf00      	nop
 80025bc:	10320000 	.word	0x10320000
 80025c0:	10310000 	.word	0x10310000
 80025c4:	10220000 	.word	0x10220000
 80025c8:	10210000 	.word	0x10210000
 80025cc:	10120000 	.word	0x10120000
 80025d0:	10110000 	.word	0x10110000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	40010800 	.word	0x40010800
 80025e0:	40010c00 	.word	0x40010c00
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40011400 	.word	0x40011400
 80025ec:	40011800 	.word	0x40011800
 80025f0:	40011c00 	.word	0x40011c00
 80025f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_GPIO_Init+0x324>)
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	43db      	mvns	r3, r3
 8002600:	4913      	ldr	r1, [pc, #76]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002602:	4013      	ands	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
 800261e:	e006      	b.n	800262e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_GPIO_Init+0x324>)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	43db      	mvns	r3, r3
 8002628:	4909      	ldr	r1, [pc, #36]	; (8002650 <HAL_GPIO_Init+0x324>)
 800262a:	4013      	ands	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	3301      	adds	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	f47f ae7e 	bne.w	8002340 <HAL_GPIO_Init+0x14>
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	372c      	adds	r7, #44	; 0x2c
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e001      	b.n	8002676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	807b      	strh	r3, [r7, #2]
 800268e:	4613      	mov	r3, r2
 8002690:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002692:	787b      	ldrb	r3, [r7, #1]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002698:	887a      	ldrh	r2, [r7, #2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800269e:	e003      	b.n	80026a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	041a      	lsls	r2, r3, #16
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	611a      	str	r2, [r3, #16]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e12b      	b.n	800291e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fa52 	bl	8001b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002718:	f001 fb7a 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 800271c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a81      	ldr	r2, [pc, #516]	; (8002928 <HAL_I2C_Init+0x274>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d807      	bhi.n	8002738 <HAL_I2C_Init+0x84>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a80      	ldr	r2, [pc, #512]	; (800292c <HAL_I2C_Init+0x278>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x92>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a7d      	ldr	r2, [pc, #500]	; (8002930 <HAL_I2C_Init+0x27c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	bf94      	ite	ls
 8002740:	2301      	movls	r3, #1
 8002742:	2300      	movhi	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0e7      	b.n	800291e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a78      	ldr	r2, [pc, #480]	; (8002934 <HAL_I2C_Init+0x280>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_I2C_Init+0x274>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d802      	bhi.n	8002788 <HAL_I2C_Init+0xd4>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	e009      	b.n	800279c <HAL_I2C_Init+0xe8>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	4a69      	ldr	r2, [pc, #420]	; (8002938 <HAL_I2C_Init+0x284>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	3301      	adds	r3, #1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	495c      	ldr	r1, [pc, #368]	; (8002928 <HAL_I2C_Init+0x274>)
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d819      	bhi.n	80027f0 <HAL_I2C_Init+0x13c>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ca:	1c59      	adds	r1, r3, #1
 80027cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d0:	400b      	ands	r3, r1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_I2C_Init+0x138>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e59      	subs	r1, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	e051      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e04f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d111      	bne.n	800281c <HAL_I2C_Init+0x168>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e012      	b.n	8002842 <HAL_I2C_Init+0x18e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Init+0x196>
 8002846:	2301      	movs	r3, #1
 8002848:	e022      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10e      	bne.n	8002870 <HAL_I2C_Init+0x1bc>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e58      	subs	r0, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	440b      	add	r3, r1
 8002860:	fbb0 f3f3 	udiv	r3, r0, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286e:	e00f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	6809      	ldr	r1, [r1, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6911      	ldr	r1, [r2, #16]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	4311      	orrs	r1, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	000186a0 	.word	0x000186a0
 800292c:	001e847f 	.word	0x001e847f
 8002930:	003d08ff 	.word	0x003d08ff
 8002934:	431bde83 	.word	0x431bde83
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	461a      	mov	r2, r3
 8002948:	460b      	mov	r3, r1
 800294a:	817b      	strh	r3, [r7, #10]
 800294c:	4613      	mov	r3, r2
 800294e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff fbb0 	bl	80020b4 <HAL_GetTick>
 8002954:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	f040 80e0 	bne.w	8002b24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	4970      	ldr	r1, [pc, #448]	; (8002b30 <HAL_I2C_Master_Transmit+0x1f4>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fc9e 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
 800297c:	e0d3      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_I2C_Master_Transmit+0x50>
 8002988:	2302      	movs	r3, #2
 800298a:	e0cc      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d007      	beq.n	80029b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2221      	movs	r2, #33	; 0x21
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2210      	movs	r2, #16
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	893a      	ldrh	r2, [r7, #8]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a50      	ldr	r2, [pc, #320]	; (8002b34 <HAL_I2C_Master_Transmit+0x1f8>)
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fb08 	bl	8003010 <I2C_MasterRequestWrite>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e08d      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a20:	e066      	b.n	8002af0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	6a39      	ldr	r1, [r7, #32]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fd18 	bl	800345c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d107      	bne.n	8002a4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06b      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_I2C_Master_Transmit+0x188>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d017      	beq.n	8002ac4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	6a39      	ldr	r1, [r7, #32]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fd08 	bl	80034de <I2C_WaitOnBTFFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d107      	bne.n	8002aec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e01a      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d194      	bne.n	8002a22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	00100002 	.word	0x00100002
 8002b34:	ffff0000 	.word	0xffff0000

08002b38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	460b      	mov	r3, r1
 8002b46:	817b      	strh	r3, [r7, #10]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff fab0 	bl	80020b4 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f040 823f 	bne.w	8002fe2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2319      	movs	r3, #25
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	497f      	ldr	r1, [pc, #508]	; (8002d6c <HAL_I2C_Master_Receive+0x234>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fb9e 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e232      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_I2C_Master_Receive+0x54>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e22b      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d007      	beq.n	8002bb2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2222      	movs	r2, #34	; 0x22
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2210      	movs	r2, #16
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	893a      	ldrh	r2, [r7, #8]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a5f      	ldr	r2, [pc, #380]	; (8002d70 <HAL_I2C_Master_Receive+0x238>)
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fa8a 	bl	8003114 <I2C_MasterRequestRead>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1ec      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d113      	bne.n	8002c3a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e1c0      	b.n	8002fbc <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d11e      	bne.n	8002c80 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c52:	b672      	cpsid	i
}
 8002c54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c7c:	b662      	cpsie	i
}
 8002c7e:	e035      	b.n	8002cec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d11e      	bne.n	8002cc6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc2:	b662      	cpsie	i
}
 8002cc4:	e012      	b.n	8002cec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002cec:	e166      	b.n	8002fbc <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	f200 811f 	bhi.w	8002f36 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d123      	bne.n	8002d48 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fc2b 	bl	8003560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e167      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d46:	e139      	b.n	8002fbc <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d152      	bne.n	8002df6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	2200      	movs	r2, #0
 8002d58:	4906      	ldr	r1, [pc, #24]	; (8002d74 <HAL_I2C_Master_Receive+0x23c>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 faa8 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e13c      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
 8002d6a:	bf00      	nop
 8002d6c:	00100002 	.word	0x00100002
 8002d70:	ffff0000 	.word	0xffff0000
 8002d74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d78:	b672      	cpsid	i
}
 8002d7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002dbe:	b662      	cpsie	i
}
 8002dc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002df4:	e0e2      	b.n	8002fbc <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	497b      	ldr	r1, [pc, #492]	; (8002fec <HAL_I2C_Master_Receive+0x4b4>)
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fa55 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0e9      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e56:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_I2C_Master_Receive+0x4b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	08db      	lsrs	r3, r3, #3
 8002e5c:	4a65      	ldr	r2, [pc, #404]	; (8002ff4 <HAL_I2C_Master_Receive+0x4bc>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0a1a      	lsrs	r2, r3, #8
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d118      	bne.n	8002eae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9e:	b662      	cpsie	i
}
 8002ea0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e09a      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d1d9      	bne.n	8002e70 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002efe:	b662      	cpsie	i
}
 8002f00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f34:	e042      	b.n	8002fbc <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fb10 	bl	8003560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e04c      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d118      	bne.n	8002fbc <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f ae94 	bne.w	8002cee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	00010004 	.word	0x00010004
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	14f8b589 	.word	0x14f8b589

08002ff8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
	...

08003010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	460b      	mov	r3, r1
 800301e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d006      	beq.n	800303a <I2C_MasterRequestWrite+0x2a>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d003      	beq.n	800303a <I2C_MasterRequestWrite+0x2a>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003038:	d108      	bne.n	800304c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e00b      	b.n	8003064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	2b12      	cmp	r3, #18
 8003052:	d107      	bne.n	8003064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f91d 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d103      	bne.n	8003094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e035      	b.n	8003104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a0:	d108      	bne.n	80030b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	e01b      	b.n	80030ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030b4:	897b      	ldrh	r3, [r7, #10]
 80030b6:	11db      	asrs	r3, r3, #7
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0306 	and.w	r3, r3, #6
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f063 030f 	orn	r3, r3, #15
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	490e      	ldr	r1, [pc, #56]	; (800310c <I2C_MasterRequestWrite+0xfc>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f943 	bl	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e010      	b.n	8003104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <I2C_MasterRequestWrite+0x100>)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f933 	bl	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	00010008 	.word	0x00010008
 8003110:	00010002 	.word	0x00010002

08003114 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	460b      	mov	r3, r1
 8003122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003138:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d006      	beq.n	800314e <I2C_MasterRequestRead+0x3a>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d003      	beq.n	800314e <I2C_MasterRequestRead+0x3a>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800314c:	d108      	bne.n	8003160 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e00b      	b.n	8003178 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	2b11      	cmp	r3, #17
 8003166:	d107      	bne.n	8003178 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f893 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d103      	bne.n	80031a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e079      	b.n	80032a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b4:	d108      	bne.n	80031c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	e05f      	b.n	8003288 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031c8:	897b      	ldrh	r3, [r7, #10]
 80031ca:	11db      	asrs	r3, r3, #7
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 0306 	and.w	r3, r3, #6
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f063 030f 	orn	r3, r3, #15
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4930      	ldr	r1, [pc, #192]	; (80032a8 <I2C_MasterRequestRead+0x194>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f8b9 	bl	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e054      	b.n	80032a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4929      	ldr	r1, [pc, #164]	; (80032ac <I2C_MasterRequestRead+0x198>)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f8a9 	bl	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e044      	b.n	80032a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f831 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d103      	bne.n	800326c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e017      	b.n	80032a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003270:	897b      	ldrh	r3, [r7, #10]
 8003272:	11db      	asrs	r3, r3, #7
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 0306 	and.w	r3, r3, #6
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f063 030e 	orn	r3, r3, #14
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <I2C_MasterRequestRead+0x198>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f865 	bl	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	00010008 	.word	0x00010008
 80032ac:	00010002 	.word	0x00010002

080032b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c0:	e025      	b.n	800330e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d021      	beq.n	800330e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7fe fef3 	bl	80020b4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d116      	bne.n	800330e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e023      	b.n	8003356 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10d      	bne.n	8003334 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	e00c      	b.n	800334e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	429a      	cmp	r2, r3
 8003352:	d0b6      	beq.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800336c:	e051      	b.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337c:	d123      	bne.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003396:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f043 0204 	orr.w	r2, r3, #4
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e046      	b.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d021      	beq.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fe fe71 	bl	80020b4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d116      	bne.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f043 0220 	orr.w	r2, r3, #32
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e020      	b.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10c      	bne.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	e00b      	b.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	43da      	mvns	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d18d      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003468:	e02d      	b.n	80034c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8ce 	bl	800360c <I2C_IsAcknowledgeFailed>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e02d      	b.n	80034d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d021      	beq.n	80034c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe fe17 	bl	80020b4 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d116      	bne.n	80034c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e007      	b.n	80034d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d1ca      	bne.n	800346a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ea:	e02d      	b.n	8003548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f88d 	bl	800360c <I2C_IsAcknowledgeFailed>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e02d      	b.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d021      	beq.n	8003548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7fe fdd6 	bl	80020b4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e007      	b.n	8003558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d1ca      	bne.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800356c:	e042      	b.n	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b10      	cmp	r3, #16
 800357a:	d119      	bne.n	80035b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0210 	mvn.w	r2, #16
 8003584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e029      	b.n	8003604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fe fd80 	bl	80020b4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e007      	b.n	8003604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d1b5      	bne.n	800356e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003622:	d11b      	bne.n	800365c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800362c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f043 0204 	orr.w	r2, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e272      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8087 	beq.w	8003796 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003688:	4b92      	ldr	r3, [pc, #584]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b04      	cmp	r3, #4
 8003692:	d00c      	beq.n	80036ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003694:	4b8f      	ldr	r3, [pc, #572]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d112      	bne.n	80036c6 <HAL_RCC_OscConfig+0x5e>
 80036a0:	4b8c      	ldr	r3, [pc, #560]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d10b      	bne.n	80036c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ae:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d06c      	beq.n	8003794 <HAL_RCC_OscConfig+0x12c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d168      	bne.n	8003794 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e24c      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x76>
 80036d0:	4b80      	ldr	r3, [pc, #512]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a7f      	ldr	r2, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e02e      	b.n	800373c <HAL_RCC_OscConfig+0xd4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x98>
 80036e6:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a7a      	ldr	r2, [pc, #488]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a77      	ldr	r2, [pc, #476]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e01d      	b.n	800373c <HAL_RCC_OscConfig+0xd4>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0xbc>
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a71      	ldr	r2, [pc, #452]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6e      	ldr	r2, [pc, #440]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e00b      	b.n	800373c <HAL_RCC_OscConfig+0xd4>
 8003724:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a6a      	ldr	r2, [pc, #424]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 800372a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b68      	ldr	r3, [pc, #416]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a67      	ldr	r2, [pc, #412]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fcb6 	bl	80020b4 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe fcb2 	bl	80020b4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e200      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0xe4>
 800376a:	e014      	b.n	8003796 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe fca2 	bl	80020b4 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fe fc9e 	bl	80020b4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e1ec      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x10c>
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d063      	beq.n	800386a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a2:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ae:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d11c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x18c>
 80037ba:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d116      	bne.n	80037f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_RCC_OscConfig+0x176>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1c0      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4939      	ldr	r1, [pc, #228]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	e03a      	b.n	800386a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037fc:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fc57 	bl	80020b4 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380a:	f7fe fc53 	bl	80020b4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1a1      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4927      	ldr	r1, [pc, #156]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383e:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fc36 	bl	80020b4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe fc32 	bl	80020b4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e180      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d03a      	beq.n	80038ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d019      	beq.n	80038b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <HAL_RCC_OscConfig+0x274>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fe fc16 	bl	80020b4 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388c:	f7fe fc12 	bl	80020b4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e160      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038aa:	2001      	movs	r0, #1
 80038ac:	f000 fac4 	bl	8003e38 <RCC_Delay>
 80038b0:	e01c      	b.n	80038ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_RCC_OscConfig+0x274>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7fe fbfc 	bl	80020b4 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038be:	e00f      	b.n	80038e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fe fbf8 	bl	80020b4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d908      	bls.n	80038e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e146      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	42420000 	.word	0x42420000
 80038dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e0:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e9      	bne.n	80038c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a6 	beq.w	8003a46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390a:	4b88      	ldr	r3, [pc, #544]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a87      	ldr	r2, [pc, #540]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003914:	61d3      	str	r3, [r2, #28]
 8003916:	4b85      	ldr	r3, [pc, #532]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b82      	ldr	r3, [pc, #520]	; (8003b30 <HAL_RCC_OscConfig+0x4c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d118      	bne.n	8003964 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003932:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <HAL_RCC_OscConfig+0x4c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7e      	ldr	r2, [pc, #504]	; (8003b30 <HAL_RCC_OscConfig+0x4c8>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393e:	f7fe fbb9 	bl	80020b4 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003946:	f7fe fbb5 	bl	80020b4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b64      	cmp	r3, #100	; 0x64
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e103      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	4b75      	ldr	r3, [pc, #468]	; (8003b30 <HAL_RCC_OscConfig+0x4c8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x312>
 800396c:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4a6e      	ldr	r2, [pc, #440]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6213      	str	r3, [r2, #32]
 8003978:	e02d      	b.n	80039d6 <HAL_RCC_OscConfig+0x36e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x334>
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a69      	ldr	r2, [pc, #420]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6213      	str	r3, [r2, #32]
 800398e:	4b67      	ldr	r3, [pc, #412]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4a66      	ldr	r2, [pc, #408]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	6213      	str	r3, [r2, #32]
 800399a:	e01c      	b.n	80039d6 <HAL_RCC_OscConfig+0x36e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d10c      	bne.n	80039be <HAL_RCC_OscConfig+0x356>
 80039a4:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a60      	ldr	r2, [pc, #384]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	f043 0304 	orr.w	r3, r3, #4
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4a5d      	ldr	r2, [pc, #372]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6213      	str	r3, [r2, #32]
 80039bc:	e00b      	b.n	80039d6 <HAL_RCC_OscConfig+0x36e>
 80039be:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a5a      	ldr	r2, [pc, #360]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	6213      	str	r3, [r2, #32]
 80039ca:	4b58      	ldr	r3, [pc, #352]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a57      	ldr	r2, [pc, #348]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	f023 0304 	bic.w	r3, r3, #4
 80039d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d015      	beq.n	8003a0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039de:	f7fe fb69 	bl	80020b4 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fe fb65 	bl	80020b4 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e0b1      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ee      	beq.n	80039e6 <HAL_RCC_OscConfig+0x37e>
 8003a08:	e014      	b.n	8003a34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fb53 	bl	80020b4 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe fb4f 	bl	80020b4 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e09b      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a28:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ee      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d105      	bne.n	8003a46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3a:	4b3c      	ldr	r3, [pc, #240]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4a3b      	ldr	r2, [pc, #236]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8087 	beq.w	8003b5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a50:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d061      	beq.n	8003b20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d146      	bne.n	8003af2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a64:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_RCC_OscConfig+0x4cc>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fb23 	bl	80020b4 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fe fb1f 	bl	80020b4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e06d      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a84:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d108      	bne.n	8003aac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4921      	ldr	r1, [pc, #132]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aac:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a19      	ldr	r1, [r3, #32]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	430b      	orrs	r3, r1
 8003abe:	491b      	ldr	r1, [pc, #108]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x4cc>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fe faf3 	bl	80020b4 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fe faef 	bl	80020b4 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e03d      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x46a>
 8003af0:	e035      	b.n	8003b5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_RCC_OscConfig+0x4cc>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fe fadc 	bl	80020b4 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fe fad8 	bl	80020b4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e026      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x498>
 8003b1e:	e01e      	b.n	8003b5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e019      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
 8003b34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_OscConfig+0x500>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000

08003b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0d0      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b6a      	ldr	r3, [pc, #424]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d910      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 0207 	bic.w	r2, r3, #7
 8003b96:	4965      	ldr	r1, [pc, #404]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b8      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d020      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc8:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a58      	ldr	r2, [pc, #352]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a52      	ldr	r2, [pc, #328]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	494d      	ldr	r1, [pc, #308]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d040      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d115      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e073      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e06b      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4936      	ldr	r1, [pc, #216]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fe fa2a 	bl	80020b4 <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fe fa26 	bl	80020b4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e053      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d210      	bcs.n	8003cbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	4922      	ldr	r1, [pc, #136]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e032      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4916      	ldr	r1, [pc, #88]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	490e      	ldr	r1, [pc, #56]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cfa:	f000 f821 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	490a      	ldr	r1, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0c:	5ccb      	ldrb	r3, [r1, r3]
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <HAL_RCC_ClockConfig+0x1cc>)
 8003d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_RCC_ClockConfig+0x1d0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe f988 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40021000 	.word	0x40021000
 8003d34:	080089e0 	.word	0x080089e0
 8003d38:	20000008 	.word	0x20000008
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	b490      	push	{r4, r7}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_RCC_GetSysClockFreq+0xac>)
 8003d48:	1d3c      	adds	r4, r7, #4
 8003d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d50:	f240 2301 	movw	r3, #513	; 0x201
 8003d54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d6a:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d002      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x40>
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x46>
 8003d7e:	e02b      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d80:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d82:	623b      	str	r3, [r7, #32]
      break;
 8003d84:	e02b      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	0c9b      	lsrs	r3, r3, #18
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	3328      	adds	r3, #40	; 0x28
 8003d90:	443b      	add	r3, r7
 8003d92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d96:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d012      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	0c5b      	lsrs	r3, r3, #17
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	3328      	adds	r3, #40	; 0x28
 8003dae:	443b      	add	r3, r7
 8003db0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003db4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dba:	fb03 f202 	mul.w	r2, r3, r2
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	e004      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	623b      	str	r3, [r7, #32]
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dda:	623b      	str	r3, [r7, #32]
      break;
 8003ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dde:	6a3b      	ldr	r3, [r7, #32]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc90      	pop	{r4, r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	08008960 	.word	0x08008960
 8003df0:	40021000 	.word	0x40021000
 8003df4:	007a1200 	.word	0x007a1200
 8003df8:	003d0900 	.word	0x003d0900

08003dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e00:	4b02      	ldr	r3, [pc, #8]	; (8003e0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr
 8003e0c:	20000008 	.word	0x20000008

08003e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e14:	f7ff fff2 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4903      	ldr	r1, [pc, #12]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	080089f0 	.word	0x080089f0

08003e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <RCC_Delay+0x34>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <RCC_Delay+0x38>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0a5b      	lsrs	r3, r3, #9
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e54:	bf00      	nop
  }
  while (Delay --);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	60fa      	str	r2, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f9      	bne.n	8003e54 <RCC_Delay+0x1c>
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20000008 	.word	0x20000008
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e076      	b.n	8003f74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e96:	d009      	beq.n	8003eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
 8003e9e:	e005      	b.n	8003eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fec8 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	ea42 0103 	orr.w	r1, r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	0c1a      	lsrs	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 0204 	and.w	r2, r2, #4
 8003f52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Transmit+0x22>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e126      	b.n	80041ec <HAL_SPI_Transmit+0x270>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa6:	f7fe f885 	bl	80020b4 <HAL_GetTick>
 8003faa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc0:	e10b      	b.n	80041da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit+0x52>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd2:	e102      	b.n	80041da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d10f      	bne.n	800403c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d007      	beq.n	800405a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d14b      	bne.n	80040fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_SPI_Transmit+0xf6>
 800406c:	8afb      	ldrh	r3, [r7, #22]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d13e      	bne.n	80040f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004096:	e02b      	b.n	80040f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d112      	bne.n	80040cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80040ca:	e011      	b.n	80040f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040cc:	f7fd fff2 	bl	80020b4 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d803      	bhi.n	80040e4 <HAL_SPI_Transmit+0x168>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d102      	bne.n	80040ea <HAL_SPI_Transmit+0x16e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040ee:	e074      	b.n	80041da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ce      	bne.n	8004098 <HAL_SPI_Transmit+0x11c>
 80040fa:	e04c      	b.n	8004196 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_Transmit+0x18e>
 8004104:	8afb      	ldrh	r3, [r7, #22]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d140      	bne.n	800418c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004130:	e02c      	b.n	800418c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d113      	bne.n	8004168 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	86da      	strh	r2, [r3, #54]	; 0x36
 8004166:	e011      	b.n	800418c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004168:	f7fd ffa4 	bl	80020b4 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d803      	bhi.n	8004180 <HAL_SPI_Transmit+0x204>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d102      	bne.n	8004186 <HAL_SPI_Transmit+0x20a>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	77fb      	strb	r3, [r7, #31]
          goto error;
 800418a:	e026      	b.n	80041da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1cd      	bne.n	8004132 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f8b2 	bl	8004304 <SPI_EndRxTxTransaction>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e000      	b.n	80041da <HAL_SPI_Transmit+0x25e>
  }

error:
 80041d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004204:	f7fd ff56 	bl	80020b4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	4413      	add	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004214:	f7fd ff4e 	bl	80020b4 <HAL_GetTick>
 8004218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800421a:	4b39      	ldr	r3, [pc, #228]	; (8004300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	015b      	lsls	r3, r3, #5
 8004220:	0d1b      	lsrs	r3, r3, #20
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422a:	e054      	b.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d050      	beq.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004234:	f7fd ff3e 	bl	80020b4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	429a      	cmp	r2, r3
 8004242:	d902      	bls.n	800424a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d13d      	bne.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004262:	d111      	bne.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d004      	beq.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004276:	d107      	bne.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004290:	d10f      	bne.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e017      	b.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d19b      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000008 	.word	0x20000008

08004304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff ff6a 	bl	80041f4 <SPI_WaitFlagStateUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e000      	b.n	8004338 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e041      	b.n	80043d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd fcc2 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 fc4e 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e044      	b.n	8004482 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1d      	ldr	r2, [pc, #116]	; (800448c <HAL_TIM_Base_Start_IT+0xac>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x6c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_TIM_Base_Start_IT+0xb0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x6c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d00e      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x6c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_TIM_Base_Start_IT+0xb4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x6c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a16      	ldr	r2, [pc, #88]	; (8004498 <HAL_TIM_Base_Start_IT+0xb8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x6c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a15      	ldr	r2, [pc, #84]	; (800449c <HAL_TIM_Base_Start_IT+0xbc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d111      	bne.n	8004470 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b06      	cmp	r3, #6
 800445c:	d010      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446e:	e007      	b.n	8004480 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	40012c00 	.word	0x40012c00
 8004490:	40013400 	.word	0x40013400
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00

080044a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e041      	b.n	8004536 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f839 	bl	800453e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fb9e 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_TIM_PWM_Start+0x24>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e022      	b.n	80045ba <HAL_TIM_PWM_Start+0x6a>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b04      	cmp	r3, #4
 8004578:	d109      	bne.n	800458e <HAL_TIM_PWM_Start+0x3e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	e015      	b.n	80045ba <HAL_TIM_PWM_Start+0x6a>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d109      	bne.n	80045a8 <HAL_TIM_PWM_Start+0x58>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e008      	b.n	80045ba <HAL_TIM_PWM_Start+0x6a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e072      	b.n	80046a8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_PWM_Start+0x82>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d0:	e013      	b.n	80045fa <HAL_TIM_PWM_Start+0xaa>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_PWM_Start+0x92>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e0:	e00b      	b.n	80045fa <HAL_TIM_PWM_Start+0xaa>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0xa2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f0:	e003      	b.n	80045fa <HAL_TIM_PWM_Start+0xaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2201      	movs	r2, #1
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fdc8 	bl	8005198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <HAL_TIM_PWM_Start+0x160>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIM_PWM_Start+0xcc>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <HAL_TIM_PWM_Start+0x164>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_TIM_PWM_Start+0xd0>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <HAL_TIM_PWM_Start+0xd2>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_TIM_PWM_Start+0x160>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_TIM_PWM_Start+0x122>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <HAL_TIM_PWM_Start+0x164>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_TIM_PWM_Start+0x122>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004652:	d00e      	beq.n	8004672 <HAL_TIM_PWM_Start+0x122>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <HAL_TIM_PWM_Start+0x168>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_TIM_PWM_Start+0x122>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIM_PWM_Start+0x16c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIM_PWM_Start+0x122>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <HAL_TIM_PWM_Start+0x170>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d111      	bne.n	8004696 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b06      	cmp	r3, #6
 8004682:	d010      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	e007      	b.n	80046a6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00

080046c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d122      	bne.n	8004720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d11b      	bne.n	8004720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0202 	mvn.w	r2, #2
 80046f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa6f 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa62 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa71 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0204 	mvn.w	r2, #4
 8004744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa45 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa38 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa47 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b08      	cmp	r3, #8
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0208 	mvn.w	r2, #8
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2204      	movs	r2, #4
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa1b 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa0e 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fa1d 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0210 	mvn.w	r2, #16
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2208      	movs	r2, #8
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f9f1 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f9e4 	bl	8004bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f9f3 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0201 	mvn.w	r2, #1
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd f89c 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d107      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800486c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fd7c 	bl	800536c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d10e      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f9b7 	bl	8004c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d10e      	bne.n	80048cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d107      	bne.n	80048cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0220 	mvn.w	r2, #32
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fd47 	bl	800535a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0ac      	b.n	8004a48 <HAL_TIM_PWM_ConfigChannel+0x174>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b0c      	cmp	r3, #12
 80048fa:	f200 809f 	bhi.w	8004a3c <HAL_TIM_PWM_ConfigChannel+0x168>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004939 	.word	0x08004939
 8004908:	08004a3d 	.word	0x08004a3d
 800490c:	08004a3d 	.word	0x08004a3d
 8004910:	08004a3d 	.word	0x08004a3d
 8004914:	08004979 	.word	0x08004979
 8004918:	08004a3d 	.word	0x08004a3d
 800491c:	08004a3d 	.word	0x08004a3d
 8004920:	08004a3d 	.word	0x08004a3d
 8004924:	080049bb 	.word	0x080049bb
 8004928:	08004a3d 	.word	0x08004a3d
 800492c:	08004a3d 	.word	0x08004a3d
 8004930:	08004a3d 	.word	0x08004a3d
 8004934:	080049fb 	.word	0x080049fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f9e8 	bl	8004d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0208 	orr.w	r2, r2, #8
 8004952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6999      	ldr	r1, [r3, #24]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	619a      	str	r2, [r3, #24]
      break;
 8004976:	e062      	b.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fa38 	bl	8004df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6999      	ldr	r1, [r3, #24]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	619a      	str	r2, [r3, #24]
      break;
 80049b8:	e041      	b.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fa8b 	bl	8004edc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0208 	orr.w	r2, r2, #8
 80049d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0204 	bic.w	r2, r2, #4
 80049e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69d9      	ldr	r1, [r3, #28]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	61da      	str	r2, [r3, #28]
      break;
 80049f8:	e021      	b.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fadf 	bl	8004fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69d9      	ldr	r1, [r3, #28]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	021a      	lsls	r2, r3, #8
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	61da      	str	r2, [r3, #28]
      break;
 8004a3a:	e000      	b.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004a3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIM_ConfigClockSource+0x18>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0b3      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x180>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa0:	d03e      	beq.n	8004b20 <HAL_TIM_ConfigClockSource+0xd0>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	f200 8087 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aae:	f000 8085 	beq.w	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d87f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004ab8:	2b70      	cmp	r3, #112	; 0x70
 8004aba:	d01a      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xa2>
 8004abc:	2b70      	cmp	r3, #112	; 0x70
 8004abe:	d87b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004ac0:	2b60      	cmp	r3, #96	; 0x60
 8004ac2:	d050      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x116>
 8004ac4:	2b60      	cmp	r3, #96	; 0x60
 8004ac6:	d877      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d03c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xf6>
 8004acc:	2b50      	cmp	r3, #80	; 0x50
 8004ace:	d873      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d058      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x136>
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d86f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004ad8:	2b30      	cmp	r3, #48	; 0x30
 8004ada:	d064      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x156>
 8004adc:	2b30      	cmp	r3, #48	; 0x30
 8004ade:	d86b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d060      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x156>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d867      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x156>
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d05a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004af0:	e062      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 fb2a 	bl	800515a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	609a      	str	r2, [r3, #8]
      break;
 8004b1e:	e04e      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f000 fb13 	bl	800515a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b42:	609a      	str	r2, [r3, #8]
      break;
 8004b44:	e03b      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fa8a 	bl	800506c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2150      	movs	r1, #80	; 0x50
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fae1 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004b64:	e02b      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 faa8 	bl	80050c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2160      	movs	r1, #96	; 0x60
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fad1 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004b84:	e01b      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 fa6a 	bl	800506c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2140      	movs	r1, #64	; 0x40
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fac1 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e00b      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fab8 	bl	8005126 <TIM_ITRx_SetConfig>
        break;
 8004bb6:	e002      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bb8:	bf00      	nop
 8004bba:	e000      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a33      	ldr	r2, [pc, #204]	; (8004d00 <TIM_Base_SetConfig+0xe0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a32      	ldr	r2, [pc, #200]	; (8004d04 <TIM_Base_SetConfig+0xe4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00f      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d00b      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <TIM_Base_SetConfig+0xe8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a2e      	ldr	r2, [pc, #184]	; (8004d0c <TIM_Base_SetConfig+0xec>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <TIM_Base_SetConfig+0xf0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <TIM_Base_SetConfig+0xe0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_Base_SetConfig+0x82>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a21      	ldr	r2, [pc, #132]	; (8004d04 <TIM_Base_SetConfig+0xe4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_Base_SetConfig+0x82>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x82>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <TIM_Base_SetConfig+0xe8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <TIM_Base_SetConfig+0xec>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0x82>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <TIM_Base_SetConfig+0xf0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <TIM_Base_SetConfig+0xe0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_Base_SetConfig+0xc8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <TIM_Base_SetConfig+0xe4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d103      	bne.n	8004cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	615a      	str	r2, [r3, #20]
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00

08004d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 0302 	bic.w	r3, r3, #2
 8004d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a20      	ldr	r2, [pc, #128]	; (8004dec <TIM_OC1_SetConfig+0xd8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_OC1_SetConfig+0x64>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <TIM_OC1_SetConfig+0xdc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10c      	bne.n	8004d92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0308 	bic.w	r3, r3, #8
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <TIM_OC1_SetConfig+0xd8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC1_SetConfig+0x8e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <TIM_OC1_SetConfig+0xdc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d111      	bne.n	8004dc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40013400 	.word	0x40013400

08004df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0210 	bic.w	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0320 	bic.w	r3, r3, #32
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <TIM_OC2_SetConfig+0xe0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_OC2_SetConfig+0x68>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a20      	ldr	r2, [pc, #128]	; (8004ed8 <TIM_OC2_SetConfig+0xe4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d10d      	bne.n	8004e78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <TIM_OC2_SetConfig+0xe0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC2_SetConfig+0x94>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <TIM_OC2_SetConfig+0xe4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d113      	bne.n	8004eb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40013400 	.word	0x40013400

08004edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <TIM_OC3_SetConfig+0xe0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_OC3_SetConfig+0x66>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <TIM_OC3_SetConfig+0xe4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10d      	bne.n	8004f5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <TIM_OC3_SetConfig+0xe0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_OC3_SetConfig+0x92>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <TIM_OC3_SetConfig+0xe4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d113      	bne.n	8004f96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	621a      	str	r2, [r3, #32]
}
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40013400 	.word	0x40013400

08004fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800500e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	031b      	lsls	r3, r3, #12
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a11      	ldr	r2, [pc, #68]	; (8005064 <TIM_OC4_SetConfig+0xa0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_OC4_SetConfig+0x68>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <TIM_OC4_SetConfig+0xa4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d109      	bne.n	8005040 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40013400 	.word	0x40013400

0800506c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 030a 	bic.w	r3, r3, #10
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f023 0210 	bic.w	r2, r3, #16
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	031b      	lsls	r3, r3, #12
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005104:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	f043 0307 	orr.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800515a:	b480      	push	{r7}
 800515c:	b087      	sub	sp, #28
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005174:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	021a      	lsls	r2, r3, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	431a      	orrs	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	609a      	str	r2, [r3, #8]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2201      	movs	r2, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	fa01 f303 	lsl.w	r3, r1, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e050      	b.n	800529a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1b      	ldr	r2, [pc, #108]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d00e      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a15      	ldr	r2, [pc, #84]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10c      	bne.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4313      	orrs	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40013400 	.word	0x40013400
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00

080052b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e03d      	b.n	8005350 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
	...

08005380 <ads1115_config_register>:
#include "ADS1115.h"
#include "stdlib.h"
#include "stdio.h"
 
void ads1115_config_register(I2C_HandleTypeDef ads1115_I2cHandle,uint8_t pointADD,uint8_t configH,uint8_t configL)
{
 8005380:	b084      	sub	sp, #16
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af02      	add	r7, sp, #8
 8005388:	f107 0c10 	add.w	ip, r7, #16
 800538c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t reg_data[3]={pointADD,configH,configL};
 8005390:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005394:	713b      	strb	r3, [r7, #4]
 8005396:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800539a:	717b      	strb	r3, [r7, #5]
 800539c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80053a0:	71bb      	strb	r3, [r7, #6]
    while(HAL_I2C_Master_Transmit(&ads1115_I2cHandle, ADS1115_WRITE_ADDRESS, reg_data, 3, 1000) != HAL_OK)
 80053a2:	e009      	b.n	80053b8 <ads1115_config_register+0x38>
    {
        if(HAL_I2C_GetError(&ads1115_I2cHandle) != HAL_I2C_ERROR_AF)
 80053a4:	f107 0010 	add.w	r0, r7, #16
 80053a8:	f7fd fe26 	bl	8002ff8 <HAL_I2C_GetError>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d002      	beq.n	80053b8 <ads1115_config_register+0x38>
        {
            printf("ads1115 Config Register error!!!\r\n");
 80053b2:	480c      	ldr	r0, [pc, #48]	; (80053e4 <ads1115_config_register+0x64>)
 80053b4:	f001 fa22 	bl	80067fc <puts>
    while(HAL_I2C_Master_Transmit(&ads1115_I2cHandle, ADS1115_WRITE_ADDRESS, reg_data, 3, 1000) != HAL_OK)
 80053b8:	1d3a      	adds	r2, r7, #4
 80053ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2303      	movs	r3, #3
 80053c2:	2190      	movs	r1, #144	; 0x90
 80053c4:	f107 0010 	add.w	r0, r7, #16
 80053c8:	f7fd fab8 	bl	800293c <HAL_I2C_Master_Transmit>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e8      	bne.n	80053a4 <ads1115_config_register+0x24>
        }
    }
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053de:	b004      	add	sp, #16
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	08008970 	.word	0x08008970

080053e8 <ads1115_read_data>:
int16_t ads1115_read_data(I2C_HandleTypeDef ads1115_I2cHandle)
{
 80053e8:	b084      	sub	sp, #16
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af02      	add	r7, sp, #8
 80053f0:	f107 0c10 	add.w	ip, r7, #16
 80053f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    int16_t data;
    uint8_t rx_data[2]={0};
 80053f8:	2300      	movs	r3, #0
 80053fa:	80bb      	strh	r3, [r7, #4]
 
    while(HAL_I2C_Master_Transmit(&ads1115_I2cHandle, ADS1115_WRITE_ADDRESS, 0x00, 1, 1000) != HAL_OK)
 80053fc:	e009      	b.n	8005412 <ads1115_read_data+0x2a>
    {
        if(HAL_I2C_GetError(&ads1115_I2cHandle) != HAL_I2C_ERROR_AF)
 80053fe:	f107 0010 	add.w	r0, r7, #16
 8005402:	f7fd fdf9 	bl	8002ff8 <HAL_I2C_GetError>
 8005406:	4603      	mov	r3, r0
 8005408:	2b04      	cmp	r3, #4
 800540a:	d002      	beq.n	8005412 <ads1115_read_data+0x2a>
        {
            printf("ads1115 convert Register error!!!\r\n");
 800540c:	481c      	ldr	r0, [pc, #112]	; (8005480 <ads1115_read_data+0x98>)
 800540e:	f001 f9f5 	bl	80067fc <puts>
    while(HAL_I2C_Master_Transmit(&ads1115_I2cHandle, ADS1115_WRITE_ADDRESS, 0x00, 1, 1000) != HAL_OK)
 8005412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2301      	movs	r3, #1
 800541a:	2200      	movs	r2, #0
 800541c:	2190      	movs	r1, #144	; 0x90
 800541e:	f107 0010 	add.w	r0, r7, #16
 8005422:	f7fd fa8b 	bl	800293c <HAL_I2C_Master_Transmit>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e8      	bne.n	80053fe <ads1115_read_data+0x16>
        }
    }
 
    while(HAL_I2C_Master_Receive(&ads1115_I2cHandle, ADS1115_READ_ADDRESS, rx_data, 2, 1000) != HAL_OK)
 800542c:	e009      	b.n	8005442 <ads1115_read_data+0x5a>
    {
        if(HAL_I2C_GetError(&ads1115_I2cHandle) != HAL_I2C_ERROR_AF)
 800542e:	f107 0010 	add.w	r0, r7, #16
 8005432:	f7fd fde1 	bl	8002ff8 <HAL_I2C_GetError>
 8005436:	4603      	mov	r3, r0
 8005438:	2b04      	cmp	r3, #4
 800543a:	d002      	beq.n	8005442 <ads1115_read_data+0x5a>
        {
            printf("ads1115 read data error!!!\r\n");
 800543c:	4811      	ldr	r0, [pc, #68]	; (8005484 <ads1115_read_data+0x9c>)
 800543e:	f001 f9dd 	bl	80067fc <puts>
    while(HAL_I2C_Master_Receive(&ads1115_I2cHandle, ADS1115_READ_ADDRESS, rx_data, 2, 1000) != HAL_OK)
 8005442:	1d3a      	adds	r2, r7, #4
 8005444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2302      	movs	r3, #2
 800544c:	2191      	movs	r1, #145	; 0x91
 800544e:	f107 0010 	add.w	r0, r7, #16
 8005452:	f7fd fb71 	bl	8002b38 <HAL_I2C_Master_Receive>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e8      	bne.n	800542e <ads1115_read_data+0x46>
        }
    }
 
    data=rx_data[0]*256+rx_data[1];
 800545c:	793b      	ldrb	r3, [r7, #4]
 800545e:	b29b      	uxth	r3, r3
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	b29a      	uxth	r2, r3
 8005464:	797b      	ldrb	r3, [r7, #5]
 8005466:	b29b      	uxth	r3, r3
 8005468:	4413      	add	r3, r2
 800546a:	b29b      	uxth	r3, r3
 800546c:	80fb      	strh	r3, [r7, #6]
    return data;
 800546e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	08008994 	.word	0x08008994
 8005484:	080089b8 	.word	0x080089b8

08005488 <ads1115_get_voltage_val>:
 
double ads1115_get_voltage_val(I2C_HandleTypeDef ads1115_I2cHandle,uint8_t pointADD,uint8_t configH,uint8_t configL)
{
 8005488:	b084      	sub	sp, #16
 800548a:	b580      	push	{r7, lr}
 800548c:	b098      	sub	sp, #96	; 0x60
 800548e:	af14      	add	r7, sp, #80	; 0x50
 8005490:	f107 0c18 	add.w	ip, r7, #24
 8005494:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    double val;
    int16_t ad_val;
 
    ads1115_config_register(ads1115_I2cHandle,pointADD,configH,configL);
 8005498:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800549c:	9313      	str	r3, [sp, #76]	; 0x4c
 800549e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80054a2:	9312      	str	r3, [sp, #72]	; 0x48
 80054a4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80054a8:	9311      	str	r3, [sp, #68]	; 0x44
 80054aa:	4668      	mov	r0, sp
 80054ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b0:	2244      	movs	r2, #68	; 0x44
 80054b2:	4619      	mov	r1, r3
 80054b4:	f000 fcbe 	bl	8005e34 <memcpy>
 80054b8:	f107 0318 	add.w	r3, r7, #24
 80054bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054be:	f7ff ff5f 	bl	8005380 <ads1115_config_register>
    HAL_Delay(10);
 80054c2:	200a      	movs	r0, #10
 80054c4:	f7fc fe00 	bl	80020c8 <HAL_Delay>
    ad_val=ads1115_read_data(ads1115_I2cHandle);
 80054c8:	4668      	mov	r0, sp
 80054ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ce:	2244      	movs	r2, #68	; 0x44
 80054d0:	4619      	mov	r1, r3
 80054d2:	f000 fcaf 	bl	8005e34 <memcpy>
 80054d6:	f107 0318 	add.w	r3, r7, #24
 80054da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054dc:	f7ff ff84 	bl	80053e8 <ads1115_read_data>
 80054e0:	4603      	mov	r3, r0
 80054e2:	80fb      	strh	r3, [r7, #6]
    if((ad_val==0x7FFF)|(ad_val==0X8000))//�Ƿ�������
 80054e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d104      	bne.n	80054fa <ads1115_get_voltage_val+0x72>
    {
        ad_val=0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	80fb      	strh	r3, [r7, #6]
        printf("over PGA\r\n");
 80054f4:	485e      	ldr	r0, [pc, #376]	; (8005670 <ads1115_get_voltage_val+0x1e8>)
 80054f6:	f001 f981 	bl	80067fc <puts>
    }
 
    switch((0x0E&configH)>>1)//���̶�Ӧ�ķֱ���
 80054fa:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	2b05      	cmp	r3, #5
 8005508:	f200 80a0 	bhi.w	800564c <ads1115_get_voltage_val+0x1c4>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <ads1115_get_voltage_val+0x8c>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	0800552d 	.word	0x0800552d
 8005518:	0800555d 	.word	0x0800555d
 800551c:	0800558d 	.word	0x0800558d
 8005520:	080055bd 	.word	0x080055bd
 8005524:	080055ed 	.word	0x080055ed
 8005528:	0800561d 	.word	0x0800561d
    {
        case(0x00):
            val=(double)ad_val*187.5/1000000.0;//
 800552c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb f887 	bl	8000644 <__aeabi_i2d>
 8005536:	a34a      	add	r3, pc, #296	; (adr r3, 8005660 <ads1115_get_voltage_val+0x1d8>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fb f8ec 	bl	8000718 <__aeabi_dmul>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	a347      	add	r3, pc, #284	; (adr r3, 8005668 <ads1115_get_voltage_val+0x1e0>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb fa0d 	bl	800096c <__aeabi_ddiv>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	e9c7 2302 	strd	r2, r3, [r7, #8]
        break;
 800555a:	e077      	b.n	800564c <ads1115_get_voltage_val+0x1c4>
        case(0x01):
            val=(double)ad_val*125/1000000.0;
 800555c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005560:	4618      	mov	r0, r3
 8005562:	f7fb f86f 	bl	8000644 <__aeabi_i2d>
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	4b42      	ldr	r3, [pc, #264]	; (8005674 <ads1115_get_voltage_val+0x1ec>)
 800556c:	f7fb f8d4 	bl	8000718 <__aeabi_dmul>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4610      	mov	r0, r2
 8005576:	4619      	mov	r1, r3
 8005578:	a33b      	add	r3, pc, #236	; (adr r3, 8005668 <ads1115_get_voltage_val+0x1e0>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fb f9f5 	bl	800096c <__aeabi_ddiv>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	e9c7 2302 	strd	r2, r3, [r7, #8]
        break;
 800558a:	e05f      	b.n	800564c <ads1115_get_voltage_val+0x1c4>
        case(0x02):
            val=(double)ad_val*62.5/1000000.0;
 800558c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fb f857 	bl	8000644 <__aeabi_i2d>
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	4b37      	ldr	r3, [pc, #220]	; (8005678 <ads1115_get_voltage_val+0x1f0>)
 800559c:	f7fb f8bc 	bl	8000718 <__aeabi_dmul>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	a32f      	add	r3, pc, #188	; (adr r3, 8005668 <ads1115_get_voltage_val+0x1e0>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fb f9dd 	bl	800096c <__aeabi_ddiv>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        break;
 80055ba:	e047      	b.n	800564c <ads1115_get_voltage_val+0x1c4>
        case(0x03):
            val=(double)ad_val*31.25/1000000.0;
 80055bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fb f83f 	bl	8000644 <__aeabi_i2d>
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	4b2c      	ldr	r3, [pc, #176]	; (800567c <ads1115_get_voltage_val+0x1f4>)
 80055cc:	f7fb f8a4 	bl	8000718 <__aeabi_dmul>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	a323      	add	r3, pc, #140	; (adr r3, 8005668 <ads1115_get_voltage_val+0x1e0>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fb f9c5 	bl	800096c <__aeabi_ddiv>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        break;
 80055ea:	e02f      	b.n	800564c <ads1115_get_voltage_val+0x1c4>
        case(0x04):
            val=(double)ad_val*15.625/1000000.0;
 80055ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fb f827 	bl	8000644 <__aeabi_i2d>
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	4b21      	ldr	r3, [pc, #132]	; (8005680 <ads1115_get_voltage_val+0x1f8>)
 80055fc:	f7fb f88c 	bl	8000718 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	a317      	add	r3, pc, #92	; (adr r3, 8005668 <ads1115_get_voltage_val+0x1e0>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f7fb f9ad 	bl	800096c <__aeabi_ddiv>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	e9c7 2302 	strd	r2, r3, [r7, #8]
        break;
 800561a:	e017      	b.n	800564c <ads1115_get_voltage_val+0x1c4>
        case(0x05):
            val=(double)ad_val*7.8125/1000000.0;
 800561c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005620:	4618      	mov	r0, r3
 8005622:	f7fb f80f 	bl	8000644 <__aeabi_i2d>
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <ads1115_get_voltage_val+0x1fc>)
 800562c:	f7fb f874 	bl	8000718 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	a30b      	add	r3, pc, #44	; (adr r3, 8005668 <ads1115_get_voltage_val+0x1e0>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fb f995 	bl	800096c <__aeabi_ddiv>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	e9c7 2302 	strd	r2, r3, [r7, #8]
        break;
 800564a:	bf00      	nop
    }
    return val;
 800564c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 }
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565c:	b004      	add	sp, #16
 800565e:	4770      	bx	lr
 8005660:	00000000 	.word	0x00000000
 8005664:	40677000 	.word	0x40677000
 8005668:	00000000 	.word	0x00000000
 800566c:	412e8480 	.word	0x412e8480
 8005670:	080089d4 	.word	0x080089d4
 8005674:	405f4000 	.word	0x405f4000
 8005678:	404f4000 	.word	0x404f4000
 800567c:	403f4000 	.word	0x403f4000
 8005680:	402f4000 	.word	0x402f4000
 8005684:	401f4000 	.word	0x401f4000

08005688 <KEY_ROW_SCAN>:
#include "keyboard.h"
#include "main.h"
uint8_t Key_row[1]={0xff};   //保存按键行扫描情况的状态数组

char KEY_ROW_SCAN(void)
{
 8005688:	b598      	push	{r3, r4, r7, lr}
 800568a:	af00      	add	r7, sp, #0
    //读出行扫描状态
    Key_row[0] = HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)<<3;                  
 800568c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005690:	4831      	ldr	r0, [pc, #196]	; (8005758 <KEY_ROW_SCAN+0xd0>)
 8005692:	f7fc ffdf 	bl	8002654 <HAL_GPIO_ReadPin>
 8005696:	4603      	mov	r3, r0
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b2f      	ldr	r3, [pc, #188]	; (800575c <KEY_ROW_SCAN+0xd4>)
 800569e:	701a      	strb	r2, [r3, #0]
    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)<<2);   
 80056a0:	4b2e      	ldr	r3, [pc, #184]	; (800575c <KEY_ROW_SCAN+0xd4>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	b25c      	sxtb	r4, r3
 80056a6:	2180      	movs	r1, #128	; 0x80
 80056a8:	482b      	ldr	r0, [pc, #172]	; (8005758 <KEY_ROW_SCAN+0xd0>)
 80056aa:	f7fc ffd3 	bl	8002654 <HAL_GPIO_ReadPin>
 80056ae:	4603      	mov	r3, r0
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	4323      	orrs	r3, r4
 80056b6:	b25b      	sxtb	r3, r3
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	4b28      	ldr	r3, [pc, #160]	; (800575c <KEY_ROW_SCAN+0xd4>)
 80056bc:	701a      	strb	r2, [r3, #0]
    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)<<1);   
 80056be:	4b27      	ldr	r3, [pc, #156]	; (800575c <KEY_ROW_SCAN+0xd4>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b25c      	sxtb	r4, r3
 80056c4:	2120      	movs	r1, #32
 80056c6:	4824      	ldr	r0, [pc, #144]	; (8005758 <KEY_ROW_SCAN+0xd0>)
 80056c8:	f7fc ffc4 	bl	8002654 <HAL_GPIO_ReadPin>
 80056cc:	4603      	mov	r3, r0
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	b25b      	sxtb	r3, r3
 80056d2:	4323      	orrs	r3, r4
 80056d4:	b25b      	sxtb	r3, r3
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	4b20      	ldr	r3, [pc, #128]	; (800575c <KEY_ROW_SCAN+0xd4>)
 80056da:	701a      	strb	r2, [r3, #0]
    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin));      
 80056dc:	4b1f      	ldr	r3, [pc, #124]	; (800575c <KEY_ROW_SCAN+0xd4>)
 80056de:	781c      	ldrb	r4, [r3, #0]
 80056e0:	2108      	movs	r1, #8
 80056e2:	481d      	ldr	r0, [pc, #116]	; (8005758 <KEY_ROW_SCAN+0xd0>)
 80056e4:	f7fc ffb6 	bl	8002654 <HAL_GPIO_ReadPin>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4323      	orrs	r3, r4
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4b1b      	ldr	r3, [pc, #108]	; (800575c <KEY_ROW_SCAN+0xd4>)
 80056f0:	701a      	strb	r2, [r3, #0]
    
    if(Key_row[0] != 0x0f)         //行扫描有变化，判断该列有按键按下
 80056f2:	4b1a      	ldr	r3, [pc, #104]	; (800575c <KEY_ROW_SCAN+0xd4>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d02a      	beq.n	8005750 <KEY_ROW_SCAN+0xc8>
    {
      HAL_Delay(10);                    //消抖
 80056fa:	200a      	movs	r0, #10
 80056fc:	f7fc fce4 	bl	80020c8 <HAL_Delay>
      if(Key_row[0] != 0x0f)
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <KEY_ROW_SCAN+0xd4>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b0f      	cmp	r3, #15
 8005706:	d021      	beq.n	800574c <KEY_ROW_SCAN+0xc4>
        {   
                //printf("Key_Row_DATA = 0x%x\r\n",Key_row[0]);
                switch(Key_row[0])
 8005708:	4b14      	ldr	r3, [pc, #80]	; (800575c <KEY_ROW_SCAN+0xd4>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	3b07      	subs	r3, #7
 800570e:	2b07      	cmp	r3, #7
 8005710:	d81a      	bhi.n	8005748 <KEY_ROW_SCAN+0xc0>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <KEY_ROW_SCAN+0x90>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005739 	.word	0x08005739
 800571c:	08005749 	.word	0x08005749
 8005720:	08005749 	.word	0x08005749
 8005724:	08005749 	.word	0x08005749
 8005728:	0800573d 	.word	0x0800573d
 800572c:	08005749 	.word	0x08005749
 8005730:	08005741 	.word	0x08005741
 8005734:	08005745 	.word	0x08005745
                {
                    case 0x07:         //0111 判断为该列第1行的按键按下
                        return 1;
 8005738:	2301      	movs	r3, #1
 800573a:	e00a      	b.n	8005752 <KEY_ROW_SCAN+0xca>
                    case 0x0b:         //1011 判断为该列第2行的按键按下
                        return 2;
 800573c:	2302      	movs	r3, #2
 800573e:	e008      	b.n	8005752 <KEY_ROW_SCAN+0xca>
                    case 0x0d:         //1101 判断为该列第3行的按键按下
                        return 3;
 8005740:	2303      	movs	r3, #3
 8005742:	e006      	b.n	8005752 <KEY_ROW_SCAN+0xca>
                    case 0x0e:         //1110 判断为该列第4行的按键按下
                        return 4;
 8005744:	2304      	movs	r3, #4
 8005746:	e004      	b.n	8005752 <KEY_ROW_SCAN+0xca>
                    default :
                        return 0;
 8005748:	2300      	movs	r3, #0
 800574a:	e002      	b.n	8005752 <KEY_ROW_SCAN+0xca>
                }
        }
        else return 0;
 800574c:	2300      	movs	r3, #0
 800574e:	e000      	b.n	8005752 <KEY_ROW_SCAN+0xca>
    }
    else return 0;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	bd98      	pop	{r3, r4, r7, pc}
 8005756:	bf00      	nop
 8005758:	40011c00 	.word	0x40011c00
 800575c:	20000014 	.word	0x20000014

08005760 <KEY_SCAN>:
/**
 * @brief 4*4按键扫描
 * @return 0~16，对应16个按键
 */
char KEY_SCAN(void)
{    
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
    char Key_Num=0;       //1-16对应的按键数
 8005766:	2300      	movs	r3, #0
 8005768:	71fb      	strb	r3, [r7, #7]
    char key_row_num=0;        //行扫描结果记录
 800576a:	2300      	movs	r3, #0
 800576c:	71bb      	strb	r3, [r7, #6]
    
    KEY_CLO0_OUT_LOW;        
 800576e:	2200      	movs	r2, #0
 8005770:	2110      	movs	r1, #16
 8005772:	4837      	ldr	r0, [pc, #220]	; (8005850 <KEY_SCAN+0xf0>)
 8005774:	f7fc ff85 	bl	8002682 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 8005778:	f7ff ff86 	bl	8005688 <KEY_ROW_SCAN>
 800577c:	4603      	mov	r3, r0
 800577e:	71bb      	strb	r3, [r7, #6]
 8005780:	79bb      	ldrb	r3, [r7, #6]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <KEY_SCAN+0x36>
    { 
			
        while(KEY_ROW_SCAN() != 0);  //消抖
 8005786:	bf00      	nop
 8005788:	f7ff ff7e 	bl	8005688 <KEY_ROW_SCAN>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1fa      	bne.n	8005788 <KEY_SCAN+0x28>
        Key_Num = 0 + key_row_num;
 8005792:	79bb      	ldrb	r3, [r7, #6]
 8005794:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_1\r\n");
    }
    KEY_CLO0_OUT_HIGH;
 8005796:	2201      	movs	r2, #1
 8005798:	2110      	movs	r1, #16
 800579a:	482d      	ldr	r0, [pc, #180]	; (8005850 <KEY_SCAN+0xf0>)
 800579c:	f7fc ff71 	bl	8002682 <HAL_GPIO_WritePin>
    
    KEY_CLO1_OUT_LOW;        
 80057a0:	2200      	movs	r2, #0
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	482a      	ldr	r0, [pc, #168]	; (8005850 <KEY_SCAN+0xf0>)
 80057a6:	f7fc ff6c 	bl	8002682 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 80057aa:	f7ff ff6d 	bl	8005688 <KEY_ROW_SCAN>
 80057ae:	4603      	mov	r3, r0
 80057b0:	71bb      	strb	r3, [r7, #6]
 80057b2:	79bb      	ldrb	r3, [r7, #6]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <KEY_SCAN+0x6a>
    { 
        while(KEY_ROW_SCAN() != 0);
 80057b8:	bf00      	nop
 80057ba:	f7ff ff65 	bl	8005688 <KEY_ROW_SCAN>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1fa      	bne.n	80057ba <KEY_SCAN+0x5a>
        Key_Num = 4 + key_row_num; 
 80057c4:	79bb      	ldrb	r3, [r7, #6]
 80057c6:	3304      	adds	r3, #4
 80057c8:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_2\r\n");
    }
    KEY_CLO1_OUT_HIGH;
 80057ca:	2201      	movs	r2, #1
 80057cc:	2140      	movs	r1, #64	; 0x40
 80057ce:	4820      	ldr	r0, [pc, #128]	; (8005850 <KEY_SCAN+0xf0>)
 80057d0:	f7fc ff57 	bl	8002682 <HAL_GPIO_WritePin>
    
    KEY_CLO2_OUT_LOW;    
 80057d4:	2200      	movs	r2, #0
 80057d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057da:	481d      	ldr	r0, [pc, #116]	; (8005850 <KEY_SCAN+0xf0>)
 80057dc:	f7fc ff51 	bl	8002682 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 80057e0:	f7ff ff52 	bl	8005688 <KEY_ROW_SCAN>
 80057e4:	4603      	mov	r3, r0
 80057e6:	71bb      	strb	r3, [r7, #6]
 80057e8:	79bb      	ldrb	r3, [r7, #6]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <KEY_SCAN+0xa0>
    { 
        while(KEY_ROW_SCAN() != 0);
 80057ee:	bf00      	nop
 80057f0:	f7ff ff4a 	bl	8005688 <KEY_ROW_SCAN>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1fa      	bne.n	80057f0 <KEY_SCAN+0x90>
    Key_Num = 8 + key_row_num;
 80057fa:	79bb      	ldrb	r3, [r7, #6]
 80057fc:	3308      	adds	r3, #8
 80057fe:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_3\r\n");
    }
    KEY_CLO2_OUT_HIGH;
 8005800:	2201      	movs	r2, #1
 8005802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005806:	4812      	ldr	r0, [pc, #72]	; (8005850 <KEY_SCAN+0xf0>)
 8005808:	f7fc ff3b 	bl	8002682 <HAL_GPIO_WritePin>
    
    KEY_CLO3_OUT_LOW;    
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005812:	480f      	ldr	r0, [pc, #60]	; (8005850 <KEY_SCAN+0xf0>)
 8005814:	f7fc ff35 	bl	8002682 <HAL_GPIO_WritePin>
    if( (key_row_num=KEY_ROW_SCAN()) != 0 )
 8005818:	f7ff ff36 	bl	8005688 <KEY_ROW_SCAN>
 800581c:	4603      	mov	r3, r0
 800581e:	71bb      	strb	r3, [r7, #6]
 8005820:	79bb      	ldrb	r3, [r7, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <KEY_SCAN+0xd8>
//        Key_row[0] = HAL_GPIO_ReadPin(GPIOE,KEY_col0_Pin)<<3;
//        Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_col1_Pin)<<2);
//        Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_col2_Pin)<<1);
//        Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_col3_Pin));
//        printf("Key_Clo4_DATA = 0x%x\r\n",Key_row[0]);
        while(KEY_ROW_SCAN() != 0);
 8005826:	bf00      	nop
 8005828:	f7ff ff2e 	bl	8005688 <KEY_ROW_SCAN>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1fa      	bne.n	8005828 <KEY_SCAN+0xc8>
        Key_Num = 12 + key_row_num;
 8005832:	79bb      	ldrb	r3, [r7, #6]
 8005834:	330c      	adds	r3, #12
 8005836:	71fb      	strb	r3, [r7, #7]
        //printf("Key_Clo_4\r\n");
    }
    KEY_CLO3_OUT_HIGH;
 8005838:	2201      	movs	r2, #1
 800583a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800583e:	4804      	ldr	r0, [pc, #16]	; (8005850 <KEY_SCAN+0xf0>)
 8005840:	f7fc ff1f 	bl	8002682 <HAL_GPIO_WritePin>
    
    return Key_Num;
 8005844:	79fb      	ldrb	r3, [r7, #7]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40011c00 	.word	0x40011c00

08005854 <OLED_WR_Byte>:
//向SSD1306写入一个字节
//dat:要写入的数据/命令
//cmd:数据/命令标志 0，表示命令；1，表示数据

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	460a      	mov	r2, r1
 800585e:	71fb      	strb	r3, [r7, #7]
 8005860:	4613      	mov	r3, r2
 8005862:	71bb      	strb	r3, [r7, #6]
	if (cmd)
 8005864:	79bb      	ldrb	r3, [r7, #6]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <OLED_WR_Byte+0x22>
	{
		OLED_DC_Set(); //命令/数据标志位置为1，则表示传送的是命令字节
 800586a:	2201      	movs	r2, #1
 800586c:	2102      	movs	r1, #2
 800586e:	4812      	ldr	r0, [pc, #72]	; (80058b8 <OLED_WR_Byte+0x64>)
 8005870:	f7fc ff07 	bl	8002682 <HAL_GPIO_WritePin>
 8005874:	e004      	b.n	8005880 <OLED_WR_Byte+0x2c>
	}

	else
		OLED_DC_Clr(); //命令/数据标志位置为0，则表示传送的是数据字节
 8005876:	2200      	movs	r2, #0
 8005878:	2102      	movs	r1, #2
 800587a:	480f      	ldr	r0, [pc, #60]	; (80058b8 <OLED_WR_Byte+0x64>)
 800587c:	f7fc ff01 	bl	8002682 <HAL_GPIO_WritePin>
	OLED_CS_Clr(); //片选信号为低，表示选中OLED
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005886:	480d      	ldr	r0, [pc, #52]	; (80058bc <OLED_WR_Byte+0x68>)
 8005888:	f7fc fefb 	bl	8002682 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 1000); //oled.c文件唯一修改的地方，这里是利用了hal库提供的SPI传送函数
 800588c:	1df9      	adds	r1, r7, #7
 800588e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005892:	2201      	movs	r2, #1
 8005894:	480a      	ldr	r0, [pc, #40]	; (80058c0 <OLED_WR_Byte+0x6c>)
 8005896:	f7fe fb71 	bl	8003f7c <HAL_SPI_Transmit>
	OLED_CS_Set();
 800589a:	2201      	movs	r2, #1
 800589c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058a0:	4806      	ldr	r0, [pc, #24]	; (80058bc <OLED_WR_Byte+0x68>)
 80058a2:	f7fc feee 	bl	8002682 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 80058a6:	2201      	movs	r2, #1
 80058a8:	2102      	movs	r1, #2
 80058aa:	4803      	ldr	r0, [pc, #12]	; (80058b8 <OLED_WR_Byte+0x64>)
 80058ac:	f7fc fee9 	bl	8002682 <HAL_GPIO_WritePin>
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40010c00 	.word	0x40010c00
 80058bc:	40011c00 	.word	0x40011c00
 80058c0:	200002ac 	.word	0x200002ac

080058c4 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	460a      	mov	r2, r1
 80058ce:	71fb      	strb	r3, [r7, #7]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0 + y, OLED_CMD);
 80058d4:	79bb      	ldrb	r3, [r7, #6]
 80058d6:	3b50      	subs	r3, #80	; 0x50
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff ffb9 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte((((x + 2) & 0xf0) >> 4) | 0x10, OLED_CMD);
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	3302      	adds	r3, #2
 80058e6:	111b      	asrs	r3, r3, #4
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	b25b      	sxtb	r3, r3
 80058f0:	f043 0310 	orr.w	r3, r3, #16
 80058f4:	b25b      	sxtb	r3, r3
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ffaa 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(((x + 2) & 0x0f), OLED_CMD);
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	3302      	adds	r3, #2
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff ffa0 	bl	8005854 <OLED_WR_Byte>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <OLED_Display_On>:
//开启OLED显示
void OLED_Display_On(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D, OLED_CMD);  //设置电荷泵命令字
 8005920:	2100      	movs	r1, #0
 8005922:	208d      	movs	r0, #141	; 0x8d
 8005924:	f7ff ff96 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0X14, OLED_CMD);  //开启电荷泵
 8005928:	2100      	movs	r1, #0
 800592a:	2014      	movs	r0, #20
 800592c:	f7ff ff92 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF, OLED_CMD);  //DISPLAY ON
 8005930:	2100      	movs	r1, #0
 8005932:	20af      	movs	r0, #175	; 0xaf
 8005934:	f7ff ff8e 	bl	8005854 <OLED_WR_Byte>
}
 8005938:	bf00      	nop
 800593a:	bd80      	pop	{r7, pc}

0800593c <OLED_Clear>:
/**
 * @brief 清屏
 * 
 */
void OLED_Clear(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8005942:	2300      	movs	r3, #0
 8005944:	71fb      	strb	r3, [r7, #7]
 8005946:	e01f      	b.n	8005988 <OLED_Clear+0x4c>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);    //设置页地址
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	3b50      	subs	r3, #80	; 0x50
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2100      	movs	r1, #0
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff7f 	bl	8005854 <OLED_WR_Byte>
		OLED_WR_Byte(0x02, OLED_CMD);      //设置起始列低地址
 8005956:	2100      	movs	r1, #0
 8005958:	2002      	movs	r0, #2
 800595a:	f7ff ff7b 	bl	8005854 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);      //设置起始列高地址
 800595e:	2100      	movs	r1, #0
 8005960:	2010      	movs	r0, #16
 8005962:	f7ff ff77 	bl	8005854 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8005966:	2300      	movs	r3, #0
 8005968:	71bb      	strb	r3, [r7, #6]
 800596a:	e006      	b.n	800597a <OLED_Clear+0x3e>
			OLED_WR_Byte(0, OLED_DATA);
 800596c:	2101      	movs	r1, #1
 800596e:	2000      	movs	r0, #0
 8005970:	f7ff ff70 	bl	8005854 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8005974:	79bb      	ldrb	r3, [r7, #6]
 8005976:	3301      	adds	r3, #1
 8005978:	71bb      	strb	r3, [r7, #6]
 800597a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	daf4      	bge.n	800596c <OLED_Clear+0x30>
	for (i = 0; i < 8; i++)
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	3301      	adds	r3, #1
 8005986:	71fb      	strb	r3, [r7, #7]
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	2b07      	cmp	r3, #7
 800598c:	d9dc      	bls.n	8005948 <OLED_Clear+0xc>
	} //更新显示
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <OLED_ShowChar>:
 * @param x x轴起始坐标
 * @param y y轴起始坐标
 * @param chr 显示的字符
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
 80059a2:	460b      	mov	r3, r1
 80059a4:	71bb      	strb	r3, [r7, #6]
 80059a6:	4613      	mov	r3, r2
 80059a8:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0, i = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73bb      	strb	r3, [r7, #14]
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
	c = chr - ' '; //得到偏移后的值
 80059b2:	797b      	ldrb	r3, [r7, #5]
 80059b4:	3b20      	subs	r3, #32
 80059b6:	73bb      	strb	r3, [r7, #14]
	if (x > Max_Column - 1)
 80059b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da04      	bge.n	80059ca <OLED_ShowChar+0x32>
	{
		x = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	71fb      	strb	r3, [r7, #7]
		y = y + 2;
 80059c4:	79bb      	ldrb	r3, [r7, #6]
 80059c6:	3302      	adds	r3, #2
 80059c8:	71bb      	strb	r3, [r7, #6]
	}
	if (SIZE == 16)
	{
		OLED_Set_Pos(x, y);
 80059ca:	79ba      	ldrb	r2, [r7, #6]
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff ff77 	bl	80058c4 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
 80059da:	e00c      	b.n	80059f6 <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 80059dc:	7bbb      	ldrb	r3, [r7, #14]
 80059de:	011a      	lsls	r2, r3, #4
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	4413      	add	r3, r2
 80059e4:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <OLED_ShowChar+0xa8>)
 80059e6:	5cd3      	ldrb	r3, [r2, r3]
 80059e8:	2101      	movs	r1, #1
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff ff32 	bl	8005854 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	3301      	adds	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b07      	cmp	r3, #7
 80059fa:	d9ef      	bls.n	80059dc <OLED_ShowChar+0x44>
		OLED_Set_Pos(x, y + 1);
 80059fc:	79bb      	ldrb	r3, [r7, #6]
 80059fe:	3301      	adds	r3, #1
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff ff5c 	bl	80058c4 <OLED_Set_Pos>
		for (i = 0; i < 8; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	e00d      	b.n	8005a2e <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	011a      	lsls	r2, r3, #4
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	4413      	add	r3, r2
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	4a08      	ldr	r2, [pc, #32]	; (8005a40 <OLED_ShowChar+0xa8>)
 8005a1e:	5cd3      	ldrb	r3, [r2, r3]
 8005a20:	2101      	movs	r1, #1
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff ff16 	bl	8005854 <OLED_WR_Byte>
		for (i = 0; i < 8; i++)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b07      	cmp	r3, #7
 8005a32:	d9ee      	bls.n	8005a12 <OLED_ShowChar+0x7a>
		OLED_Set_Pos(x, y + 1);
		for (i = 0; i < 6; i++)
			OLED_WR_Byte(F6x8[c][i], OLED_DATA);

	}
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	080089f8 	.word	0x080089f8

08005a44 <oled_pow>:
//m^n函数
uint32_t oled_pow(uint8_t m, uint8_t n)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	71fb      	strb	r3, [r7, #7]
 8005a50:	4613      	mov	r3, r2
 8005a52:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8005a54:	2301      	movs	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
	while (n--)
 8005a58:	e004      	b.n	8005a64 <oled_pow+0x20>
		result *= m;
 8005a5a:	79fa      	ldrb	r2, [r7, #7]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	60fb      	str	r3, [r7, #12]
	while (n--)
 8005a64:	79bb      	ldrb	r3, [r7, #6]
 8005a66:	1e5a      	subs	r2, r3, #1
 8005a68:	71ba      	strb	r2, [r7, #6]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f5      	bne.n	8005a5a <oled_pow+0x16>
	return result;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr
	...

08005a7c <OLED_ShowNum>:
 * @param num 要显示的数字（0~4294967295）
 * @param len 数字位数
 * @param size 字体大小
 */
void OLED_ShowNum(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	603a      	str	r2, [r7, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	71bb      	strb	r3, [r7, #6]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e049      	b.n	8005b30 <OLED_ShowNum+0xb4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 8005a9c:	797a      	ldrb	r2, [r7, #5]
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	200a      	movs	r0, #10
 8005aac:	f7ff ffca 	bl	8005a44 <oled_pow>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ab8:	4b22      	ldr	r3, [pc, #136]	; (8005b44 <OLED_ShowNum+0xc8>)
 8005aba:	fba3 2301 	umull	r2, r3, r3, r1
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	1aca      	subs	r2, r1, r3
 8005aca:	4613      	mov	r3, r2
 8005acc:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d119      	bne.n	8005b08 <OLED_ShowNum+0x8c>
 8005ad4:	7bfa      	ldrb	r2, [r7, #15]
 8005ad6:	797b      	ldrb	r3, [r7, #5]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	429a      	cmp	r2, r3
 8005adc:	da14      	bge.n	8005b08 <OLED_ShowNum+0x8c>
		{
			if (temp == 0)
 8005ade:	7b7b      	ldrb	r3, [r7, #13]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10f      	bne.n	8005b04 <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ');
 8005ae4:	7e3b      	ldrb	r3, [r7, #24]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	7bfa      	ldrb	r2, [r7, #15]
 8005aec:	fb02 f303 	mul.w	r3, r2, r3
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	4413      	add	r3, r2
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	79b9      	ldrb	r1, [r7, #6]
 8005afa:	2220      	movs	r2, #32
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff ff4b 	bl	8005998 <OLED_ShowChar>
				continue;
 8005b02:	e012      	b.n	8005b2a <OLED_ShowNum+0xae>
			}
			else
				enshow = 1;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73bb      	strb	r3, [r7, #14]

		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0');
 8005b08:	7e3b      	ldrb	r3, [r7, #24]
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	7bfa      	ldrb	r2, [r7, #15]
 8005b10:	fb02 f303 	mul.w	r3, r2, r3
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	4413      	add	r3, r2
 8005b1a:	b2d8      	uxtb	r0, r3
 8005b1c:	7b7b      	ldrb	r3, [r7, #13]
 8005b1e:	3330      	adds	r3, #48	; 0x30
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	79bb      	ldrb	r3, [r7, #6]
 8005b24:	4619      	mov	r1, r3
 8005b26:	f7ff ff37 	bl	8005998 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
 8005b30:	7bfa      	ldrb	r2, [r7, #15]
 8005b32:	797b      	ldrb	r3, [r7, #5]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d3b1      	bcc.n	8005a9c <OLED_ShowNum+0x20>
	}
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	cccccccd 	.word	0xcccccccd

08005b48 <OLED_Init>:
/**
 * @brief 初始化SSD1306
 * 
 */
void OLED_Init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0

	OLED_RST_Clr();
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2120      	movs	r1, #32
 8005b50:	4841      	ldr	r0, [pc, #260]	; (8005c58 <OLED_Init+0x110>)
 8005b52:	f7fc fd96 	bl	8002682 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005b56:	20c8      	movs	r0, #200	; 0xc8
 8005b58:	f7fc fab6 	bl	80020c8 <HAL_Delay>
	OLED_RST_Set();
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2120      	movs	r1, #32
 8005b60:	483d      	ldr	r0, [pc, #244]	; (8005c58 <OLED_Init+0x110>)
 8005b62:	f7fc fd8e 	bl	8002682 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8005b66:	2100      	movs	r1, #0
 8005b68:	20ae      	movs	r0, #174	; 0xae
 8005b6a:	f7ff fe73 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //---set low column address
 8005b6e:	2100      	movs	r1, #0
 8005b70:	2002      	movs	r0, #2
 8005b72:	f7ff fe6f 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8005b76:	2100      	movs	r1, #0
 8005b78:	2010      	movs	r0, #16
 8005b7a:	f7ff fe6b 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8005b7e:	2100      	movs	r1, #0
 8005b80:	2040      	movs	r0, #64	; 0x40
 8005b82:	f7ff fe67 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8005b86:	2100      	movs	r1, #0
 8005b88:	2081      	movs	r0, #129	; 0x81
 8005b8a:	f7ff fe63 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8005b8e:	2100      	movs	r1, #0
 8005b90:	20cf      	movs	r0, #207	; 0xcf
 8005b92:	f7ff fe5f 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0Xa0左右反置 0Xa1正常
 8005b96:	2100      	movs	r1, #0
 8005b98:	20a1      	movs	r0, #161	; 0xa1
 8005b9a:	f7ff fe5b 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); //Set COM/Row Scan Direction   0Xc0上下反置 0Xc8正常
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	20c8      	movs	r0, #200	; 0xc8
 8005ba2:	f7ff fe57 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	20a6      	movs	r0, #166	; 0xa6
 8005baa:	f7ff fe53 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8005bae:	2100      	movs	r1, #0
 8005bb0:	20a8      	movs	r0, #168	; 0xa8
 8005bb2:	f7ff fe4f 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	203f      	movs	r0, #63	; 0x3f
 8005bba:	f7ff fe4b 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	20d3      	movs	r0, #211	; 0xd3
 8005bc2:	f7ff fe47 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f7ff fe43 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8005bce:	2100      	movs	r1, #0
 8005bd0:	20d5      	movs	r0, #213	; 0xd5
 8005bd2:	f7ff fe3f 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	2080      	movs	r0, #128	; 0x80
 8005bda:	f7ff fe3b 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8005bde:	2100      	movs	r1, #0
 8005be0:	20d9      	movs	r0, #217	; 0xd9
 8005be2:	f7ff fe37 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8005be6:	2100      	movs	r1, #0
 8005be8:	20f1      	movs	r0, #241	; 0xf1
 8005bea:	f7ff fe33 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8005bee:	2100      	movs	r1, #0
 8005bf0:	20da      	movs	r0, #218	; 0xda
 8005bf2:	f7ff fe2f 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	2012      	movs	r0, #18
 8005bfa:	f7ff fe2b 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8005bfe:	2100      	movs	r1, #0
 8005c00:	20db      	movs	r0, #219	; 0xdb
 8005c02:	f7ff fe27 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //Set VCOM Deselect Level
 8005c06:	2100      	movs	r1, #0
 8005c08:	2040      	movs	r0, #64	; 0x40
 8005c0a:	f7ff fe23 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8005c0e:	2100      	movs	r1, #0
 8005c10:	2020      	movs	r0, #32
 8005c12:	f7ff fe1f 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8005c16:	2100      	movs	r1, #0
 8005c18:	2002      	movs	r0, #2
 8005c1a:	f7ff fe1b 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8005c1e:	2100      	movs	r1, #0
 8005c20:	208d      	movs	r0, #141	; 0x8d
 8005c22:	f7ff fe17 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8005c26:	2100      	movs	r1, #0
 8005c28:	2014      	movs	r0, #20
 8005c2a:	f7ff fe13 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8005c2e:	2100      	movs	r1, #0
 8005c30:	20a4      	movs	r0, #164	; 0xa4
 8005c32:	f7ff fe0f 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8005c36:	2100      	movs	r1, #0
 8005c38:	20a6      	movs	r0, #166	; 0xa6
 8005c3a:	f7ff fe0b 	bl	8005854 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); //--turn on oled panel
 8005c3e:	2100      	movs	r1, #0
 8005c40:	20af      	movs	r0, #175	; 0xaf
 8005c42:	f7ff fe07 	bl	8005854 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
 8005c46:	2100      	movs	r1, #0
 8005c48:	20af      	movs	r0, #175	; 0xaf
 8005c4a:	f7ff fe03 	bl	8005854 <OLED_WR_Byte>
	OLED_Clear();
 8005c4e:	f7ff fe75 	bl	800593c <OLED_Clear>
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40011000 	.word	0x40011000

08005c5c <PID_Init>:
PID_TypeDef  PID_V;

PID_TypeDef  MPPT_V;

void PID_Init(void)    //PID参数初始化
  {
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0

		PID_V.Kp = 20.0;     //5.5
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <PID_Init+0x4c>)
 8005c62:	4a12      	ldr	r2, [pc, #72]	; (8005cac <PID_Init+0x50>)
 8005c64:	601a      	str	r2, [r3, #0]
		PID_V.Ki = 0.1;  //0.05
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <PID_Init+0x4c>)
 8005c68:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <PID_Init+0x54>)
 8005c6a:	605a      	str	r2, [r3, #4]
		PID_V.Kd = 0;     //0
 8005c6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <PID_Init+0x4c>)
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	609a      	str	r2, [r3, #8]
		PID_V.Result_min = -100;
 8005c74:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <PID_Init+0x4c>)
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <PID_Init+0x58>)
 8005c78:	621a      	str	r2, [r3, #32]
		PID_V.Result_max = 100;
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <PID_Init+0x4c>)
 8005c7c:	4a0e      	ldr	r2, [pc, #56]	; (8005cb8 <PID_Init+0x5c>)
 8005c7e:	61da      	str	r2, [r3, #28]


		MPPT_V.Kp = 10.0;     //5.5
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <PID_Init+0x60>)
 8005c82:	4a0f      	ldr	r2, [pc, #60]	; (8005cc0 <PID_Init+0x64>)
 8005c84:	601a      	str	r2, [r3, #0]
		MPPT_V.Ki = 0.1;  //0.05
 8005c86:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <PID_Init+0x60>)
 8005c88:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <PID_Init+0x54>)
 8005c8a:	605a      	str	r2, [r3, #4]
		MPPT_V.Kd = 0;     //0
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <PID_Init+0x60>)
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	609a      	str	r2, [r3, #8]
		MPPT_V.Result_min = -50;
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <PID_Init+0x60>)
 8005c96:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <PID_Init+0x68>)
 8005c98:	621a      	str	r2, [r3, #32]
		MPPT_V.Result_max = 50;
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <PID_Init+0x60>)
 8005c9c:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <PID_Init+0x6c>)
 8005c9e:	61da      	str	r2, [r3, #28]

}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	200003c0 	.word	0x200003c0
 8005cac:	41a00000 	.word	0x41a00000
 8005cb0:	3dcccccd 	.word	0x3dcccccd
 8005cb4:	c2c80000 	.word	0xc2c80000
 8005cb8:	42c80000 	.word	0x42c80000
 8005cbc:	200003e4 	.word	0x200003e4
 8005cc0:	41200000 	.word	0x41200000
 8005cc4:	c2480000 	.word	0xc2480000
 8005cc8:	42480000 	.word	0x42480000

08005ccc <Incremental_PID>:
e(k-1)代表上一次的偏差  以此类推
Result代表增量输出
Dac+=Kp[e（k）-e(k-1)]+Ki*e(k)
**************************************************************************/
float Incremental_PID(PID_TypeDef *PID,float Measured,float Target)
{
 8005ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
	 PID->Bias = Target - Measured;                                                          //计算偏差
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fb f867 	bl	8000db0 <__aeabi_fsub>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	60da      	str	r2, [r3, #12]
	 PID->Result += PID->Kp * (PID->Bias - PID->Now_bias)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699c      	ldr	r4, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681d      	ldr	r5, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f7fb f857 	bl	8000db0 <__aeabi_fsub>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4619      	mov	r1, r3
 8005d06:	4628      	mov	r0, r5
 8005d08:	f7fa fa96 	bl	8000238 <__aeabi_fmul>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	461d      	mov	r5, r3
	 + PID->Ki * PID->Bias + PID->Kd * (PID->Bias - 2 * PID->Now_bias + PID->Previous_bias);  //增量式PID控制器
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f7fa fa8c 	bl	8000238 <__aeabi_fmul>
 8005d20:	4603      	mov	r3, r0
 8005d22:	4619      	mov	r1, r3
 8005d24:	4628      	mov	r0, r5
 8005d26:	f7fb f845 	bl	8000db4 <__addsf3>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4698      	mov	r8, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689d      	ldr	r5, [r3, #8]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68de      	ldr	r6, [r3, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fb f839 	bl	8000db4 <__addsf3>
 8005d42:	4603      	mov	r3, r0
 8005d44:	4619      	mov	r1, r3
 8005d46:	4630      	mov	r0, r6
 8005d48:	f7fb f832 	bl	8000db0 <__aeabi_fsub>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fb f82c 	bl	8000db4 <__addsf3>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7fa fa69 	bl	8000238 <__aeabi_fmul>
 8005d66:	4603      	mov	r3, r0
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f7fb f822 	bl	8000db4 <__addsf3>
 8005d70:	4603      	mov	r3, r0
	 PID->Result += PID->Kp * (PID->Bias - PID->Now_bias)
 8005d72:	4619      	mov	r1, r3
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7fb f81d 	bl	8000db4 <__addsf3>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	619a      	str	r2, [r3, #24]
	 PID->Previous_bias=PID->Now_bias;                                                       //保存上次偏差
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	615a      	str	r2, [r3, #20]
	 PID->Now_bias=PID->Bias;	                                                               //保存本次偏差
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	611a      	str	r2, [r3, #16]
	 if( PID->Result> PID->Result_max)       PID->Result= PID->Result_max;                   //输出限幅
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7fb f97d 	bl	800109c <__aeabi_fcmpgt>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <Incremental_PID+0xe6>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	619a      	str	r2, [r3, #24]
 8005db0:	e00e      	b.n	8005dd0 <Incremental_PID+0x104>
	 else if( PID->Result< PID->Result_min)  PID->Result = PID->Result_min;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f7fb f94f 	bl	8001060 <__aeabi_fcmplt>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <Incremental_PID+0x104>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	619a      	str	r2, [r3, #24]
	 return PID->Result;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	; (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000018 	.word	0x20000018

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	2600      	movs	r6, #0
 8005df0:	4d0c      	ldr	r5, [pc, #48]	; (8005e24 <__libc_init_array+0x38>)
 8005df2:	4c0d      	ldr	r4, [pc, #52]	; (8005e28 <__libc_init_array+0x3c>)
 8005df4:	1b64      	subs	r4, r4, r5
 8005df6:	10a4      	asrs	r4, r4, #2
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	f002 fda4 	bl	8008948 <_init>
 8005e00:	2600      	movs	r6, #0
 8005e02:	4d0a      	ldr	r5, [pc, #40]	; (8005e2c <__libc_init_array+0x40>)
 8005e04:	4c0a      	ldr	r4, [pc, #40]	; (8005e30 <__libc_init_array+0x44>)
 8005e06:	1b64      	subs	r4, r4, r5
 8005e08:	10a4      	asrs	r4, r4, #2
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	080093c4 	.word	0x080093c4
 8005e28:	080093c4 	.word	0x080093c4
 8005e2c:	080093c4 	.word	0x080093c4
 8005e30:	080093c8 	.word	0x080093c8

08005e34 <memcpy>:
 8005e34:	440a      	add	r2, r1
 8005e36:	4291      	cmp	r1, r2
 8005e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e3c:	d100      	bne.n	8005e40 <memcpy+0xc>
 8005e3e:	4770      	bx	lr
 8005e40:	b510      	push	{r4, lr}
 8005e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e46:	4291      	cmp	r1, r2
 8005e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e4c:	d1f9      	bne.n	8005e42 <memcpy+0xe>
 8005e4e:	bd10      	pop	{r4, pc}

08005e50 <memset>:
 8005e50:	4603      	mov	r3, r0
 8005e52:	4402      	add	r2, r0
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d100      	bne.n	8005e5a <memset+0xa>
 8005e58:	4770      	bx	lr
 8005e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5e:	e7f9      	b.n	8005e54 <memset+0x4>

08005e60 <__cvt>:
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e66:	461f      	mov	r7, r3
 8005e68:	bfbb      	ittet	lt
 8005e6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e6e:	461f      	movlt	r7, r3
 8005e70:	2300      	movge	r3, #0
 8005e72:	232d      	movlt	r3, #45	; 0x2d
 8005e74:	b088      	sub	sp, #32
 8005e76:	4614      	mov	r4, r2
 8005e78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e7c:	7013      	strb	r3, [r2, #0]
 8005e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e84:	f023 0820 	bic.w	r8, r3, #32
 8005e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e8c:	d005      	beq.n	8005e9a <__cvt+0x3a>
 8005e8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e92:	d100      	bne.n	8005e96 <__cvt+0x36>
 8005e94:	3501      	adds	r5, #1
 8005e96:	2302      	movs	r3, #2
 8005e98:	e000      	b.n	8005e9c <__cvt+0x3c>
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	aa07      	add	r2, sp, #28
 8005e9e:	9204      	str	r2, [sp, #16]
 8005ea0:	aa06      	add	r2, sp, #24
 8005ea2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ea6:	e9cd 3500 	strd	r3, r5, [sp]
 8005eaa:	4622      	mov	r2, r4
 8005eac:	463b      	mov	r3, r7
 8005eae:	f000 fdfb 	bl	8006aa8 <_dtoa_r>
 8005eb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	d102      	bne.n	8005ec0 <__cvt+0x60>
 8005eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ebc:	07db      	lsls	r3, r3, #31
 8005ebe:	d522      	bpl.n	8005f06 <__cvt+0xa6>
 8005ec0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ec4:	eb06 0905 	add.w	r9, r6, r5
 8005ec8:	d110      	bne.n	8005eec <__cvt+0x8c>
 8005eca:	7833      	ldrb	r3, [r6, #0]
 8005ecc:	2b30      	cmp	r3, #48	; 0x30
 8005ece:	d10a      	bne.n	8005ee6 <__cvt+0x86>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	f7fa fe86 	bl	8000be8 <__aeabi_dcmpeq>
 8005edc:	b918      	cbnz	r0, 8005ee6 <__cvt+0x86>
 8005ede:	f1c5 0501 	rsb	r5, r5, #1
 8005ee2:	f8ca 5000 	str.w	r5, [sl]
 8005ee6:	f8da 3000 	ldr.w	r3, [sl]
 8005eea:	4499      	add	r9, r3
 8005eec:	2200      	movs	r2, #0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa fe78 	bl	8000be8 <__aeabi_dcmpeq>
 8005ef8:	b108      	cbz	r0, 8005efe <__cvt+0x9e>
 8005efa:	f8cd 901c 	str.w	r9, [sp, #28]
 8005efe:	2230      	movs	r2, #48	; 0x30
 8005f00:	9b07      	ldr	r3, [sp, #28]
 8005f02:	454b      	cmp	r3, r9
 8005f04:	d307      	bcc.n	8005f16 <__cvt+0xb6>
 8005f06:	4630      	mov	r0, r6
 8005f08:	9b07      	ldr	r3, [sp, #28]
 8005f0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f0c:	1b9b      	subs	r3, r3, r6
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	b008      	add	sp, #32
 8005f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f16:	1c59      	adds	r1, r3, #1
 8005f18:	9107      	str	r1, [sp, #28]
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	e7f0      	b.n	8005f00 <__cvt+0xa0>

08005f1e <__exponent>:
 8005f1e:	4603      	mov	r3, r0
 8005f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f22:	2900      	cmp	r1, #0
 8005f24:	f803 2b02 	strb.w	r2, [r3], #2
 8005f28:	bfb6      	itet	lt
 8005f2a:	222d      	movlt	r2, #45	; 0x2d
 8005f2c:	222b      	movge	r2, #43	; 0x2b
 8005f2e:	4249      	neglt	r1, r1
 8005f30:	2909      	cmp	r1, #9
 8005f32:	7042      	strb	r2, [r0, #1]
 8005f34:	dd2b      	ble.n	8005f8e <__exponent+0x70>
 8005f36:	f10d 0407 	add.w	r4, sp, #7
 8005f3a:	46a4      	mov	ip, r4
 8005f3c:	270a      	movs	r7, #10
 8005f3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f42:	460a      	mov	r2, r1
 8005f44:	46a6      	mov	lr, r4
 8005f46:	fb07 1516 	mls	r5, r7, r6, r1
 8005f4a:	2a63      	cmp	r2, #99	; 0x63
 8005f4c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005f50:	4631      	mov	r1, r6
 8005f52:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f5a:	dcf0      	bgt.n	8005f3e <__exponent+0x20>
 8005f5c:	3130      	adds	r1, #48	; 0x30
 8005f5e:	f1ae 0502 	sub.w	r5, lr, #2
 8005f62:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f66:	4629      	mov	r1, r5
 8005f68:	1c44      	adds	r4, r0, #1
 8005f6a:	4561      	cmp	r1, ip
 8005f6c:	d30a      	bcc.n	8005f84 <__exponent+0x66>
 8005f6e:	f10d 0209 	add.w	r2, sp, #9
 8005f72:	eba2 020e 	sub.w	r2, r2, lr
 8005f76:	4565      	cmp	r5, ip
 8005f78:	bf88      	it	hi
 8005f7a:	2200      	movhi	r2, #0
 8005f7c:	4413      	add	r3, r2
 8005f7e:	1a18      	subs	r0, r3, r0
 8005f80:	b003      	add	sp, #12
 8005f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f88:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f8c:	e7ed      	b.n	8005f6a <__exponent+0x4c>
 8005f8e:	2330      	movs	r3, #48	; 0x30
 8005f90:	3130      	adds	r1, #48	; 0x30
 8005f92:	7083      	strb	r3, [r0, #2]
 8005f94:	70c1      	strb	r1, [r0, #3]
 8005f96:	1d03      	adds	r3, r0, #4
 8005f98:	e7f1      	b.n	8005f7e <__exponent+0x60>
	...

08005f9c <_printf_float>:
 8005f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa0:	b091      	sub	sp, #68	; 0x44
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005fa8:	4616      	mov	r6, r2
 8005faa:	461f      	mov	r7, r3
 8005fac:	4605      	mov	r5, r0
 8005fae:	f001 fd1d 	bl	80079ec <_localeconv_r>
 8005fb2:	6803      	ldr	r3, [r0, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb8:	f7fa f936 	bl	8000228 <strlen>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8005fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc4:	900a      	str	r0, [sp, #40]	; 0x28
 8005fc6:	3307      	adds	r3, #7
 8005fc8:	f023 0307 	bic.w	r3, r3, #7
 8005fcc:	f103 0208 	add.w	r2, r3, #8
 8005fd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005fd4:	f8d4 b000 	ldr.w	fp, [r4]
 8005fd8:	f8c8 2000 	str.w	r2, [r8]
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fe4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005fe8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005fec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	4b9c      	ldr	r3, [pc, #624]	; (8006268 <_printf_float+0x2cc>)
 8005ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ff8:	f7fa fe28 	bl	8000c4c <__aeabi_dcmpun>
 8005ffc:	bb70      	cbnz	r0, 800605c <_printf_float+0xc0>
 8005ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8006002:	4640      	mov	r0, r8
 8006004:	4b98      	ldr	r3, [pc, #608]	; (8006268 <_printf_float+0x2cc>)
 8006006:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006008:	f7fa fe02 	bl	8000c10 <__aeabi_dcmple>
 800600c:	bb30      	cbnz	r0, 800605c <_printf_float+0xc0>
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	4640      	mov	r0, r8
 8006014:	4651      	mov	r1, sl
 8006016:	f7fa fdf1 	bl	8000bfc <__aeabi_dcmplt>
 800601a:	b110      	cbz	r0, 8006022 <_printf_float+0x86>
 800601c:	232d      	movs	r3, #45	; 0x2d
 800601e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006022:	4b92      	ldr	r3, [pc, #584]	; (800626c <_printf_float+0x2d0>)
 8006024:	4892      	ldr	r0, [pc, #584]	; (8006270 <_printf_float+0x2d4>)
 8006026:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800602a:	bf94      	ite	ls
 800602c:	4698      	movls	r8, r3
 800602e:	4680      	movhi	r8, r0
 8006030:	2303      	movs	r3, #3
 8006032:	f04f 0a00 	mov.w	sl, #0
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	f02b 0304 	bic.w	r3, fp, #4
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	4633      	mov	r3, r6
 8006040:	4621      	mov	r1, r4
 8006042:	4628      	mov	r0, r5
 8006044:	9700      	str	r7, [sp, #0]
 8006046:	aa0f      	add	r2, sp, #60	; 0x3c
 8006048:	f000 f9d4 	bl	80063f4 <_printf_common>
 800604c:	3001      	adds	r0, #1
 800604e:	f040 8090 	bne.w	8006172 <_printf_float+0x1d6>
 8006052:	f04f 30ff 	mov.w	r0, #4294967295
 8006056:	b011      	add	sp, #68	; 0x44
 8006058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605c:	4642      	mov	r2, r8
 800605e:	4653      	mov	r3, sl
 8006060:	4640      	mov	r0, r8
 8006062:	4651      	mov	r1, sl
 8006064:	f7fa fdf2 	bl	8000c4c <__aeabi_dcmpun>
 8006068:	b148      	cbz	r0, 800607e <_printf_float+0xe2>
 800606a:	f1ba 0f00 	cmp.w	sl, #0
 800606e:	bfb8      	it	lt
 8006070:	232d      	movlt	r3, #45	; 0x2d
 8006072:	4880      	ldr	r0, [pc, #512]	; (8006274 <_printf_float+0x2d8>)
 8006074:	bfb8      	it	lt
 8006076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800607a:	4b7f      	ldr	r3, [pc, #508]	; (8006278 <_printf_float+0x2dc>)
 800607c:	e7d3      	b.n	8006026 <_printf_float+0x8a>
 800607e:	6863      	ldr	r3, [r4, #4]
 8006080:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	d142      	bne.n	800610e <_printf_float+0x172>
 8006088:	2306      	movs	r3, #6
 800608a:	6063      	str	r3, [r4, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	9206      	str	r2, [sp, #24]
 8006090:	aa0e      	add	r2, sp, #56	; 0x38
 8006092:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006096:	aa0d      	add	r2, sp, #52	; 0x34
 8006098:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800609c:	9203      	str	r2, [sp, #12]
 800609e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80060a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	4642      	mov	r2, r8
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4628      	mov	r0, r5
 80060b0:	4653      	mov	r3, sl
 80060b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80060b4:	f7ff fed4 	bl	8005e60 <__cvt>
 80060b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ba:	4680      	mov	r8, r0
 80060bc:	2947      	cmp	r1, #71	; 0x47
 80060be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060c0:	d108      	bne.n	80060d4 <_printf_float+0x138>
 80060c2:	1cc8      	adds	r0, r1, #3
 80060c4:	db02      	blt.n	80060cc <_printf_float+0x130>
 80060c6:	6863      	ldr	r3, [r4, #4]
 80060c8:	4299      	cmp	r1, r3
 80060ca:	dd40      	ble.n	800614e <_printf_float+0x1b2>
 80060cc:	f1a9 0902 	sub.w	r9, r9, #2
 80060d0:	fa5f f989 	uxtb.w	r9, r9
 80060d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80060d8:	d81f      	bhi.n	800611a <_printf_float+0x17e>
 80060da:	464a      	mov	r2, r9
 80060dc:	3901      	subs	r1, #1
 80060de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060e2:	910d      	str	r1, [sp, #52]	; 0x34
 80060e4:	f7ff ff1b 	bl	8005f1e <__exponent>
 80060e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ea:	4682      	mov	sl, r0
 80060ec:	1813      	adds	r3, r2, r0
 80060ee:	2a01      	cmp	r2, #1
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	dc02      	bgt.n	80060fa <_printf_float+0x15e>
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	07d2      	lsls	r2, r2, #31
 80060f8:	d501      	bpl.n	80060fe <_printf_float+0x162>
 80060fa:	3301      	adds	r3, #1
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006102:	2b00      	cmp	r3, #0
 8006104:	d09b      	beq.n	800603e <_printf_float+0xa2>
 8006106:	232d      	movs	r3, #45	; 0x2d
 8006108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800610c:	e797      	b.n	800603e <_printf_float+0xa2>
 800610e:	2947      	cmp	r1, #71	; 0x47
 8006110:	d1bc      	bne.n	800608c <_printf_float+0xf0>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1ba      	bne.n	800608c <_printf_float+0xf0>
 8006116:	2301      	movs	r3, #1
 8006118:	e7b7      	b.n	800608a <_printf_float+0xee>
 800611a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800611e:	d118      	bne.n	8006152 <_printf_float+0x1b6>
 8006120:	2900      	cmp	r1, #0
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	dd0b      	ble.n	800613e <_printf_float+0x1a2>
 8006126:	6121      	str	r1, [r4, #16]
 8006128:	b913      	cbnz	r3, 8006130 <_printf_float+0x194>
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	07d0      	lsls	r0, r2, #31
 800612e:	d502      	bpl.n	8006136 <_printf_float+0x19a>
 8006130:	3301      	adds	r3, #1
 8006132:	440b      	add	r3, r1
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	f04f 0a00 	mov.w	sl, #0
 800613a:	65a1      	str	r1, [r4, #88]	; 0x58
 800613c:	e7df      	b.n	80060fe <_printf_float+0x162>
 800613e:	b913      	cbnz	r3, 8006146 <_printf_float+0x1aa>
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	07d2      	lsls	r2, r2, #31
 8006144:	d501      	bpl.n	800614a <_printf_float+0x1ae>
 8006146:	3302      	adds	r3, #2
 8006148:	e7f4      	b.n	8006134 <_printf_float+0x198>
 800614a:	2301      	movs	r3, #1
 800614c:	e7f2      	b.n	8006134 <_printf_float+0x198>
 800614e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006154:	4299      	cmp	r1, r3
 8006156:	db05      	blt.n	8006164 <_printf_float+0x1c8>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	6121      	str	r1, [r4, #16]
 800615c:	07d8      	lsls	r0, r3, #31
 800615e:	d5ea      	bpl.n	8006136 <_printf_float+0x19a>
 8006160:	1c4b      	adds	r3, r1, #1
 8006162:	e7e7      	b.n	8006134 <_printf_float+0x198>
 8006164:	2900      	cmp	r1, #0
 8006166:	bfcc      	ite	gt
 8006168:	2201      	movgt	r2, #1
 800616a:	f1c1 0202 	rsble	r2, r1, #2
 800616e:	4413      	add	r3, r2
 8006170:	e7e0      	b.n	8006134 <_printf_float+0x198>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	055a      	lsls	r2, r3, #21
 8006176:	d407      	bmi.n	8006188 <_printf_float+0x1ec>
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	4642      	mov	r2, r8
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	d12b      	bne.n	80061de <_printf_float+0x242>
 8006186:	e764      	b.n	8006052 <_printf_float+0xb6>
 8006188:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800618c:	f240 80dd 	bls.w	800634a <_printf_float+0x3ae>
 8006190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006194:	2200      	movs	r2, #0
 8006196:	2300      	movs	r3, #0
 8006198:	f7fa fd26 	bl	8000be8 <__aeabi_dcmpeq>
 800619c:	2800      	cmp	r0, #0
 800619e:	d033      	beq.n	8006208 <_printf_float+0x26c>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	4a35      	ldr	r2, [pc, #212]	; (800627c <_printf_float+0x2e0>)
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f af51 	beq.w	8006052 <_printf_float+0xb6>
 80061b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061b4:	429a      	cmp	r2, r3
 80061b6:	db02      	blt.n	80061be <_printf_float+0x222>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	07d8      	lsls	r0, r3, #31
 80061bc:	d50f      	bpl.n	80061de <_printf_float+0x242>
 80061be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f af42 	beq.w	8006052 <_printf_float+0xb6>
 80061ce:	f04f 0800 	mov.w	r8, #0
 80061d2:	f104 091a 	add.w	r9, r4, #26
 80061d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061d8:	3b01      	subs	r3, #1
 80061da:	4543      	cmp	r3, r8
 80061dc:	dc09      	bgt.n	80061f2 <_printf_float+0x256>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	079b      	lsls	r3, r3, #30
 80061e2:	f100 8102 	bmi.w	80063ea <_printf_float+0x44e>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061ea:	4298      	cmp	r0, r3
 80061ec:	bfb8      	it	lt
 80061ee:	4618      	movlt	r0, r3
 80061f0:	e731      	b.n	8006056 <_printf_float+0xba>
 80061f2:	2301      	movs	r3, #1
 80061f4:	464a      	mov	r2, r9
 80061f6:	4631      	mov	r1, r6
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b8      	blx	r7
 80061fc:	3001      	adds	r0, #1
 80061fe:	f43f af28 	beq.w	8006052 <_printf_float+0xb6>
 8006202:	f108 0801 	add.w	r8, r8, #1
 8006206:	e7e6      	b.n	80061d6 <_printf_float+0x23a>
 8006208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc38      	bgt.n	8006280 <_printf_float+0x2e4>
 800620e:	2301      	movs	r3, #1
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	4a19      	ldr	r2, [pc, #100]	; (800627c <_printf_float+0x2e0>)
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f af1a 	beq.w	8006052 <_printf_float+0xb6>
 800621e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006222:	4313      	orrs	r3, r2
 8006224:	d102      	bne.n	800622c <_printf_float+0x290>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	07d9      	lsls	r1, r3, #31
 800622a:	d5d8      	bpl.n	80061de <_printf_float+0x242>
 800622c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f af0b 	beq.w	8006052 <_printf_float+0xb6>
 800623c:	f04f 0900 	mov.w	r9, #0
 8006240:	f104 0a1a 	add.w	sl, r4, #26
 8006244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006246:	425b      	negs	r3, r3
 8006248:	454b      	cmp	r3, r9
 800624a:	dc01      	bgt.n	8006250 <_printf_float+0x2b4>
 800624c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800624e:	e794      	b.n	800617a <_printf_float+0x1de>
 8006250:	2301      	movs	r3, #1
 8006252:	4652      	mov	r2, sl
 8006254:	4631      	mov	r1, r6
 8006256:	4628      	mov	r0, r5
 8006258:	47b8      	blx	r7
 800625a:	3001      	adds	r0, #1
 800625c:	f43f aef9 	beq.w	8006052 <_printf_float+0xb6>
 8006260:	f109 0901 	add.w	r9, r9, #1
 8006264:	e7ee      	b.n	8006244 <_printf_float+0x2a8>
 8006266:	bf00      	nop
 8006268:	7fefffff 	.word	0x7fefffff
 800626c:	08008fec 	.word	0x08008fec
 8006270:	08008ff0 	.word	0x08008ff0
 8006274:	08008ff8 	.word	0x08008ff8
 8006278:	08008ff4 	.word	0x08008ff4
 800627c:	08008ffc 	.word	0x08008ffc
 8006280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006284:	429a      	cmp	r2, r3
 8006286:	bfa8      	it	ge
 8006288:	461a      	movge	r2, r3
 800628a:	2a00      	cmp	r2, #0
 800628c:	4691      	mov	r9, r2
 800628e:	dc37      	bgt.n	8006300 <_printf_float+0x364>
 8006290:	f04f 0b00 	mov.w	fp, #0
 8006294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006298:	f104 021a 	add.w	r2, r4, #26
 800629c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80062a0:	ebaa 0309 	sub.w	r3, sl, r9
 80062a4:	455b      	cmp	r3, fp
 80062a6:	dc33      	bgt.n	8006310 <_printf_float+0x374>
 80062a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062ac:	429a      	cmp	r2, r3
 80062ae:	db3b      	blt.n	8006328 <_printf_float+0x38c>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	07da      	lsls	r2, r3, #31
 80062b4:	d438      	bmi.n	8006328 <_printf_float+0x38c>
 80062b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062ba:	eba3 020a 	sub.w	r2, r3, sl
 80062be:	eba3 0901 	sub.w	r9, r3, r1
 80062c2:	4591      	cmp	r9, r2
 80062c4:	bfa8      	it	ge
 80062c6:	4691      	movge	r9, r2
 80062c8:	f1b9 0f00 	cmp.w	r9, #0
 80062cc:	dc34      	bgt.n	8006338 <_printf_float+0x39c>
 80062ce:	f04f 0800 	mov.w	r8, #0
 80062d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062d6:	f104 0a1a 	add.w	sl, r4, #26
 80062da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062de:	1a9b      	subs	r3, r3, r2
 80062e0:	eba3 0309 	sub.w	r3, r3, r9
 80062e4:	4543      	cmp	r3, r8
 80062e6:	f77f af7a 	ble.w	80061de <_printf_float+0x242>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4652      	mov	r2, sl
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	f43f aeac 	beq.w	8006052 <_printf_float+0xb6>
 80062fa:	f108 0801 	add.w	r8, r8, #1
 80062fe:	e7ec      	b.n	80062da <_printf_float+0x33e>
 8006300:	4613      	mov	r3, r2
 8006302:	4631      	mov	r1, r6
 8006304:	4642      	mov	r2, r8
 8006306:	4628      	mov	r0, r5
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	d1c0      	bne.n	8006290 <_printf_float+0x2f4>
 800630e:	e6a0      	b.n	8006052 <_printf_float+0xb6>
 8006310:	2301      	movs	r3, #1
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	920b      	str	r2, [sp, #44]	; 0x2c
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	f43f ae99 	beq.w	8006052 <_printf_float+0xb6>
 8006320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006322:	f10b 0b01 	add.w	fp, fp, #1
 8006326:	e7b9      	b.n	800629c <_printf_float+0x300>
 8006328:	4631      	mov	r1, r6
 800632a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	d1bf      	bne.n	80062b6 <_printf_float+0x31a>
 8006336:	e68c      	b.n	8006052 <_printf_float+0xb6>
 8006338:	464b      	mov	r3, r9
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	eb08 020a 	add.w	r2, r8, sl
 8006342:	47b8      	blx	r7
 8006344:	3001      	adds	r0, #1
 8006346:	d1c2      	bne.n	80062ce <_printf_float+0x332>
 8006348:	e683      	b.n	8006052 <_printf_float+0xb6>
 800634a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800634c:	2a01      	cmp	r2, #1
 800634e:	dc01      	bgt.n	8006354 <_printf_float+0x3b8>
 8006350:	07db      	lsls	r3, r3, #31
 8006352:	d537      	bpl.n	80063c4 <_printf_float+0x428>
 8006354:	2301      	movs	r3, #1
 8006356:	4642      	mov	r2, r8
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	f43f ae77 	beq.w	8006052 <_printf_float+0xb6>
 8006364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f ae6f 	beq.w	8006052 <_printf_float+0xb6>
 8006374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	f7fa fc34 	bl	8000be8 <__aeabi_dcmpeq>
 8006380:	b9d8      	cbnz	r0, 80063ba <_printf_float+0x41e>
 8006382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006384:	f108 0201 	add.w	r2, r8, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	d10e      	bne.n	80063b2 <_printf_float+0x416>
 8006394:	e65d      	b.n	8006052 <_printf_float+0xb6>
 8006396:	2301      	movs	r3, #1
 8006398:	464a      	mov	r2, r9
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	f43f ae56 	beq.w	8006052 <_printf_float+0xb6>
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ac:	3b01      	subs	r3, #1
 80063ae:	4543      	cmp	r3, r8
 80063b0:	dcf1      	bgt.n	8006396 <_printf_float+0x3fa>
 80063b2:	4653      	mov	r3, sl
 80063b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063b8:	e6e0      	b.n	800617c <_printf_float+0x1e0>
 80063ba:	f04f 0800 	mov.w	r8, #0
 80063be:	f104 091a 	add.w	r9, r4, #26
 80063c2:	e7f2      	b.n	80063aa <_printf_float+0x40e>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4642      	mov	r2, r8
 80063c8:	e7df      	b.n	800638a <_printf_float+0x3ee>
 80063ca:	2301      	movs	r3, #1
 80063cc:	464a      	mov	r2, r9
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f ae3c 	beq.w	8006052 <_printf_float+0xb6>
 80063da:	f108 0801 	add.w	r8, r8, #1
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063e2:	1a5b      	subs	r3, r3, r1
 80063e4:	4543      	cmp	r3, r8
 80063e6:	dcf0      	bgt.n	80063ca <_printf_float+0x42e>
 80063e8:	e6fd      	b.n	80061e6 <_printf_float+0x24a>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	f104 0919 	add.w	r9, r4, #25
 80063f2:	e7f4      	b.n	80063de <_printf_float+0x442>

080063f4 <_printf_common>:
 80063f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	4616      	mov	r6, r2
 80063fa:	4699      	mov	r9, r3
 80063fc:	688a      	ldr	r2, [r1, #8]
 80063fe:	690b      	ldr	r3, [r1, #16]
 8006400:	4607      	mov	r7, r0
 8006402:	4293      	cmp	r3, r2
 8006404:	bfb8      	it	lt
 8006406:	4613      	movlt	r3, r2
 8006408:	6033      	str	r3, [r6, #0]
 800640a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800640e:	460c      	mov	r4, r1
 8006410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006414:	b10a      	cbz	r2, 800641a <_printf_common+0x26>
 8006416:	3301      	adds	r3, #1
 8006418:	6033      	str	r3, [r6, #0]
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	0699      	lsls	r1, r3, #26
 800641e:	bf42      	ittt	mi
 8006420:	6833      	ldrmi	r3, [r6, #0]
 8006422:	3302      	addmi	r3, #2
 8006424:	6033      	strmi	r3, [r6, #0]
 8006426:	6825      	ldr	r5, [r4, #0]
 8006428:	f015 0506 	ands.w	r5, r5, #6
 800642c:	d106      	bne.n	800643c <_printf_common+0x48>
 800642e:	f104 0a19 	add.w	sl, r4, #25
 8006432:	68e3      	ldr	r3, [r4, #12]
 8006434:	6832      	ldr	r2, [r6, #0]
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	42ab      	cmp	r3, r5
 800643a:	dc28      	bgt.n	800648e <_printf_common+0x9a>
 800643c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006440:	1e13      	subs	r3, r2, #0
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	bf18      	it	ne
 8006446:	2301      	movne	r3, #1
 8006448:	0692      	lsls	r2, r2, #26
 800644a:	d42d      	bmi.n	80064a8 <_printf_common+0xb4>
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006454:	47c0      	blx	r8
 8006456:	3001      	adds	r0, #1
 8006458:	d020      	beq.n	800649c <_printf_common+0xa8>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	68e5      	ldr	r5, [r4, #12]
 800645e:	f003 0306 	and.w	r3, r3, #6
 8006462:	2b04      	cmp	r3, #4
 8006464:	bf18      	it	ne
 8006466:	2500      	movne	r5, #0
 8006468:	6832      	ldr	r2, [r6, #0]
 800646a:	f04f 0600 	mov.w	r6, #0
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	bf08      	it	eq
 8006472:	1aad      	subeq	r5, r5, r2
 8006474:	6922      	ldr	r2, [r4, #16]
 8006476:	bf08      	it	eq
 8006478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800647c:	4293      	cmp	r3, r2
 800647e:	bfc4      	itt	gt
 8006480:	1a9b      	subgt	r3, r3, r2
 8006482:	18ed      	addgt	r5, r5, r3
 8006484:	341a      	adds	r4, #26
 8006486:	42b5      	cmp	r5, r6
 8006488:	d11a      	bne.n	80064c0 <_printf_common+0xcc>
 800648a:	2000      	movs	r0, #0
 800648c:	e008      	b.n	80064a0 <_printf_common+0xac>
 800648e:	2301      	movs	r3, #1
 8006490:	4652      	mov	r2, sl
 8006492:	4649      	mov	r1, r9
 8006494:	4638      	mov	r0, r7
 8006496:	47c0      	blx	r8
 8006498:	3001      	adds	r0, #1
 800649a:	d103      	bne.n	80064a4 <_printf_common+0xb0>
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a4:	3501      	adds	r5, #1
 80064a6:	e7c4      	b.n	8006432 <_printf_common+0x3e>
 80064a8:	2030      	movs	r0, #48	; 0x30
 80064aa:	18e1      	adds	r1, r4, r3
 80064ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b6:	4422      	add	r2, r4
 80064b8:	3302      	adds	r3, #2
 80064ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064be:	e7c5      	b.n	800644c <_printf_common+0x58>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4622      	mov	r2, r4
 80064c4:	4649      	mov	r1, r9
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c0      	blx	r8
 80064ca:	3001      	adds	r0, #1
 80064cc:	d0e6      	beq.n	800649c <_printf_common+0xa8>
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7d9      	b.n	8006486 <_printf_common+0x92>
	...

080064d4 <_printf_i>:
 80064d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	7e0f      	ldrb	r7, [r1, #24]
 80064da:	4691      	mov	r9, r2
 80064dc:	2f78      	cmp	r7, #120	; 0x78
 80064de:	4680      	mov	r8, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	469a      	mov	sl, r3
 80064e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ea:	d807      	bhi.n	80064fc <_printf_i+0x28>
 80064ec:	2f62      	cmp	r7, #98	; 0x62
 80064ee:	d80a      	bhi.n	8006506 <_printf_i+0x32>
 80064f0:	2f00      	cmp	r7, #0
 80064f2:	f000 80d9 	beq.w	80066a8 <_printf_i+0x1d4>
 80064f6:	2f58      	cmp	r7, #88	; 0x58
 80064f8:	f000 80a4 	beq.w	8006644 <_printf_i+0x170>
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006504:	e03a      	b.n	800657c <_printf_i+0xa8>
 8006506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800650a:	2b15      	cmp	r3, #21
 800650c:	d8f6      	bhi.n	80064fc <_printf_i+0x28>
 800650e:	a101      	add	r1, pc, #4	; (adr r1, 8006514 <_printf_i+0x40>)
 8006510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006514:	0800656d 	.word	0x0800656d
 8006518:	08006581 	.word	0x08006581
 800651c:	080064fd 	.word	0x080064fd
 8006520:	080064fd 	.word	0x080064fd
 8006524:	080064fd 	.word	0x080064fd
 8006528:	080064fd 	.word	0x080064fd
 800652c:	08006581 	.word	0x08006581
 8006530:	080064fd 	.word	0x080064fd
 8006534:	080064fd 	.word	0x080064fd
 8006538:	080064fd 	.word	0x080064fd
 800653c:	080064fd 	.word	0x080064fd
 8006540:	0800668f 	.word	0x0800668f
 8006544:	080065b1 	.word	0x080065b1
 8006548:	08006671 	.word	0x08006671
 800654c:	080064fd 	.word	0x080064fd
 8006550:	080064fd 	.word	0x080064fd
 8006554:	080066b1 	.word	0x080066b1
 8006558:	080064fd 	.word	0x080064fd
 800655c:	080065b1 	.word	0x080065b1
 8006560:	080064fd 	.word	0x080064fd
 8006564:	080064fd 	.word	0x080064fd
 8006568:	08006679 	.word	0x08006679
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	602a      	str	r2, [r5, #0]
 8006574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800657c:	2301      	movs	r3, #1
 800657e:	e0a4      	b.n	80066ca <_printf_i+0x1f6>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	6829      	ldr	r1, [r5, #0]
 8006584:	0606      	lsls	r6, r0, #24
 8006586:	f101 0304 	add.w	r3, r1, #4
 800658a:	d50a      	bpl.n	80065a2 <_printf_i+0xce>
 800658c:	680e      	ldr	r6, [r1, #0]
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	2e00      	cmp	r6, #0
 8006592:	da03      	bge.n	800659c <_printf_i+0xc8>
 8006594:	232d      	movs	r3, #45	; 0x2d
 8006596:	4276      	negs	r6, r6
 8006598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659c:	230a      	movs	r3, #10
 800659e:	485e      	ldr	r0, [pc, #376]	; (8006718 <_printf_i+0x244>)
 80065a0:	e019      	b.n	80065d6 <_printf_i+0x102>
 80065a2:	680e      	ldr	r6, [r1, #0]
 80065a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	bf18      	it	ne
 80065ac:	b236      	sxthne	r6, r6
 80065ae:	e7ef      	b.n	8006590 <_printf_i+0xbc>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	1d19      	adds	r1, r3, #4
 80065b6:	6029      	str	r1, [r5, #0]
 80065b8:	0601      	lsls	r1, r0, #24
 80065ba:	d501      	bpl.n	80065c0 <_printf_i+0xec>
 80065bc:	681e      	ldr	r6, [r3, #0]
 80065be:	e002      	b.n	80065c6 <_printf_i+0xf2>
 80065c0:	0646      	lsls	r6, r0, #25
 80065c2:	d5fb      	bpl.n	80065bc <_printf_i+0xe8>
 80065c4:	881e      	ldrh	r6, [r3, #0]
 80065c6:	2f6f      	cmp	r7, #111	; 0x6f
 80065c8:	bf0c      	ite	eq
 80065ca:	2308      	moveq	r3, #8
 80065cc:	230a      	movne	r3, #10
 80065ce:	4852      	ldr	r0, [pc, #328]	; (8006718 <_printf_i+0x244>)
 80065d0:	2100      	movs	r1, #0
 80065d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065d6:	6865      	ldr	r5, [r4, #4]
 80065d8:	2d00      	cmp	r5, #0
 80065da:	bfa8      	it	ge
 80065dc:	6821      	ldrge	r1, [r4, #0]
 80065de:	60a5      	str	r5, [r4, #8]
 80065e0:	bfa4      	itt	ge
 80065e2:	f021 0104 	bicge.w	r1, r1, #4
 80065e6:	6021      	strge	r1, [r4, #0]
 80065e8:	b90e      	cbnz	r6, 80065ee <_printf_i+0x11a>
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	d04d      	beq.n	800668a <_printf_i+0x1b6>
 80065ee:	4615      	mov	r5, r2
 80065f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80065f4:	fb03 6711 	mls	r7, r3, r1, r6
 80065f8:	5dc7      	ldrb	r7, [r0, r7]
 80065fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065fe:	4637      	mov	r7, r6
 8006600:	42bb      	cmp	r3, r7
 8006602:	460e      	mov	r6, r1
 8006604:	d9f4      	bls.n	80065f0 <_printf_i+0x11c>
 8006606:	2b08      	cmp	r3, #8
 8006608:	d10b      	bne.n	8006622 <_printf_i+0x14e>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	07de      	lsls	r6, r3, #31
 800660e:	d508      	bpl.n	8006622 <_printf_i+0x14e>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	6861      	ldr	r1, [r4, #4]
 8006614:	4299      	cmp	r1, r3
 8006616:	bfde      	ittt	le
 8006618:	2330      	movle	r3, #48	; 0x30
 800661a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800661e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006622:	1b52      	subs	r2, r2, r5
 8006624:	6122      	str	r2, [r4, #16]
 8006626:	464b      	mov	r3, r9
 8006628:	4621      	mov	r1, r4
 800662a:	4640      	mov	r0, r8
 800662c:	f8cd a000 	str.w	sl, [sp]
 8006630:	aa03      	add	r2, sp, #12
 8006632:	f7ff fedf 	bl	80063f4 <_printf_common>
 8006636:	3001      	adds	r0, #1
 8006638:	d14c      	bne.n	80066d4 <_printf_i+0x200>
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	b004      	add	sp, #16
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	4834      	ldr	r0, [pc, #208]	; (8006718 <_printf_i+0x244>)
 8006646:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800664a:	6829      	ldr	r1, [r5, #0]
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006652:	6029      	str	r1, [r5, #0]
 8006654:	061d      	lsls	r5, r3, #24
 8006656:	d514      	bpl.n	8006682 <_printf_i+0x1ae>
 8006658:	07df      	lsls	r7, r3, #31
 800665a:	bf44      	itt	mi
 800665c:	f043 0320 	orrmi.w	r3, r3, #32
 8006660:	6023      	strmi	r3, [r4, #0]
 8006662:	b91e      	cbnz	r6, 800666c <_printf_i+0x198>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	f023 0320 	bic.w	r3, r3, #32
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	2310      	movs	r3, #16
 800666e:	e7af      	b.n	80065d0 <_printf_i+0xfc>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	f043 0320 	orr.w	r3, r3, #32
 8006676:	6023      	str	r3, [r4, #0]
 8006678:	2378      	movs	r3, #120	; 0x78
 800667a:	4828      	ldr	r0, [pc, #160]	; (800671c <_printf_i+0x248>)
 800667c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006680:	e7e3      	b.n	800664a <_printf_i+0x176>
 8006682:	0659      	lsls	r1, r3, #25
 8006684:	bf48      	it	mi
 8006686:	b2b6      	uxthmi	r6, r6
 8006688:	e7e6      	b.n	8006658 <_printf_i+0x184>
 800668a:	4615      	mov	r5, r2
 800668c:	e7bb      	b.n	8006606 <_printf_i+0x132>
 800668e:	682b      	ldr	r3, [r5, #0]
 8006690:	6826      	ldr	r6, [r4, #0]
 8006692:	1d18      	adds	r0, r3, #4
 8006694:	6961      	ldr	r1, [r4, #20]
 8006696:	6028      	str	r0, [r5, #0]
 8006698:	0635      	lsls	r5, r6, #24
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	d501      	bpl.n	80066a2 <_printf_i+0x1ce>
 800669e:	6019      	str	r1, [r3, #0]
 80066a0:	e002      	b.n	80066a8 <_printf_i+0x1d4>
 80066a2:	0670      	lsls	r0, r6, #25
 80066a4:	d5fb      	bpl.n	800669e <_printf_i+0x1ca>
 80066a6:	8019      	strh	r1, [r3, #0]
 80066a8:	2300      	movs	r3, #0
 80066aa:	4615      	mov	r5, r2
 80066ac:	6123      	str	r3, [r4, #16]
 80066ae:	e7ba      	b.n	8006626 <_printf_i+0x152>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	2100      	movs	r1, #0
 80066b4:	1d1a      	adds	r2, r3, #4
 80066b6:	602a      	str	r2, [r5, #0]
 80066b8:	681d      	ldr	r5, [r3, #0]
 80066ba:	6862      	ldr	r2, [r4, #4]
 80066bc:	4628      	mov	r0, r5
 80066be:	f001 fa09 	bl	8007ad4 <memchr>
 80066c2:	b108      	cbz	r0, 80066c8 <_printf_i+0x1f4>
 80066c4:	1b40      	subs	r0, r0, r5
 80066c6:	6060      	str	r0, [r4, #4]
 80066c8:	6863      	ldr	r3, [r4, #4]
 80066ca:	6123      	str	r3, [r4, #16]
 80066cc:	2300      	movs	r3, #0
 80066ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d2:	e7a8      	b.n	8006626 <_printf_i+0x152>
 80066d4:	462a      	mov	r2, r5
 80066d6:	4649      	mov	r1, r9
 80066d8:	4640      	mov	r0, r8
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	47d0      	blx	sl
 80066de:	3001      	adds	r0, #1
 80066e0:	d0ab      	beq.n	800663a <_printf_i+0x166>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	079b      	lsls	r3, r3, #30
 80066e6:	d413      	bmi.n	8006710 <_printf_i+0x23c>
 80066e8:	68e0      	ldr	r0, [r4, #12]
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	4298      	cmp	r0, r3
 80066ee:	bfb8      	it	lt
 80066f0:	4618      	movlt	r0, r3
 80066f2:	e7a4      	b.n	800663e <_printf_i+0x16a>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4632      	mov	r2, r6
 80066f8:	4649      	mov	r1, r9
 80066fa:	4640      	mov	r0, r8
 80066fc:	47d0      	blx	sl
 80066fe:	3001      	adds	r0, #1
 8006700:	d09b      	beq.n	800663a <_printf_i+0x166>
 8006702:	3501      	adds	r5, #1
 8006704:	68e3      	ldr	r3, [r4, #12]
 8006706:	9903      	ldr	r1, [sp, #12]
 8006708:	1a5b      	subs	r3, r3, r1
 800670a:	42ab      	cmp	r3, r5
 800670c:	dcf2      	bgt.n	80066f4 <_printf_i+0x220>
 800670e:	e7eb      	b.n	80066e8 <_printf_i+0x214>
 8006710:	2500      	movs	r5, #0
 8006712:	f104 0619 	add.w	r6, r4, #25
 8006716:	e7f5      	b.n	8006704 <_printf_i+0x230>
 8006718:	08008ffe 	.word	0x08008ffe
 800671c:	0800900f 	.word	0x0800900f

08006720 <_puts_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460e      	mov	r6, r1
 8006724:	4605      	mov	r5, r0
 8006726:	b118      	cbz	r0, 8006730 <_puts_r+0x10>
 8006728:	6983      	ldr	r3, [r0, #24]
 800672a:	b90b      	cbnz	r3, 8006730 <_puts_r+0x10>
 800672c:	f001 f8c0 	bl	80078b0 <__sinit>
 8006730:	69ab      	ldr	r3, [r5, #24]
 8006732:	68ac      	ldr	r4, [r5, #8]
 8006734:	b913      	cbnz	r3, 800673c <_puts_r+0x1c>
 8006736:	4628      	mov	r0, r5
 8006738:	f001 f8ba 	bl	80078b0 <__sinit>
 800673c:	4b2c      	ldr	r3, [pc, #176]	; (80067f0 <_puts_r+0xd0>)
 800673e:	429c      	cmp	r4, r3
 8006740:	d120      	bne.n	8006784 <_puts_r+0x64>
 8006742:	686c      	ldr	r4, [r5, #4]
 8006744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006746:	07db      	lsls	r3, r3, #31
 8006748:	d405      	bmi.n	8006756 <_puts_r+0x36>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	0598      	lsls	r0, r3, #22
 800674e:	d402      	bmi.n	8006756 <_puts_r+0x36>
 8006750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006752:	f001 f950 	bl	80079f6 <__retarget_lock_acquire_recursive>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	0719      	lsls	r1, r3, #28
 800675a:	d51d      	bpl.n	8006798 <_puts_r+0x78>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	b1db      	cbz	r3, 8006798 <_puts_r+0x78>
 8006760:	3e01      	subs	r6, #1
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006768:	3b01      	subs	r3, #1
 800676a:	60a3      	str	r3, [r4, #8]
 800676c:	bb39      	cbnz	r1, 80067be <_puts_r+0x9e>
 800676e:	2b00      	cmp	r3, #0
 8006770:	da38      	bge.n	80067e4 <_puts_r+0xc4>
 8006772:	4622      	mov	r2, r4
 8006774:	210a      	movs	r1, #10
 8006776:	4628      	mov	r0, r5
 8006778:	f000 f848 	bl	800680c <__swbuf_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d011      	beq.n	80067a4 <_puts_r+0x84>
 8006780:	250a      	movs	r5, #10
 8006782:	e011      	b.n	80067a8 <_puts_r+0x88>
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <_puts_r+0xd4>)
 8006786:	429c      	cmp	r4, r3
 8006788:	d101      	bne.n	800678e <_puts_r+0x6e>
 800678a:	68ac      	ldr	r4, [r5, #8]
 800678c:	e7da      	b.n	8006744 <_puts_r+0x24>
 800678e:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <_puts_r+0xd8>)
 8006790:	429c      	cmp	r4, r3
 8006792:	bf08      	it	eq
 8006794:	68ec      	ldreq	r4, [r5, #12]
 8006796:	e7d5      	b.n	8006744 <_puts_r+0x24>
 8006798:	4621      	mov	r1, r4
 800679a:	4628      	mov	r0, r5
 800679c:	f000 f888 	bl	80068b0 <__swsetup_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d0dd      	beq.n	8006760 <_puts_r+0x40>
 80067a4:	f04f 35ff 	mov.w	r5, #4294967295
 80067a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067aa:	07da      	lsls	r2, r3, #31
 80067ac:	d405      	bmi.n	80067ba <_puts_r+0x9a>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	059b      	lsls	r3, r3, #22
 80067b2:	d402      	bmi.n	80067ba <_puts_r+0x9a>
 80067b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b6:	f001 f91f 	bl	80079f8 <__retarget_lock_release_recursive>
 80067ba:	4628      	mov	r0, r5
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da04      	bge.n	80067cc <_puts_r+0xac>
 80067c2:	69a2      	ldr	r2, [r4, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	dc06      	bgt.n	80067d6 <_puts_r+0xb6>
 80067c8:	290a      	cmp	r1, #10
 80067ca:	d004      	beq.n	80067d6 <_puts_r+0xb6>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	7019      	strb	r1, [r3, #0]
 80067d4:	e7c5      	b.n	8006762 <_puts_r+0x42>
 80067d6:	4622      	mov	r2, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 f817 	bl	800680c <__swbuf_r>
 80067de:	3001      	adds	r0, #1
 80067e0:	d1bf      	bne.n	8006762 <_puts_r+0x42>
 80067e2:	e7df      	b.n	80067a4 <_puts_r+0x84>
 80067e4:	250a      	movs	r5, #10
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	6022      	str	r2, [r4, #0]
 80067ec:	701d      	strb	r5, [r3, #0]
 80067ee:	e7db      	b.n	80067a8 <_puts_r+0x88>
 80067f0:	080090d0 	.word	0x080090d0
 80067f4:	080090f0 	.word	0x080090f0
 80067f8:	080090b0 	.word	0x080090b0

080067fc <puts>:
 80067fc:	4b02      	ldr	r3, [pc, #8]	; (8006808 <puts+0xc>)
 80067fe:	4601      	mov	r1, r0
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f7ff bf8d 	b.w	8006720 <_puts_r>
 8006806:	bf00      	nop
 8006808:	20000018 	.word	0x20000018

0800680c <__swbuf_r>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	460e      	mov	r6, r1
 8006810:	4614      	mov	r4, r2
 8006812:	4605      	mov	r5, r0
 8006814:	b118      	cbz	r0, 800681e <__swbuf_r+0x12>
 8006816:	6983      	ldr	r3, [r0, #24]
 8006818:	b90b      	cbnz	r3, 800681e <__swbuf_r+0x12>
 800681a:	f001 f849 	bl	80078b0 <__sinit>
 800681e:	4b21      	ldr	r3, [pc, #132]	; (80068a4 <__swbuf_r+0x98>)
 8006820:	429c      	cmp	r4, r3
 8006822:	d12b      	bne.n	800687c <__swbuf_r+0x70>
 8006824:	686c      	ldr	r4, [r5, #4]
 8006826:	69a3      	ldr	r3, [r4, #24]
 8006828:	60a3      	str	r3, [r4, #8]
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	071a      	lsls	r2, r3, #28
 800682e:	d52f      	bpl.n	8006890 <__swbuf_r+0x84>
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	b36b      	cbz	r3, 8006890 <__swbuf_r+0x84>
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	b2f6      	uxtb	r6, r6
 800683a:	1ac0      	subs	r0, r0, r3
 800683c:	6963      	ldr	r3, [r4, #20]
 800683e:	4637      	mov	r7, r6
 8006840:	4283      	cmp	r3, r0
 8006842:	dc04      	bgt.n	800684e <__swbuf_r+0x42>
 8006844:	4621      	mov	r1, r4
 8006846:	4628      	mov	r0, r5
 8006848:	f000 ff9e 	bl	8007788 <_fflush_r>
 800684c:	bb30      	cbnz	r0, 800689c <__swbuf_r+0x90>
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	3001      	adds	r0, #1
 8006852:	3b01      	subs	r3, #1
 8006854:	60a3      	str	r3, [r4, #8]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	701e      	strb	r6, [r3, #0]
 800685e:	6963      	ldr	r3, [r4, #20]
 8006860:	4283      	cmp	r3, r0
 8006862:	d004      	beq.n	800686e <__swbuf_r+0x62>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	07db      	lsls	r3, r3, #31
 8006868:	d506      	bpl.n	8006878 <__swbuf_r+0x6c>
 800686a:	2e0a      	cmp	r6, #10
 800686c:	d104      	bne.n	8006878 <__swbuf_r+0x6c>
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f000 ff89 	bl	8007788 <_fflush_r>
 8006876:	b988      	cbnz	r0, 800689c <__swbuf_r+0x90>
 8006878:	4638      	mov	r0, r7
 800687a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <__swbuf_r+0x9c>)
 800687e:	429c      	cmp	r4, r3
 8006880:	d101      	bne.n	8006886 <__swbuf_r+0x7a>
 8006882:	68ac      	ldr	r4, [r5, #8]
 8006884:	e7cf      	b.n	8006826 <__swbuf_r+0x1a>
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <__swbuf_r+0xa0>)
 8006888:	429c      	cmp	r4, r3
 800688a:	bf08      	it	eq
 800688c:	68ec      	ldreq	r4, [r5, #12]
 800688e:	e7ca      	b.n	8006826 <__swbuf_r+0x1a>
 8006890:	4621      	mov	r1, r4
 8006892:	4628      	mov	r0, r5
 8006894:	f000 f80c 	bl	80068b0 <__swsetup_r>
 8006898:	2800      	cmp	r0, #0
 800689a:	d0cb      	beq.n	8006834 <__swbuf_r+0x28>
 800689c:	f04f 37ff 	mov.w	r7, #4294967295
 80068a0:	e7ea      	b.n	8006878 <__swbuf_r+0x6c>
 80068a2:	bf00      	nop
 80068a4:	080090d0 	.word	0x080090d0
 80068a8:	080090f0 	.word	0x080090f0
 80068ac:	080090b0 	.word	0x080090b0

080068b0 <__swsetup_r>:
 80068b0:	4b32      	ldr	r3, [pc, #200]	; (800697c <__swsetup_r+0xcc>)
 80068b2:	b570      	push	{r4, r5, r6, lr}
 80068b4:	681d      	ldr	r5, [r3, #0]
 80068b6:	4606      	mov	r6, r0
 80068b8:	460c      	mov	r4, r1
 80068ba:	b125      	cbz	r5, 80068c6 <__swsetup_r+0x16>
 80068bc:	69ab      	ldr	r3, [r5, #24]
 80068be:	b913      	cbnz	r3, 80068c6 <__swsetup_r+0x16>
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 fff5 	bl	80078b0 <__sinit>
 80068c6:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <__swsetup_r+0xd0>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	d10f      	bne.n	80068ec <__swsetup_r+0x3c>
 80068cc:	686c      	ldr	r4, [r5, #4]
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068d4:	0719      	lsls	r1, r3, #28
 80068d6:	d42c      	bmi.n	8006932 <__swsetup_r+0x82>
 80068d8:	06dd      	lsls	r5, r3, #27
 80068da:	d411      	bmi.n	8006900 <__swsetup_r+0x50>
 80068dc:	2309      	movs	r3, #9
 80068de:	6033      	str	r3, [r6, #0]
 80068e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	e03e      	b.n	800696a <__swsetup_r+0xba>
 80068ec:	4b25      	ldr	r3, [pc, #148]	; (8006984 <__swsetup_r+0xd4>)
 80068ee:	429c      	cmp	r4, r3
 80068f0:	d101      	bne.n	80068f6 <__swsetup_r+0x46>
 80068f2:	68ac      	ldr	r4, [r5, #8]
 80068f4:	e7eb      	b.n	80068ce <__swsetup_r+0x1e>
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <__swsetup_r+0xd8>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	bf08      	it	eq
 80068fc:	68ec      	ldreq	r4, [r5, #12]
 80068fe:	e7e6      	b.n	80068ce <__swsetup_r+0x1e>
 8006900:	0758      	lsls	r0, r3, #29
 8006902:	d512      	bpl.n	800692a <__swsetup_r+0x7a>
 8006904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006906:	b141      	cbz	r1, 800691a <__swsetup_r+0x6a>
 8006908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800690c:	4299      	cmp	r1, r3
 800690e:	d002      	beq.n	8006916 <__swsetup_r+0x66>
 8006910:	4630      	mov	r0, r6
 8006912:	f001 fc83 	bl	800821c <_free_r>
 8006916:	2300      	movs	r3, #0
 8006918:	6363      	str	r3, [r4, #52]	; 0x34
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	2300      	movs	r3, #0
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f043 0308 	orr.w	r3, r3, #8
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	b94b      	cbnz	r3, 800694a <__swsetup_r+0x9a>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800693c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006940:	d003      	beq.n	800694a <__swsetup_r+0x9a>
 8006942:	4621      	mov	r1, r4
 8006944:	4630      	mov	r0, r6
 8006946:	f001 f87d 	bl	8007a44 <__smakebuf_r>
 800694a:	89a0      	ldrh	r0, [r4, #12]
 800694c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006950:	f010 0301 	ands.w	r3, r0, #1
 8006954:	d00a      	beq.n	800696c <__swsetup_r+0xbc>
 8006956:	2300      	movs	r3, #0
 8006958:	60a3      	str	r3, [r4, #8]
 800695a:	6963      	ldr	r3, [r4, #20]
 800695c:	425b      	negs	r3, r3
 800695e:	61a3      	str	r3, [r4, #24]
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	b943      	cbnz	r3, 8006976 <__swsetup_r+0xc6>
 8006964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006968:	d1ba      	bne.n	80068e0 <__swsetup_r+0x30>
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	0781      	lsls	r1, r0, #30
 800696e:	bf58      	it	pl
 8006970:	6963      	ldrpl	r3, [r4, #20]
 8006972:	60a3      	str	r3, [r4, #8]
 8006974:	e7f4      	b.n	8006960 <__swsetup_r+0xb0>
 8006976:	2000      	movs	r0, #0
 8006978:	e7f7      	b.n	800696a <__swsetup_r+0xba>
 800697a:	bf00      	nop
 800697c:	20000018 	.word	0x20000018
 8006980:	080090d0 	.word	0x080090d0
 8006984:	080090f0 	.word	0x080090f0
 8006988:	080090b0 	.word	0x080090b0

0800698c <quorem>:
 800698c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	6903      	ldr	r3, [r0, #16]
 8006992:	690c      	ldr	r4, [r1, #16]
 8006994:	4607      	mov	r7, r0
 8006996:	42a3      	cmp	r3, r4
 8006998:	f2c0 8082 	blt.w	8006aa0 <quorem+0x114>
 800699c:	3c01      	subs	r4, #1
 800699e:	f100 0514 	add.w	r5, r0, #20
 80069a2:	f101 0814 	add.w	r8, r1, #20
 80069a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069b4:	3301      	adds	r3, #1
 80069b6:	429a      	cmp	r2, r3
 80069b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80069bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069c4:	d331      	bcc.n	8006a2a <quorem+0x9e>
 80069c6:	f04f 0e00 	mov.w	lr, #0
 80069ca:	4640      	mov	r0, r8
 80069cc:	46ac      	mov	ip, r5
 80069ce:	46f2      	mov	sl, lr
 80069d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80069d4:	b293      	uxth	r3, r2
 80069d6:	fb06 e303 	mla	r3, r6, r3, lr
 80069da:	0c12      	lsrs	r2, r2, #16
 80069dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	fb06 e202 	mla	r2, r6, r2, lr
 80069e6:	ebaa 0303 	sub.w	r3, sl, r3
 80069ea:	f8dc a000 	ldr.w	sl, [ip]
 80069ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069f2:	fa1f fa8a 	uxth.w	sl, sl
 80069f6:	4453      	add	r3, sl
 80069f8:	f8dc a000 	ldr.w	sl, [ip]
 80069fc:	b292      	uxth	r2, r2
 80069fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a0c:	4581      	cmp	r9, r0
 8006a0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a12:	f84c 3b04 	str.w	r3, [ip], #4
 8006a16:	d2db      	bcs.n	80069d0 <quorem+0x44>
 8006a18:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a1c:	b92b      	cbnz	r3, 8006a2a <quorem+0x9e>
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	3b04      	subs	r3, #4
 8006a22:	429d      	cmp	r5, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	d32f      	bcc.n	8006a88 <quorem+0xfc>
 8006a28:	613c      	str	r4, [r7, #16]
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	f001 fade 	bl	8007fec <__mcmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	db25      	blt.n	8006a80 <quorem+0xf4>
 8006a34:	4628      	mov	r0, r5
 8006a36:	f04f 0c00 	mov.w	ip, #0
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006a40:	f8d0 e000 	ldr.w	lr, [r0]
 8006a44:	b28b      	uxth	r3, r1
 8006a46:	ebac 0303 	sub.w	r3, ip, r3
 8006a4a:	fa1f f28e 	uxth.w	r2, lr
 8006a4e:	4413      	add	r3, r2
 8006a50:	0c0a      	lsrs	r2, r1, #16
 8006a52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a60:	45c1      	cmp	r9, r8
 8006a62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a66:	f840 3b04 	str.w	r3, [r0], #4
 8006a6a:	d2e7      	bcs.n	8006a3c <quorem+0xb0>
 8006a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a74:	b922      	cbnz	r2, 8006a80 <quorem+0xf4>
 8006a76:	3b04      	subs	r3, #4
 8006a78:	429d      	cmp	r5, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	d30a      	bcc.n	8006a94 <quorem+0x108>
 8006a7e:	613c      	str	r4, [r7, #16]
 8006a80:	4630      	mov	r0, r6
 8006a82:	b003      	add	sp, #12
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	3b04      	subs	r3, #4
 8006a8c:	2a00      	cmp	r2, #0
 8006a8e:	d1cb      	bne.n	8006a28 <quorem+0x9c>
 8006a90:	3c01      	subs	r4, #1
 8006a92:	e7c6      	b.n	8006a22 <quorem+0x96>
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	3b04      	subs	r3, #4
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	d1f0      	bne.n	8006a7e <quorem+0xf2>
 8006a9c:	3c01      	subs	r4, #1
 8006a9e:	e7eb      	b.n	8006a78 <quorem+0xec>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e7ee      	b.n	8006a82 <quorem+0xf6>
 8006aa4:	0000      	movs	r0, r0
	...

08006aa8 <_dtoa_r>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	461f      	mov	r7, r3
 8006ab0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ab2:	b099      	sub	sp, #100	; 0x64
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006aba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006abe:	b974      	cbnz	r4, 8006ade <_dtoa_r+0x36>
 8006ac0:	2010      	movs	r0, #16
 8006ac2:	f000 ffff 	bl	8007ac4 <malloc>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6268      	str	r0, [r5, #36]	; 0x24
 8006aca:	b920      	cbnz	r0, 8006ad6 <_dtoa_r+0x2e>
 8006acc:	21ea      	movs	r1, #234	; 0xea
 8006ace:	4ba8      	ldr	r3, [pc, #672]	; (8006d70 <_dtoa_r+0x2c8>)
 8006ad0:	48a8      	ldr	r0, [pc, #672]	; (8006d74 <_dtoa_r+0x2cc>)
 8006ad2:	f001 fce5 	bl	80084a0 <__assert_func>
 8006ad6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ada:	6004      	str	r4, [r0, #0]
 8006adc:	60c4      	str	r4, [r0, #12]
 8006ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ae0:	6819      	ldr	r1, [r3, #0]
 8006ae2:	b151      	cbz	r1, 8006afa <_dtoa_r+0x52>
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4093      	lsls	r3, r2
 8006aea:	604a      	str	r2, [r1, #4]
 8006aec:	608b      	str	r3, [r1, #8]
 8006aee:	4628      	mov	r0, r5
 8006af0:	f001 f83e 	bl	8007b70 <_Bfree>
 8006af4:	2200      	movs	r2, #0
 8006af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	1e3b      	subs	r3, r7, #0
 8006afc:	bfaf      	iteee	ge
 8006afe:	2300      	movge	r3, #0
 8006b00:	2201      	movlt	r2, #1
 8006b02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b06:	9305      	strlt	r3, [sp, #20]
 8006b08:	bfa8      	it	ge
 8006b0a:	f8c8 3000 	strge.w	r3, [r8]
 8006b0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006b12:	4b99      	ldr	r3, [pc, #612]	; (8006d78 <_dtoa_r+0x2d0>)
 8006b14:	bfb8      	it	lt
 8006b16:	f8c8 2000 	strlt.w	r2, [r8]
 8006b1a:	ea33 0309 	bics.w	r3, r3, r9
 8006b1e:	d119      	bne.n	8006b54 <_dtoa_r+0xac>
 8006b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b2c:	4333      	orrs	r3, r6
 8006b2e:	f000 857f 	beq.w	8007630 <_dtoa_r+0xb88>
 8006b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b34:	b953      	cbnz	r3, 8006b4c <_dtoa_r+0xa4>
 8006b36:	4b91      	ldr	r3, [pc, #580]	; (8006d7c <_dtoa_r+0x2d4>)
 8006b38:	e022      	b.n	8006b80 <_dtoa_r+0xd8>
 8006b3a:	4b91      	ldr	r3, [pc, #580]	; (8006d80 <_dtoa_r+0x2d8>)
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	9803      	ldr	r0, [sp, #12]
 8006b46:	b019      	add	sp, #100	; 0x64
 8006b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4c:	4b8b      	ldr	r3, [pc, #556]	; (8006d7c <_dtoa_r+0x2d4>)
 8006b4e:	9303      	str	r3, [sp, #12]
 8006b50:	3303      	adds	r3, #3
 8006b52:	e7f5      	b.n	8006b40 <_dtoa_r+0x98>
 8006b54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b60:	2200      	movs	r2, #0
 8006b62:	2300      	movs	r3, #0
 8006b64:	f7fa f840 	bl	8000be8 <__aeabi_dcmpeq>
 8006b68:	4680      	mov	r8, r0
 8006b6a:	b158      	cbz	r0, 8006b84 <_dtoa_r+0xdc>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8558 	beq.w	800762a <_dtoa_r+0xb82>
 8006b7a:	4882      	ldr	r0, [pc, #520]	; (8006d84 <_dtoa_r+0x2dc>)
 8006b7c:	6018      	str	r0, [r3, #0]
 8006b7e:	1e43      	subs	r3, r0, #1
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	e7df      	b.n	8006b44 <_dtoa_r+0x9c>
 8006b84:	ab16      	add	r3, sp, #88	; 0x58
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	ab17      	add	r3, sp, #92	; 0x5c
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b92:	f001 fad3 	bl	800813c <__d2b>
 8006b96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006b9a:	4683      	mov	fp, r0
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	d07f      	beq.n	8006ca0 <_dtoa_r+0x1f8>
 8006ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ba6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006baa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006bb2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006bb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4b72      	ldr	r3, [pc, #456]	; (8006d88 <_dtoa_r+0x2e0>)
 8006bbe:	f7f9 fbf3 	bl	80003a8 <__aeabi_dsub>
 8006bc2:	a365      	add	r3, pc, #404	; (adr r3, 8006d58 <_dtoa_r+0x2b0>)
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f7f9 fda6 	bl	8000718 <__aeabi_dmul>
 8006bcc:	a364      	add	r3, pc, #400	; (adr r3, 8006d60 <_dtoa_r+0x2b8>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 fbeb 	bl	80003ac <__adddf3>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	4620      	mov	r0, r4
 8006bda:	460f      	mov	r7, r1
 8006bdc:	f7f9 fd32 	bl	8000644 <__aeabi_i2d>
 8006be0:	a361      	add	r3, pc, #388	; (adr r3, 8006d68 <_dtoa_r+0x2c0>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fd97 	bl	8000718 <__aeabi_dmul>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 fbdb 	bl	80003ac <__adddf3>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	f7fa f83d 	bl	8000c78 <__aeabi_d2iz>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	4682      	mov	sl, r0
 8006c02:	2300      	movs	r3, #0
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	f7f9 fff8 	bl	8000bfc <__aeabi_dcmplt>
 8006c0c:	b148      	cbz	r0, 8006c22 <_dtoa_r+0x17a>
 8006c0e:	4650      	mov	r0, sl
 8006c10:	f7f9 fd18 	bl	8000644 <__aeabi_i2d>
 8006c14:	4632      	mov	r2, r6
 8006c16:	463b      	mov	r3, r7
 8006c18:	f7f9 ffe6 	bl	8000be8 <__aeabi_dcmpeq>
 8006c1c:	b908      	cbnz	r0, 8006c22 <_dtoa_r+0x17a>
 8006c1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c22:	f1ba 0f16 	cmp.w	sl, #22
 8006c26:	d858      	bhi.n	8006cda <_dtoa_r+0x232>
 8006c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c2c:	4b57      	ldr	r3, [pc, #348]	; (8006d8c <_dtoa_r+0x2e4>)
 8006c2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 ffe1 	bl	8000bfc <__aeabi_dcmplt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d04f      	beq.n	8006cde <_dtoa_r+0x236>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c44:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c48:	1b1c      	subs	r4, r3, r4
 8006c4a:	1e63      	subs	r3, r4, #1
 8006c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4e:	bf49      	itett	mi
 8006c50:	f1c4 0301 	rsbmi	r3, r4, #1
 8006c54:	2300      	movpl	r3, #0
 8006c56:	9306      	strmi	r3, [sp, #24]
 8006c58:	2300      	movmi	r3, #0
 8006c5a:	bf54      	ite	pl
 8006c5c:	9306      	strpl	r3, [sp, #24]
 8006c5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006c60:	f1ba 0f00 	cmp.w	sl, #0
 8006c64:	db3d      	blt.n	8006ce2 <_dtoa_r+0x23a>
 8006c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c68:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006c6c:	4453      	add	r3, sl
 8006c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c70:	2300      	movs	r3, #0
 8006c72:	930a      	str	r3, [sp, #40]	; 0x28
 8006c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c76:	2b09      	cmp	r3, #9
 8006c78:	f200 808c 	bhi.w	8006d94 <_dtoa_r+0x2ec>
 8006c7c:	2b05      	cmp	r3, #5
 8006c7e:	bfc4      	itt	gt
 8006c80:	3b04      	subgt	r3, #4
 8006c82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c86:	bfc8      	it	gt
 8006c88:	2400      	movgt	r4, #0
 8006c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c8e:	bfd8      	it	le
 8006c90:	2401      	movle	r4, #1
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	f200 808a 	bhi.w	8006dac <_dtoa_r+0x304>
 8006c98:	e8df f003 	tbb	[pc, r3]
 8006c9c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006ca0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006ca4:	441c      	add	r4, r3
 8006ca6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	bfc3      	ittte	gt
 8006cae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cb2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006cb6:	fa09 f303 	lslgt.w	r3, r9, r3
 8006cba:	f1c3 0320 	rsble	r3, r3, #32
 8006cbe:	bfc6      	itte	gt
 8006cc0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cc4:	4318      	orrgt	r0, r3
 8006cc6:	fa06 f003 	lslle.w	r0, r6, r3
 8006cca:	f7f9 fcab 	bl	8000624 <__aeabi_ui2d>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006cd4:	3c01      	subs	r4, #1
 8006cd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cd8:	e76f      	b.n	8006bba <_dtoa_r+0x112>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e7b2      	b.n	8006c44 <_dtoa_r+0x19c>
 8006cde:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ce0:	e7b1      	b.n	8006c46 <_dtoa_r+0x19e>
 8006ce2:	9b06      	ldr	r3, [sp, #24]
 8006ce4:	eba3 030a 	sub.w	r3, r3, sl
 8006ce8:	9306      	str	r3, [sp, #24]
 8006cea:	f1ca 0300 	rsb	r3, sl, #0
 8006cee:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8006cf4:	e7be      	b.n	8006c74 <_dtoa_r+0x1cc>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	dc58      	bgt.n	8006db2 <_dtoa_r+0x30a>
 8006d00:	f04f 0901 	mov.w	r9, #1
 8006d04:	464b      	mov	r3, r9
 8006d06:	f8cd 9020 	str.w	r9, [sp, #32]
 8006d0a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006d0e:	2200      	movs	r2, #0
 8006d10:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006d12:	6042      	str	r2, [r0, #4]
 8006d14:	2204      	movs	r2, #4
 8006d16:	f102 0614 	add.w	r6, r2, #20
 8006d1a:	429e      	cmp	r6, r3
 8006d1c:	6841      	ldr	r1, [r0, #4]
 8006d1e:	d94e      	bls.n	8006dbe <_dtoa_r+0x316>
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 fee5 	bl	8007af0 <_Balloc>
 8006d26:	9003      	str	r0, [sp, #12]
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d14c      	bne.n	8006dc6 <_dtoa_r+0x31e>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d32:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <_dtoa_r+0x2e8>)
 8006d34:	e6cc      	b.n	8006ad0 <_dtoa_r+0x28>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e7de      	b.n	8006cf8 <_dtoa_r+0x250>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d40:	eb0a 0903 	add.w	r9, sl, r3
 8006d44:	f109 0301 	add.w	r3, r9, #1
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	9308      	str	r3, [sp, #32]
 8006d4c:	bfb8      	it	lt
 8006d4e:	2301      	movlt	r3, #1
 8006d50:	e7dd      	b.n	8006d0e <_dtoa_r+0x266>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7f2      	b.n	8006d3c <_dtoa_r+0x294>
 8006d56:	bf00      	nop
 8006d58:	636f4361 	.word	0x636f4361
 8006d5c:	3fd287a7 	.word	0x3fd287a7
 8006d60:	8b60c8b3 	.word	0x8b60c8b3
 8006d64:	3fc68a28 	.word	0x3fc68a28
 8006d68:	509f79fb 	.word	0x509f79fb
 8006d6c:	3fd34413 	.word	0x3fd34413
 8006d70:	0800902d 	.word	0x0800902d
 8006d74:	08009044 	.word	0x08009044
 8006d78:	7ff00000 	.word	0x7ff00000
 8006d7c:	08009029 	.word	0x08009029
 8006d80:	08009020 	.word	0x08009020
 8006d84:	08008ffd 	.word	0x08008ffd
 8006d88:	3ff80000 	.word	0x3ff80000
 8006d8c:	08009198 	.word	0x08009198
 8006d90:	0800909f 	.word	0x0800909f
 8006d94:	2401      	movs	r4, #1
 8006d96:	2300      	movs	r3, #0
 8006d98:	940b      	str	r4, [sp, #44]	; 0x2c
 8006d9a:	9322      	str	r3, [sp, #136]	; 0x88
 8006d9c:	f04f 39ff 	mov.w	r9, #4294967295
 8006da0:	2200      	movs	r2, #0
 8006da2:	2312      	movs	r3, #18
 8006da4:	f8cd 9020 	str.w	r9, [sp, #32]
 8006da8:	9223      	str	r2, [sp, #140]	; 0x8c
 8006daa:	e7b0      	b.n	8006d0e <_dtoa_r+0x266>
 8006dac:	2301      	movs	r3, #1
 8006dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db0:	e7f4      	b.n	8006d9c <_dtoa_r+0x2f4>
 8006db2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006db6:	464b      	mov	r3, r9
 8006db8:	f8cd 9020 	str.w	r9, [sp, #32]
 8006dbc:	e7a7      	b.n	8006d0e <_dtoa_r+0x266>
 8006dbe:	3101      	adds	r1, #1
 8006dc0:	6041      	str	r1, [r0, #4]
 8006dc2:	0052      	lsls	r2, r2, #1
 8006dc4:	e7a7      	b.n	8006d16 <_dtoa_r+0x26e>
 8006dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dc8:	9a03      	ldr	r2, [sp, #12]
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	9b08      	ldr	r3, [sp, #32]
 8006dce:	2b0e      	cmp	r3, #14
 8006dd0:	f200 80a8 	bhi.w	8006f24 <_dtoa_r+0x47c>
 8006dd4:	2c00      	cmp	r4, #0
 8006dd6:	f000 80a5 	beq.w	8006f24 <_dtoa_r+0x47c>
 8006dda:	f1ba 0f00 	cmp.w	sl, #0
 8006dde:	dd34      	ble.n	8006e4a <_dtoa_r+0x3a2>
 8006de0:	4a9a      	ldr	r2, [pc, #616]	; (800704c <_dtoa_r+0x5a4>)
 8006de2:	f00a 030f 	and.w	r3, sl, #15
 8006de6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006dea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006dee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006df2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006df6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006dfa:	d016      	beq.n	8006e2a <_dtoa_r+0x382>
 8006dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e00:	4b93      	ldr	r3, [pc, #588]	; (8007050 <_dtoa_r+0x5a8>)
 8006e02:	2703      	movs	r7, #3
 8006e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e08:	f7f9 fdb0 	bl	800096c <__aeabi_ddiv>
 8006e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e10:	f004 040f 	and.w	r4, r4, #15
 8006e14:	4e8e      	ldr	r6, [pc, #568]	; (8007050 <_dtoa_r+0x5a8>)
 8006e16:	b954      	cbnz	r4, 8006e2e <_dtoa_r+0x386>
 8006e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e20:	f7f9 fda4 	bl	800096c <__aeabi_ddiv>
 8006e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e28:	e029      	b.n	8006e7e <_dtoa_r+0x3d6>
 8006e2a:	2702      	movs	r7, #2
 8006e2c:	e7f2      	b.n	8006e14 <_dtoa_r+0x36c>
 8006e2e:	07e1      	lsls	r1, r4, #31
 8006e30:	d508      	bpl.n	8006e44 <_dtoa_r+0x39c>
 8006e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e3a:	f7f9 fc6d 	bl	8000718 <__aeabi_dmul>
 8006e3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e42:	3701      	adds	r7, #1
 8006e44:	1064      	asrs	r4, r4, #1
 8006e46:	3608      	adds	r6, #8
 8006e48:	e7e5      	b.n	8006e16 <_dtoa_r+0x36e>
 8006e4a:	f000 80a5 	beq.w	8006f98 <_dtoa_r+0x4f0>
 8006e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e52:	f1ca 0400 	rsb	r4, sl, #0
 8006e56:	4b7d      	ldr	r3, [pc, #500]	; (800704c <_dtoa_r+0x5a4>)
 8006e58:	f004 020f 	and.w	r2, r4, #15
 8006e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 fc58 	bl	8000718 <__aeabi_dmul>
 8006e68:	2702      	movs	r7, #2
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e70:	4e77      	ldr	r6, [pc, #476]	; (8007050 <_dtoa_r+0x5a8>)
 8006e72:	1124      	asrs	r4, r4, #4
 8006e74:	2c00      	cmp	r4, #0
 8006e76:	f040 8084 	bne.w	8006f82 <_dtoa_r+0x4da>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1d2      	bne.n	8006e24 <_dtoa_r+0x37c>
 8006e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 808b 	beq.w	8006f9c <_dtoa_r+0x4f4>
 8006e86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e92:	2200      	movs	r2, #0
 8006e94:	4b6f      	ldr	r3, [pc, #444]	; (8007054 <_dtoa_r+0x5ac>)
 8006e96:	f7f9 feb1 	bl	8000bfc <__aeabi_dcmplt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d07e      	beq.n	8006f9c <_dtoa_r+0x4f4>
 8006e9e:	9b08      	ldr	r3, [sp, #32]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d07b      	beq.n	8006f9c <_dtoa_r+0x4f4>
 8006ea4:	f1b9 0f00 	cmp.w	r9, #0
 8006ea8:	dd38      	ble.n	8006f1c <_dtoa_r+0x474>
 8006eaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eae:	2200      	movs	r2, #0
 8006eb0:	4b69      	ldr	r3, [pc, #420]	; (8007058 <_dtoa_r+0x5b0>)
 8006eb2:	f7f9 fc31 	bl	8000718 <__aeabi_dmul>
 8006eb6:	464c      	mov	r4, r9
 8006eb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ebc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006ec0:	3701      	adds	r7, #1
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f7f9 fbbe 	bl	8000644 <__aeabi_i2d>
 8006ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ecc:	f7f9 fc24 	bl	8000718 <__aeabi_dmul>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4b62      	ldr	r3, [pc, #392]	; (800705c <_dtoa_r+0x5b4>)
 8006ed4:	f7f9 fa6a 	bl	80003ac <__adddf3>
 8006ed8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006edc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ee0:	9611      	str	r6, [sp, #68]	; 0x44
 8006ee2:	2c00      	cmp	r4, #0
 8006ee4:	d15d      	bne.n	8006fa2 <_dtoa_r+0x4fa>
 8006ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eea:	2200      	movs	r2, #0
 8006eec:	4b5c      	ldr	r3, [pc, #368]	; (8007060 <_dtoa_r+0x5b8>)
 8006eee:	f7f9 fa5b 	bl	80003a8 <__aeabi_dsub>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006efa:	4633      	mov	r3, r6
 8006efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006efe:	f7f9 fe9b 	bl	8000c38 <__aeabi_dcmpgt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f040 829c 	bne.w	8007440 <_dtoa_r+0x998>
 8006f08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f12:	f7f9 fe73 	bl	8000bfc <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f040 8290 	bne.w	800743c <_dtoa_r+0x994>
 8006f1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006f20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f2c0 8152 	blt.w	80071d0 <_dtoa_r+0x728>
 8006f2c:	f1ba 0f0e 	cmp.w	sl, #14
 8006f30:	f300 814e 	bgt.w	80071d0 <_dtoa_r+0x728>
 8006f34:	4b45      	ldr	r3, [pc, #276]	; (800704c <_dtoa_r+0x5a4>)
 8006f36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f280 80db 	bge.w	8007100 <_dtoa_r+0x658>
 8006f4a:	9b08      	ldr	r3, [sp, #32]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f300 80d7 	bgt.w	8007100 <_dtoa_r+0x658>
 8006f52:	f040 8272 	bne.w	800743a <_dtoa_r+0x992>
 8006f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4b40      	ldr	r3, [pc, #256]	; (8007060 <_dtoa_r+0x5b8>)
 8006f5e:	f7f9 fbdb 	bl	8000718 <__aeabi_dmul>
 8006f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f66:	f7f9 fe5d 	bl	8000c24 <__aeabi_dcmpge>
 8006f6a:	9c08      	ldr	r4, [sp, #32]
 8006f6c:	4626      	mov	r6, r4
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	f040 8248 	bne.w	8007404 <_dtoa_r+0x95c>
 8006f74:	2331      	movs	r3, #49	; 0x31
 8006f76:	9f03      	ldr	r7, [sp, #12]
 8006f78:	f10a 0a01 	add.w	sl, sl, #1
 8006f7c:	f807 3b01 	strb.w	r3, [r7], #1
 8006f80:	e244      	b.n	800740c <_dtoa_r+0x964>
 8006f82:	07e2      	lsls	r2, r4, #31
 8006f84:	d505      	bpl.n	8006f92 <_dtoa_r+0x4ea>
 8006f86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f8a:	f7f9 fbc5 	bl	8000718 <__aeabi_dmul>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	3701      	adds	r7, #1
 8006f92:	1064      	asrs	r4, r4, #1
 8006f94:	3608      	adds	r6, #8
 8006f96:	e76d      	b.n	8006e74 <_dtoa_r+0x3cc>
 8006f98:	2702      	movs	r7, #2
 8006f9a:	e770      	b.n	8006e7e <_dtoa_r+0x3d6>
 8006f9c:	46d0      	mov	r8, sl
 8006f9e:	9c08      	ldr	r4, [sp, #32]
 8006fa0:	e78f      	b.n	8006ec2 <_dtoa_r+0x41a>
 8006fa2:	9903      	ldr	r1, [sp, #12]
 8006fa4:	4b29      	ldr	r3, [pc, #164]	; (800704c <_dtoa_r+0x5a4>)
 8006fa6:	4421      	add	r1, r4
 8006fa8:	9112      	str	r1, [sp, #72]	; 0x48
 8006faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006fb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d055      	beq.n	8007068 <_dtoa_r+0x5c0>
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	4929      	ldr	r1, [pc, #164]	; (8007064 <_dtoa_r+0x5bc>)
 8006fc0:	f7f9 fcd4 	bl	800096c <__aeabi_ddiv>
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	f7f9 f9ee 	bl	80003a8 <__aeabi_dsub>
 8006fcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fd0:	9f03      	ldr	r7, [sp, #12]
 8006fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd6:	f7f9 fe4f 	bl	8000c78 <__aeabi_d2iz>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	f7f9 fb32 	bl	8000644 <__aeabi_i2d>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe8:	f7f9 f9de 	bl	80003a8 <__aeabi_dsub>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	3430      	adds	r4, #48	; 0x30
 8006ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ffa:	f807 4b01 	strb.w	r4, [r7], #1
 8006ffe:	f7f9 fdfd 	bl	8000bfc <__aeabi_dcmplt>
 8007002:	2800      	cmp	r0, #0
 8007004:	d174      	bne.n	80070f0 <_dtoa_r+0x648>
 8007006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800700a:	2000      	movs	r0, #0
 800700c:	4911      	ldr	r1, [pc, #68]	; (8007054 <_dtoa_r+0x5ac>)
 800700e:	f7f9 f9cb 	bl	80003a8 <__aeabi_dsub>
 8007012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007016:	f7f9 fdf1 	bl	8000bfc <__aeabi_dcmplt>
 800701a:	2800      	cmp	r0, #0
 800701c:	f040 80b7 	bne.w	800718e <_dtoa_r+0x6e6>
 8007020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007022:	429f      	cmp	r7, r3
 8007024:	f43f af7a 	beq.w	8006f1c <_dtoa_r+0x474>
 8007028:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800702c:	2200      	movs	r2, #0
 800702e:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <_dtoa_r+0x5b0>)
 8007030:	f7f9 fb72 	bl	8000718 <__aeabi_dmul>
 8007034:	2200      	movs	r2, #0
 8007036:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800703a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <_dtoa_r+0x5b0>)
 8007040:	f7f9 fb6a 	bl	8000718 <__aeabi_dmul>
 8007044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007048:	e7c3      	b.n	8006fd2 <_dtoa_r+0x52a>
 800704a:	bf00      	nop
 800704c:	08009198 	.word	0x08009198
 8007050:	08009170 	.word	0x08009170
 8007054:	3ff00000 	.word	0x3ff00000
 8007058:	40240000 	.word	0x40240000
 800705c:	401c0000 	.word	0x401c0000
 8007060:	40140000 	.word	0x40140000
 8007064:	3fe00000 	.word	0x3fe00000
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 fb54 	bl	8000718 <__aeabi_dmul>
 8007070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007072:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007076:	9c03      	ldr	r4, [sp, #12]
 8007078:	9314      	str	r3, [sp, #80]	; 0x50
 800707a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800707e:	f7f9 fdfb 	bl	8000c78 <__aeabi_d2iz>
 8007082:	9015      	str	r0, [sp, #84]	; 0x54
 8007084:	f7f9 fade 	bl	8000644 <__aeabi_i2d>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007090:	f7f9 f98a 	bl	80003a8 <__aeabi_dsub>
 8007094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007096:	4606      	mov	r6, r0
 8007098:	3330      	adds	r3, #48	; 0x30
 800709a:	f804 3b01 	strb.w	r3, [r4], #1
 800709e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070a0:	460f      	mov	r7, r1
 80070a2:	429c      	cmp	r4, r3
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	d124      	bne.n	80070f4 <_dtoa_r+0x64c>
 80070aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070ae:	4bb0      	ldr	r3, [pc, #704]	; (8007370 <_dtoa_r+0x8c8>)
 80070b0:	f7f9 f97c 	bl	80003ac <__adddf3>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 fdbc 	bl	8000c38 <__aeabi_dcmpgt>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d163      	bne.n	800718c <_dtoa_r+0x6e4>
 80070c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070c8:	2000      	movs	r0, #0
 80070ca:	49a9      	ldr	r1, [pc, #676]	; (8007370 <_dtoa_r+0x8c8>)
 80070cc:	f7f9 f96c 	bl	80003a8 <__aeabi_dsub>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4630      	mov	r0, r6
 80070d6:	4639      	mov	r1, r7
 80070d8:	f7f9 fd90 	bl	8000bfc <__aeabi_dcmplt>
 80070dc:	2800      	cmp	r0, #0
 80070de:	f43f af1d 	beq.w	8006f1c <_dtoa_r+0x474>
 80070e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80070e4:	1e7b      	subs	r3, r7, #1
 80070e6:	9314      	str	r3, [sp, #80]	; 0x50
 80070e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80070ec:	2b30      	cmp	r3, #48	; 0x30
 80070ee:	d0f8      	beq.n	80070e2 <_dtoa_r+0x63a>
 80070f0:	46c2      	mov	sl, r8
 80070f2:	e03b      	b.n	800716c <_dtoa_r+0x6c4>
 80070f4:	4b9f      	ldr	r3, [pc, #636]	; (8007374 <_dtoa_r+0x8cc>)
 80070f6:	f7f9 fb0f 	bl	8000718 <__aeabi_dmul>
 80070fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070fe:	e7bc      	b.n	800707a <_dtoa_r+0x5d2>
 8007100:	9f03      	ldr	r7, [sp, #12]
 8007102:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 fc2d 	bl	800096c <__aeabi_ddiv>
 8007112:	f7f9 fdb1 	bl	8000c78 <__aeabi_d2iz>
 8007116:	4604      	mov	r4, r0
 8007118:	f7f9 fa94 	bl	8000644 <__aeabi_i2d>
 800711c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007120:	f7f9 fafa 	bl	8000718 <__aeabi_dmul>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 f93c 	bl	80003a8 <__aeabi_dsub>
 8007130:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007134:	f807 6b01 	strb.w	r6, [r7], #1
 8007138:	9e03      	ldr	r6, [sp, #12]
 800713a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800713e:	1bbe      	subs	r6, r7, r6
 8007140:	45b4      	cmp	ip, r6
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	d136      	bne.n	80071b6 <_dtoa_r+0x70e>
 8007148:	f7f9 f930 	bl	80003ac <__adddf3>
 800714c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007150:	4680      	mov	r8, r0
 8007152:	4689      	mov	r9, r1
 8007154:	f7f9 fd70 	bl	8000c38 <__aeabi_dcmpgt>
 8007158:	bb58      	cbnz	r0, 80071b2 <_dtoa_r+0x70a>
 800715a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800715e:	4640      	mov	r0, r8
 8007160:	4649      	mov	r1, r9
 8007162:	f7f9 fd41 	bl	8000be8 <__aeabi_dcmpeq>
 8007166:	b108      	cbz	r0, 800716c <_dtoa_r+0x6c4>
 8007168:	07e1      	lsls	r1, r4, #31
 800716a:	d422      	bmi.n	80071b2 <_dtoa_r+0x70a>
 800716c:	4628      	mov	r0, r5
 800716e:	4659      	mov	r1, fp
 8007170:	f000 fcfe 	bl	8007b70 <_Bfree>
 8007174:	2300      	movs	r3, #0
 8007176:	703b      	strb	r3, [r7, #0]
 8007178:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800717a:	f10a 0001 	add.w	r0, sl, #1
 800717e:	6018      	str	r0, [r3, #0]
 8007180:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007182:	2b00      	cmp	r3, #0
 8007184:	f43f acde 	beq.w	8006b44 <_dtoa_r+0x9c>
 8007188:	601f      	str	r7, [r3, #0]
 800718a:	e4db      	b.n	8006b44 <_dtoa_r+0x9c>
 800718c:	4627      	mov	r7, r4
 800718e:	463b      	mov	r3, r7
 8007190:	461f      	mov	r7, r3
 8007192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007196:	2a39      	cmp	r2, #57	; 0x39
 8007198:	d107      	bne.n	80071aa <_dtoa_r+0x702>
 800719a:	9a03      	ldr	r2, [sp, #12]
 800719c:	429a      	cmp	r2, r3
 800719e:	d1f7      	bne.n	8007190 <_dtoa_r+0x6e8>
 80071a0:	2230      	movs	r2, #48	; 0x30
 80071a2:	9903      	ldr	r1, [sp, #12]
 80071a4:	f108 0801 	add.w	r8, r8, #1
 80071a8:	700a      	strb	r2, [r1, #0]
 80071aa:	781a      	ldrb	r2, [r3, #0]
 80071ac:	3201      	adds	r2, #1
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e79e      	b.n	80070f0 <_dtoa_r+0x648>
 80071b2:	46d0      	mov	r8, sl
 80071b4:	e7eb      	b.n	800718e <_dtoa_r+0x6e6>
 80071b6:	2200      	movs	r2, #0
 80071b8:	4b6e      	ldr	r3, [pc, #440]	; (8007374 <_dtoa_r+0x8cc>)
 80071ba:	f7f9 faad 	bl	8000718 <__aeabi_dmul>
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	4680      	mov	r8, r0
 80071c4:	4689      	mov	r9, r1
 80071c6:	f7f9 fd0f 	bl	8000be8 <__aeabi_dcmpeq>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d09b      	beq.n	8007106 <_dtoa_r+0x65e>
 80071ce:	e7cd      	b.n	800716c <_dtoa_r+0x6c4>
 80071d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	f000 80d0 	beq.w	8007378 <_dtoa_r+0x8d0>
 80071d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80071da:	2a01      	cmp	r2, #1
 80071dc:	f300 80ae 	bgt.w	800733c <_dtoa_r+0x894>
 80071e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	f000 80a6 	beq.w	8007334 <_dtoa_r+0x88c>
 80071e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071ee:	9f06      	ldr	r7, [sp, #24]
 80071f0:	9a06      	ldr	r2, [sp, #24]
 80071f2:	2101      	movs	r1, #1
 80071f4:	441a      	add	r2, r3
 80071f6:	9206      	str	r2, [sp, #24]
 80071f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071fa:	4628      	mov	r0, r5
 80071fc:	441a      	add	r2, r3
 80071fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007200:	f000 fd6c 	bl	8007cdc <__i2b>
 8007204:	4606      	mov	r6, r0
 8007206:	2f00      	cmp	r7, #0
 8007208:	dd0c      	ble.n	8007224 <_dtoa_r+0x77c>
 800720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720c:	2b00      	cmp	r3, #0
 800720e:	dd09      	ble.n	8007224 <_dtoa_r+0x77c>
 8007210:	42bb      	cmp	r3, r7
 8007212:	bfa8      	it	ge
 8007214:	463b      	movge	r3, r7
 8007216:	9a06      	ldr	r2, [sp, #24]
 8007218:	1aff      	subs	r7, r7, r3
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	9206      	str	r2, [sp, #24]
 800721e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	9309      	str	r3, [sp, #36]	; 0x24
 8007224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007226:	b1f3      	cbz	r3, 8007266 <_dtoa_r+0x7be>
 8007228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 80a8 	beq.w	8007380 <_dtoa_r+0x8d8>
 8007230:	2c00      	cmp	r4, #0
 8007232:	dd10      	ble.n	8007256 <_dtoa_r+0x7ae>
 8007234:	4631      	mov	r1, r6
 8007236:	4622      	mov	r2, r4
 8007238:	4628      	mov	r0, r5
 800723a:	f000 fe0d 	bl	8007e58 <__pow5mult>
 800723e:	465a      	mov	r2, fp
 8007240:	4601      	mov	r1, r0
 8007242:	4606      	mov	r6, r0
 8007244:	4628      	mov	r0, r5
 8007246:	f000 fd5f 	bl	8007d08 <__multiply>
 800724a:	4680      	mov	r8, r0
 800724c:	4659      	mov	r1, fp
 800724e:	4628      	mov	r0, r5
 8007250:	f000 fc8e 	bl	8007b70 <_Bfree>
 8007254:	46c3      	mov	fp, r8
 8007256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007258:	1b1a      	subs	r2, r3, r4
 800725a:	d004      	beq.n	8007266 <_dtoa_r+0x7be>
 800725c:	4659      	mov	r1, fp
 800725e:	4628      	mov	r0, r5
 8007260:	f000 fdfa 	bl	8007e58 <__pow5mult>
 8007264:	4683      	mov	fp, r0
 8007266:	2101      	movs	r1, #1
 8007268:	4628      	mov	r0, r5
 800726a:	f000 fd37 	bl	8007cdc <__i2b>
 800726e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007270:	4604      	mov	r4, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	f340 8086 	ble.w	8007384 <_dtoa_r+0x8dc>
 8007278:	461a      	mov	r2, r3
 800727a:	4601      	mov	r1, r0
 800727c:	4628      	mov	r0, r5
 800727e:	f000 fdeb 	bl	8007e58 <__pow5mult>
 8007282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007284:	4604      	mov	r4, r0
 8007286:	2b01      	cmp	r3, #1
 8007288:	dd7f      	ble.n	800738a <_dtoa_r+0x8e2>
 800728a:	f04f 0800 	mov.w	r8, #0
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007294:	6918      	ldr	r0, [r3, #16]
 8007296:	f000 fcd3 	bl	8007c40 <__hi0bits>
 800729a:	f1c0 0020 	rsb	r0, r0, #32
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	4418      	add	r0, r3
 80072a2:	f010 001f 	ands.w	r0, r0, #31
 80072a6:	f000 8092 	beq.w	80073ce <_dtoa_r+0x926>
 80072aa:	f1c0 0320 	rsb	r3, r0, #32
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	f340 808a 	ble.w	80073c8 <_dtoa_r+0x920>
 80072b4:	f1c0 001c 	rsb	r0, r0, #28
 80072b8:	9b06      	ldr	r3, [sp, #24]
 80072ba:	4407      	add	r7, r0
 80072bc:	4403      	add	r3, r0
 80072be:	9306      	str	r3, [sp, #24]
 80072c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c2:	4403      	add	r3, r0
 80072c4:	9309      	str	r3, [sp, #36]	; 0x24
 80072c6:	9b06      	ldr	r3, [sp, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dd05      	ble.n	80072d8 <_dtoa_r+0x830>
 80072cc:	4659      	mov	r1, fp
 80072ce:	461a      	mov	r2, r3
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 fe1b 	bl	8007f0c <__lshift>
 80072d6:	4683      	mov	fp, r0
 80072d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dd05      	ble.n	80072ea <_dtoa_r+0x842>
 80072de:	4621      	mov	r1, r4
 80072e0:	461a      	mov	r2, r3
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 fe12 	bl	8007f0c <__lshift>
 80072e8:	4604      	mov	r4, r0
 80072ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d070      	beq.n	80073d2 <_dtoa_r+0x92a>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4658      	mov	r0, fp
 80072f4:	f000 fe7a 	bl	8007fec <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	da6a      	bge.n	80073d2 <_dtoa_r+0x92a>
 80072fc:	2300      	movs	r3, #0
 80072fe:	4659      	mov	r1, fp
 8007300:	220a      	movs	r2, #10
 8007302:	4628      	mov	r0, r5
 8007304:	f000 fc56 	bl	8007bb4 <__multadd>
 8007308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800730a:	4683      	mov	fp, r0
 800730c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8194 	beq.w	800763e <_dtoa_r+0xb96>
 8007316:	4631      	mov	r1, r6
 8007318:	2300      	movs	r3, #0
 800731a:	220a      	movs	r2, #10
 800731c:	4628      	mov	r0, r5
 800731e:	f000 fc49 	bl	8007bb4 <__multadd>
 8007322:	f1b9 0f00 	cmp.w	r9, #0
 8007326:	4606      	mov	r6, r0
 8007328:	f300 8093 	bgt.w	8007452 <_dtoa_r+0x9aa>
 800732c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800732e:	2b02      	cmp	r3, #2
 8007330:	dc57      	bgt.n	80073e2 <_dtoa_r+0x93a>
 8007332:	e08e      	b.n	8007452 <_dtoa_r+0x9aa>
 8007334:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800733a:	e757      	b.n	80071ec <_dtoa_r+0x744>
 800733c:	9b08      	ldr	r3, [sp, #32]
 800733e:	1e5c      	subs	r4, r3, #1
 8007340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007342:	42a3      	cmp	r3, r4
 8007344:	bfb7      	itett	lt
 8007346:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007348:	1b1c      	subge	r4, r3, r4
 800734a:	1ae2      	sublt	r2, r4, r3
 800734c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800734e:	bfbe      	ittt	lt
 8007350:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007352:	189b      	addlt	r3, r3, r2
 8007354:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007356:	9b08      	ldr	r3, [sp, #32]
 8007358:	bfb8      	it	lt
 800735a:	2400      	movlt	r4, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	bfbb      	ittet	lt
 8007360:	9b06      	ldrlt	r3, [sp, #24]
 8007362:	9a08      	ldrlt	r2, [sp, #32]
 8007364:	9f06      	ldrge	r7, [sp, #24]
 8007366:	1a9f      	sublt	r7, r3, r2
 8007368:	bfac      	ite	ge
 800736a:	9b08      	ldrge	r3, [sp, #32]
 800736c:	2300      	movlt	r3, #0
 800736e:	e73f      	b.n	80071f0 <_dtoa_r+0x748>
 8007370:	3fe00000 	.word	0x3fe00000
 8007374:	40240000 	.word	0x40240000
 8007378:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800737a:	9f06      	ldr	r7, [sp, #24]
 800737c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800737e:	e742      	b.n	8007206 <_dtoa_r+0x75e>
 8007380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007382:	e76b      	b.n	800725c <_dtoa_r+0x7b4>
 8007384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007386:	2b01      	cmp	r3, #1
 8007388:	dc19      	bgt.n	80073be <_dtoa_r+0x916>
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	b9bb      	cbnz	r3, 80073be <_dtoa_r+0x916>
 800738e:	9b05      	ldr	r3, [sp, #20]
 8007390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007394:	b99b      	cbnz	r3, 80073be <_dtoa_r+0x916>
 8007396:	9b05      	ldr	r3, [sp, #20]
 8007398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800739c:	0d1b      	lsrs	r3, r3, #20
 800739e:	051b      	lsls	r3, r3, #20
 80073a0:	b183      	cbz	r3, 80073c4 <_dtoa_r+0x91c>
 80073a2:	f04f 0801 	mov.w	r8, #1
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	3301      	adds	r3, #1
 80073aa:	9306      	str	r3, [sp, #24]
 80073ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ae:	3301      	adds	r3, #1
 80073b0:	9309      	str	r3, [sp, #36]	; 0x24
 80073b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f47f af6a 	bne.w	800728e <_dtoa_r+0x7e6>
 80073ba:	2001      	movs	r0, #1
 80073bc:	e76f      	b.n	800729e <_dtoa_r+0x7f6>
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	e7f6      	b.n	80073b2 <_dtoa_r+0x90a>
 80073c4:	4698      	mov	r8, r3
 80073c6:	e7f4      	b.n	80073b2 <_dtoa_r+0x90a>
 80073c8:	f43f af7d 	beq.w	80072c6 <_dtoa_r+0x81e>
 80073cc:	4618      	mov	r0, r3
 80073ce:	301c      	adds	r0, #28
 80073d0:	e772      	b.n	80072b8 <_dtoa_r+0x810>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dc36      	bgt.n	8007446 <_dtoa_r+0x99e>
 80073d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073da:	2b02      	cmp	r3, #2
 80073dc:	dd33      	ble.n	8007446 <_dtoa_r+0x99e>
 80073de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073e2:	f1b9 0f00 	cmp.w	r9, #0
 80073e6:	d10d      	bne.n	8007404 <_dtoa_r+0x95c>
 80073e8:	4621      	mov	r1, r4
 80073ea:	464b      	mov	r3, r9
 80073ec:	2205      	movs	r2, #5
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 fbe0 	bl	8007bb4 <__multadd>
 80073f4:	4601      	mov	r1, r0
 80073f6:	4604      	mov	r4, r0
 80073f8:	4658      	mov	r0, fp
 80073fa:	f000 fdf7 	bl	8007fec <__mcmp>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f73f adb8 	bgt.w	8006f74 <_dtoa_r+0x4cc>
 8007404:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007406:	9f03      	ldr	r7, [sp, #12]
 8007408:	ea6f 0a03 	mvn.w	sl, r3
 800740c:	f04f 0800 	mov.w	r8, #0
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f000 fbac 	bl	8007b70 <_Bfree>
 8007418:	2e00      	cmp	r6, #0
 800741a:	f43f aea7 	beq.w	800716c <_dtoa_r+0x6c4>
 800741e:	f1b8 0f00 	cmp.w	r8, #0
 8007422:	d005      	beq.n	8007430 <_dtoa_r+0x988>
 8007424:	45b0      	cmp	r8, r6
 8007426:	d003      	beq.n	8007430 <_dtoa_r+0x988>
 8007428:	4641      	mov	r1, r8
 800742a:	4628      	mov	r0, r5
 800742c:	f000 fba0 	bl	8007b70 <_Bfree>
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	f000 fb9c 	bl	8007b70 <_Bfree>
 8007438:	e698      	b.n	800716c <_dtoa_r+0x6c4>
 800743a:	2400      	movs	r4, #0
 800743c:	4626      	mov	r6, r4
 800743e:	e7e1      	b.n	8007404 <_dtoa_r+0x95c>
 8007440:	46c2      	mov	sl, r8
 8007442:	4626      	mov	r6, r4
 8007444:	e596      	b.n	8006f74 <_dtoa_r+0x4cc>
 8007446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80fd 	beq.w	800764c <_dtoa_r+0xba4>
 8007452:	2f00      	cmp	r7, #0
 8007454:	dd05      	ble.n	8007462 <_dtoa_r+0x9ba>
 8007456:	4631      	mov	r1, r6
 8007458:	463a      	mov	r2, r7
 800745a:	4628      	mov	r0, r5
 800745c:	f000 fd56 	bl	8007f0c <__lshift>
 8007460:	4606      	mov	r6, r0
 8007462:	f1b8 0f00 	cmp.w	r8, #0
 8007466:	d05c      	beq.n	8007522 <_dtoa_r+0xa7a>
 8007468:	4628      	mov	r0, r5
 800746a:	6871      	ldr	r1, [r6, #4]
 800746c:	f000 fb40 	bl	8007af0 <_Balloc>
 8007470:	4607      	mov	r7, r0
 8007472:	b928      	cbnz	r0, 8007480 <_dtoa_r+0x9d8>
 8007474:	4602      	mov	r2, r0
 8007476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800747a:	4b7f      	ldr	r3, [pc, #508]	; (8007678 <_dtoa_r+0xbd0>)
 800747c:	f7ff bb28 	b.w	8006ad0 <_dtoa_r+0x28>
 8007480:	6932      	ldr	r2, [r6, #16]
 8007482:	f106 010c 	add.w	r1, r6, #12
 8007486:	3202      	adds	r2, #2
 8007488:	0092      	lsls	r2, r2, #2
 800748a:	300c      	adds	r0, #12
 800748c:	f7fe fcd2 	bl	8005e34 <memcpy>
 8007490:	2201      	movs	r2, #1
 8007492:	4639      	mov	r1, r7
 8007494:	4628      	mov	r0, r5
 8007496:	f000 fd39 	bl	8007f0c <__lshift>
 800749a:	46b0      	mov	r8, r6
 800749c:	4606      	mov	r6, r0
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	3301      	adds	r3, #1
 80074a2:	9308      	str	r3, [sp, #32]
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	444b      	add	r3, r9
 80074a8:	930a      	str	r3, [sp, #40]	; 0x28
 80074aa:	9b04      	ldr	r3, [sp, #16]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	9309      	str	r3, [sp, #36]	; 0x24
 80074b2:	9b08      	ldr	r3, [sp, #32]
 80074b4:	4621      	mov	r1, r4
 80074b6:	3b01      	subs	r3, #1
 80074b8:	4658      	mov	r0, fp
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	f7ff fa66 	bl	800698c <quorem>
 80074c0:	4603      	mov	r3, r0
 80074c2:	4641      	mov	r1, r8
 80074c4:	3330      	adds	r3, #48	; 0x30
 80074c6:	9006      	str	r0, [sp, #24]
 80074c8:	4658      	mov	r0, fp
 80074ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80074cc:	f000 fd8e 	bl	8007fec <__mcmp>
 80074d0:	4632      	mov	r2, r6
 80074d2:	4681      	mov	r9, r0
 80074d4:	4621      	mov	r1, r4
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 fda4 	bl	8008024 <__mdiff>
 80074dc:	68c2      	ldr	r2, [r0, #12]
 80074de:	4607      	mov	r7, r0
 80074e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e2:	bb02      	cbnz	r2, 8007526 <_dtoa_r+0xa7e>
 80074e4:	4601      	mov	r1, r0
 80074e6:	4658      	mov	r0, fp
 80074e8:	f000 fd80 	bl	8007fec <__mcmp>
 80074ec:	4602      	mov	r2, r0
 80074ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f0:	4639      	mov	r1, r7
 80074f2:	4628      	mov	r0, r5
 80074f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80074f8:	f000 fb3a 	bl	8007b70 <_Bfree>
 80074fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007500:	9f08      	ldr	r7, [sp, #32]
 8007502:	ea43 0102 	orr.w	r1, r3, r2
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	430b      	orrs	r3, r1
 800750a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800750c:	d10d      	bne.n	800752a <_dtoa_r+0xa82>
 800750e:	2b39      	cmp	r3, #57	; 0x39
 8007510:	d029      	beq.n	8007566 <_dtoa_r+0xabe>
 8007512:	f1b9 0f00 	cmp.w	r9, #0
 8007516:	dd01      	ble.n	800751c <_dtoa_r+0xa74>
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	3331      	adds	r3, #49	; 0x31
 800751c:	9a04      	ldr	r2, [sp, #16]
 800751e:	7013      	strb	r3, [r2, #0]
 8007520:	e776      	b.n	8007410 <_dtoa_r+0x968>
 8007522:	4630      	mov	r0, r6
 8007524:	e7b9      	b.n	800749a <_dtoa_r+0x9f2>
 8007526:	2201      	movs	r2, #1
 8007528:	e7e2      	b.n	80074f0 <_dtoa_r+0xa48>
 800752a:	f1b9 0f00 	cmp.w	r9, #0
 800752e:	db06      	blt.n	800753e <_dtoa_r+0xa96>
 8007530:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007532:	ea41 0909 	orr.w	r9, r1, r9
 8007536:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007538:	ea59 0101 	orrs.w	r1, r9, r1
 800753c:	d120      	bne.n	8007580 <_dtoa_r+0xad8>
 800753e:	2a00      	cmp	r2, #0
 8007540:	ddec      	ble.n	800751c <_dtoa_r+0xa74>
 8007542:	4659      	mov	r1, fp
 8007544:	2201      	movs	r2, #1
 8007546:	4628      	mov	r0, r5
 8007548:	9308      	str	r3, [sp, #32]
 800754a:	f000 fcdf 	bl	8007f0c <__lshift>
 800754e:	4621      	mov	r1, r4
 8007550:	4683      	mov	fp, r0
 8007552:	f000 fd4b 	bl	8007fec <__mcmp>
 8007556:	2800      	cmp	r0, #0
 8007558:	9b08      	ldr	r3, [sp, #32]
 800755a:	dc02      	bgt.n	8007562 <_dtoa_r+0xaba>
 800755c:	d1de      	bne.n	800751c <_dtoa_r+0xa74>
 800755e:	07da      	lsls	r2, r3, #31
 8007560:	d5dc      	bpl.n	800751c <_dtoa_r+0xa74>
 8007562:	2b39      	cmp	r3, #57	; 0x39
 8007564:	d1d8      	bne.n	8007518 <_dtoa_r+0xa70>
 8007566:	2339      	movs	r3, #57	; 0x39
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	7013      	strb	r3, [r2, #0]
 800756c:	463b      	mov	r3, r7
 800756e:	461f      	mov	r7, r3
 8007570:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007574:	3b01      	subs	r3, #1
 8007576:	2a39      	cmp	r2, #57	; 0x39
 8007578:	d050      	beq.n	800761c <_dtoa_r+0xb74>
 800757a:	3201      	adds	r2, #1
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	e747      	b.n	8007410 <_dtoa_r+0x968>
 8007580:	2a00      	cmp	r2, #0
 8007582:	dd03      	ble.n	800758c <_dtoa_r+0xae4>
 8007584:	2b39      	cmp	r3, #57	; 0x39
 8007586:	d0ee      	beq.n	8007566 <_dtoa_r+0xabe>
 8007588:	3301      	adds	r3, #1
 800758a:	e7c7      	b.n	800751c <_dtoa_r+0xa74>
 800758c:	9a08      	ldr	r2, [sp, #32]
 800758e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007590:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007594:	428a      	cmp	r2, r1
 8007596:	d02a      	beq.n	80075ee <_dtoa_r+0xb46>
 8007598:	4659      	mov	r1, fp
 800759a:	2300      	movs	r3, #0
 800759c:	220a      	movs	r2, #10
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 fb08 	bl	8007bb4 <__multadd>
 80075a4:	45b0      	cmp	r8, r6
 80075a6:	4683      	mov	fp, r0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	f04f 020a 	mov.w	r2, #10
 80075b0:	4641      	mov	r1, r8
 80075b2:	4628      	mov	r0, r5
 80075b4:	d107      	bne.n	80075c6 <_dtoa_r+0xb1e>
 80075b6:	f000 fafd 	bl	8007bb4 <__multadd>
 80075ba:	4680      	mov	r8, r0
 80075bc:	4606      	mov	r6, r0
 80075be:	9b08      	ldr	r3, [sp, #32]
 80075c0:	3301      	adds	r3, #1
 80075c2:	9308      	str	r3, [sp, #32]
 80075c4:	e775      	b.n	80074b2 <_dtoa_r+0xa0a>
 80075c6:	f000 faf5 	bl	8007bb4 <__multadd>
 80075ca:	4631      	mov	r1, r6
 80075cc:	4680      	mov	r8, r0
 80075ce:	2300      	movs	r3, #0
 80075d0:	220a      	movs	r2, #10
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 faee 	bl	8007bb4 <__multadd>
 80075d8:	4606      	mov	r6, r0
 80075da:	e7f0      	b.n	80075be <_dtoa_r+0xb16>
 80075dc:	f1b9 0f00 	cmp.w	r9, #0
 80075e0:	bfcc      	ite	gt
 80075e2:	464f      	movgt	r7, r9
 80075e4:	2701      	movle	r7, #1
 80075e6:	f04f 0800 	mov.w	r8, #0
 80075ea:	9a03      	ldr	r2, [sp, #12]
 80075ec:	4417      	add	r7, r2
 80075ee:	4659      	mov	r1, fp
 80075f0:	2201      	movs	r2, #1
 80075f2:	4628      	mov	r0, r5
 80075f4:	9308      	str	r3, [sp, #32]
 80075f6:	f000 fc89 	bl	8007f0c <__lshift>
 80075fa:	4621      	mov	r1, r4
 80075fc:	4683      	mov	fp, r0
 80075fe:	f000 fcf5 	bl	8007fec <__mcmp>
 8007602:	2800      	cmp	r0, #0
 8007604:	dcb2      	bgt.n	800756c <_dtoa_r+0xac4>
 8007606:	d102      	bne.n	800760e <_dtoa_r+0xb66>
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	07db      	lsls	r3, r3, #31
 800760c:	d4ae      	bmi.n	800756c <_dtoa_r+0xac4>
 800760e:	463b      	mov	r3, r7
 8007610:	461f      	mov	r7, r3
 8007612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007616:	2a30      	cmp	r2, #48	; 0x30
 8007618:	d0fa      	beq.n	8007610 <_dtoa_r+0xb68>
 800761a:	e6f9      	b.n	8007410 <_dtoa_r+0x968>
 800761c:	9a03      	ldr	r2, [sp, #12]
 800761e:	429a      	cmp	r2, r3
 8007620:	d1a5      	bne.n	800756e <_dtoa_r+0xac6>
 8007622:	2331      	movs	r3, #49	; 0x31
 8007624:	f10a 0a01 	add.w	sl, sl, #1
 8007628:	e779      	b.n	800751e <_dtoa_r+0xa76>
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <_dtoa_r+0xbd4>)
 800762c:	f7ff baa8 	b.w	8006b80 <_dtoa_r+0xd8>
 8007630:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007632:	2b00      	cmp	r3, #0
 8007634:	f47f aa81 	bne.w	8006b3a <_dtoa_r+0x92>
 8007638:	4b11      	ldr	r3, [pc, #68]	; (8007680 <_dtoa_r+0xbd8>)
 800763a:	f7ff baa1 	b.w	8006b80 <_dtoa_r+0xd8>
 800763e:	f1b9 0f00 	cmp.w	r9, #0
 8007642:	dc03      	bgt.n	800764c <_dtoa_r+0xba4>
 8007644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007646:	2b02      	cmp	r3, #2
 8007648:	f73f aecb 	bgt.w	80073e2 <_dtoa_r+0x93a>
 800764c:	9f03      	ldr	r7, [sp, #12]
 800764e:	4621      	mov	r1, r4
 8007650:	4658      	mov	r0, fp
 8007652:	f7ff f99b 	bl	800698c <quorem>
 8007656:	9a03      	ldr	r2, [sp, #12]
 8007658:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800765c:	f807 3b01 	strb.w	r3, [r7], #1
 8007660:	1aba      	subs	r2, r7, r2
 8007662:	4591      	cmp	r9, r2
 8007664:	ddba      	ble.n	80075dc <_dtoa_r+0xb34>
 8007666:	4659      	mov	r1, fp
 8007668:	2300      	movs	r3, #0
 800766a:	220a      	movs	r2, #10
 800766c:	4628      	mov	r0, r5
 800766e:	f000 faa1 	bl	8007bb4 <__multadd>
 8007672:	4683      	mov	fp, r0
 8007674:	e7eb      	b.n	800764e <_dtoa_r+0xba6>
 8007676:	bf00      	nop
 8007678:	0800909f 	.word	0x0800909f
 800767c:	08008ffc 	.word	0x08008ffc
 8007680:	08009020 	.word	0x08009020

08007684 <__sflush_r>:
 8007684:	898a      	ldrh	r2, [r1, #12]
 8007686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007688:	4605      	mov	r5, r0
 800768a:	0710      	lsls	r0, r2, #28
 800768c:	460c      	mov	r4, r1
 800768e:	d457      	bmi.n	8007740 <__sflush_r+0xbc>
 8007690:	684b      	ldr	r3, [r1, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	dc04      	bgt.n	80076a0 <__sflush_r+0x1c>
 8007696:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	dc01      	bgt.n	80076a0 <__sflush_r+0x1c>
 800769c:	2000      	movs	r0, #0
 800769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	d0fa      	beq.n	800769c <__sflush_r+0x18>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076ac:	682f      	ldr	r7, [r5, #0]
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	d032      	beq.n	8007718 <__sflush_r+0x94>
 80076b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	075a      	lsls	r2, r3, #29
 80076b8:	d505      	bpl.n	80076c6 <__sflush_r+0x42>
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	1ac0      	subs	r0, r0, r3
 80076be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076c0:	b10b      	cbz	r3, 80076c6 <__sflush_r+0x42>
 80076c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076c4:	1ac0      	subs	r0, r0, r3
 80076c6:	2300      	movs	r3, #0
 80076c8:	4602      	mov	r2, r0
 80076ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076cc:	4628      	mov	r0, r5
 80076ce:	6a21      	ldr	r1, [r4, #32]
 80076d0:	47b0      	blx	r6
 80076d2:	1c43      	adds	r3, r0, #1
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	d106      	bne.n	80076e6 <__sflush_r+0x62>
 80076d8:	6829      	ldr	r1, [r5, #0]
 80076da:	291d      	cmp	r1, #29
 80076dc:	d82c      	bhi.n	8007738 <__sflush_r+0xb4>
 80076de:	4a29      	ldr	r2, [pc, #164]	; (8007784 <__sflush_r+0x100>)
 80076e0:	40ca      	lsrs	r2, r1
 80076e2:	07d6      	lsls	r6, r2, #31
 80076e4:	d528      	bpl.n	8007738 <__sflush_r+0xb4>
 80076e6:	2200      	movs	r2, #0
 80076e8:	6062      	str	r2, [r4, #4]
 80076ea:	6922      	ldr	r2, [r4, #16]
 80076ec:	04d9      	lsls	r1, r3, #19
 80076ee:	6022      	str	r2, [r4, #0]
 80076f0:	d504      	bpl.n	80076fc <__sflush_r+0x78>
 80076f2:	1c42      	adds	r2, r0, #1
 80076f4:	d101      	bne.n	80076fa <__sflush_r+0x76>
 80076f6:	682b      	ldr	r3, [r5, #0]
 80076f8:	b903      	cbnz	r3, 80076fc <__sflush_r+0x78>
 80076fa:	6560      	str	r0, [r4, #84]	; 0x54
 80076fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076fe:	602f      	str	r7, [r5, #0]
 8007700:	2900      	cmp	r1, #0
 8007702:	d0cb      	beq.n	800769c <__sflush_r+0x18>
 8007704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007708:	4299      	cmp	r1, r3
 800770a:	d002      	beq.n	8007712 <__sflush_r+0x8e>
 800770c:	4628      	mov	r0, r5
 800770e:	f000 fd85 	bl	800821c <_free_r>
 8007712:	2000      	movs	r0, #0
 8007714:	6360      	str	r0, [r4, #52]	; 0x34
 8007716:	e7c2      	b.n	800769e <__sflush_r+0x1a>
 8007718:	6a21      	ldr	r1, [r4, #32]
 800771a:	2301      	movs	r3, #1
 800771c:	4628      	mov	r0, r5
 800771e:	47b0      	blx	r6
 8007720:	1c41      	adds	r1, r0, #1
 8007722:	d1c7      	bne.n	80076b4 <__sflush_r+0x30>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0c4      	beq.n	80076b4 <__sflush_r+0x30>
 800772a:	2b1d      	cmp	r3, #29
 800772c:	d001      	beq.n	8007732 <__sflush_r+0xae>
 800772e:	2b16      	cmp	r3, #22
 8007730:	d101      	bne.n	8007736 <__sflush_r+0xb2>
 8007732:	602f      	str	r7, [r5, #0]
 8007734:	e7b2      	b.n	800769c <__sflush_r+0x18>
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	e7ae      	b.n	800769e <__sflush_r+0x1a>
 8007740:	690f      	ldr	r7, [r1, #16]
 8007742:	2f00      	cmp	r7, #0
 8007744:	d0aa      	beq.n	800769c <__sflush_r+0x18>
 8007746:	0793      	lsls	r3, r2, #30
 8007748:	bf18      	it	ne
 800774a:	2300      	movne	r3, #0
 800774c:	680e      	ldr	r6, [r1, #0]
 800774e:	bf08      	it	eq
 8007750:	694b      	ldreq	r3, [r1, #20]
 8007752:	1bf6      	subs	r6, r6, r7
 8007754:	600f      	str	r7, [r1, #0]
 8007756:	608b      	str	r3, [r1, #8]
 8007758:	2e00      	cmp	r6, #0
 800775a:	dd9f      	ble.n	800769c <__sflush_r+0x18>
 800775c:	4633      	mov	r3, r6
 800775e:	463a      	mov	r2, r7
 8007760:	4628      	mov	r0, r5
 8007762:	6a21      	ldr	r1, [r4, #32]
 8007764:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007768:	47e0      	blx	ip
 800776a:	2800      	cmp	r0, #0
 800776c:	dc06      	bgt.n	800777c <__sflush_r+0xf8>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	e790      	b.n	800769e <__sflush_r+0x1a>
 800777c:	4407      	add	r7, r0
 800777e:	1a36      	subs	r6, r6, r0
 8007780:	e7ea      	b.n	8007758 <__sflush_r+0xd4>
 8007782:	bf00      	nop
 8007784:	20400001 	.word	0x20400001

08007788 <_fflush_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	690b      	ldr	r3, [r1, #16]
 800778c:	4605      	mov	r5, r0
 800778e:	460c      	mov	r4, r1
 8007790:	b913      	cbnz	r3, 8007798 <_fflush_r+0x10>
 8007792:	2500      	movs	r5, #0
 8007794:	4628      	mov	r0, r5
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	b118      	cbz	r0, 80077a2 <_fflush_r+0x1a>
 800779a:	6983      	ldr	r3, [r0, #24]
 800779c:	b90b      	cbnz	r3, 80077a2 <_fflush_r+0x1a>
 800779e:	f000 f887 	bl	80078b0 <__sinit>
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <_fflush_r+0x6c>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d11b      	bne.n	80077e0 <_fflush_r+0x58>
 80077a8:	686c      	ldr	r4, [r5, #4]
 80077aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0ef      	beq.n	8007792 <_fflush_r+0xa>
 80077b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077b4:	07d0      	lsls	r0, r2, #31
 80077b6:	d404      	bmi.n	80077c2 <_fflush_r+0x3a>
 80077b8:	0599      	lsls	r1, r3, #22
 80077ba:	d402      	bmi.n	80077c2 <_fflush_r+0x3a>
 80077bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077be:	f000 f91a 	bl	80079f6 <__retarget_lock_acquire_recursive>
 80077c2:	4628      	mov	r0, r5
 80077c4:	4621      	mov	r1, r4
 80077c6:	f7ff ff5d 	bl	8007684 <__sflush_r>
 80077ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077cc:	4605      	mov	r5, r0
 80077ce:	07da      	lsls	r2, r3, #31
 80077d0:	d4e0      	bmi.n	8007794 <_fflush_r+0xc>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	059b      	lsls	r3, r3, #22
 80077d6:	d4dd      	bmi.n	8007794 <_fflush_r+0xc>
 80077d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077da:	f000 f90d 	bl	80079f8 <__retarget_lock_release_recursive>
 80077de:	e7d9      	b.n	8007794 <_fflush_r+0xc>
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <_fflush_r+0x70>)
 80077e2:	429c      	cmp	r4, r3
 80077e4:	d101      	bne.n	80077ea <_fflush_r+0x62>
 80077e6:	68ac      	ldr	r4, [r5, #8]
 80077e8:	e7df      	b.n	80077aa <_fflush_r+0x22>
 80077ea:	4b04      	ldr	r3, [pc, #16]	; (80077fc <_fflush_r+0x74>)
 80077ec:	429c      	cmp	r4, r3
 80077ee:	bf08      	it	eq
 80077f0:	68ec      	ldreq	r4, [r5, #12]
 80077f2:	e7da      	b.n	80077aa <_fflush_r+0x22>
 80077f4:	080090d0 	.word	0x080090d0
 80077f8:	080090f0 	.word	0x080090f0
 80077fc:	080090b0 	.word	0x080090b0

08007800 <std>:
 8007800:	2300      	movs	r3, #0
 8007802:	b510      	push	{r4, lr}
 8007804:	4604      	mov	r4, r0
 8007806:	e9c0 3300 	strd	r3, r3, [r0]
 800780a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800780e:	6083      	str	r3, [r0, #8]
 8007810:	8181      	strh	r1, [r0, #12]
 8007812:	6643      	str	r3, [r0, #100]	; 0x64
 8007814:	81c2      	strh	r2, [r0, #14]
 8007816:	6183      	str	r3, [r0, #24]
 8007818:	4619      	mov	r1, r3
 800781a:	2208      	movs	r2, #8
 800781c:	305c      	adds	r0, #92	; 0x5c
 800781e:	f7fe fb17 	bl	8005e50 <memset>
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <std+0x38>)
 8007824:	6224      	str	r4, [r4, #32]
 8007826:	6263      	str	r3, [r4, #36]	; 0x24
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <std+0x3c>)
 800782a:	62a3      	str	r3, [r4, #40]	; 0x28
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <std+0x40>)
 800782e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <std+0x44>)
 8007832:	6323      	str	r3, [r4, #48]	; 0x30
 8007834:	bd10      	pop	{r4, pc}
 8007836:	bf00      	nop
 8007838:	080083f5 	.word	0x080083f5
 800783c:	08008417 	.word	0x08008417
 8007840:	0800844f 	.word	0x0800844f
 8007844:	08008473 	.word	0x08008473

08007848 <_cleanup_r>:
 8007848:	4901      	ldr	r1, [pc, #4]	; (8007850 <_cleanup_r+0x8>)
 800784a:	f000 b8af 	b.w	80079ac <_fwalk_reent>
 800784e:	bf00      	nop
 8007850:	08007789 	.word	0x08007789

08007854 <__sfmoreglue>:
 8007854:	2268      	movs	r2, #104	; 0x68
 8007856:	b570      	push	{r4, r5, r6, lr}
 8007858:	1e4d      	subs	r5, r1, #1
 800785a:	4355      	muls	r5, r2
 800785c:	460e      	mov	r6, r1
 800785e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007862:	f000 fd43 	bl	80082ec <_malloc_r>
 8007866:	4604      	mov	r4, r0
 8007868:	b140      	cbz	r0, 800787c <__sfmoreglue+0x28>
 800786a:	2100      	movs	r1, #0
 800786c:	e9c0 1600 	strd	r1, r6, [r0]
 8007870:	300c      	adds	r0, #12
 8007872:	60a0      	str	r0, [r4, #8]
 8007874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007878:	f7fe faea 	bl	8005e50 <memset>
 800787c:	4620      	mov	r0, r4
 800787e:	bd70      	pop	{r4, r5, r6, pc}

08007880 <__sfp_lock_acquire>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__sfp_lock_acquire+0x8>)
 8007882:	f000 b8b8 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	20000409 	.word	0x20000409

0800788c <__sfp_lock_release>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__sfp_lock_release+0x8>)
 800788e:	f000 b8b3 	b.w	80079f8 <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	20000409 	.word	0x20000409

08007898 <__sinit_lock_acquire>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__sinit_lock_acquire+0x8>)
 800789a:	f000 b8ac 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 800789e:	bf00      	nop
 80078a0:	2000040a 	.word	0x2000040a

080078a4 <__sinit_lock_release>:
 80078a4:	4801      	ldr	r0, [pc, #4]	; (80078ac <__sinit_lock_release+0x8>)
 80078a6:	f000 b8a7 	b.w	80079f8 <__retarget_lock_release_recursive>
 80078aa:	bf00      	nop
 80078ac:	2000040a 	.word	0x2000040a

080078b0 <__sinit>:
 80078b0:	b510      	push	{r4, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	f7ff fff0 	bl	8007898 <__sinit_lock_acquire>
 80078b8:	69a3      	ldr	r3, [r4, #24]
 80078ba:	b11b      	cbz	r3, 80078c4 <__sinit+0x14>
 80078bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c0:	f7ff bff0 	b.w	80078a4 <__sinit_lock_release>
 80078c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078c8:	6523      	str	r3, [r4, #80]	; 0x50
 80078ca:	4b13      	ldr	r3, [pc, #76]	; (8007918 <__sinit+0x68>)
 80078cc:	4a13      	ldr	r2, [pc, #76]	; (800791c <__sinit+0x6c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	bf08      	it	eq
 80078d6:	2301      	moveq	r3, #1
 80078d8:	4620      	mov	r0, r4
 80078da:	bf08      	it	eq
 80078dc:	61a3      	streq	r3, [r4, #24]
 80078de:	f000 f81f 	bl	8007920 <__sfp>
 80078e2:	6060      	str	r0, [r4, #4]
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f81b 	bl	8007920 <__sfp>
 80078ea:	60a0      	str	r0, [r4, #8]
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f817 	bl	8007920 <__sfp>
 80078f2:	2200      	movs	r2, #0
 80078f4:	2104      	movs	r1, #4
 80078f6:	60e0      	str	r0, [r4, #12]
 80078f8:	6860      	ldr	r0, [r4, #4]
 80078fa:	f7ff ff81 	bl	8007800 <std>
 80078fe:	2201      	movs	r2, #1
 8007900:	2109      	movs	r1, #9
 8007902:	68a0      	ldr	r0, [r4, #8]
 8007904:	f7ff ff7c 	bl	8007800 <std>
 8007908:	2202      	movs	r2, #2
 800790a:	2112      	movs	r1, #18
 800790c:	68e0      	ldr	r0, [r4, #12]
 800790e:	f7ff ff77 	bl	8007800 <std>
 8007912:	2301      	movs	r3, #1
 8007914:	61a3      	str	r3, [r4, #24]
 8007916:	e7d1      	b.n	80078bc <__sinit+0xc>
 8007918:	08008fe8 	.word	0x08008fe8
 800791c:	08007849 	.word	0x08007849

08007920 <__sfp>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	4607      	mov	r7, r0
 8007924:	f7ff ffac 	bl	8007880 <__sfp_lock_acquire>
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <__sfp+0x84>)
 800792a:	681e      	ldr	r6, [r3, #0]
 800792c:	69b3      	ldr	r3, [r6, #24]
 800792e:	b913      	cbnz	r3, 8007936 <__sfp+0x16>
 8007930:	4630      	mov	r0, r6
 8007932:	f7ff ffbd 	bl	80078b0 <__sinit>
 8007936:	3648      	adds	r6, #72	; 0x48
 8007938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800793c:	3b01      	subs	r3, #1
 800793e:	d503      	bpl.n	8007948 <__sfp+0x28>
 8007940:	6833      	ldr	r3, [r6, #0]
 8007942:	b30b      	cbz	r3, 8007988 <__sfp+0x68>
 8007944:	6836      	ldr	r6, [r6, #0]
 8007946:	e7f7      	b.n	8007938 <__sfp+0x18>
 8007948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800794c:	b9d5      	cbnz	r5, 8007984 <__sfp+0x64>
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <__sfp+0x88>)
 8007950:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007954:	60e3      	str	r3, [r4, #12]
 8007956:	6665      	str	r5, [r4, #100]	; 0x64
 8007958:	f000 f84c 	bl	80079f4 <__retarget_lock_init_recursive>
 800795c:	f7ff ff96 	bl	800788c <__sfp_lock_release>
 8007960:	2208      	movs	r2, #8
 8007962:	4629      	mov	r1, r5
 8007964:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007968:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800796c:	6025      	str	r5, [r4, #0]
 800796e:	61a5      	str	r5, [r4, #24]
 8007970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007974:	f7fe fa6c 	bl	8005e50 <memset>
 8007978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800797c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007980:	4620      	mov	r0, r4
 8007982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007984:	3468      	adds	r4, #104	; 0x68
 8007986:	e7d9      	b.n	800793c <__sfp+0x1c>
 8007988:	2104      	movs	r1, #4
 800798a:	4638      	mov	r0, r7
 800798c:	f7ff ff62 	bl	8007854 <__sfmoreglue>
 8007990:	4604      	mov	r4, r0
 8007992:	6030      	str	r0, [r6, #0]
 8007994:	2800      	cmp	r0, #0
 8007996:	d1d5      	bne.n	8007944 <__sfp+0x24>
 8007998:	f7ff ff78 	bl	800788c <__sfp_lock_release>
 800799c:	230c      	movs	r3, #12
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	e7ee      	b.n	8007980 <__sfp+0x60>
 80079a2:	bf00      	nop
 80079a4:	08008fe8 	.word	0x08008fe8
 80079a8:	ffff0001 	.word	0xffff0001

080079ac <_fwalk_reent>:
 80079ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b0:	4606      	mov	r6, r0
 80079b2:	4688      	mov	r8, r1
 80079b4:	2700      	movs	r7, #0
 80079b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079be:	f1b9 0901 	subs.w	r9, r9, #1
 80079c2:	d505      	bpl.n	80079d0 <_fwalk_reent+0x24>
 80079c4:	6824      	ldr	r4, [r4, #0]
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	d1f7      	bne.n	80079ba <_fwalk_reent+0xe>
 80079ca:	4638      	mov	r0, r7
 80079cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d0:	89ab      	ldrh	r3, [r5, #12]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d907      	bls.n	80079e6 <_fwalk_reent+0x3a>
 80079d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079da:	3301      	adds	r3, #1
 80079dc:	d003      	beq.n	80079e6 <_fwalk_reent+0x3a>
 80079de:	4629      	mov	r1, r5
 80079e0:	4630      	mov	r0, r6
 80079e2:	47c0      	blx	r8
 80079e4:	4307      	orrs	r7, r0
 80079e6:	3568      	adds	r5, #104	; 0x68
 80079e8:	e7e9      	b.n	80079be <_fwalk_reent+0x12>
	...

080079ec <_localeconv_r>:
 80079ec:	4800      	ldr	r0, [pc, #0]	; (80079f0 <_localeconv_r+0x4>)
 80079ee:	4770      	bx	lr
 80079f0:	2000016c 	.word	0x2000016c

080079f4 <__retarget_lock_init_recursive>:
 80079f4:	4770      	bx	lr

080079f6 <__retarget_lock_acquire_recursive>:
 80079f6:	4770      	bx	lr

080079f8 <__retarget_lock_release_recursive>:
 80079f8:	4770      	bx	lr

080079fa <__swhatbuf_r>:
 80079fa:	b570      	push	{r4, r5, r6, lr}
 80079fc:	460e      	mov	r6, r1
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	4614      	mov	r4, r2
 8007a04:	2900      	cmp	r1, #0
 8007a06:	461d      	mov	r5, r3
 8007a08:	b096      	sub	sp, #88	; 0x58
 8007a0a:	da08      	bge.n	8007a1e <__swhatbuf_r+0x24>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a12:	602a      	str	r2, [r5, #0]
 8007a14:	061a      	lsls	r2, r3, #24
 8007a16:	d410      	bmi.n	8007a3a <__swhatbuf_r+0x40>
 8007a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a1c:	e00e      	b.n	8007a3c <__swhatbuf_r+0x42>
 8007a1e:	466a      	mov	r2, sp
 8007a20:	f000 fd7e 	bl	8008520 <_fstat_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dbf1      	blt.n	8007a0c <__swhatbuf_r+0x12>
 8007a28:	9a01      	ldr	r2, [sp, #4]
 8007a2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a32:	425a      	negs	r2, r3
 8007a34:	415a      	adcs	r2, r3
 8007a36:	602a      	str	r2, [r5, #0]
 8007a38:	e7ee      	b.n	8007a18 <__swhatbuf_r+0x1e>
 8007a3a:	2340      	movs	r3, #64	; 0x40
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	b016      	add	sp, #88	; 0x58
 8007a42:	bd70      	pop	{r4, r5, r6, pc}

08007a44 <__smakebuf_r>:
 8007a44:	898b      	ldrh	r3, [r1, #12]
 8007a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a48:	079d      	lsls	r5, r3, #30
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	d507      	bpl.n	8007a60 <__smakebuf_r+0x1c>
 8007a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	2301      	movs	r3, #1
 8007a5a:	6163      	str	r3, [r4, #20]
 8007a5c:	b002      	add	sp, #8
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	466a      	mov	r2, sp
 8007a62:	ab01      	add	r3, sp, #4
 8007a64:	f7ff ffc9 	bl	80079fa <__swhatbuf_r>
 8007a68:	9900      	ldr	r1, [sp, #0]
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 fc3d 	bl	80082ec <_malloc_r>
 8007a72:	b948      	cbnz	r0, 8007a88 <__smakebuf_r+0x44>
 8007a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a78:	059a      	lsls	r2, r3, #22
 8007a7a:	d4ef      	bmi.n	8007a5c <__smakebuf_r+0x18>
 8007a7c:	f023 0303 	bic.w	r3, r3, #3
 8007a80:	f043 0302 	orr.w	r3, r3, #2
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	e7e3      	b.n	8007a50 <__smakebuf_r+0xc>
 8007a88:	4b0d      	ldr	r3, [pc, #52]	; (8007ac0 <__smakebuf_r+0x7c>)
 8007a8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	6020      	str	r0, [r4, #0]
 8007a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	6120      	str	r0, [r4, #16]
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	b15b      	cbz	r3, 8007ab8 <__smakebuf_r+0x74>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa6:	f000 fd4d 	bl	8008544 <_isatty_r>
 8007aaa:	b128      	cbz	r0, 8007ab8 <__smakebuf_r+0x74>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	89a0      	ldrh	r0, [r4, #12]
 8007aba:	4305      	orrs	r5, r0
 8007abc:	81a5      	strh	r5, [r4, #12]
 8007abe:	e7cd      	b.n	8007a5c <__smakebuf_r+0x18>
 8007ac0:	08007849 	.word	0x08007849

08007ac4 <malloc>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <malloc+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f000 bc0f 	b.w	80082ec <_malloc_r>
 8007ace:	bf00      	nop
 8007ad0:	20000018 	.word	0x20000018

08007ad4 <memchr>:
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	b2c9      	uxtb	r1, r1
 8007ada:	4402      	add	r2, r0
 8007adc:	4293      	cmp	r3, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	d101      	bne.n	8007ae6 <memchr+0x12>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e003      	b.n	8007aee <memchr+0x1a>
 8007ae6:	7804      	ldrb	r4, [r0, #0]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	428c      	cmp	r4, r1
 8007aec:	d1f6      	bne.n	8007adc <memchr+0x8>
 8007aee:	bd10      	pop	{r4, pc}

08007af0 <_Balloc>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	b976      	cbnz	r6, 8007b18 <_Balloc+0x28>
 8007afa:	2010      	movs	r0, #16
 8007afc:	f7ff ffe2 	bl	8007ac4 <malloc>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6260      	str	r0, [r4, #36]	; 0x24
 8007b04:	b920      	cbnz	r0, 8007b10 <_Balloc+0x20>
 8007b06:	2166      	movs	r1, #102	; 0x66
 8007b08:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <_Balloc+0x78>)
 8007b0a:	4818      	ldr	r0, [pc, #96]	; (8007b6c <_Balloc+0x7c>)
 8007b0c:	f000 fcc8 	bl	80084a0 <__assert_func>
 8007b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b14:	6006      	str	r6, [r0, #0]
 8007b16:	60c6      	str	r6, [r0, #12]
 8007b18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b1a:	68f3      	ldr	r3, [r6, #12]
 8007b1c:	b183      	cbz	r3, 8007b40 <_Balloc+0x50>
 8007b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b26:	b9b8      	cbnz	r0, 8007b58 <_Balloc+0x68>
 8007b28:	2101      	movs	r1, #1
 8007b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b2e:	1d72      	adds	r2, r6, #5
 8007b30:	4620      	mov	r0, r4
 8007b32:	0092      	lsls	r2, r2, #2
 8007b34:	f000 fb5e 	bl	80081f4 <_calloc_r>
 8007b38:	b160      	cbz	r0, 8007b54 <_Balloc+0x64>
 8007b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b3e:	e00e      	b.n	8007b5e <_Balloc+0x6e>
 8007b40:	2221      	movs	r2, #33	; 0x21
 8007b42:	2104      	movs	r1, #4
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fb55 	bl	80081f4 <_calloc_r>
 8007b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b4c:	60f0      	str	r0, [r6, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e4      	bne.n	8007b1e <_Balloc+0x2e>
 8007b54:	2000      	movs	r0, #0
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	6802      	ldr	r2, [r0, #0]
 8007b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b64:	e7f7      	b.n	8007b56 <_Balloc+0x66>
 8007b66:	bf00      	nop
 8007b68:	0800902d 	.word	0x0800902d
 8007b6c:	08009110 	.word	0x08009110

08007b70 <_Bfree>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b74:	4605      	mov	r5, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b976      	cbnz	r6, 8007b98 <_Bfree+0x28>
 8007b7a:	2010      	movs	r0, #16
 8007b7c:	f7ff ffa2 	bl	8007ac4 <malloc>
 8007b80:	4602      	mov	r2, r0
 8007b82:	6268      	str	r0, [r5, #36]	; 0x24
 8007b84:	b920      	cbnz	r0, 8007b90 <_Bfree+0x20>
 8007b86:	218a      	movs	r1, #138	; 0x8a
 8007b88:	4b08      	ldr	r3, [pc, #32]	; (8007bac <_Bfree+0x3c>)
 8007b8a:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <_Bfree+0x40>)
 8007b8c:	f000 fc88 	bl	80084a0 <__assert_func>
 8007b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b94:	6006      	str	r6, [r0, #0]
 8007b96:	60c6      	str	r6, [r0, #12]
 8007b98:	b13c      	cbz	r4, 8007baa <_Bfree+0x3a>
 8007b9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b9c:	6862      	ldr	r2, [r4, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ba4:	6021      	str	r1, [r4, #0]
 8007ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	0800902d 	.word	0x0800902d
 8007bb0:	08009110 	.word	0x08009110

08007bb4 <__multadd>:
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	4607      	mov	r7, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	461e      	mov	r6, r3
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	690d      	ldr	r5, [r1, #16]
 8007bc2:	f101 0c14 	add.w	ip, r1, #20
 8007bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8007bca:	3001      	adds	r0, #1
 8007bcc:	b299      	uxth	r1, r3
 8007bce:	fb02 6101 	mla	r1, r2, r1, r6
 8007bd2:	0c1e      	lsrs	r6, r3, #16
 8007bd4:	0c0b      	lsrs	r3, r1, #16
 8007bd6:	fb02 3306 	mla	r3, r2, r6, r3
 8007bda:	b289      	uxth	r1, r1
 8007bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007be0:	4285      	cmp	r5, r0
 8007be2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007be6:	f84c 1b04 	str.w	r1, [ip], #4
 8007bea:	dcec      	bgt.n	8007bc6 <__multadd+0x12>
 8007bec:	b30e      	cbz	r6, 8007c32 <__multadd+0x7e>
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dc19      	bgt.n	8007c28 <__multadd+0x74>
 8007bf4:	6861      	ldr	r1, [r4, #4]
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	3101      	adds	r1, #1
 8007bfa:	f7ff ff79 	bl	8007af0 <_Balloc>
 8007bfe:	4680      	mov	r8, r0
 8007c00:	b928      	cbnz	r0, 8007c0e <__multadd+0x5a>
 8007c02:	4602      	mov	r2, r0
 8007c04:	21b5      	movs	r1, #181	; 0xb5
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <__multadd+0x84>)
 8007c08:	480c      	ldr	r0, [pc, #48]	; (8007c3c <__multadd+0x88>)
 8007c0a:	f000 fc49 	bl	80084a0 <__assert_func>
 8007c0e:	6922      	ldr	r2, [r4, #16]
 8007c10:	f104 010c 	add.w	r1, r4, #12
 8007c14:	3202      	adds	r2, #2
 8007c16:	0092      	lsls	r2, r2, #2
 8007c18:	300c      	adds	r0, #12
 8007c1a:	f7fe f90b 	bl	8005e34 <memcpy>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7ff ffa5 	bl	8007b70 <_Bfree>
 8007c26:	4644      	mov	r4, r8
 8007c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	615e      	str	r6, [r3, #20]
 8007c30:	6125      	str	r5, [r4, #16]
 8007c32:	4620      	mov	r0, r4
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	0800909f 	.word	0x0800909f
 8007c3c:	08009110 	.word	0x08009110

08007c40 <__hi0bits>:
 8007c40:	0c02      	lsrs	r2, r0, #16
 8007c42:	0412      	lsls	r2, r2, #16
 8007c44:	4603      	mov	r3, r0
 8007c46:	b9ca      	cbnz	r2, 8007c7c <__hi0bits+0x3c>
 8007c48:	0403      	lsls	r3, r0, #16
 8007c4a:	2010      	movs	r0, #16
 8007c4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c50:	bf04      	itt	eq
 8007c52:	021b      	lsleq	r3, r3, #8
 8007c54:	3008      	addeq	r0, #8
 8007c56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c5a:	bf04      	itt	eq
 8007c5c:	011b      	lsleq	r3, r3, #4
 8007c5e:	3004      	addeq	r0, #4
 8007c60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c64:	bf04      	itt	eq
 8007c66:	009b      	lsleq	r3, r3, #2
 8007c68:	3002      	addeq	r0, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	db05      	blt.n	8007c7a <__hi0bits+0x3a>
 8007c6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007c72:	f100 0001 	add.w	r0, r0, #1
 8007c76:	bf08      	it	eq
 8007c78:	2020      	moveq	r0, #32
 8007c7a:	4770      	bx	lr
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7e5      	b.n	8007c4c <__hi0bits+0xc>

08007c80 <__lo0bits>:
 8007c80:	6803      	ldr	r3, [r0, #0]
 8007c82:	4602      	mov	r2, r0
 8007c84:	f013 0007 	ands.w	r0, r3, #7
 8007c88:	d00b      	beq.n	8007ca2 <__lo0bits+0x22>
 8007c8a:	07d9      	lsls	r1, r3, #31
 8007c8c:	d421      	bmi.n	8007cd2 <__lo0bits+0x52>
 8007c8e:	0798      	lsls	r0, r3, #30
 8007c90:	bf49      	itett	mi
 8007c92:	085b      	lsrmi	r3, r3, #1
 8007c94:	089b      	lsrpl	r3, r3, #2
 8007c96:	2001      	movmi	r0, #1
 8007c98:	6013      	strmi	r3, [r2, #0]
 8007c9a:	bf5c      	itt	pl
 8007c9c:	2002      	movpl	r0, #2
 8007c9e:	6013      	strpl	r3, [r2, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	b299      	uxth	r1, r3
 8007ca4:	b909      	cbnz	r1, 8007caa <__lo0bits+0x2a>
 8007ca6:	2010      	movs	r0, #16
 8007ca8:	0c1b      	lsrs	r3, r3, #16
 8007caa:	b2d9      	uxtb	r1, r3
 8007cac:	b909      	cbnz	r1, 8007cb2 <__lo0bits+0x32>
 8007cae:	3008      	adds	r0, #8
 8007cb0:	0a1b      	lsrs	r3, r3, #8
 8007cb2:	0719      	lsls	r1, r3, #28
 8007cb4:	bf04      	itt	eq
 8007cb6:	091b      	lsreq	r3, r3, #4
 8007cb8:	3004      	addeq	r0, #4
 8007cba:	0799      	lsls	r1, r3, #30
 8007cbc:	bf04      	itt	eq
 8007cbe:	089b      	lsreq	r3, r3, #2
 8007cc0:	3002      	addeq	r0, #2
 8007cc2:	07d9      	lsls	r1, r3, #31
 8007cc4:	d403      	bmi.n	8007cce <__lo0bits+0x4e>
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	f100 0001 	add.w	r0, r0, #1
 8007ccc:	d003      	beq.n	8007cd6 <__lo0bits+0x56>
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	4770      	bx	lr
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	4770      	bx	lr
 8007cd6:	2020      	movs	r0, #32
 8007cd8:	4770      	bx	lr
	...

08007cdc <__i2b>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	f7ff ff05 	bl	8007af0 <_Balloc>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	b928      	cbnz	r0, 8007cf6 <__i2b+0x1a>
 8007cea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cee:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <__i2b+0x24>)
 8007cf0:	4804      	ldr	r0, [pc, #16]	; (8007d04 <__i2b+0x28>)
 8007cf2:	f000 fbd5 	bl	80084a0 <__assert_func>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	6144      	str	r4, [r0, #20]
 8007cfa:	6103      	str	r3, [r0, #16]
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	0800909f 	.word	0x0800909f
 8007d04:	08009110 	.word	0x08009110

08007d08 <__multiply>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4691      	mov	r9, r2
 8007d0e:	690a      	ldr	r2, [r1, #16]
 8007d10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d14:	460c      	mov	r4, r1
 8007d16:	429a      	cmp	r2, r3
 8007d18:	bfbe      	ittt	lt
 8007d1a:	460b      	movlt	r3, r1
 8007d1c:	464c      	movlt	r4, r9
 8007d1e:	4699      	movlt	r9, r3
 8007d20:	6927      	ldr	r7, [r4, #16]
 8007d22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	6861      	ldr	r1, [r4, #4]
 8007d2a:	eb07 060a 	add.w	r6, r7, sl
 8007d2e:	42b3      	cmp	r3, r6
 8007d30:	b085      	sub	sp, #20
 8007d32:	bfb8      	it	lt
 8007d34:	3101      	addlt	r1, #1
 8007d36:	f7ff fedb 	bl	8007af0 <_Balloc>
 8007d3a:	b930      	cbnz	r0, 8007d4a <__multiply+0x42>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	f240 115d 	movw	r1, #349	; 0x15d
 8007d42:	4b43      	ldr	r3, [pc, #268]	; (8007e50 <__multiply+0x148>)
 8007d44:	4843      	ldr	r0, [pc, #268]	; (8007e54 <__multiply+0x14c>)
 8007d46:	f000 fbab 	bl	80084a0 <__assert_func>
 8007d4a:	f100 0514 	add.w	r5, r0, #20
 8007d4e:	462b      	mov	r3, r5
 8007d50:	2200      	movs	r2, #0
 8007d52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d56:	4543      	cmp	r3, r8
 8007d58:	d321      	bcc.n	8007d9e <__multiply+0x96>
 8007d5a:	f104 0314 	add.w	r3, r4, #20
 8007d5e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d62:	f109 0314 	add.w	r3, r9, #20
 8007d66:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d6a:	9202      	str	r2, [sp, #8]
 8007d6c:	1b3a      	subs	r2, r7, r4
 8007d6e:	3a15      	subs	r2, #21
 8007d70:	f022 0203 	bic.w	r2, r2, #3
 8007d74:	3204      	adds	r2, #4
 8007d76:	f104 0115 	add.w	r1, r4, #21
 8007d7a:	428f      	cmp	r7, r1
 8007d7c:	bf38      	it	cc
 8007d7e:	2204      	movcc	r2, #4
 8007d80:	9201      	str	r2, [sp, #4]
 8007d82:	9a02      	ldr	r2, [sp, #8]
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d80c      	bhi.n	8007da4 <__multiply+0x9c>
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	dd03      	ble.n	8007d96 <__multiply+0x8e>
 8007d8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d059      	beq.n	8007e4a <__multiply+0x142>
 8007d96:	6106      	str	r6, [r0, #16]
 8007d98:	b005      	add	sp, #20
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	f843 2b04 	str.w	r2, [r3], #4
 8007da2:	e7d8      	b.n	8007d56 <__multiply+0x4e>
 8007da4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007da8:	f1ba 0f00 	cmp.w	sl, #0
 8007dac:	d023      	beq.n	8007df6 <__multiply+0xee>
 8007dae:	46a9      	mov	r9, r5
 8007db0:	f04f 0c00 	mov.w	ip, #0
 8007db4:	f104 0e14 	add.w	lr, r4, #20
 8007db8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007dbc:	f8d9 1000 	ldr.w	r1, [r9]
 8007dc0:	fa1f fb82 	uxth.w	fp, r2
 8007dc4:	b289      	uxth	r1, r1
 8007dc6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007dca:	4461      	add	r1, ip
 8007dcc:	f8d9 c000 	ldr.w	ip, [r9]
 8007dd0:	0c12      	lsrs	r2, r2, #16
 8007dd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007dd6:	fb0a c202 	mla	r2, sl, r2, ip
 8007dda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dde:	b289      	uxth	r1, r1
 8007de0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007de4:	4577      	cmp	r7, lr
 8007de6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dea:	f849 1b04 	str.w	r1, [r9], #4
 8007dee:	d8e3      	bhi.n	8007db8 <__multiply+0xb0>
 8007df0:	9a01      	ldr	r2, [sp, #4]
 8007df2:	f845 c002 	str.w	ip, [r5, r2]
 8007df6:	9a03      	ldr	r2, [sp, #12]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dfe:	f1b9 0f00 	cmp.w	r9, #0
 8007e02:	d020      	beq.n	8007e46 <__multiply+0x13e>
 8007e04:	46ae      	mov	lr, r5
 8007e06:	f04f 0a00 	mov.w	sl, #0
 8007e0a:	6829      	ldr	r1, [r5, #0]
 8007e0c:	f104 0c14 	add.w	ip, r4, #20
 8007e10:	f8bc b000 	ldrh.w	fp, [ip]
 8007e14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e18:	b289      	uxth	r1, r1
 8007e1a:	fb09 220b 	mla	r2, r9, fp, r2
 8007e1e:	4492      	add	sl, r2
 8007e20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e24:	f84e 1b04 	str.w	r1, [lr], #4
 8007e28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e2c:	f8be 1000 	ldrh.w	r1, [lr]
 8007e30:	0c12      	lsrs	r2, r2, #16
 8007e32:	fb09 1102 	mla	r1, r9, r2, r1
 8007e36:	4567      	cmp	r7, ip
 8007e38:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e40:	d8e6      	bhi.n	8007e10 <__multiply+0x108>
 8007e42:	9a01      	ldr	r2, [sp, #4]
 8007e44:	50a9      	str	r1, [r5, r2]
 8007e46:	3504      	adds	r5, #4
 8007e48:	e79b      	b.n	8007d82 <__multiply+0x7a>
 8007e4a:	3e01      	subs	r6, #1
 8007e4c:	e79d      	b.n	8007d8a <__multiply+0x82>
 8007e4e:	bf00      	nop
 8007e50:	0800909f 	.word	0x0800909f
 8007e54:	08009110 	.word	0x08009110

08007e58 <__pow5mult>:
 8007e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	4615      	mov	r5, r2
 8007e5e:	f012 0203 	ands.w	r2, r2, #3
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	d007      	beq.n	8007e78 <__pow5mult+0x20>
 8007e68:	4c25      	ldr	r4, [pc, #148]	; (8007f00 <__pow5mult+0xa8>)
 8007e6a:	3a01      	subs	r2, #1
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e72:	f7ff fe9f 	bl	8007bb4 <__multadd>
 8007e76:	4607      	mov	r7, r0
 8007e78:	10ad      	asrs	r5, r5, #2
 8007e7a:	d03d      	beq.n	8007ef8 <__pow5mult+0xa0>
 8007e7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e7e:	b97c      	cbnz	r4, 8007ea0 <__pow5mult+0x48>
 8007e80:	2010      	movs	r0, #16
 8007e82:	f7ff fe1f 	bl	8007ac4 <malloc>
 8007e86:	4602      	mov	r2, r0
 8007e88:	6270      	str	r0, [r6, #36]	; 0x24
 8007e8a:	b928      	cbnz	r0, 8007e98 <__pow5mult+0x40>
 8007e8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <__pow5mult+0xac>)
 8007e92:	481d      	ldr	r0, [pc, #116]	; (8007f08 <__pow5mult+0xb0>)
 8007e94:	f000 fb04 	bl	80084a0 <__assert_func>
 8007e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e9c:	6004      	str	r4, [r0, #0]
 8007e9e:	60c4      	str	r4, [r0, #12]
 8007ea0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ea8:	b94c      	cbnz	r4, 8007ebe <__pow5mult+0x66>
 8007eaa:	f240 2171 	movw	r1, #625	; 0x271
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7ff ff14 	bl	8007cdc <__i2b>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	07eb      	lsls	r3, r5, #31
 8007ec4:	d50a      	bpl.n	8007edc <__pow5mult+0x84>
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7ff ff1c 	bl	8007d08 <__multiply>
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7ff fe4b 	bl	8007b70 <_Bfree>
 8007eda:	4647      	mov	r7, r8
 8007edc:	106d      	asrs	r5, r5, #1
 8007ede:	d00b      	beq.n	8007ef8 <__pow5mult+0xa0>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	b938      	cbnz	r0, 8007ef4 <__pow5mult+0x9c>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff ff0d 	bl	8007d08 <__multiply>
 8007eee:	6020      	str	r0, [r4, #0]
 8007ef0:	f8c0 9000 	str.w	r9, [r0]
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	e7e4      	b.n	8007ec2 <__pow5mult+0x6a>
 8007ef8:	4638      	mov	r0, r7
 8007efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efe:	bf00      	nop
 8007f00:	08009260 	.word	0x08009260
 8007f04:	0800902d 	.word	0x0800902d
 8007f08:	08009110 	.word	0x08009110

08007f0c <__lshift>:
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	460c      	mov	r4, r1
 8007f12:	4607      	mov	r7, r0
 8007f14:	4691      	mov	r9, r2
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	6849      	ldr	r1, [r1, #4]
 8007f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f24:	f108 0601 	add.w	r6, r8, #1
 8007f28:	42b3      	cmp	r3, r6
 8007f2a:	db0b      	blt.n	8007f44 <__lshift+0x38>
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f7ff fddf 	bl	8007af0 <_Balloc>
 8007f32:	4605      	mov	r5, r0
 8007f34:	b948      	cbnz	r0, 8007f4a <__lshift+0x3e>
 8007f36:	4602      	mov	r2, r0
 8007f38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f3c:	4b29      	ldr	r3, [pc, #164]	; (8007fe4 <__lshift+0xd8>)
 8007f3e:	482a      	ldr	r0, [pc, #168]	; (8007fe8 <__lshift+0xdc>)
 8007f40:	f000 faae 	bl	80084a0 <__assert_func>
 8007f44:	3101      	adds	r1, #1
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	e7ee      	b.n	8007f28 <__lshift+0x1c>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f100 0114 	add.w	r1, r0, #20
 8007f50:	f100 0210 	add.w	r2, r0, #16
 8007f54:	4618      	mov	r0, r3
 8007f56:	4553      	cmp	r3, sl
 8007f58:	db37      	blt.n	8007fca <__lshift+0xbe>
 8007f5a:	6920      	ldr	r0, [r4, #16]
 8007f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f60:	f104 0314 	add.w	r3, r4, #20
 8007f64:	f019 091f 	ands.w	r9, r9, #31
 8007f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f70:	d02f      	beq.n	8007fd2 <__lshift+0xc6>
 8007f72:	468a      	mov	sl, r1
 8007f74:	f04f 0c00 	mov.w	ip, #0
 8007f78:	f1c9 0e20 	rsb	lr, r9, #32
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	fa02 f209 	lsl.w	r2, r2, r9
 8007f82:	ea42 020c 	orr.w	r2, r2, ip
 8007f86:	f84a 2b04 	str.w	r2, [sl], #4
 8007f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8e:	4298      	cmp	r0, r3
 8007f90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f94:	d8f2      	bhi.n	8007f7c <__lshift+0x70>
 8007f96:	1b03      	subs	r3, r0, r4
 8007f98:	3b15      	subs	r3, #21
 8007f9a:	f023 0303 	bic.w	r3, r3, #3
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	f104 0215 	add.w	r2, r4, #21
 8007fa4:	4290      	cmp	r0, r2
 8007fa6:	bf38      	it	cc
 8007fa8:	2304      	movcc	r3, #4
 8007faa:	f841 c003 	str.w	ip, [r1, r3]
 8007fae:	f1bc 0f00 	cmp.w	ip, #0
 8007fb2:	d001      	beq.n	8007fb8 <__lshift+0xac>
 8007fb4:	f108 0602 	add.w	r6, r8, #2
 8007fb8:	3e01      	subs	r6, #1
 8007fba:	4638      	mov	r0, r7
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	612e      	str	r6, [r5, #16]
 8007fc0:	f7ff fdd6 	bl	8007b70 <_Bfree>
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fca:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fce:	3301      	adds	r3, #1
 8007fd0:	e7c1      	b.n	8007f56 <__lshift+0x4a>
 8007fd2:	3904      	subs	r1, #4
 8007fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd8:	4298      	cmp	r0, r3
 8007fda:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fde:	d8f9      	bhi.n	8007fd4 <__lshift+0xc8>
 8007fe0:	e7ea      	b.n	8007fb8 <__lshift+0xac>
 8007fe2:	bf00      	nop
 8007fe4:	0800909f 	.word	0x0800909f
 8007fe8:	08009110 	.word	0x08009110

08007fec <__mcmp>:
 8007fec:	4603      	mov	r3, r0
 8007fee:	690a      	ldr	r2, [r1, #16]
 8007ff0:	6900      	ldr	r0, [r0, #16]
 8007ff2:	b530      	push	{r4, r5, lr}
 8007ff4:	1a80      	subs	r0, r0, r2
 8007ff6:	d10d      	bne.n	8008014 <__mcmp+0x28>
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	3114      	adds	r1, #20
 8007ffc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008000:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800800c:	4295      	cmp	r5, r2
 800800e:	d002      	beq.n	8008016 <__mcmp+0x2a>
 8008010:	d304      	bcc.n	800801c <__mcmp+0x30>
 8008012:	2001      	movs	r0, #1
 8008014:	bd30      	pop	{r4, r5, pc}
 8008016:	42a3      	cmp	r3, r4
 8008018:	d3f4      	bcc.n	8008004 <__mcmp+0x18>
 800801a:	e7fb      	b.n	8008014 <__mcmp+0x28>
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	e7f8      	b.n	8008014 <__mcmp+0x28>
	...

08008024 <__mdiff>:
 8008024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	460d      	mov	r5, r1
 800802a:	4607      	mov	r7, r0
 800802c:	4611      	mov	r1, r2
 800802e:	4628      	mov	r0, r5
 8008030:	4614      	mov	r4, r2
 8008032:	f7ff ffdb 	bl	8007fec <__mcmp>
 8008036:	1e06      	subs	r6, r0, #0
 8008038:	d111      	bne.n	800805e <__mdiff+0x3a>
 800803a:	4631      	mov	r1, r6
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff fd57 	bl	8007af0 <_Balloc>
 8008042:	4602      	mov	r2, r0
 8008044:	b928      	cbnz	r0, 8008052 <__mdiff+0x2e>
 8008046:	f240 2132 	movw	r1, #562	; 0x232
 800804a:	4b3a      	ldr	r3, [pc, #232]	; (8008134 <__mdiff+0x110>)
 800804c:	483a      	ldr	r0, [pc, #232]	; (8008138 <__mdiff+0x114>)
 800804e:	f000 fa27 	bl	80084a0 <__assert_func>
 8008052:	2301      	movs	r3, #1
 8008054:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008058:	4610      	mov	r0, r2
 800805a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	bfa4      	itt	ge
 8008060:	4623      	movge	r3, r4
 8008062:	462c      	movge	r4, r5
 8008064:	4638      	mov	r0, r7
 8008066:	6861      	ldr	r1, [r4, #4]
 8008068:	bfa6      	itte	ge
 800806a:	461d      	movge	r5, r3
 800806c:	2600      	movge	r6, #0
 800806e:	2601      	movlt	r6, #1
 8008070:	f7ff fd3e 	bl	8007af0 <_Balloc>
 8008074:	4602      	mov	r2, r0
 8008076:	b918      	cbnz	r0, 8008080 <__mdiff+0x5c>
 8008078:	f44f 7110 	mov.w	r1, #576	; 0x240
 800807c:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <__mdiff+0x110>)
 800807e:	e7e5      	b.n	800804c <__mdiff+0x28>
 8008080:	f102 0814 	add.w	r8, r2, #20
 8008084:	46c2      	mov	sl, r8
 8008086:	f04f 0c00 	mov.w	ip, #0
 800808a:	6927      	ldr	r7, [r4, #16]
 800808c:	60c6      	str	r6, [r0, #12]
 800808e:	692e      	ldr	r6, [r5, #16]
 8008090:	f104 0014 	add.w	r0, r4, #20
 8008094:	f105 0914 	add.w	r9, r5, #20
 8008098:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800809c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080a0:	3410      	adds	r4, #16
 80080a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80080a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80080aa:	fa1f f18b 	uxth.w	r1, fp
 80080ae:	448c      	add	ip, r1
 80080b0:	b299      	uxth	r1, r3
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	ebac 0101 	sub.w	r1, ip, r1
 80080b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80080c0:	b289      	uxth	r1, r1
 80080c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80080c6:	454e      	cmp	r6, r9
 80080c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80080cc:	f84a 3b04 	str.w	r3, [sl], #4
 80080d0:	d8e7      	bhi.n	80080a2 <__mdiff+0x7e>
 80080d2:	1b73      	subs	r3, r6, r5
 80080d4:	3b15      	subs	r3, #21
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	3515      	adds	r5, #21
 80080dc:	3304      	adds	r3, #4
 80080de:	42ae      	cmp	r6, r5
 80080e0:	bf38      	it	cc
 80080e2:	2304      	movcc	r3, #4
 80080e4:	4418      	add	r0, r3
 80080e6:	4443      	add	r3, r8
 80080e8:	461e      	mov	r6, r3
 80080ea:	4605      	mov	r5, r0
 80080ec:	4575      	cmp	r5, lr
 80080ee:	d30e      	bcc.n	800810e <__mdiff+0xea>
 80080f0:	f10e 0103 	add.w	r1, lr, #3
 80080f4:	1a09      	subs	r1, r1, r0
 80080f6:	f021 0103 	bic.w	r1, r1, #3
 80080fa:	3803      	subs	r0, #3
 80080fc:	4586      	cmp	lr, r0
 80080fe:	bf38      	it	cc
 8008100:	2100      	movcc	r1, #0
 8008102:	4419      	add	r1, r3
 8008104:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008108:	b18b      	cbz	r3, 800812e <__mdiff+0x10a>
 800810a:	6117      	str	r7, [r2, #16]
 800810c:	e7a4      	b.n	8008058 <__mdiff+0x34>
 800810e:	f855 8b04 	ldr.w	r8, [r5], #4
 8008112:	fa1f f188 	uxth.w	r1, r8
 8008116:	4461      	add	r1, ip
 8008118:	140c      	asrs	r4, r1, #16
 800811a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800811e:	b289      	uxth	r1, r1
 8008120:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008124:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008128:	f846 1b04 	str.w	r1, [r6], #4
 800812c:	e7de      	b.n	80080ec <__mdiff+0xc8>
 800812e:	3f01      	subs	r7, #1
 8008130:	e7e8      	b.n	8008104 <__mdiff+0xe0>
 8008132:	bf00      	nop
 8008134:	0800909f 	.word	0x0800909f
 8008138:	08009110 	.word	0x08009110

0800813c <__d2b>:
 800813c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008140:	2101      	movs	r1, #1
 8008142:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008146:	4690      	mov	r8, r2
 8008148:	461d      	mov	r5, r3
 800814a:	f7ff fcd1 	bl	8007af0 <_Balloc>
 800814e:	4604      	mov	r4, r0
 8008150:	b930      	cbnz	r0, 8008160 <__d2b+0x24>
 8008152:	4602      	mov	r2, r0
 8008154:	f240 310a 	movw	r1, #778	; 0x30a
 8008158:	4b24      	ldr	r3, [pc, #144]	; (80081ec <__d2b+0xb0>)
 800815a:	4825      	ldr	r0, [pc, #148]	; (80081f0 <__d2b+0xb4>)
 800815c:	f000 f9a0 	bl	80084a0 <__assert_func>
 8008160:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008164:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008168:	bb2d      	cbnz	r5, 80081b6 <__d2b+0x7a>
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	f1b8 0300 	subs.w	r3, r8, #0
 8008170:	d026      	beq.n	80081c0 <__d2b+0x84>
 8008172:	4668      	mov	r0, sp
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	f7ff fd83 	bl	8007c80 <__lo0bits>
 800817a:	9900      	ldr	r1, [sp, #0]
 800817c:	b1f0      	cbz	r0, 80081bc <__d2b+0x80>
 800817e:	9a01      	ldr	r2, [sp, #4]
 8008180:	f1c0 0320 	rsb	r3, r0, #32
 8008184:	fa02 f303 	lsl.w	r3, r2, r3
 8008188:	430b      	orrs	r3, r1
 800818a:	40c2      	lsrs	r2, r0
 800818c:	6163      	str	r3, [r4, #20]
 800818e:	9201      	str	r2, [sp, #4]
 8008190:	9b01      	ldr	r3, [sp, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	bf14      	ite	ne
 8008196:	2102      	movne	r1, #2
 8008198:	2101      	moveq	r1, #1
 800819a:	61a3      	str	r3, [r4, #24]
 800819c:	6121      	str	r1, [r4, #16]
 800819e:	b1c5      	cbz	r5, 80081d2 <__d2b+0x96>
 80081a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081a4:	4405      	add	r5, r0
 80081a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081aa:	603d      	str	r5, [r7, #0]
 80081ac:	6030      	str	r0, [r6, #0]
 80081ae:	4620      	mov	r0, r4
 80081b0:	b002      	add	sp, #8
 80081b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081ba:	e7d6      	b.n	800816a <__d2b+0x2e>
 80081bc:	6161      	str	r1, [r4, #20]
 80081be:	e7e7      	b.n	8008190 <__d2b+0x54>
 80081c0:	a801      	add	r0, sp, #4
 80081c2:	f7ff fd5d 	bl	8007c80 <__lo0bits>
 80081c6:	2101      	movs	r1, #1
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	6121      	str	r1, [r4, #16]
 80081cc:	6163      	str	r3, [r4, #20]
 80081ce:	3020      	adds	r0, #32
 80081d0:	e7e5      	b.n	800819e <__d2b+0x62>
 80081d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80081d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081da:	6038      	str	r0, [r7, #0]
 80081dc:	6918      	ldr	r0, [r3, #16]
 80081de:	f7ff fd2f 	bl	8007c40 <__hi0bits>
 80081e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80081e6:	6031      	str	r1, [r6, #0]
 80081e8:	e7e1      	b.n	80081ae <__d2b+0x72>
 80081ea:	bf00      	nop
 80081ec:	0800909f 	.word	0x0800909f
 80081f0:	08009110 	.word	0x08009110

080081f4 <_calloc_r>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	fba1 5402 	umull	r5, r4, r1, r2
 80081fa:	b934      	cbnz	r4, 800820a <_calloc_r+0x16>
 80081fc:	4629      	mov	r1, r5
 80081fe:	f000 f875 	bl	80082ec <_malloc_r>
 8008202:	4606      	mov	r6, r0
 8008204:	b928      	cbnz	r0, 8008212 <_calloc_r+0x1e>
 8008206:	4630      	mov	r0, r6
 8008208:	bd70      	pop	{r4, r5, r6, pc}
 800820a:	220c      	movs	r2, #12
 800820c:	2600      	movs	r6, #0
 800820e:	6002      	str	r2, [r0, #0]
 8008210:	e7f9      	b.n	8008206 <_calloc_r+0x12>
 8008212:	462a      	mov	r2, r5
 8008214:	4621      	mov	r1, r4
 8008216:	f7fd fe1b 	bl	8005e50 <memset>
 800821a:	e7f4      	b.n	8008206 <_calloc_r+0x12>

0800821c <_free_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4605      	mov	r5, r0
 8008220:	2900      	cmp	r1, #0
 8008222:	d040      	beq.n	80082a6 <_free_r+0x8a>
 8008224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008228:	1f0c      	subs	r4, r1, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	bfb8      	it	lt
 800822e:	18e4      	addlt	r4, r4, r3
 8008230:	f000 f9bc 	bl	80085ac <__malloc_lock>
 8008234:	4a1c      	ldr	r2, [pc, #112]	; (80082a8 <_free_r+0x8c>)
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	b933      	cbnz	r3, 8008248 <_free_r+0x2c>
 800823a:	6063      	str	r3, [r4, #4]
 800823c:	6014      	str	r4, [r2, #0]
 800823e:	4628      	mov	r0, r5
 8008240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008244:	f000 b9b8 	b.w	80085b8 <__malloc_unlock>
 8008248:	42a3      	cmp	r3, r4
 800824a:	d908      	bls.n	800825e <_free_r+0x42>
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	1821      	adds	r1, r4, r0
 8008250:	428b      	cmp	r3, r1
 8008252:	bf01      	itttt	eq
 8008254:	6819      	ldreq	r1, [r3, #0]
 8008256:	685b      	ldreq	r3, [r3, #4]
 8008258:	1809      	addeq	r1, r1, r0
 800825a:	6021      	streq	r1, [r4, #0]
 800825c:	e7ed      	b.n	800823a <_free_r+0x1e>
 800825e:	461a      	mov	r2, r3
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	b10b      	cbz	r3, 8008268 <_free_r+0x4c>
 8008264:	42a3      	cmp	r3, r4
 8008266:	d9fa      	bls.n	800825e <_free_r+0x42>
 8008268:	6811      	ldr	r1, [r2, #0]
 800826a:	1850      	adds	r0, r2, r1
 800826c:	42a0      	cmp	r0, r4
 800826e:	d10b      	bne.n	8008288 <_free_r+0x6c>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	4401      	add	r1, r0
 8008274:	1850      	adds	r0, r2, r1
 8008276:	4283      	cmp	r3, r0
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	d1e0      	bne.n	800823e <_free_r+0x22>
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4401      	add	r1, r0
 8008282:	6011      	str	r1, [r2, #0]
 8008284:	6053      	str	r3, [r2, #4]
 8008286:	e7da      	b.n	800823e <_free_r+0x22>
 8008288:	d902      	bls.n	8008290 <_free_r+0x74>
 800828a:	230c      	movs	r3, #12
 800828c:	602b      	str	r3, [r5, #0]
 800828e:	e7d6      	b.n	800823e <_free_r+0x22>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	1821      	adds	r1, r4, r0
 8008294:	428b      	cmp	r3, r1
 8008296:	bf01      	itttt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	1809      	addeq	r1, r1, r0
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	6063      	str	r3, [r4, #4]
 80082a2:	6054      	str	r4, [r2, #4]
 80082a4:	e7cb      	b.n	800823e <_free_r+0x22>
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	2000040c 	.word	0x2000040c

080082ac <sbrk_aligned>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	4e0e      	ldr	r6, [pc, #56]	; (80082e8 <sbrk_aligned+0x3c>)
 80082b0:	460c      	mov	r4, r1
 80082b2:	6831      	ldr	r1, [r6, #0]
 80082b4:	4605      	mov	r5, r0
 80082b6:	b911      	cbnz	r1, 80082be <sbrk_aligned+0x12>
 80082b8:	f000 f88c 	bl	80083d4 <_sbrk_r>
 80082bc:	6030      	str	r0, [r6, #0]
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f887 	bl	80083d4 <_sbrk_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	d00a      	beq.n	80082e0 <sbrk_aligned+0x34>
 80082ca:	1cc4      	adds	r4, r0, #3
 80082cc:	f024 0403 	bic.w	r4, r4, #3
 80082d0:	42a0      	cmp	r0, r4
 80082d2:	d007      	beq.n	80082e4 <sbrk_aligned+0x38>
 80082d4:	1a21      	subs	r1, r4, r0
 80082d6:	4628      	mov	r0, r5
 80082d8:	f000 f87c 	bl	80083d4 <_sbrk_r>
 80082dc:	3001      	adds	r0, #1
 80082de:	d101      	bne.n	80082e4 <sbrk_aligned+0x38>
 80082e0:	f04f 34ff 	mov.w	r4, #4294967295
 80082e4:	4620      	mov	r0, r4
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	20000410 	.word	0x20000410

080082ec <_malloc_r>:
 80082ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	1ccd      	adds	r5, r1, #3
 80082f2:	f025 0503 	bic.w	r5, r5, #3
 80082f6:	3508      	adds	r5, #8
 80082f8:	2d0c      	cmp	r5, #12
 80082fa:	bf38      	it	cc
 80082fc:	250c      	movcc	r5, #12
 80082fe:	2d00      	cmp	r5, #0
 8008300:	4607      	mov	r7, r0
 8008302:	db01      	blt.n	8008308 <_malloc_r+0x1c>
 8008304:	42a9      	cmp	r1, r5
 8008306:	d905      	bls.n	8008314 <_malloc_r+0x28>
 8008308:	230c      	movs	r3, #12
 800830a:	2600      	movs	r6, #0
 800830c:	603b      	str	r3, [r7, #0]
 800830e:	4630      	mov	r0, r6
 8008310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008314:	4e2e      	ldr	r6, [pc, #184]	; (80083d0 <_malloc_r+0xe4>)
 8008316:	f000 f949 	bl	80085ac <__malloc_lock>
 800831a:	6833      	ldr	r3, [r6, #0]
 800831c:	461c      	mov	r4, r3
 800831e:	bb34      	cbnz	r4, 800836e <_malloc_r+0x82>
 8008320:	4629      	mov	r1, r5
 8008322:	4638      	mov	r0, r7
 8008324:	f7ff ffc2 	bl	80082ac <sbrk_aligned>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	4604      	mov	r4, r0
 800832c:	d14d      	bne.n	80083ca <_malloc_r+0xde>
 800832e:	6834      	ldr	r4, [r6, #0]
 8008330:	4626      	mov	r6, r4
 8008332:	2e00      	cmp	r6, #0
 8008334:	d140      	bne.n	80083b8 <_malloc_r+0xcc>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	4631      	mov	r1, r6
 800833a:	4638      	mov	r0, r7
 800833c:	eb04 0803 	add.w	r8, r4, r3
 8008340:	f000 f848 	bl	80083d4 <_sbrk_r>
 8008344:	4580      	cmp	r8, r0
 8008346:	d13a      	bne.n	80083be <_malloc_r+0xd2>
 8008348:	6821      	ldr	r1, [r4, #0]
 800834a:	3503      	adds	r5, #3
 800834c:	1a6d      	subs	r5, r5, r1
 800834e:	f025 0503 	bic.w	r5, r5, #3
 8008352:	3508      	adds	r5, #8
 8008354:	2d0c      	cmp	r5, #12
 8008356:	bf38      	it	cc
 8008358:	250c      	movcc	r5, #12
 800835a:	4638      	mov	r0, r7
 800835c:	4629      	mov	r1, r5
 800835e:	f7ff ffa5 	bl	80082ac <sbrk_aligned>
 8008362:	3001      	adds	r0, #1
 8008364:	d02b      	beq.n	80083be <_malloc_r+0xd2>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	442b      	add	r3, r5
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	e00e      	b.n	800838c <_malloc_r+0xa0>
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	1b52      	subs	r2, r2, r5
 8008372:	d41e      	bmi.n	80083b2 <_malloc_r+0xc6>
 8008374:	2a0b      	cmp	r2, #11
 8008376:	d916      	bls.n	80083a6 <_malloc_r+0xba>
 8008378:	1961      	adds	r1, r4, r5
 800837a:	42a3      	cmp	r3, r4
 800837c:	6025      	str	r5, [r4, #0]
 800837e:	bf18      	it	ne
 8008380:	6059      	strne	r1, [r3, #4]
 8008382:	6863      	ldr	r3, [r4, #4]
 8008384:	bf08      	it	eq
 8008386:	6031      	streq	r1, [r6, #0]
 8008388:	5162      	str	r2, [r4, r5]
 800838a:	604b      	str	r3, [r1, #4]
 800838c:	4638      	mov	r0, r7
 800838e:	f104 060b 	add.w	r6, r4, #11
 8008392:	f000 f911 	bl	80085b8 <__malloc_unlock>
 8008396:	f026 0607 	bic.w	r6, r6, #7
 800839a:	1d23      	adds	r3, r4, #4
 800839c:	1af2      	subs	r2, r6, r3
 800839e:	d0b6      	beq.n	800830e <_malloc_r+0x22>
 80083a0:	1b9b      	subs	r3, r3, r6
 80083a2:	50a3      	str	r3, [r4, r2]
 80083a4:	e7b3      	b.n	800830e <_malloc_r+0x22>
 80083a6:	6862      	ldr	r2, [r4, #4]
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	bf0c      	ite	eq
 80083ac:	6032      	streq	r2, [r6, #0]
 80083ae:	605a      	strne	r2, [r3, #4]
 80083b0:	e7ec      	b.n	800838c <_malloc_r+0xa0>
 80083b2:	4623      	mov	r3, r4
 80083b4:	6864      	ldr	r4, [r4, #4]
 80083b6:	e7b2      	b.n	800831e <_malloc_r+0x32>
 80083b8:	4634      	mov	r4, r6
 80083ba:	6876      	ldr	r6, [r6, #4]
 80083bc:	e7b9      	b.n	8008332 <_malloc_r+0x46>
 80083be:	230c      	movs	r3, #12
 80083c0:	4638      	mov	r0, r7
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	f000 f8f8 	bl	80085b8 <__malloc_unlock>
 80083c8:	e7a1      	b.n	800830e <_malloc_r+0x22>
 80083ca:	6025      	str	r5, [r4, #0]
 80083cc:	e7de      	b.n	800838c <_malloc_r+0xa0>
 80083ce:	bf00      	nop
 80083d0:	2000040c 	.word	0x2000040c

080083d4 <_sbrk_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	2300      	movs	r3, #0
 80083d8:	4d05      	ldr	r5, [pc, #20]	; (80083f0 <_sbrk_r+0x1c>)
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7f9 fdae 	bl	8001f40 <_sbrk>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_sbrk_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_sbrk_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20000414 	.word	0x20000414

080083f4 <__sread>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	460c      	mov	r4, r1
 80083f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fc:	f000 fa3a 	bl	8008874 <_read_r>
 8008400:	2800      	cmp	r0, #0
 8008402:	bfab      	itete	ge
 8008404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008406:	89a3      	ldrhlt	r3, [r4, #12]
 8008408:	181b      	addge	r3, r3, r0
 800840a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800840e:	bfac      	ite	ge
 8008410:	6563      	strge	r3, [r4, #84]	; 0x54
 8008412:	81a3      	strhlt	r3, [r4, #12]
 8008414:	bd10      	pop	{r4, pc}

08008416 <__swrite>:
 8008416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841a:	461f      	mov	r7, r3
 800841c:	898b      	ldrh	r3, [r1, #12]
 800841e:	4605      	mov	r5, r0
 8008420:	05db      	lsls	r3, r3, #23
 8008422:	460c      	mov	r4, r1
 8008424:	4616      	mov	r6, r2
 8008426:	d505      	bpl.n	8008434 <__swrite+0x1e>
 8008428:	2302      	movs	r3, #2
 800842a:	2200      	movs	r2, #0
 800842c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008430:	f000 f898 	bl	8008564 <_lseek_r>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	4632      	mov	r2, r6
 8008438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800843c:	81a3      	strh	r3, [r4, #12]
 800843e:	4628      	mov	r0, r5
 8008440:	463b      	mov	r3, r7
 8008442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844a:	f000 b817 	b.w	800847c <_write_r>

0800844e <__sseek>:
 800844e:	b510      	push	{r4, lr}
 8008450:	460c      	mov	r4, r1
 8008452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008456:	f000 f885 	bl	8008564 <_lseek_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	bf15      	itete	ne
 8008460:	6560      	strne	r0, [r4, #84]	; 0x54
 8008462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800846a:	81a3      	strheq	r3, [r4, #12]
 800846c:	bf18      	it	ne
 800846e:	81a3      	strhne	r3, [r4, #12]
 8008470:	bd10      	pop	{r4, pc}

08008472 <__sclose>:
 8008472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008476:	f000 b831 	b.w	80084dc <_close_r>
	...

0800847c <_write_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	2200      	movs	r2, #0
 8008486:	4d05      	ldr	r5, [pc, #20]	; (800849c <_write_r+0x20>)
 8008488:	602a      	str	r2, [r5, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	f7f9 fd0c 	bl	8001ea8 <_write>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_write_r+0x1e>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_write_r+0x1e>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000414 	.word	0x20000414

080084a0 <__assert_func>:
 80084a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084a2:	4614      	mov	r4, r2
 80084a4:	461a      	mov	r2, r3
 80084a6:	4b09      	ldr	r3, [pc, #36]	; (80084cc <__assert_func+0x2c>)
 80084a8:	4605      	mov	r5, r0
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68d8      	ldr	r0, [r3, #12]
 80084ae:	b14c      	cbz	r4, 80084c4 <__assert_func+0x24>
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <__assert_func+0x30>)
 80084b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084b6:	9100      	str	r1, [sp, #0]
 80084b8:	462b      	mov	r3, r5
 80084ba:	4906      	ldr	r1, [pc, #24]	; (80084d4 <__assert_func+0x34>)
 80084bc:	f000 f81e 	bl	80084fc <fiprintf>
 80084c0:	f000 f9f7 	bl	80088b2 <abort>
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <__assert_func+0x38>)
 80084c6:	461c      	mov	r4, r3
 80084c8:	e7f3      	b.n	80084b2 <__assert_func+0x12>
 80084ca:	bf00      	nop
 80084cc:	20000018 	.word	0x20000018
 80084d0:	0800926c 	.word	0x0800926c
 80084d4:	08009279 	.word	0x08009279
 80084d8:	080092a7 	.word	0x080092a7

080084dc <_close_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	2300      	movs	r3, #0
 80084e0:	4d05      	ldr	r5, [pc, #20]	; (80084f8 <_close_r+0x1c>)
 80084e2:	4604      	mov	r4, r0
 80084e4:	4608      	mov	r0, r1
 80084e6:	602b      	str	r3, [r5, #0]
 80084e8:	f7f9 fcfa 	bl	8001ee0 <_close>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d102      	bne.n	80084f6 <_close_r+0x1a>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	b103      	cbz	r3, 80084f6 <_close_r+0x1a>
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	20000414 	.word	0x20000414

080084fc <fiprintf>:
 80084fc:	b40e      	push	{r1, r2, r3}
 80084fe:	b503      	push	{r0, r1, lr}
 8008500:	4601      	mov	r1, r0
 8008502:	ab03      	add	r3, sp, #12
 8008504:	4805      	ldr	r0, [pc, #20]	; (800851c <fiprintf+0x20>)
 8008506:	f853 2b04 	ldr.w	r2, [r3], #4
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	f000 f881 	bl	8008614 <_vfiprintf_r>
 8008512:	b002      	add	sp, #8
 8008514:	f85d eb04 	ldr.w	lr, [sp], #4
 8008518:	b003      	add	sp, #12
 800851a:	4770      	bx	lr
 800851c:	20000018 	.word	0x20000018

08008520 <_fstat_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	2300      	movs	r3, #0
 8008524:	4d06      	ldr	r5, [pc, #24]	; (8008540 <_fstat_r+0x20>)
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	4611      	mov	r1, r2
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	f7f9 fce2 	bl	8001ef6 <_fstat>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d102      	bne.n	800853c <_fstat_r+0x1c>
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	b103      	cbz	r3, 800853c <_fstat_r+0x1c>
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	20000414 	.word	0x20000414

08008544 <_isatty_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	2300      	movs	r3, #0
 8008548:	4d05      	ldr	r5, [pc, #20]	; (8008560 <_isatty_r+0x1c>)
 800854a:	4604      	mov	r4, r0
 800854c:	4608      	mov	r0, r1
 800854e:	602b      	str	r3, [r5, #0]
 8008550:	f7f9 fce0 	bl	8001f14 <_isatty>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_isatty_r+0x1a>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_isatty_r+0x1a>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	20000414 	.word	0x20000414

08008564 <_lseek_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
 800856c:	2200      	movs	r2, #0
 800856e:	4d05      	ldr	r5, [pc, #20]	; (8008584 <_lseek_r+0x20>)
 8008570:	602a      	str	r2, [r5, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	f7f9 fcd8 	bl	8001f28 <_lseek>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_lseek_r+0x1e>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_lseek_r+0x1e>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	20000414 	.word	0x20000414

08008588 <__ascii_mbtowc>:
 8008588:	b082      	sub	sp, #8
 800858a:	b901      	cbnz	r1, 800858e <__ascii_mbtowc+0x6>
 800858c:	a901      	add	r1, sp, #4
 800858e:	b142      	cbz	r2, 80085a2 <__ascii_mbtowc+0x1a>
 8008590:	b14b      	cbz	r3, 80085a6 <__ascii_mbtowc+0x1e>
 8008592:	7813      	ldrb	r3, [r2, #0]
 8008594:	600b      	str	r3, [r1, #0]
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	1e10      	subs	r0, r2, #0
 800859a:	bf18      	it	ne
 800859c:	2001      	movne	r0, #1
 800859e:	b002      	add	sp, #8
 80085a0:	4770      	bx	lr
 80085a2:	4610      	mov	r0, r2
 80085a4:	e7fb      	b.n	800859e <__ascii_mbtowc+0x16>
 80085a6:	f06f 0001 	mvn.w	r0, #1
 80085aa:	e7f8      	b.n	800859e <__ascii_mbtowc+0x16>

080085ac <__malloc_lock>:
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <__malloc_lock+0x8>)
 80085ae:	f7ff ba22 	b.w	80079f6 <__retarget_lock_acquire_recursive>
 80085b2:	bf00      	nop
 80085b4:	20000408 	.word	0x20000408

080085b8 <__malloc_unlock>:
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <__malloc_unlock+0x8>)
 80085ba:	f7ff ba1d 	b.w	80079f8 <__retarget_lock_release_recursive>
 80085be:	bf00      	nop
 80085c0:	20000408 	.word	0x20000408

080085c4 <__sfputc_r>:
 80085c4:	6893      	ldr	r3, [r2, #8]
 80085c6:	b410      	push	{r4}
 80085c8:	3b01      	subs	r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	6093      	str	r3, [r2, #8]
 80085ce:	da07      	bge.n	80085e0 <__sfputc_r+0x1c>
 80085d0:	6994      	ldr	r4, [r2, #24]
 80085d2:	42a3      	cmp	r3, r4
 80085d4:	db01      	blt.n	80085da <__sfputc_r+0x16>
 80085d6:	290a      	cmp	r1, #10
 80085d8:	d102      	bne.n	80085e0 <__sfputc_r+0x1c>
 80085da:	bc10      	pop	{r4}
 80085dc:	f7fe b916 	b.w	800680c <__swbuf_r>
 80085e0:	6813      	ldr	r3, [r2, #0]
 80085e2:	1c58      	adds	r0, r3, #1
 80085e4:	6010      	str	r0, [r2, #0]
 80085e6:	7019      	strb	r1, [r3, #0]
 80085e8:	4608      	mov	r0, r1
 80085ea:	bc10      	pop	{r4}
 80085ec:	4770      	bx	lr

080085ee <__sfputs_r>:
 80085ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	4614      	mov	r4, r2
 80085f6:	18d5      	adds	r5, r2, r3
 80085f8:	42ac      	cmp	r4, r5
 80085fa:	d101      	bne.n	8008600 <__sfputs_r+0x12>
 80085fc:	2000      	movs	r0, #0
 80085fe:	e007      	b.n	8008610 <__sfputs_r+0x22>
 8008600:	463a      	mov	r2, r7
 8008602:	4630      	mov	r0, r6
 8008604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008608:	f7ff ffdc 	bl	80085c4 <__sfputc_r>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d1f3      	bne.n	80085f8 <__sfputs_r+0xa>
 8008610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008614 <_vfiprintf_r>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	460d      	mov	r5, r1
 800861a:	4614      	mov	r4, r2
 800861c:	4698      	mov	r8, r3
 800861e:	4606      	mov	r6, r0
 8008620:	b09d      	sub	sp, #116	; 0x74
 8008622:	b118      	cbz	r0, 800862c <_vfiprintf_r+0x18>
 8008624:	6983      	ldr	r3, [r0, #24]
 8008626:	b90b      	cbnz	r3, 800862c <_vfiprintf_r+0x18>
 8008628:	f7ff f942 	bl	80078b0 <__sinit>
 800862c:	4b89      	ldr	r3, [pc, #548]	; (8008854 <_vfiprintf_r+0x240>)
 800862e:	429d      	cmp	r5, r3
 8008630:	d11b      	bne.n	800866a <_vfiprintf_r+0x56>
 8008632:	6875      	ldr	r5, [r6, #4]
 8008634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008636:	07d9      	lsls	r1, r3, #31
 8008638:	d405      	bmi.n	8008646 <_vfiprintf_r+0x32>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	059a      	lsls	r2, r3, #22
 800863e:	d402      	bmi.n	8008646 <_vfiprintf_r+0x32>
 8008640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008642:	f7ff f9d8 	bl	80079f6 <__retarget_lock_acquire_recursive>
 8008646:	89ab      	ldrh	r3, [r5, #12]
 8008648:	071b      	lsls	r3, r3, #28
 800864a:	d501      	bpl.n	8008650 <_vfiprintf_r+0x3c>
 800864c:	692b      	ldr	r3, [r5, #16]
 800864e:	b9eb      	cbnz	r3, 800868c <_vfiprintf_r+0x78>
 8008650:	4629      	mov	r1, r5
 8008652:	4630      	mov	r0, r6
 8008654:	f7fe f92c 	bl	80068b0 <__swsetup_r>
 8008658:	b1c0      	cbz	r0, 800868c <_vfiprintf_r+0x78>
 800865a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800865c:	07dc      	lsls	r4, r3, #31
 800865e:	d50e      	bpl.n	800867e <_vfiprintf_r+0x6a>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	b01d      	add	sp, #116	; 0x74
 8008666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866a:	4b7b      	ldr	r3, [pc, #492]	; (8008858 <_vfiprintf_r+0x244>)
 800866c:	429d      	cmp	r5, r3
 800866e:	d101      	bne.n	8008674 <_vfiprintf_r+0x60>
 8008670:	68b5      	ldr	r5, [r6, #8]
 8008672:	e7df      	b.n	8008634 <_vfiprintf_r+0x20>
 8008674:	4b79      	ldr	r3, [pc, #484]	; (800885c <_vfiprintf_r+0x248>)
 8008676:	429d      	cmp	r5, r3
 8008678:	bf08      	it	eq
 800867a:	68f5      	ldreq	r5, [r6, #12]
 800867c:	e7da      	b.n	8008634 <_vfiprintf_r+0x20>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	0598      	lsls	r0, r3, #22
 8008682:	d4ed      	bmi.n	8008660 <_vfiprintf_r+0x4c>
 8008684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008686:	f7ff f9b7 	bl	80079f8 <__retarget_lock_release_recursive>
 800868a:	e7e9      	b.n	8008660 <_vfiprintf_r+0x4c>
 800868c:	2300      	movs	r3, #0
 800868e:	9309      	str	r3, [sp, #36]	; 0x24
 8008690:	2320      	movs	r3, #32
 8008692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008696:	2330      	movs	r3, #48	; 0x30
 8008698:	f04f 0901 	mov.w	r9, #1
 800869c:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008860 <_vfiprintf_r+0x24c>
 80086a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a8:	4623      	mov	r3, r4
 80086aa:	469a      	mov	sl, r3
 80086ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b0:	b10a      	cbz	r2, 80086b6 <_vfiprintf_r+0xa2>
 80086b2:	2a25      	cmp	r2, #37	; 0x25
 80086b4:	d1f9      	bne.n	80086aa <_vfiprintf_r+0x96>
 80086b6:	ebba 0b04 	subs.w	fp, sl, r4
 80086ba:	d00b      	beq.n	80086d4 <_vfiprintf_r+0xc0>
 80086bc:	465b      	mov	r3, fp
 80086be:	4622      	mov	r2, r4
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ff93 	bl	80085ee <__sfputs_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	f000 80aa 	beq.w	8008822 <_vfiprintf_r+0x20e>
 80086ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d0:	445a      	add	r2, fp
 80086d2:	9209      	str	r2, [sp, #36]	; 0x24
 80086d4:	f89a 3000 	ldrb.w	r3, [sl]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 80a2 	beq.w	8008822 <_vfiprintf_r+0x20e>
 80086de:	2300      	movs	r3, #0
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295
 80086e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e8:	f10a 0a01 	add.w	sl, sl, #1
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	9307      	str	r3, [sp, #28]
 80086f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086f4:	931a      	str	r3, [sp, #104]	; 0x68
 80086f6:	4654      	mov	r4, sl
 80086f8:	2205      	movs	r2, #5
 80086fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fe:	4858      	ldr	r0, [pc, #352]	; (8008860 <_vfiprintf_r+0x24c>)
 8008700:	f7ff f9e8 	bl	8007ad4 <memchr>
 8008704:	9a04      	ldr	r2, [sp, #16]
 8008706:	b9d8      	cbnz	r0, 8008740 <_vfiprintf_r+0x12c>
 8008708:	06d1      	lsls	r1, r2, #27
 800870a:	bf44      	itt	mi
 800870c:	2320      	movmi	r3, #32
 800870e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008712:	0713      	lsls	r3, r2, #28
 8008714:	bf44      	itt	mi
 8008716:	232b      	movmi	r3, #43	; 0x2b
 8008718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871c:	f89a 3000 	ldrb.w	r3, [sl]
 8008720:	2b2a      	cmp	r3, #42	; 0x2a
 8008722:	d015      	beq.n	8008750 <_vfiprintf_r+0x13c>
 8008724:	4654      	mov	r4, sl
 8008726:	2000      	movs	r0, #0
 8008728:	f04f 0c0a 	mov.w	ip, #10
 800872c:	9a07      	ldr	r2, [sp, #28]
 800872e:	4621      	mov	r1, r4
 8008730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008734:	3b30      	subs	r3, #48	; 0x30
 8008736:	2b09      	cmp	r3, #9
 8008738:	d94e      	bls.n	80087d8 <_vfiprintf_r+0x1c4>
 800873a:	b1b0      	cbz	r0, 800876a <_vfiprintf_r+0x156>
 800873c:	9207      	str	r2, [sp, #28]
 800873e:	e014      	b.n	800876a <_vfiprintf_r+0x156>
 8008740:	eba0 0308 	sub.w	r3, r0, r8
 8008744:	fa09 f303 	lsl.w	r3, r9, r3
 8008748:	4313      	orrs	r3, r2
 800874a:	46a2      	mov	sl, r4
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	e7d2      	b.n	80086f6 <_vfiprintf_r+0xe2>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	1d19      	adds	r1, r3, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	9103      	str	r1, [sp, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	bfbb      	ittet	lt
 800875c:	425b      	neglt	r3, r3
 800875e:	f042 0202 	orrlt.w	r2, r2, #2
 8008762:	9307      	strge	r3, [sp, #28]
 8008764:	9307      	strlt	r3, [sp, #28]
 8008766:	bfb8      	it	lt
 8008768:	9204      	strlt	r2, [sp, #16]
 800876a:	7823      	ldrb	r3, [r4, #0]
 800876c:	2b2e      	cmp	r3, #46	; 0x2e
 800876e:	d10c      	bne.n	800878a <_vfiprintf_r+0x176>
 8008770:	7863      	ldrb	r3, [r4, #1]
 8008772:	2b2a      	cmp	r3, #42	; 0x2a
 8008774:	d135      	bne.n	80087e2 <_vfiprintf_r+0x1ce>
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	3402      	adds	r4, #2
 800877a:	1d1a      	adds	r2, r3, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	9203      	str	r2, [sp, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfb8      	it	lt
 8008784:	f04f 33ff 	movlt.w	r3, #4294967295
 8008788:	9305      	str	r3, [sp, #20]
 800878a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008864 <_vfiprintf_r+0x250>
 800878e:	2203      	movs	r2, #3
 8008790:	4650      	mov	r0, sl
 8008792:	7821      	ldrb	r1, [r4, #0]
 8008794:	f7ff f99e 	bl	8007ad4 <memchr>
 8008798:	b140      	cbz	r0, 80087ac <_vfiprintf_r+0x198>
 800879a:	2340      	movs	r3, #64	; 0x40
 800879c:	eba0 000a 	sub.w	r0, r0, sl
 80087a0:	fa03 f000 	lsl.w	r0, r3, r0
 80087a4:	9b04      	ldr	r3, [sp, #16]
 80087a6:	3401      	adds	r4, #1
 80087a8:	4303      	orrs	r3, r0
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b0:	2206      	movs	r2, #6
 80087b2:	482d      	ldr	r0, [pc, #180]	; (8008868 <_vfiprintf_r+0x254>)
 80087b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087b8:	f7ff f98c 	bl	8007ad4 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d03f      	beq.n	8008840 <_vfiprintf_r+0x22c>
 80087c0:	4b2a      	ldr	r3, [pc, #168]	; (800886c <_vfiprintf_r+0x258>)
 80087c2:	bb1b      	cbnz	r3, 800880c <_vfiprintf_r+0x1f8>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	3307      	adds	r3, #7
 80087c8:	f023 0307 	bic.w	r3, r3, #7
 80087cc:	3308      	adds	r3, #8
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d2:	443b      	add	r3, r7
 80087d4:	9309      	str	r3, [sp, #36]	; 0x24
 80087d6:	e767      	b.n	80086a8 <_vfiprintf_r+0x94>
 80087d8:	460c      	mov	r4, r1
 80087da:	2001      	movs	r0, #1
 80087dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e0:	e7a5      	b.n	800872e <_vfiprintf_r+0x11a>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f04f 0c0a 	mov.w	ip, #10
 80087e8:	4619      	mov	r1, r3
 80087ea:	3401      	adds	r4, #1
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	4620      	mov	r0, r4
 80087f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f4:	3a30      	subs	r2, #48	; 0x30
 80087f6:	2a09      	cmp	r2, #9
 80087f8:	d903      	bls.n	8008802 <_vfiprintf_r+0x1ee>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c5      	beq.n	800878a <_vfiprintf_r+0x176>
 80087fe:	9105      	str	r1, [sp, #20]
 8008800:	e7c3      	b.n	800878a <_vfiprintf_r+0x176>
 8008802:	4604      	mov	r4, r0
 8008804:	2301      	movs	r3, #1
 8008806:	fb0c 2101 	mla	r1, ip, r1, r2
 800880a:	e7f0      	b.n	80087ee <_vfiprintf_r+0x1da>
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	462a      	mov	r2, r5
 8008812:	4630      	mov	r0, r6
 8008814:	4b16      	ldr	r3, [pc, #88]	; (8008870 <_vfiprintf_r+0x25c>)
 8008816:	a904      	add	r1, sp, #16
 8008818:	f7fd fbc0 	bl	8005f9c <_printf_float>
 800881c:	4607      	mov	r7, r0
 800881e:	1c78      	adds	r0, r7, #1
 8008820:	d1d6      	bne.n	80087d0 <_vfiprintf_r+0x1bc>
 8008822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008824:	07d9      	lsls	r1, r3, #31
 8008826:	d405      	bmi.n	8008834 <_vfiprintf_r+0x220>
 8008828:	89ab      	ldrh	r3, [r5, #12]
 800882a:	059a      	lsls	r2, r3, #22
 800882c:	d402      	bmi.n	8008834 <_vfiprintf_r+0x220>
 800882e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008830:	f7ff f8e2 	bl	80079f8 <__retarget_lock_release_recursive>
 8008834:	89ab      	ldrh	r3, [r5, #12]
 8008836:	065b      	lsls	r3, r3, #25
 8008838:	f53f af12 	bmi.w	8008660 <_vfiprintf_r+0x4c>
 800883c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883e:	e711      	b.n	8008664 <_vfiprintf_r+0x50>
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4630      	mov	r0, r6
 8008848:	4b09      	ldr	r3, [pc, #36]	; (8008870 <_vfiprintf_r+0x25c>)
 800884a:	a904      	add	r1, sp, #16
 800884c:	f7fd fe42 	bl	80064d4 <_printf_i>
 8008850:	e7e4      	b.n	800881c <_vfiprintf_r+0x208>
 8008852:	bf00      	nop
 8008854:	080090d0 	.word	0x080090d0
 8008858:	080090f0 	.word	0x080090f0
 800885c:	080090b0 	.word	0x080090b0
 8008860:	080092b2 	.word	0x080092b2
 8008864:	080092b8 	.word	0x080092b8
 8008868:	080092bc 	.word	0x080092bc
 800886c:	08005f9d 	.word	0x08005f9d
 8008870:	080085ef 	.word	0x080085ef

08008874 <_read_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	2200      	movs	r2, #0
 800887e:	4d05      	ldr	r5, [pc, #20]	; (8008894 <_read_r+0x20>)
 8008880:	602a      	str	r2, [r5, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	f7f9 faf3 	bl	8001e6e <_read>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_read_r+0x1e>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_read_r+0x1e>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	20000414 	.word	0x20000414

08008898 <__ascii_wctomb>:
 8008898:	4603      	mov	r3, r0
 800889a:	4608      	mov	r0, r1
 800889c:	b141      	cbz	r1, 80088b0 <__ascii_wctomb+0x18>
 800889e:	2aff      	cmp	r2, #255	; 0xff
 80088a0:	d904      	bls.n	80088ac <__ascii_wctomb+0x14>
 80088a2:	228a      	movs	r2, #138	; 0x8a
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	4770      	bx	lr
 80088ac:	2001      	movs	r0, #1
 80088ae:	700a      	strb	r2, [r1, #0]
 80088b0:	4770      	bx	lr

080088b2 <abort>:
 80088b2:	2006      	movs	r0, #6
 80088b4:	b508      	push	{r3, lr}
 80088b6:	f000 f82b 	bl	8008910 <raise>
 80088ba:	2001      	movs	r0, #1
 80088bc:	f7f9 facd 	bl	8001e5a <_exit>

080088c0 <_raise_r>:
 80088c0:	291f      	cmp	r1, #31
 80088c2:	b538      	push	{r3, r4, r5, lr}
 80088c4:	4604      	mov	r4, r0
 80088c6:	460d      	mov	r5, r1
 80088c8:	d904      	bls.n	80088d4 <_raise_r+0x14>
 80088ca:	2316      	movs	r3, #22
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088d6:	b112      	cbz	r2, 80088de <_raise_r+0x1e>
 80088d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088dc:	b94b      	cbnz	r3, 80088f2 <_raise_r+0x32>
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 f830 	bl	8008944 <_getpid_r>
 80088e4:	462a      	mov	r2, r5
 80088e6:	4601      	mov	r1, r0
 80088e8:	4620      	mov	r0, r4
 80088ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ee:	f000 b817 	b.w	8008920 <_kill_r>
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d00a      	beq.n	800890c <_raise_r+0x4c>
 80088f6:	1c59      	adds	r1, r3, #1
 80088f8:	d103      	bne.n	8008902 <_raise_r+0x42>
 80088fa:	2316      	movs	r3, #22
 80088fc:	6003      	str	r3, [r0, #0]
 80088fe:	2001      	movs	r0, #1
 8008900:	e7e7      	b.n	80088d2 <_raise_r+0x12>
 8008902:	2400      	movs	r4, #0
 8008904:	4628      	mov	r0, r5
 8008906:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800890a:	4798      	blx	r3
 800890c:	2000      	movs	r0, #0
 800890e:	e7e0      	b.n	80088d2 <_raise_r+0x12>

08008910 <raise>:
 8008910:	4b02      	ldr	r3, [pc, #8]	; (800891c <raise+0xc>)
 8008912:	4601      	mov	r1, r0
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	f7ff bfd3 	b.w	80088c0 <_raise_r>
 800891a:	bf00      	nop
 800891c:	20000018 	.word	0x20000018

08008920 <_kill_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	2300      	movs	r3, #0
 8008924:	4d06      	ldr	r5, [pc, #24]	; (8008940 <_kill_r+0x20>)
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	4611      	mov	r1, r2
 800892c:	602b      	str	r3, [r5, #0]
 800892e:	f7f9 fa84 	bl	8001e3a <_kill>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d102      	bne.n	800893c <_kill_r+0x1c>
 8008936:	682b      	ldr	r3, [r5, #0]
 8008938:	b103      	cbz	r3, 800893c <_kill_r+0x1c>
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	bf00      	nop
 8008940:	20000414 	.word	0x20000414

08008944 <_getpid_r>:
 8008944:	f7f9 ba72 	b.w	8001e2c <_getpid>

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
