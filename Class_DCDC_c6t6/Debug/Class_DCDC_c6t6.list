
Class_DCDC_c6t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005268  08005268  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08005268  08005268  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005268  08005268  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08005270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200000b4  08005324  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005324  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3d5  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255b  00000000  00000000  0002d4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0002fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aa9  00000000  00000000  00031478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010244  00000000  00000000  00049f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2df  00000000  00000000  0005a165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  000e7494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b4 	.word	0x200000b4
 800012c:	00000000 	.word	0x00000000
 8000130:	080051c4 	.word	0x080051c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b8 	.word	0x200000b8
 800014c:	080051c4 	.word	0x080051c4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2uiz>:
 8000884:	004a      	lsls	r2, r1, #1
 8000886:	d211      	bcs.n	80008ac <__aeabi_d2uiz+0x28>
 8000888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800088c:	d211      	bcs.n	80008b2 <__aeabi_d2uiz+0x2e>
 800088e:	d50d      	bpl.n	80008ac <__aeabi_d2uiz+0x28>
 8000890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000898:	d40e      	bmi.n	80008b8 <__aeabi_d2uiz+0x34>
 800089a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800089e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008a6:	fa23 f002 	lsr.w	r0, r3, r2
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d102      	bne.n	80008be <__aeabi_d2uiz+0x3a>
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	4770      	bx	lr
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	4770      	bx	lr

080008c4 <__aeabi_d2f>:
 80008c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008cc:	bf24      	itt	cs
 80008ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008d6:	d90d      	bls.n	80008f4 <__aeabi_d2f+0x30>
 80008d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008ec:	bf08      	it	eq
 80008ee:	f020 0001 	biceq.w	r0, r0, #1
 80008f2:	4770      	bx	lr
 80008f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008f8:	d121      	bne.n	800093e <__aeabi_d2f+0x7a>
 80008fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008fe:	bfbc      	itt	lt
 8000900:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000904:	4770      	bxlt	lr
 8000906:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800090e:	f1c2 0218 	rsb	r2, r2, #24
 8000912:	f1c2 0c20 	rsb	ip, r2, #32
 8000916:	fa10 f30c 	lsls.w	r3, r0, ip
 800091a:	fa20 f002 	lsr.w	r0, r0, r2
 800091e:	bf18      	it	ne
 8000920:	f040 0001 	orrne.w	r0, r0, #1
 8000924:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000928:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800092c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000930:	ea40 000c 	orr.w	r0, r0, ip
 8000934:	fa23 f302 	lsr.w	r3, r3, r2
 8000938:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800093c:	e7cc      	b.n	80008d8 <__aeabi_d2f+0x14>
 800093e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000942:	d107      	bne.n	8000954 <__aeabi_d2f+0x90>
 8000944:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000948:	bf1e      	ittt	ne
 800094a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800094e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000952:	4770      	bxne	lr
 8000954:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000958:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800095c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <__aeabi_frsub>:
 8000964:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000968:	e002      	b.n	8000970 <__addsf3>
 800096a:	bf00      	nop

0800096c <__aeabi_fsub>:
 800096c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000970 <__addsf3>:
 8000970:	0042      	lsls	r2, r0, #1
 8000972:	bf1f      	itttt	ne
 8000974:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000978:	ea92 0f03 	teqne	r2, r3
 800097c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000980:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000984:	d06a      	beq.n	8000a5c <__addsf3+0xec>
 8000986:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800098a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800098e:	bfc1      	itttt	gt
 8000990:	18d2      	addgt	r2, r2, r3
 8000992:	4041      	eorgt	r1, r0
 8000994:	4048      	eorgt	r0, r1
 8000996:	4041      	eorgt	r1, r0
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	2b19      	cmp	r3, #25
 800099e:	bf88      	it	hi
 80009a0:	4770      	bxhi	lr
 80009a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ae:	bf18      	it	ne
 80009b0:	4240      	negne	r0, r0
 80009b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009be:	bf18      	it	ne
 80009c0:	4249      	negne	r1, r1
 80009c2:	ea92 0f03 	teq	r2, r3
 80009c6:	d03f      	beq.n	8000a48 <__addsf3+0xd8>
 80009c8:	f1a2 0201 	sub.w	r2, r2, #1
 80009cc:	fa41 fc03 	asr.w	ip, r1, r3
 80009d0:	eb10 000c 	adds.w	r0, r0, ip
 80009d4:	f1c3 0320 	rsb	r3, r3, #32
 80009d8:	fa01 f103 	lsl.w	r1, r1, r3
 80009dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009e0:	d502      	bpl.n	80009e8 <__addsf3+0x78>
 80009e2:	4249      	negs	r1, r1
 80009e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009ec:	d313      	bcc.n	8000a16 <__addsf3+0xa6>
 80009ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009f2:	d306      	bcc.n	8000a02 <__addsf3+0x92>
 80009f4:	0840      	lsrs	r0, r0, #1
 80009f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009fa:	f102 0201 	add.w	r2, r2, #1
 80009fe:	2afe      	cmp	r2, #254	; 0xfe
 8000a00:	d251      	bcs.n	8000aa6 <__addsf3+0x136>
 8000a02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0a:	bf08      	it	eq
 8000a0c:	f020 0001 	biceq.w	r0, r0, #1
 8000a10:	ea40 0003 	orr.w	r0, r0, r3
 8000a14:	4770      	bx	lr
 8000a16:	0049      	lsls	r1, r1, #1
 8000a18:	eb40 0000 	adc.w	r0, r0, r0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	bf28      	it	cs
 8000a20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a24:	d2ed      	bcs.n	8000a02 <__addsf3+0x92>
 8000a26:	fab0 fc80 	clz	ip, r0
 8000a2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a36:	bfaa      	itet	ge
 8000a38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a3c:	4252      	neglt	r2, r2
 8000a3e:	4318      	orrge	r0, r3
 8000a40:	bfbc      	itt	lt
 8000a42:	40d0      	lsrlt	r0, r2
 8000a44:	4318      	orrlt	r0, r3
 8000a46:	4770      	bx	lr
 8000a48:	f092 0f00 	teq	r2, #0
 8000a4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a50:	bf06      	itte	eq
 8000a52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a56:	3201      	addeq	r2, #1
 8000a58:	3b01      	subne	r3, #1
 8000a5a:	e7b5      	b.n	80009c8 <__addsf3+0x58>
 8000a5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6a:	d021      	beq.n	8000ab0 <__addsf3+0x140>
 8000a6c:	ea92 0f03 	teq	r2, r3
 8000a70:	d004      	beq.n	8000a7c <__addsf3+0x10c>
 8000a72:	f092 0f00 	teq	r2, #0
 8000a76:	bf08      	it	eq
 8000a78:	4608      	moveq	r0, r1
 8000a7a:	4770      	bx	lr
 8000a7c:	ea90 0f01 	teq	r0, r1
 8000a80:	bf1c      	itt	ne
 8000a82:	2000      	movne	r0, #0
 8000a84:	4770      	bxne	lr
 8000a86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a8a:	d104      	bne.n	8000a96 <__addsf3+0x126>
 8000a8c:	0040      	lsls	r0, r0, #1
 8000a8e:	bf28      	it	cs
 8000a90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a9a:	bf3c      	itt	cc
 8000a9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bxcc	lr
 8000aa2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	4770      	bx	lr
 8000ab0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ab4:	bf16      	itet	ne
 8000ab6:	4608      	movne	r0, r1
 8000ab8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000abc:	4601      	movne	r1, r0
 8000abe:	0242      	lsls	r2, r0, #9
 8000ac0:	bf06      	itte	eq
 8000ac2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ac6:	ea90 0f01 	teqeq	r0, r1
 8000aca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_ui2f>:
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e004      	b.n	8000ae0 <__aeabi_i2f+0x8>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_i2f>:
 8000ad8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000adc:	bf48      	it	mi
 8000ade:	4240      	negmi	r0, r0
 8000ae0:	ea5f 0c00 	movs.w	ip, r0
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000aec:	4601      	mov	r1, r0
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	e01c      	b.n	8000b2e <__aeabi_l2f+0x2a>

08000af4 <__aeabi_ul2f>:
 8000af4:	ea50 0201 	orrs.w	r2, r0, r1
 8000af8:	bf08      	it	eq
 8000afa:	4770      	bxeq	lr
 8000afc:	f04f 0300 	mov.w	r3, #0
 8000b00:	e00a      	b.n	8000b18 <__aeabi_l2f+0x14>
 8000b02:	bf00      	nop

08000b04 <__aeabi_l2f>:
 8000b04:	ea50 0201 	orrs.w	r2, r0, r1
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__aeabi_l2f+0x14>
 8000b12:	4240      	negs	r0, r0
 8000b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b18:	ea5f 0c01 	movs.w	ip, r1
 8000b1c:	bf02      	ittt	eq
 8000b1e:	4684      	moveq	ip, r0
 8000b20:	4601      	moveq	r1, r0
 8000b22:	2000      	moveq	r0, #0
 8000b24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b28:	bf08      	it	eq
 8000b2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b32:	fabc f28c 	clz	r2, ip
 8000b36:	3a08      	subs	r2, #8
 8000b38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b3c:	db10      	blt.n	8000b60 <__aeabi_l2f+0x5c>
 8000b3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b42:	4463      	add	r3, ip
 8000b44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b50:	fa20 f202 	lsr.w	r2, r0, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f102 0220 	add.w	r2, r2, #32
 8000b64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b70:	fa21 f202 	lsr.w	r2, r1, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_f2iz>:
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b88:	d30f      	bcc.n	8000baa <__aeabi_f2iz+0x2a>
 8000b8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_f2iz+0x30>
 8000b94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba4:	bf18      	it	ne
 8000ba6:	4240      	negne	r0, r0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr
 8000bb0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bb4:	d101      	bne.n	8000bba <__aeabi_f2iz+0x3a>
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	d105      	bne.n	8000bc6 <__aeabi_f2iz+0x46>
 8000bba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bbe:	bf08      	it	eq
 8000bc0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <MX_ADC1_Init+0x78>)
 8000be0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bf6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000c0a:	f000 fcb7 	bl	800157c <HAL_ADC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f000 f9a2 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_ADC1_Init+0x74>)
 8000c2a:	f000 ff3f 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c34:	f000 f992 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000d0 	.word	0x200000d0
 8000c44:	40012400 	.word	0x40012400

08000c48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <HAL_ADC_MspInit+0x6c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d121      	bne.n	8000cac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_ADC_MspInit+0x70>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_ADC_MspInit+0x70>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_ADC_MspInit+0x70>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_ADC_MspInit+0x70>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <HAL_ADC_MspInit+0x70>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_ADC_MspInit+0x70>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_ADC_MspInit+0x74>)
 8000ca8:	f001 fa52 	bl	8002150 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40012400 	.word	0x40012400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <MX_GPIO_Init+0x58>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	00000000 	.word	0x00000000

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fbc7 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f859 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f7ff ffc7 	bl	8000cc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d32:	f7ff ff4b 	bl	8000bcc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d36:	f000 f9c1 	bl	80010bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d3a:	f000 fa61 	bl	8001200 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d3e:	f000 fb19 	bl	8001374 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000d42:	2100      	movs	r1, #0
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <main+0xb0>)
 8000d46:	f002 fa03 	bl	8003150 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d4a:	4822      	ldr	r0, [pc, #136]	; (8000dd4 <main+0xb4>)
 8000d4c:	f002 f95c 	bl	8003008 <HAL_TIM_Base_Start_IT>
  PID_Init(&pid, 0.02, 0.02, 0);	//初始化PID
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d5c:	a318      	add	r3, pc, #96	; (adr r3, 8000dc0 <main+0xa0>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	e9cd 2300 	strd	r2, r3, [sp]
 8000d66:	a316      	add	r3, pc, #88	; (adr r3, 8000dc0 <main+0xa0>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <main+0xb8>)
 8000d6e:	f003 fccd 	bl	800470c <PID_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000d72:	481a      	ldr	r0, [pc, #104]	; (8000ddc <main+0xbc>)
 8000d74:	f000 fcda 	bl	800172c <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,100) == HAL_OK)
 8000d78:	2164      	movs	r1, #100	; 0x64
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <main+0xbc>)
 8000d7c:	f000 fd84 	bl	8001888 <HAL_ADC_PollForConversion>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f5      	bne.n	8000d72 <main+0x52>
	  {
		  pid.value_now=HAL_ADC_GetValue(&hadc1)*3300/4096*24.7;
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <main+0xbc>)
 8000d88:	f000 fe84 	bl	8001a94 <HAL_ADC_GetValue>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	0b1b      	lsrs	r3, r3, #12
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcf9 	bl	8000790 <__aeabi_ui2d>
 8000d9e:	a30a      	add	r3, pc, #40	; (adr r3, 8000dc8 <main+0xa8>)
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	f7ff f9d4 	bl	8000150 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f7ff fd68 	bl	8000884 <__aeabi_d2uiz>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <main+0xb8>)
 8000db8:	61d3      	str	r3, [r2, #28]
	  HAL_ADC_Start(&hadc1);
 8000dba:	e7da      	b.n	8000d72 <main+0x52>
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	47ae147b 	.word	0x47ae147b
 8000dc4:	3f947ae1 	.word	0x3f947ae1
 8000dc8:	33333333 	.word	0x33333333
 8000dcc:	4038b333 	.word	0x4038b333
 8000dd0:	20000124 	.word	0x20000124
 8000dd4:	2000016c 	.word	0x2000016c
 8000dd8:	20000100 	.word	0x20000100
 8000ddc:	200000d0 	.word	0x200000d0

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2228      	movs	r2, #40	; 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fd66 	bl	80048c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fb06 	bl	8002448 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e42:	f000 f88b 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2102      	movs	r1, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fd72 	bl	800294c <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e6e:	f000 f875 	bl	8000f5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e72:	2302      	movs	r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fefc 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e8a:	f000 f867 	bl	8000f5c <Error_Handler>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	; 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	b097      	sub	sp, #92	; 0x5c
 8000e9c:	af12      	add	r7, sp, #72	; 0x48
 8000e9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea8:	d145      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x9e>
	{
		int x=PID_Calculate(htim1, &pid, 9000, pid.value_now);
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4e25      	ldr	r6, [pc, #148]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000eb0:	9310      	str	r3, [sp, #64]	; 0x40
 8000eb2:	f242 3328 	movw	r3, #9000	; 0x2328
 8000eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000eba:	930e      	str	r3, [sp, #56]	; 0x38
 8000ebc:	466d      	mov	r5, sp
 8000ebe:	f106 0410 	add.w	r4, r6, #16
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000eda:	f003 fc4e 	bl	800477a <PID_Calculate>
 8000ede:	60f8      	str	r0, [r7, #12]
		pid1=pid1+x;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000eea:	6013      	str	r3, [r2, #0]
		if(pid1>3200) pid1=3200;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8000ef4:	dd03      	ble.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x66>
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ef8:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000efc:	601a      	str	r2, [r3, #0]
		if(pid1<200) pid1=200;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2bc7      	cmp	r3, #199	; 0xc7
 8000f04:	dc02      	bgt.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x74>
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f08:	22c8      	movs	r2, #200	; 0xc8
 8000f0a:	601a      	str	r2, [r3, #0]
		TIM1->CCR1=pid1;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f12:	635a      	str	r2, [r3, #52]	; 0x34
		sprintf((char*)str_stuff, "x1=%d,value_now=%d,pid1=%d\r\n", x, (int)pid.value_now, pid1);
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4613      	mov	r3, r2
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	490a      	ldr	r1, [pc, #40]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f28:	f003 fcd2 	bl	80048d0 <siprintf>
		HAL_UART_Transmit_IT(&huart2, str_stuff, sizeof(str_stuff));
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	4909      	ldr	r1, [pc, #36]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f32:	f002 fff9 	bl	8003f28 <HAL_UART_Transmit_IT>
	}
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000100 	.word	0x20000100
 8000f44:	20000124 	.word	0x20000124
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	40012c00 	.word	0x40012c00
 8000f50:	080051dc 	.word	0x080051dc
 8000f54:	20000004 	.word	0x20000004
 8000f58:	200001b4 	.word	0x200001b4

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001012:	f000 fa97 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM2_IRQHandler+0x10>)
 8001022:	f002 f931 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000016c 	.word	0x2000016c

08001030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <USART2_IRQHandler+0x10>)
 8001036:	f002 ffbb 	bl	8003fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001b4 	.word	0x200001b4

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f003 fbfa 	bl	800486c <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20002800 	.word	0x20002800
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000120 	.word	0x20000120
 80010ac:	20000210 	.word	0x20000210

080010b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b096      	sub	sp, #88	; 0x58
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2220      	movs	r2, #32
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fbe3 	bl	80048c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <MX_TIM1_Init+0x13c>)
 80010fc:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <MX_TIM1_Init+0x140>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72000000/20000-1;
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <MX_TIM1_Init+0x13c>)
 800110e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001112:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <MX_TIM1_Init+0x13c>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001126:	4834      	ldr	r0, [pc, #208]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001128:	f001 ff1e 	bl	8002f68 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001132:	f7ff ff13 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001140:	4619      	mov	r1, r3
 8001142:	482d      	ldr	r0, [pc, #180]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001144:	f002 fa66 	bl	8003614 <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800114e:	f7ff ff05 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001152:	4829      	ldr	r0, [pc, #164]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001154:	f001 ffa4 	bl	80030a0 <HAL_TIM_PWM_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800115e:	f7ff fefd 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800116e:	4619      	mov	r1, r3
 8001170:	4821      	ldr	r0, [pc, #132]	; (80011f8 <MX_TIM1_Init+0x13c>)
 8001172:	f002 fdd1 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800117c:	f7ff feee 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	2360      	movs	r3, #96	; 0x60
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1800;
 8001184:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <MX_TIM1_Init+0x13c>)
 80011a8:	f002 f976 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80011b2:	f7ff fed3 	bl	8000f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <MX_TIM1_Init+0x13c>)
 80011da:	f002 fdf5 	bl	8003dc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80011e4:	f7ff feba 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <MX_TIM1_Init+0x13c>)
 80011ea:	f000 f88f 	bl	800130c <HAL_TIM_MspPostInit>

}
 80011ee:	bf00      	nop
 80011f0:	3758      	adds	r7, #88	; 0x58
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000124 	.word	0x20000124
 80011fc:	40012c00 	.word	0x40012c00

08001200 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_TIM2_Init+0x98>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72*5-1;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_TIM2_Init+0x98>)
 8001226:	f240 1267 	movw	r2, #359	; 0x167
 800122a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_TIM2_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_TIM2_Init+0x98>)
 8001234:	f242 720f 	movw	r2, #9999	; 0x270f
 8001238:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_TIM2_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_TIM2_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <MX_TIM2_Init+0x98>)
 8001248:	f001 fe8e 	bl	8002f68 <HAL_TIM_Base_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001252:	f7ff fe83 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_TIM2_Init+0x98>)
 8001264:	f002 f9d6 	bl	8003614 <HAL_TIM_ConfigClockSource>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800126e:	f7ff fe75 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_TIM2_Init+0x98>)
 8001280:	f002 fd4a 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800128a:	f7ff fe67 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000016c 	.word	0x2000016c

0800129c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <HAL_TIM_Base_MspInit+0x68>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10c      	bne.n	80012c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_TIM_Base_MspInit+0x6c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <HAL_TIM_Base_MspInit+0x6c>)
 80012b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_TIM_Base_MspInit+0x6c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012c6:	e018      	b.n	80012fa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d113      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_TIM_Base_MspInit+0x6c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_TIM_Base_MspInit+0x6c>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_TIM_Base_MspInit+0x6c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201c      	movs	r0, #28
 80012f0:	f000 fe47 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f4:	201c      	movs	r0, #28
 80012f6:	f000 fe60 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40012c00 	.word	0x40012c00
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_TIM_MspPostInit+0x5c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d118      	bne.n	800135e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_TIM_MspPostInit+0x60>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_TIM_MspPostInit+0x60>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_TIM_MspPostInit+0x60>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_TIM_MspPostInit+0x64>)
 800135a:	f000 fef9 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800

08001374 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_USART2_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013ac:	f002 fd6f 	bl	8003e8e <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f7ff fdd1 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200001b4 	.word	0x200001b4
 80013c4:	40004400 	.word	0x40004400

080013c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_UART_MspInit+0x98>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d137      	bne.n	8001458 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_UART_MspInit+0x9c>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_UART_MspInit+0x9c>)
 80013ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f2:	61d3      	str	r3, [r2, #28]
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_UART_MspInit+0x9c>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_UART_MspInit+0x9c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_UART_MspInit+0x9c>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0x9c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001418:	2304      	movs	r3, #4
 800141a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4619      	mov	r1, r3
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <HAL_UART_MspInit+0xa0>)
 800142c:	f000 fe90 	bl	8002150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001430:	2308      	movs	r3, #8
 8001432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4619      	mov	r1, r3
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <HAL_UART_MspInit+0xa0>)
 8001444:	f000 fe84 	bl	8002150 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2101      	movs	r1, #1
 800144c:	2026      	movs	r0, #38	; 0x26
 800144e:	f000 fd98 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001452:	2026      	movs	r0, #38	; 0x26
 8001454:	f000 fdb1 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004400 	.word	0x40004400
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800

0800146c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001492:	f7ff fe0d 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f003 f9ef 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7ff fc41 	bl	8000d20 <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80014a8:	08005270 	.word	0x08005270
  ldr r2, =_sbss
 80014ac:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80014b0:	2000020c 	.word	0x2000020c

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 fd4f 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fd48 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fd67 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 fd2f 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000044 	.word	0x20000044
 800153c:	2000004c 	.word	0x2000004c
 8001540:	20000048 	.word	0x20000048

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	2000004c 	.word	0x2000004c
 8001564:	200001f8 	.word	0x200001f8

08001568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	200001f8 	.word	0x200001f8

0800157c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0be      	b.n	800171c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fb44 	bl	8000c48 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fbc5 	bl	8001d50 <ADC_ConversionStop_Disable>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 8099 	bne.w	800170a <HAL_ADC_Init+0x18e>
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 8095 	bne.w	800170a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015e8:	f023 0302 	bic.w	r3, r3, #2
 80015ec:	f043 0202 	orr.w	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7b1b      	ldrb	r3, [r3, #12]
 8001602:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001604:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4313      	orrs	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001614:	d003      	beq.n	800161e <HAL_ADC_Init+0xa2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_ADC_Init+0xa8>
 800161e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001622:	e000      	b.n	8001626 <HAL_ADC_Init+0xaa>
 8001624:	2300      	movs	r3, #0
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7d1b      	ldrb	r3, [r3, #20]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d119      	bne.n	8001668 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7b1b      	ldrb	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	3b01      	subs	r3, #1
 8001642:	035a      	lsls	r2, r3, #13
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	e00b      	b.n	8001668 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f043 0220 	orr.w	r2, r3, #32
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <HAL_ADC_Init+0x1a8>)
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	430b      	orrs	r3, r1
 800168e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001698:	d003      	beq.n	80016a2 <HAL_ADC_Init+0x126>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d104      	bne.n	80016ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	430a      	orrs	r2, r1
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_ADC_Init+0x1ac>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d10b      	bne.n	80016e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e6:	e018      	b.n	800171a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f023 0312 	bic.w	r3, r3, #18
 80016f0:	f043 0210 	orr.w	r2, r3, #16
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001708:	e007      	b.n	800171a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	f043 0210 	orr.w	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800171a:	7dfb      	ldrb	r3, [r7, #23]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	ffe1f7fd 	.word	0xffe1f7fd
 8001728:	ff1f0efe 	.word	0xff1f0efe

0800172c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_ADC_Start+0x1a>
 8001742:	2302      	movs	r3, #2
 8001744:	e098      	b.n	8001878 <HAL_ADC_Start+0x14c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 faa4 	bl	8001c9c <ADC_Enable>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 8087 	bne.w	800186e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a41      	ldr	r2, [pc, #260]	; (8001880 <HAL_ADC_Start+0x154>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d105      	bne.n	800178a <HAL_ADC_Start+0x5e>
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_ADC_Start+0x158>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d115      	bne.n	80017b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d026      	beq.n	80017f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b4:	e01d      	b.n	80017f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2f      	ldr	r2, [pc, #188]	; (8001884 <HAL_ADC_Start+0x158>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_ADC_Start+0xaa>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a2b      	ldr	r2, [pc, #172]	; (8001880 <HAL_ADC_Start+0x154>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10d      	bne.n	80017f2 <HAL_ADC_Start+0xc6>
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_ADC_Start+0x158>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f023 0206 	bic.w	r2, r3, #6
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
 800180a:	e002      	b.n	8001812 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f06f 0202 	mvn.w	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800182e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001832:	d113      	bne.n	800185c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001838:	4a11      	ldr	r2, [pc, #68]	; (8001880 <HAL_ADC_Start+0x154>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d105      	bne.n	800184a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_ADC_Start+0x158>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e00c      	b.n	8001876 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e003      	b.n	8001876 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40012800 	.word	0x40012800
 8001884:	40012400 	.word	0x40012400

08001888 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800189e:	f7ff fe63 	bl	8001568 <HAL_GetTick>
 80018a2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f043 0220 	orr.w	r2, r3, #32
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0d3      	b.n	8001a72 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d131      	bne.n	800193c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d12a      	bne.n	800193c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018e6:	e021      	b.n	800192c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d01d      	beq.n	800192c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_ADC_PollForConversion+0x7e>
 80018f6:	f7ff fe37 	bl	8001568 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d212      	bcs.n	800192c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10b      	bne.n	800192c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f043 0204 	orr.w	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0a2      	b.n	8001a72 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0d6      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800193a:	e070      	b.n	8001a1e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_ADC_PollForConversion+0x1f4>)
 800193e:	681c      	ldr	r4, [r3, #0]
 8001940:	2002      	movs	r0, #2
 8001942:	f001 fa51 	bl	8002de8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001946:	4603      	mov	r3, r0
 8001948:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6919      	ldr	r1, [r3, #16]
 8001952:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <HAL_ADC_PollForConversion+0x1f8>)
 8001954:	400b      	ands	r3, r1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_ADC_PollForConversion+0x104>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68d9      	ldr	r1, [r3, #12]
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <HAL_ADC_PollForConversion+0x1fc>)
 8001962:	400b      	ands	r3, r1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <HAL_ADC_PollForConversion+0x104>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6919      	ldr	r1, [r3, #16]
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <HAL_ADC_PollForConversion+0x200>)
 8001970:	400b      	ands	r3, r1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d108      	bne.n	8001988 <HAL_ADC_PollForConversion+0x100>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68d9      	ldr	r1, [r3, #12]
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <HAL_ADC_PollForConversion+0x204>)
 800197e:	400b      	ands	r3, r1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_PollForConversion+0x100>
 8001984:	2314      	movs	r3, #20
 8001986:	e020      	b.n	80019ca <HAL_ADC_PollForConversion+0x142>
 8001988:	2329      	movs	r3, #41	; 0x29
 800198a:	e01e      	b.n	80019ca <HAL_ADC_PollForConversion+0x142>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6919      	ldr	r1, [r3, #16]
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_ADC_PollForConversion+0x200>)
 8001994:	400b      	ands	r3, r1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x120>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68d9      	ldr	r1, [r3, #12]
 80019a0:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_ADC_PollForConversion+0x204>)
 80019a2:	400b      	ands	r3, r1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <HAL_ADC_PollForConversion+0x13c>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6919      	ldr	r1, [r3, #16]
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_ADC_PollForConversion+0x208>)
 80019b0:	400b      	ands	r3, r1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d108      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x140>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68d9      	ldr	r1, [r3, #12]
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_ADC_PollForConversion+0x208>)
 80019be:	400b      	ands	r3, r1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x140>
 80019c4:	2354      	movs	r3, #84	; 0x54
 80019c6:	e000      	b.n	80019ca <HAL_ADC_PollForConversion+0x142>
 80019c8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019d0:	e021      	b.n	8001a16 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d01a      	beq.n	8001a10 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_ADC_PollForConversion+0x168>
 80019e0:	f7ff fdc2 	bl	8001568 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d20f      	bcs.n	8001a10 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d90b      	bls.n	8001a10 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	f043 0204 	orr.w	r2, r3, #4
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e030      	b.n	8001a72 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3301      	adds	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d8d9      	bhi.n	80019d2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0212 	mvn.w	r2, #18
 8001a26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a42:	d115      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000044 	.word	0x20000044
 8001a80:	24924924 	.word	0x24924924
 8001a84:	00924924 	.word	0x00924924
 8001a88:	12492492 	.word	0x12492492
 8001a8c:	00492492 	.word	0x00492492
 8001a90:	00249249 	.word	0x00249249

08001a94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x20>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e0dc      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x1da>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d81c      	bhi.n	8001b16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	3b05      	subs	r3, #5
 8001aee:	221f      	movs	r2, #31
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	4019      	ands	r1, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b05      	subs	r3, #5
 8001b08:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
 8001b14:	e03c      	b.n	8001b90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d81c      	bhi.n	8001b58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b23      	subs	r3, #35	; 0x23
 8001b30:	221f      	movs	r2, #31
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4019      	ands	r1, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	3b23      	subs	r3, #35	; 0x23
 8001b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
 8001b56:	e01b      	b.n	8001b90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b41      	subs	r3, #65	; 0x41
 8001b6a:	221f      	movs	r2, #31
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4019      	ands	r1, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3b41      	subs	r3, #65	; 0x41
 8001b84:	fa00 f203 	lsl.w	r2, r0, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	d91c      	bls.n	8001bd2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68d9      	ldr	r1, [r3, #12]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b1e      	subs	r3, #30
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4019      	ands	r1, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6898      	ldr	r0, [r3, #8]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3b1e      	subs	r3, #30
 8001bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	e019      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6919      	ldr	r1, [r3, #16]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	2207      	movs	r2, #7
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4019      	ands	r1, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6898      	ldr	r0, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d003      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c12:	2b11      	cmp	r3, #17
 8001c14:	d132      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d125      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d126      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d11a      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9a      	lsrs	r2, r3, #18
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c5c:	e002      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f9      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x1b2>
 8001c6a:	e007      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f043 0220 	orr.w	r2, r3, #32
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	40012400 	.word	0x40012400
 8001c94:	20000044 	.word	0x20000044
 8001c98:	431bde83 	.word	0x431bde83

08001c9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d040      	beq.n	8001d3c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <ADC_Enable+0xac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <ADC_Enable+0xb0>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	0c9b      	lsrs	r3, r3, #18
 8001cd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cd8:	e002      	b.n	8001ce0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ce6:	f7ff fc3f 	bl	8001568 <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cec:	e01f      	b.n	8001d2e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cee:	f7ff fc3b 	bl	8001568 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d918      	bls.n	8001d2e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d011      	beq.n	8001d2e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e007      	b.n	8001d3e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d1d8      	bne.n	8001cee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000044 	.word	0x20000044
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d12e      	bne.n	8001dc8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d7a:	f7ff fbf5 	bl	8001568 <HAL_GetTick>
 8001d7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d80:	e01b      	b.n	8001dba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d82:	f7ff fbf1 	bl	8001568 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d914      	bls.n	8001dba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10d      	bne.n	8001dba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	f043 0210 	orr.w	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e007      	b.n	8001dca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d0dc      	beq.n	8001d82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4906      	ldr	r1, [pc, #24]	; (8001e6c <__NVIC_EnableIRQ+0x34>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff90 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff2d 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff42 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff90 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5f 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff35 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002000:	2b02      	cmp	r3, #2
 8002002:	d008      	beq.n	8002016 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2204      	movs	r2, #4
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e020      	b.n	8002058 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 020e 	bic.w	r2, r2, #14
 8002024:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2101      	movs	r1, #1
 8002040:	fa01 f202 	lsl.w	r2, r1, r2
 8002044:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002076:	2b02      	cmp	r3, #2
 8002078:	d005      	beq.n	8002086 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2204      	movs	r2, #4
 800207e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e051      	b.n	800212a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 020e 	bic.w	r2, r2, #14
 8002094:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a22      	ldr	r2, [pc, #136]	; (8002134 <HAL_DMA_Abort_IT+0xd0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d029      	beq.n	8002104 <HAL_DMA_Abort_IT+0xa0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a20      	ldr	r2, [pc, #128]	; (8002138 <HAL_DMA_Abort_IT+0xd4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d022      	beq.n	8002100 <HAL_DMA_Abort_IT+0x9c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1f      	ldr	r2, [pc, #124]	; (800213c <HAL_DMA_Abort_IT+0xd8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d01a      	beq.n	80020fa <HAL_DMA_Abort_IT+0x96>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_DMA_Abort_IT+0xdc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d012      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x90>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_DMA_Abort_IT+0xe0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00a      	beq.n	80020ee <HAL_DMA_Abort_IT+0x8a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_DMA_Abort_IT+0xe4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d102      	bne.n	80020e8 <HAL_DMA_Abort_IT+0x84>
 80020e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020e6:	e00e      	b.n	8002106 <HAL_DMA_Abort_IT+0xa2>
 80020e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ec:	e00b      	b.n	8002106 <HAL_DMA_Abort_IT+0xa2>
 80020ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f2:	e008      	b.n	8002106 <HAL_DMA_Abort_IT+0xa2>
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	e005      	b.n	8002106 <HAL_DMA_Abort_IT+0xa2>
 80020fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fe:	e002      	b.n	8002106 <HAL_DMA_Abort_IT+0xa2>
 8002100:	2310      	movs	r3, #16
 8002102:	e000      	b.n	8002106 <HAL_DMA_Abort_IT+0xa2>
 8002104:	2301      	movs	r3, #1
 8002106:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_DMA_Abort_IT+0xe8>)
 8002108:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
    } 
  }
  return status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020008 	.word	0x40020008
 8002138:	4002001c 	.word	0x4002001c
 800213c:	40020030 	.word	0x40020030
 8002140:	40020044 	.word	0x40020044
 8002144:	40020058 	.word	0x40020058
 8002148:	4002006c 	.word	0x4002006c
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b08b      	sub	sp, #44	; 0x2c
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002162:	e161      	b.n	8002428 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002164:	2201      	movs	r2, #1
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 8150 	bne.w	8002422 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4a97      	ldr	r2, [pc, #604]	; (80023e4 <HAL_GPIO_Init+0x294>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d05e      	beq.n	800224a <HAL_GPIO_Init+0xfa>
 800218c:	4a95      	ldr	r2, [pc, #596]	; (80023e4 <HAL_GPIO_Init+0x294>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d875      	bhi.n	800227e <HAL_GPIO_Init+0x12e>
 8002192:	4a95      	ldr	r2, [pc, #596]	; (80023e8 <HAL_GPIO_Init+0x298>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d058      	beq.n	800224a <HAL_GPIO_Init+0xfa>
 8002198:	4a93      	ldr	r2, [pc, #588]	; (80023e8 <HAL_GPIO_Init+0x298>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d86f      	bhi.n	800227e <HAL_GPIO_Init+0x12e>
 800219e:	4a93      	ldr	r2, [pc, #588]	; (80023ec <HAL_GPIO_Init+0x29c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d052      	beq.n	800224a <HAL_GPIO_Init+0xfa>
 80021a4:	4a91      	ldr	r2, [pc, #580]	; (80023ec <HAL_GPIO_Init+0x29c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d869      	bhi.n	800227e <HAL_GPIO_Init+0x12e>
 80021aa:	4a91      	ldr	r2, [pc, #580]	; (80023f0 <HAL_GPIO_Init+0x2a0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04c      	beq.n	800224a <HAL_GPIO_Init+0xfa>
 80021b0:	4a8f      	ldr	r2, [pc, #572]	; (80023f0 <HAL_GPIO_Init+0x2a0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d863      	bhi.n	800227e <HAL_GPIO_Init+0x12e>
 80021b6:	4a8f      	ldr	r2, [pc, #572]	; (80023f4 <HAL_GPIO_Init+0x2a4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d046      	beq.n	800224a <HAL_GPIO_Init+0xfa>
 80021bc:	4a8d      	ldr	r2, [pc, #564]	; (80023f4 <HAL_GPIO_Init+0x2a4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d85d      	bhi.n	800227e <HAL_GPIO_Init+0x12e>
 80021c2:	2b12      	cmp	r3, #18
 80021c4:	d82a      	bhi.n	800221c <HAL_GPIO_Init+0xcc>
 80021c6:	2b12      	cmp	r3, #18
 80021c8:	d859      	bhi.n	800227e <HAL_GPIO_Init+0x12e>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <HAL_GPIO_Init+0x80>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	0800224b 	.word	0x0800224b
 80021d4:	08002225 	.word	0x08002225
 80021d8:	08002237 	.word	0x08002237
 80021dc:	08002279 	.word	0x08002279
 80021e0:	0800227f 	.word	0x0800227f
 80021e4:	0800227f 	.word	0x0800227f
 80021e8:	0800227f 	.word	0x0800227f
 80021ec:	0800227f 	.word	0x0800227f
 80021f0:	0800227f 	.word	0x0800227f
 80021f4:	0800227f 	.word	0x0800227f
 80021f8:	0800227f 	.word	0x0800227f
 80021fc:	0800227f 	.word	0x0800227f
 8002200:	0800227f 	.word	0x0800227f
 8002204:	0800227f 	.word	0x0800227f
 8002208:	0800227f 	.word	0x0800227f
 800220c:	0800227f 	.word	0x0800227f
 8002210:	0800227f 	.word	0x0800227f
 8002214:	0800222d 	.word	0x0800222d
 8002218:	08002241 	.word	0x08002241
 800221c:	4a76      	ldr	r2, [pc, #472]	; (80023f8 <HAL_GPIO_Init+0x2a8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002222:	e02c      	b.n	800227e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	623b      	str	r3, [r7, #32]
          break;
 800222a:	e029      	b.n	8002280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	3304      	adds	r3, #4
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e024      	b.n	8002280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	3308      	adds	r3, #8
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e01f      	b.n	8002280 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	330c      	adds	r3, #12
 8002246:	623b      	str	r3, [r7, #32]
          break;
 8002248:	e01a      	b.n	8002280 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002252:	2304      	movs	r3, #4
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e013      	b.n	8002280 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002260:	2308      	movs	r3, #8
 8002262:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	611a      	str	r2, [r3, #16]
          break;
 800226a:	e009      	b.n	8002280 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800226c:	2308      	movs	r3, #8
 800226e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	615a      	str	r2, [r3, #20]
          break;
 8002276:	e003      	b.n	8002280 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e000      	b.n	8002280 <HAL_GPIO_Init+0x130>
          break;
 800227e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2bff      	cmp	r3, #255	; 0xff
 8002284:	d801      	bhi.n	800228a <HAL_GPIO_Init+0x13a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	e001      	b.n	800228e <HAL_GPIO_Init+0x13e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2bff      	cmp	r3, #255	; 0xff
 8002294:	d802      	bhi.n	800229c <HAL_GPIO_Init+0x14c>
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	e002      	b.n	80022a2 <HAL_GPIO_Init+0x152>
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3b08      	subs	r3, #8
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	210f      	movs	r1, #15
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	401a      	ands	r2, r3
 80022b4:	6a39      	ldr	r1, [r7, #32]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	431a      	orrs	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80a9 	beq.w	8002422 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022d0:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_GPIO_Init+0x2ac>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a49      	ldr	r2, [pc, #292]	; (80023fc <HAL_GPIO_Init+0x2ac>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b47      	ldr	r3, [pc, #284]	; (80023fc <HAL_GPIO_Init+0x2ac>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e8:	4a45      	ldr	r2, [pc, #276]	; (8002400 <HAL_GPIO_Init+0x2b0>)
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	; (8002404 <HAL_GPIO_Init+0x2b4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1e0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <HAL_GPIO_Init+0x2b8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1dc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3b      	ldr	r2, [pc, #236]	; (800240c <HAL_GPIO_Init+0x2bc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1d8>
 8002324:	2302      	movs	r3, #2
 8002326:	e004      	b.n	8002332 <HAL_GPIO_Init+0x1e2>
 8002328:	2303      	movs	r3, #3
 800232a:	e002      	b.n	8002332 <HAL_GPIO_Init+0x1e2>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_GPIO_Init+0x1e2>
 8002330:	2300      	movs	r3, #0
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	f002 0203 	and.w	r2, r2, #3
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	4093      	lsls	r3, r2
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002342:	492f      	ldr	r1, [pc, #188]	; (8002400 <HAL_GPIO_Init+0x2b0>)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	492b      	ldr	r1, [pc, #172]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	43db      	mvns	r3, r3
 8002372:	4927      	ldr	r1, [pc, #156]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 8002374:	4013      	ands	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002384:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4921      	ldr	r1, [pc, #132]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	43db      	mvns	r3, r3
 800239a:	491d      	ldr	r1, [pc, #116]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 800239c:	4013      	ands	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4917      	ldr	r1, [pc, #92]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4913      	ldr	r1, [pc, #76]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01f      	beq.n	8002414 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	490d      	ldr	r1, [pc, #52]	; (8002410 <HAL_GPIO_Init+0x2c0>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
 80023e0:	e01f      	b.n	8002422 <HAL_GPIO_Init+0x2d2>
 80023e2:	bf00      	nop
 80023e4:	10320000 	.word	0x10320000
 80023e8:	10310000 	.word	0x10310000
 80023ec:	10220000 	.word	0x10220000
 80023f0:	10210000 	.word	0x10210000
 80023f4:	10120000 	.word	0x10120000
 80023f8:	10110000 	.word	0x10110000
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	40010800 	.word	0x40010800
 8002408:	40010c00 	.word	0x40010c00
 800240c:	40011000 	.word	0x40011000
 8002410:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_GPIO_Init+0x2f4>)
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	43db      	mvns	r3, r3
 800241c:	4909      	ldr	r1, [pc, #36]	; (8002444 <HAL_GPIO_Init+0x2f4>)
 800241e:	4013      	ands	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	3301      	adds	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f47f ae96 	bne.w	8002164 <HAL_GPIO_Init+0x14>
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	372c      	adds	r7, #44	; 0x2c
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e272      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8087 	beq.w	8002576 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b04      	cmp	r3, #4
 8002472:	d00c      	beq.n	800248e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002474:	4b8f      	ldr	r3, [pc, #572]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d112      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5e>
 8002480:	4b8c      	ldr	r3, [pc, #560]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d10b      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d06c      	beq.n	8002574 <HAL_RCC_OscConfig+0x12c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d168      	bne.n	8002574 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e24c      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x76>
 80024b0:	4b80      	ldr	r3, [pc, #512]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a7f      	ldr	r2, [pc, #508]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e02e      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7a      	ldr	r2, [pc, #488]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a77      	ldr	r2, [pc, #476]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e01d      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0xbc>
 80024ea:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a71      	ldr	r2, [pc, #452]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 8002504:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a67      	ldr	r2, [pc, #412]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff f820 	bl	8001568 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff f81c 	bl	8001568 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e200      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0xe4>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff f80c 	bl	8001568 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff f808 	bl	8001568 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1ec      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x10c>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d063      	beq.n	800264a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002582:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d11c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x18c>
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x176>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1c0      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4939      	ldr	r1, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	e03a      	b.n	800264a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe ffc1 	bl	8001568 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe ffbd 	bl	8001568 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1a1      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4927      	ldr	r1, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe ffa0 	bl	8001568 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7fe ff9c 	bl	8001568 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e180      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d03a      	beq.n	80026cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d019      	beq.n	8002692 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_RCC_OscConfig+0x274>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7fe ff80 	bl	8001568 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266c:	f7fe ff7c 	bl	8001568 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e160      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f000 fad8 	bl	8002c40 <RCC_Delay>
 8002690:	e01c      	b.n	80026cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_RCC_OscConfig+0x274>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7fe ff66 	bl	8001568 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269e:	e00f      	b.n	80026c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe ff62 	bl	8001568 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d908      	bls.n	80026c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e146      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	42420000 	.word	0x42420000
 80026bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b92      	ldr	r3, [pc, #584]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e9      	bne.n	80026a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a6 	beq.w	8002826 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b8b      	ldr	r3, [pc, #556]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b88      	ldr	r3, [pc, #544]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a87      	ldr	r2, [pc, #540]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	61d3      	str	r3, [r2, #28]
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b82      	ldr	r3, [pc, #520]	; (8002910 <HAL_RCC_OscConfig+0x4c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0x4c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <HAL_RCC_OscConfig+0x4c8>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe ff23 	bl	8001568 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe ff1f 	bl	8001568 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e103      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b75      	ldr	r3, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x4c8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x312>
 800274c:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	e02d      	b.n	80027b6 <HAL_RCC_OscConfig+0x36e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x334>
 8002762:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a69      	ldr	r2, [pc, #420]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a66      	ldr	r2, [pc, #408]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	e01c      	b.n	80027b6 <HAL_RCC_OscConfig+0x36e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b05      	cmp	r3, #5
 8002782:	d10c      	bne.n	800279e <HAL_RCC_OscConfig+0x356>
 8002784:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a60      	ldr	r2, [pc, #384]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	6213      	str	r3, [r2, #32]
 8002790:	4b5e      	ldr	r3, [pc, #376]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0x36e>
 800279e:	4b5b      	ldr	r3, [pc, #364]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a5a      	ldr	r2, [pc, #360]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b58      	ldr	r3, [pc, #352]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a57      	ldr	r2, [pc, #348]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d015      	beq.n	80027ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7fe fed3 	bl	8001568 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe fecf 	bl	8001568 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0b1      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	4b4b      	ldr	r3, [pc, #300]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ee      	beq.n	80027c6 <HAL_RCC_OscConfig+0x37e>
 80027e8:	e014      	b.n	8002814 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe febd 	bl	8001568 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe feb9 	bl	8001568 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e09b      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002808:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ee      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4b3c      	ldr	r3, [pc, #240]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a3b      	ldr	r2, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002824:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8087 	beq.w	800293e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d061      	beq.n	8002900 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d146      	bne.n	80028d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_RCC_OscConfig+0x4cc>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe fe8d 	bl	8001568 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe fe89 	bl	8001568 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e06d      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d108      	bne.n	800288c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4921      	ldr	r1, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a19      	ldr	r1, [r3, #32]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	430b      	orrs	r3, r1
 800289e:	491b      	ldr	r1, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x4cc>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fe5d 	bl	8001568 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fe59 	bl	8001568 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e03d      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x46a>
 80028d0:	e035      	b.n	800293e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCC_OscConfig+0x4cc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe fe46 	bl	8001568 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fe42 	bl	8001568 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e026      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x498>
 80028fe:	e01e      	b.n	800293e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e019      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
 8002914:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_OscConfig+0x500>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	429a      	cmp	r2, r3
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0d0      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d910      	bls.n	8002990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	4965      	ldr	r1, [pc, #404]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c0:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	494d      	ldr	r1, [pc, #308]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d040      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d115      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e073      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06b      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4936      	ldr	r1, [pc, #216]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fd94 	bl	8001568 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f7fe fd90 	bl	8001568 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e053      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 020c 	and.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1eb      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d210      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4922      	ldr	r1, [pc, #136]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4916      	ldr	r1, [pc, #88]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ada:	f000 f821 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	490a      	ldr	r1, [pc, #40]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	5ccb      	ldrb	r3, [r1, r3]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1cc>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_ClockConfig+0x1d0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fcf2 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40021000 	.word	0x40021000
 8002b14:	0800521c 	.word	0x0800521c
 8002b18:	20000044 	.word	0x20000044
 8002b1c:	20000048 	.word	0x20000048

08002b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	b490      	push	{r4, r7}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xac>)
 8002b28:	1d3c      	adds	r4, r7, #4
 8002b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b30:	f240 2301 	movw	r3, #513	; 0x201
 8002b34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b4a:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x40>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x46>
 8002b5e:	e02b      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b62:	623b      	str	r3, [r7, #32]
      break;
 8002b64:	e02b      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	0c9b      	lsrs	r3, r3, #18
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3328      	adds	r3, #40	; 0x28
 8002b70:	443b      	add	r3, r7
 8002b72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b76:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0c5b      	lsrs	r3, r3, #17
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	3328      	adds	r3, #40	; 0x28
 8002b8e:	443b      	add	r3, r7
 8002b90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b9a:	fb03 f202 	mul.w	r2, r3, r2
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e004      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	623b      	str	r3, [r7, #32]
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bba:	623b      	str	r3, [r7, #32]
      break;
 8002bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3728      	adds	r7, #40	; 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc90      	pop	{r4, r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	080051fc 	.word	0x080051fc
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	007a1200 	.word	0x007a1200
 8002bd8:	003d0900 	.word	0x003d0900

08002bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b02      	ldr	r3, [pc, #8]	; (8002bec <HAL_RCC_GetHCLKFreq+0x10>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	20000044 	.word	0x20000044

08002bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bf4:	f7ff fff2 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4903      	ldr	r1, [pc, #12]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	0800522c 	.word	0x0800522c

08002c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0adb      	lsrs	r3, r3, #11
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	0800522c 	.word	0x0800522c

08002c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <RCC_Delay+0x34>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <RCC_Delay+0x38>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0a5b      	lsrs	r3, r3, #9
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c5c:	bf00      	nop
  }
  while (Delay --);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1e5a      	subs	r2, r3, #1
 8002c62:	60fa      	str	r2, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f9      	bne.n	8002c5c <RCC_Delay+0x1c>
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	20000044 	.word	0x20000044
 8002c78:	10624dd3 	.word	0x10624dd3

08002c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d07d      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9c:	4b4f      	ldr	r3, [pc, #316]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10d      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a4b      	ldr	r2, [pc, #300]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
 8002cb4:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d118      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd0:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a42      	ldr	r2, [pc, #264]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fc44 	bl	8001568 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe fc40 	bl	8001568 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e06d      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02e      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d027      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d20:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d30:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d36:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d014      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fc0f 	bl	8001568 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe fc0b 	bl	8001568 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e036      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4917      	ldr	r1, [pc, #92]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	490b      	ldr	r1, [pc, #44]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4904      	ldr	r1, [pc, #16]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40007000 	.word	0x40007000
 8002de4:	42420440 	.word	0x42420440

08002de8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b08d      	sub	sp, #52	; 0x34
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002df0:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002df2:	f107 040c 	add.w	r4, r7, #12
 8002df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dfc:	f240 2301 	movw	r3, #513	; 0x201
 8002e00:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	2300      	movs	r3, #0
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	f200 808e 	bhi.w	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d049      	beq.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d079      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e30:	e086      	b.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e38:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d07f      	beq.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	0c9b      	lsrs	r3, r3, #18
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	3330      	adds	r3, #48	; 0x30
 8002e4e:	443b      	add	r3, r7
 8002e50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e54:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e60:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0c5b      	lsrs	r3, r3, #17
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	3330      	adds	r3, #48	; 0x30
 8002e6c:	443b      	add	r3, r7
 8002e6e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e7e:	4a37      	ldr	r2, [pc, #220]	; (8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8e:	e004      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e9a:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea6:	d102      	bne.n	8002eae <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002eac:	e04a      	b.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ebc:	e042      	b.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ece:	d108      	bne.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee0:	e01f      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d109      	bne.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002efa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f00:	e00f      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f0c:	d11c      	bne.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002f1a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f20:	e012      	b.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002f22:	e011      	b.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f24:	f7ff fe78 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	0b9b      	lsrs	r3, r3, #14
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	3301      	adds	r3, #1
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f3e:	e004      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002f40:	bf00      	nop
 8002f42:	e002      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002f48:	bf00      	nop
    }
  }
  return (frequency);
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3734      	adds	r7, #52	; 0x34
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}
 8002f54:	0800520c 	.word	0x0800520c
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	003d0900 	.word	0x003d0900
 8002f64:	aaaaaaab 	.word	0xaaaaaaab

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e041      	b.n	8002ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe f984 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fc1c 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e035      	b.n	800308c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIM_Base_Start_IT+0x90>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_TIM_Base_Start_IT+0x4e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d004      	beq.n	8003056 <HAL_TIM_Base_Start_IT+0x4e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_TIM_Base_Start_IT+0x94>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d111      	bne.n	800307a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d010      	beq.n	800308a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003078:	e007      	b.n	800308a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40000400 	.word	0x40000400

080030a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e041      	b.n	8003136 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f839 	bl	800313e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 fb80 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_TIM_PWM_Start+0x24>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e022      	b.n	80031ba <HAL_TIM_PWM_Start+0x6a>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b04      	cmp	r3, #4
 8003178:	d109      	bne.n	800318e <HAL_TIM_PWM_Start+0x3e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e015      	b.n	80031ba <HAL_TIM_PWM_Start+0x6a>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d109      	bne.n	80031a8 <HAL_TIM_PWM_Start+0x58>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e008      	b.n	80031ba <HAL_TIM_PWM_Start+0x6a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e059      	b.n	8003276 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x82>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	e013      	b.n	80031fa <HAL_TIM_PWM_Start+0xaa>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x92>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e0:	e00b      	b.n	80031fa <HAL_TIM_PWM_Start+0xaa>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_PWM_Start+0xa2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	e003      	b.n	80031fa <HAL_TIM_PWM_Start+0xaa>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2201      	movs	r2, #1
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fd64 	bl	8003cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_TIM_PWM_Start+0x130>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d107      	bne.n	8003222 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a16      	ldr	r2, [pc, #88]	; (8003280 <HAL_TIM_PWM_Start+0x130>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d009      	beq.n	8003240 <HAL_TIM_PWM_Start+0xf0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d004      	beq.n	8003240 <HAL_TIM_PWM_Start+0xf0>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_TIM_PWM_Start+0x134>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d111      	bne.n	8003264 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d010      	beq.n	8003274 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	e007      	b.n	8003274 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40000400 	.word	0x40000400

08003288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b02      	cmp	r3, #2
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0202 	mvn.w	r2, #2
 80032b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa6f 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa62 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa71 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0204 	mvn.w	r2, #4
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa45 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa38 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fa47 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b08      	cmp	r3, #8
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b08      	cmp	r3, #8
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0208 	mvn.w	r2, #8
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa1b 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa0e 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fa1d 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b10      	cmp	r3, #16
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0210 	mvn.w	r2, #16
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2208      	movs	r2, #8
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9f1 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9e4 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f9f3 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10e      	bne.n	800340c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0201 	mvn.w	r2, #1
 8003404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fd46 	bl	8000e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d10e      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	d107      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fd22 	bl	8003e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d107      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9b7 	bl	80037d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0220 	mvn.w	r2, #32
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fced 	bl	8003e6a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e0ac      	b.n	800360c <HAL_TIM_PWM_ConfigChannel+0x174>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	f200 809f 	bhi.w	8003600 <HAL_TIM_PWM_ConfigChannel+0x168>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003601 	.word	0x08003601
 80034d0:	08003601 	.word	0x08003601
 80034d4:	08003601 	.word	0x08003601
 80034d8:	0800353d 	.word	0x0800353d
 80034dc:	08003601 	.word	0x08003601
 80034e0:	08003601 	.word	0x08003601
 80034e4:	08003601 	.word	0x08003601
 80034e8:	0800357f 	.word	0x0800357f
 80034ec:	08003601 	.word	0x08003601
 80034f0:	08003601 	.word	0x08003601
 80034f4:	08003601 	.word	0x08003601
 80034f8:	080035bf 	.word	0x080035bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f9c6 	bl	8003894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0204 	bic.w	r2, r2, #4
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	619a      	str	r2, [r3, #24]
      break;
 800353a:	e062      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fa0c 	bl	8003960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6999      	ldr	r1, [r3, #24]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	021a      	lsls	r2, r3, #8
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	619a      	str	r2, [r3, #24]
      break;
 800357c:	e041      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fa55 	bl	8003a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0208 	orr.w	r2, r2, #8
 8003598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0204 	bic.w	r2, r2, #4
 80035a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69d9      	ldr	r1, [r3, #28]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
      break;
 80035bc:	e021      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa9f 	bl	8003b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69d9      	ldr	r1, [r3, #28]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	61da      	str	r2, [r3, #28]
      break;
 80035fe:	e000      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003600:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_ConfigClockSource+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e0b3      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x180>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003652:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003664:	d03e      	beq.n	80036e4 <HAL_TIM_ConfigClockSource+0xd0>
 8003666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366a:	f200 8087 	bhi.w	800377c <HAL_TIM_ConfigClockSource+0x168>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	f000 8085 	beq.w	8003780 <HAL_TIM_ConfigClockSource+0x16c>
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	d87f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x168>
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d01a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xa2>
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d87b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x168>
 8003684:	2b60      	cmp	r3, #96	; 0x60
 8003686:	d050      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x116>
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d877      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x168>
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d03c      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xf6>
 8003690:	2b50      	cmp	r3, #80	; 0x50
 8003692:	d873      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x168>
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d058      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x136>
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d86f      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x168>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d064      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x156>
 80036a0:	2b30      	cmp	r3, #48	; 0x30
 80036a2:	d86b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x168>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d060      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x156>
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d867      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x168>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d05c      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x156>
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d05a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036b4:	e062      	b.n	800377c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f000 fae4 	bl	8003c92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	609a      	str	r2, [r3, #8]
      break;
 80036e2:	e04e      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f000 facd 	bl	8003c92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003706:	609a      	str	r2, [r3, #8]
      break;
 8003708:	e03b      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f000 fa44 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2150      	movs	r1, #80	; 0x50
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fa9b 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003728:	e02b      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	461a      	mov	r2, r3
 8003738:	f000 fa62 	bl	8003c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2160      	movs	r1, #96	; 0x60
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fa8b 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003748:	e01b      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	f000 fa24 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2140      	movs	r1, #64	; 0x40
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fa7b 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003768:	e00b      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 fa72 	bl	8003c5e <TIM_ITRx_SetConfig>
        break;
 800377a:	e002      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003780:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a25      	ldr	r2, [pc, #148]	; (800388c <TIM_Base_SetConfig+0xa8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0x28>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x28>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a22      	ldr	r2, [pc, #136]	; (8003890 <TIM_Base_SetConfig+0xac>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <TIM_Base_SetConfig+0xa8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <TIM_Base_SetConfig+0x52>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d003      	beq.n	8003836 <TIM_Base_SetConfig+0x52>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a17      	ldr	r2, [pc, #92]	; (8003890 <TIM_Base_SetConfig+0xac>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d108      	bne.n	8003848 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <TIM_Base_SetConfig+0xa8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d103      	bne.n	800387c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	615a      	str	r2, [r3, #20]
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40000400 	.word	0x40000400

08003894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0201 	bic.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 0302 	bic.w	r3, r3, #2
 80038dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <TIM_OC1_SetConfig+0xc8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10c      	bne.n	800390a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 0308 	bic.w	r3, r3, #8
 80038f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <TIM_OC1_SetConfig+0xc8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d111      	bne.n	8003936 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00

08003960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f023 0210 	bic.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0320 	bic.w	r3, r3, #32
 80039aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <TIM_OC2_SetConfig+0xd0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d10d      	bne.n	80039dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <TIM_OC2_SetConfig+0xd0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d113      	bne.n	8003a0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40012c00 	.word	0x40012c00

08003a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <TIM_OC3_SetConfig+0xd0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10d      	bne.n	8003aae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <TIM_OC3_SetConfig+0xd0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d113      	bne.n	8003ade <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	621a      	str	r2, [r3, #32]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40012c00 	.word	0x40012c00

08003b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <TIM_OC4_SetConfig+0x98>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d109      	bne.n	8003b7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	40012c00 	.word	0x40012c00

08003ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 030a 	bic.w	r3, r3, #10
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 0210 	bic.w	r2, r3, #16
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	031b      	lsls	r3, r3, #12
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f043 0307 	orr.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	021a      	lsls	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	609a      	str	r2, [r3, #8]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e041      	b.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10c      	bne.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40000400 	.word	0x40000400

08003dc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e03d      	b.n	8003e60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e03f      	b.n	8003f20 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d106      	bne.n	8003eba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7fd fa87 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2224      	movs	r2, #36	; 0x24
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ed0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fb8c 	bl	80045f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d130      	bne.n	8003fa4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_UART_Transmit_IT+0x26>
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e029      	b.n	8003fa6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_UART_Transmit_IT+0x38>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e022      	b.n	8003fa6 <HAL_UART_Transmit_IT+0x7e>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	88fa      	ldrh	r2, [r7, #6]
 8003f72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	88fa      	ldrh	r2, [r7, #6]
 8003f78:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2221      	movs	r2, #33	; 0x21
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_UART_IRQHandler+0x52>
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa4f 	bl	800449e <UART_Receive_IT>
      return;
 8004000:	e17b      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80b1 	beq.w	800416c <HAL_UART_IRQHandler+0x1bc>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_UART_IRQHandler+0x70>
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80a6 	beq.w	800416c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_UART_IRQHandler+0x90>
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_UART_IRQHandler+0xb0>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f043 0202 	orr.w	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_UART_IRQHandler+0xd0>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <HAL_UART_IRQHandler+0xfa>
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <HAL_UART_IRQHandler+0xee>
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0208 	orr.w	r2, r3, #8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 811e 	beq.w	80042f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_UART_IRQHandler+0x11e>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f9e8 	bl	800449e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <HAL_UART_IRQHandler+0x146>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d031      	beq.n	800415a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f92a 	bl	8004350 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d023      	beq.n	8004152 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	2b00      	cmp	r3, #0
 8004120:	d013      	beq.n	800414a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	4a76      	ldr	r2, [pc, #472]	; (8004300 <HAL_UART_IRQHandler+0x350>)
 8004128:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd ff98 	bl	8002064 <HAL_DMA_Abort_IT>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	e00e      	b.n	8004168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8ec 	bl	8004328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	e00a      	b.n	8004168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f8e8 	bl	8004328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e006      	b.n	8004168 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8e4 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004166:	e0c3      	b.n	80042f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	bf00      	nop
    return;
 800416a:	e0c1      	b.n	80042f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2b01      	cmp	r3, #1
 8004172:	f040 80a1 	bne.w	80042b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 809b 	beq.w	80042b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8095 	beq.w	80042b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04e      	beq.n	8004250 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80041bc:	8a3b      	ldrh	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8098 	beq.w	80042f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041c8:	8a3a      	ldrh	r2, [r7, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f080 8092 	bcs.w	80042f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8a3a      	ldrh	r2, [r7, #16]
 80041d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d02b      	beq.n	8004238 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0210 	bic.w	r2, r2, #16
 800422c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd fedb 	bl	8001fee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004240:	b29b      	uxth	r3, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	b29b      	uxth	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f876 	bl	800433a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800424e:	e051      	b.n	80042f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004258:	b29b      	uxth	r3, r3
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d047      	beq.n	80042f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004268:	8a7b      	ldrh	r3, [r7, #18]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d044      	beq.n	80042f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800427c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0210 	bic.w	r2, r2, #16
 80042aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042ac:	8a7b      	ldrh	r3, [r7, #18]
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f842 	bl	800433a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042b6:	e01f      	b.n	80042f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_UART_IRQHandler+0x324>
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f87f 	bl	80043d0 <UART_Transmit_IT>
    return;
 80042d2:	e012      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <HAL_UART_IRQHandler+0x34a>
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8c0 	bl	800446e <UART_EndTransmit_IT>
    return;
 80042ee:	e004      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
    return;
 80042f0:	bf00      	nop
 80042f2:	e002      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
      return;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <HAL_UART_IRQHandler+0x34a>
      return;
 80042f8:	bf00      	nop
  }
}
 80042fa:	3728      	adds	r7, #40	; 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	080043a9 	.word	0x080043a9

08004304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004366:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0210 	bic.w	r2, r2, #16
 800438e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff ffb0 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b21      	cmp	r3, #33	; 0x21
 80043e2:	d13e      	bne.n	8004462 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d114      	bne.n	8004418 <UART_Transmit_IT+0x48>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d110      	bne.n	8004418 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800440a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]
 8004416:	e008      	b.n	800442a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	1c59      	adds	r1, r3, #1
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6211      	str	r1, [r2, #32]
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4619      	mov	r1, r3
 8004438:	84d1      	strh	r1, [r2, #38]	; 0x26
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10f      	bne.n	800445e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004484:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff38 	bl	8004304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b22      	cmp	r3, #34	; 0x22
 80044b0:	f040 8099 	bne.w	80045e6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044bc:	d117      	bne.n	80044ee <UART_Receive_IT+0x50>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d113      	bne.n	80044ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	b29a      	uxth	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
 80044ec:	e026      	b.n	800453c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d007      	beq.n	8004512 <UART_Receive_IT+0x74>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <UART_Receive_IT+0x82>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e008      	b.n	8004532 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452c:	b2da      	uxtb	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29b      	uxth	r3, r3
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4619      	mov	r1, r3
 800454a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800454c:	2b00      	cmp	r3, #0
 800454e:	d148      	bne.n	80045e2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0220 	bic.w	r2, r2, #32
 800455e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800456e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	2b01      	cmp	r3, #1
 800458e:	d123      	bne.n	80045d8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0210 	bic.w	r2, r2, #16
 80045a4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d10a      	bne.n	80045ca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff feb2 	bl	800433a <HAL_UARTEx_RxEventCallback>
 80045d6:	e002      	b.n	80045de <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff fe9c 	bl	8004316 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e002      	b.n	80045e8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800462a:	f023 030c 	bic.w	r3, r3, #12
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	430b      	orrs	r3, r1
 8004636:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <UART_SetConfig+0x114>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d103      	bne.n	8004660 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fe fade 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	e002      	b.n	8004666 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7fe fac6 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8004664:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	4a22      	ldr	r2, [pc, #136]	; (8004708 <UART_SetConfig+0x118>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	0119      	lsls	r1, r3, #4
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009a      	lsls	r2, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	fbb2 f2f3 	udiv	r2, r2, r3
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <UART_SetConfig+0x118>)
 800469e:	fba3 0302 	umull	r0, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2064      	movs	r0, #100	; 0x64
 80046a6:	fb00 f303 	mul.w	r3, r0, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <UART_SetConfig+0x118>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046bc:	4419      	add	r1, r3
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009a      	lsls	r2, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <UART_SetConfig+0x118>)
 80046d6:	fba3 0302 	umull	r0, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2064      	movs	r0, #100	; 0x64
 80046de:	fb00 f303 	mul.w	r3, r0, r3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	3332      	adds	r3, #50	; 0x32
 80046e8:	4a07      	ldr	r2, [pc, #28]	; (8004708 <UART_SetConfig+0x118>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 020f 	and.w	r2, r3, #15
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	440a      	add	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40013800 	.word	0x40013800
 8004708:	51eb851f 	.word	0x51eb851f

0800470c <PID_Init>:
#include "pid.h"

//PID初始化
void PID_Init(PID *pid, double kp, double ki, double kd)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	e9c7 2300 	strd	r2, r3, [r7]
	pid->kp=kp;
 8004718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800471c:	f7fc f8d2 	bl	80008c4 <__aeabi_d2f>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	601a      	str	r2, [r3, #0]
	pid->ki=ki;
 8004726:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800472a:	f7fc f8cb 	bl	80008c4 <__aeabi_d2f>
 800472e:	4602      	mov	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	605a      	str	r2, [r3, #4]
	pid->kd=kd;
 8004734:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004738:	f7fc f8c4 	bl	80008c4 <__aeabi_d2f>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	609a      	str	r2, [r3, #8]
	pid->feedback=0;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	619a      	str	r2, [r3, #24]
	pid->value_now=0;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	61da      	str	r2, [r3, #28]
	for(int i = 0; i < 3; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e00a      	b.n	800476a <PID_Init+0x5e>
	{
		pid->err[i]=0;
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	3302      	adds	r3, #2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < 3; i++)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3301      	adds	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b02      	cmp	r3, #2
 800476e:	ddf1      	ble.n	8004754 <PID_Init+0x48>
	}
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <PID_Calculate>:
//PID计算反馈
//value_set:设定值
//value_now:当前采样值
int PID_Calculate(TIM_HandleTypeDef htim,PID *pid, int value_set, int value_now)
{
 800477a:	b084      	sub	sp, #16
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	af00      	add	r7, sp, #0
 8004780:	f107 0418 	add.w	r4, r7, #24
 8004784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pid->err[0]=value_set-value_now;	//求出当前误差
 8004788:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800478a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	4618      	mov	r0, r3
 8004790:	f7fc f9a2 	bl	8000ad8 <__aeabi_i2f>
 8004794:	4602      	mov	r2, r0
 8004796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004798:	60da      	str	r2, [r3, #12]
	pid->feedback=pid->kp*(pid->err[0]-pid->err[1])+pid->ki*pid->err[0]+pid->kd*(pid->err[0]-2*pid->err[1]+pid->err[2]);
 800479a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800479c:	681c      	ldr	r4, [r3, #0]
 800479e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f7fc f8df 	bl	800096c <__aeabi_fsub>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7fb fdf6 	bl	80003a4 <__aeabi_fmul>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461c      	mov	r4, r3
 80047bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fb fdec 	bl	80003a4 <__aeabi_fmul>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4619      	mov	r1, r3
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7fc f8cd 	bl	8000970 <__addsf3>
 80047d6:	4603      	mov	r3, r0
 80047d8:	461e      	mov	r6, r3
 80047da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047dc:	689c      	ldr	r4, [r3, #8]
 80047de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e0:	68dd      	ldr	r5, [r3, #12]
 80047e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	4619      	mov	r1, r3
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fc f8c1 	bl	8000970 <__addsf3>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4619      	mov	r1, r3
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7fc f8ba 	bl	800096c <__aeabi_fsub>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fc f8b4 	bl	8000970 <__addsf3>
 8004808:	4603      	mov	r3, r0
 800480a:	4619      	mov	r1, r3
 800480c:	4620      	mov	r0, r4
 800480e:	f7fb fdc9 	bl	80003a4 <__aeabi_fmul>
 8004812:	4603      	mov	r3, r0
 8004814:	4619      	mov	r1, r3
 8004816:	4630      	mov	r0, r6
 8004818:	f7fc f8aa 	bl	8000970 <__addsf3>
 800481c:	4603      	mov	r3, r0
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc f9ae 	bl	8000b80 <__aeabi_f2iz>
 8004824:	4602      	mov	r2, r0
 8004826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004828:	619a      	str	r2, [r3, #24]
	pid->err[2]=pid->err[1];
 800482a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004830:	615a      	str	r2, [r3, #20]
	pid->err[1]=pid->err[0];
 8004832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004838:	611a      	str	r2, [r3, #16]
	if(pid->feedback > 200) pid->feedback = 200;	//限制最大增量
 800483a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2bc8      	cmp	r3, #200	; 0xc8
 8004840:	dd02      	ble.n	8004848 <PID_Calculate+0xce>
 8004842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004844:	22c8      	movs	r2, #200	; 0xc8
 8004846:	619a      	str	r2, [r3, #24]
	if(pid->feedback < -200) pid->feedback = -200;
 8004848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8004850:	da03      	bge.n	800485a <PID_Calculate+0xe0>
 8004852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004854:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8004858:	619a      	str	r2, [r3, #24]
	return pid->feedback;
 800485a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800485c:	699b      	ldr	r3, [r3, #24]
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004866:	b004      	add	sp, #16
 8004868:	4770      	bx	lr
	...

0800486c <__errno>:
 800486c:	4b01      	ldr	r3, [pc, #4]	; (8004874 <__errno+0x8>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000050 	.word	0x20000050

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	2600      	movs	r6, #0
 800487c:	4d0c      	ldr	r5, [pc, #48]	; (80048b0 <__libc_init_array+0x38>)
 800487e:	4c0d      	ldr	r4, [pc, #52]	; (80048b4 <__libc_init_array+0x3c>)
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	f000 fc9c 	bl	80051c4 <_init>
 800488c:	2600      	movs	r6, #0
 800488e:	4d0a      	ldr	r5, [pc, #40]	; (80048b8 <__libc_init_array+0x40>)
 8004890:	4c0a      	ldr	r4, [pc, #40]	; (80048bc <__libc_init_array+0x44>)
 8004892:	1b64      	subs	r4, r4, r5
 8004894:	10a4      	asrs	r4, r4, #2
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	08005268 	.word	0x08005268
 80048b4:	08005268 	.word	0x08005268
 80048b8:	08005268 	.word	0x08005268
 80048bc:	0800526c 	.word	0x0800526c

080048c0 <memset>:
 80048c0:	4603      	mov	r3, r0
 80048c2:	4402      	add	r2, r0
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d100      	bne.n	80048ca <memset+0xa>
 80048c8:	4770      	bx	lr
 80048ca:	f803 1b01 	strb.w	r1, [r3], #1
 80048ce:	e7f9      	b.n	80048c4 <memset+0x4>

080048d0 <siprintf>:
 80048d0:	b40e      	push	{r1, r2, r3}
 80048d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048d6:	b500      	push	{lr}
 80048d8:	b09c      	sub	sp, #112	; 0x70
 80048da:	ab1d      	add	r3, sp, #116	; 0x74
 80048dc:	9002      	str	r0, [sp, #8]
 80048de:	9006      	str	r0, [sp, #24]
 80048e0:	9107      	str	r1, [sp, #28]
 80048e2:	9104      	str	r1, [sp, #16]
 80048e4:	4808      	ldr	r0, [pc, #32]	; (8004908 <siprintf+0x38>)
 80048e6:	4909      	ldr	r1, [pc, #36]	; (800490c <siprintf+0x3c>)
 80048e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ec:	9105      	str	r1, [sp, #20]
 80048ee:	6800      	ldr	r0, [r0, #0]
 80048f0:	a902      	add	r1, sp, #8
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	f000 f868 	bl	80049c8 <_svfiprintf_r>
 80048f8:	2200      	movs	r2, #0
 80048fa:	9b02      	ldr	r3, [sp, #8]
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	b01c      	add	sp, #112	; 0x70
 8004900:	f85d eb04 	ldr.w	lr, [sp], #4
 8004904:	b003      	add	sp, #12
 8004906:	4770      	bx	lr
 8004908:	20000050 	.word	0x20000050
 800490c:	ffff0208 	.word	0xffff0208

08004910 <__ssputs_r>:
 8004910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	688e      	ldr	r6, [r1, #8]
 8004916:	4682      	mov	sl, r0
 8004918:	429e      	cmp	r6, r3
 800491a:	460c      	mov	r4, r1
 800491c:	4690      	mov	r8, r2
 800491e:	461f      	mov	r7, r3
 8004920:	d838      	bhi.n	8004994 <__ssputs_r+0x84>
 8004922:	898a      	ldrh	r2, [r1, #12]
 8004924:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004928:	d032      	beq.n	8004990 <__ssputs_r+0x80>
 800492a:	6825      	ldr	r5, [r4, #0]
 800492c:	6909      	ldr	r1, [r1, #16]
 800492e:	3301      	adds	r3, #1
 8004930:	eba5 0901 	sub.w	r9, r5, r1
 8004934:	6965      	ldr	r5, [r4, #20]
 8004936:	444b      	add	r3, r9
 8004938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800493c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004940:	106d      	asrs	r5, r5, #1
 8004942:	429d      	cmp	r5, r3
 8004944:	bf38      	it	cc
 8004946:	461d      	movcc	r5, r3
 8004948:	0553      	lsls	r3, r2, #21
 800494a:	d531      	bpl.n	80049b0 <__ssputs_r+0xa0>
 800494c:	4629      	mov	r1, r5
 800494e:	f000 fb6f 	bl	8005030 <_malloc_r>
 8004952:	4606      	mov	r6, r0
 8004954:	b950      	cbnz	r0, 800496c <__ssputs_r+0x5c>
 8004956:	230c      	movs	r3, #12
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	f8ca 3000 	str.w	r3, [sl]
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496c:	464a      	mov	r2, r9
 800496e:	6921      	ldr	r1, [r4, #16]
 8004970:	f000 face 	bl	8004f10 <memcpy>
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800497a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	6126      	str	r6, [r4, #16]
 8004982:	444e      	add	r6, r9
 8004984:	6026      	str	r6, [r4, #0]
 8004986:	463e      	mov	r6, r7
 8004988:	6165      	str	r5, [r4, #20]
 800498a:	eba5 0509 	sub.w	r5, r5, r9
 800498e:	60a5      	str	r5, [r4, #8]
 8004990:	42be      	cmp	r6, r7
 8004992:	d900      	bls.n	8004996 <__ssputs_r+0x86>
 8004994:	463e      	mov	r6, r7
 8004996:	4632      	mov	r2, r6
 8004998:	4641      	mov	r1, r8
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	f000 fac6 	bl	8004f2c <memmove>
 80049a0:	68a3      	ldr	r3, [r4, #8]
 80049a2:	2000      	movs	r0, #0
 80049a4:	1b9b      	subs	r3, r3, r6
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	4433      	add	r3, r6
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	e7db      	b.n	8004968 <__ssputs_r+0x58>
 80049b0:	462a      	mov	r2, r5
 80049b2:	f000 fbb1 	bl	8005118 <_realloc_r>
 80049b6:	4606      	mov	r6, r0
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d1e1      	bne.n	8004980 <__ssputs_r+0x70>
 80049bc:	4650      	mov	r0, sl
 80049be:	6921      	ldr	r1, [r4, #16]
 80049c0:	f000 face 	bl	8004f60 <_free_r>
 80049c4:	e7c7      	b.n	8004956 <__ssputs_r+0x46>
	...

080049c8 <_svfiprintf_r>:
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	4698      	mov	r8, r3
 80049ce:	898b      	ldrh	r3, [r1, #12]
 80049d0:	4607      	mov	r7, r0
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	460d      	mov	r5, r1
 80049d6:	4614      	mov	r4, r2
 80049d8:	b09d      	sub	sp, #116	; 0x74
 80049da:	d50e      	bpl.n	80049fa <_svfiprintf_r+0x32>
 80049dc:	690b      	ldr	r3, [r1, #16]
 80049de:	b963      	cbnz	r3, 80049fa <_svfiprintf_r+0x32>
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	f000 fb25 	bl	8005030 <_malloc_r>
 80049e6:	6028      	str	r0, [r5, #0]
 80049e8:	6128      	str	r0, [r5, #16]
 80049ea:	b920      	cbnz	r0, 80049f6 <_svfiprintf_r+0x2e>
 80049ec:	230c      	movs	r3, #12
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	e0d1      	b.n	8004b9a <_svfiprintf_r+0x1d2>
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	616b      	str	r3, [r5, #20]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9309      	str	r3, [sp, #36]	; 0x24
 80049fe:	2320      	movs	r3, #32
 8004a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a04:	2330      	movs	r3, #48	; 0x30
 8004a06:	f04f 0901 	mov.w	r9, #1
 8004a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bb4 <_svfiprintf_r+0x1ec>
 8004a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a16:	4623      	mov	r3, r4
 8004a18:	469a      	mov	sl, r3
 8004a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a1e:	b10a      	cbz	r2, 8004a24 <_svfiprintf_r+0x5c>
 8004a20:	2a25      	cmp	r2, #37	; 0x25
 8004a22:	d1f9      	bne.n	8004a18 <_svfiprintf_r+0x50>
 8004a24:	ebba 0b04 	subs.w	fp, sl, r4
 8004a28:	d00b      	beq.n	8004a42 <_svfiprintf_r+0x7a>
 8004a2a:	465b      	mov	r3, fp
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4638      	mov	r0, r7
 8004a32:	f7ff ff6d 	bl	8004910 <__ssputs_r>
 8004a36:	3001      	adds	r0, #1
 8004a38:	f000 80aa 	beq.w	8004b90 <_svfiprintf_r+0x1c8>
 8004a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a3e:	445a      	add	r2, fp
 8004a40:	9209      	str	r2, [sp, #36]	; 0x24
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80a2 	beq.w	8004b90 <_svfiprintf_r+0x1c8>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a56:	f10a 0a01 	add.w	sl, sl, #1
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	9307      	str	r3, [sp, #28]
 8004a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a62:	931a      	str	r3, [sp, #104]	; 0x68
 8004a64:	4654      	mov	r4, sl
 8004a66:	2205      	movs	r2, #5
 8004a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6c:	4851      	ldr	r0, [pc, #324]	; (8004bb4 <_svfiprintf_r+0x1ec>)
 8004a6e:	f000 fa41 	bl	8004ef4 <memchr>
 8004a72:	9a04      	ldr	r2, [sp, #16]
 8004a74:	b9d8      	cbnz	r0, 8004aae <_svfiprintf_r+0xe6>
 8004a76:	06d0      	lsls	r0, r2, #27
 8004a78:	bf44      	itt	mi
 8004a7a:	2320      	movmi	r3, #32
 8004a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a80:	0711      	lsls	r1, r2, #28
 8004a82:	bf44      	itt	mi
 8004a84:	232b      	movmi	r3, #43	; 0x2b
 8004a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a90:	d015      	beq.n	8004abe <_svfiprintf_r+0xf6>
 8004a92:	4654      	mov	r4, sl
 8004a94:	2000      	movs	r0, #0
 8004a96:	f04f 0c0a 	mov.w	ip, #10
 8004a9a:	9a07      	ldr	r2, [sp, #28]
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aa2:	3b30      	subs	r3, #48	; 0x30
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d94e      	bls.n	8004b46 <_svfiprintf_r+0x17e>
 8004aa8:	b1b0      	cbz	r0, 8004ad8 <_svfiprintf_r+0x110>
 8004aaa:	9207      	str	r2, [sp, #28]
 8004aac:	e014      	b.n	8004ad8 <_svfiprintf_r+0x110>
 8004aae:	eba0 0308 	sub.w	r3, r0, r8
 8004ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	46a2      	mov	sl, r4
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	e7d2      	b.n	8004a64 <_svfiprintf_r+0x9c>
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	1d19      	adds	r1, r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	9103      	str	r1, [sp, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfbb      	ittet	lt
 8004aca:	425b      	neglt	r3, r3
 8004acc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad0:	9307      	strge	r3, [sp, #28]
 8004ad2:	9307      	strlt	r3, [sp, #28]
 8004ad4:	bfb8      	it	lt
 8004ad6:	9204      	strlt	r2, [sp, #16]
 8004ad8:	7823      	ldrb	r3, [r4, #0]
 8004ada:	2b2e      	cmp	r3, #46	; 0x2e
 8004adc:	d10c      	bne.n	8004af8 <_svfiprintf_r+0x130>
 8004ade:	7863      	ldrb	r3, [r4, #1]
 8004ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae2:	d135      	bne.n	8004b50 <_svfiprintf_r+0x188>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	3402      	adds	r4, #2
 8004ae8:	1d1a      	adds	r2, r3, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	9203      	str	r2, [sp, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bfb8      	it	lt
 8004af2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004bb8 <_svfiprintf_r+0x1f0>
 8004afc:	2203      	movs	r2, #3
 8004afe:	4650      	mov	r0, sl
 8004b00:	7821      	ldrb	r1, [r4, #0]
 8004b02:	f000 f9f7 	bl	8004ef4 <memchr>
 8004b06:	b140      	cbz	r0, 8004b1a <_svfiprintf_r+0x152>
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	eba0 000a 	sub.w	r0, r0, sl
 8004b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b12:	9b04      	ldr	r3, [sp, #16]
 8004b14:	3401      	adds	r4, #1
 8004b16:	4303      	orrs	r3, r0
 8004b18:	9304      	str	r3, [sp, #16]
 8004b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1e:	2206      	movs	r2, #6
 8004b20:	4826      	ldr	r0, [pc, #152]	; (8004bbc <_svfiprintf_r+0x1f4>)
 8004b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b26:	f000 f9e5 	bl	8004ef4 <memchr>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d038      	beq.n	8004ba0 <_svfiprintf_r+0x1d8>
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <_svfiprintf_r+0x1f8>)
 8004b30:	bb1b      	cbnz	r3, 8004b7a <_svfiprintf_r+0x1b2>
 8004b32:	9b03      	ldr	r3, [sp, #12]
 8004b34:	3307      	adds	r3, #7
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	9303      	str	r3, [sp, #12]
 8004b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b40:	4433      	add	r3, r6
 8004b42:	9309      	str	r3, [sp, #36]	; 0x24
 8004b44:	e767      	b.n	8004a16 <_svfiprintf_r+0x4e>
 8004b46:	460c      	mov	r4, r1
 8004b48:	2001      	movs	r0, #1
 8004b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b4e:	e7a5      	b.n	8004a9c <_svfiprintf_r+0xd4>
 8004b50:	2300      	movs	r3, #0
 8004b52:	f04f 0c0a 	mov.w	ip, #10
 8004b56:	4619      	mov	r1, r3
 8004b58:	3401      	adds	r4, #1
 8004b5a:	9305      	str	r3, [sp, #20]
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b62:	3a30      	subs	r2, #48	; 0x30
 8004b64:	2a09      	cmp	r2, #9
 8004b66:	d903      	bls.n	8004b70 <_svfiprintf_r+0x1a8>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0c5      	beq.n	8004af8 <_svfiprintf_r+0x130>
 8004b6c:	9105      	str	r1, [sp, #20]
 8004b6e:	e7c3      	b.n	8004af8 <_svfiprintf_r+0x130>
 8004b70:	4604      	mov	r4, r0
 8004b72:	2301      	movs	r3, #1
 8004b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b78:	e7f0      	b.n	8004b5c <_svfiprintf_r+0x194>
 8004b7a:	ab03      	add	r3, sp, #12
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	462a      	mov	r2, r5
 8004b80:	4638      	mov	r0, r7
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <_svfiprintf_r+0x1fc>)
 8004b84:	a904      	add	r1, sp, #16
 8004b86:	f3af 8000 	nop.w
 8004b8a:	1c42      	adds	r2, r0, #1
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	d1d6      	bne.n	8004b3e <_svfiprintf_r+0x176>
 8004b90:	89ab      	ldrh	r3, [r5, #12]
 8004b92:	065b      	lsls	r3, r3, #25
 8004b94:	f53f af2c 	bmi.w	80049f0 <_svfiprintf_r+0x28>
 8004b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9a:	b01d      	add	sp, #116	; 0x74
 8004b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba0:	ab03      	add	r3, sp, #12
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	462a      	mov	r2, r5
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <_svfiprintf_r+0x1fc>)
 8004baa:	a904      	add	r1, sp, #16
 8004bac:	f000 f87c 	bl	8004ca8 <_printf_i>
 8004bb0:	e7eb      	b.n	8004b8a <_svfiprintf_r+0x1c2>
 8004bb2:	bf00      	nop
 8004bb4:	08005234 	.word	0x08005234
 8004bb8:	0800523a 	.word	0x0800523a
 8004bbc:	0800523e 	.word	0x0800523e
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	08004911 	.word	0x08004911

08004bc8 <_printf_common>:
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	4616      	mov	r6, r2
 8004bce:	4699      	mov	r9, r3
 8004bd0:	688a      	ldr	r2, [r1, #8]
 8004bd2:	690b      	ldr	r3, [r1, #16]
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bfb8      	it	lt
 8004bda:	4613      	movlt	r3, r2
 8004bdc:	6033      	str	r3, [r6, #0]
 8004bde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004be2:	460c      	mov	r4, r1
 8004be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be8:	b10a      	cbz	r2, 8004bee <_printf_common+0x26>
 8004bea:	3301      	adds	r3, #1
 8004bec:	6033      	str	r3, [r6, #0]
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	0699      	lsls	r1, r3, #26
 8004bf2:	bf42      	ittt	mi
 8004bf4:	6833      	ldrmi	r3, [r6, #0]
 8004bf6:	3302      	addmi	r3, #2
 8004bf8:	6033      	strmi	r3, [r6, #0]
 8004bfa:	6825      	ldr	r5, [r4, #0]
 8004bfc:	f015 0506 	ands.w	r5, r5, #6
 8004c00:	d106      	bne.n	8004c10 <_printf_common+0x48>
 8004c02:	f104 0a19 	add.w	sl, r4, #25
 8004c06:	68e3      	ldr	r3, [r4, #12]
 8004c08:	6832      	ldr	r2, [r6, #0]
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	dc28      	bgt.n	8004c62 <_printf_common+0x9a>
 8004c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c14:	1e13      	subs	r3, r2, #0
 8004c16:	6822      	ldr	r2, [r4, #0]
 8004c18:	bf18      	it	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	0692      	lsls	r2, r2, #26
 8004c1e:	d42d      	bmi.n	8004c7c <_printf_common+0xb4>
 8004c20:	4649      	mov	r1, r9
 8004c22:	4638      	mov	r0, r7
 8004c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c28:	47c0      	blx	r8
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d020      	beq.n	8004c70 <_printf_common+0xa8>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	68e5      	ldr	r5, [r4, #12]
 8004c32:	f003 0306 	and.w	r3, r3, #6
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf18      	it	ne
 8004c3a:	2500      	movne	r5, #0
 8004c3c:	6832      	ldr	r2, [r6, #0]
 8004c3e:	f04f 0600 	mov.w	r6, #0
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	bf08      	it	eq
 8004c46:	1aad      	subeq	r5, r5, r2
 8004c48:	6922      	ldr	r2, [r4, #16]
 8004c4a:	bf08      	it	eq
 8004c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bfc4      	itt	gt
 8004c54:	1a9b      	subgt	r3, r3, r2
 8004c56:	18ed      	addgt	r5, r5, r3
 8004c58:	341a      	adds	r4, #26
 8004c5a:	42b5      	cmp	r5, r6
 8004c5c:	d11a      	bne.n	8004c94 <_printf_common+0xcc>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e008      	b.n	8004c74 <_printf_common+0xac>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4652      	mov	r2, sl
 8004c66:	4649      	mov	r1, r9
 8004c68:	4638      	mov	r0, r7
 8004c6a:	47c0      	blx	r8
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d103      	bne.n	8004c78 <_printf_common+0xb0>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c78:	3501      	adds	r5, #1
 8004c7a:	e7c4      	b.n	8004c06 <_printf_common+0x3e>
 8004c7c:	2030      	movs	r0, #48	; 0x30
 8004c7e:	18e1      	adds	r1, r4, r3
 8004c80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c8a:	4422      	add	r2, r4
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c92:	e7c5      	b.n	8004c20 <_printf_common+0x58>
 8004c94:	2301      	movs	r3, #1
 8004c96:	4622      	mov	r2, r4
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	47c0      	blx	r8
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d0e6      	beq.n	8004c70 <_printf_common+0xa8>
 8004ca2:	3601      	adds	r6, #1
 8004ca4:	e7d9      	b.n	8004c5a <_printf_common+0x92>
	...

08004ca8 <_printf_i>:
 8004ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cac:	7e0f      	ldrb	r7, [r1, #24]
 8004cae:	4691      	mov	r9, r2
 8004cb0:	2f78      	cmp	r7, #120	; 0x78
 8004cb2:	4680      	mov	r8, r0
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	469a      	mov	sl, r3
 8004cb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cbe:	d807      	bhi.n	8004cd0 <_printf_i+0x28>
 8004cc0:	2f62      	cmp	r7, #98	; 0x62
 8004cc2:	d80a      	bhi.n	8004cda <_printf_i+0x32>
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	f000 80d9 	beq.w	8004e7c <_printf_i+0x1d4>
 8004cca:	2f58      	cmp	r7, #88	; 0x58
 8004ccc:	f000 80a4 	beq.w	8004e18 <_printf_i+0x170>
 8004cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cd8:	e03a      	b.n	8004d50 <_printf_i+0xa8>
 8004cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cde:	2b15      	cmp	r3, #21
 8004ce0:	d8f6      	bhi.n	8004cd0 <_printf_i+0x28>
 8004ce2:	a101      	add	r1, pc, #4	; (adr r1, 8004ce8 <_printf_i+0x40>)
 8004ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ce8:	08004d41 	.word	0x08004d41
 8004cec:	08004d55 	.word	0x08004d55
 8004cf0:	08004cd1 	.word	0x08004cd1
 8004cf4:	08004cd1 	.word	0x08004cd1
 8004cf8:	08004cd1 	.word	0x08004cd1
 8004cfc:	08004cd1 	.word	0x08004cd1
 8004d00:	08004d55 	.word	0x08004d55
 8004d04:	08004cd1 	.word	0x08004cd1
 8004d08:	08004cd1 	.word	0x08004cd1
 8004d0c:	08004cd1 	.word	0x08004cd1
 8004d10:	08004cd1 	.word	0x08004cd1
 8004d14:	08004e63 	.word	0x08004e63
 8004d18:	08004d85 	.word	0x08004d85
 8004d1c:	08004e45 	.word	0x08004e45
 8004d20:	08004cd1 	.word	0x08004cd1
 8004d24:	08004cd1 	.word	0x08004cd1
 8004d28:	08004e85 	.word	0x08004e85
 8004d2c:	08004cd1 	.word	0x08004cd1
 8004d30:	08004d85 	.word	0x08004d85
 8004d34:	08004cd1 	.word	0x08004cd1
 8004d38:	08004cd1 	.word	0x08004cd1
 8004d3c:	08004e4d 	.word	0x08004e4d
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	602a      	str	r2, [r5, #0]
 8004d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0a4      	b.n	8004e9e <_printf_i+0x1f6>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	6829      	ldr	r1, [r5, #0]
 8004d58:	0606      	lsls	r6, r0, #24
 8004d5a:	f101 0304 	add.w	r3, r1, #4
 8004d5e:	d50a      	bpl.n	8004d76 <_printf_i+0xce>
 8004d60:	680e      	ldr	r6, [r1, #0]
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	2e00      	cmp	r6, #0
 8004d66:	da03      	bge.n	8004d70 <_printf_i+0xc8>
 8004d68:	232d      	movs	r3, #45	; 0x2d
 8004d6a:	4276      	negs	r6, r6
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d70:	230a      	movs	r3, #10
 8004d72:	485e      	ldr	r0, [pc, #376]	; (8004eec <_printf_i+0x244>)
 8004d74:	e019      	b.n	8004daa <_printf_i+0x102>
 8004d76:	680e      	ldr	r6, [r1, #0]
 8004d78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	bf18      	it	ne
 8004d80:	b236      	sxthne	r6, r6
 8004d82:	e7ef      	b.n	8004d64 <_printf_i+0xbc>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	6029      	str	r1, [r5, #0]
 8004d8c:	0601      	lsls	r1, r0, #24
 8004d8e:	d501      	bpl.n	8004d94 <_printf_i+0xec>
 8004d90:	681e      	ldr	r6, [r3, #0]
 8004d92:	e002      	b.n	8004d9a <_printf_i+0xf2>
 8004d94:	0646      	lsls	r6, r0, #25
 8004d96:	d5fb      	bpl.n	8004d90 <_printf_i+0xe8>
 8004d98:	881e      	ldrh	r6, [r3, #0]
 8004d9a:	2f6f      	cmp	r7, #111	; 0x6f
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2308      	moveq	r3, #8
 8004da0:	230a      	movne	r3, #10
 8004da2:	4852      	ldr	r0, [pc, #328]	; (8004eec <_printf_i+0x244>)
 8004da4:	2100      	movs	r1, #0
 8004da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004daa:	6865      	ldr	r5, [r4, #4]
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	bfa8      	it	ge
 8004db0:	6821      	ldrge	r1, [r4, #0]
 8004db2:	60a5      	str	r5, [r4, #8]
 8004db4:	bfa4      	itt	ge
 8004db6:	f021 0104 	bicge.w	r1, r1, #4
 8004dba:	6021      	strge	r1, [r4, #0]
 8004dbc:	b90e      	cbnz	r6, 8004dc2 <_printf_i+0x11a>
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	d04d      	beq.n	8004e5e <_printf_i+0x1b6>
 8004dc2:	4615      	mov	r5, r2
 8004dc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dc8:	fb03 6711 	mls	r7, r3, r1, r6
 8004dcc:	5dc7      	ldrb	r7, [r0, r7]
 8004dce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dd2:	4637      	mov	r7, r6
 8004dd4:	42bb      	cmp	r3, r7
 8004dd6:	460e      	mov	r6, r1
 8004dd8:	d9f4      	bls.n	8004dc4 <_printf_i+0x11c>
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d10b      	bne.n	8004df6 <_printf_i+0x14e>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	07de      	lsls	r6, r3, #31
 8004de2:	d508      	bpl.n	8004df6 <_printf_i+0x14e>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	6861      	ldr	r1, [r4, #4]
 8004de8:	4299      	cmp	r1, r3
 8004dea:	bfde      	ittt	le
 8004dec:	2330      	movle	r3, #48	; 0x30
 8004dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df6:	1b52      	subs	r2, r2, r5
 8004df8:	6122      	str	r2, [r4, #16]
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4640      	mov	r0, r8
 8004e00:	f8cd a000 	str.w	sl, [sp]
 8004e04:	aa03      	add	r2, sp, #12
 8004e06:	f7ff fedf 	bl	8004bc8 <_printf_common>
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d14c      	bne.n	8004ea8 <_printf_i+0x200>
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	b004      	add	sp, #16
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	4834      	ldr	r0, [pc, #208]	; (8004eec <_printf_i+0x244>)
 8004e1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e1e:	6829      	ldr	r1, [r5, #0]
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e26:	6029      	str	r1, [r5, #0]
 8004e28:	061d      	lsls	r5, r3, #24
 8004e2a:	d514      	bpl.n	8004e56 <_printf_i+0x1ae>
 8004e2c:	07df      	lsls	r7, r3, #31
 8004e2e:	bf44      	itt	mi
 8004e30:	f043 0320 	orrmi.w	r3, r3, #32
 8004e34:	6023      	strmi	r3, [r4, #0]
 8004e36:	b91e      	cbnz	r6, 8004e40 <_printf_i+0x198>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	f023 0320 	bic.w	r3, r3, #32
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	2310      	movs	r3, #16
 8004e42:	e7af      	b.n	8004da4 <_printf_i+0xfc>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	f043 0320 	orr.w	r3, r3, #32
 8004e4a:	6023      	str	r3, [r4, #0]
 8004e4c:	2378      	movs	r3, #120	; 0x78
 8004e4e:	4828      	ldr	r0, [pc, #160]	; (8004ef0 <_printf_i+0x248>)
 8004e50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e54:	e7e3      	b.n	8004e1e <_printf_i+0x176>
 8004e56:	0659      	lsls	r1, r3, #25
 8004e58:	bf48      	it	mi
 8004e5a:	b2b6      	uxthmi	r6, r6
 8004e5c:	e7e6      	b.n	8004e2c <_printf_i+0x184>
 8004e5e:	4615      	mov	r5, r2
 8004e60:	e7bb      	b.n	8004dda <_printf_i+0x132>
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	6826      	ldr	r6, [r4, #0]
 8004e66:	1d18      	adds	r0, r3, #4
 8004e68:	6961      	ldr	r1, [r4, #20]
 8004e6a:	6028      	str	r0, [r5, #0]
 8004e6c:	0635      	lsls	r5, r6, #24
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	d501      	bpl.n	8004e76 <_printf_i+0x1ce>
 8004e72:	6019      	str	r1, [r3, #0]
 8004e74:	e002      	b.n	8004e7c <_printf_i+0x1d4>
 8004e76:	0670      	lsls	r0, r6, #25
 8004e78:	d5fb      	bpl.n	8004e72 <_printf_i+0x1ca>
 8004e7a:	8019      	strh	r1, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4615      	mov	r5, r2
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	e7ba      	b.n	8004dfa <_printf_i+0x152>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	2100      	movs	r1, #0
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	602a      	str	r2, [r5, #0]
 8004e8c:	681d      	ldr	r5, [r3, #0]
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 f82f 	bl	8004ef4 <memchr>
 8004e96:	b108      	cbz	r0, 8004e9c <_printf_i+0x1f4>
 8004e98:	1b40      	subs	r0, r0, r5
 8004e9a:	6060      	str	r0, [r4, #4]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea6:	e7a8      	b.n	8004dfa <_printf_i+0x152>
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	47d0      	blx	sl
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0ab      	beq.n	8004e0e <_printf_i+0x166>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	079b      	lsls	r3, r3, #30
 8004eba:	d413      	bmi.n	8004ee4 <_printf_i+0x23c>
 8004ebc:	68e0      	ldr	r0, [r4, #12]
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	bfb8      	it	lt
 8004ec4:	4618      	movlt	r0, r3
 8004ec6:	e7a4      	b.n	8004e12 <_printf_i+0x16a>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4632      	mov	r2, r6
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4640      	mov	r0, r8
 8004ed0:	47d0      	blx	sl
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d09b      	beq.n	8004e0e <_printf_i+0x166>
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	9903      	ldr	r1, [sp, #12]
 8004edc:	1a5b      	subs	r3, r3, r1
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	dcf2      	bgt.n	8004ec8 <_printf_i+0x220>
 8004ee2:	e7eb      	b.n	8004ebc <_printf_i+0x214>
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	f104 0619 	add.w	r6, r4, #25
 8004eea:	e7f5      	b.n	8004ed8 <_printf_i+0x230>
 8004eec:	08005245 	.word	0x08005245
 8004ef0:	08005256 	.word	0x08005256

08004ef4 <memchr>:
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	b2c9      	uxtb	r1, r1
 8004efa:	4402      	add	r2, r0
 8004efc:	4293      	cmp	r3, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	d101      	bne.n	8004f06 <memchr+0x12>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e003      	b.n	8004f0e <memchr+0x1a>
 8004f06:	7804      	ldrb	r4, [r0, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	428c      	cmp	r4, r1
 8004f0c:	d1f6      	bne.n	8004efc <memchr+0x8>
 8004f0e:	bd10      	pop	{r4, pc}

08004f10 <memcpy>:
 8004f10:	440a      	add	r2, r1
 8004f12:	4291      	cmp	r1, r2
 8004f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f18:	d100      	bne.n	8004f1c <memcpy+0xc>
 8004f1a:	4770      	bx	lr
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f22:	4291      	cmp	r1, r2
 8004f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f28:	d1f9      	bne.n	8004f1e <memcpy+0xe>
 8004f2a:	bd10      	pop	{r4, pc}

08004f2c <memmove>:
 8004f2c:	4288      	cmp	r0, r1
 8004f2e:	b510      	push	{r4, lr}
 8004f30:	eb01 0402 	add.w	r4, r1, r2
 8004f34:	d902      	bls.n	8004f3c <memmove+0x10>
 8004f36:	4284      	cmp	r4, r0
 8004f38:	4623      	mov	r3, r4
 8004f3a:	d807      	bhi.n	8004f4c <memmove+0x20>
 8004f3c:	1e43      	subs	r3, r0, #1
 8004f3e:	42a1      	cmp	r1, r4
 8004f40:	d008      	beq.n	8004f54 <memmove+0x28>
 8004f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f4a:	e7f8      	b.n	8004f3e <memmove+0x12>
 8004f4c:	4601      	mov	r1, r0
 8004f4e:	4402      	add	r2, r0
 8004f50:	428a      	cmp	r2, r1
 8004f52:	d100      	bne.n	8004f56 <memmove+0x2a>
 8004f54:	bd10      	pop	{r4, pc}
 8004f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f5e:	e7f7      	b.n	8004f50 <memmove+0x24>

08004f60 <_free_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4605      	mov	r5, r0
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d040      	beq.n	8004fea <_free_r+0x8a>
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f0c      	subs	r4, r1, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfb8      	it	lt
 8004f72:	18e4      	addlt	r4, r4, r3
 8004f74:	f000 f910 	bl	8005198 <__malloc_lock>
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <_free_r+0x8c>)
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	b933      	cbnz	r3, 8004f8c <_free_r+0x2c>
 8004f7e:	6063      	str	r3, [r4, #4]
 8004f80:	6014      	str	r4, [r2, #0]
 8004f82:	4628      	mov	r0, r5
 8004f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f88:	f000 b90c 	b.w	80051a4 <__malloc_unlock>
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d908      	bls.n	8004fa2 <_free_r+0x42>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	1821      	adds	r1, r4, r0
 8004f94:	428b      	cmp	r3, r1
 8004f96:	bf01      	itttt	eq
 8004f98:	6819      	ldreq	r1, [r3, #0]
 8004f9a:	685b      	ldreq	r3, [r3, #4]
 8004f9c:	1809      	addeq	r1, r1, r0
 8004f9e:	6021      	streq	r1, [r4, #0]
 8004fa0:	e7ed      	b.n	8004f7e <_free_r+0x1e>
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b10b      	cbz	r3, 8004fac <_free_r+0x4c>
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d9fa      	bls.n	8004fa2 <_free_r+0x42>
 8004fac:	6811      	ldr	r1, [r2, #0]
 8004fae:	1850      	adds	r0, r2, r1
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d10b      	bne.n	8004fcc <_free_r+0x6c>
 8004fb4:	6820      	ldr	r0, [r4, #0]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	1850      	adds	r0, r2, r1
 8004fba:	4283      	cmp	r3, r0
 8004fbc:	6011      	str	r1, [r2, #0]
 8004fbe:	d1e0      	bne.n	8004f82 <_free_r+0x22>
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4401      	add	r1, r0
 8004fc6:	6011      	str	r1, [r2, #0]
 8004fc8:	6053      	str	r3, [r2, #4]
 8004fca:	e7da      	b.n	8004f82 <_free_r+0x22>
 8004fcc:	d902      	bls.n	8004fd4 <_free_r+0x74>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	e7d6      	b.n	8004f82 <_free_r+0x22>
 8004fd4:	6820      	ldr	r0, [r4, #0]
 8004fd6:	1821      	adds	r1, r4, r0
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	bf01      	itttt	eq
 8004fdc:	6819      	ldreq	r1, [r3, #0]
 8004fde:	685b      	ldreq	r3, [r3, #4]
 8004fe0:	1809      	addeq	r1, r1, r0
 8004fe2:	6021      	streq	r1, [r4, #0]
 8004fe4:	6063      	str	r3, [r4, #4]
 8004fe6:	6054      	str	r4, [r2, #4]
 8004fe8:	e7cb      	b.n	8004f82 <_free_r+0x22>
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	200001fc 	.word	0x200001fc

08004ff0 <sbrk_aligned>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4e0e      	ldr	r6, [pc, #56]	; (800502c <sbrk_aligned+0x3c>)
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	6831      	ldr	r1, [r6, #0]
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	b911      	cbnz	r1, 8005002 <sbrk_aligned+0x12>
 8004ffc:	f000 f8bc 	bl	8005178 <_sbrk_r>
 8005000:	6030      	str	r0, [r6, #0]
 8005002:	4621      	mov	r1, r4
 8005004:	4628      	mov	r0, r5
 8005006:	f000 f8b7 	bl	8005178 <_sbrk_r>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	d00a      	beq.n	8005024 <sbrk_aligned+0x34>
 800500e:	1cc4      	adds	r4, r0, #3
 8005010:	f024 0403 	bic.w	r4, r4, #3
 8005014:	42a0      	cmp	r0, r4
 8005016:	d007      	beq.n	8005028 <sbrk_aligned+0x38>
 8005018:	1a21      	subs	r1, r4, r0
 800501a:	4628      	mov	r0, r5
 800501c:	f000 f8ac 	bl	8005178 <_sbrk_r>
 8005020:	3001      	adds	r0, #1
 8005022:	d101      	bne.n	8005028 <sbrk_aligned+0x38>
 8005024:	f04f 34ff 	mov.w	r4, #4294967295
 8005028:	4620      	mov	r0, r4
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	20000200 	.word	0x20000200

08005030 <_malloc_r>:
 8005030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	1ccd      	adds	r5, r1, #3
 8005036:	f025 0503 	bic.w	r5, r5, #3
 800503a:	3508      	adds	r5, #8
 800503c:	2d0c      	cmp	r5, #12
 800503e:	bf38      	it	cc
 8005040:	250c      	movcc	r5, #12
 8005042:	2d00      	cmp	r5, #0
 8005044:	4607      	mov	r7, r0
 8005046:	db01      	blt.n	800504c <_malloc_r+0x1c>
 8005048:	42a9      	cmp	r1, r5
 800504a:	d905      	bls.n	8005058 <_malloc_r+0x28>
 800504c:	230c      	movs	r3, #12
 800504e:	2600      	movs	r6, #0
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4630      	mov	r0, r6
 8005054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005058:	4e2e      	ldr	r6, [pc, #184]	; (8005114 <_malloc_r+0xe4>)
 800505a:	f000 f89d 	bl	8005198 <__malloc_lock>
 800505e:	6833      	ldr	r3, [r6, #0]
 8005060:	461c      	mov	r4, r3
 8005062:	bb34      	cbnz	r4, 80050b2 <_malloc_r+0x82>
 8005064:	4629      	mov	r1, r5
 8005066:	4638      	mov	r0, r7
 8005068:	f7ff ffc2 	bl	8004ff0 <sbrk_aligned>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	4604      	mov	r4, r0
 8005070:	d14d      	bne.n	800510e <_malloc_r+0xde>
 8005072:	6834      	ldr	r4, [r6, #0]
 8005074:	4626      	mov	r6, r4
 8005076:	2e00      	cmp	r6, #0
 8005078:	d140      	bne.n	80050fc <_malloc_r+0xcc>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	4631      	mov	r1, r6
 800507e:	4638      	mov	r0, r7
 8005080:	eb04 0803 	add.w	r8, r4, r3
 8005084:	f000 f878 	bl	8005178 <_sbrk_r>
 8005088:	4580      	cmp	r8, r0
 800508a:	d13a      	bne.n	8005102 <_malloc_r+0xd2>
 800508c:	6821      	ldr	r1, [r4, #0]
 800508e:	3503      	adds	r5, #3
 8005090:	1a6d      	subs	r5, r5, r1
 8005092:	f025 0503 	bic.w	r5, r5, #3
 8005096:	3508      	adds	r5, #8
 8005098:	2d0c      	cmp	r5, #12
 800509a:	bf38      	it	cc
 800509c:	250c      	movcc	r5, #12
 800509e:	4638      	mov	r0, r7
 80050a0:	4629      	mov	r1, r5
 80050a2:	f7ff ffa5 	bl	8004ff0 <sbrk_aligned>
 80050a6:	3001      	adds	r0, #1
 80050a8:	d02b      	beq.n	8005102 <_malloc_r+0xd2>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	442b      	add	r3, r5
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	e00e      	b.n	80050d0 <_malloc_r+0xa0>
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	1b52      	subs	r2, r2, r5
 80050b6:	d41e      	bmi.n	80050f6 <_malloc_r+0xc6>
 80050b8:	2a0b      	cmp	r2, #11
 80050ba:	d916      	bls.n	80050ea <_malloc_r+0xba>
 80050bc:	1961      	adds	r1, r4, r5
 80050be:	42a3      	cmp	r3, r4
 80050c0:	6025      	str	r5, [r4, #0]
 80050c2:	bf18      	it	ne
 80050c4:	6059      	strne	r1, [r3, #4]
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	bf08      	it	eq
 80050ca:	6031      	streq	r1, [r6, #0]
 80050cc:	5162      	str	r2, [r4, r5]
 80050ce:	604b      	str	r3, [r1, #4]
 80050d0:	4638      	mov	r0, r7
 80050d2:	f104 060b 	add.w	r6, r4, #11
 80050d6:	f000 f865 	bl	80051a4 <__malloc_unlock>
 80050da:	f026 0607 	bic.w	r6, r6, #7
 80050de:	1d23      	adds	r3, r4, #4
 80050e0:	1af2      	subs	r2, r6, r3
 80050e2:	d0b6      	beq.n	8005052 <_malloc_r+0x22>
 80050e4:	1b9b      	subs	r3, r3, r6
 80050e6:	50a3      	str	r3, [r4, r2]
 80050e8:	e7b3      	b.n	8005052 <_malloc_r+0x22>
 80050ea:	6862      	ldr	r2, [r4, #4]
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	bf0c      	ite	eq
 80050f0:	6032      	streq	r2, [r6, #0]
 80050f2:	605a      	strne	r2, [r3, #4]
 80050f4:	e7ec      	b.n	80050d0 <_malloc_r+0xa0>
 80050f6:	4623      	mov	r3, r4
 80050f8:	6864      	ldr	r4, [r4, #4]
 80050fa:	e7b2      	b.n	8005062 <_malloc_r+0x32>
 80050fc:	4634      	mov	r4, r6
 80050fe:	6876      	ldr	r6, [r6, #4]
 8005100:	e7b9      	b.n	8005076 <_malloc_r+0x46>
 8005102:	230c      	movs	r3, #12
 8005104:	4638      	mov	r0, r7
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	f000 f84c 	bl	80051a4 <__malloc_unlock>
 800510c:	e7a1      	b.n	8005052 <_malloc_r+0x22>
 800510e:	6025      	str	r5, [r4, #0]
 8005110:	e7de      	b.n	80050d0 <_malloc_r+0xa0>
 8005112:	bf00      	nop
 8005114:	200001fc 	.word	0x200001fc

08005118 <_realloc_r>:
 8005118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511c:	4680      	mov	r8, r0
 800511e:	4614      	mov	r4, r2
 8005120:	460e      	mov	r6, r1
 8005122:	b921      	cbnz	r1, 800512e <_realloc_r+0x16>
 8005124:	4611      	mov	r1, r2
 8005126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	f7ff bf81 	b.w	8005030 <_malloc_r>
 800512e:	b92a      	cbnz	r2, 800513c <_realloc_r+0x24>
 8005130:	f7ff ff16 	bl	8004f60 <_free_r>
 8005134:	4625      	mov	r5, r4
 8005136:	4628      	mov	r0, r5
 8005138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513c:	f000 f838 	bl	80051b0 <_malloc_usable_size_r>
 8005140:	4284      	cmp	r4, r0
 8005142:	4607      	mov	r7, r0
 8005144:	d802      	bhi.n	800514c <_realloc_r+0x34>
 8005146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800514a:	d812      	bhi.n	8005172 <_realloc_r+0x5a>
 800514c:	4621      	mov	r1, r4
 800514e:	4640      	mov	r0, r8
 8005150:	f7ff ff6e 	bl	8005030 <_malloc_r>
 8005154:	4605      	mov	r5, r0
 8005156:	2800      	cmp	r0, #0
 8005158:	d0ed      	beq.n	8005136 <_realloc_r+0x1e>
 800515a:	42bc      	cmp	r4, r7
 800515c:	4622      	mov	r2, r4
 800515e:	4631      	mov	r1, r6
 8005160:	bf28      	it	cs
 8005162:	463a      	movcs	r2, r7
 8005164:	f7ff fed4 	bl	8004f10 <memcpy>
 8005168:	4631      	mov	r1, r6
 800516a:	4640      	mov	r0, r8
 800516c:	f7ff fef8 	bl	8004f60 <_free_r>
 8005170:	e7e1      	b.n	8005136 <_realloc_r+0x1e>
 8005172:	4635      	mov	r5, r6
 8005174:	e7df      	b.n	8005136 <_realloc_r+0x1e>
	...

08005178 <_sbrk_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	2300      	movs	r3, #0
 800517c:	4d05      	ldr	r5, [pc, #20]	; (8005194 <_sbrk_r+0x1c>)
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	f7fb ff5e 	bl	8001044 <_sbrk>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_sbrk_r+0x1a>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_sbrk_r+0x1a>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20000204 	.word	0x20000204

08005198 <__malloc_lock>:
 8005198:	4801      	ldr	r0, [pc, #4]	; (80051a0 <__malloc_lock+0x8>)
 800519a:	f000 b811 	b.w	80051c0 <__retarget_lock_acquire_recursive>
 800519e:	bf00      	nop
 80051a0:	20000208 	.word	0x20000208

080051a4 <__malloc_unlock>:
 80051a4:	4801      	ldr	r0, [pc, #4]	; (80051ac <__malloc_unlock+0x8>)
 80051a6:	f000 b80c 	b.w	80051c2 <__retarget_lock_release_recursive>
 80051aa:	bf00      	nop
 80051ac:	20000208 	.word	0x20000208

080051b0 <_malloc_usable_size_r>:
 80051b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b4:	1f18      	subs	r0, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfbc      	itt	lt
 80051ba:	580b      	ldrlt	r3, [r1, r0]
 80051bc:	18c0      	addlt	r0, r0, r3
 80051be:	4770      	bx	lr

080051c0 <__retarget_lock_acquire_recursive>:
 80051c0:	4770      	bx	lr

080051c2 <__retarget_lock_release_recursive>:
 80051c2:	4770      	bx	lr

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
