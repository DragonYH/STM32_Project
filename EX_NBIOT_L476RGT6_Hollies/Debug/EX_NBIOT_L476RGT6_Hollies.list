
EX_NBIOT_L476RGT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc8  08004fc8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd0  08004fd0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd0  08004fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004fd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  2000000c  08004fe4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08004fe4  000066b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a75  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002998  00000000  00000000  00018ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6c  00000000  00000000  0001c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027222  00000000  00000000  0001d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145b7  00000000  00000000  000442de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1d5f  00000000  00000000  00058895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a5f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  0014a638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014e7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f68 	.word	0x08004f68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f68 	.word	0x08004f68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <MX_DMA_Init+0x48>)
 80004c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000500 <MX_DMA_Init+0x48>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <MX_DMA_Init+0x48>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200d      	movs	r0, #13
 80004dc:	f000 fdbe 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004e0:	200d      	movs	r0, #13
 80004e2:	f000 fdd7 	bl	8001094 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2010      	movs	r0, #16
 80004ec:	f000 fdb6 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004f0:	2010      	movs	r0, #16
 80004f2:	f000 fdcf 	bl	8001094 <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b1e      	ldr	r3, [pc, #120]	@ (8000594 <MX_GPIO_Init+0x90>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	4a1d      	ldr	r2, [pc, #116]	@ (8000594 <MX_GPIO_Init+0x90>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000526:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <MX_GPIO_Init+0x90>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <MX_GPIO_Init+0x90>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <MX_GPIO_Init+0x90>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800053c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053e:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <MX_GPIO_Init+0x90>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <MX_GPIO_Init+0x90>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <MX_GPIO_Init+0x90>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000556:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <MX_GPIO_Init+0x90>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000568:	480b      	ldr	r0, [pc, #44]	@ (8000598 <MX_GPIO_Init+0x94>)
 800056a:	f001 f9c1 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800056e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000578:	2301      	movs	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	4804      	ldr	r0, [pc, #16]	@ (8000598 <MX_GPIO_Init+0x94>)
 8000588:	f001 f808 	bl	800159c <HAL_GPIO_Init>

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	48000800 	.word	0x48000800

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fc6b 	bl	8000e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f82a 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f7ff ffac 	bl	8000504 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f7ff ff84 	bl	80004b8 <MX_DMA_Init>
  MX_TIM1_Init();
 80005b0:	f000 f9ec 	bl	800098c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 facc 	bl	8000b50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005b8:	f000 fa3c 	bl	8000a34 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 faf8 	bl	8000bb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c6:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <main+0x4c>)
 80005c8:	f001 f992 	bl	80018f0 <HAL_GPIO_WritePin>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rx1_data, sizeof(rx1_data)); // 接收数据空闲中断
 80005cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005d0:	4906      	ldr	r1, [pc, #24]	@ (80005ec <main+0x50>)
 80005d2:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <main+0x54>)
 80005d4:	f004 fc48 	bl	8004e68 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx2_data, sizeof(rx2_data)); // 接收数据空闲中断
 80005d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005dc:	4905      	ldr	r1, [pc, #20]	@ (80005f4 <main+0x58>)
 80005de:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <main+0x5c>)
 80005e0:	f004 fc42 	bl	8004e68 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x48>
 80005e8:	48000800 	.word	0x48000800
 80005ec:	20000028 	.word	0x20000028
 80005f0:	20000594 	.word	0x20000594
 80005f4:	20000228 	.word	0x20000228
 80005f8:	2000050c 	.word	0x2000050c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	@ 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fc80 	bl	8004f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000622:	f001 f98b 	bl	800193c <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 f882 	bl	8000734 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	2303      	movs	r3, #3
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000646:	2314      	movs	r3, #20
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f9c4 	bl	80019e8 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000666:	f000 f865 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	2104      	movs	r1, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fd8c 	bl	80021a0 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068e:	f000 f851 	bl	8000734 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	@ 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// 接收空闲中断
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART3)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10c      	bne.n	80006cc <HAL_UARTEx_RxEventCallback+0x30>
  {
    HAL_UART_Transmit(&huart2, rx1_data, Size, 1000);
 80006b2:	887a      	ldrh	r2, [r7, #2]
 80006b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b8:	4910      	ldr	r1, [pc, #64]	@ (80006fc <HAL_UARTEx_RxEventCallback+0x60>)
 80006ba:	4811      	ldr	r0, [pc, #68]	@ (8000700 <HAL_UARTEx_RxEventCallback+0x64>)
 80006bc:	f003 f966 	bl	800398c <HAL_UART_Transmit>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rx1_data, sizeof(rx1_data)); // 重新启动接收
 80006c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c4:	490d      	ldr	r1, [pc, #52]	@ (80006fc <HAL_UARTEx_RxEventCallback+0x60>)
 80006c6:	480f      	ldr	r0, [pc, #60]	@ (8000704 <HAL_UARTEx_RxEventCallback+0x68>)
 80006c8:	f004 fbce 	bl	8004e68 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
  if (huart->Instance == USART2)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <HAL_UARTEx_RxEventCallback+0x6c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d10c      	bne.n	80006f0 <HAL_UARTEx_RxEventCallback+0x54>
  {
    HAL_UART_Transmit(&huart3, rx2_data, Size, 1000);
 80006d6:	887a      	ldrh	r2, [r7, #2]
 80006d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006dc:	490b      	ldr	r1, [pc, #44]	@ (800070c <HAL_UARTEx_RxEventCallback+0x70>)
 80006de:	4809      	ldr	r0, [pc, #36]	@ (8000704 <HAL_UARTEx_RxEventCallback+0x68>)
 80006e0:	f003 f954 	bl	800398c <HAL_UART_Transmit>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx2_data, sizeof(rx2_data)); // 重新启动接收
 80006e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e8:	4908      	ldr	r1, [pc, #32]	@ (800070c <HAL_UARTEx_RxEventCallback+0x70>)
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <HAL_UARTEx_RxEventCallback+0x64>)
 80006ec:	f004 fbbc 	bl	8004e68 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40004800 	.word	0x40004800
 80006fc:	20000028 	.word	0x20000028
 8000700:	2000050c 	.word	0x2000050c
 8000704:	20000594 	.word	0x20000594
 8000708:	40004400 	.word	0x40004400
 800070c:	20000228 	.word	0x20000228

08000710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000722:	f000 fbc3 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2)
  {
  }
  /* USER CODE END Callback 1 */
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40001000 	.word	0x40001000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	@ 0x60
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	@ 0x58
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	@ 0x38
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000796:	4b34      	ldr	r3, [pc, #208]	@ (8000868 <HAL_InitTick+0xe0>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	4a33      	ldr	r2, [pc, #204]	@ (8000868 <HAL_InitTick+0xe0>)
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a2:	4b31      	ldr	r3, [pc, #196]	@ (8000868 <HAL_InitTick+0xe0>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a6:	f003 0310 	and.w	r3, r3, #16
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ae:	f107 0210 	add.w	r2, r7, #16
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 feb5 	bl	8002528 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007be:	6a3b      	ldr	r3, [r7, #32]
 80007c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d103      	bne.n	80007d0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007c8:	f001 fe82 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 80007cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80007ce:	e004      	b.n	80007da <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007d0:	f001 fe7e 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 80007d4:	4603      	mov	r3, r0
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007dc:	4a23      	ldr	r2, [pc, #140]	@ (800086c <HAL_InitTick+0xe4>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <HAL_InitTick+0xe8>)
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <HAL_InitTick+0xec>)
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <HAL_InitTick+0xe8>)
 80007f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <HAL_InitTick+0xe8>)
 80007f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <HAL_InitTick+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <HAL_InitTick+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_InitTick+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800080e:	4818      	ldr	r0, [pc, #96]	@ (8000870 <HAL_InitTick+0xe8>)
 8000810:	f002 fbd8 	bl	8002fc4 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800081a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11b      	bne.n	800085a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000822:	4813      	ldr	r0, [pc, #76]	@ (8000870 <HAL_InitTick+0xe8>)
 8000824:	f002 fc26 	bl	8003074 <HAL_TIM_Base_Start_IT>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800082e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000832:	2b00      	cmp	r3, #0
 8000834:	d111      	bne.n	800085a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000836:	2036      	movs	r0, #54	@ 0x36
 8000838:	f000 fc2c 	bl	8001094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d808      	bhi.n	8000854 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000842:	2200      	movs	r2, #0
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	2036      	movs	r0, #54	@ 0x36
 8000848:	f000 fc08 	bl	800105c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084c:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HAL_InitTick+0xf0>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e002      	b.n	800085a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800085a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800085e:	4618      	mov	r0, r3
 8000860:	3738      	adds	r7, #56	@ 0x38
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	431bde83 	.word	0x431bde83
 8000870:	20000428 	.word	0x20000428
 8000874:	40001000 	.word	0x40001000
 8000878:	20000004 	.word	0x20000004

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <DMA1_Channel3_IRQHandler+0x10>)
 80008e2:	f000 fd7c 	bl	80013de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000664 	.word	0x20000664

080008f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008f4:	4802      	ldr	r0, [pc, #8]	@ (8000900 <DMA1_Channel6_IRQHandler+0x10>)
 80008f6:	f000 fd72 	bl	80013de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000061c 	.word	0x2000061c

08000904 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800090a:	f002 fc23 	bl	8003154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000474 	.word	0x20000474

08000918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800091c:	4802      	ldr	r0, [pc, #8]	@ (8000928 <TIM2_IRQHandler+0x10>)
 800091e:	f002 fc19 	bl	8003154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200004c0 	.word	0x200004c0

0800092c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <USART2_IRQHandler+0x10>)
 8000932:	f003 f8b5 	bl	8003aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000050c 	.word	0x2000050c

08000940 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <USART3_IRQHandler+0x10>)
 8000946:	f003 f8ab 	bl	8003aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000594 	.word	0x20000594

08000954 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <TIM6_DAC_IRQHandler+0x10>)
 800095a:	f002 fbfb 	bl	8003154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000428 	.word	0x20000428

08000968 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009ac:	4a20      	ldr	r2, [pc, #128]	@ (8000a30 <MX_TIM1_Init+0xa4>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009b2:	224f      	movs	r2, #79	@ 0x4f
 80009b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009be:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d6:	4815      	ldr	r0, [pc, #84]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009d8:	f002 faf4 	bl	8002fc4 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009e2:	f7ff fea7 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 80009f4:	f002 fcb0 	bl	8003358 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009fe:	f7ff fe99 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <MX_TIM1_Init+0xa0>)
 8000a14:	f002 fec6 	bl	80037a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a1e:	f7ff fe89 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000474 	.word	0x20000474
 8000a30:	40012c00 	.word	0x40012c00

08000a34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000-1;
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a68:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a78:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a7a:	f002 faa3 	bl	8002fc4 <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a84:	f7ff fe56 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000a96:	f002 fc5f 	bl	8003358 <HAL_TIM_ConfigClockSource>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000aa0:	f7ff fe48 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_TIM2_Init+0x94>)
 8000ab2:	f002 fe77 	bl	80037a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f7ff fe3a 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200004c0 	.word	0x200004c0
 8000acc:	0001387f 	.word	0x0001387f

08000ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b48 <HAL_TIM_Base_MspInit+0x78>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d114      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae6:	4a19      	ldr	r2, [pc, #100]	@ (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000ae8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2019      	movs	r0, #25
 8000b00:	f000 faac 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b04:	2019      	movs	r0, #25
 8000b06:	f000 fac5 	bl	8001094 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b0a:	e018      	b.n	8000b3e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b14:	d113      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_Base_MspInit+0x7c>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	201c      	movs	r0, #28
 8000b34:	f000 fa92 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b38:	201c      	movs	r0, #28
 8000b3a:	f000 faab 	bl	8001094 <HAL_NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40012c00 	.word	0x40012c00
 8000b4c:	40021000 	.word	0x40021000

08000b50 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b56:	4a15      	ldr	r2, [pc, #84]	@ (8000bac <MX_USART2_UART_Init+0x5c>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b94:	f002 feac 	bl	80038f0 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b9e:	f7ff fdc9 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000050c 	.word	0x2000050c
 8000bac:	40004400 	.word	0x40004400

08000bb0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bb6:	4a15      	ldr	r2, [pc, #84]	@ (8000c0c <MX_USART3_UART_Init+0x5c>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_USART3_UART_Init+0x58>)
 8000bf4:	f002 fe7c 	bl	80038f0 <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bfe:	f7ff fd99 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000594 	.word	0x20000594
 8000c0c:	40004800 	.word	0x40004800

08000c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0ae      	sub	sp, #184	@ 0xb8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	2288      	movs	r2, #136	@ 0x88
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f004 f96d 	bl	8004f10 <memset>
  if(uartHandle->Instance==USART2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a73      	ldr	r2, [pc, #460]	@ (8000e08 <HAL_UART_MspInit+0x1f8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d16d      	bne.n	8000d1c <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 fcfd 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c58:	f7ff fd6c 	bl	8000734 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c60:	4a6a      	ldr	r2, [pc, #424]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c68:	4b68      	ldr	r3, [pc, #416]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b65      	ldr	r3, [pc, #404]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c78:	4a64      	ldr	r2, [pc, #400]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c80:	4b62      	ldr	r3, [pc, #392]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f000 fc72 	bl	800159c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000cb8:	4b55      	ldr	r3, [pc, #340]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cba:	4a56      	ldr	r2, [pc, #344]	@ (8000e14 <HAL_UART_MspInit+0x204>)
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000cbe:	4b54      	ldr	r3, [pc, #336]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc4:	4b52      	ldr	r3, [pc, #328]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cca:	4b51      	ldr	r3, [pc, #324]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce8:	4b49      	ldr	r3, [pc, #292]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cee:	4848      	ldr	r0, [pc, #288]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000cf0:	f000 f9de 	bl	80010b0 <HAL_DMA_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000cfa:	f7ff fd1b 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a43      	ldr	r2, [pc, #268]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000d02:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d04:	4a42      	ldr	r2, [pc, #264]	@ (8000e10 <HAL_UART_MspInit+0x200>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2026      	movs	r0, #38	@ 0x26
 8000d10:	f000 f9a4 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d14:	2026      	movs	r0, #38	@ 0x26
 8000d16:	f000 f9bd 	bl	8001094 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d1a:	e070      	b.n	8000dfe <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a3d      	ldr	r2, [pc, #244]	@ (8000e18 <HAL_UART_MspInit+0x208>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d16b      	bne.n	8000dfe <HAL_UART_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d26:	2304      	movs	r3, #4
 8000d28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fc8a 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000d3e:	f7ff fcf9 	bl	8000734 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d42:	4b32      	ldr	r3, [pc, #200]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	4a31      	ldr	r2, [pc, #196]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <HAL_UART_MspInit+0x1fc>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d72:	2330      	movs	r3, #48	@ 0x30
 8000d74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4821      	ldr	r0, [pc, #132]	@ (8000e1c <HAL_UART_MspInit+0x20c>)
 8000d98:	f000 fc00 	bl	800159c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000d9e:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <HAL_UART_MspInit+0x214>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000db6:	2280      	movs	r2, #128	@ 0x80
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000dd2:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000dd4:	f000 f96c 	bl	80010b0 <HAL_DMA_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8000dde:	f7ff fca9 	bl	8000734 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000de6:	675a      	str	r2, [r3, #116]	@ 0x74
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <HAL_UART_MspInit+0x210>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2027      	movs	r0, #39	@ 0x27
 8000df4:	f000 f932 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000df8:	2027      	movs	r0, #39	@ 0x27
 8000dfa:	f000 f94b 	bl	8001094 <HAL_NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	37b8      	adds	r7, #184	@ 0xb8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40004400 	.word	0x40004400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	2000061c 	.word	0x2000061c
 8000e14:	4002006c 	.word	0x4002006c
 8000e18:	40004800 	.word	0x40004800
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	20000664 	.word	0x20000664
 8000e24:	40020030 	.word	0x40020030

08000e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff fd9c 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f004 f863 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5a:	f7ff fb9f 	bl	800059c <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e6c:	08004fd8 	.word	0x08004fd8
  ldr r2, =_sbss
 8000e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e74:	200006b0 	.word	0x200006b0

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>

08000e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f8de 	bl	8001046 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f7ff fc7c 	bl	8000788 <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	e001      	b.n	8000ea0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9c:	f7ff fc50 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200006ac 	.word	0x200006ac

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200006ac 	.word	0x200006ac

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	@ (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	@ (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff4c 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106e:	f7ff ff61 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 8001072:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ffb1 	bl	8000fe0 <NVIC_EncodePriority>
 800107e:	4602      	mov	r2, r0
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff80 	bl	8000f8c <__NVIC_SetPriority>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff54 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e098      	b.n	80011f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <HAL_DMA_Init+0x150>)
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d80f      	bhi.n	80010ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001204 <HAL_DMA_Init+0x154>)
 80010d6:	4413      	add	r3, r2
 80010d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001208 <HAL_DMA_Init+0x158>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	009a      	lsls	r2, r3, #2
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	@ (800120c <HAL_DMA_Init+0x15c>)
 80010ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ec:	e00e      	b.n	800110c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b46      	ldr	r3, [pc, #280]	@ (8001210 <HAL_DMA_Init+0x160>)
 80010f6:	4413      	add	r3, r2
 80010f8:	4a43      	ldr	r2, [pc, #268]	@ (8001208 <HAL_DMA_Init+0x158>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	009a      	lsls	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a42      	ldr	r2, [pc, #264]	@ (8001214 <HAL_DMA_Init+0x164>)
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2202      	movs	r2, #2
 8001110:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001126:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001166:	d039      	beq.n	80011dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <HAL_DMA_Init+0x15c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d11a      	bne.n	80011a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <HAL_DMA_Init+0x168>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f003 031c 	and.w	r3, r3, #28
 800117e:	210f      	movs	r1, #15
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4924      	ldr	r1, [pc, #144]	@ (8001218 <HAL_DMA_Init+0x168>)
 8001188:	4013      	ands	r3, r2
 800118a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <HAL_DMA_Init+0x168>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	f003 031c 	and.w	r3, r3, #28
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	491d      	ldr	r1, [pc, #116]	@ (8001218 <HAL_DMA_Init+0x168>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
 80011a6:	e019      	b.n	80011dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_DMA_Init+0x16c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b0:	f003 031c 	and.w	r3, r3, #28
 80011b4:	210f      	movs	r1, #15
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4917      	ldr	r1, [pc, #92]	@ (800121c <HAL_DMA_Init+0x16c>)
 80011be:	4013      	ands	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_DMA_Init+0x16c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6859      	ldr	r1, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	f003 031c 	and.w	r3, r3, #28
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	4911      	ldr	r1, [pc, #68]	@ (800121c <HAL_DMA_Init+0x16c>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40020407 	.word	0x40020407
 8001204:	bffdfff8 	.word	0xbffdfff8
 8001208:	cccccccd 	.word	0xcccccccd
 800120c:	40020000 	.word	0x40020000
 8001210:	bffdfbf8 	.word	0xbffdfbf8
 8001214:	40020400 	.word	0x40020400
 8001218:	400200a8 	.word	0x400200a8
 800121c:	400204a8 	.word	0x400204a8

08001220 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_DMA_Start_IT+0x20>
 800123c:	2302      	movs	r3, #2
 800123e:	e04b      	b.n	80012d8 <HAL_DMA_Start_IT+0xb8>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d13a      	bne.n	80012ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f95f 	bl	800153c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 020e 	orr.w	r2, r2, #14
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00f      	b.n	80012b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 020a 	orr.w	r2, r2, #10
 80012b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e005      	b.n	80012d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012d2:	2302      	movs	r3, #2
 80012d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d008      	beq.n	800130a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2204      	movs	r2, #4
 80012fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e022      	b.n	8001350 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 020e 	bic.w	r2, r2, #14
 8001318:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f003 021c 	and.w	r2, r3, #28
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d005      	beq.n	8001380 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2204      	movs	r2, #4
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e029      	b.n	80013d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 020e 	bic.w	r2, r2, #14
 800138e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a4:	f003 021c 	and.w	r2, r3, #28
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	2101      	movs	r1, #1
 80013ae:	fa01 f202 	lsl.w	r2, r1, r2
 80013b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4798      	blx	r3
    }
  }
  return status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f003 031c 	and.w	r3, r3, #28
 80013fe:	2204      	movs	r2, #4
 8001400:	409a      	lsls	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d026      	beq.n	8001458 <HAL_DMA_IRQHandler+0x7a>
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d021      	beq.n	8001458 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	2b00      	cmp	r3, #0
 8001420:	d107      	bne.n	8001432 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0204 	bic.w	r2, r2, #4
 8001430:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f003 021c 	and.w	r2, r3, #28
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	2104      	movs	r1, #4
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	2b00      	cmp	r3, #0
 800144c:	d071      	beq.n	8001532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001456:	e06c      	b.n	8001532 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145c:	f003 031c 	and.w	r3, r3, #28
 8001460:	2202      	movs	r2, #2
 8001462:	409a      	lsls	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d02e      	beq.n	80014ca <HAL_DMA_IRQHandler+0xec>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d029      	beq.n	80014ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10b      	bne.n	800149c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 020a 	bic.w	r2, r2, #10
 8001492:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a0:	f003 021c 	and.w	r2, r3, #28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	2102      	movs	r1, #2
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d038      	beq.n	8001532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014c8:	e033      	b.n	8001532 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f003 031c 	and.w	r3, r3, #28
 80014d2:	2208      	movs	r2, #8
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d02a      	beq.n	8001534 <HAL_DMA_IRQHandler+0x156>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d025      	beq.n	8001534 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 020e 	bic.w	r2, r2, #14
 80014f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	f003 021c 	and.w	r2, r3, #28
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001532:	bf00      	nop
 8001534:	bf00      	nop
}
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f003 021c 	and.w	r2, r3, #28
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f202 	lsl.w	r2, r1, r2
 800155c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b10      	cmp	r3, #16
 800156c:	d108      	bne.n	8001580 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800157e:	e007      	b.n	8001590 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	60da      	str	r2, [r3, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e17f      	b.n	80018ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8171 	beq.w	80018a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x40>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 0201 	and.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d118      	bne.n	800167c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b03      	cmp	r3, #3
 8001686:	d017      	beq.n	80016b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	6939      	ldr	r1, [r7, #16]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80ac 	beq.w	80018a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b5f      	ldr	r3, [pc, #380]	@ (80018cc <HAL_GPIO_Init+0x330>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001752:	4a5e      	ldr	r2, [pc, #376]	@ (80018cc <HAL_GPIO_Init+0x330>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	@ 0x60
 800175a:	4b5c      	ldr	r3, [pc, #368]	@ (80018cc <HAL_GPIO_Init+0x330>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001766:	4a5a      	ldr	r2, [pc, #360]	@ (80018d0 <HAL_GPIO_Init+0x334>)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x242>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	@ (80018d4 <HAL_GPIO_Init+0x338>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x23e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	@ (80018d8 <HAL_GPIO_Init+0x33c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x23a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	@ (80018dc <HAL_GPIO_Init+0x340>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x236>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	@ (80018e0 <HAL_GPIO_Init+0x344>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x232>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	@ (80018e4 <HAL_GPIO_Init+0x348>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x22e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	@ (80018e8 <HAL_GPIO_Init+0x34c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x22a>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017de:	2300      	movs	r3, #0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f0:	4937      	ldr	r1, [pc, #220]	@ (80018d0 <HAL_GPIO_Init+0x334>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017fe:	4b3b      	ldr	r3, [pc, #236]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001822:	4a32      	ldr	r2, [pc, #200]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <HAL_GPIO_Init+0x350>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800184c:	4a27      	ldr	r2, [pc, #156]	@ (80018ec <HAL_GPIO_Init+0x350>)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001876:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_GPIO_Init+0x350>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a0:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <HAL_GPIO_Init+0x350>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f ae78 	bne.w	80015ac <HAL_GPIO_Init+0x10>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48001000 	.word	0x48001000
 80018e4:	48001400 	.word	0x48001400
 80018e8:	48001800 	.word	0x48001800
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800190c:	e002      	b.n	8001914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <HAL_PWREx_GetVoltageRange+0x18>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40007000 	.word	0x40007000

0800193c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800194a:	d130      	bne.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001958:	d038      	beq.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001962:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2232      	movs	r2, #50	@ 0x32
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	4a1b      	ldr	r2, [pc, #108]	@ (80019e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0c9b      	lsrs	r3, r3, #18
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001980:	e002      	b.n	8001988 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3b01      	subs	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001994:	d102      	bne.n	800199c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f2      	bne.n	8001982 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019a8:	d110      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e00f      	b.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ba:	d007      	beq.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019c4:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40007000 	.word	0x40007000
 80019e0:	20000000 	.word	0x20000000
 80019e4:	431bde83 	.word	0x431bde83

080019e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e3ca      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fa:	4b97      	ldr	r3, [pc, #604]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a04:	4b94      	ldr	r3, [pc, #592]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80e4 	beq.w	8001be4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4a>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	f040 808b 	bne.w	8001b40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	f040 8087 	bne.w	8001b40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a32:	4b89      	ldr	r3, [pc, #548]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x62>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e3a2      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	4b82      	ldr	r3, [pc, #520]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_RCC_OscConfig+0x7c>
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a62:	e005      	b.n	8001a70 <HAL_RCC_OscConfig+0x88>
 8001a64:	4b7c      	ldr	r3, [pc, #496]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d223      	bcs.n	8001abc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fd87 	bl	800258c <RCC_SetFlashLatencyFromMSIRange>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e383      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a88:	4b73      	ldr	r3, [pc, #460]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a72      	ldr	r2, [pc, #456]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b70      	ldr	r3, [pc, #448]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	496d      	ldr	r1, [pc, #436]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	4968      	ldr	r1, [pc, #416]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
 8001aba:	e025      	b.n	8001b08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001abc:	4b66      	ldr	r3, [pc, #408]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a65      	ldr	r2, [pc, #404]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b63      	ldr	r3, [pc, #396]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4960      	ldr	r1, [pc, #384]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ada:	4b5f      	ldr	r3, [pc, #380]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	495b      	ldr	r1, [pc, #364]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fd47 	bl	800258c <RCC_SetFlashLatencyFromMSIRange>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e343      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b08:	f000 fc4a 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b52      	ldr	r3, [pc, #328]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	4950      	ldr	r1, [pc, #320]	@ (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	4a4e      	ldr	r2, [pc, #312]	@ (8001c60 <HAL_RCC_OscConfig+0x278>)
 8001b26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b28:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fe2b 	bl	8000788 <HAL_InitTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d052      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	e327      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d032      	beq.n	8001bae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b48:	4b43      	ldr	r3, [pc, #268]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a42      	ldr	r2, [pc, #264]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f9be 	bl	8000ed4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f9ba 	bl	8000ed4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e310      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b7a:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a36      	ldr	r2, [pc, #216]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4931      	ldr	r1, [pc, #196]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b98:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	492c      	ldr	r1, [pc, #176]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
 8001bac:	e01a      	b.n	8001be4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bae:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a29      	ldr	r2, [pc, #164]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bba:	f7ff f98b 	bl	8000ed4 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f987 	bl	8000ed4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e2dd      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd4:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x1da>
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001be2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d074      	beq.n	8001cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d005      	beq.n	8001c02 <HAL_RCC_OscConfig+0x21a>
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d10e      	bne.n	8001c1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d064      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d160      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e2ba      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x24a>
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0b      	ldr	r2, [pc, #44]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e026      	b.n	8001c80 <HAL_RCC_OscConfig+0x298>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c3a:	d115      	bne.n	8001c68 <HAL_RCC_OscConfig+0x280>
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001c42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a02      	ldr	r2, [pc, #8]	@ (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x298>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08004f80 	.word	0x08004f80
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004
 8001c68:	4ba0      	ldr	r3, [pc, #640]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a9f      	ldr	r2, [pc, #636]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b9d      	ldr	r3, [pc, #628]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a9c      	ldr	r2, [pc, #624]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff f924 	bl	8000ed4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff f920 	bl	8000ed4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	@ 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e276      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca2:	4b92      	ldr	r3, [pc, #584]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x2a8>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f910 	bl	8000ed4 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f90c 	bl	8000ed4 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	@ 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e262      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cca:	4b88      	ldr	r3, [pc, #544]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2d0>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d060      	beq.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x310>
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d116      	bne.n	8001d26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x328>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e23f      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b76      	ldr	r3, [pc, #472]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	4973      	ldr	r1, [pc, #460]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d24:	e040      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d023      	beq.n	8001d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6e      	ldr	r2, [pc, #440]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f8cb 	bl	8000ed4 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff f8c7 	bl	8000ed4 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e21d      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d54:	4b65      	ldr	r3, [pc, #404]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b62      	ldr	r3, [pc, #392]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	495f      	ldr	r1, [pc, #380]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e018      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b5d      	ldr	r3, [pc, #372]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d82:	f7ff f8a7 	bl	8000ed4 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7ff f8a3 	bl	8000ed4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1f9      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d9c:	4b53      	ldr	r3, [pc, #332]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d03c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f882 	bl	8000ed4 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f87e 	bl	8000ed4 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1d4      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ef      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x3ec>
 8001df4:	e01b      	b.n	8001e2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff f865 	bl	8000ed4 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f861 	bl	8000ed4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e1b7      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ef      	bne.n	8001e0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80a6 	beq.w	8001f88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e40:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	4a26      	ldr	r2, [pc, #152]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e58:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e64:	2301      	movs	r3, #1
 8001e66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <HAL_RCC_OscConfig+0x508>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d118      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <HAL_RCC_OscConfig+0x508>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef0 <HAL_RCC_OscConfig+0x508>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e80:	f7ff f828 	bl	8000ed4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e88:	f7ff f824 	bl	8000ed4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e17a      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_RCC_OscConfig+0x508>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4d8>
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ebe:	e029      	b.n	8001f14 <HAL_RCC_OscConfig+0x52c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d115      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x50c>
 8001ec8:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a07      	ldr	r2, [pc, #28]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	4a03      	ldr	r2, [pc, #12]	@ (8001eec <HAL_RCC_OscConfig+0x504>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee8:	e014      	b.n	8001f14 <HAL_RCC_OscConfig+0x52c>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	4a9b      	ldr	r2, [pc, #620]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f04:	4b98      	ldr	r3, [pc, #608]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	4a97      	ldr	r2, [pc, #604]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d016      	beq.n	8001f4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7fe ffda 	bl	8000ed4 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7fe ffd6 	bl	8000ed4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e12a      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3a:	4b8b      	ldr	r3, [pc, #556]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ed      	beq.n	8001f24 <HAL_RCC_OscConfig+0x53c>
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ffc3 	bl	8000ed4 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7fe ffbf 	bl	8000ed4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e113      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f68:	4b7f      	ldr	r3, [pc, #508]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ed      	bne.n	8001f52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b7a      	ldr	r3, [pc, #488]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	4a79      	ldr	r2, [pc, #484]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80fe 	beq.w	800218e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	f040 80d0 	bne.w	800213c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f9c:	4b72      	ldr	r3, [pc, #456]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d130      	bne.n	8002012 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d127      	bne.n	8002012 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11f      	bne.n	8002012 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fdc:	2a07      	cmp	r2, #7
 8001fde:	bf14      	ite	ne
 8001fe0:	2201      	movne	r2, #1
 8001fe2:	2200      	moveq	r2, #0
 8001fe4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d113      	bne.n	8002012 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	3b01      	subs	r3, #1
 800200c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d06e      	beq.n	80020f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d069      	beq.n	80020ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002018:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002024:	4b50      	ldr	r3, [pc, #320]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0ad      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002034:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4b      	ldr	r2, [pc, #300]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002040:	f7fe ff48 	bl	8000ed4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ff44 	bl	8000ed4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e09a      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205a:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002066:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b40      	ldr	r3, [pc, #256]	@ (800216c <HAL_RCC_OscConfig+0x784>)
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002076:	3a01      	subs	r2, #1
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002080:	0212      	lsls	r2, r2, #8
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002088:	0852      	lsrs	r2, r2, #1
 800208a:	3a01      	subs	r2, #1
 800208c:	0552      	lsls	r2, r2, #21
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	0652      	lsls	r2, r2, #25
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020a0:	0912      	lsrs	r2, r2, #4
 80020a2:	0452      	lsls	r2, r2, #17
 80020a4:	430a      	orrs	r2, r1
 80020a6:	4930      	ldr	r1, [pc, #192]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c4:	f7fe ff06 	bl	8000ed4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe ff02 	bl	8000ed4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e058      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ea:	e050      	b.n	800218e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e04f      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d148      	bne.n	800218e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002112:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002114:	f7fe fede 	bl	8000ed4 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe feda 	bl	8000ed4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e030      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212e:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x734>
 800213a:	e028      	b.n	800218e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d023      	beq.n	800218a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a08      	ldr	r2, [pc, #32]	@ (8002168 <HAL_RCC_OscConfig+0x780>)
 8002148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe fec1 	bl	8000ed4 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	e00c      	b.n	8002170 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe febd 	bl	8000ed4 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d905      	bls.n	8002170 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e013      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
 8002168:	40021000 	.word	0x40021000
 800216c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_OscConfig+0x7b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ec      	bne.n	8002156 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_RCC_OscConfig+0x7b0>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4905      	ldr	r1, [pc, #20]	@ (8002198 <HAL_RCC_OscConfig+0x7b0>)
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_RCC_OscConfig+0x7b4>)
 8002184:	4013      	ands	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
 8002188:	e001      	b.n	800218e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	feeefffc 	.word	0xfeeefffc

080021a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0e7      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b75      	ldr	r3, [pc, #468]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b72      	ldr	r3, [pc, #456]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4970      	ldr	r1, [pc, #448]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b6e      	ldr	r3, [pc, #440]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0cf      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d010      	beq.n	8002212 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	4b66      	ldr	r3, [pc, #408]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d908      	bls.n	8002212 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b63      	ldr	r3, [pc, #396]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4960      	ldr	r1, [pc, #384]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d04c      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b5a      	ldr	r3, [pc, #360]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d121      	bne.n	8002276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0a6      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223e:	4b54      	ldr	r3, [pc, #336]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d115      	bne.n	8002276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e09a      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002256:	4b4e      	ldr	r3, [pc, #312]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e08e      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002266:	4b4a      	ldr	r3, [pc, #296]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e086      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002276:	4b46      	ldr	r3, [pc, #280]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4943      	ldr	r1, [pc, #268]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002288:	f7fe fe24 	bl	8000ed4 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7fe fe20 	bl	8000ed4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e06e      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 020c 	and.w	r2, r3, #12
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1eb      	bne.n	8002290 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4b31      	ldr	r3, [pc, #196]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d208      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	492b      	ldr	r1, [pc, #172]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d210      	bcs.n	8002316 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f4:	4b25      	ldr	r3, [pc, #148]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 0207 	bic.w	r2, r3, #7
 80022fc:	4923      	ldr	r1, [pc, #140]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002304:	4b21      	ldr	r3, [pc, #132]	@ (800238c <HAL_RCC_ClockConfig+0x1ec>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e036      	b.n	8002384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4918      	ldr	r1, [pc, #96]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002340:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4910      	ldr	r1, [pc, #64]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002354:	f000 f824 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	490b      	ldr	r1, [pc, #44]	@ (8002394 <HAL_RCC_ClockConfig+0x1f4>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x1f8>)
 8002372:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002374:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_RCC_ClockConfig+0x1fc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fa05 	bl	8000788 <HAL_InitTick>
 800237e:	4603      	mov	r3, r0
 8002380:	72fb      	strb	r3, [r7, #11]

  return status;
 8002382:	7afb      	ldrb	r3, [r7, #11]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40022000 	.word	0x40022000
 8002390:	40021000 	.word	0x40021000
 8002394:	08004f80 	.word	0x08004f80
 8002398:	20000000 	.word	0x20000000
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	@ 0x24
 80023a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ae:	4b3e      	ldr	r3, [pc, #248]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b8:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x34>
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d121      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d11e      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023d4:	4b34      	ldr	r3, [pc, #208]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023e0:	4b31      	ldr	r3, [pc, #196]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	e005      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023f0:	4b2d      	ldr	r3, [pc, #180]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023fc:	4a2b      	ldr	r2, [pc, #172]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10d      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d102      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e004      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d101      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002424:	4b23      	ldr	r3, [pc, #140]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002426:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d134      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0xa6>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d003      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0xac>
 8002444:	e005      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002446:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002448:	617b      	str	r3, [r7, #20]
      break;
 800244a:	e005      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800244e:	617b      	str	r3, [r7, #20]
      break;
 8002450:	e002      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	617b      	str	r3, [r7, #20]
      break;
 8002456:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002458:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	3301      	adds	r3, #1
 8002464:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	fb03 f202 	mul.w	r2, r3, r2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800247e:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	0e5b      	lsrs	r3, r3, #25
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	3301      	adds	r3, #1
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002498:	69bb      	ldr	r3, [r7, #24]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	@ 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08004f98 	.word	0x08004f98
 80024b0:	00f42400 	.word	0x00f42400
 80024b4:	007a1200 	.word	0x007a1200

080024b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_RCC_GetHCLKFreq+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000000 	.word	0x20000000

080024d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024d4:	f7ff fff0 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4904      	ldr	r1, [pc, #16]	@ (80024f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08004f90 	.word	0x08004f90

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002500:	f7ff ffda 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0adb      	lsrs	r3, r3, #11
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4904      	ldr	r1, [pc, #16]	@ (8002524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800251c:	4618      	mov	r0, r3
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	08004f90 	.word	0x08004f90

08002528 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	220f      	movs	r2, #15
 8002536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002538:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0203 	and.w	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800255c:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_RCC_GetClockConfig+0x5c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800256a:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_RCC_GetClockConfig+0x60>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0207 	and.w	r2, r3, #7
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	40022000 	.word	0x40022000

0800258c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002598:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025a4:	f7ff f9bc 	bl	8001920 <HAL_PWREx_GetVoltageRange>
 80025a8:	6178      	str	r0, [r7, #20]
 80025aa:	e014      	b.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	4b25      	ldr	r3, [pc, #148]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b8:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025c4:	f7ff f9ac 	bl	8001920 <HAL_PWREx_GetVoltageRange>
 80025c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025dc:	d10b      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b80      	cmp	r3, #128	@ 0x80
 80025e2:	d919      	bls.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80025e8:	d902      	bls.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ea:	2302      	movs	r3, #2
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e013      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f0:	2301      	movs	r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e010      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b80      	cmp	r3, #128	@ 0x80
 80025fa:	d902      	bls.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025fc:	2303      	movs	r3, #3
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e00a      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b80      	cmp	r3, #128	@ 0x80
 8002606:	d102      	bne.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002608:	2302      	movs	r3, #2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e004      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b70      	cmp	r3, #112	@ 0x70
 8002612:	d101      	bne.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002614:	2301      	movs	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 0207 	bic.w	r2, r3, #7
 8002620:	4909      	ldr	r1, [pc, #36]	@ (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002628:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	40022000 	.word	0x40022000

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002654:	2300      	movs	r3, #0
 8002656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002658:	2300      	movs	r3, #0
 800265a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002664:	2b00      	cmp	r3, #0
 8002666:	d041      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800266c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002670:	d02a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002672:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002676:	d824      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002678:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800267c:	d008      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800267e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002682:	d81e      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800268c:	d010      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800268e:	e018      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002690:	4b86      	ldr	r3, [pc, #536]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a85      	ldr	r2, [pc, #532]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800269c:	e015      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fabb 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ae:	e00c      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3320      	adds	r3, #32
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fba6 	bl	8002e08 <RCCEx_PLLSAI2_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c0:	e003      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	74fb      	strb	r3, [r7, #19]
      break;
 80026c6:	e000      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026d0:	4b76      	ldr	r3, [pc, #472]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026de:	4973      	ldr	r1, [pc, #460]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026e6:	e001      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d041      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002700:	d02a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002702:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002706:	d824      	bhi.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800270e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002712:	d81e      	bhi.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800271c:	d010      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800271e:	e018      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002720:	4b62      	ldr	r3, [pc, #392]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a61      	ldr	r2, [pc, #388]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800272c:	e015      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3304      	adds	r3, #4
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fa73 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800273e:	e00c      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3320      	adds	r3, #32
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fb5e 	bl	8002e08 <RCCEx_PLLSAI2_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002750:	e003      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	74fb      	strb	r3, [r7, #19]
      break;
 8002756:	e000      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10b      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002760:	4b52      	ldr	r3, [pc, #328]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800276e:	494f      	ldr	r1, [pc, #316]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002776:	e001      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a0 	beq.w	80028ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800278e:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a4:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	4a40      	ldr	r2, [pc, #256]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b0:	4b3e      	ldr	r3, [pc, #248]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027bc:	2301      	movs	r3, #1
 80027be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c0:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3a      	ldr	r2, [pc, #232]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fb82 	bl	8000ed4 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027d2:	e009      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7fe fb7e 	bl	8000ed4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	74fb      	strb	r3, [r7, #19]
        break;
 80027e6:	e005      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ef      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d15c      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027fa:	4b2c      	ldr	r3, [pc, #176]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002804:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01f      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d019      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002822:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002824:	4b21      	ldr	r3, [pc, #132]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	4a20      	ldr	r2, [pc, #128]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002844:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fb3d 	bl	8000ed4 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285c:	e00b      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fb39 	bl	8000ed4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d902      	bls.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	74fb      	strb	r3, [r7, #19]
            break;
 8002874:	e006      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ec      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002890:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800289a:	4904      	ldr	r1, [pc, #16]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028a2:	e009      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	74bb      	strb	r3, [r7, #18]
 80028a8:	e006      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b8:	7c7b      	ldrb	r3, [r7, #17]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b9e      	ldr	r3, [pc, #632]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c2:	4a9d      	ldr	r2, [pc, #628]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d6:	4b98      	ldr	r3, [pc, #608]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f023 0203 	bic.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e4:	4994      	ldr	r1, [pc, #592]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 020c 	bic.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002906:	498c      	ldr	r1, [pc, #560]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800291a:	4b87      	ldr	r3, [pc, #540]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	4983      	ldr	r1, [pc, #524]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800293c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	497b      	ldr	r1, [pc, #492]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800295e:	4b76      	ldr	r3, [pc, #472]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296c:	4972      	ldr	r1, [pc, #456]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002980:	4b6d      	ldr	r3, [pc, #436]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298e:	496a      	ldr	r1, [pc, #424]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029a2:	4b65      	ldr	r3, [pc, #404]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	4961      	ldr	r1, [pc, #388]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d2:	4959      	ldr	r1, [pc, #356]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029e6:	4b54      	ldr	r3, [pc, #336]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f4:	4950      	ldr	r1, [pc, #320]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a08:	4b4b      	ldr	r3, [pc, #300]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a16:	4948      	ldr	r1, [pc, #288]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a2a:	4b43      	ldr	r3, [pc, #268]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	493f      	ldr	r1, [pc, #252]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d028      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a5a:	4937      	ldr	r1, [pc, #220]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6c:	4b32      	ldr	r3, [pc, #200]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a31      	ldr	r2, [pc, #196]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a76:	60d3      	str	r3, [r2, #12]
 8002a78:	e011      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f8c8 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d028      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aaa:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab8:	491f      	ldr	r1, [pc, #124]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aca:	4b1b      	ldr	r3, [pc, #108]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4a1a      	ldr	r2, [pc, #104]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad4:	60d3      	str	r3, [r2, #12]
 8002ad6:	e011      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f899 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02b      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b16:	4908      	ldr	r1, [pc, #32]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b26:	d109      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a02      	ldr	r2, [pc, #8]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b32:	60d3      	str	r3, [r2, #12]
 8002b34:	e014      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f867 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d02f      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b7a:	4928      	ldr	r1, [pc, #160]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f844 	bl	8002c20 <RCCEx_PLLSAI1_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d014      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	74bb      	strb	r3, [r7, #18]
 8002ba6:	e011      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3320      	adds	r3, #32
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f925 	bl	8002e08 <RCCEx_PLLSAI2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bd8:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be6:	490d      	ldr	r1, [pc, #52]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c0a:	4904      	ldr	r1, [pc, #16]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c12:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000

08002c20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c2e:	4b75      	ldr	r3, [pc, #468]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d018      	beq.n	8002c6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c3a:	4b72      	ldr	r3, [pc, #456]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0203 	and.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d10d      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c52:	4b6c      	ldr	r3, [pc, #432]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
       ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d047      	beq.n	8002cf6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e044      	b.n	8002cf6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d018      	beq.n	8002ca6 <RCCEx_PLLSAI1_Config+0x86>
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d825      	bhi.n	8002cc4 <RCCEx_PLLSAI1_Config+0xa4>
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <RCCEx_PLLSAI1_Config+0x62>
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d009      	beq.n	8002c94 <RCCEx_PLLSAI1_Config+0x74>
 8002c80:	e020      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c82:	4b60      	ldr	r3, [pc, #384]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11d      	bne.n	8002cca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c92:	e01a      	b.n	8002cca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c94:	4b5b      	ldr	r3, [pc, #364]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d116      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e013      	b.n	8002cce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ca6:	4b57      	ldr	r3, [pc, #348]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cb2:	4b54      	ldr	r3, [pc, #336]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cc2:	e006      	b.n	8002cd2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e004      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cda:	4b4a      	ldr	r3, [pc, #296]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	4944      	ldr	r1, [pc, #272]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d17d      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cfc:	4b41      	ldr	r3, [pc, #260]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a40      	ldr	r2, [pc, #256]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe f8e4 	bl	8000ed4 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d0e:	e009      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d10:	f7fe f8e0 	bl	8000ed4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	73fb      	strb	r3, [r7, #15]
        break;
 8002d22:	e005      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d24:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ef      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d160      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d3c:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6892      	ldr	r2, [r2, #8]
 8002d4c:	0211      	lsls	r1, r2, #8
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	0912      	lsrs	r2, r2, #4
 8002d54:	0452      	lsls	r2, r2, #17
 8002d56:	430a      	orrs	r2, r1
 8002d58:	492a      	ldr	r1, [pc, #168]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]
 8002d5e:	e027      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d112      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d66:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6892      	ldr	r2, [r2, #8]
 8002d76:	0211      	lsls	r1, r2, #8
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6912      	ldr	r2, [r2, #16]
 8002d7c:	0852      	lsrs	r2, r2, #1
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0552      	lsls	r2, r2, #21
 8002d82:	430a      	orrs	r2, r1
 8002d84:	491f      	ldr	r1, [pc, #124]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	610b      	str	r3, [r1, #16]
 8002d8a:	e011      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6892      	ldr	r2, [r2, #8]
 8002d9c:	0211      	lsls	r1, r2, #8
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6952      	ldr	r2, [r2, #20]
 8002da2:	0852      	lsrs	r2, r2, #1
 8002da4:	3a01      	subs	r2, #1
 8002da6:	0652      	lsls	r2, r2, #25
 8002da8:	430a      	orrs	r2, r1
 8002daa:	4916      	ldr	r1, [pc, #88]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002db0:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f88a 	bl	8000ed4 <HAL_GetTick>
 8002dc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dc2:	e009      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dc4:	f7fe f886 	bl	8000ed4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d902      	bls.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	73fb      	strb	r3, [r7, #15]
          break;
 8002dd6:	e005      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ef      	beq.n	8002dc4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	4904      	ldr	r1, [pc, #16]	@ (8002e04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000

08002e08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e16:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d018      	beq.n	8002e54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e22:	4b67      	ldr	r3, [pc, #412]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0203 	and.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d10d      	bne.n	8002e4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
       ||
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e3a:	4b61      	ldr	r3, [pc, #388]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
       ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d047      	beq.n	8002ede <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	e044      	b.n	8002ede <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d018      	beq.n	8002e8e <RCCEx_PLLSAI2_Config+0x86>
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d825      	bhi.n	8002eac <RCCEx_PLLSAI2_Config+0xa4>
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d002      	beq.n	8002e6a <RCCEx_PLLSAI2_Config+0x62>
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d009      	beq.n	8002e7c <RCCEx_PLLSAI2_Config+0x74>
 8002e68:	e020      	b.n	8002eac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e6a:	4b55      	ldr	r3, [pc, #340]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11d      	bne.n	8002eb2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7a:	e01a      	b.n	8002eb2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e7c:	4b50      	ldr	r3, [pc, #320]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d116      	bne.n	8002eb6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e013      	b.n	8002eb6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e9a:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eaa:	e006      	b.n	8002eba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e004      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	4939      	ldr	r1, [pc, #228]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d167      	bne.n	8002fb4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ee4:	4b36      	ldr	r3, [pc, #216]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a35      	ldr	r2, [pc, #212]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef0:	f7fd fff0 	bl	8000ed4 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ef6:	e009      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ef8:	f7fd ffec 	bl	8000ed4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d902      	bls.n	8002f0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	73fb      	strb	r3, [r7, #15]
        break;
 8002f0a:	e005      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ef      	bne.n	8002ef8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d14a      	bne.n	8002fb4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d111      	bne.n	8002f48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f24:	4b26      	ldr	r3, [pc, #152]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6892      	ldr	r2, [r2, #8]
 8002f34:	0211      	lsls	r1, r2, #8
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	0912      	lsrs	r2, r2, #4
 8002f3c:	0452      	lsls	r2, r2, #17
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	491f      	ldr	r1, [pc, #124]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	614b      	str	r3, [r1, #20]
 8002f46:	e011      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f48:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f50:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6892      	ldr	r2, [r2, #8]
 8002f58:	0211      	lsls	r1, r2, #8
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6912      	ldr	r2, [r2, #16]
 8002f5e:	0852      	lsrs	r2, r2, #1
 8002f60:	3a01      	subs	r2, #1
 8002f62:	0652      	lsls	r2, r2, #25
 8002f64:	430a      	orrs	r2, r1
 8002f66:	4916      	ldr	r1, [pc, #88]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f6c:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a13      	ldr	r2, [pc, #76]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fd ffac 	bl	8000ed4 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f7e:	e009      	b.n	8002f94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f80:	f7fd ffa8 	bl	8000ed4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	73fb      	strb	r3, [r7, #15]
          break;
 8002f92:	e005      	b.n	8002fa0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fa6:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	4904      	ldr	r1, [pc, #16]	@ (8002fc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e049      	b.n	800306a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fd70 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fa9a 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e04f      	b.n	800312c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a23      	ldr	r2, [pc, #140]	@ (8003138 <HAL_TIM_Base_Start_IT+0xc4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b6:	d018      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <HAL_TIM_Base_Start_IT+0xc8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <HAL_TIM_Base_Start_IT+0xcc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <HAL_TIM_Base_Start_IT+0xd0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <HAL_TIM_Base_Start_IT+0xd4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_TIM_Base_Start_IT+0xd8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d115      	bne.n	8003116 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <HAL_TIM_Base_Start_IT+0xdc>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d015      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003102:	d011      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003114:	e008      	b.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e000      	b.n	800312a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40013400 	.word	0x40013400
 800314c:	40014000 	.word	0x40014000
 8003150:	00010007 	.word	0x00010007

08003154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d020      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01b      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0202 	mvn.w	r2, #2
 8003188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9ad 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f99f 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9b0 	bl	8003512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d020      	beq.n	8003204 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01b      	beq.n	8003204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0204 	mvn.w	r2, #4
 80031d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f987 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 80031f0:	e005      	b.n	80031fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f979 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f98a 	bl	8003512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0208 	mvn.w	r2, #8
 8003220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2204      	movs	r2, #4
 8003226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f961 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f953 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f964 	bl	8003512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	d020      	beq.n	800329c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0210 	mvn.w	r2, #16
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2208      	movs	r2, #8
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f93b 	bl	80034fe <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f92d 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f93e 	bl	8003512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0201 	mvn.w	r2, #1
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fa28 	bl	8000710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 faf2 	bl	80038c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 faea 	bl	80038dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8fd 	bl	8003526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00c      	beq.n	8003350 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0220 	mvn.w	r2, #32
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fab2 	bl	80038b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_TIM_ConfigClockSource+0x1c>
 8003370:	2302      	movs	r3, #2
 8003372:	e0b6      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x18a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003392:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800339e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b0:	d03e      	beq.n	8003430 <HAL_TIM_ConfigClockSource+0xd8>
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b6:	f200 8087 	bhi.w	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033be:	f000 8086 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x176>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c6:	d87f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033c8:	2b70      	cmp	r3, #112	@ 0x70
 80033ca:	d01a      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0xaa>
 80033cc:	2b70      	cmp	r3, #112	@ 0x70
 80033ce:	d87b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033d0:	2b60      	cmp	r3, #96	@ 0x60
 80033d2:	d050      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x11e>
 80033d4:	2b60      	cmp	r3, #96	@ 0x60
 80033d6:	d877      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033d8:	2b50      	cmp	r3, #80	@ 0x50
 80033da:	d03c      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xfe>
 80033dc:	2b50      	cmp	r3, #80	@ 0x50
 80033de:	d873      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033e0:	2b40      	cmp	r3, #64	@ 0x40
 80033e2:	d058      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x13e>
 80033e4:	2b40      	cmp	r3, #64	@ 0x40
 80033e6:	d86f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033e8:	2b30      	cmp	r3, #48	@ 0x30
 80033ea:	d064      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15e>
 80033ec:	2b30      	cmp	r3, #48	@ 0x30
 80033ee:	d86b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d060      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15e>
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d867      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05c      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15e>
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d05a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15e>
 8003400:	e062      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003412:	f000 f9a7 	bl	8003764 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	609a      	str	r2, [r3, #8]
      break;
 800342e:	e04f      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	f000 f990 	bl	8003764 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003452:	609a      	str	r2, [r3, #8]
      break;
 8003454:	e03c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	461a      	mov	r2, r3
 8003464:	f000 f904 	bl	8003670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2150      	movs	r1, #80	@ 0x50
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f95d 	bl	800372e <TIM_ITRx_SetConfig>
      break;
 8003474:	e02c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003482:	461a      	mov	r2, r3
 8003484:	f000 f923 	bl	80036ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2160      	movs	r1, #96	@ 0x60
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f94d 	bl	800372e <TIM_ITRx_SetConfig>
      break;
 8003494:	e01c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a2:	461a      	mov	r2, r3
 80034a4:	f000 f8e4 	bl	8003670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2140      	movs	r1, #64	@ 0x40
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f93d 	bl	800372e <TIM_ITRx_SetConfig>
      break;
 80034b4:	e00c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f000 f934 	bl	800372e <TIM_ITRx_SetConfig>
      break;
 80034c6:	e003      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      break;
 80034cc:	e000      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80034ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a40      	ldr	r2, [pc, #256]	@ (8003650 <TIM_Base_SetConfig+0x114>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d013      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355a:	d00f      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3d      	ldr	r2, [pc, #244]	@ (8003654 <TIM_Base_SetConfig+0x118>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00b      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3c      	ldr	r2, [pc, #240]	@ (8003658 <TIM_Base_SetConfig+0x11c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3b      	ldr	r2, [pc, #236]	@ (800365c <TIM_Base_SetConfig+0x120>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3a      	ldr	r2, [pc, #232]	@ (8003660 <TIM_Base_SetConfig+0x124>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d108      	bne.n	800358e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2f      	ldr	r2, [pc, #188]	@ (8003650 <TIM_Base_SetConfig+0x114>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359c:	d01b      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003654 <TIM_Base_SetConfig+0x118>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003658 <TIM_Base_SetConfig+0x11c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2a      	ldr	r2, [pc, #168]	@ (800365c <TIM_Base_SetConfig+0x120>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <TIM_Base_SetConfig+0x124>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a28      	ldr	r2, [pc, #160]	@ (8003664 <TIM_Base_SetConfig+0x128>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a27      	ldr	r2, [pc, #156]	@ (8003668 <TIM_Base_SetConfig+0x12c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x9a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a26      	ldr	r2, [pc, #152]	@ (800366c <TIM_Base_SetConfig+0x130>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a10      	ldr	r2, [pc, #64]	@ (8003650 <TIM_Base_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a12      	ldr	r2, [pc, #72]	@ (8003660 <TIM_Base_SetConfig+0x124>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a11      	ldr	r2, [pc, #68]	@ (8003664 <TIM_Base_SetConfig+0x128>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a10      	ldr	r2, [pc, #64]	@ (8003668 <TIM_Base_SetConfig+0x12c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0xf8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0f      	ldr	r2, [pc, #60]	@ (800366c <TIM_Base_SetConfig+0x130>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40013400 	.word	0x40013400
 8003664:	40014000 	.word	0x40014000
 8003668:	40014400 	.word	0x40014400
 800366c:	40014800 	.word	0x40014800

08003670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0201 	bic.w	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800369a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f023 030a 	bic.w	r3, r3, #10
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f023 0210 	bic.w	r2, r3, #16
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	031b      	lsls	r3, r3, #12
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800370a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	f043 0307 	orr.w	r3, r3, #7
 8003750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800377e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	021a      	lsls	r2, r3, #8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	431a      	orrs	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e068      	b.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2d      	ldr	r2, [pc, #180]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80037f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003808:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1e      	ldr	r2, [pc, #120]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01d      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382e:	d018      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1b      	ldr	r2, [pc, #108]	@ (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1a      	ldr	r2, [pc, #104]	@ (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00e      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10c      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4313      	orrs	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000

080038b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e040      	b.n	8003984 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd f97c 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	@ 0x24
 800391c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fe7c 	bl	8004634 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fbc1 	bl	80040c4 <UART_SetConfig>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e01b      	b.n	8003984 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800395a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800396a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fefb 	bl	8004778 <UART_CheckIdleState>
 8003982:	4603      	mov	r3, r0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	@ 0x28
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d177      	bne.n	8003a94 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_UART_Transmit+0x24>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e070      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2221      	movs	r2, #33	@ 0x21
 80039c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c2:	f7fd fa87 	bl	8000ed4 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e0:	d108      	bne.n	80039f4 <HAL_UART_Transmit+0x68>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	e003      	b.n	80039fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039fc:	e02f      	b.n	8003a5e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2180      	movs	r1, #128	@ 0x80
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 ff5d 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e03b      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a30:	b292      	uxth	r2, r2
 8003a32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	3302      	adds	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e007      	b.n	8003a4c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1c9      	bne.n	80039fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	@ 0x40
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 ff27 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e005      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003aca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ace:	4013      	ands	r3, r2
 8003ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d115      	bne.n	8003b08 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00f      	beq.n	8003b08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 82ae 	beq.w	800405a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
      }
      return;
 8003b06:	e2a8      	b.n	800405a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8117 	beq.w	8003d40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b22:	4b85      	ldr	r3, [pc, #532]	@ (8003d38 <HAL_UART_IRQHandler+0x298>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 810a 	beq.w	8003d40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d011      	beq.n	8003b5c <HAL_UART_IRQHandler+0xbc>
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d011      	beq.n	8003b8c <HAL_UART_IRQHandler+0xec>
 8003b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00b      	beq.n	8003b8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d011      	beq.n	8003bbc <HAL_UART_IRQHandler+0x11c>
 8003b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2208      	movs	r2, #8
 8003be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bee:	f043 0208 	orr.w	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d012      	beq.n	8003c2a <HAL_UART_IRQHandler+0x18a>
 8003c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8214 	beq.w	800405e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04f      	beq.n	8003d22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 ff4e 	bl	8004b24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	d141      	bne.n	8003d1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1d9      	bne.n	8003c96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d013      	beq.n	8003d12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cee:	4a13      	ldr	r2, [pc, #76]	@ (8003d3c <HAL_UART_IRQHandler+0x29c>)
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fb30 	bl	800135c <HAL_DMA_Abort_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e00f      	b.n	8003d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f9cc 	bl	80040b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00b      	b.n	8003d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9c8 	bl	80040b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e007      	b.n	8003d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9c4 	bl	80040b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003d30:	e195      	b.n	800405e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d32:	bf00      	nop
    return;
 8003d34:	e193      	b.n	800405e <HAL_UART_IRQHandler+0x5be>
 8003d36:	bf00      	nop
 8003d38:	04000120 	.word	0x04000120
 8003d3c:	08004dd5 	.word	0x08004dd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 814e 	bne.w	8003fe6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8147 	beq.w	8003fe6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8140 	beq.w	8003fe6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	f040 80b8 	bne.w	8003eee <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8167 	beq.w	8004062 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	f080 815f 	bcs.w	8004062 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003daa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 8086 	bne.w	8003ecc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003dea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1da      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e1      	bne.n	8003e0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3308      	adds	r3, #8
 8003e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e3      	bne.n	8003e46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9c:	f023 0310 	bic.w	r3, r3, #16
 8003ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003eb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e4      	bne.n	8003e8c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fa0a 	bl	80012e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fc fbd8 	bl	800069c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003eec:	e0b9      	b.n	8004062 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80ab 	beq.w	8004066 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a6 	beq.w	8004066 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e4      	bne.n	8003f1a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3308      	adds	r3, #8
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f74:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e3      	bne.n	8003f50 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	69b9      	ldr	r1, [r7, #24]
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	617b      	str	r3, [r7, #20]
   return(result);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e4      	bne.n	8003f9c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc fb5c 	bl	800069c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fe4:	e03f      	b.n	8004066 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <HAL_UART_IRQHandler+0x570>
 8003ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004006:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 ff23 	bl	8004e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800400e:	e02d      	b.n	800406c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800401c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01c      	beq.n	800406a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
    }
    return;
 8004038:	e017      	b.n	800406a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <HAL_UART_IRQHandler+0x5cc>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800404a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fed4 	bl	8004e00 <UART_EndTransmit_IT>
    return;
 8004058:	e008      	b.n	800406c <HAL_UART_IRQHandler+0x5cc>
      return;
 800405a:	bf00      	nop
 800405c:	e006      	b.n	800406c <HAL_UART_IRQHandler+0x5cc>
    return;
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_UART_IRQHandler+0x5cc>
    return;
 800406a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800406c:	37e8      	adds	r7, #232	@ 0xe8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop

08004074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c8:	b08a      	sub	sp, #40	@ 0x28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4ba4      	ldr	r3, [pc, #656]	@ (8004384 <UART_SetConfig+0x2c0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a99      	ldr	r2, [pc, #612]	@ (8004388 <UART_SetConfig+0x2c4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412c:	4313      	orrs	r3, r2
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a90      	ldr	r2, [pc, #576]	@ (800438c <UART_SetConfig+0x2c8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d126      	bne.n	800419c <UART_SetConfig+0xd8>
 800414e:	4b90      	ldr	r3, [pc, #576]	@ (8004390 <UART_SetConfig+0x2cc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d81b      	bhi.n	8004194 <UART_SetConfig+0xd0>
 800415c:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <UART_SetConfig+0xa0>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004175 	.word	0x08004175
 8004168:	08004185 	.word	0x08004185
 800416c:	0800417d 	.word	0x0800417d
 8004170:	0800418d 	.word	0x0800418d
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417a:	e116      	b.n	80043aa <UART_SetConfig+0x2e6>
 800417c:	2302      	movs	r3, #2
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004182:	e112      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004184:	2304      	movs	r3, #4
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800418a:	e10e      	b.n	80043aa <UART_SetConfig+0x2e6>
 800418c:	2308      	movs	r3, #8
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004192:	e10a      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004194:	2310      	movs	r3, #16
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800419a:	e106      	b.n	80043aa <UART_SetConfig+0x2e6>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a7c      	ldr	r2, [pc, #496]	@ (8004394 <UART_SetConfig+0x2d0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d138      	bne.n	8004218 <UART_SetConfig+0x154>
 80041a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004390 <UART_SetConfig+0x2cc>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d82d      	bhi.n	8004210 <UART_SetConfig+0x14c>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0xf8>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041f1 	.word	0x080041f1
 80041c0:	08004211 	.word	0x08004211
 80041c4:	08004211 	.word	0x08004211
 80041c8:	08004211 	.word	0x08004211
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004211 	.word	0x08004211
 80041d8:	08004211 	.word	0x08004211
 80041dc:	080041f9 	.word	0x080041f9
 80041e0:	08004211 	.word	0x08004211
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004211 	.word	0x08004211
 80041ec:	08004209 	.word	0x08004209
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f6:	e0d8      	b.n	80043aa <UART_SetConfig+0x2e6>
 80041f8:	2302      	movs	r3, #2
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fe:	e0d4      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004200:	2304      	movs	r3, #4
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004206:	e0d0      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004208:	2308      	movs	r3, #8
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420e:	e0cc      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e0c8      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5e      	ldr	r2, [pc, #376]	@ (8004398 <UART_SetConfig+0x2d4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d125      	bne.n	800426e <UART_SetConfig+0x1aa>
 8004222:	4b5b      	ldr	r3, [pc, #364]	@ (8004390 <UART_SetConfig+0x2cc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004228:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800422c:	2b30      	cmp	r3, #48	@ 0x30
 800422e:	d016      	beq.n	800425e <UART_SetConfig+0x19a>
 8004230:	2b30      	cmp	r3, #48	@ 0x30
 8004232:	d818      	bhi.n	8004266 <UART_SetConfig+0x1a2>
 8004234:	2b20      	cmp	r3, #32
 8004236:	d00a      	beq.n	800424e <UART_SetConfig+0x18a>
 8004238:	2b20      	cmp	r3, #32
 800423a:	d814      	bhi.n	8004266 <UART_SetConfig+0x1a2>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <UART_SetConfig+0x182>
 8004240:	2b10      	cmp	r3, #16
 8004242:	d008      	beq.n	8004256 <UART_SetConfig+0x192>
 8004244:	e00f      	b.n	8004266 <UART_SetConfig+0x1a2>
 8004246:	2300      	movs	r3, #0
 8004248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424c:	e0ad      	b.n	80043aa <UART_SetConfig+0x2e6>
 800424e:	2302      	movs	r3, #2
 8004250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004254:	e0a9      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004256:	2304      	movs	r3, #4
 8004258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425c:	e0a5      	b.n	80043aa <UART_SetConfig+0x2e6>
 800425e:	2308      	movs	r3, #8
 8004260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004264:	e0a1      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004266:	2310      	movs	r3, #16
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426c:	e09d      	b.n	80043aa <UART_SetConfig+0x2e6>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a4a      	ldr	r2, [pc, #296]	@ (800439c <UART_SetConfig+0x2d8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d125      	bne.n	80042c4 <UART_SetConfig+0x200>
 8004278:	4b45      	ldr	r3, [pc, #276]	@ (8004390 <UART_SetConfig+0x2cc>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004282:	2bc0      	cmp	r3, #192	@ 0xc0
 8004284:	d016      	beq.n	80042b4 <UART_SetConfig+0x1f0>
 8004286:	2bc0      	cmp	r3, #192	@ 0xc0
 8004288:	d818      	bhi.n	80042bc <UART_SetConfig+0x1f8>
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d00a      	beq.n	80042a4 <UART_SetConfig+0x1e0>
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d814      	bhi.n	80042bc <UART_SetConfig+0x1f8>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <UART_SetConfig+0x1d8>
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d008      	beq.n	80042ac <UART_SetConfig+0x1e8>
 800429a:	e00f      	b.n	80042bc <UART_SetConfig+0x1f8>
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e082      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e07e      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042ac:	2304      	movs	r3, #4
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e07a      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042b4:	2308      	movs	r3, #8
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ba:	e076      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042bc:	2310      	movs	r3, #16
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c2:	e072      	b.n	80043aa <UART_SetConfig+0x2e6>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a35      	ldr	r2, [pc, #212]	@ (80043a0 <UART_SetConfig+0x2dc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d12a      	bne.n	8004324 <UART_SetConfig+0x260>
 80042ce:	4b30      	ldr	r3, [pc, #192]	@ (8004390 <UART_SetConfig+0x2cc>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042dc:	d01a      	beq.n	8004314 <UART_SetConfig+0x250>
 80042de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e2:	d81b      	bhi.n	800431c <UART_SetConfig+0x258>
 80042e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e8:	d00c      	beq.n	8004304 <UART_SetConfig+0x240>
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ee:	d815      	bhi.n	800431c <UART_SetConfig+0x258>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <UART_SetConfig+0x238>
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f8:	d008      	beq.n	800430c <UART_SetConfig+0x248>
 80042fa:	e00f      	b.n	800431c <UART_SetConfig+0x258>
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004302:	e052      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004304:	2302      	movs	r3, #2
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800430a:	e04e      	b.n	80043aa <UART_SetConfig+0x2e6>
 800430c:	2304      	movs	r3, #4
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004312:	e04a      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004314:	2308      	movs	r3, #8
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e046      	b.n	80043aa <UART_SetConfig+0x2e6>
 800431c:	2310      	movs	r3, #16
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e042      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <UART_SetConfig+0x2c4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d13a      	bne.n	80043a4 <UART_SetConfig+0x2e0>
 800432e:	4b18      	ldr	r3, [pc, #96]	@ (8004390 <UART_SetConfig+0x2cc>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004338:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800433c:	d01a      	beq.n	8004374 <UART_SetConfig+0x2b0>
 800433e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004342:	d81b      	bhi.n	800437c <UART_SetConfig+0x2b8>
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004348:	d00c      	beq.n	8004364 <UART_SetConfig+0x2a0>
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800434e:	d815      	bhi.n	800437c <UART_SetConfig+0x2b8>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <UART_SetConfig+0x298>
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004358:	d008      	beq.n	800436c <UART_SetConfig+0x2a8>
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x2b8>
 800435c:	2300      	movs	r3, #0
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e022      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004364:	2302      	movs	r3, #2
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436a:	e01e      	b.n	80043aa <UART_SetConfig+0x2e6>
 800436c:	2304      	movs	r3, #4
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e01a      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004374:	2308      	movs	r3, #8
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e016      	b.n	80043aa <UART_SetConfig+0x2e6>
 800437c:	2310      	movs	r3, #16
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e012      	b.n	80043aa <UART_SetConfig+0x2e6>
 8004384:	efff69f3 	.word	0xefff69f3
 8004388:	40008000 	.word	0x40008000
 800438c:	40013800 	.word	0x40013800
 8004390:	40021000 	.word	0x40021000
 8004394:	40004400 	.word	0x40004400
 8004398:	40004800 	.word	0x40004800
 800439c:	40004c00 	.word	0x40004c00
 80043a0:	40005000 	.word	0x40005000
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a9f      	ldr	r2, [pc, #636]	@ (800462c <UART_SetConfig+0x568>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d17a      	bne.n	80044aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d824      	bhi.n	8004406 <UART_SetConfig+0x342>
 80043bc:	a201      	add	r2, pc, #4	@ (adr r2, 80043c4 <UART_SetConfig+0x300>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043e9 	.word	0x080043e9
 80043c8:	08004407 	.word	0x08004407
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	08004407 	.word	0x08004407
 80043d4:	080043f7 	.word	0x080043f7
 80043d8:	08004407 	.word	0x08004407
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004407 	.word	0x08004407
 80043e4:	080043ff 	.word	0x080043ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e8:	f7fe f872 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 80043ec:	61f8      	str	r0, [r7, #28]
        break;
 80043ee:	e010      	b.n	8004412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004630 <UART_SetConfig+0x56c>)
 80043f2:	61fb      	str	r3, [r7, #28]
        break;
 80043f4:	e00d      	b.n	8004412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f6:	f7fd ffd3 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 80043fa:	61f8      	str	r0, [r7, #28]
        break;
 80043fc:	e009      	b.n	8004412 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004402:	61fb      	str	r3, [r7, #28]
        break;
 8004404:	e005      	b.n	8004412 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80fb 	beq.w	8004610 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4413      	add	r3, r2
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	429a      	cmp	r2, r3
 8004428:	d305      	bcc.n	8004436 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	429a      	cmp	r2, r3
 8004434:	d903      	bls.n	800443e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800443c:	e0e8      	b.n	8004610 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2200      	movs	r2, #0
 8004442:	461c      	mov	r4, r3
 8004444:	4615      	mov	r5, r2
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	022b      	lsls	r3, r5, #8
 8004450:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004454:	0222      	lsls	r2, r4, #8
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	6849      	ldr	r1, [r1, #4]
 800445a:	0849      	lsrs	r1, r1, #1
 800445c:	2000      	movs	r0, #0
 800445e:	4688      	mov	r8, r1
 8004460:	4681      	mov	r9, r0
 8004462:	eb12 0a08 	adds.w	sl, r2, r8
 8004466:	eb43 0b09 	adc.w	fp, r3, r9
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004478:	4650      	mov	r0, sl
 800447a:	4659      	mov	r1, fp
 800447c:	f7fb fea4 	bl	80001c8 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800448e:	d308      	bcc.n	80044a2 <UART_SetConfig+0x3de>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004496:	d204      	bcs.n	80044a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	e0b6      	b.n	8004610 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044a8:	e0b2      	b.n	8004610 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b2:	d15e      	bne.n	8004572 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80044b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d828      	bhi.n	800450e <UART_SetConfig+0x44a>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0x400>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044ff 	.word	0x080044ff
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	0800450f 	.word	0x0800450f
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7fd fff2 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 80044ec:	61f8      	str	r0, [r7, #28]
        break;
 80044ee:	e014      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7fe f804 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 80044f4:	61f8      	str	r0, [r7, #28]
        break;
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004630 <UART_SetConfig+0x56c>)
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fd ff4f 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8004502:	61f8      	str	r0, [r7, #28]
        break;
 8004504:	e009      	b.n	800451a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e005      	b.n	800451a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d077      	beq.n	8004610 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005a      	lsls	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	441a      	add	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d916      	bls.n	800456a <UART_SetConfig+0x4a6>
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d212      	bcs.n	800456a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f023 030f 	bic.w	r3, r3, #15
 800454c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	b29b      	uxth	r3, r3
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	b29a      	uxth	r2, r3
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	4313      	orrs	r3, r2
 800455e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	8afa      	ldrh	r2, [r7, #22]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	e052      	b.n	8004610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004570:	e04e      	b.n	8004610 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004572:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004576:	2b08      	cmp	r3, #8
 8004578:	d827      	bhi.n	80045ca <UART_SetConfig+0x506>
 800457a:	a201      	add	r2, pc, #4	@ (adr r2, 8004580 <UART_SetConfig+0x4bc>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045ad 	.word	0x080045ad
 8004588:	080045b5 	.word	0x080045b5
 800458c:	080045cb 	.word	0x080045cb
 8004590:	080045bb 	.word	0x080045bb
 8004594:	080045cb 	.word	0x080045cb
 8004598:	080045cb 	.word	0x080045cb
 800459c:	080045cb 	.word	0x080045cb
 80045a0:	080045c3 	.word	0x080045c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a4:	f7fd ff94 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 80045a8:	61f8      	str	r0, [r7, #28]
        break;
 80045aa:	e014      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ac:	f7fd ffa6 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 80045b0:	61f8      	str	r0, [r7, #28]
        break;
 80045b2:	e010      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004630 <UART_SetConfig+0x56c>)
 80045b6:	61fb      	str	r3, [r7, #28]
        break;
 80045b8:	e00d      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ba:	f7fd fef1 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 80045be:	61f8      	str	r0, [r7, #28]
        break;
 80045c0:	e009      	b.n	80045d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045c6:	61fb      	str	r3, [r7, #28]
        break;
 80045c8:	e005      	b.n	80045d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045d4:	bf00      	nop
    }

    if (pclk != 0U)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d019      	beq.n	8004610 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	085a      	lsrs	r2, r3, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d909      	bls.n	800460a <UART_SetConfig+0x546>
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d205      	bcs.n	800460a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	e002      	b.n	8004610 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800461c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004620:	4618      	mov	r0, r3
 8004622:	3728      	adds	r7, #40	@ 0x28
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	40008000 	.word	0x40008000
 8004630:	00f42400 	.word	0x00f42400

08004634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01a      	beq.n	800474a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004732:	d10a      	bne.n	800474a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b098      	sub	sp, #96	@ 0x60
 800477c:	af02      	add	r7, sp, #8
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004788:	f7fc fba4 	bl	8000ed4 <HAL_GetTick>
 800478c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b08      	cmp	r3, #8
 800479a:	d12e      	bne.n	80047fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800479c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a4:	2200      	movs	r2, #0
 80047a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f88c 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d021      	beq.n	80047fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e062      	b.n	80048c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b04      	cmp	r3, #4
 8004806:	d149      	bne.n	800489c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f856 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d03c      	beq.n	800489c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	623b      	str	r3, [r7, #32]
   return(result);
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004840:	633b      	str	r3, [r7, #48]	@ 0x30
 8004842:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	60fb      	str	r3, [r7, #12]
   return(result);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	617b      	str	r3, [r7, #20]
   return(result);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e011      	b.n	80048c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3758      	adds	r7, #88	@ 0x58
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d8:	e049      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d045      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fc faf7 	bl	8000ed4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e048      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d031      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d110      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2208      	movs	r2, #8
 800491e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f8ff 	bl	8004b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2208      	movs	r2, #8
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e029      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004948:	d111      	bne.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f8e5 	bl	8004b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e00f      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	429a      	cmp	r2, r3
 800498a:	d0a6      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b096      	sub	sp, #88	@ 0x58
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2222      	movs	r2, #34	@ 0x22
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d028      	beq.n	8004a1e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d0:	4a3e      	ldr	r2, [pc, #248]	@ (8004acc <UART_Start_Receive_DMA+0x134>)
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ad0 <UART_Start_Receive_DMA+0x138>)
 80049da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad4 <UART_Start_Receive_DMA+0x13c>)
 80049e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e8:	2200      	movs	r2, #0
 80049ea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3324      	adds	r3, #36	@ 0x24
 80049f6:	4619      	mov	r1, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fc:	461a      	mov	r2, r3
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	f7fc fc0e 	bl	8001220 <HAL_DMA_Start_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e051      	b.n	8004ac2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d018      	beq.n	8004a58 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a46:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e6      	bne.n	8004a26 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a78:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e5      	bne.n	8004a58 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3308      	adds	r3, #8
 8004a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aac:	623a      	str	r2, [r7, #32]
 8004aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	69f9      	ldr	r1, [r7, #28]
 8004ab2:	6a3a      	ldr	r2, [r7, #32]
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e5      	bne.n	8004a8c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3758      	adds	r7, #88	@ 0x58
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	08004bed 	.word	0x08004bed
 8004ad0:	08004d19 	.word	0x08004d19
 8004ad4:	08004d57 	.word	0x08004d57

08004ad8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	@ 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6979      	ldr	r1, [r7, #20]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e6      	bne.n	8004ae0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004b18:	bf00      	nop
 8004b1a:	3724      	adds	r7, #36	@ 0x24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b095      	sub	sp, #84	@ 0x54
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e6      	bne.n	8004b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d118      	bne.n	8004bcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004be0:	bf00      	nop
 8004be2:	3754      	adds	r7, #84	@ 0x54
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b09c      	sub	sp, #112	@ 0x70
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d171      	bne.n	8004cec <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e6      	bne.n	8004c10 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3308      	adds	r3, #8
 8004c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	623b      	str	r3, [r7, #32]
   return(result);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3308      	adds	r3, #8
 8004c94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c96:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e5      	bne.n	8004c76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d118      	bne.n	8004cec <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e6      	bne.n	8004cba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cee:	2200      	movs	r2, #0
 8004cf0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d107      	bne.n	8004d0a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d00:	4619      	mov	r1, r3
 8004d02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d04:	f7fb fcca 	bl	800069c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d08:	e002      	b.n	8004d10 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004d0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d0c:	f7ff f9bc 	bl	8004088 <HAL_UART_RxCpltCallback>
}
 8004d10:	bf00      	nop
 8004d12:	3770      	adds	r7, #112	@ 0x70
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d109      	bne.n	8004d48 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7fb fcab 	bl	800069c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d46:	e002      	b.n	8004d4e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff f9a7 	bl	800409c <HAL_UART_RxHalfCpltCallback>
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b086      	sub	sp, #24
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7c:	2b80      	cmp	r3, #128	@ 0x80
 8004d7e:	d109      	bne.n	8004d94 <UART_DMAError+0x3e>
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b21      	cmp	r3, #33	@ 0x21
 8004d84:	d106      	bne.n	8004d94 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004d8e:	6978      	ldr	r0, [r7, #20]
 8004d90:	f7ff fea2 	bl	8004ad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d109      	bne.n	8004db6 <UART_DMAError+0x60>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b22      	cmp	r3, #34	@ 0x22
 8004da6:	d106      	bne.n	8004db6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004db0:	6978      	ldr	r0, [r7, #20]
 8004db2:	f7ff feb7 	bl	8004b24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dbc:	f043 0210 	orr.w	r2, r3, #16
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7ff f972 	bl	80040b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff f95c 	bl	80040b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff f914 	bl	8004074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4c:	bf00      	nop
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	@ 0x30
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d142      	bne.n	8004f06 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e03b      	b.n	8004f08 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fd78 	bl	8004998 <UART_Start_Receive_DMA>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d124      	bne.n	8004f00 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d11d      	bne.n	8004efa <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2210      	movs	r2, #16
 8004ec4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f043 0310 	orr.w	r3, r3, #16
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6a39      	ldr	r1, [r7, #32]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e6      	bne.n	8004ec6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004ef8:	e002      	b.n	8004f00 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f04:	e000      	b.n	8004f08 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3730      	adds	r7, #48	@ 0x30
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <memset>:
 8004f10:	4402      	add	r2, r0
 8004f12:	4603      	mov	r3, r0
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d100      	bne.n	8004f1a <memset+0xa>
 8004f18:	4770      	bx	lr
 8004f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1e:	e7f9      	b.n	8004f14 <memset+0x4>

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4d0d      	ldr	r5, [pc, #52]	@ (8004f58 <__libc_init_array+0x38>)
 8004f24:	4c0d      	ldr	r4, [pc, #52]	@ (8004f5c <__libc_init_array+0x3c>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	42a6      	cmp	r6, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	4d0b      	ldr	r5, [pc, #44]	@ (8004f60 <__libc_init_array+0x40>)
 8004f32:	4c0c      	ldr	r4, [pc, #48]	@ (8004f64 <__libc_init_array+0x44>)
 8004f34:	f000 f818 	bl	8004f68 <_init>
 8004f38:	1b64      	subs	r4, r4, r5
 8004f3a:	10a4      	asrs	r4, r4, #2
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	42a6      	cmp	r6, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f48:	4798      	blx	r3
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f52:	4798      	blx	r3
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	08004fd0 	.word	0x08004fd0
 8004f5c:	08004fd0 	.word	0x08004fd0
 8004f60:	08004fd0 	.word	0x08004fd0
 8004f64:	08004fd4 	.word	0x08004fd4

08004f68 <_init>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr

08004f74 <_fini>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	bf00      	nop
 8004f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	469e      	mov	lr, r3
 8004f7e:	4770      	bx	lr
